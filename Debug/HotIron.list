
HotIron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d51c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bfc  0800d628  0800d628  0001d628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f224  0800f224  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  0800f224  0800f224  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f224  0800f224  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f224  0800f224  0001f224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f228  0800f228  0001f228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800f22c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001488  20000218  0800f444  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016a0  0800f444  000216a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d14d  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004017  00000000  00000000  0003d38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  000413a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  000427a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6e3  00000000  00000000  000439e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c3f  00000000  00000000  0005f0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090132  00000000  00000000  00077d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107e3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055ec  00000000  00000000  00107e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000218 	.word	0x20000218
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d610 	.word	0x0800d610

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000021c 	.word	0x2000021c
 8000148:	0800d610 	.word	0x0800d610

0800014c <delay_init>:
#include "main.h"

TIM_HandleTypeDef * htim;

void delay_init(TIM_HandleTypeDef * htim_i)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	htim = htim_i;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <delay_init+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htim);
 800015a:	4b04      	ldr	r3, [pc, #16]	; (800016c <delay_init+0x20>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4618      	mov	r0, r3
 8000160:	f006 fed4 	bl	8006f0c <HAL_TIM_Base_Start>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000528 	.word	0x20000528

08000170 <delay_us>:

// delays for us count
void delay_us(uint16_t us)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim,0);
 800017a:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <delay_us+0x34>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2200      	movs	r2, #0
 8000182:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(htim) < us);
 8000184:	bf00      	nop
 8000186:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <delay_us+0x34>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800018e:	b29b      	uxth	r3, r3
 8000190:	88fa      	ldrh	r2, [r7, #6]
 8000192:	429a      	cmp	r2, r3
 8000194:	d8f7      	bhi.n	8000186 <delay_us+0x16>
}
 8000196:	bf00      	nop
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000528 	.word	0x20000528

080001a8 <lcd_create>:
 */
LCD_HandleTypeDef lcd_create(
		LCD_PortType port[], LCD_PinType pin[],
		LCD_PortType rs_port, LCD_PinType rs_pin,
		LCD_PortType en_port, LCD_PinType en_pin, LCD_ModeTypeDef mode)
{
 80001a8:	b5b0      	push	{r4, r5, r7, lr}
 80001aa:	b08a      	sub	sp, #40	; 0x28
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
 80001b4:	603b      	str	r3, [r7, #0]
	LCD_HandleTypeDef lcd;

	lcd.mode = mode;
 80001b6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80001ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80001be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80001c2:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80001c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001c6:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80001c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80001ca:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	613b      	str	r3, [r7, #16]

	delay_us(20000); // Display needs about 10ms to start, so you should provide delay
 80001d8:	f644 6020 	movw	r0, #20000	; 0x4e20
 80001dc:	f7ff ffc8 	bl	8000170 <delay_us>

	lcd_init(&lcd);
 80001e0:	f107 0310 	add.w	r3, r7, #16
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f80f 	bl	8000208 <lcd_init>

	return lcd;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	461d      	mov	r5, r3
 80001ee:	f107 0410 	add.w	r4, r7, #16
 80001f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001fa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001fe:	68f8      	ldr	r0, [r7, #12]
 8000200:	3728      	adds	r7, #40	; 0x28
 8000202:	46bd      	mov	sp, r7
 8000204:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000208 <lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void lcd_init(LCD_HandleTypeDef * lcd)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	7d9b      	ldrb	r3, [r3, #22]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d10f      	bne.n	8000238 <lcd_init+0x30>
	{
			lcd_write_command(lcd, 0x33);
 8000218:	2133      	movs	r1, #51	; 0x33
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f000 f8d4 	bl	80003c8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000220:	2132      	movs	r1, #50	; 0x32
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f8d0 	bl	80003c8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000228:	2128      	movs	r1, #40	; 0x28
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f8cc 	bl	80003c8 <lcd_write_command>
			lcd_8line_mode = false;
 8000230:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <lcd_init+0x60>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	e006      	b.n	8000246 <lcd_init+0x3e>
	}
	else
	{
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000238:	2138      	movs	r1, #56	; 0x38
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f000 f8c4 	bl	80003c8 <lcd_write_command>
		lcd_8line_mode = true;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <lcd_init+0x60>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
	}


	lcd_clear(lcd);											// Clear screen
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f000 f88c 	bl	8000364 <lcd_clear>
	lcd_mode(lcd, LCD_ENABLE, CURSOR_DISABLE, NO_BLINK);
 800024c:	2300      	movs	r3, #0
 800024e:	2200      	movs	r2, #0
 8000250:	2101      	movs	r1, #1
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 f80a 	bl	800026c <lcd_mode>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000258:	2106      	movs	r1, #6
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	f000 f8b4 	bl	80003c8 <lcd_write_command>
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000000 	.word	0x20000000

0800026c <lcd_mode>:

/**
 * Set display & cursor mode
 */
void lcd_mode(LCD_HandleTypeDef * lcd, LCD_ONOFF state, LCD_CURSOR cursor, LCD_BLINK blink)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	4608      	mov	r0, r1
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	4603      	mov	r3, r0
 800027c:	70fb      	strb	r3, [r7, #3]
 800027e:	460b      	mov	r3, r1
 8000280:	70bb      	strb	r3, [r7, #2]
 8000282:	4613      	mov	r3, r2
 8000284:	707b      	strb	r3, [r7, #1]
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL |
								 (state ?OPT_D:0) |
 8000286:	78fb      	ldrb	r3, [r7, #3]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <lcd_mode+0x24>
 800028c:	220c      	movs	r2, #12
 800028e:	e000      	b.n	8000292 <lcd_mode+0x26>
 8000290:	2208      	movs	r2, #8
 8000292:	78bb      	ldrb	r3, [r7, #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <lcd_mode+0x30>
 8000298:	2302      	movs	r3, #2
 800029a:	e000      	b.n	800029e <lcd_mode+0x32>
 800029c:	2300      	movs	r3, #0
 800029e:	4313      	orrs	r3, r2
 80002a0:	b25a      	sxtb	r2, r3
								 (cursor?OPT_C:0) |
								 (blink ?OPT_B:0));
 80002a2:	787b      	ldrb	r3, [r7, #1]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	bf14      	ite	ne
 80002a8:	2301      	movne	r3, #1
 80002aa:	2300      	moveq	r3, #0
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	b25b      	sxtb	r3, r3
								 (cursor?OPT_C:0) |
 80002b0:	4313      	orrs	r3, r2
 80002b2:	b25b      	sxtb	r3, r3
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL |
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4619      	mov	r1, r3
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f885 	bl	80003c8 <lcd_write_command>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <lcd_out>:

/**
 * Write a string on the current position
 */
void lcd_out(LCD_HandleTypeDef * lcd, uint8_t * arr, uint8_t length)
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b086      	sub	sp, #24
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	60f8      	str	r0, [r7, #12]
 80002ce:	60b9      	str	r1, [r7, #8]
 80002d0:	4613      	mov	r3, r2
 80002d2:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < length; i++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e00a      	b.n	80002f0 <lcd_out+0x2a>
	{
		lcd_write_data(lcd, arr[i]);
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	4413      	add	r3, r2
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	4619      	mov	r1, r3
 80002e4:	68f8      	ldr	r0, [r7, #12]
 80002e6:	f000 f8a9 	bl	800043c <lcd_write_data>
	for (int i = 0; i < length; i++)
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	3301      	adds	r3, #1
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	697a      	ldr	r2, [r7, #20]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	dbf0      	blt.n	80002da <lcd_out+0x14>
	}
}
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <lcd_string>:

/**
 * Write a string on the current position
 */
void lcd_string(LCD_HandleTypeDef * lcd, char * string)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b082      	sub	sp, #8
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	6039      	str	r1, [r7, #0]
	while (*string)
 800030c:	e007      	b.n	800031e <lcd_string+0x1c>
	{
		lcd_write_data(lcd, (uint8_t)*(string++));
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	1c5a      	adds	r2, r3, #1
 8000312:	603a      	str	r2, [r7, #0]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4619      	mov	r1, r3
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 f88f 	bl	800043c <lcd_write_data>
	while (*string)
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d1f3      	bne.n	800030e <lcd_string+0xc>
	}
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <lcd_set_xy>:

/**
 * Set the cursor position
 */
void lcd_set_xy(LCD_HandleTypeDef * lcd, uint8_t x, uint8_t y)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
 800033c:	4613      	mov	r3, r2
 800033e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[y] + x);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[y] + x);
 8000340:	78bb      	ldrb	r3, [r7, #2]
 8000342:	4a07      	ldr	r2, [pc, #28]	; (8000360 <lcd_set_xy+0x30>)
 8000344:	5cd2      	ldrb	r2, [r2, r3]
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	4413      	add	r3, r2
 800034a:	b2db      	uxtb	r3, r3
 800034c:	3b80      	subs	r3, #128	; 0x80
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4619      	mov	r1, r3
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 f838 	bl	80003c8 <lcd_write_command>
	#endif
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800d8f4 	.word	0x0800d8f4

08000364 <lcd_clear>:

/**
 * Clear the screen
 */
void lcd_clear(LCD_HandleTypeDef * lcd) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800036c:	2101      	movs	r1, #1
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f000 f82a 	bl	80003c8 <lcd_write_command>
	delay_us(maxi_delay);
 8000374:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000378:	f7ff fefa 	bl	8000170 <delay_us>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <lcd_define_chars>:
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
}

// load all 8 chars
void lcd_define_chars(LCD_HandleTypeDef * lcd, uint8_t bitmap[]){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
	lcd_write_command(lcd, SETCGRAM_ADDR);
 800038e:	2140      	movs	r1, #64	; 0x40
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f000 f819 	bl	80003c8 <lcd_write_command>
	for(uint8_t i=0;i<64;++i){
 8000396:	2300      	movs	r3, #0
 8000398:	73fb      	strb	r3, [r7, #15]
 800039a:	e00a      	b.n	80003b2 <lcd_define_chars+0x2e>
		lcd_write_data(lcd, bitmap[i]);
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	683a      	ldr	r2, [r7, #0]
 80003a0:	4413      	add	r3, r2
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	4619      	mov	r1, r3
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f000 f848 	bl	800043c <lcd_write_data>
	for(uint8_t i=0;i<64;++i){
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	3301      	adds	r3, #1
 80003b0:	73fb      	strb	r3, [r7, #15]
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	2b3f      	cmp	r3, #63	; 0x3f
 80003b6:	d9f1      	bls.n	800039c <lcd_define_chars+0x18>
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f000 f804 	bl	80003c8 <lcd_write_command>
}
 80003c0:	bf00      	nop
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(LCD_HandleTypeDef * lcd, uint8_t command)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6898      	ldr	r0, [r3, #8]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	899b      	ldrh	r3, [r3, #12]
 80003dc:	2200      	movs	r2, #0
 80003de:	4619      	mov	r1, r3
 80003e0:	f004 f8e3 	bl	80045aa <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	7d9b      	ldrb	r3, [r3, #22]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d118      	bne.n	800041e <lcd_write_command+0x56>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80003ec:	78fb      	ldrb	r3, [r7, #3]
 80003ee:	091b      	lsrs	r3, r3, #4
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	2204      	movs	r2, #4
 80003f4:	4619      	mov	r1, r3
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f000 f85a 	bl	80004b0 <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <lcd_write_command+0x70>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d002      	beq.n	800040a <lcd_write_command+0x42>
 8000404:	202a      	movs	r0, #42	; 0x2a
 8000406:	f7ff feb3 	bl	8000170 <delay_us>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	f003 030f 	and.w	r3, r3, #15
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2204      	movs	r2, #4
 8000414:	4619      	mov	r1, r3
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f000 f84a 	bl	80004b0 <lcd_write>
 800041c:	e005      	b.n	800042a <lcd_write_command+0x62>
	}
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
 800041e:	78fb      	ldrb	r3, [r7, #3]
 8000420:	2208      	movs	r2, #8
 8000422:	4619      	mov	r1, r3
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f000 f843 	bl	80004b0 <lcd_write>
	}
	delay_us(mini_delay);
 800042a:	202a      	movs	r0, #42	; 0x2a
 800042c:	f7ff fea0 	bl	8000170 <delay_us>
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000000 	.word	0x20000000

0800043c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(LCD_HandleTypeDef * lcd, uint8_t data)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6898      	ldr	r0, [r3, #8]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	899b      	ldrh	r3, [r3, #12]
 8000450:	2201      	movs	r2, #1
 8000452:	4619      	mov	r1, r3
 8000454:	f004 f8a9 	bl	80045aa <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	7d9b      	ldrb	r3, [r3, #22]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d118      	bne.n	8000492 <lcd_write_data+0x56>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	091b      	lsrs	r3, r3, #4
 8000464:	b2db      	uxtb	r3, r3
 8000466:	2204      	movs	r2, #4
 8000468:	4619      	mov	r1, r3
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f000 f820 	bl	80004b0 <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <lcd_write_data+0x70>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d002      	beq.n	800047e <lcd_write_data+0x42>
 8000478:	202a      	movs	r0, #42	; 0x2a
 800047a:	f7ff fe79 	bl	8000170 <delay_us>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800047e:	78fb      	ldrb	r3, [r7, #3]
 8000480:	f003 030f 	and.w	r3, r3, #15
 8000484:	b2db      	uxtb	r3, r3
 8000486:	2204      	movs	r2, #4
 8000488:	4619      	mov	r1, r3
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f000 f810 	bl	80004b0 <lcd_write>
 8000490:	e005      	b.n	800049e <lcd_write_data+0x62>
	}
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	2208      	movs	r2, #8
 8000496:	4619      	mov	r1, r3
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f000 f809 	bl	80004b0 <lcd_write>
	}
	delay_us(mini_delay);
 800049e:	202a      	movs	r0, #42	; 0x2a
 80004a0:	f7ff fe66 	bl	8000170 <delay_us>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000000 	.word	0x20000000

080004b0 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(LCD_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
 80004bc:	4613      	mov	r3, r2
 80004be:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]
 80004c4:	e019      	b.n	80004fa <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	4413      	add	r3, r2
 80004d0:	6818      	ldr	r0, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	4413      	add	r3, r2
 80004dc:	8819      	ldrh	r1, [r3, #0]
 80004de:	78fa      	ldrb	r2, [r7, #3]
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	fa42 f303 	asr.w	r3, r2, r3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	f004 f85b 	bl	80045aa <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	3301      	adds	r3, #1
 80004f8:	73fb      	strb	r3, [r7, #15]
 80004fa:	7bfa      	ldrb	r2, [r7, #15]
 80004fc:	78bb      	ldrb	r3, [r7, #2]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d3e1      	bcc.n	80004c6 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6918      	ldr	r0, [r3, #16]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	8a9b      	ldrh	r3, [r3, #20]
 800050a:	2201      	movs	r2, #1
 800050c:	4619      	mov	r1, r3
 800050e:	f004 f84c 	bl	80045aa <HAL_GPIO_WritePin>
	DELAY_US(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff fe2c 	bl	8000170 <delay_us>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6918      	ldr	r0, [r3, #16]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	8a9b      	ldrh	r3, [r3, #20]
 8000520:	2200      	movs	r2, #0
 8000522:	4619      	mov	r1, r3
 8000524:	f004 f841 	bl	80045aa <HAL_GPIO_WritePin>
	DELAY_US(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff fe21 	bl	8000170 <delay_us>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <int2string>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void int2string(uint32_t digit, uint8_t * buf, uint8_t len)
{
 8000538:	b480      	push	{r7}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	4613      	mov	r3, r2
 8000544:	71fb      	strb	r3, [r7, #7]
	for (int i = len - 1; i >= 0; i--)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	3b01      	subs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	e027      	b.n	800059e <int2string+0x66>
	{
		if (digit || (i == (len-1)))
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d104      	bne.n	800055e <int2string+0x26>
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	3b01      	subs	r3, #1
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	429a      	cmp	r2, r3
 800055c:	d117      	bne.n	800058e <int2string+0x56>
		{
			buf[i] = digit % 10 + '0';
 800055e:	68f9      	ldr	r1, [r7, #12]
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <int2string+0x78>)
 8000562:	fba3 2301 	umull	r2, r3, r3, r1
 8000566:	08da      	lsrs	r2, r3, #3
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	1aca      	subs	r2, r1, r3
 8000572:	b2d2      	uxtb	r2, r2
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	68b9      	ldr	r1, [r7, #8]
 8000578:	440b      	add	r3, r1
 800057a:	3230      	adds	r2, #48	; 0x30
 800057c:	b2d2      	uxtb	r2, r2
 800057e:	701a      	strb	r2, [r3, #0]
			digit /= 10;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <int2string+0x78>)
 8000584:	fba2 2303 	umull	r2, r3, r2, r3
 8000588:	08db      	lsrs	r3, r3, #3
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	e004      	b.n	8000598 <int2string+0x60>
		}
		else
			buf[i] = ' ';
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	4413      	add	r3, r2
 8000594:	2220      	movs	r2, #32
 8000596:	701a      	strb	r2, [r3, #0]
	for (int i = len - 1; i >= 0; i--)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3b01      	subs	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dad4      	bge.n	800054e <int2string+0x16>
	}
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	371c      	adds	r7, #28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	cccccccd 	.word	0xcccccccd

080005b4 <int2time>:
 * converts int to time string
 * @param time - time in msec
 * @param buf - provide buffer for 5 positions
 */
char * int2time(uint32_t time, uint8_t * buf)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	buf[4] = '\0';
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	3304      	adds	r3, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	if (time >= 600)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80005cc:	d31e      	bcc.n	800060c <int2time+0x58>
	{
		// display time in minutes
		buf[3] = 'm';
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	3303      	adds	r3, #3
 80005d2:	226d      	movs	r2, #109	; 0x6d
 80005d4:	701a      	strb	r2, [r3, #0]
		time /= 60;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <int2time+0xd0>)
 80005da:	fba2 2303 	umull	r2, r3, r2, r3
 80005de:	095b      	lsrs	r3, r3, #5
 80005e0:	607b      	str	r3, [r7, #4]
		if (time >= 999)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f240 32e6 	movw	r2, #998	; 0x3e6
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d909      	bls.n	8000600 <int2time+0x4c>
		{
			global_error |= errTIMEOUT;
 80005ec:	4b26      	ldr	r3, [pc, #152]	; (8000688 <int2time+0xd4>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	f043 0320 	orr.w	r3, r3, #32
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b24      	ldr	r3, [pc, #144]	; (8000688 <int2time+0xd4>)
 80005f8:	701a      	strb	r2, [r3, #0]
			time = 999;
 80005fa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80005fe:	607b      	str	r3, [r7, #4]
		}
		int2string(time, buf, 3);
 8000600:	2203      	movs	r2, #3
 8000602:	6839      	ldr	r1, [r7, #0]
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff97 	bl	8000538 <int2string>
 800060a:	e035      	b.n	8000678 <int2time+0xc4>
	} else
	{
		buf[1] = ':';
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	223a      	movs	r2, #58	; 0x3a
 8000612:	701a      	strb	r2, [r3, #0]
		buf[3] = time % 10 + '0';
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <int2time+0xd8>)
 8000618:	fba3 2301 	umull	r2, r3, r3, r1
 800061c:	08da      	lsrs	r2, r3, #3
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	1aca      	subs	r2, r1, r3
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	3303      	adds	r3, #3
 800062e:	3230      	adds	r2, #48	; 0x30
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	701a      	strb	r2, [r3, #0]
		time /= 10;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a15      	ldr	r2, [pc, #84]	; (800068c <int2time+0xd8>)
 8000638:	fba2 2303 	umull	r2, r3, r2, r3
 800063c:	08db      	lsrs	r3, r3, #3
 800063e:	607b      	str	r3, [r7, #4]
		buf[2] = time % 6 + '0';
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <int2time+0xdc>)
 8000644:	fba3 2301 	umull	r2, r3, r3, r1
 8000648:	089a      	lsrs	r2, r3, #2
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	1aca      	subs	r2, r1, r3
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	3302      	adds	r3, #2
 800065a:	3230      	adds	r2, #48	; 0x30
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	701a      	strb	r2, [r3, #0]
		time /= 6;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <int2time+0xdc>)
 8000664:	fba2 2303 	umull	r2, r3, r2, r3
 8000668:	089b      	lsrs	r3, r3, #2
 800066a:	607b      	str	r3, [r7, #4]
		buf[0] = time + '0';
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	3330      	adds	r3, #48	; 0x30
 8000672:	b2da      	uxtb	r2, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	701a      	strb	r2, [r3, #0]
	}
	return (char *)buf;
 8000678:	683b      	ldr	r3, [r7, #0]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	88888889 	.word	0x88888889
 8000688:	20000234 	.word	0x20000234
 800068c:	cccccccd 	.word	0xcccccccd
 8000690:	aaaaaaab 	.word	0xaaaaaaab

08000694 <init_lcd>:
	scDOT = 0xA5, // big dot in the middle
	scSIGMA = 0xF6, // sigma
};

void init_lcd(void)
{
 8000694:	b5b0      	push	{r4, r5, r7, lr}
 8000696:	b09a      	sub	sp, #104	; 0x68
 8000698:	af04      	add	r7, sp, #16
	  lcd = lcd_create(ports, pins,
 800069a:	4c25      	ldr	r4, [pc, #148]	; (8000730 <init_lcd+0x9c>)
 800069c:	4638      	mov	r0, r7
 800069e:	2300      	movs	r3, #0
 80006a0:	9303      	str	r3, [sp, #12]
 80006a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <init_lcd+0xa0>)
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <init_lcd+0xa0>)
 80006b4:	4a20      	ldr	r2, [pc, #128]	; (8000738 <init_lcd+0xa4>)
 80006b6:	4921      	ldr	r1, [pc, #132]	; (800073c <init_lcd+0xa8>)
 80006b8:	f7ff fd76 	bl	80001a8 <lcd_create>
 80006bc:	4625      	mov	r5, r4
 80006be:	463c      	mov	r4, r7
 80006c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006c8:	e885 0003 	stmia.w	r5, {r0, r1}
						hd_E_GPIO_Port, hd_E_Pin,
						LCD_4_BIT_MODE);

	  /* load symbols */

	  uint8_t symbols [] = {
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <init_lcd+0xac>)
 80006ce:	f107 0418 	add.w	r4, r7, #24
 80006d2:	461d      	mov	r5, r3
 80006d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			  	  	  	  	0x0, 0xe, 0x11, 0x15, 0x11, 0xe, 0x0, 0x0, // OFF
//			  	  	  	  	0x0, 0x4, 0x15, 0x15, 0x11, 0xe, 0x0, 0x0, // ON
//							0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x15, 0x0,   // ellips
//							0x0, 0x0, 0xa, 0x1f, 0xe, 0x4, 0x0, 0x0, // heart
	  };
	  lcd_define_chars(&lcd, symbols);
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4619      	mov	r1, r3
 80006ee:	4810      	ldr	r0, [pc, #64]	; (8000730 <init_lcd+0x9c>)
 80006f0:	f7ff fe48 	bl	8000384 <lcd_define_chars>
	  lcd_set_xy(&lcd, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <init_lcd+0x9c>)
 80006fa:	f7ff fe19 	bl	8000330 <lcd_set_xy>
	  lcd_string(&lcd, "Maksim Jeskevic ");
 80006fe:	4911      	ldr	r1, [pc, #68]	; (8000744 <init_lcd+0xb0>)
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <init_lcd+0x9c>)
 8000702:	f7ff fdfe 	bl	8000302 <lcd_string>
	  lcd_set_xy(&lcd, 0, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	2100      	movs	r1, #0
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <init_lcd+0x9c>)
 800070c:	f7ff fe10 	bl	8000330 <lcd_set_xy>
	  lcd_string(&lcd, "         2021 08");
 8000710:	490d      	ldr	r1, [pc, #52]	; (8000748 <init_lcd+0xb4>)
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <init_lcd+0x9c>)
 8000714:	f7ff fdf5 	bl	8000302 <lcd_string>
	  HAL_Delay(1500);
 8000718:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800071c:	f003 fa14 	bl	8003b48 <HAL_Delay>
	  lcd_clear(&lcd);
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <init_lcd+0x9c>)
 8000722:	f7ff fe1f 	bl	8000364 <lcd_clear>
}
 8000726:	bf00      	nop
 8000728:	3758      	adds	r7, #88	; 0x58
 800072a:	46bd      	mov	sp, r7
 800072c:	bdb0      	pop	{r4, r5, r7, pc}
 800072e:	bf00      	nop
 8000730:	20000570 	.word	0x20000570
 8000734:	40010c00 	.word	0x40010c00
 8000738:	20000014 	.word	0x20000014
 800073c:	20000004 	.word	0x20000004
 8000740:	0800d650 	.word	0x0800d650
 8000744:	0800d628 	.word	0x0800d628
 8000748:	0800d63c 	.word	0x0800d63c

0800074c <do_button>:
/**
 * updates button state, checks if button long pressed
 * also updates encoder value register
 */
void do_button(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
	const uint32_t time_for_long_press = 700;
 8000752:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000756:	607b      	str	r3, [r7, #4]
	static uint32_t last_time = 0;
	static bool last_button = false;
	static uint32_t but_time = 0;
	if (HAL_GetTick() - last_time < 20)
 8000758:	f003 f9ec 	bl	8003b34 <HAL_GetTick>
 800075c:	4602      	mov	r2, r0
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <do_button+0xa0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	2b13      	cmp	r3, #19
 8000766:	d93d      	bls.n	80007e4 <do_button+0x98>
		return;
	encoder.pressed = !HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin);
 8000768:	2108      	movs	r1, #8
 800076a:	4821      	ldr	r0, [pc, #132]	; (80007f0 <do_button+0xa4>)
 800076c:	f003 ff06 	bl	800457c <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf0c      	ite	eq
 8000776:	2301      	moveq	r3, #1
 8000778:	2300      	movne	r3, #0
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <do_button+0xa8>)
 800077e:	709a      	strb	r2, [r3, #2]
	if (encoder.pressed)
 8000780:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <do_button+0xa8>)
 8000782:	789b      	ldrb	r3, [r3, #2]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d018      	beq.n	80007ba <do_button+0x6e>
	{
		if (!last_button)
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <do_button+0xac>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d004      	beq.n	80007a0 <do_button+0x54>
			but_time = HAL_GetTick();
 8000796:	f003 f9cd 	bl	8003b34 <HAL_GetTick>
 800079a:	4603      	mov	r3, r0
 800079c:	4a17      	ldr	r2, [pc, #92]	; (80007fc <do_button+0xb0>)
 800079e:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - but_time > time_for_long_press)
 80007a0:	f003 f9c8 	bl	8003b34 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <do_button+0xb0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d206      	bcs.n	80007c0 <do_button+0x74>
			encoder.long_press = true;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <do_button+0xa8>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	70da      	strb	r2, [r3, #3]
 80007b8:	e002      	b.n	80007c0 <do_button+0x74>
	}
	else
		encoder.long_press = false;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <do_button+0xa8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	70da      	strb	r2, [r3, #3]
	last_button = encoder.pressed;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <do_button+0xa8>)
 80007c2:	789a      	ldrb	r2, [r3, #2]
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <do_button+0xac>)
 80007c6:	701a      	strb	r2, [r3, #0]

	/**
	 * reads register value and drops non-significant byte
	 * also inverts direction of encoder
	 */
	encoder.value = (-((int16_t)(TIM3->CNT)))>>1;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <do_button+0xb4>)
 80007ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007cc:	b21b      	sxth	r3, r3
 80007ce:	425b      	negs	r3, r3
 80007d0:	105b      	asrs	r3, r3, #1
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <do_button+0xa8>)
 80007d6:	801a      	strh	r2, [r3, #0]

	last_time = HAL_GetTick();
 80007d8:	f003 f9ac 	bl	8003b34 <HAL_GetTick>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a03      	ldr	r2, [pc, #12]	; (80007ec <do_button+0xa0>)
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	e000      	b.n	80007e6 <do_button+0x9a>
		return;
 80007e4:	bf00      	nop
}
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000250 	.word	0x20000250
 80007f0:	40010c00 	.word	0x40010c00
 80007f4:	20000238 	.word	0x20000238
 80007f8:	20000254 	.word	0x20000254
 80007fc:	20000258 	.word	0x20000258
 8000800:	40000400 	.word	0x40000400

08000804 <do_blink>:

void do_blink(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 500)
 8000808:	f003 f994 	bl	8003b34 <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <do_blink+0x30>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000818:	d30a      	bcc.n	8000830 <do_blink+0x2c>
		return;
	last_time = HAL_GetTick();
 800081a:	f003 f98b 	bl	8003b34 <HAL_GetTick>
 800081e:	4603      	mov	r3, r0
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <do_blink+0x30>)
 8000822:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <do_blink+0x34>)
 800082a:	f003 fed6 	bl	80045da <HAL_GPIO_TogglePin>
 800082e:	e000      	b.n	8000832 <do_blink+0x2e>
		return;
 8000830:	bf00      	nop
}
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000025c 	.word	0x2000025c
 8000838:	40011000 	.word	0x40011000

0800083c <get_max6675>:
/**
 * read temperature from max6675
 * and check for validity
 */
void get_max6675(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	uint16_t data;
	HAL_SPI_ReceiveOnly(&hspi1, (uint8_t*)(&data), 1, 100);
 8000842:	1db9      	adds	r1, r7, #6
 8000844:	2364      	movs	r3, #100	; 0x64
 8000846:	2201      	movs	r2, #1
 8000848:	4810      	ldr	r0, [pc, #64]	; (800088c <get_max6675+0x50>)
 800084a:	f002 fda5 	bl	8003398 <HAL_SPI_ReceiveOnly>

	MAX6675.data_valid = !(data & 0b110);
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	f003 0306 	and.w	r3, r3, #6
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf0c      	ite	eq
 8000858:	2301      	moveq	r3, #1
 800085a:	2300      	movne	r3, #0
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <get_max6675+0x54>)
 8000860:	725a      	strb	r2, [r3, #9]
	MAX6675.temperature = data >> 3;
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <get_max6675+0x54>)
 800086a:	801a      	strh	r2, [r3, #0]
	if (!(MAX6675.data_valid))
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <get_max6675+0x54>)
 800086e:	7a5b      	ldrb	r3, [r3, #9]
 8000870:	f083 0301 	eor.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d003      	beq.n	8000882 <get_max6675+0x46>
		MAX6675.temperature = 0xfff;
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <get_max6675+0x54>)
 800087c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000880:	801a      	strh	r2, [r3, #0]
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000066c 	.word	0x2000066c
 8000890:	2000023c 	.word	0x2000023c

08000894 <ascii_max6675>:

void ascii_max6675(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
	if (MAX6675.data_valid)
 800089a:	4b48      	ldr	r3, [pc, #288]	; (80009bc <ascii_max6675+0x128>)
 800089c:	7a5b      	ldrb	r3, [r3, #9]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d074      	beq.n	800098c <ascii_max6675+0xf8>
		{
			uint32_t digit = 25*(MAX6675.temperature&0b11);
 80008a2:	4b46      	ldr	r3, [pc, #280]	; (80009bc <ascii_max6675+0x128>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	f003 0203 	and.w	r2, r3, #3
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	009a      	lsls	r2, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
			digit += (MAX6675.temperature>>2)*1000;
 80008b6:	4b41      	ldr	r3, [pc, #260]	; (80009bc <ascii_max6675+0x128>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	089b      	lsrs	r3, r3, #2
 80008bc:	b29b      	uxth	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c4:	fb03 f302 	mul.w	r3, r3, r2
 80008c8:	461a      	mov	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	4413      	add	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]
			int8_t i = 6;
 80008d0:	2306      	movs	r3, #6
 80008d2:	72fb      	strb	r3, [r7, #11]
			while (digit)
 80008d4:	e01b      	b.n	800090e <ascii_max6675+0x7a>
			{
				MAX6675.ascii[i--] = '0' + digit%10;
 80008d6:	68f9      	ldr	r1, [r7, #12]
 80008d8:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <ascii_max6675+0x12c>)
 80008da:	fba3 2301 	umull	r2, r3, r3, r1
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	1aca      	subs	r2, r1, r3
 80008ea:	b2d3      	uxtb	r3, r2
 80008ec:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80008f0:	b2ca      	uxtb	r2, r1
 80008f2:	3a01      	subs	r2, #1
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	72fa      	strb	r2, [r7, #11]
 80008f8:	3330      	adds	r3, #48	; 0x30
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <ascii_max6675+0x128>)
 80008fe:	440b      	add	r3, r1
 8000900:	709a      	strb	r2, [r3, #2]
				digit /= 10;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	4a2e      	ldr	r2, [pc, #184]	; (80009c0 <ascii_max6675+0x12c>)
 8000906:	fba2 2303 	umull	r2, r3, r2, r3
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	60fb      	str	r3, [r7, #12]
			while (digit)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1e0      	bne.n	80008d6 <ascii_max6675+0x42>
			}
			while (i >= 0)
 8000914:	e018      	b.n	8000948 <ascii_max6675+0xb4>
			{
				if (i > 2)
 8000916:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800091a:	2b02      	cmp	r3, #2
 800091c:	dd0a      	ble.n	8000934 <ascii_max6675+0xa0>
					MAX6675.ascii[i--] = '0';
 800091e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000922:	b2d3      	uxtb	r3, r2
 8000924:	3b01      	subs	r3, #1
 8000926:	b2db      	uxtb	r3, r3
 8000928:	72fb      	strb	r3, [r7, #11]
 800092a:	4b24      	ldr	r3, [pc, #144]	; (80009bc <ascii_max6675+0x128>)
 800092c:	4413      	add	r3, r2
 800092e:	2230      	movs	r2, #48	; 0x30
 8000930:	709a      	strb	r2, [r3, #2]
 8000932:	e009      	b.n	8000948 <ascii_max6675+0xb4>
				else
					MAX6675.ascii[i--] = ' ';
 8000934:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000938:	b2d3      	uxtb	r3, r2
 800093a:	3b01      	subs	r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	72fb      	strb	r3, [r7, #11]
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <ascii_max6675+0x128>)
 8000942:	4413      	add	r3, r2
 8000944:	2220      	movs	r2, #32
 8000946:	709a      	strb	r2, [r3, #2]
			while (i >= 0)
 8000948:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800094c:	2b00      	cmp	r3, #0
 800094e:	dae2      	bge.n	8000916 <ascii_max6675+0x82>
			}
			MAX6675.ascii[4] = '.';
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <ascii_max6675+0x128>)
 8000952:	222e      	movs	r2, #46	; 0x2e
 8000954:	719a      	strb	r2, [r3, #6]

			if (MAX6675.hot && (MAX6675.temperature < (HOT_TEMP<<2)))
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <ascii_max6675+0x128>)
 8000958:	7a9b      	ldrb	r3, [r3, #10]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d007      	beq.n	800096e <ascii_max6675+0xda>
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <ascii_max6675+0x128>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	2b9f      	cmp	r3, #159	; 0x9f
 8000964:	d803      	bhi.n	800096e <ascii_max6675+0xda>
				MAX6675.hot = false;
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <ascii_max6675+0x128>)
 8000968:	2200      	movs	r2, #0
 800096a:	729a      	strb	r2, [r3, #10]
		{
			for (int i = 0; i < sizeof(MAX6675); i ++)
				MAX6675.ascii[i] = 'x';
			MAX6675.hot = true;
		}
}
 800096c:	e020      	b.n	80009b0 <ascii_max6675+0x11c>
			else if ((!MAX6675.hot) &&
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <ascii_max6675+0x128>)
 8000970:	7a9b      	ldrb	r3, [r3, #10]
 8000972:	f083 0301 	eor.w	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d019      	beq.n	80009b0 <ascii_max6675+0x11c>
					(MAX6675.temperature > ((HOT_TEMP + HOT_HYST)<<2)))
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <ascii_max6675+0x128>)
 800097e:	881b      	ldrh	r3, [r3, #0]
			else if ((!MAX6675.hot) &&
 8000980:	2ba8      	cmp	r3, #168	; 0xa8
 8000982:	d915      	bls.n	80009b0 <ascii_max6675+0x11c>
				MAX6675.hot = true;
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <ascii_max6675+0x128>)
 8000986:	2201      	movs	r2, #1
 8000988:	729a      	strb	r2, [r3, #10]
}
 800098a:	e011      	b.n	80009b0 <ascii_max6675+0x11c>
			for (int i = 0; i < sizeof(MAX6675); i ++)
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	e008      	b.n	80009a4 <ascii_max6675+0x110>
				MAX6675.ascii[i] = 'x';
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <ascii_max6675+0x128>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	3302      	adds	r3, #2
 800099a:	2278      	movs	r2, #120	; 0x78
 800099c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(MAX6675); i ++)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3301      	adds	r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b0b      	cmp	r3, #11
 80009a8:	d9f3      	bls.n	8000992 <ascii_max6675+0xfe>
			MAX6675.hot = true;
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <ascii_max6675+0x128>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	729a      	strb	r2, [r3, #10]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	2000023c 	.word	0x2000023c
 80009c0:	cccccccd 	.word	0xcccccccd

080009c4 <do_usb>:

void do_usb(void)
{
 80009c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c6:	b0bf      	sub	sp, #252	; 0xfc
 80009c8:	af08      	add	r7, sp, #32
	if (!tick)
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <do_usb+0xa0>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	f083 0301 	eor.w	r3, r3, #1
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d140      	bne.n	8000a5a <do_usb+0x96>
		return;
	tick = false; // sync with ticks
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <do_usb+0xa0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]

	uint8_t buf[200];
	uint16_t n = snprintf((char*)buf, 200,
			"Tick: %lu; PV: %u.%02u; SP: %u; PWM: %u; P: %li; I: %li; D: %li\r",
						HAL_GetTick()/1000,
 80009de:	f003 f8a9 	bl	8003b34 <HAL_GetTick>
 80009e2:	4603      	mov	r3, r0
	uint16_t n = snprintf((char*)buf, 200,
 80009e4:	4a20      	ldr	r2, [pc, #128]	; (8000a68 <do_usb+0xa4>)
 80009e6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ea:	099d      	lsrs	r5, r3, #6
						MAX6675.temperature>>2,
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <do_usb+0xa8>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
	uint16_t n = snprintf((char*)buf, 200,
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	461e      	mov	r6, r3
						((MAX6675.temperature)&0b11)*25,
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <do_usb+0xa8>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	f003 0203 	and.w	r2, r3, #3
	uint16_t n = snprintf((char*)buf, 200,
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	009a      	lsls	r2, r3, #2
 8000a06:	4413      	add	r3, r2
 8000a08:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <do_usb+0xac>)
 8000a0a:	8812      	ldrh	r2, [r2, #0]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <do_usb+0xb0>)
 8000a10:	8812      	ldrh	r2, [r2, #0]
 8000a12:	603a      	str	r2, [r7, #0]
 8000a14:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <do_usb+0xb4>)
 8000a16:	6812      	ldr	r2, [r2, #0]
 8000a18:	4917      	ldr	r1, [pc, #92]	; (8000a78 <do_usb+0xb4>)
 8000a1a:	6849      	ldr	r1, [r1, #4]
 8000a1c:	4816      	ldr	r0, [pc, #88]	; (8000a78 <do_usb+0xb4>)
 8000a1e:	6880      	ldr	r0, [r0, #8]
 8000a20:	f107 040c 	add.w	r4, r7, #12
 8000a24:	9006      	str	r0, [sp, #24]
 8000a26:	9105      	str	r1, [sp, #20]
 8000a28:	9204      	str	r2, [sp, #16]
 8000a2a:	6839      	ldr	r1, [r7, #0]
 8000a2c:	9103      	str	r1, [sp, #12]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	9202      	str	r2, [sp, #8]
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	9600      	str	r6, [sp, #0]
 8000a36:	462b      	mov	r3, r5
 8000a38:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <do_usb+0xb8>)
 8000a3a:	21c8      	movs	r1, #200	; 0xc8
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f00c f999 	bl	800cd74 <sniprintf>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
						temperature_SP,
						pwm_value,
						PID.P,
						PID.I,
						PID.D);
	CDC_Transmit_FS(buf, n);
 8000a48:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00b fd7e 	bl	800c554 <CDC_Transmit_FS>
 8000a58:	e000      	b.n	8000a5c <do_usb+0x98>
		return;
 8000a5a:	bf00      	nop
}
 8000a5c:	37dc      	adds	r7, #220	; 0xdc
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000024c 	.word	0x2000024c
 8000a68:	10624dd3 	.word	0x10624dd3
 8000a6c:	2000023c 	.word	0x2000023c
 8000a70:	2000024a 	.word	0x2000024a
 8000a74:	20000248 	.word	0x20000248
 8000a78:	200005d0 	.word	0x200005d0
 8000a7c:	0800d690 	.word	0x0800d690

08000a80 <do_peep>:

void do_peep(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	static bool last_peep = false;

	static uint8_t peep_state = 0;

	if (peep.peep & (!last_peep))
 8000a84:	4b78      	ldr	r3, [pc, #480]	; (8000c68 <do_peep+0x1e8>)
 8000a86:	785b      	ldrb	r3, [r3, #1]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b78      	ldr	r3, [pc, #480]	; (8000c6c <do_peep+0x1ec>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	f083 0301 	eor.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d00a      	beq.n	8000ab0 <do_peep+0x30>
	{
		// first time
		peep_note = 0;
 8000a9a:	4b75      	ldr	r3, [pc, #468]	; (8000c70 <do_peep+0x1f0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
		peep_state = 0;
 8000aa0:	4b74      	ldr	r3, [pc, #464]	; (8000c74 <do_peep+0x1f4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
		last_time = HAL_GetTick();
 8000aa6:	f003 f845 	bl	8003b34 <HAL_GetTick>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4a72      	ldr	r2, [pc, #456]	; (8000c78 <do_peep+0x1f8>)
 8000aae:	6013      	str	r3, [r2, #0]
	}

	if (peep.peep)
 8000ab0:	4b6d      	ldr	r3, [pc, #436]	; (8000c68 <do_peep+0x1e8>)
 8000ab2:	785b      	ldrb	r3, [r3, #1]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f000 80c5 	beq.w	8000c44 <do_peep+0x1c4>
	{
		switch (peep_state) {
 8000aba:	4b6e      	ldr	r3, [pc, #440]	; (8000c74 <do_peep+0x1f4>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	f200 80b8 	bhi.w	8000c34 <do_peep+0x1b4>
 8000ac4:	a201      	add	r2, pc, #4	; (adr r2, 8000acc <do_peep+0x4c>)
 8000ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aca:	bf00      	nop
 8000acc:	08000ae1 	.word	0x08000ae1
 8000ad0:	08000af5 	.word	0x08000af5
 8000ad4:	08000b6f 	.word	0x08000b6f
 8000ad8:	08000bd5 	.word	0x08000bd5
 8000adc:	08000beb 	.word	0x08000beb
		case 0: // init
			peep.stop = false;
 8000ae0:	4b61      	ldr	r3, [pc, #388]	; (8000c68 <do_peep+0x1e8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	709a      	strb	r2, [r3, #2]
			peep_note = 0;
 8000ae6:	4b62      	ldr	r3, [pc, #392]	; (8000c70 <do_peep+0x1f0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
			peep_state = 1;
 8000aec:	4b61      	ldr	r3, [pc, #388]	; (8000c74 <do_peep+0x1f4>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
			break;
 8000af2:	e0b2      	b.n	8000c5a <do_peep+0x1da>
		case 1: // load note and start
			if (melody[peep.melody].melody[peep_note].size) // if something to play, start PWM with DMA
 8000af4:	4b5c      	ldr	r3, [pc, #368]	; (8000c68 <do_peep+0x1e8>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <do_peep+0x1fc>)
 8000afc:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000b00:	4b5b      	ldr	r3, [pc, #364]	; (8000c70 <do_peep+0x1f0>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	460b      	mov	r3, r1
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	440b      	add	r3, r1
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	889b      	ldrh	r3, [r3, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d022      	beq.n	8000b5c <do_peep+0xdc>
			{
				HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2,
						(uint32_t *)melody[peep.melody].melody[peep_note].note,
 8000b16:	4b54      	ldr	r3, [pc, #336]	; (8000c68 <do_peep+0x1e8>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b57      	ldr	r3, [pc, #348]	; (8000c7c <do_peep+0x1fc>)
 8000b1e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000b22:	4b53      	ldr	r3, [pc, #332]	; (8000c70 <do_peep+0x1f0>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	460b      	mov	r3, r1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	440b      	add	r3, r1
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	6819      	ldr	r1, [r3, #0]
						melody[peep.melody].melody[peep_note].size);
 8000b34:	4b4c      	ldr	r3, [pc, #304]	; (8000c68 <do_peep+0x1e8>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b50      	ldr	r3, [pc, #320]	; (8000c7c <do_peep+0x1fc>)
 8000b3c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000b40:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <do_peep+0x1f0>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	4603      	mov	r3, r0
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	4403      	add	r3, r0
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
				HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2,
 8000b50:	889b      	ldrh	r3, [r3, #4]
 8000b52:	460a      	mov	r2, r1
 8000b54:	2104      	movs	r1, #4
 8000b56:	484a      	ldr	r0, [pc, #296]	; (8000c80 <do_peep+0x200>)
 8000b58:	f006 fbc6 	bl	80072e8 <HAL_TIM_PWM_Start_DMA>
			}
			last_time = HAL_GetTick();
 8000b5c:	f002 ffea 	bl	8003b34 <HAL_GetTick>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a45      	ldr	r2, [pc, #276]	; (8000c78 <do_peep+0x1f8>)
 8000b64:	6013      	str	r3, [r2, #0]
			peep_state = 2;
 8000b66:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <do_peep+0x1f4>)
 8000b68:	2202      	movs	r2, #2
 8000b6a:	701a      	strb	r2, [r3, #0]
			break;
 8000b6c:	e075      	b.n	8000c5a <do_peep+0x1da>
		case 2: // wait note length
			if (HAL_GetTick() - last_time > melody[peep.melody].melody[peep_note].time)
 8000b6e:	f002 ffe1 	bl	8003b34 <HAL_GetTick>
 8000b72:	4602      	mov	r2, r0
 8000b74:	4b40      	ldr	r3, [pc, #256]	; (8000c78 <do_peep+0x1f8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1ad2      	subs	r2, r2, r3
 8000b7a:	4b3b      	ldr	r3, [pc, #236]	; (8000c68 <do_peep+0x1e8>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4b3e      	ldr	r3, [pc, #248]	; (8000c7c <do_peep+0x1fc>)
 8000b82:	f853 1031 	ldr.w	r1, [r3, r1, lsl #3]
 8000b86:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <do_peep+0x1f0>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4403      	add	r3, r0
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	440b      	add	r3, r1
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d95b      	bls.n	8000c54 <do_peep+0x1d4>
			{
				if (melody[peep.melody].melody[peep_note].size == 0)
 8000b9c:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <do_peep+0x1e8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <do_peep+0x1fc>)
 8000ba4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000ba8:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <do_peep+0x1f0>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	460b      	mov	r3, r1
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	440b      	add	r3, r1
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	889b      	ldrh	r3, [r3, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d103      	bne.n	8000bc6 <do_peep+0x146>
				{
					// we need only pause, PWM & DMA already disabled
					peep_state = 4;
 8000bbe:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <do_peep+0x1f4>)
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	701a      	strb	r2, [r3, #0]
				{
					peep.stop = true;
					peep_state = 3;
				}
			}
			break;
 8000bc4:	e046      	b.n	8000c54 <do_peep+0x1d4>
					peep.stop = true;
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <do_peep+0x1e8>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	709a      	strb	r2, [r3, #2]
					peep_state = 3;
 8000bcc:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <do_peep+0x1f4>)
 8000bce:	2203      	movs	r2, #3
 8000bd0:	701a      	strb	r2, [r3, #0]
			break;
 8000bd2:	e03f      	b.n	8000c54 <do_peep+0x1d4>
		case 3: // wait PWM stop
			if (!peep.stop)
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <do_peep+0x1e8>)
 8000bd6:	789b      	ldrb	r3, [r3, #2]
 8000bd8:	f083 0301 	eor.w	r3, r3, #1
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d03a      	beq.n	8000c58 <do_peep+0x1d8>
				peep_state = 4;
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <do_peep+0x1f4>)
 8000be4:	2204      	movs	r2, #4
 8000be6:	701a      	strb	r2, [r3, #0]
			break;
 8000be8:	e036      	b.n	8000c58 <do_peep+0x1d8>
		case 4: // check if next note to play
			if (++peep_note < melody[peep.melody].size)
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <do_peep+0x1f0>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <do_peep+0x1f0>)
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <do_peep+0x1f0>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <do_peep+0x1e8>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	491e      	ldr	r1, [pc, #120]	; (8000c7c <do_peep+0x1fc>)
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	440b      	add	r3, r1
 8000c06:	889b      	ldrh	r3, [r3, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d203      	bcs.n	8000c14 <do_peep+0x194>
			{
				peep_state = 1; // play next note
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <do_peep+0x1f4>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
				{
					// we are finished, start again
					peep_state = 0;
				}
			}
			break;
 8000c12:	e022      	b.n	8000c5a <do_peep+0x1da>
				if (melody[peep.melody].play_once)
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <do_peep+0x1e8>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <do_peep+0x1fc>)
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	799b      	ldrb	r3, [r3, #6]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d003      	beq.n	8000c2c <do_peep+0x1ac>
					peep.peep = false; // so, we are finished
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <do_peep+0x1e8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	705a      	strb	r2, [r3, #1]
			break;
 8000c2a:	e016      	b.n	8000c5a <do_peep+0x1da>
					peep_state = 0;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <do_peep+0x1f4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
			break;
 8000c32:	e012      	b.n	8000c5a <do_peep+0x1da>
		default:
			global_error |= errFATAL;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <do_peep+0x204>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <do_peep+0x204>)
 8000c40:	701a      	strb	r2, [r3, #0]
			break;
 8000c42:	e00a      	b.n	8000c5a <do_peep+0x1da>
		}
	}
	else if (last_peep)
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <do_peep+0x1ec>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <do_peep+0x1da>
	{
		peep.stop = true;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <do_peep+0x1e8>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	709a      	strb	r2, [r3, #2]
 8000c52:	e002      	b.n	8000c5a <do_peep+0x1da>
			break;
 8000c54:	bf00      	nop
 8000c56:	e000      	b.n	8000c5a <do_peep+0x1da>
			break;
 8000c58:	bf00      	nop
	}
	last_peep = peep.peep;
 8000c5a:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <do_peep+0x1e8>)
 8000c5c:	785a      	ldrb	r2, [r3, #1]
 8000c5e:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <do_peep+0x1ec>)
 8000c60:	701a      	strb	r2, [r3, #0]
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000001c 	.word	0x2000001c
 8000c6c:	20000260 	.word	0x20000260
 8000c70:	20000261 	.word	0x20000261
 8000c74:	20000262 	.word	0x20000262
 8000c78:	20000264 	.word	0x20000264
 8000c7c:	0800f1a0 	.word	0x0800f1a0
 8000c80:	20000588 	.word	0x20000588
 8000c84:	20000234 	.word	0x20000234

08000c88 <lcd_mini_clear.8640>:

	/**
	 * clears left part of the display
	 */
	void lcd_mini_clear(LCD_HandleTypeDef * lcd)
	{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	f8c7 c000 	str.w	ip, [r7]
		lcd_mode(lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 8000c94:	2300      	movs	r3, #0
 8000c96:	2200      	movs	r2, #0
 8000c98:	2101      	movs	r1, #1
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fae6 	bl	800026c <lcd_mode>
		lcd_set_xy(lcd, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fb43 	bl	8000330 <lcd_set_xy>
		lcd_string(lcd, "            ");
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <lcd_mini_clear.8640+0x44>)
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fb28 	bl	8000302 <lcd_string>
		lcd_set_xy(lcd, 0, 1);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fb3a 	bl	8000330 <lcd_set_xy>
		lcd_string(lcd, "             ");
 8000cbc:	4904      	ldr	r1, [pc, #16]	; (8000cd0 <lcd_mini_clear.8640+0x48>)
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fb1f 	bl	8000302 <lcd_string>
	}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	0800d6d4 	.word	0x0800d6d4
 8000cd0:	0800d6e4 	.word	0x0800d6e4

08000cd4 <do_interface>:
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
void do_interface(void)
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	607b      	str	r3, [r7, #4]
	if (first_time)
 8000ce0:	4ba7      	ldr	r3, [pc, #668]	; (8000f80 <do_interface+0x2ac>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d023      	beq.n	8000d30 <do_interface+0x5c>
		max_steps = sizeof(steps_default)/sizeof(steps_default[0]);
 8000ce8:	4ba6      	ldr	r3, [pc, #664]	; (8000f84 <do_interface+0x2b0>)
 8000cea:	2202      	movs	r2, #2
 8000cec:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < max_steps; i ++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	e014      	b.n	8000d1e <do_interface+0x4a>
			steps[i].temp = steps_default[i].temp;
 8000cf4:	4aa4      	ldr	r2, [pc, #656]	; (8000f88 <do_interface+0x2b4>)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000cfc:	49a3      	ldr	r1, [pc, #652]	; (8000f8c <do_interface+0x2b8>)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			steps[i].time = steps_default[i].time;
 8000d04:	4aa0      	ldr	r2, [pc, #640]	; (8000f88 <do_interface+0x2b4>)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	4413      	add	r3, r2
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	499f      	ldr	r1, [pc, #636]	; (8000f8c <do_interface+0x2b8>)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	440b      	add	r3, r1
 8000d16:	605a      	str	r2, [r3, #4]
		for (int i = 0; i < max_steps; i ++)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b99      	ldr	r3, [pc, #612]	; (8000f84 <do_interface+0x2b0>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4293      	cmp	r3, r2
 8000d28:	dbe4      	blt.n	8000cf4 <do_interface+0x20>
		first_time = false;
 8000d2a:	4b95      	ldr	r3, [pc, #596]	; (8000f80 <do_interface+0x2ac>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
	/**
	 * this happens every 100 ms
	 */
	static uint32_t last_time = 0;
	static bool last_button = false;
	if (HAL_GetTick() - last_time < 100)
 8000d30:	f002 ff00 	bl	8003b34 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	4b96      	ldr	r3, [pc, #600]	; (8000f90 <do_interface+0x2bc>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b63      	cmp	r3, #99	; 0x63
 8000d3e:	f240 8366 	bls.w	800140e <do_interface+0x73a>
		return;
	last_time = HAL_GetTick();
 8000d42:	f002 fef7 	bl	8003b34 <HAL_GetTick>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4a91      	ldr	r2, [pc, #580]	; (8000f90 <do_interface+0x2bc>)
 8000d4a:	6013      	str	r3, [r2, #0]

	/*** Right always visible section ***/

	int32_t dT=((int32_t)temperature_SP)-((int32_t)(MAX6675.temperature>>2));
 8000d4c:	4b91      	ldr	r3, [pc, #580]	; (8000f94 <do_interface+0x2c0>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b91      	ldr	r3, [pc, #580]	; (8000f98 <do_interface+0x2c4>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	60bb      	str	r3, [r7, #8]

	lcd_set_xy(&lcd, 12, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	210c      	movs	r1, #12
 8000d62:	488e      	ldr	r0, [pc, #568]	; (8000f9c <do_interface+0x2c8>)
 8000d64:	f7ff fae4 	bl	8000330 <lcd_set_xy>
	if (MAX6675.data_valid)
 8000d68:	4b8b      	ldr	r3, [pc, #556]	; (8000f98 <do_interface+0x2c4>)
 8000d6a:	7a5b      	ldrb	r3, [r3, #9]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00a      	beq.n	8000d86 <do_interface+0xb2>
	{
		lcd_out(&lcd, MAX6675.ascii+1, 3);
 8000d70:	4b8b      	ldr	r3, [pc, #556]	; (8000fa0 <do_interface+0x2cc>)
 8000d72:	2203      	movs	r2, #3
 8000d74:	4619      	mov	r1, r3
 8000d76:	4889      	ldr	r0, [pc, #548]	; (8000f9c <do_interface+0x2c8>)
 8000d78:	f7ff faa5 	bl	80002c6 <lcd_out>
		lcd_write_data(&lcd, scGRAD);
 8000d7c:	21df      	movs	r1, #223	; 0xdf
 8000d7e:	4887      	ldr	r0, [pc, #540]	; (8000f9c <do_interface+0x2c8>)
 8000d80:	f7ff fb5c 	bl	800043c <lcd_write_data>
 8000d84:	e00c      	b.n	8000da0 <do_interface+0xcc>
	}
	else
	{
		lcd_string(&lcd, "___");
 8000d86:	4987      	ldr	r1, [pc, #540]	; (8000fa4 <do_interface+0x2d0>)
 8000d88:	4884      	ldr	r0, [pc, #528]	; (8000f9c <do_interface+0x2c8>)
 8000d8a:	f7ff faba 	bl	8000302 <lcd_string>
		temperature_SP = 0;
 8000d8e:	4b81      	ldr	r3, [pc, #516]	; (8000f94 <do_interface+0x2c0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	801a      	strh	r2, [r3, #0]
		global_error = errMAX6675_invalid;
 8000d94:	4b84      	ldr	r3, [pc, #528]	; (8000fa8 <do_interface+0x2d4>)
 8000d96:	2210      	movs	r2, #16
 8000d98:	701a      	strb	r2, [r3, #0]
		ui_state = uiMALFUNCTION;
 8000d9a:	4b84      	ldr	r3, [pc, #528]	; (8000fac <do_interface+0x2d8>)
 8000d9c:	2209      	movs	r2, #9
 8000d9e:	701a      	strb	r2, [r3, #0]
	}

	lcd_set_xy(&lcd, 13, 1);
 8000da0:	2201      	movs	r2, #1
 8000da2:	210d      	movs	r1, #13
 8000da4:	487d      	ldr	r0, [pc, #500]	; (8000f9c <do_interface+0x2c8>)
 8000da6:	f7ff fac3 	bl	8000330 <lcd_set_xy>
	// first symbol
	if (encoder.pressed)
 8000daa:	4b81      	ldr	r3, [pc, #516]	; (8000fb0 <do_interface+0x2dc>)
 8000dac:	789b      	ldrb	r3, [r3, #2]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d004      	beq.n	8000dbc <do_interface+0xe8>
		lcd_write_data(&lcd, scDOT);
 8000db2:	21a5      	movs	r1, #165	; 0xa5
 8000db4:	4879      	ldr	r0, [pc, #484]	; (8000f9c <do_interface+0x2c8>)
 8000db6:	f7ff fb41 	bl	800043c <lcd_write_data>
 8000dba:	e003      	b.n	8000dc4 <do_interface+0xf0>
	else
		lcd_write_data(&lcd, ' ');
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	4877      	ldr	r0, [pc, #476]	; (8000f9c <do_interface+0x2c8>)
 8000dc0:	f7ff fb3c 	bl	800043c <lcd_write_data>
	// second symbol
	if (!MAX6675.data_valid)
 8000dc4:	4b74      	ldr	r3, [pc, #464]	; (8000f98 <do_interface+0x2c4>)
 8000dc6:	7a5b      	ldrb	r3, [r3, #9]
 8000dc8:	f083 0301 	eor.w	r3, r3, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <do_interface+0x108>
		lcd_write_data(&lcd, ' ');
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	4871      	ldr	r0, [pc, #452]	; (8000f9c <do_interface+0x2c8>)
 8000dd6:	f7ff fb31 	bl	800043c <lcd_write_data>
 8000dda:	e051      	b.n	8000e80 <do_interface+0x1ac>
	else
	{
		if ((temperature_SP == 0) && (!MAX6675.hot))
 8000ddc:	4b6d      	ldr	r3, [pc, #436]	; (8000f94 <do_interface+0x2c0>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10b      	bne.n	8000dfc <do_interface+0x128>
 8000de4:	4b6c      	ldr	r3, [pc, #432]	; (8000f98 <do_interface+0x2c4>)
 8000de6:	7a9b      	ldrb	r3, [r3, #10]
 8000de8:	f083 0301 	eor.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d004      	beq.n	8000dfc <do_interface+0x128>
			lcd_write_data(&lcd, '-');
 8000df2:	212d      	movs	r1, #45	; 0x2d
 8000df4:	4869      	ldr	r0, [pc, #420]	; (8000f9c <do_interface+0x2c8>)
 8000df6:	f7ff fb21 	bl	800043c <lcd_write_data>
 8000dfa:	e041      	b.n	8000e80 <do_interface+0x1ac>
		else if (((pwm_value + 9)/10)*3 > ticktack)
 8000dfc:	4b6d      	ldr	r3, [pc, #436]	; (8000fb4 <do_interface+0x2e0>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	3309      	adds	r3, #9
 8000e02:	4a6d      	ldr	r2, [pc, #436]	; (8000fb8 <do_interface+0x2e4>)
 8000e04:	fb82 1203 	smull	r1, r2, r2, r3
 8000e08:	1092      	asrs	r2, r2, #2
 8000e0a:	17db      	asrs	r3, r3, #31
 8000e0c:	1ad2      	subs	r2, r2, r3
 8000e0e:	4613      	mov	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	4a69      	ldr	r2, [pc, #420]	; (8000fbc <do_interface+0x2e8>)
 8000e16:	7812      	ldrb	r2, [r2, #0]
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	dd10      	ble.n	8000e3e <do_interface+0x16a>
		{
			if ((STEP_TEMP > dT) && (dT > -STEP_TEMP))
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	dc08      	bgt.n	8000e34 <do_interface+0x160>
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	f113 0f04 	cmn.w	r3, #4
 8000e28:	db04      	blt.n	8000e34 <do_interface+0x160>
				lcd_write_data(&lcd, ccUPEQ);
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	485b      	ldr	r0, [pc, #364]	; (8000f9c <do_interface+0x2c8>)
 8000e2e:	f7ff fb05 	bl	800043c <lcd_write_data>
 8000e32:	e025      	b.n	8000e80 <do_interface+0x1ac>
			else
				lcd_write_data(&lcd, ccUP);
 8000e34:	2103      	movs	r1, #3
 8000e36:	4859      	ldr	r0, [pc, #356]	; (8000f9c <do_interface+0x2c8>)
 8000e38:	f7ff fb00 	bl	800043c <lcd_write_data>
 8000e3c:	e020      	b.n	8000e80 <do_interface+0x1ac>
		}
		else if (dT >= STEP_TEMP)
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	dd04      	ble.n	8000e4e <do_interface+0x17a>
			lcd_write_data(&lcd, '^');
 8000e44:	215e      	movs	r1, #94	; 0x5e
 8000e46:	4855      	ldr	r0, [pc, #340]	; (8000f9c <do_interface+0x2c8>)
 8000e48:	f7ff faf8 	bl	800043c <lcd_write_data>
 8000e4c:	e018      	b.n	8000e80 <do_interface+0x1ac>
		else if ((STEP_TEMP > dT) && (dT > -STEP_TEMP))
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	dc08      	bgt.n	8000e66 <do_interface+0x192>
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	f113 0f04 	cmn.w	r3, #4
 8000e5a:	db04      	blt.n	8000e66 <do_interface+0x192>
		{
			lcd_write_data(&lcd, '=');
 8000e5c:	213d      	movs	r1, #61	; 0x3d
 8000e5e:	484f      	ldr	r0, [pc, #316]	; (8000f9c <do_interface+0x2c8>)
 8000e60:	f7ff faec 	bl	800043c <lcd_write_data>
 8000e64:	e00c      	b.n	8000e80 <do_interface+0x1ac>
		}
		else if (dT <= -STEP_TEMP)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	f113 0f04 	cmn.w	r3, #4
 8000e6c:	da04      	bge.n	8000e78 <do_interface+0x1a4>
			lcd_write_data(&lcd, ccDOWN);
 8000e6e:	2101      	movs	r1, #1
 8000e70:	484a      	ldr	r0, [pc, #296]	; (8000f9c <do_interface+0x2c8>)
 8000e72:	f7ff fae3 	bl	800043c <lcd_write_data>
 8000e76:	e003      	b.n	8000e80 <do_interface+0x1ac>
		else
			lcd_write_data(&lcd, '?'); // should never happen
 8000e78:	213f      	movs	r1, #63	; 0x3f
 8000e7a:	4848      	ldr	r0, [pc, #288]	; (8000f9c <do_interface+0x2c8>)
 8000e7c:	f7ff fade 	bl	800043c <lcd_write_data>

	}
	// last symbol
	if ((MAX6675.hot) || (!MAX6675.data_valid))
 8000e80:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <do_interface+0x2c4>)
 8000e82:	7a9b      	ldrb	r3, [r3, #10]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d106      	bne.n	8000e96 <do_interface+0x1c2>
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <do_interface+0x2c4>)
 8000e8a:	7a5b      	ldrb	r3, [r3, #9]
 8000e8c:	f083 0301 	eor.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d013      	beq.n	8000ebe <do_interface+0x1ea>
	{
		HAL_GPIO_WritePin(HOT_LEDS_GPIO_Port, HOT_LEDS_Pin, 1);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9c:	4848      	ldr	r0, [pc, #288]	; (8000fc0 <do_interface+0x2ec>)
 8000e9e:	f003 fb84 	bl	80045aa <HAL_GPIO_WritePin>
		if (ticktack < 5)
 8000ea2:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <do_interface+0x2e8>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d804      	bhi.n	8000eb4 <do_interface+0x1e0>
			lcd_write_data(&lcd, ccHOT);
 8000eaa:	2104      	movs	r1, #4
 8000eac:	483b      	ldr	r0, [pc, #236]	; (8000f9c <do_interface+0x2c8>)
 8000eae:	f7ff fac5 	bl	800043c <lcd_write_data>
		if (ticktack < 5)
 8000eb2:	e017      	b.n	8000ee4 <do_interface+0x210>
		else
			lcd_write_data(&lcd, ccHOTmirror);
 8000eb4:	2105      	movs	r1, #5
 8000eb6:	4839      	ldr	r0, [pc, #228]	; (8000f9c <do_interface+0x2c8>)
 8000eb8:	f7ff fac0 	bl	800043c <lcd_write_data>
		if (ticktack < 5)
 8000ebc:	e012      	b.n	8000ee4 <do_interface+0x210>
	}
	else
	{
		HAL_GPIO_WritePin(HOT_LEDS_GPIO_Port, HOT_LEDS_Pin, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec4:	483e      	ldr	r0, [pc, #248]	; (8000fc0 <do_interface+0x2ec>)
 8000ec6:	f003 fb70 	bl	80045aa <HAL_GPIO_WritePin>
		if (ticktack < 5)
 8000eca:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <do_interface+0x2e8>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d804      	bhi.n	8000edc <do_interface+0x208>
			lcd_write_data(&lcd, ccDOT);
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	4831      	ldr	r0, [pc, #196]	; (8000f9c <do_interface+0x2c8>)
 8000ed6:	f7ff fab1 	bl	800043c <lcd_write_data>
 8000eda:	e003      	b.n	8000ee4 <do_interface+0x210>
		else
			lcd_write_data(&lcd, ' ');
 8000edc:	2120      	movs	r1, #32
 8000ede:	482f      	ldr	r0, [pc, #188]	; (8000f9c <do_interface+0x2c8>)
 8000ee0:	f7ff faac 	bl	800043c <lcd_write_data>
	}
	if (++ticktack > 9)
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <do_interface+0x2e8>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <do_interface+0x2e8>)
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <do_interface+0x2e8>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b09      	cmp	r3, #9
 8000ef6:	d902      	bls.n	8000efe <do_interface+0x22a>
		ticktack = 0;
 8000ef8:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <do_interface+0x2e8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]

	/* Check errors --------------------------------------------*/

	if (MAX6675.temperature > ((MAX_TEMP + 2*STEP_TEMP)<<2))
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <do_interface+0x2c4>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8000f06:	d909      	bls.n	8000f1c <do_interface+0x248>
	{
		temperature_SP = 0;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <do_interface+0x2c0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	801a      	strh	r2, [r3, #0]
		global_error |= errTEMP_PV;
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <do_interface+0x2d4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <do_interface+0x2d4>)
 8000f1a:	701a      	strb	r2, [r3, #0]
	}

	if (temperature_SP > MAX_TEMP)
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <do_interface+0x2c0>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000f24:	d909      	bls.n	8000f3a <do_interface+0x266>
	{
		temperature_SP = 0;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <do_interface+0x2c0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	801a      	strh	r2, [r3, #0]
		global_error |= errTEMP_SP;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <do_interface+0x2d4>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <do_interface+0x2d4>)
 8000f38:	701a      	strb	r2, [r3, #0]
	static uint32_t last_SP = 0xffff; // not realistic value, to be immediately replaced
	static uint32_t time_dT = 0;
	static bool check_heater = false;
	static uint32_t heater_timeout = 20;

	if (temperature_SP != last_SP) // user changed T
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <do_interface+0x2c0>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <do_interface+0x2f0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d047      	beq.n	8000fd8 <do_interface+0x304>
	{
		if (dT >= 20) // T diff is more than 20 grad
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b13      	cmp	r3, #19
 8000f4c:	dd14      	ble.n	8000f78 <do_interface+0x2a4>
		{
			check_heater = true;
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <do_interface+0x2f4>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
			last_dT = dT; // save value
 8000f54:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <do_interface+0x2f8>)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	6013      	str	r3, [r2, #0]
			time_dT = HAL_GetTick(); // start timer
 8000f5a:	f002 fdeb 	bl	8003b34 <HAL_GetTick>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <do_interface+0x2fc>)
 8000f62:	6013      	str	r3, [r2, #0]
			heater_timeout = 120;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <do_interface+0x300>)
 8000f66:	2278      	movs	r2, #120	; 0x78
 8000f68:	601a      	str	r2, [r3, #0]
			if (dT >= 50)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b31      	cmp	r3, #49	; 0x31
 8000f6e:	dd56      	ble.n	800101e <do_interface+0x34a>
				heater_timeout = 20; // if diff 50 grad, react faster
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <do_interface+0x300>)
 8000f72:	2214      	movs	r2, #20
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e052      	b.n	800101e <do_interface+0x34a>
		}
		else
			check_heater = false;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <do_interface+0x2f4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e04e      	b.n	800101e <do_interface+0x34a>
 8000f80:	2000001f 	.word	0x2000001f
 8000f84:	20000020 	.word	0x20000020
 8000f88:	0800f1c0 	.word	0x0800f1c0
 8000f8c:	20000268 	.word	0x20000268
 8000f90:	200002b0 	.word	0x200002b0
 8000f94:	2000024a 	.word	0x2000024a
 8000f98:	2000023c 	.word	0x2000023c
 8000f9c:	20000570 	.word	0x20000570
 8000fa0:	2000023f 	.word	0x2000023f
 8000fa4:	0800d6f4 	.word	0x0800d6f4
 8000fa8:	20000234 	.word	0x20000234
 8000fac:	2000024d 	.word	0x2000024d
 8000fb0:	20000238 	.word	0x20000238
 8000fb4:	20000248 	.word	0x20000248
 8000fb8:	66666667 	.word	0x66666667
 8000fbc:	20000235 	.word	0x20000235
 8000fc0:	40011000 	.word	0x40011000
 8000fc4:	20000024 	.word	0x20000024
 8000fc8:	200002b4 	.word	0x200002b4
 8000fcc:	200002b8 	.word	0x200002b8
 8000fd0:	200002bc 	.word	0x200002bc
 8000fd4:	20000028 	.word	0x20000028
	}
	else if (check_heater)
 8000fd8:	4bb0      	ldr	r3, [pc, #704]	; (800129c <do_interface+0x5c8>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d01e      	beq.n	800101e <do_interface+0x34a>
	{
		if (last_dT - dT > 5) // temperature changed more than 5 grad, ok!
 8000fe0:	4baf      	ldr	r3, [pc, #700]	; (80012a0 <do_interface+0x5cc>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b05      	cmp	r3, #5
 8000fea:	dd03      	ble.n	8000ff4 <do_interface+0x320>
			check_heater = false;
 8000fec:	4bab      	ldr	r3, [pc, #684]	; (800129c <do_interface+0x5c8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e014      	b.n	800101e <do_interface+0x34a>
		else if (HAL_GetTick() - time_dT > heater_timeout*1024) // timeout, go in error
 8000ff4:	f002 fd9e 	bl	8003b34 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	4baa      	ldr	r3, [pc, #680]	; (80012a4 <do_interface+0x5d0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1ad2      	subs	r2, r2, r3
 8001000:	4ba9      	ldr	r3, [pc, #676]	; (80012a8 <do_interface+0x5d4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	029b      	lsls	r3, r3, #10
 8001006:	429a      	cmp	r2, r3
 8001008:	d909      	bls.n	800101e <do_interface+0x34a>
		{
			check_heater = false;
 800100a:	4ba4      	ldr	r3, [pc, #656]	; (800129c <do_interface+0x5c8>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
			global_error |= errHEATER;
 8001010:	4ba6      	ldr	r3, [pc, #664]	; (80012ac <do_interface+0x5d8>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4ba4      	ldr	r3, [pc, #656]	; (80012ac <do_interface+0x5d8>)
 800101c:	701a      	strb	r2, [r3, #0]
		}
	}
	last_SP = temperature_SP;
 800101e:	4ba4      	ldr	r3, [pc, #656]	; (80012b0 <do_interface+0x5dc>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	4ba3      	ldr	r3, [pc, #652]	; (80012b4 <do_interface+0x5e0>)
 8001026:	601a      	str	r2, [r3, #0]

	/************************************/


	if (encoder.long_press)
 8001028:	4ba3      	ldr	r3, [pc, #652]	; (80012b8 <do_interface+0x5e4>)
 800102a:	78db      	ldrb	r3, [r3, #3]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00b      	beq.n	8001048 <do_interface+0x374>
	{
		ui_state = uiLONG_PRESS;
 8001030:	4ba2      	ldr	r3, [pc, #648]	; (80012bc <do_interface+0x5e8>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
		temperature_SP = 0;
 8001036:	4b9e      	ldr	r3, [pc, #632]	; (80012b0 <do_interface+0x5dc>)
 8001038:	2200      	movs	r2, #0
 800103a:	801a      	strh	r2, [r3, #0]
		global_error = errOK;
 800103c:	4b9b      	ldr	r3, [pc, #620]	; (80012ac <do_interface+0x5d8>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
		peep.peep = false;
 8001042:	4b9f      	ldr	r3, [pc, #636]	; (80012c0 <do_interface+0x5ec>)
 8001044:	2200      	movs	r2, #0
 8001046:	705a      	strb	r2, [r3, #1]
	}

	if (global_error)
 8001048:	4b98      	ldr	r3, [pc, #608]	; (80012ac <do_interface+0x5d8>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <do_interface+0x38e>
	{
		ui_state = uiMALFUNCTION;
 8001050:	4b9a      	ldr	r3, [pc, #616]	; (80012bc <do_interface+0x5e8>)
 8001052:	2209      	movs	r2, #9
 8001054:	701a      	strb	r2, [r3, #0]
		peep.melody = melodyLOSE_LIFE;
 8001056:	4b9a      	ldr	r3, [pc, #616]	; (80012c0 <do_interface+0x5ec>)
 8001058:	2202      	movs	r2, #2
 800105a:	701a      	strb	r2, [r3, #0]
		peep.peep = true;
 800105c:	4b98      	ldr	r3, [pc, #608]	; (80012c0 <do_interface+0x5ec>)
 800105e:	2201      	movs	r2, #1
 8001060:	705a      	strb	r2, [r3, #1]
	}

	switch(ui_state)
 8001062:	4b96      	ldr	r3, [pc, #600]	; (80012bc <do_interface+0x5e8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b09      	cmp	r3, #9
 8001068:	f200 81be 	bhi.w	80013e8 <do_interface+0x714>
 800106c:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <do_interface+0x3a0>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	0800109d 	.word	0x0800109d
 8001078:	0800111b 	.word	0x0800111b
 800107c:	08001163 	.word	0x08001163
 8001080:	080011b7 	.word	0x080011b7
 8001084:	0800122b 	.word	0x0800122b
 8001088:	08001259 	.word	0x08001259
 800108c:	08001265 	.word	0x08001265
 8001090:	080012f5 	.word	0x080012f5
 8001094:	08001321 	.word	0x08001321
 8001098:	0800132d 	.word	0x0800132d
	{
	case uiSTART:
		lcd_set_xy(&lcd, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	4888      	ldr	r0, [pc, #544]	; (80012c4 <do_interface+0x5f0>)
 80010a2:	f7ff f945 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "Long press  ");
 80010a6:	4988      	ldr	r1, [pc, #544]	; (80012c8 <do_interface+0x5f4>)
 80010a8:	4886      	ldr	r0, [pc, #536]	; (80012c4 <do_interface+0x5f0>)
 80010aa:	f7ff f92a 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2100      	movs	r1, #0
 80010b2:	4884      	ldr	r0, [pc, #528]	; (80012c4 <do_interface+0x5f0>)
 80010b4:	f7ff f93c 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "T=0 & reset ");
 80010b8:	4984      	ldr	r1, [pc, #528]	; (80012cc <do_interface+0x5f8>)
 80010ba:	4882      	ldr	r0, [pc, #520]	; (80012c4 <do_interface+0x5f0>)
 80010bc:	f7ff f921 	bl	8000302 <lcd_string>
		lcd_write_data(&lcd, ccENTER);
 80010c0:	2100      	movs	r1, #0
 80010c2:	4880      	ldr	r0, [pc, #512]	; (80012c4 <do_interface+0x5f0>)
 80010c4:	f7ff f9ba 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 12, 1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	210c      	movs	r1, #12
 80010cc:	487d      	ldr	r0, [pc, #500]	; (80012c4 <do_interface+0x5f0>)
 80010ce:	f7ff f92f 	bl	8000330 <lcd_set_xy>
		lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 80010d2:	4b7f      	ldr	r3, [pc, #508]	; (80012d0 <do_interface+0x5fc>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf94      	ite	ls
 80010da:	2301      	movls	r3, #1
 80010dc:	2300      	movhi	r3, #0
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	2300      	movs	r3, #0
 80010e4:	2101      	movs	r1, #1
 80010e6:	4877      	ldr	r0, [pc, #476]	; (80012c4 <do_interface+0x5f0>)
 80010e8:	f7ff f8c0 	bl	800026c <lcd_mode>
		if (!encoder.pressed && last_button)
 80010ec:	4b72      	ldr	r3, [pc, #456]	; (80012b8 <do_interface+0x5e4>)
 80010ee:	789b      	ldrb	r3, [r3, #2]
 80010f0:	f083 0301 	eor.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 817d 	beq.w	80013f6 <do_interface+0x722>
 80010fc:	4b75      	ldr	r3, [pc, #468]	; (80012d4 <do_interface+0x600>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 8178 	beq.w	80013f6 <do_interface+0x722>
		{
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 8001106:	2300      	movs	r3, #0
 8001108:	2200      	movs	r2, #0
 800110a:	2101      	movs	r1, #1
 800110c:	486d      	ldr	r0, [pc, #436]	; (80012c4 <do_interface+0x5f0>)
 800110e:	f7ff f8ad 	bl	800026c <lcd_mode>
			ui_state = uiMENUenter;
 8001112:	4b6a      	ldr	r3, [pc, #424]	; (80012bc <do_interface+0x5e8>)
 8001114:	2202      	movs	r2, #2
 8001116:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001118:	e16d      	b.n	80013f6 <do_interface+0x722>
	case uiLONG_PRESS:
		lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 800111a:	2300      	movs	r3, #0
 800111c:	2200      	movs	r2, #0
 800111e:	2101      	movs	r1, #1
 8001120:	4868      	ldr	r0, [pc, #416]	; (80012c4 <do_interface+0x5f0>)
 8001122:	f7ff f8a3 	bl	800026c <lcd_mode>
		lcd_set_xy(&lcd, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	4866      	ldr	r0, [pc, #408]	; (80012c4 <do_interface+0x5f0>)
 800112c:	f7ff f900 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "T set to 0  ");
 8001130:	4969      	ldr	r1, [pc, #420]	; (80012d8 <do_interface+0x604>)
 8001132:	4864      	ldr	r0, [pc, #400]	; (80012c4 <do_interface+0x5f0>)
 8001134:	f7ff f8e5 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 8001138:	2201      	movs	r2, #1
 800113a:	2100      	movs	r1, #0
 800113c:	4861      	ldr	r0, [pc, #388]	; (80012c4 <do_interface+0x5f0>)
 800113e:	f7ff f8f7 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "err. cleared ");
 8001142:	4966      	ldr	r1, [pc, #408]	; (80012dc <do_interface+0x608>)
 8001144:	485f      	ldr	r0, [pc, #380]	; (80012c4 <do_interface+0x5f0>)
 8001146:	f7ff f8dc 	bl	8000302 <lcd_string>
		if (!encoder.pressed)
 800114a:	4b5b      	ldr	r3, [pc, #364]	; (80012b8 <do_interface+0x5e4>)
 800114c:	789b      	ldrb	r3, [r3, #2]
 800114e:	f083 0301 	eor.w	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 8150 	beq.w	80013fa <do_interface+0x726>
			ui_state = uiMENUenter;
 800115a:	4b58      	ldr	r3, [pc, #352]	; (80012bc <do_interface+0x5e8>)
 800115c:	2202      	movs	r2, #2
 800115e:	701a      	strb	r2, [r3, #0]
		break;
 8001160:	e14b      	b.n	80013fa <do_interface+0x726>
	case uiMENUenter:
		lcd_mini_clear(&lcd);
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	469c      	mov	ip, r3
 8001166:	4857      	ldr	r0, [pc, #348]	; (80012c4 <do_interface+0x5f0>)
 8001168:	f7ff fd8e 	bl	8000c88 <lcd_mini_clear.8640>
		lcd_set_xy(&lcd, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	4854      	ldr	r0, [pc, #336]	; (80012c4 <do_interface+0x5f0>)
 8001172:	f7ff f8dd 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " Profile");
 8001176:	495a      	ldr	r1, [pc, #360]	; (80012e0 <do_interface+0x60c>)
 8001178:	4852      	ldr	r0, [pc, #328]	; (80012c4 <do_interface+0x5f0>)
 800117a:	f7ff f8c2 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 800117e:	2201      	movs	r2, #1
 8001180:	2100      	movs	r1, #0
 8001182:	4850      	ldr	r0, [pc, #320]	; (80012c4 <do_interface+0x5f0>)
 8001184:	f7ff f8d4 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " Heatplate");
 8001188:	4956      	ldr	r1, [pc, #344]	; (80012e4 <do_interface+0x610>)
 800118a:	484e      	ldr	r0, [pc, #312]	; (80012c4 <do_interface+0x5f0>)
 800118c:	f7ff f8b9 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, (encoder.value)&0b1);
 8001190:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <do_interface+0x5e4>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	b2db      	uxtb	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	4848      	ldr	r0, [pc, #288]	; (80012c4 <do_interface+0x5f0>)
 80011a2:	f7ff f8c5 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, scAR);
 80011a6:	217e      	movs	r1, #126	; 0x7e
 80011a8:	4846      	ldr	r0, [pc, #280]	; (80012c4 <do_interface+0x5f0>)
 80011aa:	f7ff f947 	bl	800043c <lcd_write_data>
		ui_state = uiMENU;
 80011ae:	4b43      	ldr	r3, [pc, #268]	; (80012bc <do_interface+0x5e8>)
 80011b0:	2203      	movs	r2, #3
 80011b2:	701a      	strb	r2, [r3, #0]
		break;
 80011b4:	e126      	b.n	8001404 <do_interface+0x730>
	case uiMENU:
		lcd_set_xy(&lcd, 0, (encoder.value)&0b1);
 80011b6:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <do_interface+0x5e4>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	2100      	movs	r1, #0
 80011c6:	483f      	ldr	r0, [pc, #252]	; (80012c4 <do_interface+0x5f0>)
 80011c8:	f7ff f8b2 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, scAR);
 80011cc:	217e      	movs	r1, #126	; 0x7e
 80011ce:	483d      	ldr	r0, [pc, #244]	; (80012c4 <do_interface+0x5f0>)
 80011d0:	f7ff f934 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 0, 1 - ((encoder.value)&0b1));
 80011d4:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <do_interface+0x5e4>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bf0c      	ite	eq
 80011e0:	2301      	moveq	r3, #1
 80011e2:	2300      	movne	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	2100      	movs	r1, #0
 80011ea:	4836      	ldr	r0, [pc, #216]	; (80012c4 <do_interface+0x5f0>)
 80011ec:	f7ff f8a0 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, ' ');
 80011f0:	2120      	movs	r1, #32
 80011f2:	4834      	ldr	r0, [pc, #208]	; (80012c4 <do_interface+0x5f0>)
 80011f4:	f7ff f922 	bl	800043c <lcd_write_data>
		if (!encoder.pressed && last_button)
 80011f8:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <do_interface+0x5e4>)
 80011fa:	789b      	ldrb	r3, [r3, #2]
 80011fc:	f083 0301 	eor.w	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80fb 	beq.w	80013fe <do_interface+0x72a>
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <do_interface+0x600>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80f6 	beq.w	80013fe <do_interface+0x72a>
		{
			ui_state = ((encoder.value)&0b1)?uiHEATPLATEenter:uiSETTINGSenter;
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <do_interface+0x5e4>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <do_interface+0x54e>
 800121e:	2204      	movs	r2, #4
 8001220:	e000      	b.n	8001224 <do_interface+0x550>
 8001222:	2206      	movs	r2, #6
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <do_interface+0x5e8>)
 8001226:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001228:	e0e9      	b.n	80013fe <do_interface+0x72a>
	case uiHEATPLATEenter:
		lcd_mini_clear(&lcd);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	469c      	mov	ip, r3
 800122e:	4825      	ldr	r0, [pc, #148]	; (80012c4 <do_interface+0x5f0>)
 8001230:	f7ff fd2a 	bl	8000c88 <lcd_mini_clear.8640>
		lcd_set_xy(&lcd, 0, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	2100      	movs	r1, #0
 8001238:	4822      	ldr	r0, [pc, #136]	; (80012c4 <do_interface+0x5f0>)
 800123a:	f7ff f879 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "Heatplate   ");
 800123e:	492a      	ldr	r1, [pc, #168]	; (80012e8 <do_interface+0x614>)
 8001240:	4820      	ldr	r0, [pc, #128]	; (80012c4 <do_interface+0x5f0>)
 8001242:	f7ff f85e 	bl	8000302 <lcd_string>
		heatplate(true);
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	469c      	mov	ip, r3
 800124a:	2001      	movs	r0, #1
 800124c:	f000 f9a0 	bl	8001590 <heatplate.8655>
		ui_state = uiHEATPLATE;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <do_interface+0x5e8>)
 8001252:	2205      	movs	r2, #5
 8001254:	701a      	strb	r2, [r3, #0]
		break;
 8001256:	e0d5      	b.n	8001404 <do_interface+0x730>
	case uiHEATPLATE:
		heatplate(false);
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	469c      	mov	ip, r3
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f997 	bl	8001590 <heatplate.8655>
		break;
 8001262:	e0cf      	b.n	8001404 <do_interface+0x730>
	case uiSETTINGSenter:
		lcd_set_xy(&lcd, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	4816      	ldr	r0, [pc, #88]	; (80012c4 <do_interface+0x5f0>)
 800126a:	f7ff f861 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " Profile    ");
 800126e:	491f      	ldr	r1, [pc, #124]	; (80012ec <do_interface+0x618>)
 8001270:	4814      	ldr	r0, [pc, #80]	; (80012c4 <do_interface+0x5f0>)
 8001272:	f7ff f846 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 8001276:	2201      	movs	r2, #1
 8001278:	2100      	movs	r1, #0
 800127a:	4812      	ldr	r0, [pc, #72]	; (80012c4 <do_interface+0x5f0>)
 800127c:	f7ff f858 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " settings    ");
 8001280:	491b      	ldr	r1, [pc, #108]	; (80012f0 <do_interface+0x61c>)
 8001282:	4810      	ldr	r0, [pc, #64]	; (80012c4 <do_interface+0x5f0>)
 8001284:	f7ff f83d 	bl	8000302 <lcd_string>
		ui_state = uiSETTINGS;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <do_interface+0x5e8>)
 800128a:	2207      	movs	r2, #7
 800128c:	701a      	strb	r2, [r3, #0]
		do_profile_settings(true);
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	469c      	mov	ip, r3
 8001292:	2001      	movs	r0, #1
 8001294:	f000 fa7c 	bl	8001790 <do_profile_settings.8662>
		break;
 8001298:	e0b4      	b.n	8001404 <do_interface+0x730>
 800129a:	bf00      	nop
 800129c:	200002b4 	.word	0x200002b4
 80012a0:	200002b8 	.word	0x200002b8
 80012a4:	200002bc 	.word	0x200002bc
 80012a8:	20000028 	.word	0x20000028
 80012ac:	20000234 	.word	0x20000234
 80012b0:	2000024a 	.word	0x2000024a
 80012b4:	20000024 	.word	0x20000024
 80012b8:	20000238 	.word	0x20000238
 80012bc:	2000024d 	.word	0x2000024d
 80012c0:	2000001c 	.word	0x2000001c
 80012c4:	20000570 	.word	0x20000570
 80012c8:	0800d6f8 	.word	0x0800d6f8
 80012cc:	0800d708 	.word	0x0800d708
 80012d0:	20000235 	.word	0x20000235
 80012d4:	200002c0 	.word	0x200002c0
 80012d8:	0800d718 	.word	0x0800d718
 80012dc:	0800d728 	.word	0x0800d728
 80012e0:	0800d738 	.word	0x0800d738
 80012e4:	0800d744 	.word	0x0800d744
 80012e8:	0800d750 	.word	0x0800d750
 80012ec:	0800d760 	.word	0x0800d760
 80012f0:	0800d770 	.word	0x0800d770
	case uiSETTINGS:
		if (do_profile_settings(false))
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	469c      	mov	ip, r3
 80012f8:	2000      	movs	r0, #0
 80012fa:	f000 fa49 	bl	8001790 <do_profile_settings.8662>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d07e      	beq.n	8001402 <do_interface+0x72e>
		{
			lcd_mini_clear(&lcd);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	469c      	mov	ip, r3
 8001308:	4843      	ldr	r0, [pc, #268]	; (8001418 <do_interface+0x744>)
 800130a:	f7ff fcbd 	bl	8000c88 <lcd_mini_clear.8640>
			ui_state = uiREFLOW;
 800130e:	4b43      	ldr	r3, [pc, #268]	; (800141c <do_interface+0x748>)
 8001310:	2208      	movs	r2, #8
 8001312:	701a      	strb	r2, [r3, #0]
			do_reflow(true);
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	469c      	mov	ip, r3
 8001318:	2001      	movs	r0, #1
 800131a:	f000 ff41 	bl	80021a0 <do_reflow.8698>
		}
		break;
 800131e:	e070      	b.n	8001402 <do_interface+0x72e>
	case uiREFLOW:
		do_reflow(false);
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	469c      	mov	ip, r3
 8001324:	2000      	movs	r0, #0
 8001326:	f000 ff3b 	bl	80021a0 <do_reflow.8698>
		break;
 800132a:	e06b      	b.n	8001404 <do_interface+0x730>
	case uiMALFUNCTION: // just check errors
		temperature_SP = 0;
 800132c:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <do_interface+0x74c>)
 800132e:	2200      	movs	r2, #0
 8001330:	801a      	strh	r2, [r3, #0]
		lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 8001332:	2300      	movs	r3, #0
 8001334:	2200      	movs	r2, #0
 8001336:	2101      	movs	r1, #1
 8001338:	4837      	ldr	r0, [pc, #220]	; (8001418 <do_interface+0x744>)
 800133a:	f7fe ff97 	bl	800026c <lcd_mode>
		lcd_set_xy(&lcd, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	4835      	ldr	r0, [pc, #212]	; (8001418 <do_interface+0x744>)
 8001344:	f7fe fff4 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " * Error! * ");
 8001348:	4936      	ldr	r1, [pc, #216]	; (8001424 <do_interface+0x750>)
 800134a:	4833      	ldr	r0, [pc, #204]	; (8001418 <do_interface+0x744>)
 800134c:	f7fe ffd9 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 8001350:	2201      	movs	r2, #1
 8001352:	2100      	movs	r1, #0
 8001354:	4830      	ldr	r0, [pc, #192]	; (8001418 <do_interface+0x744>)
 8001356:	f7fe ffeb 	bl	8000330 <lcd_set_xy>
		if (global_error & errMAX6675_invalid)
 800135a:	4b33      	ldr	r3, [pc, #204]	; (8001428 <do_interface+0x754>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <do_interface+0x69c>
			lcd_string(&lcd, "Temp. Sensor");
 8001366:	4931      	ldr	r1, [pc, #196]	; (800142c <do_interface+0x758>)
 8001368:	482b      	ldr	r0, [pc, #172]	; (8001418 <do_interface+0x744>)
 800136a:	f7fe ffca 	bl	8000302 <lcd_string>
		else if (global_error & errTIMEOUT)
			lcd_string(&lcd, "timeout     ");
		else
			lcd_string(&lcd, "fatal error ");

		break;
 800136e:	e049      	b.n	8001404 <do_interface+0x730>
		else if (global_error & errTEMP_SP)
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <do_interface+0x754>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <do_interface+0x6b2>
			lcd_string(&lcd, "SP too high ");
 800137c:	492c      	ldr	r1, [pc, #176]	; (8001430 <do_interface+0x75c>)
 800137e:	4826      	ldr	r0, [pc, #152]	; (8001418 <do_interface+0x744>)
 8001380:	f7fe ffbf 	bl	8000302 <lcd_string>
		break;
 8001384:	e03e      	b.n	8001404 <do_interface+0x730>
		else if (global_error & errTEMP_PV)
 8001386:	4b28      	ldr	r3, [pc, #160]	; (8001428 <do_interface+0x754>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d004      	beq.n	800139c <do_interface+0x6c8>
			lcd_string(&lcd, "T too high  ");
 8001392:	4928      	ldr	r1, [pc, #160]	; (8001434 <do_interface+0x760>)
 8001394:	4820      	ldr	r0, [pc, #128]	; (8001418 <do_interface+0x744>)
 8001396:	f7fe ffb4 	bl	8000302 <lcd_string>
		break;
 800139a:	e033      	b.n	8001404 <do_interface+0x730>
		else if (global_error & errHEATER)
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <do_interface+0x754>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <do_interface+0x6de>
			lcd_string(&lcd, "heater power");
 80013a8:	4923      	ldr	r1, [pc, #140]	; (8001438 <do_interface+0x764>)
 80013aa:	481b      	ldr	r0, [pc, #108]	; (8001418 <do_interface+0x744>)
 80013ac:	f7fe ffa9 	bl	8000302 <lcd_string>
		break;
 80013b0:	e028      	b.n	8001404 <do_interface+0x730>
		else if (global_error & errI_LIMIT)
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <do_interface+0x754>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <do_interface+0x6f4>
			lcd_string(&lcd, "heater limit");
 80013be:	491f      	ldr	r1, [pc, #124]	; (800143c <do_interface+0x768>)
 80013c0:	4815      	ldr	r0, [pc, #84]	; (8001418 <do_interface+0x744>)
 80013c2:	f7fe ff9e 	bl	8000302 <lcd_string>
		break;
 80013c6:	e01d      	b.n	8001404 <do_interface+0x730>
		else if (global_error & errTIMEOUT)
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <do_interface+0x754>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <do_interface+0x70a>
			lcd_string(&lcd, "timeout     ");
 80013d4:	491a      	ldr	r1, [pc, #104]	; (8001440 <do_interface+0x76c>)
 80013d6:	4810      	ldr	r0, [pc, #64]	; (8001418 <do_interface+0x744>)
 80013d8:	f7fe ff93 	bl	8000302 <lcd_string>
		break;
 80013dc:	e012      	b.n	8001404 <do_interface+0x730>
			lcd_string(&lcd, "fatal error ");
 80013de:	4919      	ldr	r1, [pc, #100]	; (8001444 <do_interface+0x770>)
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <do_interface+0x744>)
 80013e2:	f7fe ff8e 	bl	8000302 <lcd_string>
		break;
 80013e6:	e00d      	b.n	8001404 <do_interface+0x730>
	default:
		global_error = errFATAL;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <do_interface+0x754>)
 80013ea:	2240      	movs	r2, #64	; 0x40
 80013ec:	701a      	strb	r2, [r3, #0]
		ui_state = uiMALFUNCTION;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <do_interface+0x748>)
 80013f0:	2209      	movs	r2, #9
 80013f2:	701a      	strb	r2, [r3, #0]
		break;
 80013f4:	e006      	b.n	8001404 <do_interface+0x730>
		break;
 80013f6:	bf00      	nop
 80013f8:	e004      	b.n	8001404 <do_interface+0x730>
		break;
 80013fa:	bf00      	nop
 80013fc:	e002      	b.n	8001404 <do_interface+0x730>
		break;
 80013fe:	bf00      	nop
 8001400:	e000      	b.n	8001404 <do_interface+0x730>
		break;
 8001402:	bf00      	nop
	}
	last_button = encoder.pressed;
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <do_interface+0x774>)
 8001406:	789a      	ldrb	r2, [r3, #2]
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <do_interface+0x778>)
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	e000      	b.n	8001410 <do_interface+0x73c>
		return;
 800140e:	bf00      	nop

}
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000570 	.word	0x20000570
 800141c:	2000024d 	.word	0x2000024d
 8001420:	2000024a 	.word	0x2000024a
 8001424:	0800d780 	.word	0x0800d780
 8001428:	20000234 	.word	0x20000234
 800142c:	0800d790 	.word	0x0800d790
 8001430:	0800d7a0 	.word	0x0800d7a0
 8001434:	0800d7b0 	.word	0x0800d7b0
 8001438:	0800d7c0 	.word	0x0800d7c0
 800143c:	0800d7d0 	.word	0x0800d7d0
 8001440:	0800d7e0 	.word	0x0800d7e0
 8001444:	0800d7f0 	.word	0x0800d7f0
 8001448:	20000238 	.word	0x20000238
 800144c:	200002c0 	.word	0x200002c0

08001450 <change_temperature.8644>:
	{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	460b      	mov	r3, r1
 800145a:	817b      	strh	r3, [r7, #10]
 800145c:	f8c7 c004 	str.w	ip, [r7, #4]
		if (diff == 0)
 8001460:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <change_temperature.8644+0x1c>
			return t;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	e021      	b.n	80014b0 <change_temperature.8644+0x60>
		int32_t temp = (int32_t)t; // to avoid zero-cross
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	617b      	str	r3, [r7, #20]
		temp = (temp / STEP_TEMP) * STEP_TEMP; // round for more beauty
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <change_temperature.8644+0x6c>)
 8001474:	fb82 1203 	smull	r1, r2, r2, r3
 8001478:	1052      	asrs	r2, r2, #1
 800147a:	17db      	asrs	r3, r3, #31
 800147c:	1ad2      	subs	r2, r2, r3
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	617b      	str	r3, [r7, #20]
		temp += (diff)*STEP_TEMP;
 8001486:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4413      	add	r3, r2
 8001494:	617b      	str	r3, [r7, #20]
		if (temp < 0)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b00      	cmp	r3, #0
 800149a:	da01      	bge.n	80014a0 <change_temperature.8644+0x50>
			temp = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
		if (temp > MAX_TEMP)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80014a6:	dd02      	ble.n	80014ae <change_temperature.8644+0x5e>
			temp = MAX_TEMP;
 80014a8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80014ac:	617b      	str	r3, [r7, #20]
		return (uint32_t)temp;
 80014ae:	697b      	ldr	r3, [r7, #20]
	}
 80014b0:	4618      	mov	r0, r3
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	66666667 	.word	0x66666667

080014c0 <change_time.8650>:
	{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	460b      	mov	r3, r1
 80014ca:	817b      	strh	r3, [r7, #10]
 80014cc:	4613      	mov	r3, r2
 80014ce:	727b      	strb	r3, [r7, #9]
 80014d0:	f8c7 c004 	str.w	ip, [r7, #4]
		int32_t temp = (int32_t)t; // to avoid zero-cross
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	617b      	str	r3, [r7, #20]
		int32_t step = 5; // how much to change the time in seconds
 80014d8:	2305      	movs	r3, #5
 80014da:	613b      	str	r3, [r7, #16]
		if (t < 60)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b3b      	cmp	r3, #59	; 0x3b
 80014e0:	d802      	bhi.n	80014e8 <change_time.8650+0x28>
			step = 5;
 80014e2:	2305      	movs	r3, #5
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	e02d      	b.n	8001544 <change_time.8650+0x84>
		else if (t < 120)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b77      	cmp	r3, #119	; 0x77
 80014ec:	d802      	bhi.n	80014f4 <change_time.8650+0x34>
			step = 10;
 80014ee:	230a      	movs	r3, #10
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	e027      	b.n	8001544 <change_time.8650+0x84>
		else if (t < 300)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80014fa:	d202      	bcs.n	8001502 <change_time.8650+0x42>
			step = 20;
 80014fc:	2314      	movs	r3, #20
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	e020      	b.n	8001544 <change_time.8650+0x84>
		else if (t < 600)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001508:	d202      	bcs.n	8001510 <change_time.8650+0x50>
			step = 30;
 800150a:	231e      	movs	r3, #30
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	e019      	b.n	8001544 <change_time.8650+0x84>
		else if (t < 1200)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001516:	d202      	bcs.n	800151e <change_time.8650+0x5e>
			step = 60;
 8001518:	233c      	movs	r3, #60	; 0x3c
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	e012      	b.n	8001544 <change_time.8650+0x84>
		else if (t < 3600)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001524:	d203      	bcs.n	800152e <change_time.8650+0x6e>
			step = 300;
 8001526:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	e00a      	b.n	8001544 <change_time.8650+0x84>
		else if (t < 7200)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8001534:	d203      	bcs.n	800153e <change_time.8650+0x7e>
			step = 600;
 8001536:	f44f 7316 	mov.w	r3, #600	; 0x258
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	e002      	b.n	8001544 <change_time.8650+0x84>
			step = 1800;
 800153e:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001542:	613b      	str	r3, [r7, #16]
		if (round)
 8001544:	7a7b      	ldrb	r3, [r7, #9]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <change_time.8650+0x9a>
			temp = (temp / step) * step; // round
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	617b      	str	r3, [r7, #20]
		temp += (diff)*step;
 800155a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	4413      	add	r3, r2
 8001568:	617b      	str	r3, [r7, #20]
		if (temp < 5)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b04      	cmp	r3, #4
 800156e:	dc01      	bgt.n	8001574 <change_time.8650+0xb4>
			temp = 5;
 8001570:	2305      	movs	r3, #5
 8001572:	617b      	str	r3, [r7, #20]
		if (temp > 900*60)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 800157a:	4293      	cmp	r3, r2
 800157c:	dd02      	ble.n	8001584 <change_time.8650+0xc4>
			temp = 900*60;
 800157e:	f24d 23f0 	movw	r3, #54000	; 0xd2f0
 8001582:	617b      	str	r3, [r7, #20]
		return (uint32_t)temp;
 8001584:	697b      	ldr	r3, [r7, #20]
	}
 8001586:	4618      	mov	r0, r3
 8001588:	371c      	adds	r7, #28
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <heatplate.8655>:
	{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	4661      	mov	r1, ip
 800159c:	f8c7 c000 	str.w	ip, [r7]
		if (reset)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <heatplate.8655+0x2a>
			last_encoder = encoder.value;
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <heatplate.8655+0x104>)
 80015a8:	881a      	ldrh	r2, [r3, #0]
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <heatplate.8655+0x108>)
 80015ac:	801a      	strh	r2, [r3, #0]
			last_time = HAL_GetTick();
 80015ae:	f002 fac1 	bl	8003b34 <HAL_GetTick>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a39      	ldr	r2, [pc, #228]	; (800169c <heatplate.8655+0x10c>)
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	e069      	b.n	800168e <heatplate.8655+0xfe>
		if (encoder.pressed)
 80015ba:	4b36      	ldr	r3, [pc, #216]	; (8001694 <heatplate.8655+0x104>)
 80015bc:	789b      	ldrb	r3, [r3, #2]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <heatplate.8655+0x38>
			temperature_SP = 0;
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <heatplate.8655+0x110>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	801a      	strh	r2, [r3, #0]
		temperature_SP = change_temperature(temperature_SP,
 80015c8:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <heatplate.8655+0x110>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
							encoder.value - last_encoder);
 80015ce:	4b31      	ldr	r3, [pc, #196]	; (8001694 <heatplate.8655+0x104>)
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <heatplate.8655+0x108>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	b29b      	uxth	r3, r3
		temperature_SP = change_temperature(temperature_SP,
 80015da:	b21b      	sxth	r3, r3
 80015dc:	468c      	mov	ip, r1
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff ff36 	bl	8001450 <change_temperature.8644>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <heatplate.8655+0x110>)
 80015ea:	801a      	strh	r2, [r3, #0]
		last_encoder = encoder.value;
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <heatplate.8655+0x104>)
 80015ee:	881a      	ldrh	r2, [r3, #0]
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <heatplate.8655+0x108>)
 80015f2:	801a      	strh	r2, [r3, #0]
		tbuf[0] = '+';
 80015f4:	232b      	movs	r3, #43	; 0x2b
 80015f6:	743b      	strb	r3, [r7, #16]
		int2time((HAL_GetTick() - last_time)/1000, tbuf+1);
 80015f8:	f002 fa9c 	bl	8003b34 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <heatplate.8655+0x10c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <heatplate.8655+0x114>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	099a      	lsrs	r2, r3, #6
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	3301      	adds	r3, #1
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f7fe ffcd 	bl	80005b4 <int2time>
		lcd_set_xy(&lcd, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	4822      	ldr	r0, [pc, #136]	; (80016a8 <heatplate.8655+0x118>)
 8001620:	f7fe fe86 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, (char*)tbuf);
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	4619      	mov	r1, r3
 800162a:	481f      	ldr	r0, [pc, #124]	; (80016a8 <heatplate.8655+0x118>)
 800162c:	f7fe fe69 	bl	8000302 <lcd_string>
		int2string(temperature_SP, buf, sizeof(buf));
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <heatplate.8655+0x110>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2203      	movs	r2, #3
 800163c:	4619      	mov	r1, r3
 800163e:	f7fe ff7b 	bl	8000538 <int2string>
		lcd_set_xy(&lcd, 7, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2107      	movs	r1, #7
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <heatplate.8655+0x118>)
 8001648:	f7fe fe72 	bl	8000330 <lcd_set_xy>
		lcd_out(&lcd, buf, sizeof(buf));
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2203      	movs	r2, #3
 8001652:	4619      	mov	r1, r3
 8001654:	4814      	ldr	r0, [pc, #80]	; (80016a8 <heatplate.8655+0x118>)
 8001656:	f7fe fe36 	bl	80002c6 <lcd_out>
		lcd_write_data(&lcd, scGRAD); // grad
 800165a:	21df      	movs	r1, #223	; 0xdf
 800165c:	4812      	ldr	r0, [pc, #72]	; (80016a8 <heatplate.8655+0x118>)
 800165e:	f7fe feed 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, scAR); // arrow right
 8001662:	217e      	movs	r1, #126	; 0x7e
 8001664:	4810      	ldr	r0, [pc, #64]	; (80016a8 <heatplate.8655+0x118>)
 8001666:	f7fe fee9 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 9, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2109      	movs	r1, #9
 800166e:	480e      	ldr	r0, [pc, #56]	; (80016a8 <heatplate.8655+0x118>)
 8001670:	f7fe fe5e 	bl	8000330 <lcd_set_xy>
		lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <heatplate.8655+0x11c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b04      	cmp	r3, #4
 800167a:	bf94      	ite	ls
 800167c:	2301      	movls	r3, #1
 800167e:	2300      	movhi	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	2300      	movs	r3, #0
 8001686:	2101      	movs	r1, #1
 8001688:	4807      	ldr	r0, [pc, #28]	; (80016a8 <heatplate.8655+0x118>)
 800168a:	f7fe fdef 	bl	800026c <lcd_mode>
	}
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000238 	.word	0x20000238
 8001698:	200002c2 	.word	0x200002c2
 800169c:	200002c4 	.word	0x200002c4
 80016a0:	2000024a 	.word	0x2000024a
 80016a4:	10624dd3 	.word	0x10624dd3
 80016a8:	20000570 	.word	0x20000570
 80016ac:	20000235 	.word	0x20000235

080016b0 <show_step_menu.8672>:
		{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4664      	mov	r4, ip
 80016b8:	f8c7 c004 	str.w	ip, [r7, #4]
			int2time(steps[pos].time, time_buf);
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <show_step_menu.8672+0xcc>)
 80016be:	f993 3000 	ldrsb.w	r3, [r3]
 80016c2:	4a2f      	ldr	r2, [pc, #188]	; (8001780 <show_step_menu.8672+0xd0>)
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4622      	mov	r2, r4
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ff70 	bl	80005b4 <int2time>
			lcd_set_xy(&lcd, 5, 1);
 80016d4:	2201      	movs	r2, #1
 80016d6:	2105      	movs	r1, #5
 80016d8:	482a      	ldr	r0, [pc, #168]	; (8001784 <show_step_menu.8672+0xd4>)
 80016da:	f7fe fe29 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, (char*)time_buf);
 80016de:	4623      	mov	r3, r4
 80016e0:	4619      	mov	r1, r3
 80016e2:	4828      	ldr	r0, [pc, #160]	; (8001784 <show_step_menu.8672+0xd4>)
 80016e4:	f7fe fe0d 	bl	8000302 <lcd_string>
			int2string(steps[pos].temp, buf, sizeof(buf));
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <show_step_menu.8672+0xcc>)
 80016ea:	f993 3000 	ldrsb.w	r3, [r3]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <show_step_menu.8672+0xd0>)
 80016f2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2203      	movs	r2, #3
 80016fe:	4619      	mov	r1, r3
 8001700:	f7fe ff1a 	bl	8000538 <int2string>
			lcd_set_xy(&lcd, 0, 1);
 8001704:	2201      	movs	r2, #1
 8001706:	2100      	movs	r1, #0
 8001708:	481e      	ldr	r0, [pc, #120]	; (8001784 <show_step_menu.8672+0xd4>)
 800170a:	f7fe fe11 	bl	8000330 <lcd_set_xy>
			lcd_out(&lcd, buf, sizeof(buf));
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	2203      	movs	r2, #3
 8001714:	4619      	mov	r1, r3
 8001716:	481b      	ldr	r0, [pc, #108]	; (8001784 <show_step_menu.8672+0xd4>)
 8001718:	f7fe fdd5 	bl	80002c6 <lcd_out>
			lcd_write_data(&lcd, scGRAD); // grad
 800171c:	21df      	movs	r1, #223	; 0xdf
 800171e:	4819      	ldr	r0, [pc, #100]	; (8001784 <show_step_menu.8672+0xd4>)
 8001720:	f7fe fe8c 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, ' ');
 8001724:	2120      	movs	r1, #32
 8001726:	4817      	ldr	r0, [pc, #92]	; (8001784 <show_step_menu.8672+0xd4>)
 8001728:	f7fe fe88 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 0, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2100      	movs	r1, #0
 8001730:	4814      	ldr	r0, [pc, #80]	; (8001784 <show_step_menu.8672+0xd4>)
 8001732:	f7fe fdfd 	bl	8000330 <lcd_set_xy>
			lcd_write_data(&lcd, '#');
 8001736:	2123      	movs	r1, #35	; 0x23
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <show_step_menu.8672+0xd4>)
 800173a:	f7fe fe7f 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, pos+'1');
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <show_step_menu.8672+0xcc>)
 8001740:	f993 3000 	ldrsb.w	r3, [r3]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	3331      	adds	r3, #49	; 0x31
 8001748:	b2db      	uxtb	r3, r3
 800174a:	4619      	mov	r1, r3
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <show_step_menu.8672+0xd4>)
 800174e:	f7fe fe75 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, '/');
 8001752:	212f      	movs	r1, #47	; 0x2f
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <show_step_menu.8672+0xd4>)
 8001756:	f7fe fe71 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, max_steps + '0');
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <show_step_menu.8672+0xd8>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	3330      	adds	r3, #48	; 0x30
 8001760:	b2db      	uxtb	r3, r3
 8001762:	4619      	mov	r1, r3
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <show_step_menu.8672+0xd4>)
 8001766:	f7fe fe69 	bl	800043c <lcd_write_data>
			lcd_string(&lcd, " step   ");
 800176a:	4908      	ldr	r1, [pc, #32]	; (800178c <show_step_menu.8672+0xdc>)
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <show_step_menu.8672+0xd4>)
 800176e:	f7fe fdc8 	bl	8000302 <lcd_string>
		}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bd90      	pop	{r4, r7, pc}
 800177a:	bf00      	nop
 800177c:	200002ca 	.word	0x200002ca
 8001780:	20000268 	.word	0x20000268
 8001784:	20000570 	.word	0x20000570
 8001788:	20000020 	.word	0x20000020
 800178c:	0800d800 	.word	0x0800d800

08001790 <do_profile_settings.8662>:
	{
 8001790:	b5b0      	push	{r4, r5, r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	4664      	mov	r4, ip
 800179c:	f8c7 c000 	str.w	ip, [r7]
	bool do_profile_settings(bool reset)
 80017a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017a4:	613b      	str	r3, [r7, #16]
		if (reset)
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d011      	beq.n	80017d0 <do_profile_settings.8662+0x40>
			last_encoder = encoder.value;
 80017ac:	4bb6      	ldr	r3, [pc, #728]	; (8001a88 <do_profile_settings.8662+0x2f8>)
 80017ae:	881a      	ldrh	r2, [r3, #0]
 80017b0:	4bb6      	ldr	r3, [pc, #728]	; (8001a8c <do_profile_settings.8662+0x2fc>)
 80017b2:	801a      	strh	r2, [r3, #0]
			pos = 0;
 80017b4:	4bb6      	ldr	r3, [pc, #728]	; (8001a90 <do_profile_settings.8662+0x300>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
			profile_state = 0;
 80017ba:	4bb6      	ldr	r3, [pc, #728]	; (8001a94 <do_profile_settings.8662+0x304>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
			last_time = HAL_GetTick();
 80017c0:	f002 f9b8 	bl	8003b34 <HAL_GetTick>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4ab4      	ldr	r2, [pc, #720]	; (8001a98 <do_profile_settings.8662+0x308>)
 80017c8:	6013      	str	r3, [r2, #0]
			return false;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f000 bccc 	b.w	8002168 <do_profile_settings.8662+0x9d8>
		if (HAL_GetTick() - last_time < 1000)
 80017d0:	f002 f9b0 	bl	8003b34 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	4bb0      	ldr	r3, [pc, #704]	; (8001a98 <do_profile_settings.8662+0x308>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017e0:	d202      	bcs.n	80017e8 <do_profile_settings.8662+0x58>
			return false; // delay to show intro text
 80017e2:	2300      	movs	r3, #0
 80017e4:	f000 bcc0 	b.w	8002168 <do_profile_settings.8662+0x9d8>
		int32_t diff = encoder.value - last_encoder;
 80017e8:	4ba7      	ldr	r3, [pc, #668]	; (8001a88 <do_profile_settings.8662+0x2f8>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4ba7      	ldr	r3, [pc, #668]	; (8001a8c <do_profile_settings.8662+0x2fc>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	617b      	str	r3, [r7, #20]
		last_encoder = encoder.value;
 80017f6:	4ba4      	ldr	r3, [pc, #656]	; (8001a88 <do_profile_settings.8662+0x2f8>)
 80017f8:	881a      	ldrh	r2, [r3, #0]
 80017fa:	4ba4      	ldr	r3, [pc, #656]	; (8001a8c <do_profile_settings.8662+0x2fc>)
 80017fc:	801a      	strh	r2, [r3, #0]
		switch (profile_state)
 80017fe:	4ba5      	ldr	r3, [pc, #660]	; (8001a94 <do_profile_settings.8662+0x304>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b5a      	cmp	r3, #90	; 0x5a
 8001804:	f200 84a2 	bhi.w	800214c <do_profile_settings.8662+0x9bc>
 8001808:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <do_profile_settings.8662+0x80>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	0800197d 	.word	0x0800197d
 8001814:	0800198b 	.word	0x0800198b
 8001818:	0800214d 	.word	0x0800214d
 800181c:	0800214d 	.word	0x0800214d
 8001820:	0800214d 	.word	0x0800214d
 8001824:	0800214d 	.word	0x0800214d
 8001828:	0800214d 	.word	0x0800214d
 800182c:	0800214d 	.word	0x0800214d
 8001830:	0800214d 	.word	0x0800214d
 8001834:	0800214d 	.word	0x0800214d
 8001838:	08001a57 	.word	0x08001a57
 800183c:	08001b07 	.word	0x08001b07
 8001840:	08001c1f 	.word	0x08001c1f
 8001844:	08001d45 	.word	0x08001d45
 8001848:	08001db3 	.word	0x08001db3
 800184c:	0800214d 	.word	0x0800214d
 8001850:	0800214d 	.word	0x0800214d
 8001854:	0800214d 	.word	0x0800214d
 8001858:	0800214d 	.word	0x0800214d
 800185c:	0800214d 	.word	0x0800214d
 8001860:	0800214d 	.word	0x0800214d
 8001864:	08001e21 	.word	0x08001e21
 8001868:	08001ea9 	.word	0x08001ea9
 800186c:	08001f37 	.word	0x08001f37
 8001870:	08001fc9 	.word	0x08001fc9
 8001874:	0800214d 	.word	0x0800214d
 8001878:	0800214d 	.word	0x0800214d
 800187c:	0800214d 	.word	0x0800214d
 8001880:	0800214d 	.word	0x0800214d
 8001884:	0800214d 	.word	0x0800214d
 8001888:	0800214d 	.word	0x0800214d
 800188c:	0800214d 	.word	0x0800214d
 8001890:	0800214d 	.word	0x0800214d
 8001894:	0800214d 	.word	0x0800214d
 8001898:	0800214d 	.word	0x0800214d
 800189c:	0800214d 	.word	0x0800214d
 80018a0:	0800214d 	.word	0x0800214d
 80018a4:	0800214d 	.word	0x0800214d
 80018a8:	0800214d 	.word	0x0800214d
 80018ac:	0800214d 	.word	0x0800214d
 80018b0:	0800214d 	.word	0x0800214d
 80018b4:	0800214d 	.word	0x0800214d
 80018b8:	0800214d 	.word	0x0800214d
 80018bc:	0800214d 	.word	0x0800214d
 80018c0:	0800214d 	.word	0x0800214d
 80018c4:	0800214d 	.word	0x0800214d
 80018c8:	0800214d 	.word	0x0800214d
 80018cc:	0800214d 	.word	0x0800214d
 80018d0:	0800214d 	.word	0x0800214d
 80018d4:	0800214d 	.word	0x0800214d
 80018d8:	0800214d 	.word	0x0800214d
 80018dc:	0800214d 	.word	0x0800214d
 80018e0:	0800214d 	.word	0x0800214d
 80018e4:	0800214d 	.word	0x0800214d
 80018e8:	0800214d 	.word	0x0800214d
 80018ec:	0800214d 	.word	0x0800214d
 80018f0:	0800214d 	.word	0x0800214d
 80018f4:	0800214d 	.word	0x0800214d
 80018f8:	0800214d 	.word	0x0800214d
 80018fc:	0800214d 	.word	0x0800214d
 8001900:	0800214d 	.word	0x0800214d
 8001904:	0800214d 	.word	0x0800214d
 8001908:	0800214d 	.word	0x0800214d
 800190c:	0800214d 	.word	0x0800214d
 8001910:	0800214d 	.word	0x0800214d
 8001914:	0800214d 	.word	0x0800214d
 8001918:	0800214d 	.word	0x0800214d
 800191c:	0800214d 	.word	0x0800214d
 8001920:	0800214d 	.word	0x0800214d
 8001924:	0800214d 	.word	0x0800214d
 8001928:	0800214d 	.word	0x0800214d
 800192c:	0800214d 	.word	0x0800214d
 8001930:	0800214d 	.word	0x0800214d
 8001934:	0800214d 	.word	0x0800214d
 8001938:	0800214d 	.word	0x0800214d
 800193c:	0800214d 	.word	0x0800214d
 8001940:	0800214d 	.word	0x0800214d
 8001944:	0800214d 	.word	0x0800214d
 8001948:	0800214d 	.word	0x0800214d
 800194c:	0800214d 	.word	0x0800214d
 8001950:	0800214d 	.word	0x0800214d
 8001954:	0800214d 	.word	0x0800214d
 8001958:	0800214d 	.word	0x0800214d
 800195c:	0800214d 	.word	0x0800214d
 8001960:	0800214d 	.word	0x0800214d
 8001964:	0800214d 	.word	0x0800214d
 8001968:	0800214d 	.word	0x0800214d
 800196c:	0800214d 	.word	0x0800214d
 8001970:	0800214d 	.word	0x0800214d
 8001974:	0800214d 	.word	0x0800214d
 8001978:	08002083 	.word	0x08002083
			pos = 0;
 800197c:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <do_profile_settings.8662+0x300>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
			profile_state = 90;
 8001982:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <do_profile_settings.8662+0x304>)
 8001984:	225a      	movs	r2, #90	; 0x5a
 8001986:	701a      	strb	r2, [r3, #0]
			break;
 8001988:	e3e9      	b.n	800215e <do_profile_settings.8662+0x9ce>
			if (diff == 0)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10e      	bne.n	80019ae <do_profile_settings.8662+0x21e>
				if (last_button && (!encoder.pressed))
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <do_profile_settings.8662+0x30c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d023      	beq.n	80019e0 <do_profile_settings.8662+0x250>
 8001998:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <do_profile_settings.8662+0x2f8>)
 800199a:	789b      	ldrb	r3, [r3, #2]
 800199c:	f083 0301 	eor.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d01c      	beq.n	80019e0 <do_profile_settings.8662+0x250>
					profile_state = 10;
 80019a6:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <do_profile_settings.8662+0x304>)
 80019a8:	220a      	movs	r2, #10
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	e018      	b.n	80019e0 <do_profile_settings.8662+0x250>
				if (diff > 0)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	dd09      	ble.n	80019c8 <do_profile_settings.8662+0x238>
					pos++;
 80019b4:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <do_profile_settings.8662+0x300>)
 80019b6:	f993 3000 	ldrsb.w	r3, [r3]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	3301      	adds	r3, #1
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	b25a      	sxtb	r2, r3
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <do_profile_settings.8662+0x300>)
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	e00b      	b.n	80019e0 <do_profile_settings.8662+0x250>
				else if (diff < 0)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	da08      	bge.n	80019e0 <do_profile_settings.8662+0x250>
					pos--;
 80019ce:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <do_profile_settings.8662+0x300>)
 80019d0:	f993 3000 	ldrsb.w	r3, [r3]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	b25a      	sxtb	r2, r3
 80019dc:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <do_profile_settings.8662+0x300>)
 80019de:	701a      	strb	r2, [r3, #0]
			if ((pos < 0) || (pos >= max_steps))
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <do_profile_settings.8662+0x300>)
 80019e2:	f993 3000 	ldrsb.w	r3, [r3]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db07      	blt.n	80019fa <do_profile_settings.8662+0x26a>
 80019ea:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <do_profile_settings.8662+0x300>)
 80019ec:	f993 3000 	ldrsb.w	r3, [r3]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <do_profile_settings.8662+0x310>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	db03      	blt.n	8001a02 <do_profile_settings.8662+0x272>
				profile_state = 90;
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <do_profile_settings.8662+0x304>)
 80019fc:	225a      	movs	r2, #90	; 0x5a
 80019fe:	701a      	strb	r2, [r3, #0]
				break;
 8001a00:	e3ad      	b.n	800215e <do_profile_settings.8662+0x9ce>
			show_step_menu();
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	469c      	mov	ip, r3
 8001a08:	f7ff fe52 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2109      	movs	r1, #9
 8001a10:	4824      	ldr	r0, [pc, #144]	; (8001aa4 <do_profile_settings.8662+0x314>)
 8001a12:	f7fe fc8d 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "    ");
 8001a16:	4924      	ldr	r1, [pc, #144]	; (8001aa8 <do_profile_settings.8662+0x318>)
 8001a18:	4822      	ldr	r0, [pc, #136]	; (8001aa4 <do_profile_settings.8662+0x314>)
 8001a1a:	f7fe fc72 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 11, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	210b      	movs	r1, #11
 8001a22:	4820      	ldr	r0, [pc, #128]	; (8001aa4 <do_profile_settings.8662+0x314>)
 8001a24:	f7fe fc84 	bl	8000330 <lcd_set_xy>
			lcd_write_data(&lcd, cc3dots);
 8001a28:	2106      	movs	r1, #6
 8001a2a:	481e      	ldr	r0, [pc, #120]	; (8001aa4 <do_profile_settings.8662+0x314>)
 8001a2c:	f7fe fd06 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 11, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	210b      	movs	r1, #11
 8001a34:	481b      	ldr	r0, [pc, #108]	; (8001aa4 <do_profile_settings.8662+0x314>)
 8001a36:	f7fe fc7b 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <do_profile_settings.8662+0x31c>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	bf94      	ite	ls
 8001a42:	2301      	movls	r3, #1
 8001a44:	2300      	movhi	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	4815      	ldr	r0, [pc, #84]	; (8001aa4 <do_profile_settings.8662+0x314>)
 8001a50:	f7fe fc0c 	bl	800026c <lcd_mode>
			break;
 8001a54:	e383      	b.n	800215e <do_profile_settings.8662+0x9ce>
			if (diff == 0)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10e      	bne.n	8001a7a <do_profile_settings.8662+0x2ea>
				if (last_button && (!encoder.pressed))
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <do_profile_settings.8662+0x30c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d02b      	beq.n	8001abc <do_profile_settings.8662+0x32c>
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <do_profile_settings.8662+0x2f8>)
 8001a66:	789b      	ldrb	r3, [r3, #2]
 8001a68:	f083 0301 	eor.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d024      	beq.n	8001abc <do_profile_settings.8662+0x32c>
					profile_state = 1; // stop editing
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <do_profile_settings.8662+0x304>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	e020      	b.n	8001abc <do_profile_settings.8662+0x32c>
				if (diff > 0)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	dd17      	ble.n	8001ab0 <do_profile_settings.8662+0x320>
					profile_state = 21;
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <do_profile_settings.8662+0x304>)
 8001a82:	2215      	movs	r2, #21
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e019      	b.n	8001abc <do_profile_settings.8662+0x32c>
 8001a88:	20000238 	.word	0x20000238
 8001a8c:	200002c8 	.word	0x200002c8
 8001a90:	200002ca 	.word	0x200002ca
 8001a94:	200002cb 	.word	0x200002cb
 8001a98:	200002cc 	.word	0x200002cc
 8001a9c:	200002d0 	.word	0x200002d0
 8001aa0:	20000020 	.word	0x20000020
 8001aa4:	20000570 	.word	0x20000570
 8001aa8:	0800d80c 	.word	0x0800d80c
 8001aac:	20000235 	.word	0x20000235
				else if (diff < 0)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da02      	bge.n	8001abc <do_profile_settings.8662+0x32c>
					profile_state = 12;
 8001ab6:	4b9a      	ldr	r3, [pc, #616]	; (8001d20 <do_profile_settings.8662+0x590>)
 8001ab8:	220c      	movs	r2, #12
 8001aba:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	f7ff fdf5 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2109      	movs	r1, #9
 8001aca:	4896      	ldr	r0, [pc, #600]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001acc:	f7fe fc30 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001ad0:	4995      	ldr	r1, [pc, #596]	; (8001d28 <do_profile_settings.8662+0x598>)
 8001ad2:	4894      	ldr	r0, [pc, #592]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001ad4:	f7fe fc15 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4892      	ldr	r0, [pc, #584]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001adc:	f7fe fcae 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	210c      	movs	r1, #12
 8001ae4:	488f      	ldr	r0, [pc, #572]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001ae6:	f7fe fc23 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001aea:	4b90      	ldr	r3, [pc, #576]	; (8001d2c <do_profile_settings.8662+0x59c>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf94      	ite	ls
 8001af2:	2301      	movls	r3, #1
 8001af4:	2300      	movhi	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	2300      	movs	r3, #0
 8001afc:	2101      	movs	r1, #1
 8001afe:	4889      	ldr	r0, [pc, #548]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001b00:	f7fe fbb4 	bl	800026c <lcd_mode>
			break;
 8001b04:	e32b      	b.n	800215e <do_profile_settings.8662+0x9ce>
			if (diff == 0)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d156      	bne.n	8001bba <do_profile_settings.8662+0x42a>
				if (last_button && (!encoder.pressed))
 8001b0c:	4b88      	ldr	r3, [pc, #544]	; (8001d30 <do_profile_settings.8662+0x5a0>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d05f      	beq.n	8001bd4 <do_profile_settings.8662+0x444>
 8001b14:	4b87      	ldr	r3, [pc, #540]	; (8001d34 <do_profile_settings.8662+0x5a4>)
 8001b16:	789b      	ldrb	r3, [r3, #2]
 8001b18:	f083 0301 	eor.w	r3, r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d058      	beq.n	8001bd4 <do_profile_settings.8662+0x444>
					if (max_steps >= 9)
 8001b22:	4b85      	ldr	r3, [pc, #532]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d903      	bls.n	8001b32 <do_profile_settings.8662+0x3a2>
						profile_state = 13;
 8001b2a:	4b7d      	ldr	r3, [pc, #500]	; (8001d20 <do_profile_settings.8662+0x590>)
 8001b2c:	220d      	movs	r2, #13
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	e050      	b.n	8001bd4 <do_profile_settings.8662+0x444>
						for (int i = 8; i > pos; i--)
 8001b32:	2308      	movs	r3, #8
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	e016      	b.n	8001b66 <do_profile_settings.8662+0x3d6>
							steps[i].time = steps[i-1].time;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	4a7f      	ldr	r2, [pc, #508]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	497d      	ldr	r1, [pc, #500]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	605a      	str	r2, [r3, #4]
							steps[i].temp = steps[i-1].temp;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	4a7a      	ldr	r2, [pc, #488]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001b54:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001b58:	4978      	ldr	r1, [pc, #480]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						for (int i = 8; i > pos; i--)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	4b76      	ldr	r3, [pc, #472]	; (8001d40 <do_profile_settings.8662+0x5b0>)
 8001b68:	f993 3000 	ldrsb.w	r3, [r3]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	4293      	cmp	r3, r2
 8001b72:	dce1      	bgt.n	8001b38 <do_profile_settings.8662+0x3a8>
						pos++;
 8001b74:	4b72      	ldr	r3, [pc, #456]	; (8001d40 <do_profile_settings.8662+0x5b0>)
 8001b76:	f993 3000 	ldrsb.w	r3, [r3]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	b25a      	sxtb	r2, r3
 8001b82:	4b6f      	ldr	r3, [pc, #444]	; (8001d40 <do_profile_settings.8662+0x5b0>)
 8001b84:	701a      	strb	r2, [r3, #0]
						steps[pos].time = 60;
 8001b86:	4b6e      	ldr	r3, [pc, #440]	; (8001d40 <do_profile_settings.8662+0x5b0>)
 8001b88:	f993 3000 	ldrsb.w	r3, [r3]
 8001b8c:	4a6b      	ldr	r2, [pc, #428]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	223c      	movs	r2, #60	; 0x3c
 8001b94:	605a      	str	r2, [r3, #4]
						steps[pos].temp = 100;
 8001b96:	4b6a      	ldr	r3, [pc, #424]	; (8001d40 <do_profile_settings.8662+0x5b0>)
 8001b98:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4b67      	ldr	r3, [pc, #412]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001ba0:	2264      	movs	r2, #100	; 0x64
 8001ba2:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
						max_steps++;
 8001ba6:	4b64      	ldr	r3, [pc, #400]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b62      	ldr	r3, [pc, #392]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001bb0:	701a      	strb	r2, [r3, #0]
						profile_state = 10; // wait for confirmation
 8001bb2:	4b5b      	ldr	r3, [pc, #364]	; (8001d20 <do_profile_settings.8662+0x590>)
 8001bb4:	220a      	movs	r2, #10
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	e00c      	b.n	8001bd4 <do_profile_settings.8662+0x444>
				if (diff > 0)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	dd03      	ble.n	8001bc8 <do_profile_settings.8662+0x438>
					profile_state = 12;
 8001bc0:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <do_profile_settings.8662+0x590>)
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e005      	b.n	8001bd4 <do_profile_settings.8662+0x444>
				else if (diff < 0)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	da02      	bge.n	8001bd4 <do_profile_settings.8662+0x444>
					profile_state = 23;
 8001bce:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <do_profile_settings.8662+0x590>)
 8001bd0:	2217      	movs	r2, #23
 8001bd2:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	469c      	mov	ip, r3
 8001bda:	f7ff fd69 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8001bde:	2201      	movs	r2, #1
 8001be0:	2109      	movs	r1, #9
 8001be2:	4850      	ldr	r0, [pc, #320]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001be4:	f7fe fba4 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001be8:	494f      	ldr	r1, [pc, #316]	; (8001d28 <do_profile_settings.8662+0x598>)
 8001bea:	484e      	ldr	r0, [pc, #312]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001bec:	f7fe fb89 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	484c      	ldr	r0, [pc, #304]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001bf4:	f7fe fc22 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 10, 1);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	210a      	movs	r1, #10
 8001bfc:	4849      	ldr	r0, [pc, #292]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001bfe:	f7fe fb97 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001c02:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <do_profile_settings.8662+0x59c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf94      	ite	ls
 8001c0a:	2301      	movls	r3, #1
 8001c0c:	2300      	movhi	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	2300      	movs	r3, #0
 8001c14:	2101      	movs	r1, #1
 8001c16:	4843      	ldr	r0, [pc, #268]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001c18:	f7fe fb28 	bl	800026c <lcd_mode>
			break;
 8001c1c:	e29f      	b.n	800215e <do_profile_settings.8662+0x9ce>
			if (diff == 0)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d14a      	bne.n	8001cba <do_profile_settings.8662+0x52a>
				if (last_button && (!encoder.pressed))
 8001c24:	4b42      	ldr	r3, [pc, #264]	; (8001d30 <do_profile_settings.8662+0x5a0>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d053      	beq.n	8001cd4 <do_profile_settings.8662+0x544>
 8001c2c:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <do_profile_settings.8662+0x5a4>)
 8001c2e:	789b      	ldrb	r3, [r3, #2]
 8001c30:	f083 0301 	eor.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d04c      	beq.n	8001cd4 <do_profile_settings.8662+0x544>
					if (max_steps <= 1)
 8001c3a:	4b3f      	ldr	r3, [pc, #252]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d803      	bhi.n	8001c4a <do_profile_settings.8662+0x4ba>
						profile_state = 14;
 8001c42:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <do_profile_settings.8662+0x590>)
 8001c44:	220e      	movs	r2, #14
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e044      	b.n	8001cd4 <do_profile_settings.8662+0x544>
						for (int i = pos; i < 8; i++)
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <do_profile_settings.8662+0x5b0>)
 8001c4c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	e016      	b.n	8001c82 <do_profile_settings.8662+0x4f2>
							steps[i].time = steps[i+1].time;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	3301      	adds	r3, #1
 8001c58:	4a38      	ldr	r2, [pc, #224]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	4936      	ldr	r1, [pc, #216]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	440b      	add	r3, r1
 8001c68:	605a      	str	r2, [r3, #4]
							steps[i].temp = steps[i+1].temp;
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	4a33      	ldr	r2, [pc, #204]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001c70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001c74:	4931      	ldr	r1, [pc, #196]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						for (int i = pos; i < 8; i++)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b07      	cmp	r3, #7
 8001c86:	dde5      	ble.n	8001c54 <do_profile_settings.8662+0x4c4>
						max_steps--;
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001c92:	701a      	strb	r2, [r3, #0]
						if (pos >= max_steps) 	// if it was last position
 8001c94:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <do_profile_settings.8662+0x5b0>)
 8001c96:	f993 3000 	ldrsb.w	r3, [r3]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	db06      	blt.n	8001cb2 <do_profile_settings.8662+0x522>
							pos = max_steps-1; 	// move to the previous one
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	b25a      	sxtb	r2, r3
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <do_profile_settings.8662+0x5b0>)
 8001cb0:	701a      	strb	r2, [r3, #0]
						profile_state = 1; 	// show profile
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <do_profile_settings.8662+0x590>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
 8001cb8:	e00c      	b.n	8001cd4 <do_profile_settings.8662+0x544>
				if (diff > 0)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	dd03      	ble.n	8001cc8 <do_profile_settings.8662+0x538>
					profile_state = 10;
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <do_profile_settings.8662+0x590>)
 8001cc2:	220a      	movs	r2, #10
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	e005      	b.n	8001cd4 <do_profile_settings.8662+0x544>
				else if (diff < 0)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	da02      	bge.n	8001cd4 <do_profile_settings.8662+0x544>
					profile_state = 11;
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <do_profile_settings.8662+0x590>)
 8001cd0:	220b      	movs	r2, #11
 8001cd2:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	469c      	mov	ip, r3
 8001cda:	f7ff fce9 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2109      	movs	r1, #9
 8001ce2:	4810      	ldr	r0, [pc, #64]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001ce4:	f7fe fb24 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001ce8:	490f      	ldr	r1, [pc, #60]	; (8001d28 <do_profile_settings.8662+0x598>)
 8001cea:	480e      	ldr	r0, [pc, #56]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001cec:	f7fe fb09 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	480c      	ldr	r0, [pc, #48]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001cf4:	f7fe fba2 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 11, 1);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	210b      	movs	r1, #11
 8001cfc:	4809      	ldr	r0, [pc, #36]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001cfe:	f7fe fb17 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <do_profile_settings.8662+0x59c>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf94      	ite	ls
 8001d0a:	2301      	movls	r3, #1
 8001d0c:	2300      	movhi	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	2300      	movs	r3, #0
 8001d14:	2101      	movs	r1, #1
 8001d16:	4803      	ldr	r0, [pc, #12]	; (8001d24 <do_profile_settings.8662+0x594>)
 8001d18:	f7fe faa8 	bl	800026c <lcd_mode>
			break;
 8001d1c:	e21f      	b.n	800215e <do_profile_settings.8662+0x9ce>
 8001d1e:	bf00      	nop
 8001d20:	200002cb 	.word	0x200002cb
 8001d24:	20000570 	.word	0x20000570
 8001d28:	0800d814 	.word	0x0800d814
 8001d2c:	20000235 	.word	0x20000235
 8001d30:	200002d0 	.word	0x200002d0
 8001d34:	20000238 	.word	0x20000238
 8001d38:	20000020 	.word	0x20000020
 8001d3c:	20000268 	.word	0x20000268
 8001d40:	200002ca 	.word	0x200002ca
			if (last_button && (!encoder.pressed)) // wait for confirmation
 8001d44:	4ba9      	ldr	r3, [pc, #676]	; (8001fec <do_profile_settings.8662+0x85c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <do_profile_settings.8662+0x5d0>
 8001d4c:	4ba8      	ldr	r3, [pc, #672]	; (8001ff0 <do_profile_settings.8662+0x860>)
 8001d4e:	789b      	ldrb	r3, [r3, #2]
 8001d50:	f083 0301 	eor.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <do_profile_settings.8662+0x5d0>
				profile_state = 10;
 8001d5a:	4ba6      	ldr	r3, [pc, #664]	; (8001ff4 <do_profile_settings.8662+0x864>)
 8001d5c:	220a      	movs	r2, #10
 8001d5e:	701a      	strb	r2, [r3, #0]
			lcd_set_xy(&lcd, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	48a4      	ldr	r0, [pc, #656]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001d66:	f7fe fae3 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "Not possible");
 8001d6a:	49a4      	ldr	r1, [pc, #656]	; (8001ffc <do_profile_settings.8662+0x86c>)
 8001d6c:	48a2      	ldr	r0, [pc, #648]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001d6e:	f7fe fac8 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 0, 1);
 8001d72:	2201      	movs	r2, #1
 8001d74:	2100      	movs	r1, #0
 8001d76:	48a0      	ldr	r0, [pc, #640]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001d78:	f7fe fada 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "max 9 steps ");
 8001d7c:	49a0      	ldr	r1, [pc, #640]	; (8002000 <do_profile_settings.8662+0x870>)
 8001d7e:	489e      	ldr	r0, [pc, #632]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001d80:	f7fe fabf 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001d84:	2100      	movs	r1, #0
 8001d86:	489c      	ldr	r0, [pc, #624]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001d88:	f7fe fb58 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	210c      	movs	r1, #12
 8001d90:	4899      	ldr	r0, [pc, #612]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001d92:	f7fe facd 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001d96:	4b9b      	ldr	r3, [pc, #620]	; (8002004 <do_profile_settings.8662+0x874>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	bf94      	ite	ls
 8001d9e:	2301      	movls	r3, #1
 8001da0:	2300      	movhi	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	2300      	movs	r3, #0
 8001da8:	2101      	movs	r1, #1
 8001daa:	4893      	ldr	r0, [pc, #588]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001dac:	f7fe fa5e 	bl	800026c <lcd_mode>
			break;
 8001db0:	e1d5      	b.n	800215e <do_profile_settings.8662+0x9ce>
			if (last_button && (!encoder.pressed)) // wait for confirmation
 8001db2:	4b8e      	ldr	r3, [pc, #568]	; (8001fec <do_profile_settings.8662+0x85c>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <do_profile_settings.8662+0x63e>
 8001dba:	4b8d      	ldr	r3, [pc, #564]	; (8001ff0 <do_profile_settings.8662+0x860>)
 8001dbc:	789b      	ldrb	r3, [r3, #2]
 8001dbe:	f083 0301 	eor.w	r3, r3, #1
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <do_profile_settings.8662+0x63e>
				profile_state = 10;
 8001dc8:	4b8a      	ldr	r3, [pc, #552]	; (8001ff4 <do_profile_settings.8662+0x864>)
 8001dca:	220a      	movs	r2, #10
 8001dcc:	701a      	strb	r2, [r3, #0]
			lcd_set_xy(&lcd, 0, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4889      	ldr	r0, [pc, #548]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001dd4:	f7fe faac 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "Not possible");
 8001dd8:	4988      	ldr	r1, [pc, #544]	; (8001ffc <do_profile_settings.8662+0x86c>)
 8001dda:	4887      	ldr	r0, [pc, #540]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001ddc:	f7fe fa91 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 0, 1);
 8001de0:	2201      	movs	r2, #1
 8001de2:	2100      	movs	r1, #0
 8001de4:	4884      	ldr	r0, [pc, #528]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001de6:	f7fe faa3 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "min 1 step  ");
 8001dea:	4987      	ldr	r1, [pc, #540]	; (8002008 <do_profile_settings.8662+0x878>)
 8001dec:	4882      	ldr	r0, [pc, #520]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001dee:	f7fe fa88 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001df2:	2100      	movs	r1, #0
 8001df4:	4880      	ldr	r0, [pc, #512]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001df6:	f7fe fb21 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	210c      	movs	r1, #12
 8001dfe:	487e      	ldr	r0, [pc, #504]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001e00:	f7fe fa96 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001e04:	4b7f      	ldr	r3, [pc, #508]	; (8002004 <do_profile_settings.8662+0x874>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	bf94      	ite	ls
 8001e0c:	2301      	movls	r3, #1
 8001e0e:	2300      	movhi	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	2300      	movs	r3, #0
 8001e16:	2101      	movs	r1, #1
 8001e18:	4877      	ldr	r0, [pc, #476]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001e1a:	f7fe fa27 	bl	800026c <lcd_mode>
			break;
 8001e1e:	e19e      	b.n	800215e <do_profile_settings.8662+0x9ce>
			if (diff == 0)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10e      	bne.n	8001e44 <do_profile_settings.8662+0x6b4>
				if (last_button && (!encoder.pressed))
 8001e26:	4b71      	ldr	r3, [pc, #452]	; (8001fec <do_profile_settings.8662+0x85c>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d017      	beq.n	8001e5e <do_profile_settings.8662+0x6ce>
 8001e2e:	4b70      	ldr	r3, [pc, #448]	; (8001ff0 <do_profile_settings.8662+0x860>)
 8001e30:	789b      	ldrb	r3, [r3, #2]
 8001e32:	f083 0301 	eor.w	r3, r3, #1
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <do_profile_settings.8662+0x6ce>
					profile_state = 22; // start edit
 8001e3c:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <do_profile_settings.8662+0x864>)
 8001e3e:	2216      	movs	r2, #22
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e00c      	b.n	8001e5e <do_profile_settings.8662+0x6ce>
				if (diff > 0)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	dd03      	ble.n	8001e52 <do_profile_settings.8662+0x6c2>
					profile_state = 23;
 8001e4a:	4b6a      	ldr	r3, [pc, #424]	; (8001ff4 <do_profile_settings.8662+0x864>)
 8001e4c:	2217      	movs	r2, #23
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e005      	b.n	8001e5e <do_profile_settings.8662+0x6ce>
				else if (diff < 0)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da02      	bge.n	8001e5e <do_profile_settings.8662+0x6ce>
					profile_state = 10;
 8001e58:	4b66      	ldr	r3, [pc, #408]	; (8001ff4 <do_profile_settings.8662+0x864>)
 8001e5a:	220a      	movs	r2, #10
 8001e5c:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	469c      	mov	ip, r3
 8001e64:	f7ff fc24 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2109      	movs	r1, #9
 8001e6c:	4862      	ldr	r0, [pc, #392]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001e6e:	f7fe fa5f 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001e72:	4966      	ldr	r1, [pc, #408]	; (800200c <do_profile_settings.8662+0x87c>)
 8001e74:	4860      	ldr	r0, [pc, #384]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001e76:	f7fe fa44 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	485e      	ldr	r0, [pc, #376]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001e7e:	f7fe fadd 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 2, 1);
 8001e82:	2201      	movs	r2, #1
 8001e84:	2102      	movs	r1, #2
 8001e86:	485c      	ldr	r0, [pc, #368]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001e88:	f7fe fa52 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <do_profile_settings.8662+0x874>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	bf94      	ite	ls
 8001e94:	2301      	movls	r3, #1
 8001e96:	2300      	movhi	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	4855      	ldr	r0, [pc, #340]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001ea2:	f7fe f9e3 	bl	800026c <lcd_mode>
			break;
 8001ea6:	e15a      	b.n	800215e <do_profile_settings.8662+0x9ce>
			if (diff == 0)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10e      	bne.n	8001ecc <do_profile_settings.8662+0x73c>
				if (last_button && (!encoder.pressed))
 8001eae:	4b4f      	ldr	r3, [pc, #316]	; (8001fec <do_profile_settings.8662+0x85c>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d021      	beq.n	8001efa <do_profile_settings.8662+0x76a>
 8001eb6:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <do_profile_settings.8662+0x860>)
 8001eb8:	789b      	ldrb	r3, [r3, #2]
 8001eba:	f083 0301 	eor.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01a      	beq.n	8001efa <do_profile_settings.8662+0x76a>
					profile_state = 21; // stop editing
 8001ec4:	4b4b      	ldr	r3, [pc, #300]	; (8001ff4 <do_profile_settings.8662+0x864>)
 8001ec6:	2215      	movs	r2, #21
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	e016      	b.n	8001efa <do_profile_settings.8662+0x76a>
				steps[pos].temp = change_temperature(steps[pos].temp, diff);
 8001ecc:	4b50      	ldr	r3, [pc, #320]	; (8002010 <do_profile_settings.8662+0x880>)
 8001ece:	f993 3000 	ldrsb.w	r3, [r3]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <do_profile_settings.8662+0x884>)
 8001ed6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001eda:	461a      	mov	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	46a4      	mov	ip, r4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	f7ff fab3 	bl	8001450 <change_temperature.8644>
 8001eea:	4601      	mov	r1, r0
 8001eec:	4b48      	ldr	r3, [pc, #288]	; (8002010 <do_profile_settings.8662+0x880>)
 8001eee:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b47      	ldr	r3, [pc, #284]	; (8002014 <do_profile_settings.8662+0x884>)
 8001ef6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			show_step_menu();
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	469c      	mov	ip, r3
 8001f00:	f7ff fbd6 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8001f04:	2201      	movs	r2, #1
 8001f06:	2109      	movs	r1, #9
 8001f08:	483b      	ldr	r0, [pc, #236]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001f0a:	f7fe fa11 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001f0e:	493f      	ldr	r1, [pc, #252]	; (800200c <do_profile_settings.8662+0x87c>)
 8001f10:	4839      	ldr	r0, [pc, #228]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001f12:	f7fe f9f6 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001f16:	2100      	movs	r1, #0
 8001f18:	4837      	ldr	r0, [pc, #220]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001f1a:	f7fe fa8f 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 2, 1);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	2102      	movs	r1, #2
 8001f22:	4835      	ldr	r0, [pc, #212]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001f24:	f7fe fa04 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 8001f28:	2301      	movs	r3, #1
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	4832      	ldr	r0, [pc, #200]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001f30:	f7fe f99c 	bl	800026c <lcd_mode>
			break;
 8001f34:	e113      	b.n	800215e <do_profile_settings.8662+0x9ce>
			if (diff == 0)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10e      	bne.n	8001f5a <do_profile_settings.8662+0x7ca>
				if (last_button && (!encoder.pressed))
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <do_profile_settings.8662+0x85c>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d017      	beq.n	8001f74 <do_profile_settings.8662+0x7e4>
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <do_profile_settings.8662+0x860>)
 8001f46:	789b      	ldrb	r3, [r3, #2]
 8001f48:	f083 0301 	eor.w	r3, r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d010      	beq.n	8001f74 <do_profile_settings.8662+0x7e4>
					profile_state = 24; // start edit
 8001f52:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <do_profile_settings.8662+0x864>)
 8001f54:	2218      	movs	r2, #24
 8001f56:	701a      	strb	r2, [r3, #0]
 8001f58:	e00c      	b.n	8001f74 <do_profile_settings.8662+0x7e4>
				if (diff > 0)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	dd03      	ble.n	8001f68 <do_profile_settings.8662+0x7d8>
					profile_state = 11;
 8001f60:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <do_profile_settings.8662+0x864>)
 8001f62:	220b      	movs	r2, #11
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	e005      	b.n	8001f74 <do_profile_settings.8662+0x7e4>
				else if (diff < 0)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	da02      	bge.n	8001f74 <do_profile_settings.8662+0x7e4>
					profile_state = 21;
 8001f6e:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <do_profile_settings.8662+0x864>)
 8001f70:	2215      	movs	r2, #21
 8001f72:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	469c      	mov	ip, r3
 8001f7a:	f7ff fb99 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 0, 1);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2100      	movs	r1, #0
 8001f82:	481d      	ldr	r0, [pc, #116]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001f84:	f7fe f9d4 	bl	8000330 <lcd_set_xy>
			lcd_set_xy(&lcd, 9, 1);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2109      	movs	r1, #9
 8001f8c:	481a      	ldr	r0, [pc, #104]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001f8e:	f7fe f9cf 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001f92:	491e      	ldr	r1, [pc, #120]	; (800200c <do_profile_settings.8662+0x87c>)
 8001f94:	4818      	ldr	r0, [pc, #96]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001f96:	f7fe f9b4 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4816      	ldr	r0, [pc, #88]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001f9e:	f7fe fa4d 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 8, 1);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2108      	movs	r1, #8
 8001fa6:	4814      	ldr	r0, [pc, #80]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001fa8:	f7fe f9c2 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001fac:	4b15      	ldr	r3, [pc, #84]	; (8002004 <do_profile_settings.8662+0x874>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	bf94      	ite	ls
 8001fb4:	2301      	movls	r3, #1
 8001fb6:	2300      	movhi	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <do_profile_settings.8662+0x868>)
 8001fc2:	f7fe f953 	bl	800026c <lcd_mode>
			break;
 8001fc6:	e0ca      	b.n	800215e <do_profile_settings.8662+0x9ce>
			if (diff == 0)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d124      	bne.n	8002018 <do_profile_settings.8662+0x888>
				if (last_button && (!encoder.pressed))
 8001fce:	4b07      	ldr	r3, [pc, #28]	; (8001fec <do_profile_settings.8662+0x85c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d037      	beq.n	8002046 <do_profile_settings.8662+0x8b6>
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <do_profile_settings.8662+0x860>)
 8001fd8:	789b      	ldrb	r3, [r3, #2]
 8001fda:	f083 0301 	eor.w	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d030      	beq.n	8002046 <do_profile_settings.8662+0x8b6>
					profile_state = 23; // stop editing
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <do_profile_settings.8662+0x864>)
 8001fe6:	2217      	movs	r2, #23
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	e02c      	b.n	8002046 <do_profile_settings.8662+0x8b6>
 8001fec:	200002d0 	.word	0x200002d0
 8001ff0:	20000238 	.word	0x20000238
 8001ff4:	200002cb 	.word	0x200002cb
 8001ff8:	20000570 	.word	0x20000570
 8001ffc:	0800d818 	.word	0x0800d818
 8002000:	0800d828 	.word	0x0800d828
 8002004:	20000235 	.word	0x20000235
 8002008:	0800d838 	.word	0x0800d838
 800200c:	0800d814 	.word	0x0800d814
 8002010:	200002ca 	.word	0x200002ca
 8002014:	20000268 	.word	0x20000268
				steps[pos].time = change_time(steps[pos].time, diff, true);
 8002018:	4b55      	ldr	r3, [pc, #340]	; (8002170 <do_profile_settings.8662+0x9e0>)
 800201a:	f993 3000 	ldrsb.w	r3, [r3]
 800201e:	4a55      	ldr	r2, [pc, #340]	; (8002174 <do_profile_settings.8662+0x9e4>)
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	b211      	sxth	r1, r2
 800202a:	4a51      	ldr	r2, [pc, #324]	; (8002170 <do_profile_settings.8662+0x9e0>)
 800202c:	f992 2000 	ldrsb.w	r2, [r2]
 8002030:	4615      	mov	r5, r2
 8002032:	46a4      	mov	ip, r4
 8002034:	2201      	movs	r2, #1
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fa42 	bl	80014c0 <change_time.8650>
 800203c:	4602      	mov	r2, r0
 800203e:	494d      	ldr	r1, [pc, #308]	; (8002174 <do_profile_settings.8662+0x9e4>)
 8002040:	00eb      	lsls	r3, r5, #3
 8002042:	440b      	add	r3, r1
 8002044:	605a      	str	r2, [r3, #4]
			show_step_menu();
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	469c      	mov	ip, r3
 800204c:	f7ff fb30 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8002050:	2201      	movs	r2, #1
 8002052:	2109      	movs	r1, #9
 8002054:	4848      	ldr	r0, [pc, #288]	; (8002178 <do_profile_settings.8662+0x9e8>)
 8002056:	f7fe f96b 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 800205a:	4948      	ldr	r1, [pc, #288]	; (800217c <do_profile_settings.8662+0x9ec>)
 800205c:	4846      	ldr	r0, [pc, #280]	; (8002178 <do_profile_settings.8662+0x9e8>)
 800205e:	f7fe f950 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8002062:	2100      	movs	r1, #0
 8002064:	4844      	ldr	r0, [pc, #272]	; (8002178 <do_profile_settings.8662+0x9e8>)
 8002066:	f7fe f9e9 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 8, 1);
 800206a:	2201      	movs	r2, #1
 800206c:	2108      	movs	r1, #8
 800206e:	4842      	ldr	r0, [pc, #264]	; (8002178 <do_profile_settings.8662+0x9e8>)
 8002070:	f7fe f95e 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 8002074:	2301      	movs	r3, #1
 8002076:	2200      	movs	r2, #0
 8002078:	2101      	movs	r1, #1
 800207a:	483f      	ldr	r0, [pc, #252]	; (8002178 <do_profile_settings.8662+0x9e8>)
 800207c:	f7fe f8f6 	bl	800026c <lcd_mode>
			break;
 8002080:	e06d      	b.n	800215e <do_profile_settings.8662+0x9ce>
			lcd_set_xy(&lcd, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	483c      	ldr	r0, [pc, #240]	; (8002178 <do_profile_settings.8662+0x9e8>)
 8002088:	f7fe f952 	bl	8000330 <lcd_set_xy>
			lcd_write_data(&lcd, ' ');
 800208c:	2120      	movs	r1, #32
 800208e:	483a      	ldr	r0, [pc, #232]	; (8002178 <do_profile_settings.8662+0x9e8>)
 8002090:	f7fe f9d4 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, scSIGMA);
 8002094:	21f6      	movs	r1, #246	; 0xf6
 8002096:	4838      	ldr	r0, [pc, #224]	; (8002178 <do_profile_settings.8662+0x9e8>)
 8002098:	f7fe f9d0 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, ' ');
 800209c:	2120      	movs	r1, #32
 800209e:	4836      	ldr	r0, [pc, #216]	; (8002178 <do_profile_settings.8662+0x9e8>)
 80020a0:	f7fe f9cc 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, max_steps + '0');
 80020a4:	4b36      	ldr	r3, [pc, #216]	; (8002180 <do_profile_settings.8662+0x9f0>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	3330      	adds	r3, #48	; 0x30
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	4619      	mov	r1, r3
 80020ae:	4832      	ldr	r0, [pc, #200]	; (8002178 <do_profile_settings.8662+0x9e8>)
 80020b0:	f7fe f9c4 	bl	800043c <lcd_write_data>
			lcd_string(&lcd, " steps  ");
 80020b4:	4933      	ldr	r1, [pc, #204]	; (8002184 <do_profile_settings.8662+0x9f4>)
 80020b6:	4830      	ldr	r0, [pc, #192]	; (8002178 <do_profile_settings.8662+0x9e8>)
 80020b8:	f7fe f923 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 0, 1);
 80020bc:	2201      	movs	r2, #1
 80020be:	2100      	movs	r1, #0
 80020c0:	482d      	ldr	r0, [pc, #180]	; (8002178 <do_profile_settings.8662+0x9e8>)
 80020c2:	f7fe f935 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "start prof. ");
 80020c6:	4930      	ldr	r1, [pc, #192]	; (8002188 <do_profile_settings.8662+0x9f8>)
 80020c8:	482b      	ldr	r0, [pc, #172]	; (8002178 <do_profile_settings.8662+0x9e8>)
 80020ca:	f7fe f91a 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 80020ce:	2100      	movs	r1, #0
 80020d0:	4829      	ldr	r0, [pc, #164]	; (8002178 <do_profile_settings.8662+0x9e8>)
 80020d2:	f7fe f9b3 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 80020d6:	2201      	movs	r2, #1
 80020d8:	210c      	movs	r1, #12
 80020da:	4827      	ldr	r0, [pc, #156]	; (8002178 <do_profile_settings.8662+0x9e8>)
 80020dc:	f7fe f928 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <do_profile_settings.8662+0x9fc>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	bf94      	ite	ls
 80020e8:	2301      	movls	r3, #1
 80020ea:	2300      	movhi	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	2101      	movs	r1, #1
 80020f4:	4820      	ldr	r0, [pc, #128]	; (8002178 <do_profile_settings.8662+0x9e8>)
 80020f6:	f7fe f8b9 	bl	800026c <lcd_mode>
			if (diff == 0)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d110      	bne.n	8002122 <do_profile_settings.8662+0x992>
				if (last_button && (!encoder.pressed))
 8002100:	4b23      	ldr	r3, [pc, #140]	; (8002190 <do_profile_settings.8662+0xa00>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d029      	beq.n	800215c <do_profile_settings.8662+0x9cc>
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <do_profile_settings.8662+0xa04>)
 800210a:	789b      	ldrb	r3, [r3, #2]
 800210c:	f083 0301 	eor.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d022      	beq.n	800215c <do_profile_settings.8662+0x9cc>
					lcd_mini_clear(&lcd);
 8002116:	46a4      	mov	ip, r4
 8002118:	4817      	ldr	r0, [pc, #92]	; (8002178 <do_profile_settings.8662+0x9e8>)
 800211a:	f7fe fdb5 	bl	8000c88 <lcd_mini_clear.8640>
					return true;
 800211e:	2301      	movs	r3, #1
 8002120:	e022      	b.n	8002168 <do_profile_settings.8662+0x9d8>
				if (diff > 0)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	dd03      	ble.n	8002130 <do_profile_settings.8662+0x9a0>
					pos = 0;
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <do_profile_settings.8662+0x9e0>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	e009      	b.n	8002144 <do_profile_settings.8662+0x9b4>
				else if (diff < 0)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	da06      	bge.n	8002144 <do_profile_settings.8662+0x9b4>
					pos = max_steps - 1;
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <do_profile_settings.8662+0x9f0>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	3b01      	subs	r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	b25a      	sxtb	r2, r3
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <do_profile_settings.8662+0x9e0>)
 8002142:	701a      	strb	r2, [r3, #0]
				profile_state = 1;
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <do_profile_settings.8662+0xa08>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
			break;
 800214a:	e007      	b.n	800215c <do_profile_settings.8662+0x9cc>
			global_error |= errFATAL;
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <do_profile_settings.8662+0xa0c>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <do_profile_settings.8662+0xa0c>)
 8002158:	701a      	strb	r2, [r3, #0]
			break;
 800215a:	e000      	b.n	800215e <do_profile_settings.8662+0x9ce>
			break;
 800215c:	bf00      	nop
		last_button = encoder.pressed;
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <do_profile_settings.8662+0xa04>)
 8002160:	789a      	ldrb	r2, [r3, #2]
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <do_profile_settings.8662+0xa00>)
 8002164:	701a      	strb	r2, [r3, #0]
		return false;
 8002166:	2300      	movs	r3, #0
	}
 8002168:	4618      	mov	r0, r3
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bdb0      	pop	{r4, r5, r7, pc}
 8002170:	200002ca 	.word	0x200002ca
 8002174:	20000268 	.word	0x20000268
 8002178:	20000570 	.word	0x20000570
 800217c:	0800d814 	.word	0x0800d814
 8002180:	20000020 	.word	0x20000020
 8002184:	0800d848 	.word	0x0800d848
 8002188:	0800d854 	.word	0x0800d854
 800218c:	20000235 	.word	0x20000235
 8002190:	200002d0 	.word	0x200002d0
 8002194:	20000238 	.word	0x20000238
 8002198:	200002cb 	.word	0x200002cb
 800219c:	20000234 	.word	0x20000234

080021a0 <do_reflow.8698>:
	{
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
 80021aa:	4664      	mov	r4, ip
 80021ac:	f8c7 c000 	str.w	ip, [r7]
		if (reset)
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00e      	beq.n	80021d4 <do_reflow.8698+0x34>
			last_time = HAL_GetTick();
 80021b6:	f001 fcbd 	bl	8003b34 <HAL_GetTick>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4aa7      	ldr	r2, [pc, #668]	; (800245c <do_reflow.8698+0x2bc>)
 80021be:	6013      	str	r3, [r2, #0]
			peep_first_time = true;
 80021c0:	4ba7      	ldr	r3, [pc, #668]	; (8002460 <do_reflow.8698+0x2c0>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]
			last_button = false;
 80021c6:	4ba7      	ldr	r3, [pc, #668]	; (8002464 <do_reflow.8698+0x2c4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
			pos = 0;
 80021cc:	4ba6      	ldr	r3, [pc, #664]	; (8002468 <do_reflow.8698+0x2c8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
			return;
 80021d2:	e321      	b.n	8002818 <do_reflow.8698+0x678>
		int32_t dt = ((int32_t)(temperature_SP<<2)) -
 80021d4:	4ba5      	ldr	r3, [pc, #660]	; (800246c <do_reflow.8698+0x2cc>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	009b      	lsls	r3, r3, #2
					 ((int32_t)MAX6675.temperature);
 80021da:	4aa5      	ldr	r2, [pc, #660]	; (8002470 <do_reflow.8698+0x2d0>)
 80021dc:	8812      	ldrh	r2, [r2, #0]
		int32_t dt = ((int32_t)(temperature_SP<<2)) -
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	61fb      	str	r3, [r7, #28]
		if (pos >= (2*max_steps))
 80021e2:	4ba1      	ldr	r3, [pc, #644]	; (8002468 <do_reflow.8698+0x2c8>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	4ba2      	ldr	r3, [pc, #648]	; (8002474 <do_reflow.8698+0x2d4>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	429a      	cmp	r2, r3
 80021f2:	db79      	blt.n	80022e8 <do_reflow.8698+0x148>
			if (peep_first_time)
 80021f4:	4b9a      	ldr	r3, [pc, #616]	; (8002460 <do_reflow.8698+0x2c0>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <do_reflow.8698+0x6e>
				peep.melody = melodyLEVEL_COMPLETE;
 80021fc:	4b9e      	ldr	r3, [pc, #632]	; (8002478 <do_reflow.8698+0x2d8>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
				peep.peep = true;
 8002202:	4b9d      	ldr	r3, [pc, #628]	; (8002478 <do_reflow.8698+0x2d8>)
 8002204:	2201      	movs	r2, #1
 8002206:	705a      	strb	r2, [r3, #1]
				peep_first_time = false;
 8002208:	4b95      	ldr	r3, [pc, #596]	; (8002460 <do_reflow.8698+0x2c0>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
			if (encoder.pressed)
 800220e:	4b9b      	ldr	r3, [pc, #620]	; (800247c <do_reflow.8698+0x2dc>)
 8002210:	789b      	ldrb	r3, [r3, #2]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <do_reflow.8698+0x7c>
				peep.peep = false;
 8002216:	4b98      	ldr	r3, [pc, #608]	; (8002478 <do_reflow.8698+0x2d8>)
 8002218:	2200      	movs	r2, #0
 800221a:	705a      	strb	r2, [r3, #1]
			temperature_SP = 0;
 800221c:	4b93      	ldr	r3, [pc, #588]	; (800246c <do_reflow.8698+0x2cc>)
 800221e:	2200      	movs	r2, #0
 8002220:	801a      	strh	r2, [r3, #0]
			lcd_set_xy(&lcd, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	4896      	ldr	r0, [pc, #600]	; (8002480 <do_reflow.8698+0x2e0>)
 8002228:	f7fe f882 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "Cooldown    ");
 800222c:	4995      	ldr	r1, [pc, #596]	; (8002484 <do_reflow.8698+0x2e4>)
 800222e:	4894      	ldr	r0, [pc, #592]	; (8002480 <do_reflow.8698+0x2e0>)
 8002230:	f7fe f867 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 7, 1);
 8002234:	2201      	movs	r2, #1
 8002236:	2107      	movs	r1, #7
 8002238:	4891      	ldr	r0, [pc, #580]	; (8002480 <do_reflow.8698+0x2e0>)
 800223a:	f7fe f879 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "+");
 800223e:	4992      	ldr	r1, [pc, #584]	; (8002488 <do_reflow.8698+0x2e8>)
 8002240:	488f      	ldr	r0, [pc, #572]	; (8002480 <do_reflow.8698+0x2e0>)
 8002242:	f7fe f85e 	bl	8000302 <lcd_string>
			lcd_string(&lcd, int2time((HAL_GetTick() - last_time)/1000, time_buf));
 8002246:	f001 fc75 	bl	8003b34 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	4b83      	ldr	r3, [pc, #524]	; (800245c <do_reflow.8698+0x2bc>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	4a8e      	ldr	r2, [pc, #568]	; (800248c <do_reflow.8698+0x2ec>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	f107 0210 	add.w	r2, r7, #16
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f9a7 	bl	80005b4 <int2time>
 8002266:	4603      	mov	r3, r0
 8002268:	4619      	mov	r1, r3
 800226a:	4885      	ldr	r0, [pc, #532]	; (8002480 <do_reflow.8698+0x2e0>)
 800226c:	f7fe f849 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ' ');
 8002270:	2120      	movs	r1, #32
 8002272:	4883      	ldr	r0, [pc, #524]	; (8002480 <do_reflow.8698+0x2e0>)
 8002274:	f7fe f8e2 	bl	800043c <lcd_write_data>
			if (peep.peep)
 8002278:	4b7f      	ldr	r3, [pc, #508]	; (8002478 <do_reflow.8698+0x2d8>)
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d023      	beq.n	80022c8 <do_reflow.8698+0x128>
				lcd_set_xy(&lcd, 0, 1);
 8002280:	2201      	movs	r2, #1
 8002282:	2100      	movs	r1, #0
 8002284:	487e      	ldr	r0, [pc, #504]	; (8002480 <do_reflow.8698+0x2e0>)
 8002286:	f7fe f853 	bl	8000330 <lcd_set_xy>
				lcd_string(&lcd, "mute");
 800228a:	4981      	ldr	r1, [pc, #516]	; (8002490 <do_reflow.8698+0x2f0>)
 800228c:	487c      	ldr	r0, [pc, #496]	; (8002480 <do_reflow.8698+0x2e0>)
 800228e:	f7fe f838 	bl	8000302 <lcd_string>
				lcd_write_data(&lcd, ccENTER);
 8002292:	2100      	movs	r1, #0
 8002294:	487a      	ldr	r0, [pc, #488]	; (8002480 <do_reflow.8698+0x2e0>)
 8002296:	f7fe f8d1 	bl	800043c <lcd_write_data>
				lcd_string(&lcd, "  ");
 800229a:	497e      	ldr	r1, [pc, #504]	; (8002494 <do_reflow.8698+0x2f4>)
 800229c:	4878      	ldr	r0, [pc, #480]	; (8002480 <do_reflow.8698+0x2e0>)
 800229e:	f7fe f830 	bl	8000302 <lcd_string>
				lcd_set_xy(&lcd, 4, 1);
 80022a2:	2201      	movs	r2, #1
 80022a4:	2104      	movs	r1, #4
 80022a6:	4876      	ldr	r0, [pc, #472]	; (8002480 <do_reflow.8698+0x2e0>)
 80022a8:	f7fe f842 	bl	8000330 <lcd_set_xy>
				lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 80022ac:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <do_reflow.8698+0x2f8>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	bf94      	ite	ls
 80022b4:	2301      	movls	r3, #1
 80022b6:	2300      	movhi	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	2300      	movs	r3, #0
 80022be:	2101      	movs	r1, #1
 80022c0:	486f      	ldr	r0, [pc, #444]	; (8002480 <do_reflow.8698+0x2e0>)
 80022c2:	f7fd ffd3 	bl	800026c <lcd_mode>
			return;
 80022c6:	e2a7      	b.n	8002818 <do_reflow.8698+0x678>
				lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 80022c8:	2300      	movs	r3, #0
 80022ca:	2200      	movs	r2, #0
 80022cc:	2101      	movs	r1, #1
 80022ce:	486c      	ldr	r0, [pc, #432]	; (8002480 <do_reflow.8698+0x2e0>)
 80022d0:	f7fd ffcc 	bl	800026c <lcd_mode>
				lcd_set_xy(&lcd, 0, 1);
 80022d4:	2201      	movs	r2, #1
 80022d6:	2100      	movs	r1, #0
 80022d8:	4869      	ldr	r0, [pc, #420]	; (8002480 <do_reflow.8698+0x2e0>)
 80022da:	f7fe f829 	bl	8000330 <lcd_set_xy>
				lcd_string(&lcd, "       ");
 80022de:	496f      	ldr	r1, [pc, #444]	; (800249c <do_reflow.8698+0x2fc>)
 80022e0:	4867      	ldr	r0, [pc, #412]	; (8002480 <do_reflow.8698+0x2e0>)
 80022e2:	f7fe f80e 	bl	8000302 <lcd_string>
			return;
 80022e6:	e297      	b.n	8002818 <do_reflow.8698+0x678>
		if (pos%2 == 0)
 80022e8:	4b5f      	ldr	r3, [pc, #380]	; (8002468 <do_reflow.8698+0x2c8>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d15e      	bne.n	80023b6 <do_reflow.8698+0x216>
			temperature_SP = steps[pos>>1].temp;
 80022f8:	4b5b      	ldr	r3, [pc, #364]	; (8002468 <do_reflow.8698+0x2c8>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	4b66      	ldr	r3, [pc, #408]	; (80024a0 <do_reflow.8698+0x300>)
 8002306:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800230a:	b29a      	uxth	r2, r3
 800230c:	4b57      	ldr	r3, [pc, #348]	; (800246c <do_reflow.8698+0x2cc>)
 800230e:	801a      	strh	r2, [r3, #0]
			time_buf[0] = '+';
 8002310:	232b      	movs	r3, #43	; 0x2b
 8002312:	743b      	strb	r3, [r7, #16]
			int2time((HAL_GetTick() - last_time)/1000, time_buf+1);
 8002314:	f001 fc0e 	bl	8003b34 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	4b50      	ldr	r3, [pc, #320]	; (800245c <do_reflow.8698+0x2bc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	4a5a      	ldr	r2, [pc, #360]	; (800248c <do_reflow.8698+0x2ec>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	099a      	lsrs	r2, r3, #6
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	3301      	adds	r3, #1
 800232e:	4619      	mov	r1, r3
 8002330:	4610      	mov	r0, r2
 8002332:	f7fe f93f 	bl	80005b4 <int2time>
			lcd_set_xy(&lcd, 0, 1);
 8002336:	2201      	movs	r2, #1
 8002338:	2100      	movs	r1, #0
 800233a:	4851      	ldr	r0, [pc, #324]	; (8002480 <do_reflow.8698+0x2e0>)
 800233c:	f7fd fff8 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "goto");
 8002340:	4958      	ldr	r1, [pc, #352]	; (80024a4 <do_reflow.8698+0x304>)
 8002342:	484f      	ldr	r0, [pc, #316]	; (8002480 <do_reflow.8698+0x2e0>)
 8002344:	f7fd ffdd 	bl	8000302 <lcd_string>
			if ((dt > -(4<<2)) && (dt < (4<<2)))
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f113 0f0f 	cmn.w	r3, #15
 800234e:	db2c      	blt.n	80023aa <do_reflow.8698+0x20a>
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b0f      	cmp	r3, #15
 8002354:	dc29      	bgt.n	80023aa <do_reflow.8698+0x20a>
				if (HAL_GetTick() - check_time > 3000) // we should be at least some time in range
 8002356:	f001 fbed 	bl	8003b34 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	4b52      	ldr	r3, [pc, #328]	; (80024a8 <do_reflow.8698+0x308>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002366:	4293      	cmp	r3, r2
 8002368:	f240 80c8 	bls.w	80024fc <do_reflow.8698+0x35c>
					last_time = HAL_GetTick();
 800236c:	f001 fbe2 	bl	8003b34 <HAL_GetTick>
 8002370:	4603      	mov	r3, r0
 8002372:	4a3a      	ldr	r2, [pc, #232]	; (800245c <do_reflow.8698+0x2bc>)
 8002374:	6013      	str	r3, [r2, #0]
					pos++;
 8002376:	4b3c      	ldr	r3, [pc, #240]	; (8002468 <do_reflow.8698+0x2c8>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	3301      	adds	r3, #1
 800237e:	b2da      	uxtb	r2, r3
 8002380:	4b39      	ldr	r3, [pc, #228]	; (8002468 <do_reflow.8698+0x2c8>)
 8002382:	701a      	strb	r2, [r3, #0]
					temperature_SP = steps[pos>>1].temp;
 8002384:	4b38      	ldr	r3, [pc, #224]	; (8002468 <do_reflow.8698+0x2c8>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <do_reflow.8698+0x300>)
 8002392:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002396:	b29a      	uxth	r2, r3
 8002398:	4b34      	ldr	r3, [pc, #208]	; (800246c <do_reflow.8698+0x2cc>)
 800239a:	801a      	strh	r2, [r3, #0]
					peep.melody = melodyCOIN;
 800239c:	4b36      	ldr	r3, [pc, #216]	; (8002478 <do_reflow.8698+0x2d8>)
 800239e:	2203      	movs	r2, #3
 80023a0:	701a      	strb	r2, [r3, #0]
					peep.peep = true;
 80023a2:	4b35      	ldr	r3, [pc, #212]	; (8002478 <do_reflow.8698+0x2d8>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	705a      	strb	r2, [r3, #1]
				if (HAL_GetTick() - check_time > 3000) // we should be at least some time in range
 80023a8:	e0a8      	b.n	80024fc <do_reflow.8698+0x35c>
				check_time = HAL_GetTick();
 80023aa:	f001 fbc3 	bl	8003b34 <HAL_GetTick>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4a3d      	ldr	r2, [pc, #244]	; (80024a8 <do_reflow.8698+0x308>)
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	e0a2      	b.n	80024fc <do_reflow.8698+0x35c>
			temperature_SP = steps[pos>>1].temp;
 80023b6:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <do_reflow.8698+0x2c8>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	085b      	lsrs	r3, r3, #1
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b37      	ldr	r3, [pc, #220]	; (80024a0 <do_reflow.8698+0x300>)
 80023c4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	4b28      	ldr	r3, [pc, #160]	; (800246c <do_reflow.8698+0x2cc>)
 80023cc:	801a      	strh	r2, [r3, #0]
			if (HAL_GetTick() - last_time >= steps[pos>>1].time*1000)
 80023ce:	f001 fbb1 	bl	8003b34 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <do_reflow.8698+0x2bc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	1ad2      	subs	r2, r2, r3
 80023da:	4b23      	ldr	r3, [pc, #140]	; (8002468 <do_reflow.8698+0x2c8>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	492e      	ldr	r1, [pc, #184]	; (80024a0 <do_reflow.8698+0x300>)
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d359      	bcc.n	80024ac <do_reflow.8698+0x30c>
				last_time = HAL_GetTick();
 80023f8:	f001 fb9c 	bl	8003b34 <HAL_GetTick>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <do_reflow.8698+0x2bc>)
 8002400:	6013      	str	r3, [r2, #0]
				check_time = HAL_GetTick();
 8002402:	f001 fb97 	bl	8003b34 <HAL_GetTick>
 8002406:	4603      	mov	r3, r0
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <do_reflow.8698+0x308>)
 800240a:	6013      	str	r3, [r2, #0]
				pos++;
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <do_reflow.8698+0x2c8>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	3301      	adds	r3, #1
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b14      	ldr	r3, [pc, #80]	; (8002468 <do_reflow.8698+0x2c8>)
 8002418:	701a      	strb	r2, [r3, #0]
				if (pos < (2*max_steps))
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <do_reflow.8698+0x2c8>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <do_reflow.8698+0x2d4>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	429a      	cmp	r2, r3
 800242a:	da12      	bge.n	8002452 <do_reflow.8698+0x2b2>
					temperature_SP = steps[pos>>1].temp;
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <do_reflow.8698+0x2c8>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <do_reflow.8698+0x300>)
 800243a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800243e:	b29a      	uxth	r2, r3
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <do_reflow.8698+0x2cc>)
 8002442:	801a      	strh	r2, [r3, #0]
					peep.melody = melodyCOIN;
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <do_reflow.8698+0x2d8>)
 8002446:	2203      	movs	r2, #3
 8002448:	701a      	strb	r2, [r3, #0]
					peep.peep = true;
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <do_reflow.8698+0x2d8>)
 800244c:	2201      	movs	r2, #1
 800244e:	705a      	strb	r2, [r3, #1]
 8002450:	e054      	b.n	80024fc <do_reflow.8698+0x35c>
					temperature_SP = 0;
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <do_reflow.8698+0x2cc>)
 8002454:	2200      	movs	r2, #0
 8002456:	801a      	strh	r2, [r3, #0]
 8002458:	e050      	b.n	80024fc <do_reflow.8698+0x35c>
 800245a:	bf00      	nop
 800245c:	200002d4 	.word	0x200002d4
 8002460:	2000002c 	.word	0x2000002c
 8002464:	200002d8 	.word	0x200002d8
 8002468:	200002d9 	.word	0x200002d9
 800246c:	2000024a 	.word	0x2000024a
 8002470:	2000023c 	.word	0x2000023c
 8002474:	20000020 	.word	0x20000020
 8002478:	2000001c 	.word	0x2000001c
 800247c:	20000238 	.word	0x20000238
 8002480:	20000570 	.word	0x20000570
 8002484:	0800d864 	.word	0x0800d864
 8002488:	0800d874 	.word	0x0800d874
 800248c:	10624dd3 	.word	0x10624dd3
 8002490:	0800d878 	.word	0x0800d878
 8002494:	0800d880 	.word	0x0800d880
 8002498:	20000235 	.word	0x20000235
 800249c:	0800d884 	.word	0x0800d884
 80024a0:	20000268 	.word	0x20000268
 80024a4:	0800d88c 	.word	0x0800d88c
 80024a8:	200002dc 	.word	0x200002dc
				time_buf[0] = '-';
 80024ac:	232d      	movs	r3, #45	; 0x2d
 80024ae:	743b      	strb	r3, [r7, #16]
				int2time(steps[pos>>1].time - (HAL_GetTick() - last_time + 1000)/1000, time_buf+1);
 80024b0:	4b9a      	ldr	r3, [pc, #616]	; (800271c <do_reflow.8698+0x57c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	4a99      	ldr	r2, [pc, #612]	; (8002720 <do_reflow.8698+0x580>)
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	685d      	ldr	r5, [r3, #4]
 80024c2:	f001 fb37 	bl	8003b34 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	4b96      	ldr	r3, [pc, #600]	; (8002724 <do_reflow.8698+0x584>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80024d2:	4a95      	ldr	r2, [pc, #596]	; (8002728 <do_reflow.8698+0x588>)
 80024d4:	fba2 2303 	umull	r2, r3, r2, r3
 80024d8:	099b      	lsrs	r3, r3, #6
 80024da:	1aea      	subs	r2, r5, r3
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	3301      	adds	r3, #1
 80024e2:	4619      	mov	r1, r3
 80024e4:	4610      	mov	r0, r2
 80024e6:	f7fe f865 	bl	80005b4 <int2time>
				lcd_set_xy(&lcd, 0, 1);
 80024ea:	2201      	movs	r2, #1
 80024ec:	2100      	movs	r1, #0
 80024ee:	488f      	ldr	r0, [pc, #572]	; (800272c <do_reflow.8698+0x58c>)
 80024f0:	f7fd ff1e 	bl	8000330 <lcd_set_xy>
				lcd_string(&lcd, "hold");
 80024f4:	498e      	ldr	r1, [pc, #568]	; (8002730 <do_reflow.8698+0x590>)
 80024f6:	488d      	ldr	r0, [pc, #564]	; (800272c <do_reflow.8698+0x58c>)
 80024f8:	f7fd ff03 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 0);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2100      	movs	r1, #0
 8002500:	488a      	ldr	r0, [pc, #552]	; (800272c <do_reflow.8698+0x58c>)
 8002502:	f7fd ff15 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, '#');
 8002506:	2123      	movs	r1, #35	; 0x23
 8002508:	4888      	ldr	r0, [pc, #544]	; (800272c <do_reflow.8698+0x58c>)
 800250a:	f7fd ff97 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, (pos>>1)+'1');
 800250e:	4b83      	ldr	r3, [pc, #524]	; (800271c <do_reflow.8698+0x57c>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	b2db      	uxtb	r3, r3
 8002518:	3331      	adds	r3, #49	; 0x31
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4619      	mov	r1, r3
 800251e:	4883      	ldr	r0, [pc, #524]	; (800272c <do_reflow.8698+0x58c>)
 8002520:	f7fd ff8c 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, '/');
 8002524:	212f      	movs	r1, #47	; 0x2f
 8002526:	4881      	ldr	r0, [pc, #516]	; (800272c <do_reflow.8698+0x58c>)
 8002528:	f7fd ff88 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, max_steps + '0');
 800252c:	4b81      	ldr	r3, [pc, #516]	; (8002734 <do_reflow.8698+0x594>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	3330      	adds	r3, #48	; 0x30
 8002532:	b2db      	uxtb	r3, r3
 8002534:	4619      	mov	r1, r3
 8002536:	487d      	ldr	r0, [pc, #500]	; (800272c <do_reflow.8698+0x58c>)
 8002538:	f7fd ff80 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 7, 1);
 800253c:	2201      	movs	r2, #1
 800253e:	2107      	movs	r1, #7
 8002540:	487a      	ldr	r0, [pc, #488]	; (800272c <do_reflow.8698+0x58c>)
 8002542:	f7fd fef5 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, (char*)time_buf);
 8002546:	f107 0310 	add.w	r3, r7, #16
 800254a:	4619      	mov	r1, r3
 800254c:	4877      	ldr	r0, [pc, #476]	; (800272c <do_reflow.8698+0x58c>)
 800254e:	f7fd fed8 	bl	8000302 <lcd_string>
		int2string(temperature_SP, buf, sizeof(buf));
 8002552:	4b79      	ldr	r3, [pc, #484]	; (8002738 <do_reflow.8698+0x598>)
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	2203      	movs	r2, #3
 800255e:	4619      	mov	r1, r3
 8002560:	f7fd ffea 	bl	8000538 <int2string>
		lcd_set_xy(&lcd, 7, 0);
 8002564:	2200      	movs	r2, #0
 8002566:	2107      	movs	r1, #7
 8002568:	4870      	ldr	r0, [pc, #448]	; (800272c <do_reflow.8698+0x58c>)
 800256a:	f7fd fee1 	bl	8000330 <lcd_set_xy>
		lcd_out(&lcd, buf, sizeof(buf));
 800256e:	f107 030c 	add.w	r3, r7, #12
 8002572:	2203      	movs	r2, #3
 8002574:	4619      	mov	r1, r3
 8002576:	486d      	ldr	r0, [pc, #436]	; (800272c <do_reflow.8698+0x58c>)
 8002578:	f7fd fea5 	bl	80002c6 <lcd_out>
		lcd_write_data(&lcd, scGRAD); // grad
 800257c:	21df      	movs	r1, #223	; 0xdf
 800257e:	486b      	ldr	r0, [pc, #428]	; (800272c <do_reflow.8698+0x58c>)
 8002580:	f7fd ff5c 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, scAR); // arrow right
 8002584:	217e      	movs	r1, #126	; 0x7e
 8002586:	4869      	ldr	r0, [pc, #420]	; (800272c <do_reflow.8698+0x58c>)
 8002588:	f7fd ff58 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 9, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	2109      	movs	r1, #9
 8002590:	4866      	ldr	r0, [pc, #408]	; (800272c <do_reflow.8698+0x58c>)
 8002592:	f7fd fecd 	bl	8000330 <lcd_set_xy>
		if (last_pos != pos)
 8002596:	4b69      	ldr	r3, [pc, #420]	; (800273c <do_reflow.8698+0x59c>)
 8002598:	781a      	ldrb	r2, [r3, #0]
 800259a:	4b60      	ldr	r3, [pc, #384]	; (800271c <do_reflow.8698+0x57c>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d002      	beq.n	80025aa <do_reflow.8698+0x40a>
			rf_ui_state = 0;
 80025a4:	4b66      	ldr	r3, [pc, #408]	; (8002740 <do_reflow.8698+0x5a0>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
		last_pos = pos;
 80025aa:	4b5c      	ldr	r3, [pc, #368]	; (800271c <do_reflow.8698+0x57c>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	4b62      	ldr	r3, [pc, #392]	; (800273c <do_reflow.8698+0x59c>)
 80025b2:	701a      	strb	r2, [r3, #0]
		switch (rf_ui_state)
 80025b4:	4b62      	ldr	r3, [pc, #392]	; (8002740 <do_reflow.8698+0x5a0>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	f200 811a 	bhi.w	80027f2 <do_reflow.8698+0x652>
 80025be:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <do_reflow.8698+0x424>)
 80025c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c4:	080025d9 	.word	0x080025d9
 80025c8:	080025e1 	.word	0x080025e1
 80025cc:	08002647 	.word	0x08002647
 80025d0:	080026c9 	.word	0x080026c9
 80025d4:	08002755 	.word	0x08002755
			rf_ui_state = 1;
 80025d8:	4b59      	ldr	r3, [pc, #356]	; (8002740 <do_reflow.8698+0x5a0>)
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
			break;
 80025de:	e113      	b.n	8002808 <do_reflow.8698+0x668>
			lcd_set_xy(&lcd, 9, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2109      	movs	r1, #9
 80025e4:	4851      	ldr	r0, [pc, #324]	; (800272c <do_reflow.8698+0x58c>)
 80025e6:	f7fd fea3 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 80025ea:	4b56      	ldr	r3, [pc, #344]	; (8002744 <do_reflow.8698+0x5a4>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	bf94      	ite	ls
 80025f2:	2301      	movls	r3, #1
 80025f4:	2300      	movhi	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	2300      	movs	r3, #0
 80025fc:	2101      	movs	r1, #1
 80025fe:	484b      	ldr	r0, [pc, #300]	; (800272c <do_reflow.8698+0x58c>)
 8002600:	f7fd fe34 	bl	800026c <lcd_mode>
			if (((encoder.value) != (last_encoder)) && (pos&0b1)) // we are on working temperature
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <do_reflow.8698+0x5a8>)
 8002606:	881a      	ldrh	r2, [r3, #0]
 8002608:	4b50      	ldr	r3, [pc, #320]	; (800274c <do_reflow.8698+0x5ac>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d009      	beq.n	8002624 <do_reflow.8698+0x484>
 8002610:	4b42      	ldr	r3, [pc, #264]	; (800271c <do_reflow.8698+0x57c>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <do_reflow.8698+0x484>
				rf_ui_state = 3;
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <do_reflow.8698+0x5a0>)
 8002620:	2203      	movs	r2, #3
 8002622:	701a      	strb	r2, [r3, #0]
			if ((last_button) && (!encoder.pressed))
 8002624:	4b4a      	ldr	r3, [pc, #296]	; (8002750 <do_reflow.8698+0x5b0>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80e6 	beq.w	80027fa <do_reflow.8698+0x65a>
 800262e:	4b46      	ldr	r3, [pc, #280]	; (8002748 <do_reflow.8698+0x5a8>)
 8002630:	789b      	ldrb	r3, [r3, #2]
 8002632:	f083 0301 	eor.w	r3, r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80de 	beq.w	80027fa <do_reflow.8698+0x65a>
				rf_ui_state = 2;
 800263e:	4b40      	ldr	r3, [pc, #256]	; (8002740 <do_reflow.8698+0x5a0>)
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]
			break;
 8002644:	e0d9      	b.n	80027fa <do_reflow.8698+0x65a>
			if (encoder.value != last_encoder)
 8002646:	4b40      	ldr	r3, [pc, #256]	; (8002748 <do_reflow.8698+0x5a8>)
 8002648:	881a      	ldrh	r2, [r3, #0]
 800264a:	4b40      	ldr	r3, [pc, #256]	; (800274c <do_reflow.8698+0x5ac>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d01e      	beq.n	8002690 <do_reflow.8698+0x4f0>
				steps[pos>>1].temp = change_temperature(steps[pos>>1].temp,
 8002652:	4b32      	ldr	r3, [pc, #200]	; (800271c <do_reflow.8698+0x57c>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	085b      	lsrs	r3, r3, #1
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	4b30      	ldr	r3, [pc, #192]	; (8002720 <do_reflow.8698+0x580>)
 8002660:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002664:	4618      	mov	r0, r3
											encoder.value - last_encoder);
 8002666:	4b38      	ldr	r3, [pc, #224]	; (8002748 <do_reflow.8698+0x5a8>)
 8002668:	881a      	ldrh	r2, [r3, #0]
 800266a:	4b38      	ldr	r3, [pc, #224]	; (800274c <do_reflow.8698+0x5ac>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	b29b      	uxth	r3, r3
				steps[pos>>1].temp = change_temperature(steps[pos>>1].temp,
 8002672:	b21b      	sxth	r3, r3
 8002674:	46a4      	mov	ip, r4
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe feea 	bl	8001450 <change_temperature.8644>
 800267c:	4601      	mov	r1, r0
 800267e:	4b27      	ldr	r3, [pc, #156]	; (800271c <do_reflow.8698+0x57c>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	4b25      	ldr	r3, [pc, #148]	; (8002720 <do_reflow.8698+0x580>)
 800268c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			lcd_set_xy(&lcd, 9, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2109      	movs	r1, #9
 8002694:	4825      	ldr	r0, [pc, #148]	; (800272c <do_reflow.8698+0x58c>)
 8002696:	f7fd fe4b 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 800269a:	2301      	movs	r3, #1
 800269c:	2200      	movs	r2, #0
 800269e:	2101      	movs	r1, #1
 80026a0:	4822      	ldr	r0, [pc, #136]	; (800272c <do_reflow.8698+0x58c>)
 80026a2:	f7fd fde3 	bl	800026c <lcd_mode>
			if ((last_button) && (!encoder.pressed))
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <do_reflow.8698+0x5b0>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80a7 	beq.w	80027fe <do_reflow.8698+0x65e>
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <do_reflow.8698+0x5a8>)
 80026b2:	789b      	ldrb	r3, [r3, #2]
 80026b4:	f083 0301 	eor.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 809f 	beq.w	80027fe <do_reflow.8698+0x65e>
				rf_ui_state = 1;
 80026c0:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <do_reflow.8698+0x5a0>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
			break;
 80026c6:	e09a      	b.n	80027fe <do_reflow.8698+0x65e>
			lcd_set_xy(&lcd, 11, 1);
 80026c8:	2201      	movs	r2, #1
 80026ca:	210b      	movs	r1, #11
 80026cc:	4817      	ldr	r0, [pc, #92]	; (800272c <do_reflow.8698+0x58c>)
 80026ce:	f7fd fe2f 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <do_reflow.8698+0x5a4>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	bf94      	ite	ls
 80026da:	2301      	movls	r3, #1
 80026dc:	2300      	movhi	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	2300      	movs	r3, #0
 80026e4:	2101      	movs	r1, #1
 80026e6:	4811      	ldr	r0, [pc, #68]	; (800272c <do_reflow.8698+0x58c>)
 80026e8:	f7fd fdc0 	bl	800026c <lcd_mode>
			if ((encoder.value) != (last_encoder))
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <do_reflow.8698+0x5a8>)
 80026ee:	881a      	ldrh	r2, [r3, #0]
 80026f0:	4b16      	ldr	r3, [pc, #88]	; (800274c <do_reflow.8698+0x5ac>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d002      	beq.n	80026fe <do_reflow.8698+0x55e>
				rf_ui_state = 1;
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <do_reflow.8698+0x5a0>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
			if ((last_button) && (!encoder.pressed))
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <do_reflow.8698+0x5b0>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d07d      	beq.n	8002802 <do_reflow.8698+0x662>
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <do_reflow.8698+0x5a8>)
 8002708:	789b      	ldrb	r3, [r3, #2]
 800270a:	f083 0301 	eor.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d076      	beq.n	8002802 <do_reflow.8698+0x662>
				rf_ui_state = 4;
 8002714:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <do_reflow.8698+0x5a0>)
 8002716:	2204      	movs	r2, #4
 8002718:	701a      	strb	r2, [r3, #0]
			break;
 800271a:	e072      	b.n	8002802 <do_reflow.8698+0x662>
 800271c:	200002d9 	.word	0x200002d9
 8002720:	20000268 	.word	0x20000268
 8002724:	200002d4 	.word	0x200002d4
 8002728:	10624dd3 	.word	0x10624dd3
 800272c:	20000570 	.word	0x20000570
 8002730:	0800d894 	.word	0x0800d894
 8002734:	20000020 	.word	0x20000020
 8002738:	2000024a 	.word	0x2000024a
 800273c:	200002e0 	.word	0x200002e0
 8002740:	200002e1 	.word	0x200002e1
 8002744:	20000235 	.word	0x20000235
 8002748:	20000238 	.word	0x20000238
 800274c:	200002e2 	.word	0x200002e2
 8002750:	200002d8 	.word	0x200002d8
			if (encoder.value != last_encoder)
 8002754:	4b32      	ldr	r3, [pc, #200]	; (8002820 <do_reflow.8698+0x680>)
 8002756:	881a      	ldrh	r2, [r3, #0]
 8002758:	4b32      	ldr	r3, [pc, #200]	; (8002824 <do_reflow.8698+0x684>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d02e      	beq.n	80027be <do_reflow.8698+0x61e>
				uint32_t tmp = (HAL_GetTick() - last_time)/1000;
 8002760:	f001 f9e8 	bl	8003b34 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	4b30      	ldr	r3, [pc, #192]	; (8002828 <do_reflow.8698+0x688>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	4a2f      	ldr	r2, [pc, #188]	; (800282c <do_reflow.8698+0x68c>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	099b      	lsrs	r3, r3, #6
 8002774:	61bb      	str	r3, [r7, #24]
				steps[pos>>1].time = tmp + change_time(steps[pos>>1].time - tmp,
 8002776:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <do_reflow.8698+0x690>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4a2c      	ldr	r2, [pc, #176]	; (8002834 <do_reflow.8698+0x694>)
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	1ad0      	subs	r0, r2, r3
															encoder.value - last_encoder,
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <do_reflow.8698+0x680>)
 800278e:	881a      	ldrh	r2, [r3, #0]
 8002790:	4b24      	ldr	r3, [pc, #144]	; (8002824 <do_reflow.8698+0x684>)
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	b29b      	uxth	r3, r3
				steps[pos>>1].time = tmp + change_time(steps[pos>>1].time - tmp,
 8002798:	b21b      	sxth	r3, r3
 800279a:	46a4      	mov	ip, r4
 800279c:	2200      	movs	r2, #0
 800279e:	4619      	mov	r1, r3
 80027a0:	f7fe fe8e 	bl	80014c0 <change_time.8650>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <do_reflow.8698+0x690>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	4618      	mov	r0, r3
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	441a      	add	r2, r3
 80027b6:	491f      	ldr	r1, [pc, #124]	; (8002834 <do_reflow.8698+0x694>)
 80027b8:	00c3      	lsls	r3, r0, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	605a      	str	r2, [r3, #4]
			lcd_set_xy(&lcd, 11, 1);
 80027be:	2201      	movs	r2, #1
 80027c0:	210b      	movs	r1, #11
 80027c2:	481d      	ldr	r0, [pc, #116]	; (8002838 <do_reflow.8698+0x698>)
 80027c4:	f7fd fdb4 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 80027c8:	2301      	movs	r3, #1
 80027ca:	2200      	movs	r2, #0
 80027cc:	2101      	movs	r1, #1
 80027ce:	481a      	ldr	r0, [pc, #104]	; (8002838 <do_reflow.8698+0x698>)
 80027d0:	f7fd fd4c 	bl	800026c <lcd_mode>
			if ((last_button) && (!encoder.pressed))
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <do_reflow.8698+0x69c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d014      	beq.n	8002806 <do_reflow.8698+0x666>
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <do_reflow.8698+0x680>)
 80027de:	789b      	ldrb	r3, [r3, #2]
 80027e0:	f083 0301 	eor.w	r3, r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00d      	beq.n	8002806 <do_reflow.8698+0x666>
				rf_ui_state = 3;
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <do_reflow.8698+0x6a0>)
 80027ec:	2203      	movs	r2, #3
 80027ee:	701a      	strb	r2, [r3, #0]
			break;
 80027f0:	e009      	b.n	8002806 <do_reflow.8698+0x666>
			rf_ui_state = 0;
 80027f2:	4b13      	ldr	r3, [pc, #76]	; (8002840 <do_reflow.8698+0x6a0>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
			break;
 80027f8:	e006      	b.n	8002808 <do_reflow.8698+0x668>
			break;
 80027fa:	bf00      	nop
 80027fc:	e004      	b.n	8002808 <do_reflow.8698+0x668>
			break;
 80027fe:	bf00      	nop
 8002800:	e002      	b.n	8002808 <do_reflow.8698+0x668>
			break;
 8002802:	bf00      	nop
 8002804:	e000      	b.n	8002808 <do_reflow.8698+0x668>
			break;
 8002806:	bf00      	nop
		last_encoder = encoder.value;
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <do_reflow.8698+0x680>)
 800280a:	881a      	ldrh	r2, [r3, #0]
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <do_reflow.8698+0x684>)
 800280e:	801a      	strh	r2, [r3, #0]
		last_button = encoder.pressed;
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <do_reflow.8698+0x680>)
 8002812:	789a      	ldrb	r2, [r3, #2]
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <do_reflow.8698+0x69c>)
 8002816:	701a      	strb	r2, [r3, #0]
	}
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bdb0      	pop	{r4, r5, r7, pc}
 800281e:	bf00      	nop
 8002820:	20000238 	.word	0x20000238
 8002824:	200002e2 	.word	0x200002e2
 8002828:	200002d4 	.word	0x200002d4
 800282c:	10624dd3 	.word	0x10624dd3
 8002830:	200002d9 	.word	0x200002d9
 8002834:	20000268 	.word	0x20000268
 8002838:	20000570 	.word	0x20000570
 800283c:	200002d8 	.word	0x200002d8
 8002840:	200002e1 	.word	0x200002e1

08002844 <deltaT.8748>:
	static const int32_t I=0.00153*32768;
	static const int32_t D=10*32768;
	static const int32_t limit_top=25*4/0.00153; // max 25% of PWM

	int32_t deltaT(uint16_t PV)
	{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
 800284e:	f8c7 c000 	str.w	ip, [r7]
#define size 4
		static int32_t arr[size];
		static bool first_time = true;
		if (first_time)
 8002852:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <deltaT.8748+0x80>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d010      	beq.n	800287c <deltaT.8748+0x38>
		{
			first_time = false;
 800285a:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <deltaT.8748+0x80>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < size; i++)
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	e007      	b.n	8002876 <deltaT.8748+0x32>
				arr[i] = PV;
 8002866:	88fa      	ldrh	r2, [r7, #6]
 8002868:	4917      	ldr	r1, [pc, #92]	; (80028c8 <deltaT.8748+0x84>)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 0; i < size; i++)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3301      	adds	r3, #1
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b03      	cmp	r3, #3
 800287a:	ddf4      	ble.n	8002866 <deltaT.8748+0x22>
		}
		int32_t temp = arr[0];
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <deltaT.8748+0x84>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < size; i++)
 8002882:	2301      	movs	r3, #1
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	e00b      	b.n	80028a0 <deltaT.8748+0x5c>
			arr[i-1] = arr[i];
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	3b01      	subs	r3, #1
 800288c:	490e      	ldr	r1, [pc, #56]	; (80028c8 <deltaT.8748+0x84>)
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002894:	490c      	ldr	r1, [pc, #48]	; (80028c8 <deltaT.8748+0x84>)
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 1; i < size; i++)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	3301      	adds	r3, #1
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	ddf0      	ble.n	8002888 <deltaT.8748+0x44>
		arr[size-1] = PV;
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <deltaT.8748+0x84>)
 80028aa:	60d3      	str	r3, [r2, #12]
		return (temp - PV)/size;
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da00      	bge.n	80028b8 <deltaT.8748+0x74>
 80028b6:	3303      	adds	r3, #3
 80028b8:	109b      	asrs	r3, r3, #2
	}
 80028ba:	4618      	mov	r0, r3
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	20000034 	.word	0x20000034
 80028c8:	200002e8 	.word	0x200002e8

080028cc <pid>:
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	460a      	mov	r2, r1
 80028d6:	80fb      	strh	r3, [r7, #6]
 80028d8:	4613      	mov	r3, r2
 80028da:	80bb      	strh	r3, [r7, #4]
uint8_t pid(uint16_t PV, uint16_t SP)
 80028dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028e0:	60bb      	str	r3, [r7, #8]

	static int32_t integral = 0;
	static int32_t last_PV = -1;
	if (last_PV < 0)
 80028e2:	4b58      	ldr	r3, [pc, #352]	; (8002a44 <pid+0x178>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	da02      	bge.n	80028f0 <pid+0x24>
		last_PV = PV; // first time, init this thing to avoid jump
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	4a55      	ldr	r2, [pc, #340]	; (8002a44 <pid+0x178>)
 80028ee:	6013      	str	r3, [r2, #0]

	int32_t error = SP-PV;
 80028f0:	88ba      	ldrh	r2, [r7, #4]
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	617b      	str	r3, [r7, #20]
	int32_t p = error * P;
 80028f8:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <pid+0x17c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	613b      	str	r3, [r7, #16]
	if (error > 0)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	dd10      	ble.n	800292c <pid+0x60>
	{
		integral += error;
 800290a:	4b50      	ldr	r3, [pc, #320]	; (8002a4c <pid+0x180>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	4413      	add	r3, r2
 8002912:	4a4e      	ldr	r2, [pc, #312]	; (8002a4c <pid+0x180>)
 8002914:	6013      	str	r3, [r2, #0]
		if (error < 4*4) // almost here, but we need some boost
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b0f      	cmp	r3, #15
 800291a:	dc1d      	bgt.n	8002958 <pid+0x8c>
			integral += error*8;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	00da      	lsls	r2, r3, #3
 8002920:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <pid+0x180>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4413      	add	r3, r2
 8002926:	4a49      	ldr	r2, [pc, #292]	; (8002a4c <pid+0x180>)
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e015      	b.n	8002958 <pid+0x8c>
	}
	else
	{
		integral += error/4; // cool down is slower
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	da00      	bge.n	8002934 <pid+0x68>
 8002932:	3303      	adds	r3, #3
 8002934:	109b      	asrs	r3, r3, #2
 8002936:	461a      	mov	r2, r3
 8002938:	4b44      	ldr	r3, [pc, #272]	; (8002a4c <pid+0x180>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4413      	add	r3, r2
 800293e:	4a43      	ldr	r2, [pc, #268]	; (8002a4c <pid+0x180>)
 8002940:	6013      	str	r3, [r2, #0]
		if (error > -4*4)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f113 0f0f 	cmn.w	r3, #15
 8002948:	db06      	blt.n	8002958 <pid+0x8c>
			integral += error*16; // almost here, we need boost!
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	011a      	lsls	r2, r3, #4
 800294e:	4b3f      	ldr	r3, [pc, #252]	; (8002a4c <pid+0x180>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4413      	add	r3, r2
 8002954:	4a3d      	ldr	r2, [pc, #244]	; (8002a4c <pid+0x180>)
 8002956:	6013      	str	r3, [r2, #0]
	}
	if (integral > limit_top)
 8002958:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <pid+0x180>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <pid+0x184>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	dd0d      	ble.n	8002980 <pid+0xb4>
	{
		global_error |= errI_LIMIT;
 8002964:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <pid+0x188>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <pid+0x188>)
 8002970:	701a      	strb	r2, [r3, #0]
		temperature_SP = 0;
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <pid+0x18c>)
 8002974:	2200      	movs	r2, #0
 8002976:	801a      	strh	r2, [r3, #0]
		integral = limit_top;
 8002978:	4b35      	ldr	r3, [pc, #212]	; (8002a50 <pid+0x184>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a33      	ldr	r2, [pc, #204]	; (8002a4c <pid+0x180>)
 800297e:	6013      	str	r3, [r2, #0]
	}
	if (integral < 0)
 8002980:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <pid+0x180>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	da02      	bge.n	800298e <pid+0xc2>
		integral = 0;
 8002988:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <pid+0x180>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
	int32_t i = integral * I;
 800298e:	4b2f      	ldr	r3, [pc, #188]	; (8002a4c <pid+0x180>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a32      	ldr	r2, [pc, #200]	; (8002a5c <pid+0x190>)
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	fb02 f303 	mul.w	r3, r2, r3
 800299a:	60fb      	str	r3, [r7, #12]
	/* signal is noisy, but slow, I use additional filter for D */
	//int32_t d = (last_PV - PV)*D;
	int32_t d = deltaT(PV)*D;
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	f107 0208 	add.w	r2, r7, #8
 80029a2:	4694      	mov	ip, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff4d 	bl	8002844 <deltaT.8748>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b2c      	ldr	r3, [pc, #176]	; (8002a60 <pid+0x194>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	fb03 f302 	mul.w	r3, r3, r2
 80029b4:	61fb      	str	r3, [r7, #28]
	if (d > 0)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	dd01      	ble.n	80029c0 <pid+0xf4>
		d = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
	last_PV = PV;
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	4a20      	ldr	r2, [pc, #128]	; (8002a44 <pid+0x178>)
 80029c4:	6013      	str	r3, [r2, #0]
	int32_t out = (p+i+d)/4/32768;
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	441a      	add	r2, r3
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	4413      	add	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	da03      	bge.n	80029dc <pid+0x110>
 80029d4:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 80029d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80029dc:	145b      	asrs	r3, r3, #17
 80029de:	61bb      	str	r3, [r7, #24]
	if (out > 100)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	dd01      	ble.n	80029ea <pid+0x11e>
		out = 100;
 80029e6:	2364      	movs	r3, #100	; 0x64
 80029e8:	61bb      	str	r3, [r7, #24]
	if (out < 0)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	da01      	bge.n	80029f4 <pid+0x128>
		out = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]

	PID.P = p/4/32768;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	da03      	bge.n	8002a02 <pid+0x136>
 80029fa:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 80029fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a02:	145b      	asrs	r3, r3, #17
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <pid+0x198>)
 8002a08:	601a      	str	r2, [r3, #0]
	PID.I = i/4/32768;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	da03      	bge.n	8002a18 <pid+0x14c>
 8002a10:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8002a14:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a18:	145b      	asrs	r3, r3, #17
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <pid+0x198>)
 8002a1e:	605a      	str	r2, [r3, #4]
	PID.D = d/4/32768;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	da03      	bge.n	8002a2e <pid+0x162>
 8002a26:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8002a2a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a2e:	145b      	asrs	r3, r3, #17
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <pid+0x198>)
 8002a34:	609a      	str	r2, [r3, #8]

	return out;
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	b2db      	uxtb	r3, r3
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000030 	.word	0x20000030
 8002a48:	0800f1d0 	.word	0x0800f1d0
 8002a4c:	200002e4 	.word	0x200002e4
 8002a50:	0800f1d4 	.word	0x0800f1d4
 8002a54:	20000234 	.word	0x20000234
 8002a58:	2000024a 	.word	0x2000024a
 8002a5c:	0800f1d8 	.word	0x0800f1d8
 8002a60:	0800f1dc 	.word	0x0800f1dc
 8002a64:	200005d0 	.word	0x200005d0

08002a68 <HAL_TIM_OC_DelayElapsedCallback>:
/**
 * here happens two interrupts, at 998ms (for pid update)
 * and also at ~500ms (for second temperature update
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	get_max6675();
 8002a70:	f7fd fee4 	bl	800083c <get_max6675>
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7f1b      	ldrb	r3, [r3, #28]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d125      	bne.n	8002ac8 <HAL_TIM_OC_DelayElapsedCallback+0x60>
	{
		if (!(MAX6675.data_valid))
 8002a7c:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8002a7e:	7a5b      	ldrb	r3, [r3, #9]
 8002a80:	f083 0301 	eor.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_TIM_OC_DelayElapsedCallback+0x28>
			temperature_SP = 0;
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	801a      	strh	r2, [r3, #0]
		pwm_value = pid(MAX6675.temperature, temperature_SP<<2);
 8002a90:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8002a92:	881a      	ldrh	r2, [r3, #0]
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	f7ff ff14 	bl	80028cc <pid>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8002aaa:	801a      	strh	r2, [r3, #0]
		uint16_t val = 10*pwm_value;
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	81fb      	strh	r3, [r7, #14]
		TIM2->CCR1 = val;
 8002aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002abe:	89fb      	ldrh	r3, [r7, #14]
 8002ac0:	6353      	str	r3, [r2, #52]	; 0x34
		tick = true;
 8002ac2:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
	}
	ascii_max6675();
 8002ac8:	f7fd fee4 	bl	8000894 <ascii_max6675>
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	2000023c 	.word	0x2000023c
 8002ad8:	2000024a 	.word	0x2000024a
 8002adc:	20000248 	.word	0x20000248
 8002ae0:	2000024c 	.word	0x2000024c

08002ae4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	if (peep.stop && (htim == &htim4))
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8002aee:	789b      	ldrb	r3, [r3, #2]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_TIM_PWM_PulseFinishedCallback+0x26>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d106      	bne.n	8002b0a <HAL_TIM_PWM_PulseFinishedCallback+0x26>
	{
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 8002afc:	2104      	movs	r1, #4
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f004 fd8c 	bl	800761c <HAL_TIM_PWM_Stop_DMA>
		peep.stop = false;
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	709a      	strb	r2, [r3, #2]
	}
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	2000001c 	.word	0x2000001c
 8002b18:	20000588 	.word	0x20000588

08002b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b20:	f000 ffb0 	bl	8003a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b24:	f000 f84c 	bl	8002bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b28:	f000 fabe 	bl	80030a8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8002b2c:	f009 fc54 	bl	800c3d8 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002b30:	f000 f8a2 	bl	8002c78 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002b34:	f000 f8d8 	bl	8002ce8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002b38:	f000 f930 	bl	8002d9c <MX_TIM2_Init>
  MX_DMA_Init();
 8002b3c:	f000 fa96 	bl	800306c <MX_DMA_Init>
  MX_TIM4_Init();
 8002b40:	f000 fa1e 	bl	8002f80 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002b44:	f000 f9c8 	bl	8002ed8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, 1); // enable USB
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b4e:	4818      	ldr	r0, [pc, #96]	; (8002bb0 <main+0x94>)
 8002b50:	f001 fd2b 	bl	80045aa <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // PWM for output
 8002b54:	2100      	movs	r1, #0
 8002b56:	4817      	ldr	r0, [pc, #92]	; (8002bb4 <main+0x98>)
 8002b58:	f004 fb24 	bl	80071a4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // ENCODER
 8002b5c:	213c      	movs	r1, #60	; 0x3c
 8002b5e:	4816      	ldr	r0, [pc, #88]	; (8002bb8 <main+0x9c>)
 8002b60:	f004 febc 	bl	80078dc <HAL_TIM_Encoder_Start>
  TIM2->CCR2 = 998; // timer for PID interrupt + temperature update
 8002b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b68:	f240 32e6 	movw	r2, #998	; 0x3e6
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 499; // timer for temperature update
 8002b6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b72:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002b76:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM2->DIER |= TIM_DIER_CC2IE|TIM_DIER_CC3IE; // interrupt enable
 8002b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b82:	f043 030c 	orr.w	r3, r3, #12
 8002b86:	60d3      	str	r3, [r2, #12]
  HAL_TIM_Base_Start_IT(&htim2); // Enable Interrupts
 8002b88:	480a      	ldr	r0, [pc, #40]	; (8002bb4 <main+0x98>)
 8002b8a:	f004 fa09 	bl	8006fa0 <HAL_TIM_Base_Start_IT>
  delay_init(&htim1); // inits the library for us delay
 8002b8e:	480b      	ldr	r0, [pc, #44]	; (8002bbc <main+0xa0>)
 8002b90:	f7fd fadc 	bl	800014c <delay_init>
  init_lcd(); // init lcd and load special symbols
 8002b94:	f7fd fd7e 	bl	8000694 <init_lcd>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  do_button(); // update encoder status
 8002b98:	f7fd fdd8 	bl	800074c <do_button>
	  do_blink(); // led heartbeat
 8002b9c:	f7fd fe32 	bl	8000804 <do_blink>
	  do_usb();  // output debug information
 8002ba0:	f7fd ff10 	bl	80009c4 <do_usb>
	  do_interface(); // here happens the magic
 8002ba4:	f7fe f896 	bl	8000cd4 <do_interface>
	  do_peep(); // peep-peep
 8002ba8:	f7fd ff6a 	bl	8000a80 <do_peep>
	  do_button(); // update encoder status
 8002bac:	e7f4      	b.n	8002b98 <main+0x7c>
 8002bae:	bf00      	nop
 8002bb0:	40010800 	.word	0x40010800
 8002bb4:	200006c4 	.word	0x200006c4
 8002bb8:	200005dc 	.word	0x200005dc
 8002bbc:	20000624 	.word	0x20000624

08002bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b094      	sub	sp, #80	; 0x50
 8002bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bca:	2228      	movs	r2, #40	; 0x28
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f00a f8c8 	bl	800cd64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c02:	2302      	movs	r3, #2
 8002c04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002c0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c16:	4618      	mov	r0, r3
 8002c18:	f003 f9be 	bl	8005f98 <HAL_RCC_OscConfig>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002c22:	f000 fad9 	bl	80031d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c26:	230f      	movs	r3, #15
 8002c28:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c36:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	2101      	movs	r1, #1
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fc28 	bl	8006498 <HAL_RCC_ClockConfig>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002c4e:	f000 fac3 	bl	80031d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002c52:	2310      	movs	r3, #16
 8002c54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002c56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c5a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fd82 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002c6a:	f000 fab5 	bl	80031d8 <Error_Handler>
  }
}
 8002c6e:	bf00      	nop
 8002c70:	3750      	adds	r7, #80	; 0x50
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c7c:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <MX_SPI1_Init+0x68>)
 8002c7e:	4a19      	ldr	r2, [pc, #100]	; (8002ce4 <MX_SPI1_Init+0x6c>)
 8002c80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <MX_SPI1_Init+0x68>)
 8002c84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <MX_SPI1_Init+0x68>)
 8002c8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c90:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <MX_SPI1_Init+0x68>)
 8002c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c9a:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <MX_SPI1_Init+0x68>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <MX_SPI1_Init+0x68>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <MX_SPI1_Init+0x68>)
 8002ca8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002cac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <MX_SPI1_Init+0x68>)
 8002cb0:	2230      	movs	r2, #48	; 0x30
 8002cb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <MX_SPI1_Init+0x68>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <MX_SPI1_Init+0x68>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <MX_SPI1_Init+0x68>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <MX_SPI1_Init+0x68>)
 8002cc8:	220a      	movs	r2, #10
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ccc:	4804      	ldr	r0, [pc, #16]	; (8002ce0 <MX_SPI1_Init+0x68>)
 8002cce:	f003 fe01 	bl	80068d4 <HAL_SPI_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002cd8:	f000 fa7e 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	2000066c 	.word	0x2000066c
 8002ce4:	40013000 	.word	0x40013000

08002ce8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cfc:	463b      	mov	r3, r7
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d04:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <MX_TIM1_Init+0xa8>)
 8002d06:	4a23      	ldr	r2, [pc, #140]	; (8002d94 <MX_TIM1_Init+0xac>)
 8002d08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000000-1;
 8002d0a:	f003 fcaf 	bl	800666c <HAL_RCC_GetSysClockFreq>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4a21      	ldr	r2, [pc, #132]	; (8002d98 <MX_TIM1_Init+0xb0>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	0c9b      	lsrs	r3, r3, #18
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <MX_TIM1_Init+0xa8>)
 8002d1c:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1e:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <MX_TIM1_Init+0xa8>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002d24:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <MX_TIM1_Init+0xa8>)
 8002d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <MX_TIM1_Init+0xa8>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d32:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <MX_TIM1_Init+0xa8>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d38:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <MX_TIM1_Init+0xa8>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d3e:	4814      	ldr	r0, [pc, #80]	; (8002d90 <MX_TIM1_Init+0xa8>)
 8002d40:	f004 f894 	bl	8006e6c <HAL_TIM_Base_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8002d4a:	f000 fa45 	bl	80031d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d54:	f107 0308 	add.w	r3, r7, #8
 8002d58:	4619      	mov	r1, r3
 8002d5a:	480d      	ldr	r0, [pc, #52]	; (8002d90 <MX_TIM1_Init+0xa8>)
 8002d5c:	f005 f86a 	bl	8007e34 <HAL_TIM_ConfigClockSource>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002d66:	f000 fa37 	bl	80031d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d72:	463b      	mov	r3, r7
 8002d74:	4619      	mov	r1, r3
 8002d76:	4806      	ldr	r0, [pc, #24]	; (8002d90 <MX_TIM1_Init+0xa8>)
 8002d78:	f005 fcc2 	bl	8008700 <HAL_TIMEx_MasterConfigSynchronization>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002d82:	f000 fa29 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d86:	bf00      	nop
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000624 	.word	0x20000624
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	431bde83 	.word	0x431bde83

08002d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08e      	sub	sp, #56	; 0x38
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	609a      	str	r2, [r3, #8]
 8002dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db0:	f107 0320 	add.w	r3, r7, #32
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
 8002dc8:	615a      	str	r2, [r3, #20]
 8002dca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dcc:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000-1;
 8002dd4:	f003 fc4a 	bl	800666c <HAL_RCC_GetSysClockFreq>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4a3e      	ldr	r2, [pc, #248]	; (8002ed4 <MX_TIM2_Init+0x138>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	3b01      	subs	r3, #1
 8002de4:	4a3a      	ldr	r2, [pc, #232]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002de6:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de8:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002dee:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002df0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002df4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df6:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dfc:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002dfe:	2280      	movs	r2, #128	; 0x80
 8002e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e02:	4833      	ldr	r0, [pc, #204]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002e04:	f004 f832 	bl	8006e6c <HAL_TIM_Base_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002e0e:	f000 f9e3 	bl	80031d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	482c      	ldr	r0, [pc, #176]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002e20:	f005 f808 	bl	8007e34 <HAL_TIM_ConfigClockSource>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002e2a:	f000 f9d5 	bl	80031d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e2e:	4828      	ldr	r0, [pc, #160]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002e30:	f004 f960 	bl	80070f4 <HAL_TIM_PWM_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002e3a:	f000 f9cd 	bl	80031d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002e3e:	4824      	ldr	r0, [pc, #144]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002e40:	f004 f900 	bl	8007044 <HAL_TIM_OC_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002e4a:	f000 f9c5 	bl	80031d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e56:	f107 0320 	add.w	r3, r7, #32
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	481c      	ldr	r0, [pc, #112]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002e5e:	f005 fc4f 	bl	8008700 <HAL_TIMEx_MasterConfigSynchronization>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8002e68:	f000 f9b6 	bl	80031d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e6c:	2360      	movs	r3, #96	; 0x60
 8002e6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	2200      	movs	r2, #0
 8002e80:	4619      	mov	r1, r3
 8002e82:	4813      	ldr	r0, [pc, #76]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002e84:	f004 ff18 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8002e8e:	f000 f9a3 	bl	80031d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	2204      	movs	r2, #4
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	480c      	ldr	r0, [pc, #48]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002e9e:	f004 feb3 	bl	8007c08 <HAL_TIM_OC_ConfigChannel>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8002ea8:	f000 f996 	bl	80031d8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	2208      	movs	r2, #8
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4807      	ldr	r0, [pc, #28]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002eb4:	f004 fea8 	bl	8007c08 <HAL_TIM_OC_ConfigChannel>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8002ebe:	f000 f98b 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ec2:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <MX_TIM2_Init+0x134>)
 8002ec4:	f000 fce4 	bl	8003890 <HAL_TIM_MspPostInit>

}
 8002ec8:	bf00      	nop
 8002eca:	3738      	adds	r7, #56	; 0x38
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	200006c4 	.word	0x200006c4
 8002ed4:	10624dd3 	.word	0x10624dd3

08002ed8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08c      	sub	sp, #48	; 0x30
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ede:	f107 030c 	add.w	r3, r7, #12
 8002ee2:	2224      	movs	r2, #36	; 0x24
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f009 ff3c 	bl	800cd64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <MX_TIM3_Init+0xa0>)
 8002ef6:	4a21      	ldr	r2, [pc, #132]	; (8002f7c <MX_TIM3_Init+0xa4>)
 8002ef8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002efa:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <MX_TIM3_Init+0xa0>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <MX_TIM3_Init+0xa0>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <MX_TIM3_Init+0xa0>)
 8002f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <MX_TIM3_Init+0xa0>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f14:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <MX_TIM3_Init+0xa0>)
 8002f16:	2280      	movs	r2, #128	; 0x80
 8002f18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f22:	2301      	movs	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002f2a:	230a      	movs	r3, #10
 8002f2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f32:	2301      	movs	r3, #1
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f36:	2300      	movs	r3, #0
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002f3a:	230a      	movs	r3, #10
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002f3e:	f107 030c 	add.w	r3, r7, #12
 8002f42:	4619      	mov	r1, r3
 8002f44:	480c      	ldr	r0, [pc, #48]	; (8002f78 <MX_TIM3_Init+0xa0>)
 8002f46:	f004 fc27 	bl	8007798 <HAL_TIM_Encoder_Init>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002f50:	f000 f942 	bl	80031d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f54:	2300      	movs	r3, #0
 8002f56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4805      	ldr	r0, [pc, #20]	; (8002f78 <MX_TIM3_Init+0xa0>)
 8002f62:	f005 fbcd 	bl	8008700 <HAL_TIMEx_MasterConfigSynchronization>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002f6c:	f000 f934 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f70:	bf00      	nop
 8002f72:	3730      	adds	r7, #48	; 0x30
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	200005dc 	.word	0x200005dc
 8002f7c:	40000400 	.word	0x40000400

08002f80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08e      	sub	sp, #56	; 0x38
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	609a      	str	r2, [r3, #8]
 8002f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f94:	f107 0320 	add.w	r3, r7, #32
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]
 8002fac:	615a      	str	r2, [r3, #20]
 8002fae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fb0:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <MX_TIM4_Init+0xe4>)
 8002fb2:	4a2d      	ldr	r2, [pc, #180]	; (8003068 <MX_TIM4_Init+0xe8>)
 8002fb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002fb6:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <MX_TIM4_Init+0xe4>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fbc:	4b29      	ldr	r3, [pc, #164]	; (8003064 <MX_TIM4_Init+0xe4>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 127;
 8002fc2:	4b28      	ldr	r3, [pc, #160]	; (8003064 <MX_TIM4_Init+0xe4>)
 8002fc4:	227f      	movs	r2, #127	; 0x7f
 8002fc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc8:	4b26      	ldr	r3, [pc, #152]	; (8003064 <MX_TIM4_Init+0xe4>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fce:	4b25      	ldr	r3, [pc, #148]	; (8003064 <MX_TIM4_Init+0xe4>)
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002fd4:	4823      	ldr	r0, [pc, #140]	; (8003064 <MX_TIM4_Init+0xe4>)
 8002fd6:	f003 ff49 	bl	8006e6c <HAL_TIM_Base_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002fe0:	f000 f8fa 	bl	80031d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fee:	4619      	mov	r1, r3
 8002ff0:	481c      	ldr	r0, [pc, #112]	; (8003064 <MX_TIM4_Init+0xe4>)
 8002ff2:	f004 ff1f 	bl	8007e34 <HAL_TIM_ConfigClockSource>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002ffc:	f000 f8ec 	bl	80031d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003000:	4818      	ldr	r0, [pc, #96]	; (8003064 <MX_TIM4_Init+0xe4>)
 8003002:	f004 f877 	bl	80070f4 <HAL_TIM_PWM_Init>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800300c:	f000 f8e4 	bl	80031d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003010:	2300      	movs	r3, #0
 8003012:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003014:	2300      	movs	r3, #0
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003018:	f107 0320 	add.w	r3, r7, #32
 800301c:	4619      	mov	r1, r3
 800301e:	4811      	ldr	r0, [pc, #68]	; (8003064 <MX_TIM4_Init+0xe4>)
 8003020:	f005 fb6e 	bl	8008700 <HAL_TIMEx_MasterConfigSynchronization>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800302a:	f000 f8d5 	bl	80031d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800302e:	2360      	movs	r3, #96	; 0x60
 8003030:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800303e:	1d3b      	adds	r3, r7, #4
 8003040:	2204      	movs	r2, #4
 8003042:	4619      	mov	r1, r3
 8003044:	4807      	ldr	r0, [pc, #28]	; (8003064 <MX_TIM4_Init+0xe4>)
 8003046:	f004 fe37 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8003050:	f000 f8c2 	bl	80031d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003054:	4803      	ldr	r0, [pc, #12]	; (8003064 <MX_TIM4_Init+0xe4>)
 8003056:	f000 fc1b 	bl	8003890 <HAL_TIM_MspPostInit>

}
 800305a:	bf00      	nop
 800305c:	3738      	adds	r7, #56	; 0x38
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000588 	.word	0x20000588
 8003068:	40000800 	.word	0x40000800

0800306c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003072:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <MX_DMA_Init+0x38>)
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <MX_DMA_Init+0x38>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6153      	str	r3, [r2, #20]
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <MX_DMA_Init+0x38>)
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	607b      	str	r3, [r7, #4]
 8003088:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800308a:	2200      	movs	r2, #0
 800308c:	2100      	movs	r1, #0
 800308e:	200e      	movs	r0, #14
 8003090:	f000 fe55 	bl	8003d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003094:	200e      	movs	r0, #14
 8003096:	f000 fe6e 	bl	8003d76 <HAL_NVIC_EnableIRQ>

}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000

080030a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ae:	f107 0310 	add.w	r3, r7, #16
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	609a      	str	r2, [r3, #8]
 80030ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030bc:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <MX_GPIO_Init+0x120>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	4a41      	ldr	r2, [pc, #260]	; (80031c8 <MX_GPIO_Init+0x120>)
 80030c2:	f043 0310 	orr.w	r3, r3, #16
 80030c6:	6193      	str	r3, [r2, #24]
 80030c8:	4b3f      	ldr	r3, [pc, #252]	; (80031c8 <MX_GPIO_Init+0x120>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030d4:	4b3c      	ldr	r3, [pc, #240]	; (80031c8 <MX_GPIO_Init+0x120>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	4a3b      	ldr	r2, [pc, #236]	; (80031c8 <MX_GPIO_Init+0x120>)
 80030da:	f043 0320 	orr.w	r3, r3, #32
 80030de:	6193      	str	r3, [r2, #24]
 80030e0:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <MX_GPIO_Init+0x120>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ec:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <MX_GPIO_Init+0x120>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	4a35      	ldr	r2, [pc, #212]	; (80031c8 <MX_GPIO_Init+0x120>)
 80030f2:	f043 0304 	orr.w	r3, r3, #4
 80030f6:	6193      	str	r3, [r2, #24]
 80030f8:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <MX_GPIO_Init+0x120>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003104:	4b30      	ldr	r3, [pc, #192]	; (80031c8 <MX_GPIO_Init+0x120>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	4a2f      	ldr	r2, [pc, #188]	; (80031c8 <MX_GPIO_Init+0x120>)
 800310a:	f043 0308 	orr.w	r3, r3, #8
 800310e:	6193      	str	r3, [r2, #24]
 8003110:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <MX_GPIO_Init+0x120>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|HOT_LEDS_Pin, GPIO_PIN_RESET);
 800311c:	2200      	movs	r2, #0
 800311e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003122:	482a      	ldr	r0, [pc, #168]	; (80031cc <MX_GPIO_Init+0x124>)
 8003124:	f001 fa41 	bl	80045aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 8003128:	2201      	movs	r2, #1
 800312a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800312e:	4828      	ldr	r0, [pc, #160]	; (80031d0 <MX_GPIO_Init+0x128>)
 8003130:	f001 fa3b 	bl	80045aa <HAL_GPIO_WritePin>
                          |hd_4_Pin|hd_5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8003134:	2200      	movs	r2, #0
 8003136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800313a:	4826      	ldr	r0, [pc, #152]	; (80031d4 <MX_GPIO_Init+0x12c>)
 800313c:	f001 fa35 	bl	80045aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, debug_a_Pin|debug_b_Pin, GPIO_PIN_RESET);
 8003140:	2200      	movs	r2, #0
 8003142:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003146:	4822      	ldr	r0, [pc, #136]	; (80031d0 <MX_GPIO_Init+0x128>)
 8003148:	f001 fa2f 	bl	80045aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin HOT_LEDS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|HOT_LEDS_Pin;
 800314c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003152:	2301      	movs	r3, #1
 8003154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2302      	movs	r3, #2
 800315c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800315e:	f107 0310 	add.w	r3, r7, #16
 8003162:	4619      	mov	r1, r3
 8003164:	4819      	ldr	r0, [pc, #100]	; (80031cc <MX_GPIO_Init+0x124>)
 8003166:	f001 f885 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : hd_7_Pin hd_6_Pin hd_RS_Pin hd_E_Pin
                           hd_4_Pin hd_5_Pin debug_a_Pin debug_b_Pin */
  GPIO_InitStruct.Pin = hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 800316a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800316e:	613b      	str	r3, [r7, #16]
                          |hd_4_Pin|hd_5_Pin|debug_a_Pin|debug_b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003170:	2301      	movs	r3, #1
 8003172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2302      	movs	r3, #2
 800317a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317c:	f107 0310 	add.w	r3, r7, #16
 8003180:	4619      	mov	r1, r3
 8003182:	4813      	ldr	r0, [pc, #76]	; (80031d0 <MX_GPIO_Init+0x128>)
 8003184:	f001 f876 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 8003188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318e:	2301      	movs	r3, #1
 8003190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2302      	movs	r3, #2
 8003198:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 800319a:	f107 0310 	add.w	r3, r7, #16
 800319e:	4619      	mov	r1, r3
 80031a0:	480c      	ldr	r0, [pc, #48]	; (80031d4 <MX_GPIO_Init+0x12c>)
 80031a2:	f001 f867 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_s_Pin */
  GPIO_InitStruct.Pin = enc_s_Pin;
 80031a6:	2308      	movs	r3, #8
 80031a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(enc_s_GPIO_Port, &GPIO_InitStruct);
 80031b2:	f107 0310 	add.w	r3, r7, #16
 80031b6:	4619      	mov	r1, r3
 80031b8:	4805      	ldr	r0, [pc, #20]	; (80031d0 <MX_GPIO_Init+0x128>)
 80031ba:	f001 f85b 	bl	8004274 <HAL_GPIO_Init>

}
 80031be:	bf00      	nop
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40011000 	.word	0x40011000
 80031d0:	40010c00 	.word	0x40010c00
 80031d4:	40010800 	.word	0x40010800

080031d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031dc:	b672      	cpsid	i
}
 80031de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031e0:	e7fe      	b.n	80031e0 <Error_Handler+0x8>
	...

080031e4 <SPI_WaitFlagStateUntilTimeout>:
#include "main.h"
#include "spi_rxonly.h"

static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	4613      	mov	r3, r2
 80031f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031f4:	f000 fc9e 	bl	8003b34 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	4413      	add	r3, r2
 8003202:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003204:	f000 fc96 	bl	8003b34 <HAL_GetTick>
 8003208:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800320a:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	015b      	lsls	r3, r3, #5
 8003210:	0d1b      	lsrs	r3, r3, #20
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	fb02 f303 	mul.w	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800321a:	e054      	b.n	80032c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d050      	beq.n	80032c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003224:	f000 fc86 	bl	8003b34 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	429a      	cmp	r2, r3
 8003232:	d902      	bls.n	800323a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d13d      	bne.n	80032b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003248:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003252:	d111      	bne.n	8003278 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325c:	d004      	beq.n	8003268 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003266:	d107      	bne.n	8003278 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003276:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003280:	d10f      	bne.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e017      	b.n	80032e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4013      	ands	r3, r2
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	bf0c      	ite	eq
 80032d6:	2301      	moveq	r3, #1
 80032d8:	2300      	movne	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d19b      	bne.n	800321c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000038 	.word	0x20000038

080032f4 <SPI_EndRxTransaction>:

static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003308:	d111      	bne.n	800332e <SPI_EndRxTransaction+0x3a>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003312:	d004      	beq.n	800331e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331c:	d107      	bne.n	800332e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800332c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003336:	d117      	bne.n	8003368 <SPI_EndRxTransaction+0x74>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003340:	d112      	bne.n	8003368 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2200      	movs	r2, #0
 800334a:	2101      	movs	r1, #1
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7ff ff49 	bl	80031e4 <SPI_WaitFlagStateUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d01a      	beq.n	800338e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e013      	b.n	8003390 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2200      	movs	r2, #0
 8003370:	2180      	movs	r1, #128	; 0x80
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff ff36 	bl	80031e4 <SPI_WaitFlagStateUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	f043 0220 	orr.w	r2, r3, #32
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e000      	b.n	8003390 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_SPI_ReceiveOnly>:

// HAL Receive procedure doesn't work well in RXONLY mode
// (it doesn't know when to stop), so here is quick fix
HAL_StatusTypeDef HAL_SPI_ReceiveOnly(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033b4:	d112      	bne.n	80033dc <HAL_SPI_ReceiveOnly+0x44>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10e      	bne.n	80033dc <HAL_SPI_ReceiveOnly+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2204      	movs	r2, #4
 80033c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f003 fb02 	bl	80069dc <HAL_SPI_TransmitReceive>
 80033d8:	4603      	mov	r3, r0
 80033da:	e110      	b.n	80035fe <HAL_SPI_ReceiveOnly+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_SPI_ReceiveOnly+0x52>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e109      	b.n	80035fe <HAL_SPI_ReceiveOnly+0x266>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033f2:	f000 fb9f 	bl	8003b34 <HAL_GetTick>
 80033f6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d002      	beq.n	800340a <HAL_SPI_ReceiveOnly+0x72>
  {
    errorcode = HAL_BUSY;
 8003404:	2302      	movs	r3, #2
 8003406:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003408:	e0f0      	b.n	80035ec <HAL_SPI_ReceiveOnly+0x254>
  }

  if ((pData == NULL) || (Size == 0U))
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_SPI_ReceiveOnly+0x7e>
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_SPI_ReceiveOnly+0x84>
  {
    errorcode = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	77fb      	strb	r3, [r7, #31]
    goto error;
 800341a:	e0e7      	b.n	80035ec <HAL_SPI_ReceiveOnly+0x254>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2204      	movs	r2, #4
 8003420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	88fa      	ldrh	r2, [r7, #6]
 800343a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003462:	d10f      	bne.n	8003484 <HAL_SPI_ReceiveOnly+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003472:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003482:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d007      	beq.n	80034a2 <HAL_SPI_ReceiveOnly+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 8088 	bne.w	80035bc <HAL_SPI_ReceiveOnly+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80034ac:	e02e      	b.n	800350c <HAL_SPI_ReceiveOnly+0x174>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d115      	bne.n	80034e8 <HAL_SPI_ReceiveOnly+0x150>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f103 020c 	add.w	r2, r3, #12
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	7812      	ldrb	r2, [r2, #0]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034e6:	e011      	b.n	800350c <HAL_SPI_ReceiveOnly+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e8:	f000 fb24 	bl	8003b34 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d803      	bhi.n	8003500 <HAL_SPI_ReceiveOnly+0x168>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fe:	d102      	bne.n	8003506 <HAL_SPI_ReceiveOnly+0x16e>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <HAL_SPI_ReceiveOnly+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	77fb      	strb	r3, [r7, #31]
          goto error;
 800350a:	e06f      	b.n	80035ec <HAL_SPI_ReceiveOnly+0x254>
    while (hspi->RxXferCount > 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1cb      	bne.n	80034ae <HAL_SPI_ReceiveOnly+0x116>
 8003516:	e056      	b.n	80035c6 <HAL_SPI_ReceiveOnly+0x22e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
    	// if RXONLY
    	if ((hspi->Instance->CR1 & SPI_CR1_RXONLY) == SPI_CR1_RXONLY)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003526:	d11c      	bne.n	8003562 <HAL_SPI_ReceiveOnly+0x1ca>
    	{
		  /* Check if the SPI is already enabled */
		  if (((hspi->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d115      	bne.n	8003562 <HAL_SPI_ReceiveOnly+0x1ca>
				  && (hspi->RxXferCount == 1U))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d110      	bne.n	8003562 <HAL_SPI_ReceiveOnly+0x1ca>
		  {
			  // delay for ~ 150 cycles (~ SPI clock cycle for Fclk/128
			  // (Page 718 from RM0008 Rev 21)
			  for (int i = 12; i > 0; i--);
 8003540:	230c      	movs	r3, #12
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	e002      	b.n	800354c <HAL_SPI_ReceiveOnly+0x1b4>
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	3b01      	subs	r3, #1
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	dcf9      	bgt.n	8003546 <HAL_SPI_ReceiveOnly+0x1ae>
			/* Disable SPI peripheral */
			__HAL_SPI_DISABLE(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003560:	601a      	str	r2, [r3, #0]
		  }
    	}
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b01      	cmp	r3, #1
 800356e:	d113      	bne.n	8003598 <HAL_SPI_ReceiveOnly+0x200>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	b292      	uxth	r2, r2
 800357c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	1c9a      	adds	r2, r3, #2
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003596:	e011      	b.n	80035bc <HAL_SPI_ReceiveOnly+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003598:	f000 facc 	bl	8003b34 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d803      	bhi.n	80035b0 <HAL_SPI_ReceiveOnly+0x218>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ae:	d102      	bne.n	80035b6 <HAL_SPI_ReceiveOnly+0x21e>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d102      	bne.n	80035bc <HAL_SPI_ReceiveOnly+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035ba:	e017      	b.n	80035ec <HAL_SPI_ReceiveOnly+0x254>
    while (hspi->RxXferCount > 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1a8      	bne.n	8003518 <HAL_SPI_ReceiveOnly+0x180>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	6839      	ldr	r1, [r7, #0]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f7ff fe92 	bl	80032f4 <SPI_EndRxTransaction>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_SPI_ReceiveOnly+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_SPI_ReceiveOnly+0x252>
  {
    errorcode = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e000      	b.n	80035ec <HAL_SPI_ReceiveOnly+0x254>
  }

error :
 80035ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_MspInit+0x5c>)
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	4a14      	ldr	r2, [pc, #80]	; (8003664 <HAL_MspInit+0x5c>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6193      	str	r3, [r2, #24]
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_MspInit+0x5c>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_MspInit+0x5c>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <HAL_MspInit+0x5c>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003630:	61d3      	str	r3, [r2, #28]
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <HAL_MspInit+0x5c>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_MspInit+0x60>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <HAL_MspInit+0x60>)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40021000 	.word	0x40021000
 8003668:	40010000 	.word	0x40010000

0800366c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 0310 	add.w	r3, r7, #16
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d12f      	bne.n	80036ec <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800368c:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <HAL_SPI_MspInit+0x8c>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	4a19      	ldr	r2, [pc, #100]	; (80036f8 <HAL_SPI_MspInit+0x8c>)
 8003692:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003696:	6193      	str	r3, [r2, #24]
 8003698:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <HAL_SPI_MspInit+0x8c>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <HAL_SPI_MspInit+0x8c>)
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	4a13      	ldr	r2, [pc, #76]	; (80036f8 <HAL_SPI_MspInit+0x8c>)
 80036aa:	f043 0304 	orr.w	r3, r3, #4
 80036ae:	6193      	str	r3, [r2, #24]
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_SPI_MspInit+0x8c>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80036bc:	2330      	movs	r3, #48	; 0x30
 80036be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c0:	2302      	movs	r3, #2
 80036c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036c4:	2303      	movs	r3, #3
 80036c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c8:	f107 0310 	add.w	r3, r7, #16
 80036cc:	4619      	mov	r1, r3
 80036ce:	480b      	ldr	r0, [pc, #44]	; (80036fc <HAL_SPI_MspInit+0x90>)
 80036d0:	f000 fdd0 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036d4:	2340      	movs	r3, #64	; 0x40
 80036d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036dc:	2301      	movs	r3, #1
 80036de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e0:	f107 0310 	add.w	r3, r7, #16
 80036e4:	4619      	mov	r1, r3
 80036e6:	4805      	ldr	r0, [pc, #20]	; (80036fc <HAL_SPI_MspInit+0x90>)
 80036e8:	f000 fdc4 	bl	8004274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80036ec:	bf00      	nop
 80036ee:	3720      	adds	r7, #32
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40013000 	.word	0x40013000
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40010800 	.word	0x40010800

08003700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a32      	ldr	r2, [pc, #200]	; (80037d8 <HAL_TIM_Base_MspInit+0xd8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10c      	bne.n	800372c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003712:	4b32      	ldr	r3, [pc, #200]	; (80037dc <HAL_TIM_Base_MspInit+0xdc>)
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	4a31      	ldr	r2, [pc, #196]	; (80037dc <HAL_TIM_Base_MspInit+0xdc>)
 8003718:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800371c:	6193      	str	r3, [r2, #24]
 800371e:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <HAL_TIM_Base_MspInit+0xdc>)
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800372a:	e051      	b.n	80037d0 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003734:	d114      	bne.n	8003760 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <HAL_TIM_Base_MspInit+0xdc>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	4a28      	ldr	r2, [pc, #160]	; (80037dc <HAL_TIM_Base_MspInit+0xdc>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	61d3      	str	r3, [r2, #28]
 8003742:	4b26      	ldr	r3, [pc, #152]	; (80037dc <HAL_TIM_Base_MspInit+0xdc>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800374e:	2200      	movs	r2, #0
 8003750:	2100      	movs	r1, #0
 8003752:	201c      	movs	r0, #28
 8003754:	f000 faf3 	bl	8003d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003758:	201c      	movs	r0, #28
 800375a:	f000 fb0c 	bl	8003d76 <HAL_NVIC_EnableIRQ>
}
 800375e:	e037      	b.n	80037d0 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <HAL_TIM_Base_MspInit+0xe0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d132      	bne.n	80037d0 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800376a:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <HAL_TIM_Base_MspInit+0xdc>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <HAL_TIM_Base_MspInit+0xdc>)
 8003770:	f043 0304 	orr.w	r3, r3, #4
 8003774:	61d3      	str	r3, [r2, #28]
 8003776:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_TIM_Base_MspInit+0xdc>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 8003782:	4b18      	ldr	r3, [pc, #96]	; (80037e4 <HAL_TIM_Base_MspInit+0xe4>)
 8003784:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <HAL_TIM_Base_MspInit+0xe8>)
 8003786:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003788:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <HAL_TIM_Base_MspInit+0xe4>)
 800378a:	2210      	movs	r2, #16
 800378c:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <HAL_TIM_Base_MspInit+0xe4>)
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003794:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <HAL_TIM_Base_MspInit+0xe4>)
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_TIM_Base_MspInit+0xe4>)
 800379c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a0:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <HAL_TIM_Base_MspInit+0xe4>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <HAL_TIM_Base_MspInit+0xe4>)
 80037aa:	2220      	movs	r2, #32
 80037ac:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80037ae:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <HAL_TIM_Base_MspInit+0xe4>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 80037b4:	480b      	ldr	r0, [pc, #44]	; (80037e4 <HAL_TIM_Base_MspInit+0xe4>)
 80037b6:	f000 faf9 	bl	8003dac <HAL_DMA_Init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_TIM_Base_MspInit+0xc4>
      Error_Handler();
 80037c0:	f7ff fd0a 	bl	80031d8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a07      	ldr	r2, [pc, #28]	; (80037e4 <HAL_TIM_Base_MspInit+0xe4>)
 80037c8:	629a      	str	r2, [r3, #40]	; 0x28
 80037ca:	4a06      	ldr	r2, [pc, #24]	; (80037e4 <HAL_TIM_Base_MspInit+0xe4>)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6253      	str	r3, [r2, #36]	; 0x24
}
 80037d0:	bf00      	nop
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40000800 	.word	0x40000800
 80037e4:	2000052c 	.word	0x2000052c
 80037e8:	40020044 	.word	0x40020044

080037ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 0314 	add.w	r3, r7, #20
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <HAL_TIM_Encoder_MspInit+0x94>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d135      	bne.n	8003878 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800380c:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_TIM_Encoder_MspInit+0x98>)
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	4a1c      	ldr	r2, [pc, #112]	; (8003884 <HAL_TIM_Encoder_MspInit+0x98>)
 8003812:	f043 0302 	orr.w	r3, r3, #2
 8003816:	61d3      	str	r3, [r2, #28]
 8003818:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <HAL_TIM_Encoder_MspInit+0x98>)
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003824:	4b17      	ldr	r3, [pc, #92]	; (8003884 <HAL_TIM_Encoder_MspInit+0x98>)
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	4a16      	ldr	r2, [pc, #88]	; (8003884 <HAL_TIM_Encoder_MspInit+0x98>)
 800382a:	f043 0308 	orr.w	r3, r3, #8
 800382e:	6193      	str	r3, [r2, #24]
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <HAL_TIM_Encoder_MspInit+0x98>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin;
 800383c:	2330      	movs	r3, #48	; 0x30
 800383e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	4619      	mov	r1, r3
 800384e:	480e      	ldr	r0, [pc, #56]	; (8003888 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003850:	f000 fd10 	bl	8004274 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003854:	4b0d      	ldr	r3, [pc, #52]	; (800388c <HAL_TIM_Encoder_MspInit+0xa0>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
 8003872:	4a06      	ldr	r2, [pc, #24]	; (800388c <HAL_TIM_Encoder_MspInit+0xa0>)
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003878:	bf00      	nop
 800387a:	3728      	adds	r7, #40	; 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40000400 	.word	0x40000400
 8003884:	40021000 	.word	0x40021000
 8003888:	40010c00 	.word	0x40010c00
 800388c:	40010000 	.word	0x40010000

08003890 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003898:	f107 0310 	add.w	r3, r7, #16
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ae:	d118      	bne.n	80038e2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b0:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <HAL_TIM_MspPostInit+0x94>)
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	4a1b      	ldr	r2, [pc, #108]	; (8003924 <HAL_TIM_MspPostInit+0x94>)
 80038b6:	f043 0304 	orr.w	r3, r3, #4
 80038ba:	6193      	str	r3, [r2, #24]
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_TIM_MspPostInit+0x94>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SSR_control_Pin;
 80038c8:	2301      	movs	r3, #1
 80038ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038cc:	2302      	movs	r3, #2
 80038ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d0:	2302      	movs	r3, #2
 80038d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SSR_control_GPIO_Port, &GPIO_InitStruct);
 80038d4:	f107 0310 	add.w	r3, r7, #16
 80038d8:	4619      	mov	r1, r3
 80038da:	4813      	ldr	r0, [pc, #76]	; (8003928 <HAL_TIM_MspPostInit+0x98>)
 80038dc:	f000 fcca 	bl	8004274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80038e0:	e01c      	b.n	800391c <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a11      	ldr	r2, [pc, #68]	; (800392c <HAL_TIM_MspPostInit+0x9c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d117      	bne.n	800391c <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_TIM_MspPostInit+0x94>)
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	4a0c      	ldr	r2, [pc, #48]	; (8003924 <HAL_TIM_MspPostInit+0x94>)
 80038f2:	f043 0308 	orr.w	r3, r3, #8
 80038f6:	6193      	str	r3, [r2, #24]
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_TIM_MspPostInit+0x94>)
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Loudspeaker_Pin;
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003908:	2302      	movs	r3, #2
 800390a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390c:	2302      	movs	r3, #2
 800390e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Loudspeaker_GPIO_Port, &GPIO_InitStruct);
 8003910:	f107 0310 	add.w	r3, r7, #16
 8003914:	4619      	mov	r1, r3
 8003916:	4806      	ldr	r0, [pc, #24]	; (8003930 <HAL_TIM_MspPostInit+0xa0>)
 8003918:	f000 fcac 	bl	8004274 <HAL_GPIO_Init>
}
 800391c:	bf00      	nop
 800391e:	3720      	adds	r7, #32
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	40010800 	.word	0x40010800
 800392c:	40000800 	.word	0x40000800
 8003930:	40010c00 	.word	0x40010c00

08003934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003938:	e7fe      	b.n	8003938 <NMI_Handler+0x4>

0800393a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800393e:	e7fe      	b.n	800393e <HardFault_Handler+0x4>

08003940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003944:	e7fe      	b.n	8003944 <MemManage_Handler+0x4>

08003946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800394a:	e7fe      	b.n	800394a <BusFault_Handler+0x4>

0800394c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003950:	e7fe      	b.n	8003950 <UsageFault_Handler+0x4>

08003952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr

08003976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800397a:	f000 f8c9 	bl	8003b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8003988:	4802      	ldr	r0, [pc, #8]	; (8003994 <DMA1_Channel4_IRQHandler+0x10>)
 800398a:	f000 fb3f 	bl	800400c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	2000052c 	.word	0x2000052c

08003998 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800399c:	4802      	ldr	r0, [pc, #8]	; (80039a8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800399e:	f000 ff66 	bl	800486e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	200013a4 	.word	0x200013a4

080039ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <TIM2_IRQHandler+0x10>)
 80039b2:	f004 f821 	bl	80079f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200006c4 	.word	0x200006c4

080039c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039c8:	4a14      	ldr	r2, [pc, #80]	; (8003a1c <_sbrk+0x5c>)
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <_sbrk+0x60>)
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <_sbrk+0x64>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039dc:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <_sbrk+0x64>)
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <_sbrk+0x68>)
 80039e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <_sbrk+0x64>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d207      	bcs.n	8003a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039f0:	f009 f98e 	bl	800cd10 <__errno>
 80039f4:	4603      	mov	r3, r0
 80039f6:	220c      	movs	r2, #12
 80039f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295
 80039fe:	e009      	b.n	8003a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <_sbrk+0x64>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <_sbrk+0x64>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	4a05      	ldr	r2, [pc, #20]	; (8003a24 <_sbrk+0x64>)
 8003a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a12:	68fb      	ldr	r3, [r7, #12]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20005000 	.word	0x20005000
 8003a20:	00000400 	.word	0x00000400
 8003a24:	200002f8 	.word	0x200002f8
 8003a28:	200016a0 	.word	0x200016a0

08003a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a38:	480c      	ldr	r0, [pc, #48]	; (8003a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a3a:	490d      	ldr	r1, [pc, #52]	; (8003a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a3c:	4a0d      	ldr	r2, [pc, #52]	; (8003a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a40:	e002      	b.n	8003a48 <LoopCopyDataInit>

08003a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a46:	3304      	adds	r3, #4

08003a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a4c:	d3f9      	bcc.n	8003a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a50:	4c0a      	ldr	r4, [pc, #40]	; (8003a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a54:	e001      	b.n	8003a5a <LoopFillZerobss>

08003a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a58:	3204      	adds	r2, #4

08003a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a5c:	d3fb      	bcc.n	8003a56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a5e:	f7ff ffe5 	bl	8003a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a62:	f009 f95b 	bl	800cd1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a66:	f7ff f859 	bl	8002b1c <main>
  bx lr
 8003a6a:	4770      	bx	lr
  ldr r0, =_sdata
 8003a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a70:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003a74:	0800f22c 	.word	0x0800f22c
  ldr r2, =_sbss
 8003a78:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003a7c:	200016a0 	.word	0x200016a0

08003a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a80:	e7fe      	b.n	8003a80 <ADC1_2_IRQHandler>
	...

08003a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_Init+0x28>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a07      	ldr	r2, [pc, #28]	; (8003aac <HAL_Init+0x28>)
 8003a8e:	f043 0310 	orr.w	r3, r3, #16
 8003a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a94:	2003      	movs	r0, #3
 8003a96:	f000 f947 	bl	8003d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f000 f808 	bl	8003ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aa0:	f7ff fdb2 	bl	8003608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40022000 	.word	0x40022000

08003ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ab8:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <HAL_InitTick+0x54>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_InitTick+0x58>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f95f 	bl	8003d92 <HAL_SYSTICK_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e00e      	b.n	8003afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b0f      	cmp	r3, #15
 8003ae2:	d80a      	bhi.n	8003afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aec:	f000 f927 	bl	8003d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003af0:	4a06      	ldr	r2, [pc, #24]	; (8003b0c <HAL_InitTick+0x5c>)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e000      	b.n	8003afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000038 	.word	0x20000038
 8003b08:	20000040 	.word	0x20000040
 8003b0c:	2000003c 	.word	0x2000003c

08003b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <HAL_IncTick+0x1c>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_IncTick+0x20>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4413      	add	r3, r2
 8003b20:	4a03      	ldr	r2, [pc, #12]	; (8003b30 <HAL_IncTick+0x20>)
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	20000040 	.word	0x20000040
 8003b30:	2000070c 	.word	0x2000070c

08003b34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return uwTick;
 8003b38:	4b02      	ldr	r3, [pc, #8]	; (8003b44 <HAL_GetTick+0x10>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr
 8003b44:	2000070c 	.word	0x2000070c

08003b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b50:	f7ff fff0 	bl	8003b34 <HAL_GetTick>
 8003b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d005      	beq.n	8003b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b62:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <HAL_Delay+0x44>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b6e:	bf00      	nop
 8003b70:	f7ff ffe0 	bl	8003b34 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d8f7      	bhi.n	8003b70 <HAL_Delay+0x28>
  {
  }
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000040 	.word	0x20000040

08003b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bac:	4013      	ands	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bc2:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	60d3      	str	r3, [r2, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	0a1b      	lsrs	r3, r3, #8
 8003be2:	f003 0307 	and.w	r3, r3, #7
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	db0b      	blt.n	8003c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	f003 021f 	and.w	r2, r3, #31
 8003c0c:	4906      	ldr	r1, [pc, #24]	; (8003c28 <__NVIC_EnableIRQ+0x34>)
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	2001      	movs	r0, #1
 8003c16:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr
 8003c28:	e000e100 	.word	0xe000e100

08003c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	6039      	str	r1, [r7, #0]
 8003c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	db0a      	blt.n	8003c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	490c      	ldr	r1, [pc, #48]	; (8003c78 <__NVIC_SetPriority+0x4c>)
 8003c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4a:	0112      	lsls	r2, r2, #4
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	440b      	add	r3, r1
 8003c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c54:	e00a      	b.n	8003c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	4908      	ldr	r1, [pc, #32]	; (8003c7c <__NVIC_SetPriority+0x50>)
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	3b04      	subs	r3, #4
 8003c64:	0112      	lsls	r2, r2, #4
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	440b      	add	r3, r1
 8003c6a:	761a      	strb	r2, [r3, #24]
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000e100 	.word	0xe000e100
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b089      	sub	sp, #36	; 0x24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f1c3 0307 	rsb	r3, r3, #7
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	bf28      	it	cs
 8003c9e:	2304      	movcs	r3, #4
 8003ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2b06      	cmp	r3, #6
 8003ca8:	d902      	bls.n	8003cb0 <NVIC_EncodePriority+0x30>
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3b03      	subs	r3, #3
 8003cae:	e000      	b.n	8003cb2 <NVIC_EncodePriority+0x32>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43da      	mvns	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd2:	43d9      	mvns	r1, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd8:	4313      	orrs	r3, r2
         );
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3724      	adds	r7, #36	; 0x24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cf4:	d301      	bcc.n	8003cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e00f      	b.n	8003d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <SysTick_Config+0x40>)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d02:	210f      	movs	r1, #15
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295
 8003d08:	f7ff ff90 	bl	8003c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <SysTick_Config+0x40>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d12:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <SysTick_Config+0x40>)
 8003d14:	2207      	movs	r2, #7
 8003d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	e000e010 	.word	0xe000e010

08003d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ff2d 	bl	8003b90 <__NVIC_SetPriorityGrouping>
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	4603      	mov	r3, r0
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
 8003d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d50:	f7ff ff42 	bl	8003bd8 <__NVIC_GetPriorityGrouping>
 8003d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	6978      	ldr	r0, [r7, #20]
 8003d5c:	f7ff ff90 	bl	8003c80 <NVIC_EncodePriority>
 8003d60:	4602      	mov	r2, r0
 8003d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff5f 	bl	8003c2c <__NVIC_SetPriority>
}
 8003d6e:	bf00      	nop
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff ff35 	bl	8003bf4 <__NVIC_EnableIRQ>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff ffa2 	bl	8003ce4 <SysTick_Config>
 8003da0:	4603      	mov	r3, r0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e043      	b.n	8003e4a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_DMA_Init+0xa8>)
 8003dca:	4413      	add	r3, r2
 8003dcc:	4a22      	ldr	r2, [pc, #136]	; (8003e58 <HAL_DMA_Init+0xac>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	009a      	lsls	r2, r3, #2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <HAL_DMA_Init+0xb0>)
 8003dde:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003df6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003dfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	bffdfff8 	.word	0xbffdfff8
 8003e58:	cccccccd 	.word	0xcccccccd
 8003e5c:	40020000 	.word	0x40020000

08003e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_DMA_Start_IT+0x20>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e04a      	b.n	8003f16 <HAL_DMA_Start_IT+0xb6>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d13a      	bne.n	8003f08 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f9ae 	bl	8004218 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 020e 	orr.w	r2, r2, #14
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e00f      	b.n	8003ef6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0204 	bic.w	r2, r2, #4
 8003ee4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 020a 	orr.w	r2, r2, #10
 8003ef4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e005      	b.n	8003f14 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
 8003f12:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d005      	beq.n	8003f42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2204      	movs	r2, #4
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
 8003f40:	e051      	b.n	8003fe6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 020e 	bic.w	r2, r2, #14
 8003f50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a22      	ldr	r2, [pc, #136]	; (8003ff0 <HAL_DMA_Abort_IT+0xd0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d029      	beq.n	8003fc0 <HAL_DMA_Abort_IT+0xa0>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a20      	ldr	r2, [pc, #128]	; (8003ff4 <HAL_DMA_Abort_IT+0xd4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d022      	beq.n	8003fbc <HAL_DMA_Abort_IT+0x9c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1f      	ldr	r2, [pc, #124]	; (8003ff8 <HAL_DMA_Abort_IT+0xd8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d01a      	beq.n	8003fb6 <HAL_DMA_Abort_IT+0x96>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <HAL_DMA_Abort_IT+0xdc>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d012      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x90>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <HAL_DMA_Abort_IT+0xe0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00a      	beq.n	8003faa <HAL_DMA_Abort_IT+0x8a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1a      	ldr	r2, [pc, #104]	; (8004004 <HAL_DMA_Abort_IT+0xe4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d102      	bne.n	8003fa4 <HAL_DMA_Abort_IT+0x84>
 8003f9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003fa2:	e00e      	b.n	8003fc2 <HAL_DMA_Abort_IT+0xa2>
 8003fa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fa8:	e00b      	b.n	8003fc2 <HAL_DMA_Abort_IT+0xa2>
 8003faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fae:	e008      	b.n	8003fc2 <HAL_DMA_Abort_IT+0xa2>
 8003fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb4:	e005      	b.n	8003fc2 <HAL_DMA_Abort_IT+0xa2>
 8003fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fba:	e002      	b.n	8003fc2 <HAL_DMA_Abort_IT+0xa2>
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	e000      	b.n	8003fc2 <HAL_DMA_Abort_IT+0xa2>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	4a11      	ldr	r2, [pc, #68]	; (8004008 <HAL_DMA_Abort_IT+0xe8>)
 8003fc4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	4798      	blx	r3
    } 
  }
  return status;
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40020008 	.word	0x40020008
 8003ff4:	4002001c 	.word	0x4002001c
 8003ff8:	40020030 	.word	0x40020030
 8003ffc:	40020044 	.word	0x40020044
 8004000:	40020058 	.word	0x40020058
 8004004:	4002006c 	.word	0x4002006c
 8004008:	40020000 	.word	0x40020000

0800400c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	2204      	movs	r2, #4
 800402a:	409a      	lsls	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d04f      	beq.n	80040d4 <HAL_DMA_IRQHandler+0xc8>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d04a      	beq.n	80040d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d107      	bne.n	800405c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0204 	bic.w	r2, r2, #4
 800405a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a66      	ldr	r2, [pc, #408]	; (80041fc <HAL_DMA_IRQHandler+0x1f0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d029      	beq.n	80040ba <HAL_DMA_IRQHandler+0xae>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a65      	ldr	r2, [pc, #404]	; (8004200 <HAL_DMA_IRQHandler+0x1f4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d022      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xaa>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a63      	ldr	r2, [pc, #396]	; (8004204 <HAL_DMA_IRQHandler+0x1f8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01a      	beq.n	80040b0 <HAL_DMA_IRQHandler+0xa4>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a62      	ldr	r2, [pc, #392]	; (8004208 <HAL_DMA_IRQHandler+0x1fc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d012      	beq.n	80040aa <HAL_DMA_IRQHandler+0x9e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a60      	ldr	r2, [pc, #384]	; (800420c <HAL_DMA_IRQHandler+0x200>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00a      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x98>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a5f      	ldr	r2, [pc, #380]	; (8004210 <HAL_DMA_IRQHandler+0x204>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d102      	bne.n	800409e <HAL_DMA_IRQHandler+0x92>
 8004098:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800409c:	e00e      	b.n	80040bc <HAL_DMA_IRQHandler+0xb0>
 800409e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80040a2:	e00b      	b.n	80040bc <HAL_DMA_IRQHandler+0xb0>
 80040a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80040a8:	e008      	b.n	80040bc <HAL_DMA_IRQHandler+0xb0>
 80040aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040ae:	e005      	b.n	80040bc <HAL_DMA_IRQHandler+0xb0>
 80040b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040b4:	e002      	b.n	80040bc <HAL_DMA_IRQHandler+0xb0>
 80040b6:	2340      	movs	r3, #64	; 0x40
 80040b8:	e000      	b.n	80040bc <HAL_DMA_IRQHandler+0xb0>
 80040ba:	2304      	movs	r3, #4
 80040bc:	4a55      	ldr	r2, [pc, #340]	; (8004214 <HAL_DMA_IRQHandler+0x208>)
 80040be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8094 	beq.w	80041f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80040d2:	e08e      	b.n	80041f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	2202      	movs	r2, #2
 80040da:	409a      	lsls	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d056      	beq.n	8004192 <HAL_DMA_IRQHandler+0x186>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d051      	beq.n	8004192 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 020a 	bic.w	r2, r2, #10
 800410a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a38      	ldr	r2, [pc, #224]	; (80041fc <HAL_DMA_IRQHandler+0x1f0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d029      	beq.n	8004172 <HAL_DMA_IRQHandler+0x166>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a37      	ldr	r2, [pc, #220]	; (8004200 <HAL_DMA_IRQHandler+0x1f4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d022      	beq.n	800416e <HAL_DMA_IRQHandler+0x162>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a35      	ldr	r2, [pc, #212]	; (8004204 <HAL_DMA_IRQHandler+0x1f8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01a      	beq.n	8004168 <HAL_DMA_IRQHandler+0x15c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a34      	ldr	r2, [pc, #208]	; (8004208 <HAL_DMA_IRQHandler+0x1fc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d012      	beq.n	8004162 <HAL_DMA_IRQHandler+0x156>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a32      	ldr	r2, [pc, #200]	; (800420c <HAL_DMA_IRQHandler+0x200>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00a      	beq.n	800415c <HAL_DMA_IRQHandler+0x150>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a31      	ldr	r2, [pc, #196]	; (8004210 <HAL_DMA_IRQHandler+0x204>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d102      	bne.n	8004156 <HAL_DMA_IRQHandler+0x14a>
 8004150:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004154:	e00e      	b.n	8004174 <HAL_DMA_IRQHandler+0x168>
 8004156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800415a:	e00b      	b.n	8004174 <HAL_DMA_IRQHandler+0x168>
 800415c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004160:	e008      	b.n	8004174 <HAL_DMA_IRQHandler+0x168>
 8004162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004166:	e005      	b.n	8004174 <HAL_DMA_IRQHandler+0x168>
 8004168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800416c:	e002      	b.n	8004174 <HAL_DMA_IRQHandler+0x168>
 800416e:	2320      	movs	r3, #32
 8004170:	e000      	b.n	8004174 <HAL_DMA_IRQHandler+0x168>
 8004172:	2302      	movs	r3, #2
 8004174:	4a27      	ldr	r2, [pc, #156]	; (8004214 <HAL_DMA_IRQHandler+0x208>)
 8004176:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	d034      	beq.n	80041f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004190:	e02f      	b.n	80041f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	2208      	movs	r2, #8
 8004198:	409a      	lsls	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d028      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x1e8>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d023      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 020e 	bic.w	r2, r2, #14
 80041ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	2101      	movs	r1, #1
 80041c6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4798      	blx	r3
    }
  }
  return;
 80041f2:	bf00      	nop
 80041f4:	bf00      	nop
}
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40020008 	.word	0x40020008
 8004200:	4002001c 	.word	0x4002001c
 8004204:	40020030 	.word	0x40020030
 8004208:	40020044 	.word	0x40020044
 800420c:	40020058 	.word	0x40020058
 8004210:	4002006c 	.word	0x4002006c
 8004214:	40020000 	.word	0x40020000

08004218 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
 8004234:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b10      	cmp	r3, #16
 8004244:	d108      	bne.n	8004258 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004256:	e007      	b.n	8004268 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	60da      	str	r2, [r3, #12]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
	...

08004274 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004274:	b480      	push	{r7}
 8004276:	b08b      	sub	sp, #44	; 0x2c
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004282:	2300      	movs	r3, #0
 8004284:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004286:	e169      	b.n	800455c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004288:	2201      	movs	r2, #1
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	f040 8158 	bne.w	8004556 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4a9a      	ldr	r2, [pc, #616]	; (8004514 <HAL_GPIO_Init+0x2a0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d05e      	beq.n	800436e <HAL_GPIO_Init+0xfa>
 80042b0:	4a98      	ldr	r2, [pc, #608]	; (8004514 <HAL_GPIO_Init+0x2a0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d875      	bhi.n	80043a2 <HAL_GPIO_Init+0x12e>
 80042b6:	4a98      	ldr	r2, [pc, #608]	; (8004518 <HAL_GPIO_Init+0x2a4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d058      	beq.n	800436e <HAL_GPIO_Init+0xfa>
 80042bc:	4a96      	ldr	r2, [pc, #600]	; (8004518 <HAL_GPIO_Init+0x2a4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d86f      	bhi.n	80043a2 <HAL_GPIO_Init+0x12e>
 80042c2:	4a96      	ldr	r2, [pc, #600]	; (800451c <HAL_GPIO_Init+0x2a8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d052      	beq.n	800436e <HAL_GPIO_Init+0xfa>
 80042c8:	4a94      	ldr	r2, [pc, #592]	; (800451c <HAL_GPIO_Init+0x2a8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d869      	bhi.n	80043a2 <HAL_GPIO_Init+0x12e>
 80042ce:	4a94      	ldr	r2, [pc, #592]	; (8004520 <HAL_GPIO_Init+0x2ac>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d04c      	beq.n	800436e <HAL_GPIO_Init+0xfa>
 80042d4:	4a92      	ldr	r2, [pc, #584]	; (8004520 <HAL_GPIO_Init+0x2ac>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d863      	bhi.n	80043a2 <HAL_GPIO_Init+0x12e>
 80042da:	4a92      	ldr	r2, [pc, #584]	; (8004524 <HAL_GPIO_Init+0x2b0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d046      	beq.n	800436e <HAL_GPIO_Init+0xfa>
 80042e0:	4a90      	ldr	r2, [pc, #576]	; (8004524 <HAL_GPIO_Init+0x2b0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d85d      	bhi.n	80043a2 <HAL_GPIO_Init+0x12e>
 80042e6:	2b12      	cmp	r3, #18
 80042e8:	d82a      	bhi.n	8004340 <HAL_GPIO_Init+0xcc>
 80042ea:	2b12      	cmp	r3, #18
 80042ec:	d859      	bhi.n	80043a2 <HAL_GPIO_Init+0x12e>
 80042ee:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <HAL_GPIO_Init+0x80>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	0800436f 	.word	0x0800436f
 80042f8:	08004349 	.word	0x08004349
 80042fc:	0800435b 	.word	0x0800435b
 8004300:	0800439d 	.word	0x0800439d
 8004304:	080043a3 	.word	0x080043a3
 8004308:	080043a3 	.word	0x080043a3
 800430c:	080043a3 	.word	0x080043a3
 8004310:	080043a3 	.word	0x080043a3
 8004314:	080043a3 	.word	0x080043a3
 8004318:	080043a3 	.word	0x080043a3
 800431c:	080043a3 	.word	0x080043a3
 8004320:	080043a3 	.word	0x080043a3
 8004324:	080043a3 	.word	0x080043a3
 8004328:	080043a3 	.word	0x080043a3
 800432c:	080043a3 	.word	0x080043a3
 8004330:	080043a3 	.word	0x080043a3
 8004334:	080043a3 	.word	0x080043a3
 8004338:	08004351 	.word	0x08004351
 800433c:	08004365 	.word	0x08004365
 8004340:	4a79      	ldr	r2, [pc, #484]	; (8004528 <HAL_GPIO_Init+0x2b4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004346:	e02c      	b.n	80043a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	623b      	str	r3, [r7, #32]
          break;
 800434e:	e029      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	3304      	adds	r3, #4
 8004356:	623b      	str	r3, [r7, #32]
          break;
 8004358:	e024      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	3308      	adds	r3, #8
 8004360:	623b      	str	r3, [r7, #32]
          break;
 8004362:	e01f      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	330c      	adds	r3, #12
 800436a:	623b      	str	r3, [r7, #32]
          break;
 800436c:	e01a      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d102      	bne.n	800437c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004376:	2304      	movs	r3, #4
 8004378:	623b      	str	r3, [r7, #32]
          break;
 800437a:	e013      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d105      	bne.n	8004390 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004384:	2308      	movs	r3, #8
 8004386:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	611a      	str	r2, [r3, #16]
          break;
 800438e:	e009      	b.n	80043a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004390:	2308      	movs	r3, #8
 8004392:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	615a      	str	r2, [r3, #20]
          break;
 800439a:	e003      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800439c:	2300      	movs	r3, #0
 800439e:	623b      	str	r3, [r7, #32]
          break;
 80043a0:	e000      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          break;
 80043a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2bff      	cmp	r3, #255	; 0xff
 80043a8:	d801      	bhi.n	80043ae <HAL_GPIO_Init+0x13a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	e001      	b.n	80043b2 <HAL_GPIO_Init+0x13e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2bff      	cmp	r3, #255	; 0xff
 80043b8:	d802      	bhi.n	80043c0 <HAL_GPIO_Init+0x14c>
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	e002      	b.n	80043c6 <HAL_GPIO_Init+0x152>
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	3b08      	subs	r3, #8
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	210f      	movs	r1, #15
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	fa01 f303 	lsl.w	r3, r1, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	401a      	ands	r2, r3
 80043d8:	6a39      	ldr	r1, [r7, #32]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	fa01 f303 	lsl.w	r3, r1, r3
 80043e0:	431a      	orrs	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80b1 	beq.w	8004556 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80043f4:	4b4d      	ldr	r3, [pc, #308]	; (800452c <HAL_GPIO_Init+0x2b8>)
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	4a4c      	ldr	r2, [pc, #304]	; (800452c <HAL_GPIO_Init+0x2b8>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6193      	str	r3, [r2, #24]
 8004400:	4b4a      	ldr	r3, [pc, #296]	; (800452c <HAL_GPIO_Init+0x2b8>)
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800440c:	4a48      	ldr	r2, [pc, #288]	; (8004530 <HAL_GPIO_Init+0x2bc>)
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	089b      	lsrs	r3, r3, #2
 8004412:	3302      	adds	r3, #2
 8004414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004418:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	220f      	movs	r2, #15
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4013      	ands	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a40      	ldr	r2, [pc, #256]	; (8004534 <HAL_GPIO_Init+0x2c0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d013      	beq.n	8004460 <HAL_GPIO_Init+0x1ec>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a3f      	ldr	r2, [pc, #252]	; (8004538 <HAL_GPIO_Init+0x2c4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00d      	beq.n	800445c <HAL_GPIO_Init+0x1e8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a3e      	ldr	r2, [pc, #248]	; (800453c <HAL_GPIO_Init+0x2c8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d007      	beq.n	8004458 <HAL_GPIO_Init+0x1e4>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a3d      	ldr	r2, [pc, #244]	; (8004540 <HAL_GPIO_Init+0x2cc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <HAL_GPIO_Init+0x1e0>
 8004450:	2303      	movs	r3, #3
 8004452:	e006      	b.n	8004462 <HAL_GPIO_Init+0x1ee>
 8004454:	2304      	movs	r3, #4
 8004456:	e004      	b.n	8004462 <HAL_GPIO_Init+0x1ee>
 8004458:	2302      	movs	r3, #2
 800445a:	e002      	b.n	8004462 <HAL_GPIO_Init+0x1ee>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <HAL_GPIO_Init+0x1ee>
 8004460:	2300      	movs	r3, #0
 8004462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004464:	f002 0203 	and.w	r2, r2, #3
 8004468:	0092      	lsls	r2, r2, #2
 800446a:	4093      	lsls	r3, r2
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004472:	492f      	ldr	r1, [pc, #188]	; (8004530 <HAL_GPIO_Init+0x2bc>)
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	089b      	lsrs	r3, r3, #2
 8004478:	3302      	adds	r3, #2
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d006      	beq.n	800449a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800448c:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	492c      	ldr	r1, [pc, #176]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	4313      	orrs	r3, r2
 8004496:	600b      	str	r3, [r1, #0]
 8004498:	e006      	b.n	80044a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800449a:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	43db      	mvns	r3, r3
 80044a2:	4928      	ldr	r1, [pc, #160]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d006      	beq.n	80044c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80044b4:	4b23      	ldr	r3, [pc, #140]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	4922      	ldr	r1, [pc, #136]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	4313      	orrs	r3, r2
 80044be:	604b      	str	r3, [r1, #4]
 80044c0:	e006      	b.n	80044d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80044c2:	4b20      	ldr	r3, [pc, #128]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	43db      	mvns	r3, r3
 80044ca:	491e      	ldr	r1, [pc, #120]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d006      	beq.n	80044ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80044dc:	4b19      	ldr	r3, [pc, #100]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	4918      	ldr	r1, [pc, #96]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	608b      	str	r3, [r1, #8]
 80044e8:	e006      	b.n	80044f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80044ea:	4b16      	ldr	r3, [pc, #88]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	43db      	mvns	r3, r3
 80044f2:	4914      	ldr	r1, [pc, #80]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d021      	beq.n	8004548 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	490e      	ldr	r1, [pc, #56]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	4313      	orrs	r3, r2
 800450e:	60cb      	str	r3, [r1, #12]
 8004510:	e021      	b.n	8004556 <HAL_GPIO_Init+0x2e2>
 8004512:	bf00      	nop
 8004514:	10320000 	.word	0x10320000
 8004518:	10310000 	.word	0x10310000
 800451c:	10220000 	.word	0x10220000
 8004520:	10210000 	.word	0x10210000
 8004524:	10120000 	.word	0x10120000
 8004528:	10110000 	.word	0x10110000
 800452c:	40021000 	.word	0x40021000
 8004530:	40010000 	.word	0x40010000
 8004534:	40010800 	.word	0x40010800
 8004538:	40010c00 	.word	0x40010c00
 800453c:	40011000 	.word	0x40011000
 8004540:	40011400 	.word	0x40011400
 8004544:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <HAL_GPIO_Init+0x304>)
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	43db      	mvns	r3, r3
 8004550:	4909      	ldr	r1, [pc, #36]	; (8004578 <HAL_GPIO_Init+0x304>)
 8004552:	4013      	ands	r3, r2
 8004554:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	3301      	adds	r3, #1
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	fa22 f303 	lsr.w	r3, r2, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	f47f ae8e 	bne.w	8004288 <HAL_GPIO_Init+0x14>
  }
}
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	372c      	adds	r7, #44	; 0x2c
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr
 8004578:	40010400 	.word	0x40010400

0800457c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	887b      	ldrh	r3, [r7, #2]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004594:	2301      	movs	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
 8004598:	e001      	b.n	800459e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800459e:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr

080045aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	807b      	strh	r3, [r7, #2]
 80045b6:	4613      	mov	r3, r2
 80045b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045ba:	787b      	ldrb	r3, [r7, #1]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045c0:	887a      	ldrh	r2, [r7, #2]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80045c6:	e003      	b.n	80045d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045c8:	887b      	ldrh	r3, [r7, #2]
 80045ca:	041a      	lsls	r2, r3, #16
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	611a      	str	r2, [r3, #16]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045da:	b480      	push	{r7}
 80045dc:	b085      	sub	sp, #20
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045ec:	887a      	ldrh	r2, [r7, #2]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4013      	ands	r3, r2
 80045f2:	041a      	lsls	r2, r3, #16
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	43d9      	mvns	r1, r3
 80045f8:	887b      	ldrh	r3, [r7, #2]
 80045fa:	400b      	ands	r3, r1
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	611a      	str	r2, [r3, #16]
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800460c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460e:	b08b      	sub	sp, #44	; 0x2c
 8004610:	af06      	add	r7, sp, #24
 8004612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e0fd      	b.n	800481a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f008 f8c2 	bl	800c7bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2203      	movs	r2, #3
 800463c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f004 f8f1 	bl	800882c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	687e      	ldr	r6, [r7, #4]
 8004652:	466d      	mov	r5, sp
 8004654:	f106 0410 	add.w	r4, r6, #16
 8004658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800465a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	1d33      	adds	r3, r6, #4
 8004662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004664:	6838      	ldr	r0, [r7, #0]
 8004666:	f004 f8bb 	bl	80087e0 <USB_CoreInit>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e0ce      	b.n	800481a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f004 f8ec 	bl	8008860 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004688:	2300      	movs	r3, #0
 800468a:	73fb      	strb	r3, [r7, #15]
 800468c:	e04c      	b.n	8004728 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	440b      	add	r3, r1
 800469e:	3301      	adds	r3, #1
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	440b      	add	r3, r1
 80046b4:	7bfa      	ldrb	r2, [r7, #15]
 80046b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046b8:	7bfa      	ldrb	r2, [r7, #15]
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	b298      	uxth	r0, r3
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	440b      	add	r3, r1
 80046ca:	3336      	adds	r3, #54	; 0x36
 80046cc:	4602      	mov	r2, r0
 80046ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	440b      	add	r3, r1
 80046e0:	3303      	adds	r3, #3
 80046e2:	2200      	movs	r2, #0
 80046e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046e6:	7bfa      	ldrb	r2, [r7, #15]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	440b      	add	r3, r1
 80046f4:	3338      	adds	r3, #56	; 0x38
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	440b      	add	r3, r1
 8004708:	333c      	adds	r3, #60	; 0x3c
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800470e:	7bfa      	ldrb	r2, [r7, #15]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	440b      	add	r3, r1
 800471c:	3340      	adds	r3, #64	; 0x40
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	3301      	adds	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
 8004728:	7bfa      	ldrb	r2, [r7, #15]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	429a      	cmp	r2, r3
 8004730:	d3ad      	bcc.n	800468e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004732:	2300      	movs	r3, #0
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e044      	b.n	80047c2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004738:	7bfa      	ldrb	r2, [r7, #15]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	440b      	add	r3, r1
 8004746:	f203 1369 	addw	r3, r3, #361	; 0x169
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800474e:	7bfa      	ldrb	r2, [r7, #15]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	440b      	add	r3, r1
 800475c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004760:	7bfa      	ldrb	r2, [r7, #15]
 8004762:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004764:	7bfa      	ldrb	r2, [r7, #15]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	440b      	add	r3, r1
 8004772:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004776:	2200      	movs	r2, #0
 8004778:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800477a:	7bfa      	ldrb	r2, [r7, #15]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	440b      	add	r3, r1
 8004788:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004790:	7bfa      	ldrb	r2, [r7, #15]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	440b      	add	r3, r1
 800479e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047a6:	7bfa      	ldrb	r2, [r7, #15]
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	440b      	add	r3, r1
 80047b4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	3301      	adds	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
 80047c2:	7bfa      	ldrb	r2, [r7, #15]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d3b5      	bcc.n	8004738 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	687e      	ldr	r6, [r7, #4]
 80047d4:	466d      	mov	r5, sp
 80047d6:	f106 0410 	add.w	r4, r6, #16
 80047da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	602b      	str	r3, [r5, #0]
 80047e2:	1d33      	adds	r3, r6, #4
 80047e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047e6:	6838      	ldr	r0, [r7, #0]
 80047e8:	f004 f846 	bl	8008878 <USB_DevInit>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e00d      	b.n	800481a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f006 f9b7 	bl	800ab86 <USB_DevDisconnect>

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004822 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_PCD_Start+0x16>
 8004834:	2302      	movs	r3, #2
 8004836:	e016      	b.n	8004866 <HAL_PCD_Start+0x44>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f003 ffdb 	bl	8008800 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800484a:	2101      	movs	r1, #1
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f008 fa28 	bl	800cca2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f006 f98b 	bl	800ab72 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b088      	sub	sp, #32
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f006 f98d 	bl	800ab9a <USB_ReadInterrupts>
 8004880:	4603      	mov	r3, r0
 8004882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488a:	d102      	bne.n	8004892 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fb61 	bl	8004f54 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f006 f97f 	bl	800ab9a <USB_ReadInterrupts>
 800489c:	4603      	mov	r3, r0
 800489e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a6:	d112      	bne.n	80048ce <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ba:	b292      	uxth	r2, r2
 80048bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f007 fff6 	bl	800c8b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80048c6:	2100      	movs	r1, #0
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f925 	bl	8004b18 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f006 f961 	bl	800ab9a <USB_ReadInterrupts>
 80048d8:	4603      	mov	r3, r0
 80048da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e2:	d10b      	bne.n	80048fc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048f6:	b292      	uxth	r2, r2
 80048f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f006 f94a 	bl	800ab9a <USB_ReadInterrupts>
 8004906:	4603      	mov	r3, r0
 8004908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800490c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004910:	d10b      	bne.n	800492a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800491a:	b29a      	uxth	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004924:	b292      	uxth	r2, r2
 8004926:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f006 f933 	bl	800ab9a <USB_ReadInterrupts>
 8004934:	4603      	mov	r3, r0
 8004936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800493a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493e:	d126      	bne.n	800498e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004948:	b29a      	uxth	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0204 	bic.w	r2, r2, #4
 8004952:	b292      	uxth	r2, r2
 8004954:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004960:	b29a      	uxth	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0208 	bic.w	r2, r2, #8
 800496a:	b292      	uxth	r2, r2
 800496c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f007 ffd7 	bl	800c924 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800497e:	b29a      	uxth	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004988:	b292      	uxth	r2, r2
 800498a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f006 f901 	bl	800ab9a <USB_ReadInterrupts>
 8004998:	4603      	mov	r3, r0
 800499a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a2:	f040 8084 	bne.w	8004aae <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80049a6:	2300      	movs	r3, #0
 80049a8:	77fb      	strb	r3, [r7, #31]
 80049aa:	e011      	b.n	80049d0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	7ffb      	ldrb	r3, [r7, #31]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	441a      	add	r2, r3
 80049b8:	7ffb      	ldrb	r3, [r7, #31]
 80049ba:	8812      	ldrh	r2, [r2, #0]
 80049bc:	b292      	uxth	r2, r2
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	f107 0120 	add.w	r1, r7, #32
 80049c4:	440b      	add	r3, r1
 80049c6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80049ca:	7ffb      	ldrb	r3, [r7, #31]
 80049cc:	3301      	adds	r3, #1
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	7ffb      	ldrb	r3, [r7, #31]
 80049d2:	2b07      	cmp	r3, #7
 80049d4:	d9ea      	bls.n	80049ac <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049de:	b29a      	uxth	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0201 	orr.w	r2, r2, #1
 80049e8:	b292      	uxth	r2, r2
 80049ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0201 	bic.w	r2, r2, #1
 8004a00:	b292      	uxth	r2, r2
 8004a02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004a06:	bf00      	nop
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f6      	beq.n	8004a08 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2c:	b292      	uxth	r2, r2
 8004a2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004a32:	2300      	movs	r3, #0
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e010      	b.n	8004a5a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004a38:	7ffb      	ldrb	r3, [r7, #31]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	4611      	mov	r1, r2
 8004a40:	7ffa      	ldrb	r2, [r7, #31]
 8004a42:	0092      	lsls	r2, r2, #2
 8004a44:	440a      	add	r2, r1
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	f107 0120 	add.w	r1, r7, #32
 8004a4c:	440b      	add	r3, r1
 8004a4e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004a52:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004a54:	7ffb      	ldrb	r3, [r7, #31]
 8004a56:	3301      	adds	r3, #1
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	7ffb      	ldrb	r3, [r7, #31]
 8004a5c:	2b07      	cmp	r3, #7
 8004a5e:	d9eb      	bls.n	8004a38 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0208 	orr.w	r2, r2, #8
 8004a72:	b292      	uxth	r2, r2
 8004a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a8a:	b292      	uxth	r2, r2
 8004a8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0204 	orr.w	r2, r2, #4
 8004aa2:	b292      	uxth	r2, r2
 8004aa4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f007 ff21 	bl	800c8f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f006 f871 	bl	800ab9a <USB_ReadInterrupts>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac2:	d10e      	bne.n	8004ae2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ad6:	b292      	uxth	r2, r2
 8004ad8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f007 feda 	bl	800c896 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f006 f857 	bl	800ab9a <USB_ReadInterrupts>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af6:	d10b      	bne.n	8004b10 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b0a:	b292      	uxth	r2, r2
 8004b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004b10:	bf00      	nop
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_PCD_SetAddress+0x1a>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e013      	b.n	8004b5a <HAL_PCD_SetAddress+0x42>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	78fa      	ldrb	r2, [r7, #3]
 8004b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f005 fffe 	bl	800ab4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	4608      	mov	r0, r1
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4603      	mov	r3, r0
 8004b72:	70fb      	strb	r3, [r7, #3]
 8004b74:	460b      	mov	r3, r1
 8004b76:	803b      	strh	r3, [r7, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	da0e      	bge.n	8004ba6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	705a      	strb	r2, [r3, #1]
 8004ba4:	e00e      	b.n	8004bc4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	f003 0207 	and.w	r2, r3, #7
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	4413      	add	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004bd0:	883a      	ldrh	r2, [r7, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	78ba      	ldrb	r2, [r7, #2]
 8004bda:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d004      	beq.n	8004bee <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bee:	78bb      	ldrb	r3, [r7, #2]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d102      	bne.n	8004bfa <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_PCD_EP_Open+0xa6>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e00e      	b.n	8004c26 <HAL_PCD_EP_Open+0xc4>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68f9      	ldr	r1, [r7, #12]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f003 fe4e 	bl	80088b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004c24:	7afb      	ldrb	r3, [r7, #11]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	da0e      	bge.n	8004c60 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	705a      	strb	r2, [r3, #1]
 8004c5e:	e00e      	b.n	8004c7e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	f003 0207 	and.w	r2, r3, #7
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4413      	add	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c7e:	78fb      	ldrb	r3, [r7, #3]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_PCD_EP_Close+0x6a>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e00e      	b.n	8004cb6 <HAL_PCD_EP_Close+0x88>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68f9      	ldr	r1, [r7, #12]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f004 f970 	bl	8008f8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b086      	sub	sp, #24
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cce:	7afb      	ldrb	r3, [r7, #11]
 8004cd0:	f003 0207 	and.w	r2, r3, #7
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cfe:	7afb      	ldrb	r3, [r7, #11]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d0a:	7afb      	ldrb	r3, [r7, #11]
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6979      	ldr	r1, [r7, #20]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f004 fb22 	bl	8009364 <USB_EPStartXfer>
 8004d20:	e005      	b.n	8004d2e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6979      	ldr	r1, [r7, #20]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f004 fb1b 	bl	8009364 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	f003 0207 	and.w	r2, r3, #7
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	440b      	add	r3, r1
 8004d56:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004d5a:	681b      	ldr	r3, [r3, #0]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr

08004d66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b086      	sub	sp, #24
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	460b      	mov	r3, r1
 8004d74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d76:	7afb      	ldrb	r3, [r7, #11]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2200      	movs	r2, #0
 8004daa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2201      	movs	r2, #1
 8004db0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004db2:	7afb      	ldrb	r3, [r7, #11]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dbe:	7afb      	ldrb	r3, [r7, #11]
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6979      	ldr	r1, [r7, #20]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f004 fac8 	bl	8009364 <USB_EPStartXfer>
 8004dd4:	e005      	b.n	8004de2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6979      	ldr	r1, [r7, #20]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f004 fac1 	bl	8009364 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	f003 0207 	and.w	r2, r3, #7
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d901      	bls.n	8004e0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e04c      	b.n	8004ea4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da0e      	bge.n	8004e30 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	4413      	add	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	705a      	strb	r2, [r3, #1]
 8004e2e:	e00c      	b.n	8004e4a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e30:	78fa      	ldrb	r2, [r7, #3]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4413      	add	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_PCD_EP_SetStall+0x7e>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e01c      	b.n	8004ea4 <HAL_PCD_EP_SetStall+0xb8>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68f9      	ldr	r1, [r7, #12]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f005 fd6a 	bl	800a952 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d108      	bne.n	8004e9a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f005 fe8f 	bl	800abb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004eb8:	78fb      	ldrb	r3, [r7, #3]
 8004eba:	f003 020f 	and.w	r2, r3, #15
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d901      	bls.n	8004eca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e040      	b.n	8004f4c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004eca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	da0e      	bge.n	8004ef0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ed2:	78fb      	ldrb	r3, [r7, #3]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	705a      	strb	r2, [r3, #1]
 8004eee:	e00e      	b.n	8004f0e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	f003 0207 	and.w	r2, r3, #7
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	4413      	add	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_PCD_EP_ClrStall+0x82>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e00e      	b.n	8004f4c <HAL_PCD_EP_ClrStall+0xa0>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68f9      	ldr	r1, [r7, #12]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f005 fd58 	bl	800a9f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08e      	sub	sp, #56	; 0x38
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f5c:	e2ec      	b.n	8005538 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f66:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004f68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004f74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f040 8161 	bne.w	8005240 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004f7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d152      	bne.n	800502e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f98:	81fb      	strh	r3, [r7, #14]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	89fb      	ldrh	r3, [r7, #14]
 8004fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3328      	adds	r3, #40	; 0x28
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6812      	ldr	r2, [r2, #0]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	695a      	ldr	r2, [r3, #20]
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	441a      	add	r2, r3
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004fec:	2100      	movs	r1, #0
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f007 fc37 	bl	800c862 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 829b 	beq.w	8005538 <PCD_EP_ISR_Handler+0x5e4>
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f040 8296 	bne.w	8005538 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005018:	b2da      	uxtb	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	b292      	uxth	r2, r2
 8005020:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800502c:	e284      	b.n	8005538 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800503e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005044:	2b00      	cmp	r3, #0
 8005046:	d034      	beq.n	80050b2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005050:	b29b      	uxth	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	4413      	add	r3, r2
 800505c:	3306      	adds	r3, #6
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005086:	b29b      	uxth	r3, r3
 8005088:	f005 fde6 	bl	800ac58 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	b29a      	uxth	r2, r3
 8005094:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005098:	4013      	ands	r3, r2
 800509a:	823b      	strh	r3, [r7, #16]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	8a3a      	ldrh	r2, [r7, #16]
 80050a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050a6:	b292      	uxth	r2, r2
 80050a8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f007 fbac 	bl	800c808 <HAL_PCD_SetupStageCallback>
 80050b0:	e242      	b.n	8005538 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80050b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f280 823e 	bge.w	8005538 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80050c8:	4013      	ands	r3, r2
 80050ca:	83bb      	strh	r3, [r7, #28]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	8bba      	ldrh	r2, [r7, #28]
 80050d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050d6:	b292      	uxth	r2, r2
 80050d8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4413      	add	r3, r2
 80050ee:	3306      	adds	r3, #6
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d019      	beq.n	8005142 <PCD_EP_ISR_Handler+0x1ee>
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d015      	beq.n	8005142 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	6959      	ldr	r1, [r3, #20]
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005126:	b29b      	uxth	r3, r3
 8005128:	f005 fd96 	bl	800ac58 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	441a      	add	r2, r3
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800513a:	2100      	movs	r1, #0
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f007 fb75 	bl	800c82c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800514e:	2b00      	cmp	r3, #0
 8005150:	f040 81f2 	bne.w	8005538 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005162:	b29b      	uxth	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	4413      	add	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d112      	bne.n	80051a2 <PCD_EP_ISR_Handler+0x24e>
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005186:	b29a      	uxth	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	801a      	strh	r2, [r3, #0]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519a:	b29a      	uxth	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	801a      	strh	r2, [r3, #0]
 80051a0:	e02f      	b.n	8005202 <PCD_EP_ISR_Handler+0x2ae>
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b3e      	cmp	r3, #62	; 0x3e
 80051a8:	d813      	bhi.n	80051d2 <PCD_EP_ISR_Handler+0x27e>
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	633b      	str	r3, [r7, #48]	; 0x30
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <PCD_EP_ISR_Handler+0x270>
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	3301      	adds	r3, #1
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	029b      	lsls	r3, r3, #10
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	801a      	strh	r2, [r3, #0]
 80051d0:	e017      	b.n	8005202 <PCD_EP_ISR_Handler+0x2ae>
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	633b      	str	r3, [r7, #48]	; 0x30
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <PCD_EP_ISR_Handler+0x298>
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	3b01      	subs	r3, #1
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	029b      	lsls	r3, r3, #10
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005212:	827b      	strh	r3, [r7, #18]
 8005214:	8a7b      	ldrh	r3, [r7, #18]
 8005216:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800521a:	827b      	strh	r3, [r7, #18]
 800521c:	8a7b      	ldrh	r3, [r7, #18]
 800521e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005222:	827b      	strh	r3, [r7, #18]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	8a7b      	ldrh	r3, [r7, #18]
 800522a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800522e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523a:	b29b      	uxth	r3, r3
 800523c:	8013      	strh	r3, [r2, #0]
 800523e:	e17b      	b.n	8005538 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005252:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005256:	2b00      	cmp	r3, #0
 8005258:	f280 80ea 	bge.w	8005430 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	461a      	mov	r2, r3
 8005262:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	b29a      	uxth	r2, r3
 800526e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005272:	4013      	ands	r3, r2
 8005274:	853b      	strh	r3, [r7, #40]	; 0x28
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005286:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800528a:	b292      	uxth	r2, r2
 800528c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800528e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	4413      	add	r3, r2
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	7b1b      	ldrb	r3, [r3, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d122      	bne.n	80052f2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	4413      	add	r3, r2
 80052c0:	3306      	adds	r3, #6
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052d4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80052d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8087 	beq.w	80053ec <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	6959      	ldr	r1, [r3, #20]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	88da      	ldrh	r2, [r3, #6]
 80052ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052ec:	f005 fcb4 	bl	800ac58 <USB_ReadPMA>
 80052f0:	e07c      	b.n	80053ec <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	78db      	ldrb	r3, [r3, #3]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d108      	bne.n	800530c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80052fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80052fc:	461a      	mov	r2, r3
 80052fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f927 	bl	8005554 <HAL_PCD_EP_DB_Receive>
 8005306:	4603      	mov	r3, r0
 8005308:	86fb      	strh	r3, [r7, #54]	; 0x36
 800530a:	e06f      	b.n	80053ec <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	847b      	strh	r3, [r7, #34]	; 0x22
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	441a      	add	r2, r3
 8005336:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005344:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005348:	b29b      	uxth	r3, r3
 800534a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d021      	beq.n	80053aa <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536e:	b29b      	uxth	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4413      	add	r3, r2
 800537a:	3302      	adds	r3, #2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800538e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005390:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005392:	2b00      	cmp	r3, #0
 8005394:	d02a      	beq.n	80053ec <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	6959      	ldr	r1, [r3, #20]
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	891a      	ldrh	r2, [r3, #8]
 80053a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053a4:	f005 fc58 	bl	800ac58 <USB_ReadPMA>
 80053a8:	e020      	b.n	80053ec <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4413      	add	r3, r2
 80053be:	3306      	adds	r3, #6
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6812      	ldr	r2, [r2, #0]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053d2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80053d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	6959      	ldr	r1, [r3, #20]
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	895a      	ldrh	r2, [r3, #10]
 80053e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053e8:	f005 fc36 	bl	800ac58 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053f2:	441a      	add	r2, r3
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	695a      	ldr	r2, [r3, #20]
 80053fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053fe:	441a      	add	r2, r3
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d004      	beq.n	8005416 <PCD_EP_ISR_Handler+0x4c2>
 800540c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	429a      	cmp	r2, r3
 8005414:	d206      	bcs.n	8005424 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f007 fa05 	bl	800c82c <HAL_PCD_DataOutStageCallback>
 8005422:	e005      	b.n	8005430 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800542a:	4618      	mov	r0, r3
 800542c:	f003 ff9a 	bl	8009364 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005430:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	2b00      	cmp	r3, #0
 8005438:	d07e      	beq.n	8005538 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800543a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	4413      	add	r3, r2
 800544c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005468:	843b      	strh	r3, [r7, #32]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	441a      	add	r2, r3
 8005478:	8c3b      	ldrh	r3, [r7, #32]
 800547a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800547e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005482:	b29b      	uxth	r3, r3
 8005484:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	78db      	ldrb	r3, [r3, #3]
 800548a:	2b03      	cmp	r3, #3
 800548c:	d00c      	beq.n	80054a8 <PCD_EP_ISR_Handler+0x554>
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	78db      	ldrb	r3, [r3, #3]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800549a:	2b02      	cmp	r3, #2
 800549c:	d146      	bne.n	800552c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800549e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d141      	bne.n	800552c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	4413      	add	r3, r2
 80054bc:	3302      	adds	r3, #2
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054d0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	8bfb      	ldrh	r3, [r7, #30]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d906      	bls.n	80054ea <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	8bfb      	ldrh	r3, [r7, #30]
 80054e2:	1ad2      	subs	r2, r2, r3
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	619a      	str	r2, [r3, #24]
 80054e8:	e002      	b.n	80054f0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	2200      	movs	r2, #0
 80054ee:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d106      	bne.n	8005506 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f007 f9af 	bl	800c862 <HAL_PCD_DataInStageCallback>
 8005504:	e018      	b.n	8005538 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	8bfb      	ldrh	r3, [r7, #30]
 800550c:	441a      	add	r2, r3
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	69da      	ldr	r2, [r3, #28]
 8005516:	8bfb      	ldrh	r3, [r7, #30]
 8005518:	441a      	add	r2, r3
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005524:	4618      	mov	r0, r3
 8005526:	f003 ff1d 	bl	8009364 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800552a:	e005      	b.n	8005538 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800552c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800552e:	461a      	mov	r2, r3
 8005530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f91b 	bl	800576e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005540:	b29b      	uxth	r3, r3
 8005542:	b21b      	sxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	f6ff ad0a 	blt.w	8004f5e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3738      	adds	r7, #56	; 0x38
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d07e      	beq.n	800566a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005574:	b29b      	uxth	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	4413      	add	r3, r2
 8005580:	3302      	adds	r3, #2
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	6812      	ldr	r2, [r2, #0]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005594:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	8b7b      	ldrh	r3, [r7, #26]
 800559c:	429a      	cmp	r2, r3
 800559e:	d306      	bcc.n	80055ae <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	699a      	ldr	r2, [r3, #24]
 80055a4:	8b7b      	ldrh	r3, [r7, #26]
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	619a      	str	r2, [r3, #24]
 80055ac:	e002      	b.n	80055b4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2200      	movs	r2, #0
 80055b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d123      	bne.n	8005604 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d6:	833b      	strh	r3, [r7, #24]
 80055d8:	8b3b      	ldrh	r3, [r7, #24]
 80055da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055de:	833b      	strh	r3, [r7, #24]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	441a      	add	r2, r3
 80055ee:	8b3b      	ldrh	r3, [r7, #24]
 80055f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005600:	b29b      	uxth	r3, r3
 8005602:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005604:	88fb      	ldrh	r3, [r7, #6]
 8005606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01f      	beq.n	800564e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005628:	82fb      	strh	r3, [r7, #22]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	441a      	add	r2, r3
 8005638:	8afb      	ldrh	r3, [r7, #22]
 800563a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005646:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800564a:	b29b      	uxth	r3, r3
 800564c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800564e:	8b7b      	ldrh	r3, [r7, #26]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8087 	beq.w	8005764 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	6959      	ldr	r1, [r3, #20]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	891a      	ldrh	r2, [r3, #8]
 8005662:	8b7b      	ldrh	r3, [r7, #26]
 8005664:	f005 faf8 	bl	800ac58 <USB_ReadPMA>
 8005668:	e07c      	b.n	8005764 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005672:	b29b      	uxth	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	4413      	add	r3, r2
 800567e:	3306      	adds	r3, #6
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005692:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	699a      	ldr	r2, [r3, #24]
 8005698:	8b7b      	ldrh	r3, [r7, #26]
 800569a:	429a      	cmp	r2, r3
 800569c:	d306      	bcc.n	80056ac <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	8b7b      	ldrh	r3, [r7, #26]
 80056a4:	1ad2      	subs	r2, r2, r3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	619a      	str	r2, [r3, #24]
 80056aa:	e002      	b.n	80056b2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d123      	bne.n	8005702 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d4:	83fb      	strh	r3, [r7, #30]
 80056d6:	8bfb      	ldrh	r3, [r7, #30]
 80056d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056dc:	83fb      	strh	r3, [r7, #30]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	441a      	add	r2, r3
 80056ec:	8bfb      	ldrh	r3, [r7, #30]
 80056ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	b29b      	uxth	r3, r3
 8005700:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11f      	bne.n	800574c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	83bb      	strh	r3, [r7, #28]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	441a      	add	r2, r3
 8005736:	8bbb      	ldrh	r3, [r7, #28]
 8005738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005744:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005748:	b29b      	uxth	r3, r3
 800574a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800574c:	8b7b      	ldrh	r3, [r7, #26]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	6959      	ldr	r1, [r3, #20]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	895a      	ldrh	r2, [r3, #10]
 800575e:	8b7b      	ldrh	r3, [r7, #26]
 8005760:	f005 fa7a 	bl	800ac58 <USB_ReadPMA>
    }
  }

  return count;
 8005764:	8b7b      	ldrh	r3, [r7, #26]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b0a2      	sub	sp, #136	; 0x88
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	4613      	mov	r3, r2
 800577a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800577c:	88fb      	ldrh	r3, [r7, #6]
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 81c7 	beq.w	8005b16 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005790:	b29b      	uxth	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4413      	add	r3, r2
 800579c:	3302      	adds	r3, #2
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057bc:	429a      	cmp	r2, r3
 80057be:	d907      	bls.n	80057d0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	699a      	ldr	r2, [r3, #24]
 80057c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057c8:	1ad2      	subs	r2, r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	619a      	str	r2, [r3, #24]
 80057ce:	e002      	b.n	80057d6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2200      	movs	r2, #0
 80057d4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f040 80b9 	bne.w	8005952 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	785b      	ldrb	r3, [r3, #1]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d126      	bne.n	8005836 <HAL_PCD_EP_DB_Transmit+0xc8>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	4413      	add	r3, r2
 80057fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	011a      	lsls	r2, r3, #4
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	4413      	add	r3, r2
 800580a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800581a:	b29a      	uxth	r2, r3
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	801a      	strh	r2, [r3, #0]
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800582e:	b29a      	uxth	r2, r3
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	e01a      	b.n	800586c <HAL_PCD_EP_DB_Transmit+0xfe>
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d116      	bne.n	800586c <HAL_PCD_EP_DB_Transmit+0xfe>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	633b      	str	r3, [r7, #48]	; 0x30
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800584c:	b29b      	uxth	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	4413      	add	r3, r2
 8005854:	633b      	str	r3, [r7, #48]	; 0x30
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	011a      	lsls	r2, r3, #4
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	4413      	add	r3, r2
 8005860:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005868:	2200      	movs	r2, #0
 800586a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	623b      	str	r3, [r7, #32]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d126      	bne.n	80058c8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	61bb      	str	r3, [r7, #24]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005888:	b29b      	uxth	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	4413      	add	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	011a      	lsls	r2, r3, #4
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	4413      	add	r3, r2
 800589c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	801a      	strh	r2, [r3, #0]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	e017      	b.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d113      	bne.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d8:	b29b      	uxth	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	4413      	add	r3, r2
 80058e0:	623b      	str	r3, [r7, #32]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	011a      	lsls	r2, r3, #4
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	4413      	add	r3, r2
 80058ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058f0:	61fb      	str	r3, [r7, #28]
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	2200      	movs	r2, #0
 80058f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	4619      	mov	r1, r3
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f006 ffaf 	bl	800c862 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 82d4 	beq.w	8005eb8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592a:	827b      	strh	r3, [r7, #18]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	441a      	add	r2, r3
 800593a:	8a7b      	ldrh	r3, [r7, #18]
 800593c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594c:	b29b      	uxth	r3, r3
 800594e:	8013      	strh	r3, [r2, #0]
 8005950:	e2b2      	b.n	8005eb8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d021      	beq.n	80059a0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	441a      	add	r2, r3
 8005988:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800598c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005994:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599c:	b29b      	uxth	r3, r3
 800599e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	f040 8286 	bne.w	8005eb8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	695a      	ldr	r2, [r3, #20]
 80059b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059b4:	441a      	add	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	69da      	ldr	r2, [r3, #28]
 80059be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059c2:	441a      	add	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6a1a      	ldr	r2, [r3, #32]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d309      	bcc.n	80059e8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6a1a      	ldr	r2, [r3, #32]
 80059de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e0:	1ad2      	subs	r2, r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	621a      	str	r2, [r3, #32]
 80059e6:	e015      	b.n	8005a14 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d107      	bne.n	8005a00 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80059f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80059fe:	e009      	b.n	8005a14 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2200      	movs	r2, #0
 8005a12:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d155      	bne.n	8005ac8 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	4413      	add	r3, r2
 8005a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	011a      	lsls	r2, r3, #4
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a42:	637b      	str	r3, [r7, #52]	; 0x34
 8005a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d112      	bne.n	8005a70 <HAL_PCD_EP_DB_Transmit+0x302>
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a58:	801a      	strh	r2, [r3, #0]
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	e047      	b.n	8005b00 <HAL_PCD_EP_DB_Transmit+0x392>
 8005a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a72:	2b3e      	cmp	r3, #62	; 0x3e
 8005a74:	d811      	bhi.n	8005a9a <HAL_PCD_EP_DB_Transmit+0x32c>
 8005a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_PCD_EP_DB_Transmit+0x31e>
 8005a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a88:	3301      	adds	r3, #1
 8005a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	029b      	lsls	r3, r3, #10
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a96:	801a      	strh	r2, [r3, #0]
 8005a98:	e032      	b.n	8005b00 <HAL_PCD_EP_DB_Transmit+0x392>
 8005a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <HAL_PCD_EP_DB_Transmit+0x342>
 8005aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aac:	3b01      	subs	r3, #1
 8005aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	029b      	lsls	r3, r3, #10
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac4:	801a      	strh	r2, [r3, #0]
 8005ac6:	e01b      	b.n	8005b00 <HAL_PCD_EP_DB_Transmit+0x392>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d117      	bne.n	8005b00 <HAL_PCD_EP_DB_Transmit+0x392>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae4:	4413      	add	r3, r2
 8005ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	011a      	lsls	r2, r3, #4
 8005aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af0:	4413      	add	r3, r2
 8005af2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6959      	ldr	r1, [r3, #20]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	891a      	ldrh	r2, [r3, #8]
 8005b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f005 f85d 	bl	800abce <USB_WritePMA>
 8005b14:	e1d0      	b.n	8005eb8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	461a      	mov	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4413      	add	r3, r2
 8005b2a:	3306      	adds	r3, #6
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d307      	bcc.n	8005b5e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b56:	1ad2      	subs	r2, r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	619a      	str	r2, [r3, #24]
 8005b5c:	e002      	b.n	8005b64 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2200      	movs	r2, #0
 8005b62:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f040 80c4 	bne.w	8005cf6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d126      	bne.n	8005bc4 <HAL_PCD_EP_DB_Transmit+0x456>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8a:	4413      	add	r3, r2
 8005b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	011a      	lsls	r2, r3, #4
 8005b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b96:	4413      	add	r3, r2
 8005b98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bc0:	801a      	strh	r2, [r3, #0]
 8005bc2:	e01a      	b.n	8005bfa <HAL_PCD_EP_DB_Transmit+0x48c>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	785b      	ldrb	r3, [r3, #1]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d116      	bne.n	8005bfa <HAL_PCD_EP_DB_Transmit+0x48c>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	677b      	str	r3, [r7, #116]	; 0x74
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be0:	4413      	add	r3, r2
 8005be2:	677b      	str	r3, [r7, #116]	; 0x74
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	011a      	lsls	r2, r3, #4
 8005bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bec:	4413      	add	r3, r2
 8005bee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bf2:	673b      	str	r3, [r7, #112]	; 0x70
 8005bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d12f      	bne.n	8005c68 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c20:	4413      	add	r3, r2
 8005c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	011a      	lsls	r2, r3, #4
 8005c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c30:	4413      	add	r3, r2
 8005c32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	e017      	b.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d113      	bne.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7e:	4413      	add	r3, r2
 8005c80:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	011a      	lsls	r2, r3, #4
 8005c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c94:	2200      	movs	r2, #0
 8005c96:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f006 fddf 	bl	800c862 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f040 8104 	bne.w	8005eb8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	441a      	add	r2, r3
 8005cdc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8013      	strh	r3, [r2, #0]
 8005cf4:	e0e0      	b.n	8005eb8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005cf6:	88fb      	ldrh	r3, [r7, #6]
 8005cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d121      	bne.n	8005d44 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	441a      	add	r2, r3
 8005d2c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	f040 80b4 	bne.w	8005eb8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	695a      	ldr	r2, [r3, #20]
 8005d54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d58:	441a      	add	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	69da      	ldr	r2, [r3, #28]
 8005d62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d66:	441a      	add	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	6a1a      	ldr	r2, [r3, #32]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d309      	bcc.n	8005d8c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6a1a      	ldr	r2, [r3, #32]
 8005d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d84:	1ad2      	subs	r2, r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	621a      	str	r2, [r3, #32]
 8005d8a:	e015      	b.n	8005db8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d107      	bne.n	8005da4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005d94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d98:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005da2:	e009      	b.n	8005db8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2200      	movs	r2, #0
 8005dae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d155      	bne.n	8005e72 <HAL_PCD_EP_DB_Transmit+0x704>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dda:	4413      	add	r3, r2
 8005ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	011a      	lsls	r2, r3, #4
 8005de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005de6:	4413      	add	r3, r2
 8005de8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dec:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d112      	bne.n	8005e1a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e02:	801a      	strh	r2, [r3, #0]
 8005e04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e16:	801a      	strh	r2, [r3, #0]
 8005e18:	e044      	b.n	8005ea4 <HAL_PCD_EP_DB_Transmit+0x736>
 8005e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e1e:	d811      	bhi.n	8005e44 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	657b      	str	r3, [r7, #84]	; 0x54
 8005e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e32:	3301      	adds	r3, #1
 8005e34:	657b      	str	r3, [r7, #84]	; 0x54
 8005e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	029b      	lsls	r3, r3, #10
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e40:	801a      	strh	r2, [r3, #0]
 8005e42:	e02f      	b.n	8005ea4 <HAL_PCD_EP_DB_Transmit+0x736>
 8005e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	657b      	str	r3, [r7, #84]	; 0x54
 8005e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e4c:	f003 031f 	and.w	r3, r3, #31
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d102      	bne.n	8005e5a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e56:	3b01      	subs	r3, #1
 8005e58:	657b      	str	r3, [r7, #84]	; 0x54
 8005e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	029b      	lsls	r3, r3, #10
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	e018      	b.n	8005ea4 <HAL_PCD_EP_DB_Transmit+0x736>
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d114      	bne.n	8005ea4 <HAL_PCD_EP_DB_Transmit+0x736>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e88:	4413      	add	r3, r2
 8005e8a:	667b      	str	r3, [r7, #100]	; 0x64
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	011a      	lsls	r2, r3, #4
 8005e92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e94:	4413      	add	r3, r2
 8005e96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e9a:	663b      	str	r3, [r7, #96]	; 0x60
 8005e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ea2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6818      	ldr	r0, [r3, #0]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	6959      	ldr	r1, [r3, #20]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	895a      	ldrh	r2, [r3, #10]
 8005eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f004 fe8b 	bl	800abce <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed2:	823b      	strh	r3, [r7, #16]
 8005ed4:	8a3b      	ldrh	r3, [r7, #16]
 8005ed6:	f083 0310 	eor.w	r3, r3, #16
 8005eda:	823b      	strh	r3, [r7, #16]
 8005edc:	8a3b      	ldrh	r3, [r7, #16]
 8005ede:	f083 0320 	eor.w	r3, r3, #32
 8005ee2:	823b      	strh	r3, [r7, #16]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	441a      	add	r2, r3
 8005ef2:	8a3b      	ldrh	r3, [r7, #16]
 8005ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3788      	adds	r7, #136	; 0x88
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b087      	sub	sp, #28
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	607b      	str	r3, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	817b      	strh	r3, [r7, #10]
 8005f20:	4613      	mov	r3, r2
 8005f22:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005f24:	897b      	ldrh	r3, [r7, #10]
 8005f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00b      	beq.n	8005f48 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f30:	897b      	ldrh	r3, [r7, #10]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	e009      	b.n	8005f5c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f48:	897a      	ldrh	r2, [r7, #10]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4413      	add	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005f5c:	893b      	ldrh	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d107      	bne.n	8005f72 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2200      	movs	r2, #0
 8005f66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	80da      	strh	r2, [r3, #6]
 8005f70:	e00b      	b.n	8005f8a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2201      	movs	r2, #1
 8005f76:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	0c1b      	lsrs	r3, r3, #16
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr
	...

08005f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e26c      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 8087 	beq.w	80060c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fb8:	4b92      	ldr	r3, [pc, #584]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f003 030c 	and.w	r3, r3, #12
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d00c      	beq.n	8005fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005fc4:	4b8f      	ldr	r3, [pc, #572]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f003 030c 	and.w	r3, r3, #12
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d112      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x5e>
 8005fd0:	4b8c      	ldr	r3, [pc, #560]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fdc:	d10b      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fde:	4b89      	ldr	r3, [pc, #548]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d06c      	beq.n	80060c4 <HAL_RCC_OscConfig+0x12c>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d168      	bne.n	80060c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e246      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffe:	d106      	bne.n	800600e <HAL_RCC_OscConfig+0x76>
 8006000:	4b80      	ldr	r3, [pc, #512]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a7f      	ldr	r2, [pc, #508]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	e02e      	b.n	800606c <HAL_RCC_OscConfig+0xd4>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10c      	bne.n	8006030 <HAL_RCC_OscConfig+0x98>
 8006016:	4b7b      	ldr	r3, [pc, #492]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a7a      	ldr	r2, [pc, #488]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 800601c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	4b78      	ldr	r3, [pc, #480]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a77      	ldr	r2, [pc, #476]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	e01d      	b.n	800606c <HAL_RCC_OscConfig+0xd4>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006038:	d10c      	bne.n	8006054 <HAL_RCC_OscConfig+0xbc>
 800603a:	4b72      	ldr	r3, [pc, #456]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a71      	ldr	r2, [pc, #452]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	4b6f      	ldr	r3, [pc, #444]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a6e      	ldr	r2, [pc, #440]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 800604c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	e00b      	b.n	800606c <HAL_RCC_OscConfig+0xd4>
 8006054:	4b6b      	ldr	r3, [pc, #428]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a6a      	ldr	r2, [pc, #424]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 800605a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	4b68      	ldr	r3, [pc, #416]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a67      	ldr	r2, [pc, #412]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800606a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d013      	beq.n	800609c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006074:	f7fd fd5e 	bl	8003b34 <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800607c:	f7fd fd5a 	bl	8003b34 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b64      	cmp	r3, #100	; 0x64
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e1fa      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800608e:	4b5d      	ldr	r3, [pc, #372]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0f0      	beq.n	800607c <HAL_RCC_OscConfig+0xe4>
 800609a:	e014      	b.n	80060c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609c:	f7fd fd4a 	bl	8003b34 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060a4:	f7fd fd46 	bl	8003b34 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b64      	cmp	r3, #100	; 0x64
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e1e6      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060b6:	4b53      	ldr	r3, [pc, #332]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f0      	bne.n	80060a4 <HAL_RCC_OscConfig+0x10c>
 80060c2:	e000      	b.n	80060c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d063      	beq.n	800619a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060d2:	4b4c      	ldr	r3, [pc, #304]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f003 030c 	and.w	r3, r3, #12
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80060de:	4b49      	ldr	r3, [pc, #292]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f003 030c 	and.w	r3, r3, #12
 80060e6:	2b08      	cmp	r3, #8
 80060e8:	d11c      	bne.n	8006124 <HAL_RCC_OscConfig+0x18c>
 80060ea:	4b46      	ldr	r3, [pc, #280]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d116      	bne.n	8006124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060f6:	4b43      	ldr	r3, [pc, #268]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <HAL_RCC_OscConfig+0x176>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d001      	beq.n	800610e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e1ba      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800610e:	4b3d      	ldr	r3, [pc, #244]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	4939      	ldr	r1, [pc, #228]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 800611e:	4313      	orrs	r3, r2
 8006120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006122:	e03a      	b.n	800619a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d020      	beq.n	800616e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800612c:	4b36      	ldr	r3, [pc, #216]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006132:	f7fd fcff 	bl	8003b34 <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800613a:	f7fd fcfb 	bl	8003b34 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e19b      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800614c:	4b2d      	ldr	r3, [pc, #180]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0f0      	beq.n	800613a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006158:	4b2a      	ldr	r3, [pc, #168]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	4927      	ldr	r1, [pc, #156]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006168:	4313      	orrs	r3, r2
 800616a:	600b      	str	r3, [r1, #0]
 800616c:	e015      	b.n	800619a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800616e:	4b26      	ldr	r3, [pc, #152]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006174:	f7fd fcde 	bl	8003b34 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800617c:	f7fd fcda 	bl	8003b34 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e17a      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800618e:	4b1d      	ldr	r3, [pc, #116]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f0      	bne.n	800617c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d03a      	beq.n	800621c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d019      	beq.n	80061e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061ae:	4b17      	ldr	r3, [pc, #92]	; (800620c <HAL_RCC_OscConfig+0x274>)
 80061b0:	2201      	movs	r2, #1
 80061b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b4:	f7fd fcbe 	bl	8003b34 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061bc:	f7fd fcba 	bl	8003b34 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e15a      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ce:	4b0d      	ldr	r3, [pc, #52]	; (8006204 <HAL_RCC_OscConfig+0x26c>)
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0f0      	beq.n	80061bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80061da:	2001      	movs	r0, #1
 80061dc:	f000 faa6 	bl	800672c <RCC_Delay>
 80061e0:	e01c      	b.n	800621c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061e2:	4b0a      	ldr	r3, [pc, #40]	; (800620c <HAL_RCC_OscConfig+0x274>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061e8:	f7fd fca4 	bl	8003b34 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061ee:	e00f      	b.n	8006210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061f0:	f7fd fca0 	bl	8003b34 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d908      	bls.n	8006210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e140      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
 8006202:	bf00      	nop
 8006204:	40021000 	.word	0x40021000
 8006208:	42420000 	.word	0x42420000
 800620c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006210:	4b9e      	ldr	r3, [pc, #632]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e9      	bne.n	80061f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 80a6 	beq.w	8006376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800622a:	2300      	movs	r3, #0
 800622c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800622e:	4b97      	ldr	r3, [pc, #604]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10d      	bne.n	8006256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800623a:	4b94      	ldr	r3, [pc, #592]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	4a93      	ldr	r2, [pc, #588]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 8006240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006244:	61d3      	str	r3, [r2, #28]
 8006246:	4b91      	ldr	r3, [pc, #580]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800624e:	60bb      	str	r3, [r7, #8]
 8006250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006252:	2301      	movs	r3, #1
 8006254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006256:	4b8e      	ldr	r3, [pc, #568]	; (8006490 <HAL_RCC_OscConfig+0x4f8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625e:	2b00      	cmp	r3, #0
 8006260:	d118      	bne.n	8006294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006262:	4b8b      	ldr	r3, [pc, #556]	; (8006490 <HAL_RCC_OscConfig+0x4f8>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a8a      	ldr	r2, [pc, #552]	; (8006490 <HAL_RCC_OscConfig+0x4f8>)
 8006268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800626c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800626e:	f7fd fc61 	bl	8003b34 <HAL_GetTick>
 8006272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006274:	e008      	b.n	8006288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006276:	f7fd fc5d 	bl	8003b34 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b64      	cmp	r3, #100	; 0x64
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e0fd      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006288:	4b81      	ldr	r3, [pc, #516]	; (8006490 <HAL_RCC_OscConfig+0x4f8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0f0      	beq.n	8006276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d106      	bne.n	80062aa <HAL_RCC_OscConfig+0x312>
 800629c:	4b7b      	ldr	r3, [pc, #492]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	4a7a      	ldr	r2, [pc, #488]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	6213      	str	r3, [r2, #32]
 80062a8:	e02d      	b.n	8006306 <HAL_RCC_OscConfig+0x36e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10c      	bne.n	80062cc <HAL_RCC_OscConfig+0x334>
 80062b2:	4b76      	ldr	r3, [pc, #472]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	4a75      	ldr	r2, [pc, #468]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80062b8:	f023 0301 	bic.w	r3, r3, #1
 80062bc:	6213      	str	r3, [r2, #32]
 80062be:	4b73      	ldr	r3, [pc, #460]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	4a72      	ldr	r2, [pc, #456]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80062c4:	f023 0304 	bic.w	r3, r3, #4
 80062c8:	6213      	str	r3, [r2, #32]
 80062ca:	e01c      	b.n	8006306 <HAL_RCC_OscConfig+0x36e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b05      	cmp	r3, #5
 80062d2:	d10c      	bne.n	80062ee <HAL_RCC_OscConfig+0x356>
 80062d4:	4b6d      	ldr	r3, [pc, #436]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	4a6c      	ldr	r2, [pc, #432]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80062da:	f043 0304 	orr.w	r3, r3, #4
 80062de:	6213      	str	r3, [r2, #32]
 80062e0:	4b6a      	ldr	r3, [pc, #424]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	4a69      	ldr	r2, [pc, #420]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80062e6:	f043 0301 	orr.w	r3, r3, #1
 80062ea:	6213      	str	r3, [r2, #32]
 80062ec:	e00b      	b.n	8006306 <HAL_RCC_OscConfig+0x36e>
 80062ee:	4b67      	ldr	r3, [pc, #412]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	4a66      	ldr	r2, [pc, #408]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80062f4:	f023 0301 	bic.w	r3, r3, #1
 80062f8:	6213      	str	r3, [r2, #32]
 80062fa:	4b64      	ldr	r3, [pc, #400]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	4a63      	ldr	r2, [pc, #396]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 8006300:	f023 0304 	bic.w	r3, r3, #4
 8006304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d015      	beq.n	800633a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800630e:	f7fd fc11 	bl	8003b34 <HAL_GetTick>
 8006312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006314:	e00a      	b.n	800632c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006316:	f7fd fc0d 	bl	8003b34 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	f241 3288 	movw	r2, #5000	; 0x1388
 8006324:	4293      	cmp	r3, r2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e0ab      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800632c:	4b57      	ldr	r3, [pc, #348]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0ee      	beq.n	8006316 <HAL_RCC_OscConfig+0x37e>
 8006338:	e014      	b.n	8006364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800633a:	f7fd fbfb 	bl	8003b34 <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006340:	e00a      	b.n	8006358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006342:	f7fd fbf7 	bl	8003b34 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006350:	4293      	cmp	r3, r2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e095      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006358:	4b4c      	ldr	r3, [pc, #304]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1ee      	bne.n	8006342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006364:	7dfb      	ldrb	r3, [r7, #23]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d105      	bne.n	8006376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800636a:	4b48      	ldr	r3, [pc, #288]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	4a47      	ldr	r2, [pc, #284]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 8006370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 8081 	beq.w	8006482 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006380:	4b42      	ldr	r3, [pc, #264]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f003 030c 	and.w	r3, r3, #12
 8006388:	2b08      	cmp	r3, #8
 800638a:	d061      	beq.n	8006450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d146      	bne.n	8006422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006394:	4b3f      	ldr	r3, [pc, #252]	; (8006494 <HAL_RCC_OscConfig+0x4fc>)
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800639a:	f7fd fbcb 	bl	8003b34 <HAL_GetTick>
 800639e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063a2:	f7fd fbc7 	bl	8003b34 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e067      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063b4:	4b35      	ldr	r3, [pc, #212]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1f0      	bne.n	80063a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c8:	d108      	bne.n	80063dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80063ca:	4b30      	ldr	r3, [pc, #192]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	492d      	ldr	r1, [pc, #180]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063dc:	4b2b      	ldr	r3, [pc, #172]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a19      	ldr	r1, [r3, #32]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	430b      	orrs	r3, r1
 80063ee:	4927      	ldr	r1, [pc, #156]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063f4:	4b27      	ldr	r3, [pc, #156]	; (8006494 <HAL_RCC_OscConfig+0x4fc>)
 80063f6:	2201      	movs	r2, #1
 80063f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063fa:	f7fd fb9b 	bl	8003b34 <HAL_GetTick>
 80063fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006400:	e008      	b.n	8006414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006402:	f7fd fb97 	bl	8003b34 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d901      	bls.n	8006414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e037      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006414:	4b1d      	ldr	r3, [pc, #116]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0f0      	beq.n	8006402 <HAL_RCC_OscConfig+0x46a>
 8006420:	e02f      	b.n	8006482 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006422:	4b1c      	ldr	r3, [pc, #112]	; (8006494 <HAL_RCC_OscConfig+0x4fc>)
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006428:	f7fd fb84 	bl	8003b34 <HAL_GetTick>
 800642c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006430:	f7fd fb80 	bl	8003b34 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e020      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006442:	4b12      	ldr	r3, [pc, #72]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1f0      	bne.n	8006430 <HAL_RCC_OscConfig+0x498>
 800644e:	e018      	b.n	8006482 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e013      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <HAL_RCC_OscConfig+0x4f4>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	429a      	cmp	r2, r3
 800646e:	d106      	bne.n	800647e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800647a:	429a      	cmp	r2, r3
 800647c:	d001      	beq.n	8006482 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40021000 	.word	0x40021000
 8006490:	40007000 	.word	0x40007000
 8006494:	42420060 	.word	0x42420060

08006498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e0d0      	b.n	800664e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064ac:	4b6a      	ldr	r3, [pc, #424]	; (8006658 <HAL_RCC_ClockConfig+0x1c0>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d910      	bls.n	80064dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ba:	4b67      	ldr	r3, [pc, #412]	; (8006658 <HAL_RCC_ClockConfig+0x1c0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f023 0207 	bic.w	r2, r3, #7
 80064c2:	4965      	ldr	r1, [pc, #404]	; (8006658 <HAL_RCC_ClockConfig+0x1c0>)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ca:	4b63      	ldr	r3, [pc, #396]	; (8006658 <HAL_RCC_ClockConfig+0x1c0>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d001      	beq.n	80064dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e0b8      	b.n	800664e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d020      	beq.n	800652a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064f4:	4b59      	ldr	r3, [pc, #356]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	4a58      	ldr	r2, [pc, #352]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 80064fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80064fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0308 	and.w	r3, r3, #8
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800650c:	4b53      	ldr	r3, [pc, #332]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	4a52      	ldr	r2, [pc, #328]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 8006512:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006516:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006518:	4b50      	ldr	r3, [pc, #320]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	494d      	ldr	r1, [pc, #308]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 8006526:	4313      	orrs	r3, r2
 8006528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d040      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d107      	bne.n	800654e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800653e:	4b47      	ldr	r3, [pc, #284]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d115      	bne.n	8006576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e07f      	b.n	800664e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d107      	bne.n	8006566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006556:	4b41      	ldr	r3, [pc, #260]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e073      	b.n	800664e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006566:	4b3d      	ldr	r3, [pc, #244]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e06b      	b.n	800664e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006576:	4b39      	ldr	r3, [pc, #228]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f023 0203 	bic.w	r2, r3, #3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	4936      	ldr	r1, [pc, #216]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 8006584:	4313      	orrs	r3, r2
 8006586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006588:	f7fd fad4 	bl	8003b34 <HAL_GetTick>
 800658c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658e:	e00a      	b.n	80065a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006590:	f7fd fad0 	bl	8003b34 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f241 3288 	movw	r2, #5000	; 0x1388
 800659e:	4293      	cmp	r3, r2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e053      	b.n	800664e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065a6:	4b2d      	ldr	r3, [pc, #180]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f003 020c 	and.w	r2, r3, #12
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d1eb      	bne.n	8006590 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065b8:	4b27      	ldr	r3, [pc, #156]	; (8006658 <HAL_RCC_ClockConfig+0x1c0>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d210      	bcs.n	80065e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065c6:	4b24      	ldr	r3, [pc, #144]	; (8006658 <HAL_RCC_ClockConfig+0x1c0>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f023 0207 	bic.w	r2, r3, #7
 80065ce:	4922      	ldr	r1, [pc, #136]	; (8006658 <HAL_RCC_ClockConfig+0x1c0>)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d6:	4b20      	ldr	r3, [pc, #128]	; (8006658 <HAL_RCC_ClockConfig+0x1c0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d001      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e032      	b.n	800664e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0304 	and.w	r3, r3, #4
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d008      	beq.n	8006606 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065f4:	4b19      	ldr	r3, [pc, #100]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	4916      	ldr	r1, [pc, #88]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 8006602:	4313      	orrs	r3, r2
 8006604:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006612:	4b12      	ldr	r3, [pc, #72]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	490e      	ldr	r1, [pc, #56]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 8006622:	4313      	orrs	r3, r2
 8006624:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006626:	f000 f821 	bl	800666c <HAL_RCC_GetSysClockFreq>
 800662a:	4602      	mov	r2, r0
 800662c:	4b0b      	ldr	r3, [pc, #44]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	091b      	lsrs	r3, r3, #4
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	490a      	ldr	r1, [pc, #40]	; (8006660 <HAL_RCC_ClockConfig+0x1c8>)
 8006638:	5ccb      	ldrb	r3, [r1, r3]
 800663a:	fa22 f303 	lsr.w	r3, r2, r3
 800663e:	4a09      	ldr	r2, [pc, #36]	; (8006664 <HAL_RCC_ClockConfig+0x1cc>)
 8006640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006642:	4b09      	ldr	r3, [pc, #36]	; (8006668 <HAL_RCC_ClockConfig+0x1d0>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f7fd fa32 	bl	8003ab0 <HAL_InitTick>

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	40022000 	.word	0x40022000
 800665c:	40021000 	.word	0x40021000
 8006660:	0800f1e0 	.word	0x0800f1e0
 8006664:	20000038 	.word	0x20000038
 8006668:	2000003c 	.word	0x2000003c

0800666c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800666c:	b490      	push	{r4, r7}
 800666e:	b08a      	sub	sp, #40	; 0x28
 8006670:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006672:	4b2a      	ldr	r3, [pc, #168]	; (800671c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006674:	1d3c      	adds	r4, r7, #4
 8006676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800667c:	f240 2301 	movw	r3, #513	; 0x201
 8006680:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	61fb      	str	r3, [r7, #28]
 8006686:	2300      	movs	r3, #0
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	2300      	movs	r3, #0
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
 800668e:	2300      	movs	r3, #0
 8006690:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006696:	4b22      	ldr	r3, [pc, #136]	; (8006720 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f003 030c 	and.w	r3, r3, #12
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d002      	beq.n	80066ac <HAL_RCC_GetSysClockFreq+0x40>
 80066a6:	2b08      	cmp	r3, #8
 80066a8:	d003      	beq.n	80066b2 <HAL_RCC_GetSysClockFreq+0x46>
 80066aa:	e02d      	b.n	8006708 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80066ac:	4b1d      	ldr	r3, [pc, #116]	; (8006724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ae:	623b      	str	r3, [r7, #32]
      break;
 80066b0:	e02d      	b.n	800670e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	0c9b      	lsrs	r3, r3, #18
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80066be:	4413      	add	r3, r2
 80066c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80066c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d013      	beq.n	80066f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80066d0:	4b13      	ldr	r3, [pc, #76]	; (8006720 <HAL_RCC_GetSysClockFreq+0xb4>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	0c5b      	lsrs	r3, r3, #17
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80066de:	4413      	add	r3, r2
 80066e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80066e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	4a0e      	ldr	r2, [pc, #56]	; (8006724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ea:	fb02 f203 	mul.w	r2, r2, r3
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
 80066f6:	e004      	b.n	8006702 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	4a0b      	ldr	r2, [pc, #44]	; (8006728 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066fc:	fb02 f303 	mul.w	r3, r2, r3
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	623b      	str	r3, [r7, #32]
      break;
 8006706:	e002      	b.n	800670e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006708:	4b06      	ldr	r3, [pc, #24]	; (8006724 <HAL_RCC_GetSysClockFreq+0xb8>)
 800670a:	623b      	str	r3, [r7, #32]
      break;
 800670c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800670e:	6a3b      	ldr	r3, [r7, #32]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3728      	adds	r7, #40	; 0x28
 8006714:	46bd      	mov	sp, r7
 8006716:	bc90      	pop	{r4, r7}
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	0800d89c 	.word	0x0800d89c
 8006720:	40021000 	.word	0x40021000
 8006724:	007a1200 	.word	0x007a1200
 8006728:	003d0900 	.word	0x003d0900

0800672c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006734:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <RCC_Delay+0x34>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a0a      	ldr	r2, [pc, #40]	; (8006764 <RCC_Delay+0x38>)
 800673a:	fba2 2303 	umull	r2, r3, r2, r3
 800673e:	0a5b      	lsrs	r3, r3, #9
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	fb02 f303 	mul.w	r3, r2, r3
 8006746:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006748:	bf00      	nop
  }
  while (Delay --);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	1e5a      	subs	r2, r3, #1
 800674e:	60fa      	str	r2, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1f9      	bne.n	8006748 <RCC_Delay+0x1c>
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr
 8006760:	20000038 	.word	0x20000038
 8006764:	10624dd3 	.word	0x10624dd3

08006768 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d07d      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006784:	2300      	movs	r3, #0
 8006786:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006788:	4b4f      	ldr	r3, [pc, #316]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10d      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006794:	4b4c      	ldr	r3, [pc, #304]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	4a4b      	ldr	r2, [pc, #300]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800679a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800679e:	61d3      	str	r3, [r2, #28]
 80067a0:	4b49      	ldr	r3, [pc, #292]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067a8:	60bb      	str	r3, [r7, #8]
 80067aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067ac:	2301      	movs	r3, #1
 80067ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b0:	4b46      	ldr	r3, [pc, #280]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d118      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067bc:	4b43      	ldr	r3, [pc, #268]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a42      	ldr	r2, [pc, #264]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067c8:	f7fd f9b4 	bl	8003b34 <HAL_GetTick>
 80067cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ce:	e008      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067d0:	f7fd f9b0 	bl	8003b34 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b64      	cmp	r3, #100	; 0x64
 80067dc:	d901      	bls.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e06d      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e2:	4b3a      	ldr	r3, [pc, #232]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0f0      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067ee:	4b36      	ldr	r3, [pc, #216]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d02e      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	429a      	cmp	r2, r3
 800680a:	d027      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800680c:	4b2e      	ldr	r3, [pc, #184]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006814:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006816:	4b2e      	ldr	r3, [pc, #184]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006818:	2201      	movs	r2, #1
 800681a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800681c:	4b2c      	ldr	r3, [pc, #176]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006822:	4a29      	ldr	r2, [pc, #164]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d014      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006832:	f7fd f97f 	bl	8003b34 <HAL_GetTick>
 8006836:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006838:	e00a      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800683a:	f7fd f97b 	bl	8003b34 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	f241 3288 	movw	r2, #5000	; 0x1388
 8006848:	4293      	cmp	r3, r2
 800684a:	d901      	bls.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e036      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006850:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0ee      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800685c:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	4917      	ldr	r1, [pc, #92]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800686a:	4313      	orrs	r3, r2
 800686c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d105      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006874:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	4a13      	ldr	r2, [pc, #76]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800687a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800687e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800688c:	4b0e      	ldr	r3, [pc, #56]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	490b      	ldr	r1, [pc, #44]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800689a:	4313      	orrs	r3, r2
 800689c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0310 	and.w	r3, r3, #16
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d008      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068aa:	4b07      	ldr	r3, [pc, #28]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	4904      	ldr	r1, [pc, #16]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	40021000 	.word	0x40021000
 80068cc:	40007000 	.word	0x40007000
 80068d0:	42420440 	.word	0x42420440

080068d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e076      	b.n	80069d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d108      	bne.n	8006900 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068f6:	d009      	beq.n	800690c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	61da      	str	r2, [r3, #28]
 80068fe:	e005      	b.n	800690c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fc fea0 	bl	800366c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006942:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006990:	ea42 0103 	orr.w	r1, r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	0c1a      	lsrs	r2, r3, #16
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f002 0204 	and.w	r2, r2, #4
 80069b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	69da      	ldr	r2, [r3, #28]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08c      	sub	sp, #48	; 0x30
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069ea:	2301      	movs	r3, #1
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d101      	bne.n	8006a02 <HAL_SPI_TransmitReceive+0x26>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e18a      	b.n	8006d18 <HAL_SPI_TransmitReceive+0x33c>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a0a:	f7fd f893 	bl	8003b34 <HAL_GetTick>
 8006a0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006a20:	887b      	ldrh	r3, [r7, #2]
 8006a22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d00f      	beq.n	8006a4c <HAL_SPI_TransmitReceive+0x70>
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a32:	d107      	bne.n	8006a44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d103      	bne.n	8006a44 <HAL_SPI_TransmitReceive+0x68>
 8006a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d003      	beq.n	8006a4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006a44:	2302      	movs	r3, #2
 8006a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a4a:	e15b      	b.n	8006d04 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d005      	beq.n	8006a5e <HAL_SPI_TransmitReceive+0x82>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <HAL_SPI_TransmitReceive+0x82>
 8006a58:	887b      	ldrh	r3, [r7, #2]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d103      	bne.n	8006a66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a64:	e14e      	b.n	8006d04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d003      	beq.n	8006a7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2205      	movs	r2, #5
 8006a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	887a      	ldrh	r2, [r7, #2]
 8006a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	887a      	ldrh	r2, [r7, #2]
 8006a90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	887a      	ldrh	r2, [r7, #2]
 8006a9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	887a      	ldrh	r2, [r7, #2]
 8006aa2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aba:	2b40      	cmp	r3, #64	; 0x40
 8006abc:	d007      	beq.n	8006ace <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006acc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad6:	d178      	bne.n	8006bca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <HAL_SPI_TransmitReceive+0x10a>
 8006ae0:	8b7b      	ldrh	r3, [r7, #26]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d166      	bne.n	8006bb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aea:	881a      	ldrh	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	1c9a      	adds	r2, r3, #2
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b0a:	e053      	b.n	8006bb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d11b      	bne.n	8006b52 <HAL_SPI_TransmitReceive+0x176>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d016      	beq.n	8006b52 <HAL_SPI_TransmitReceive+0x176>
 8006b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d113      	bne.n	8006b52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	881a      	ldrh	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3a:	1c9a      	adds	r2, r3, #2
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d119      	bne.n	8006b94 <HAL_SPI_TransmitReceive+0x1b8>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d014      	beq.n	8006b94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b74:	b292      	uxth	r2, r2
 8006b76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	1c9a      	adds	r2, r3, #2
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b90:	2301      	movs	r3, #1
 8006b92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b94:	f7fc ffce 	bl	8003b34 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d807      	bhi.n	8006bb4 <HAL_SPI_TransmitReceive+0x1d8>
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d003      	beq.n	8006bb4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006bb2:	e0a7      	b.n	8006d04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1a6      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x130>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1a1      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x130>
 8006bc8:	e07c      	b.n	8006cc4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_SPI_TransmitReceive+0x1fc>
 8006bd2:	8b7b      	ldrh	r3, [r7, #26]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d16b      	bne.n	8006cb0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	7812      	ldrb	r2, [r2, #0]
 8006be4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bfe:	e057      	b.n	8006cb0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d11c      	bne.n	8006c48 <HAL_SPI_TransmitReceive+0x26c>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d017      	beq.n	8006c48 <HAL_SPI_TransmitReceive+0x26c>
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d114      	bne.n	8006c48 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	330c      	adds	r3, #12
 8006c28:	7812      	ldrb	r2, [r2, #0]
 8006c2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d119      	bne.n	8006c8a <HAL_SPI_TransmitReceive+0x2ae>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d014      	beq.n	8006c8a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c86:	2301      	movs	r3, #1
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c8a:	f7fc ff53 	bl	8003b34 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d803      	bhi.n	8006ca2 <HAL_SPI_TransmitReceive+0x2c6>
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d102      	bne.n	8006ca8 <HAL_SPI_TransmitReceive+0x2cc>
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d103      	bne.n	8006cb0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006cae:	e029      	b.n	8006d04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1a2      	bne.n	8006c00 <HAL_SPI_TransmitReceive+0x224>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d19d      	bne.n	8006c00 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f8b1 	bl	8006e30 <SPI_EndRxTxTransaction>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d006      	beq.n	8006ce2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006ce0:	e010      	b.n	8006d04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10b      	bne.n	8006d02 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cea:	2300      	movs	r3, #0
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	e000      	b.n	8006d04 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006d02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3730      	adds	r7, #48	; 0x30
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d30:	f7fc ff00 	bl	8003b34 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	1a9b      	subs	r3, r3, r2
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d40:	f7fc fef8 	bl	8003b34 <HAL_GetTick>
 8006d44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d46:	4b39      	ldr	r3, [pc, #228]	; (8006e2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	015b      	lsls	r3, r3, #5
 8006d4c:	0d1b      	lsrs	r3, r3, #20
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	fb02 f303 	mul.w	r3, r2, r3
 8006d54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d56:	e054      	b.n	8006e02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5e:	d050      	beq.n	8006e02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d60:	f7fc fee8 	bl	8003b34 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d902      	bls.n	8006d76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d13d      	bne.n	8006df2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d8e:	d111      	bne.n	8006db4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d98:	d004      	beq.n	8006da4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da2:	d107      	bne.n	8006db4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006db2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dbc:	d10f      	bne.n	8006dde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ddc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e017      	b.n	8006e22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	bf0c      	ite	eq
 8006e12:	2301      	moveq	r3, #1
 8006e14:	2300      	movne	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d19b      	bne.n	8006d58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3720      	adds	r7, #32
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000038 	.word	0x20000038

08006e30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af02      	add	r7, sp, #8
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2200      	movs	r2, #0
 8006e44:	2180      	movs	r1, #128	; 0x80
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff ff6a 	bl	8006d20 <SPI_WaitFlagStateUntilTimeout>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d007      	beq.n	8006e62 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	f043 0220 	orr.w	r2, r3, #32
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e000      	b.n	8006e64 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e041      	b.n	8006f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fc fc34 	bl	8003700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4610      	mov	r0, r2
 8006eac:	f001 f984 	bl	80081b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d001      	beq.n	8006f24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e032      	b.n	8006f8a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a18      	ldr	r2, [pc, #96]	; (8006f94 <HAL_TIM_Base_Start+0x88>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00e      	beq.n	8006f54 <HAL_TIM_Base_Start+0x48>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3e:	d009      	beq.n	8006f54 <HAL_TIM_Base_Start+0x48>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a14      	ldr	r2, [pc, #80]	; (8006f98 <HAL_TIM_Base_Start+0x8c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d004      	beq.n	8006f54 <HAL_TIM_Base_Start+0x48>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <HAL_TIM_Base_Start+0x90>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d111      	bne.n	8006f78 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b06      	cmp	r3, #6
 8006f64:	d010      	beq.n	8006f88 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0201 	orr.w	r2, r2, #1
 8006f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f76:	e007      	b.n	8006f88 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0201 	orr.w	r2, r2, #1
 8006f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr
 8006f94:	40012c00 	.word	0x40012c00
 8006f98:	40000400 	.word	0x40000400
 8006f9c:	40000800 	.word	0x40000800

08006fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d001      	beq.n	8006fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e03a      	b.n	800702e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0201 	orr.w	r2, r2, #1
 8006fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a18      	ldr	r2, [pc, #96]	; (8007038 <HAL_TIM_Base_Start_IT+0x98>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00e      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0x58>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe2:	d009      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0x58>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a14      	ldr	r2, [pc, #80]	; (800703c <HAL_TIM_Base_Start_IT+0x9c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0x58>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a13      	ldr	r2, [pc, #76]	; (8007040 <HAL_TIM_Base_Start_IT+0xa0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d111      	bne.n	800701c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b06      	cmp	r3, #6
 8007008:	d010      	beq.n	800702c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f042 0201 	orr.w	r2, r2, #1
 8007018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701a:	e007      	b.n	800702c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0201 	orr.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	bc80      	pop	{r7}
 8007036:	4770      	bx	lr
 8007038:	40012c00 	.word	0x40012c00
 800703c:	40000400 	.word	0x40000400
 8007040:	40000800 	.word	0x40000800

08007044 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e041      	b.n	80070da <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d106      	bne.n	8007070 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f839 	bl	80070e2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3304      	adds	r3, #4
 8007080:	4619      	mov	r1, r3
 8007082:	4610      	mov	r0, r2
 8007084:	f001 f898 	bl	80081b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr

080070f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e041      	b.n	800718a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f839 	bl	8007192 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3304      	adds	r3, #4
 8007130:	4619      	mov	r1, r3
 8007132:	4610      	mov	r0, r2
 8007134:	f001 f840 	bl	80081b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr

080071a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d109      	bne.n	80071c8 <HAL_TIM_PWM_Start+0x24>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b01      	cmp	r3, #1
 80071be:	bf14      	ite	ne
 80071c0:	2301      	movne	r3, #1
 80071c2:	2300      	moveq	r3, #0
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	e022      	b.n	800720e <HAL_TIM_PWM_Start+0x6a>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	d109      	bne.n	80071e2 <HAL_TIM_PWM_Start+0x3e>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	bf14      	ite	ne
 80071da:	2301      	movne	r3, #1
 80071dc:	2300      	moveq	r3, #0
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	e015      	b.n	800720e <HAL_TIM_PWM_Start+0x6a>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d109      	bne.n	80071fc <HAL_TIM_PWM_Start+0x58>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	bf14      	ite	ne
 80071f4:	2301      	movne	r3, #1
 80071f6:	2300      	moveq	r3, #0
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	e008      	b.n	800720e <HAL_TIM_PWM_Start+0x6a>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b01      	cmp	r3, #1
 8007206:	bf14      	ite	ne
 8007208:	2301      	movne	r3, #1
 800720a:	2300      	moveq	r3, #0
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e05e      	b.n	80072d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d104      	bne.n	8007226 <HAL_TIM_PWM_Start+0x82>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007224:	e013      	b.n	800724e <HAL_TIM_PWM_Start+0xaa>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b04      	cmp	r3, #4
 800722a:	d104      	bne.n	8007236 <HAL_TIM_PWM_Start+0x92>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007234:	e00b      	b.n	800724e <HAL_TIM_PWM_Start+0xaa>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b08      	cmp	r3, #8
 800723a:	d104      	bne.n	8007246 <HAL_TIM_PWM_Start+0xa2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2202      	movs	r2, #2
 8007240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007244:	e003      	b.n	800724e <HAL_TIM_PWM_Start+0xaa>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2201      	movs	r2, #1
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	4618      	mov	r0, r3
 8007258:	f001 fa2e 	bl	80086b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a1e      	ldr	r2, [pc, #120]	; (80072dc <HAL_TIM_PWM_Start+0x138>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d107      	bne.n	8007276 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007274:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a18      	ldr	r2, [pc, #96]	; (80072dc <HAL_TIM_PWM_Start+0x138>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d00e      	beq.n	800729e <HAL_TIM_PWM_Start+0xfa>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007288:	d009      	beq.n	800729e <HAL_TIM_PWM_Start+0xfa>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a14      	ldr	r2, [pc, #80]	; (80072e0 <HAL_TIM_PWM_Start+0x13c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d004      	beq.n	800729e <HAL_TIM_PWM_Start+0xfa>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a12      	ldr	r2, [pc, #72]	; (80072e4 <HAL_TIM_PWM_Start+0x140>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d111      	bne.n	80072c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b06      	cmp	r3, #6
 80072ae:	d010      	beq.n	80072d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0201 	orr.w	r2, r2, #1
 80072be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c0:	e007      	b.n	80072d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f042 0201 	orr.w	r2, r2, #1
 80072d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40012c00 	.word	0x40012c00
 80072e0:	40000400 	.word	0x40000400
 80072e4:	40000800 	.word	0x40000800

080072e8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d109      	bne.n	8007310 <HAL_TIM_PWM_Start_DMA+0x28>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b02      	cmp	r3, #2
 8007306:	bf0c      	ite	eq
 8007308:	2301      	moveq	r3, #1
 800730a:	2300      	movne	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	e022      	b.n	8007356 <HAL_TIM_PWM_Start_DMA+0x6e>
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2b04      	cmp	r3, #4
 8007314:	d109      	bne.n	800732a <HAL_TIM_PWM_Start_DMA+0x42>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	bf0c      	ite	eq
 8007322:	2301      	moveq	r3, #1
 8007324:	2300      	movne	r3, #0
 8007326:	b2db      	uxtb	r3, r3
 8007328:	e015      	b.n	8007356 <HAL_TIM_PWM_Start_DMA+0x6e>
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b08      	cmp	r3, #8
 800732e:	d109      	bne.n	8007344 <HAL_TIM_PWM_Start_DMA+0x5c>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	bf0c      	ite	eq
 800733c:	2301      	moveq	r3, #1
 800733e:	2300      	movne	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	e008      	b.n	8007356 <HAL_TIM_PWM_Start_DMA+0x6e>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	bf0c      	ite	eq
 8007350:	2301      	moveq	r3, #1
 8007352:	2300      	movne	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 800735a:	2302      	movs	r3, #2
 800735c:	e14e      	b.n	80075fc <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <HAL_TIM_PWM_Start_DMA+0x90>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b01      	cmp	r3, #1
 800736e:	bf0c      	ite	eq
 8007370:	2301      	moveq	r3, #1
 8007372:	2300      	movne	r3, #0
 8007374:	b2db      	uxtb	r3, r3
 8007376:	e022      	b.n	80073be <HAL_TIM_PWM_Start_DMA+0xd6>
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b04      	cmp	r3, #4
 800737c:	d109      	bne.n	8007392 <HAL_TIM_PWM_Start_DMA+0xaa>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b01      	cmp	r3, #1
 8007388:	bf0c      	ite	eq
 800738a:	2301      	moveq	r3, #1
 800738c:	2300      	movne	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	e015      	b.n	80073be <HAL_TIM_PWM_Start_DMA+0xd6>
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b08      	cmp	r3, #8
 8007396:	d109      	bne.n	80073ac <HAL_TIM_PWM_Start_DMA+0xc4>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	bf0c      	ite	eq
 80073a4:	2301      	moveq	r3, #1
 80073a6:	2300      	movne	r3, #0
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	e008      	b.n	80073be <HAL_TIM_PWM_Start_DMA+0xd6>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	bf0c      	ite	eq
 80073b8:	2301      	moveq	r3, #1
 80073ba:	2300      	movne	r3, #0
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d024      	beq.n	800740c <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d104      	bne.n	80073d2 <HAL_TIM_PWM_Start_DMA+0xea>
 80073c8:	887b      	ldrh	r3, [r7, #2]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e114      	b.n	80075fc <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d104      	bne.n	80073e2 <HAL_TIM_PWM_Start_DMA+0xfa>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e0:	e016      	b.n	8007410 <HAL_TIM_PWM_Start_DMA+0x128>
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d104      	bne.n	80073f2 <HAL_TIM_PWM_Start_DMA+0x10a>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073f0:	e00e      	b.n	8007410 <HAL_TIM_PWM_Start_DMA+0x128>
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d104      	bne.n	8007402 <HAL_TIM_PWM_Start_DMA+0x11a>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007400:	e006      	b.n	8007410 <HAL_TIM_PWM_Start_DMA+0x128>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2202      	movs	r2, #2
 8007406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800740a:	e001      	b.n	8007410 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e0f5      	b.n	80075fc <HAL_TIM_PWM_Start_DMA+0x314>
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2b0c      	cmp	r3, #12
 8007414:	f200 80ae 	bhi.w	8007574 <HAL_TIM_PWM_Start_DMA+0x28c>
 8007418:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <HAL_TIM_PWM_Start_DMA+0x138>)
 800741a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741e:	bf00      	nop
 8007420:	08007455 	.word	0x08007455
 8007424:	08007575 	.word	0x08007575
 8007428:	08007575 	.word	0x08007575
 800742c:	08007575 	.word	0x08007575
 8007430:	0800749d 	.word	0x0800749d
 8007434:	08007575 	.word	0x08007575
 8007438:	08007575 	.word	0x08007575
 800743c:	08007575 	.word	0x08007575
 8007440:	080074e5 	.word	0x080074e5
 8007444:	08007575 	.word	0x08007575
 8007448:	08007575 	.word	0x08007575
 800744c:	08007575 	.word	0x08007575
 8007450:	0800752d 	.word	0x0800752d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	4a6a      	ldr	r2, [pc, #424]	; (8007604 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800745a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	4a69      	ldr	r2, [pc, #420]	; (8007608 <HAL_TIM_PWM_Start_DMA+0x320>)
 8007462:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	4a68      	ldr	r2, [pc, #416]	; (800760c <HAL_TIM_PWM_Start_DMA+0x324>)
 800746a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3334      	adds	r3, #52	; 0x34
 8007478:	461a      	mov	r2, r3
 800747a:	887b      	ldrh	r3, [r7, #2]
 800747c:	f7fc fcf0 	bl	8003e60 <HAL_DMA_Start_IT>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e0b8      	b.n	80075fc <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007498:	60da      	str	r2, [r3, #12]
      break;
 800749a:	e06c      	b.n	8007576 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	4a58      	ldr	r2, [pc, #352]	; (8007604 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80074a2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	4a57      	ldr	r2, [pc, #348]	; (8007608 <HAL_TIM_PWM_Start_DMA+0x320>)
 80074aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	4a56      	ldr	r2, [pc, #344]	; (800760c <HAL_TIM_PWM_Start_DMA+0x324>)
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80074b8:	6879      	ldr	r1, [r7, #4]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3338      	adds	r3, #56	; 0x38
 80074c0:	461a      	mov	r2, r3
 80074c2:	887b      	ldrh	r3, [r7, #2]
 80074c4:	f7fc fccc 	bl	8003e60 <HAL_DMA_Start_IT>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e094      	b.n	80075fc <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074e0:	60da      	str	r2, [r3, #12]
      break;
 80074e2:	e048      	b.n	8007576 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	4a46      	ldr	r2, [pc, #280]	; (8007604 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80074ea:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f0:	4a45      	ldr	r2, [pc, #276]	; (8007608 <HAL_TIM_PWM_Start_DMA+0x320>)
 80074f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	4a44      	ldr	r2, [pc, #272]	; (800760c <HAL_TIM_PWM_Start_DMA+0x324>)
 80074fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	333c      	adds	r3, #60	; 0x3c
 8007508:	461a      	mov	r2, r3
 800750a:	887b      	ldrh	r3, [r7, #2]
 800750c:	f7fc fca8 	bl	8003e60 <HAL_DMA_Start_IT>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e070      	b.n	80075fc <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007528:	60da      	str	r2, [r3, #12]
      break;
 800752a:	e024      	b.n	8007576 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007530:	4a34      	ldr	r2, [pc, #208]	; (8007604 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8007532:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007538:	4a33      	ldr	r2, [pc, #204]	; (8007608 <HAL_TIM_PWM_Start_DMA+0x320>)
 800753a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	4a32      	ldr	r2, [pc, #200]	; (800760c <HAL_TIM_PWM_Start_DMA+0x324>)
 8007542:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3340      	adds	r3, #64	; 0x40
 8007550:	461a      	mov	r2, r3
 8007552:	887b      	ldrh	r3, [r7, #2]
 8007554:	f7fc fc84 	bl	8003e60 <HAL_DMA_Start_IT>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e04c      	b.n	80075fc <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007570:	60da      	str	r2, [r3, #12]
      break;
 8007572:	e000      	b.n	8007576 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8007574:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2201      	movs	r2, #1
 800757c:	68b9      	ldr	r1, [r7, #8]
 800757e:	4618      	mov	r0, r3
 8007580:	f001 f89a 	bl	80086b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a21      	ldr	r2, [pc, #132]	; (8007610 <HAL_TIM_PWM_Start_DMA+0x328>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d107      	bne.n	800759e <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800759c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1b      	ldr	r2, [pc, #108]	; (8007610 <HAL_TIM_PWM_Start_DMA+0x328>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00e      	beq.n	80075c6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b0:	d009      	beq.n	80075c6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a17      	ldr	r2, [pc, #92]	; (8007614 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d004      	beq.n	80075c6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a15      	ldr	r2, [pc, #84]	; (8007618 <HAL_TIM_PWM_Start_DMA+0x330>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d111      	bne.n	80075ea <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f003 0307 	and.w	r3, r3, #7
 80075d0:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b06      	cmp	r3, #6
 80075d6:	d010      	beq.n	80075fa <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e8:	e007      	b.n	80075fa <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f042 0201 	orr.w	r2, r2, #1
 80075f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	080080a9 	.word	0x080080a9
 8007608:	08008151 	.word	0x08008151
 800760c:	08008017 	.word	0x08008017
 8007610:	40012c00 	.word	0x40012c00
 8007614:	40000400 	.word	0x40000400
 8007618:	40000800 	.word	0x40000800

0800761c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b0c      	cmp	r3, #12
 800762a:	d855      	bhi.n	80076d8 <HAL_TIM_PWM_Stop_DMA+0xbc>
 800762c:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800762e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007632:	bf00      	nop
 8007634:	08007669 	.word	0x08007669
 8007638:	080076d9 	.word	0x080076d9
 800763c:	080076d9 	.word	0x080076d9
 8007640:	080076d9 	.word	0x080076d9
 8007644:	08007685 	.word	0x08007685
 8007648:	080076d9 	.word	0x080076d9
 800764c:	080076d9 	.word	0x080076d9
 8007650:	080076d9 	.word	0x080076d9
 8007654:	080076a1 	.word	0x080076a1
 8007658:	080076d9 	.word	0x080076d9
 800765c:	080076d9 	.word	0x080076d9
 8007660:	080076d9 	.word	0x080076d9
 8007664:	080076bd 	.word	0x080076bd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007676:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	4618      	mov	r0, r3
 800767e:	f7fc fc4f 	bl	8003f20 <HAL_DMA_Abort_IT>
      break;
 8007682:	e02a      	b.n	80076da <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007692:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007698:	4618      	mov	r0, r3
 800769a:	f7fc fc41 	bl	8003f20 <HAL_DMA_Abort_IT>
      break;
 800769e:	e01c      	b.n	80076da <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fc fc33 	bl	8003f20 <HAL_DMA_Abort_IT>
      break;
 80076ba:	e00e      	b.n	80076da <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fc fc25 	bl	8003f20 <HAL_DMA_Abort_IT>
      break;
 80076d6:	e000      	b.n	80076da <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80076d8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2200      	movs	r2, #0
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 ffe8 	bl	80086b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a29      	ldr	r2, [pc, #164]	; (8007794 <HAL_TIM_PWM_Stop_DMA+0x178>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d117      	bne.n	8007722 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6a1a      	ldr	r2, [r3, #32]
 80076f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80076fc:	4013      	ands	r3, r2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10f      	bne.n	8007722 <HAL_TIM_PWM_Stop_DMA+0x106>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6a1a      	ldr	r2, [r3, #32]
 8007708:	f240 4344 	movw	r3, #1092	; 0x444
 800770c:	4013      	ands	r3, r2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d107      	bne.n	8007722 <HAL_TIM_PWM_Stop_DMA+0x106>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007720:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6a1a      	ldr	r2, [r3, #32]
 8007728:	f241 1311 	movw	r3, #4369	; 0x1111
 800772c:	4013      	ands	r3, r2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10f      	bne.n	8007752 <HAL_TIM_PWM_Stop_DMA+0x136>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6a1a      	ldr	r2, [r3, #32]
 8007738:	f240 4344 	movw	r3, #1092	; 0x444
 800773c:	4013      	ands	r3, r2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d107      	bne.n	8007752 <HAL_TIM_PWM_Stop_DMA+0x136>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0201 	bic.w	r2, r2, #1
 8007750:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <HAL_TIM_PWM_Stop_DMA+0x146>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007760:	e013      	b.n	800778a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b04      	cmp	r3, #4
 8007766:	d104      	bne.n	8007772 <HAL_TIM_PWM_Stop_DMA+0x156>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007770:	e00b      	b.n	800778a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b08      	cmp	r3, #8
 8007776:	d104      	bne.n	8007782 <HAL_TIM_PWM_Stop_DMA+0x166>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007780:	e003      	b.n	800778a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	40012c00 	.word	0x40012c00

08007798 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e093      	b.n	80078d4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7fc f813 	bl	80037ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2202      	movs	r2, #2
 80077ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	6812      	ldr	r2, [r2, #0]
 80077d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077dc:	f023 0307 	bic.w	r3, r3, #7
 80077e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3304      	adds	r3, #4
 80077ea:	4619      	mov	r1, r3
 80077ec:	4610      	mov	r0, r2
 80077ee:	f000 fce3 	bl	80081b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781a:	f023 0303 	bic.w	r3, r3, #3
 800781e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	021b      	lsls	r3, r3, #8
 800782a:	4313      	orrs	r3, r2
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	4313      	orrs	r3, r2
 8007830:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007838:	f023 030c 	bic.w	r3, r3, #12
 800783c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007844:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	68da      	ldr	r2, [r3, #12]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	4313      	orrs	r3, r2
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	011a      	lsls	r2, r3, #4
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	031b      	lsls	r3, r3, #12
 8007868:	4313      	orrs	r3, r2
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	4313      	orrs	r3, r2
 800786e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007876:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	4313      	orrs	r3, r2
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007904:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d110      	bne.n	800792e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d102      	bne.n	8007918 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007912:	7b7b      	ldrb	r3, [r7, #13]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d001      	beq.n	800791c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e069      	b.n	80079f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800792c:	e031      	b.n	8007992 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b04      	cmp	r3, #4
 8007932:	d110      	bne.n	8007956 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d102      	bne.n	8007940 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800793a:	7b3b      	ldrb	r3, [r7, #12]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d001      	beq.n	8007944 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e055      	b.n	80079f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007954:	e01d      	b.n	8007992 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d108      	bne.n	800796e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d105      	bne.n	800796e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007962:	7b7b      	ldrb	r3, [r7, #13]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d102      	bne.n	800796e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007968:	7b3b      	ldrb	r3, [r7, #12]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d001      	beq.n	8007972 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e03e      	b.n	80079f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2202      	movs	r2, #2
 8007976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2202      	movs	r2, #2
 800797e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2202      	movs	r2, #2
 8007986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2202      	movs	r2, #2
 800798e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <HAL_TIM_Encoder_Start+0xc4>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b04      	cmp	r3, #4
 800799c:	d008      	beq.n	80079b0 <HAL_TIM_Encoder_Start+0xd4>
 800799e:	e00f      	b.n	80079c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2201      	movs	r2, #1
 80079a6:	2100      	movs	r1, #0
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fe85 	bl	80086b8 <TIM_CCxChannelCmd>
      break;
 80079ae:	e016      	b.n	80079de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2201      	movs	r2, #1
 80079b6:	2104      	movs	r1, #4
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fe7d 	bl	80086b8 <TIM_CCxChannelCmd>
      break;
 80079be:	e00e      	b.n	80079de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2201      	movs	r2, #1
 80079c6:	2100      	movs	r1, #0
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 fe75 	bl	80086b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2201      	movs	r2, #1
 80079d4:	2104      	movs	r1, #4
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fe6e 	bl	80086b8 <TIM_CCxChannelCmd>
      break;
 80079dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f042 0201 	orr.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d122      	bne.n	8007a54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d11b      	bne.n	8007a54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f06f 0202 	mvn.w	r2, #2
 8007a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fac7 	bl	8007fce <HAL_TIM_IC_CaptureCallback>
 8007a40:	e005      	b.n	8007a4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7fb f810 	bl	8002a68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7fb f84b 	bl	8002ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0304 	and.w	r3, r3, #4
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d122      	bne.n	8007aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b04      	cmp	r3, #4
 8007a6e:	d11b      	bne.n	8007aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f06f 0204 	mvn.w	r2, #4
 8007a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa9d 	bl	8007fce <HAL_TIM_IC_CaptureCallback>
 8007a94:	e005      	b.n	8007aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7fa ffe6 	bl	8002a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fb f821 	bl	8002ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f003 0308 	and.w	r3, r3, #8
 8007ab2:	2b08      	cmp	r3, #8
 8007ab4:	d122      	bne.n	8007afc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f003 0308 	and.w	r3, r3, #8
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	d11b      	bne.n	8007afc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f06f 0208 	mvn.w	r2, #8
 8007acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2204      	movs	r2, #4
 8007ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa73 	bl	8007fce <HAL_TIM_IC_CaptureCallback>
 8007ae8:	e005      	b.n	8007af6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fa ffbc 	bl	8002a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7fa fff7 	bl	8002ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0310 	and.w	r3, r3, #16
 8007b06:	2b10      	cmp	r3, #16
 8007b08:	d122      	bne.n	8007b50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f003 0310 	and.w	r3, r3, #16
 8007b14:	2b10      	cmp	r3, #16
 8007b16:	d11b      	bne.n	8007b50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f06f 0210 	mvn.w	r2, #16
 8007b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2208      	movs	r2, #8
 8007b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fa49 	bl	8007fce <HAL_TIM_IC_CaptureCallback>
 8007b3c:	e005      	b.n	8007b4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7fa ff92 	bl	8002a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7fa ffcd 	bl	8002ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d10e      	bne.n	8007b7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d107      	bne.n	8007b7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f06f 0201 	mvn.w	r2, #1
 8007b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fa20 	bl	8007fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b86:	2b80      	cmp	r3, #128	; 0x80
 8007b88:	d10e      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b94:	2b80      	cmp	r3, #128	; 0x80
 8007b96:	d107      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fe13 	bl	80087ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb2:	2b40      	cmp	r3, #64	; 0x40
 8007bb4:	d10e      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc0:	2b40      	cmp	r3, #64	; 0x40
 8007bc2:	d107      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa0f 	bl	8007ff2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0320 	and.w	r3, r3, #32
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d10e      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b20      	cmp	r3, #32
 8007bee:	d107      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f06f 0220 	mvn.w	r2, #32
 8007bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fdde 	bl	80087bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d101      	bne.n	8007c22 <HAL_TIM_OC_ConfigChannel+0x1a>
 8007c1e:	2302      	movs	r3, #2
 8007c20:	e046      	b.n	8007cb0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b0c      	cmp	r3, #12
 8007c2e:	d839      	bhi.n	8007ca4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8007c30:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <HAL_TIM_OC_ConfigChannel+0x30>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c6d 	.word	0x08007c6d
 8007c3c:	08007ca5 	.word	0x08007ca5
 8007c40:	08007ca5 	.word	0x08007ca5
 8007c44:	08007ca5 	.word	0x08007ca5
 8007c48:	08007c7b 	.word	0x08007c7b
 8007c4c:	08007ca5 	.word	0x08007ca5
 8007c50:	08007ca5 	.word	0x08007ca5
 8007c54:	08007ca5 	.word	0x08007ca5
 8007c58:	08007c89 	.word	0x08007c89
 8007c5c:	08007ca5 	.word	0x08007ca5
 8007c60:	08007ca5 	.word	0x08007ca5
 8007c64:	08007ca5 	.word	0x08007ca5
 8007c68:	08007c97 	.word	0x08007c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fb02 	bl	800827c <TIM_OC1_SetConfig>
      break;
 8007c78:	e015      	b.n	8007ca6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68b9      	ldr	r1, [r7, #8]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fb61 	bl	8008348 <TIM_OC2_SetConfig>
      break;
 8007c86:	e00e      	b.n	8007ca6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fbc4 	bl	800841c <TIM_OC3_SetConfig>
      break;
 8007c94:	e007      	b.n	8007ca6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68b9      	ldr	r1, [r7, #8]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 fc27 	bl	80084f0 <TIM_OC4_SetConfig>
      break;
 8007ca2:	e000      	b.n	8007ca6 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8007ca4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d101      	bne.n	8007cd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007cce:	2302      	movs	r3, #2
 8007cd0:	e0ac      	b.n	8007e2c <HAL_TIM_PWM_ConfigChannel+0x174>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b0c      	cmp	r3, #12
 8007cde:	f200 809f 	bhi.w	8007e20 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007ce2:	a201      	add	r2, pc, #4	; (adr r2, 8007ce8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce8:	08007d1d 	.word	0x08007d1d
 8007cec:	08007e21 	.word	0x08007e21
 8007cf0:	08007e21 	.word	0x08007e21
 8007cf4:	08007e21 	.word	0x08007e21
 8007cf8:	08007d5d 	.word	0x08007d5d
 8007cfc:	08007e21 	.word	0x08007e21
 8007d00:	08007e21 	.word	0x08007e21
 8007d04:	08007e21 	.word	0x08007e21
 8007d08:	08007d9f 	.word	0x08007d9f
 8007d0c:	08007e21 	.word	0x08007e21
 8007d10:	08007e21 	.word	0x08007e21
 8007d14:	08007e21 	.word	0x08007e21
 8007d18:	08007ddf 	.word	0x08007ddf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68b9      	ldr	r1, [r7, #8]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 faaa 	bl	800827c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	699a      	ldr	r2, [r3, #24]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0208 	orr.w	r2, r2, #8
 8007d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699a      	ldr	r2, [r3, #24]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0204 	bic.w	r2, r2, #4
 8007d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6999      	ldr	r1, [r3, #24]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	691a      	ldr	r2, [r3, #16]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	619a      	str	r2, [r3, #24]
      break;
 8007d5a:	e062      	b.n	8007e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 faf0 	bl	8008348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	699a      	ldr	r2, [r3, #24]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699a      	ldr	r2, [r3, #24]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6999      	ldr	r1, [r3, #24]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	021a      	lsls	r2, r3, #8
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	619a      	str	r2, [r3, #24]
      break;
 8007d9c:	e041      	b.n	8007e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68b9      	ldr	r1, [r7, #8]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 fb39 	bl	800841c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69da      	ldr	r2, [r3, #28]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f042 0208 	orr.w	r2, r2, #8
 8007db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69da      	ldr	r2, [r3, #28]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0204 	bic.w	r2, r2, #4
 8007dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69d9      	ldr	r1, [r3, #28]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	430a      	orrs	r2, r1
 8007dda:	61da      	str	r2, [r3, #28]
      break;
 8007ddc:	e021      	b.n	8007e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 fb83 	bl	80084f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69da      	ldr	r2, [r3, #28]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69da      	ldr	r2, [r3, #28]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	69d9      	ldr	r1, [r3, #28]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	021a      	lsls	r2, r3, #8
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	61da      	str	r2, [r3, #28]
      break;
 8007e1e:	e000      	b.n	8007e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007e20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d101      	bne.n	8007e4c <HAL_TIM_ConfigClockSource+0x18>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e0b3      	b.n	8007fb4 <HAL_TIM_ConfigClockSource+0x180>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e84:	d03e      	beq.n	8007f04 <HAL_TIM_ConfigClockSource+0xd0>
 8007e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e8a:	f200 8087 	bhi.w	8007f9c <HAL_TIM_ConfigClockSource+0x168>
 8007e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e92:	f000 8085 	beq.w	8007fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8007e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9a:	d87f      	bhi.n	8007f9c <HAL_TIM_ConfigClockSource+0x168>
 8007e9c:	2b70      	cmp	r3, #112	; 0x70
 8007e9e:	d01a      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0xa2>
 8007ea0:	2b70      	cmp	r3, #112	; 0x70
 8007ea2:	d87b      	bhi.n	8007f9c <HAL_TIM_ConfigClockSource+0x168>
 8007ea4:	2b60      	cmp	r3, #96	; 0x60
 8007ea6:	d050      	beq.n	8007f4a <HAL_TIM_ConfigClockSource+0x116>
 8007ea8:	2b60      	cmp	r3, #96	; 0x60
 8007eaa:	d877      	bhi.n	8007f9c <HAL_TIM_ConfigClockSource+0x168>
 8007eac:	2b50      	cmp	r3, #80	; 0x50
 8007eae:	d03c      	beq.n	8007f2a <HAL_TIM_ConfigClockSource+0xf6>
 8007eb0:	2b50      	cmp	r3, #80	; 0x50
 8007eb2:	d873      	bhi.n	8007f9c <HAL_TIM_ConfigClockSource+0x168>
 8007eb4:	2b40      	cmp	r3, #64	; 0x40
 8007eb6:	d058      	beq.n	8007f6a <HAL_TIM_ConfigClockSource+0x136>
 8007eb8:	2b40      	cmp	r3, #64	; 0x40
 8007eba:	d86f      	bhi.n	8007f9c <HAL_TIM_ConfigClockSource+0x168>
 8007ebc:	2b30      	cmp	r3, #48	; 0x30
 8007ebe:	d064      	beq.n	8007f8a <HAL_TIM_ConfigClockSource+0x156>
 8007ec0:	2b30      	cmp	r3, #48	; 0x30
 8007ec2:	d86b      	bhi.n	8007f9c <HAL_TIM_ConfigClockSource+0x168>
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	d060      	beq.n	8007f8a <HAL_TIM_ConfigClockSource+0x156>
 8007ec8:	2b20      	cmp	r3, #32
 8007eca:	d867      	bhi.n	8007f9c <HAL_TIM_ConfigClockSource+0x168>
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d05c      	beq.n	8007f8a <HAL_TIM_ConfigClockSource+0x156>
 8007ed0:	2b10      	cmp	r3, #16
 8007ed2:	d05a      	beq.n	8007f8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007ed4:	e062      	b.n	8007f9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6818      	ldr	r0, [r3, #0]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	6899      	ldr	r1, [r3, #8]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	f000 fbc8 	bl	800867a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ef8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	609a      	str	r2, [r3, #8]
      break;
 8007f02:	e04e      	b.n	8007fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6818      	ldr	r0, [r3, #0]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	6899      	ldr	r1, [r3, #8]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f000 fbb1 	bl	800867a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f26:	609a      	str	r2, [r3, #8]
      break;
 8007f28:	e03b      	b.n	8007fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6818      	ldr	r0, [r3, #0]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	6859      	ldr	r1, [r3, #4]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	461a      	mov	r2, r3
 8007f38:	f000 fb28 	bl	800858c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2150      	movs	r1, #80	; 0x50
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fb7f 	bl	8008646 <TIM_ITRx_SetConfig>
      break;
 8007f48:	e02b      	b.n	8007fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6818      	ldr	r0, [r3, #0]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	6859      	ldr	r1, [r3, #4]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	461a      	mov	r2, r3
 8007f58:	f000 fb46 	bl	80085e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2160      	movs	r1, #96	; 0x60
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 fb6f 	bl	8008646 <TIM_ITRx_SetConfig>
      break;
 8007f68:	e01b      	b.n	8007fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6818      	ldr	r0, [r3, #0]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	6859      	ldr	r1, [r3, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	461a      	mov	r2, r3
 8007f78:	f000 fb08 	bl	800858c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2140      	movs	r1, #64	; 0x40
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 fb5f 	bl	8008646 <TIM_ITRx_SetConfig>
      break;
 8007f88:	e00b      	b.n	8007fa2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4619      	mov	r1, r3
 8007f94:	4610      	mov	r0, r2
 8007f96:	f000 fb56 	bl	8008646 <TIM_ITRx_SetConfig>
        break;
 8007f9a:	e002      	b.n	8007fa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f9c:	bf00      	nop
 8007f9e:	e000      	b.n	8007fa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007fa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bc80      	pop	{r7}
 8007fcc:	4770      	bx	lr

08007fce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bc80      	pop	{r7}
 8007fde:	4770      	bx	lr

08007fe0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bc80      	pop	{r7}
 8007ff0:	4770      	bx	lr

08007ff2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr

08008004 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	bc80      	pop	{r7}
 8008014:	4770      	bx	lr

08008016 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	429a      	cmp	r2, r3
 800802c:	d107      	bne.n	800803e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800803c:	e02a      	b.n	8008094 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	429a      	cmp	r2, r3
 8008046:	d107      	bne.n	8008058 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2202      	movs	r2, #2
 800804c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008056:	e01d      	b.n	8008094 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	429a      	cmp	r2, r3
 8008060:	d107      	bne.n	8008072 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2204      	movs	r2, #4
 8008066:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008070:	e010      	b.n	8008094 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	429a      	cmp	r2, r3
 800807a:	d107      	bne.n	800808c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2208      	movs	r2, #8
 8008080:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800808a:	e003      	b.n	8008094 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f7ff ffb5 	bl	8008004 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	771a      	strb	r2, [r3, #28]
}
 80080a0:	bf00      	nop
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d10b      	bne.n	80080d8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2201      	movs	r2, #1
 80080c4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d136      	bne.n	800813c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080d6:	e031      	b.n	800813c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d10b      	bne.n	80080fa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2202      	movs	r2, #2
 80080e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d125      	bne.n	800813c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080f8:	e020      	b.n	800813c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	429a      	cmp	r2, r3
 8008102:	d10b      	bne.n	800811c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2204      	movs	r2, #4
 8008108:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d114      	bne.n	800813c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800811a:	e00f      	b.n	800813c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	429a      	cmp	r2, r3
 8008124:	d10a      	bne.n	800813c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2208      	movs	r2, #8
 800812a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d103      	bne.n	800813c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f7fa fcd1 	bl	8002ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	771a      	strb	r2, [r3, #28]
}
 8008148:	bf00      	nop
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	429a      	cmp	r2, r3
 8008166:	d103      	bne.n	8008170 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2201      	movs	r2, #1
 800816c:	771a      	strb	r2, [r3, #28]
 800816e:	e019      	b.n	80081a4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	429a      	cmp	r2, r3
 8008178:	d103      	bne.n	8008182 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2202      	movs	r2, #2
 800817e:	771a      	strb	r2, [r3, #28]
 8008180:	e010      	b.n	80081a4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	429a      	cmp	r2, r3
 800818a:	d103      	bne.n	8008194 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2204      	movs	r2, #4
 8008190:	771a      	strb	r2, [r3, #28]
 8008192:	e007      	b.n	80081a4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	429a      	cmp	r2, r3
 800819c:	d102      	bne.n	80081a4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2208      	movs	r2, #8
 80081a2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff ff1b 	bl	8007fe0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	771a      	strb	r2, [r3, #28]
}
 80081b0:	bf00      	nop
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a29      	ldr	r2, [pc, #164]	; (8008270 <TIM_Base_SetConfig+0xb8>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d00b      	beq.n	80081e8 <TIM_Base_SetConfig+0x30>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d6:	d007      	beq.n	80081e8 <TIM_Base_SetConfig+0x30>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a26      	ldr	r2, [pc, #152]	; (8008274 <TIM_Base_SetConfig+0xbc>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d003      	beq.n	80081e8 <TIM_Base_SetConfig+0x30>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a25      	ldr	r2, [pc, #148]	; (8008278 <TIM_Base_SetConfig+0xc0>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d108      	bne.n	80081fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a1c      	ldr	r2, [pc, #112]	; (8008270 <TIM_Base_SetConfig+0xb8>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00b      	beq.n	800821a <TIM_Base_SetConfig+0x62>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008208:	d007      	beq.n	800821a <TIM_Base_SetConfig+0x62>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a19      	ldr	r2, [pc, #100]	; (8008274 <TIM_Base_SetConfig+0xbc>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d003      	beq.n	800821a <TIM_Base_SetConfig+0x62>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a18      	ldr	r2, [pc, #96]	; (8008278 <TIM_Base_SetConfig+0xc0>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d108      	bne.n	800822c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	4313      	orrs	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	689a      	ldr	r2, [r3, #8]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a07      	ldr	r2, [pc, #28]	; (8008270 <TIM_Base_SetConfig+0xb8>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d103      	bne.n	8008260 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	691a      	ldr	r2, [r3, #16]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	615a      	str	r2, [r3, #20]
}
 8008266:	bf00      	nop
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	bc80      	pop	{r7}
 800826e:	4770      	bx	lr
 8008270:	40012c00 	.word	0x40012c00
 8008274:	40000400 	.word	0x40000400
 8008278:	40000800 	.word	0x40000800

0800827c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	f023 0201 	bic.w	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 0303 	bic.w	r3, r3, #3
 80082b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f023 0302 	bic.w	r3, r3, #2
 80082c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a1c      	ldr	r2, [pc, #112]	; (8008344 <TIM_OC1_SetConfig+0xc8>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d10c      	bne.n	80082f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f023 0308 	bic.w	r3, r3, #8
 80082de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f023 0304 	bic.w	r3, r3, #4
 80082f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a13      	ldr	r2, [pc, #76]	; (8008344 <TIM_OC1_SetConfig+0xc8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d111      	bne.n	800831e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	4313      	orrs	r3, r2
 8008312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	621a      	str	r2, [r3, #32]
}
 8008338:	bf00      	nop
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	bc80      	pop	{r7}
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	40012c00 	.word	0x40012c00

08008348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	f023 0210 	bic.w	r2, r3, #16
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800837e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	4313      	orrs	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f023 0320 	bic.w	r3, r3, #32
 8008392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	011b      	lsls	r3, r3, #4
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	4313      	orrs	r3, r2
 800839e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a1d      	ldr	r2, [pc, #116]	; (8008418 <TIM_OC2_SetConfig+0xd0>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d10d      	bne.n	80083c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	011b      	lsls	r3, r3, #4
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a14      	ldr	r2, [pc, #80]	; (8008418 <TIM_OC2_SetConfig+0xd0>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d113      	bne.n	80083f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	621a      	str	r2, [r3, #32]
}
 800840e:	bf00      	nop
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	bc80      	pop	{r7}
 8008416:	4770      	bx	lr
 8008418:	40012c00 	.word	0x40012c00

0800841c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0303 	bic.w	r3, r3, #3
 8008452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	021b      	lsls	r3, r3, #8
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a1d      	ldr	r2, [pc, #116]	; (80084ec <TIM_OC3_SetConfig+0xd0>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d10d      	bne.n	8008496 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	021b      	lsls	r3, r3, #8
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a14      	ldr	r2, [pc, #80]	; (80084ec <TIM_OC3_SetConfig+0xd0>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d113      	bne.n	80084c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	621a      	str	r2, [r3, #32]
}
 80084e0:	bf00      	nop
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bc80      	pop	{r7}
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	40012c00 	.word	0x40012c00

080084f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800851e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	4313      	orrs	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800853a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	031b      	lsls	r3, r3, #12
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a0f      	ldr	r2, [pc, #60]	; (8008588 <TIM_OC4_SetConfig+0x98>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d109      	bne.n	8008564 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008556:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	019b      	lsls	r3, r3, #6
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	4313      	orrs	r3, r2
 8008562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	621a      	str	r2, [r3, #32]
}
 800857e:	bf00      	nop
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	bc80      	pop	{r7}
 8008586:	4770      	bx	lr
 8008588:	40012c00 	.word	0x40012c00

0800858c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	f023 0201 	bic.w	r2, r3, #1
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f023 030a 	bic.w	r3, r3, #10
 80085c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	621a      	str	r2, [r3, #32]
}
 80085de:	bf00      	nop
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bc80      	pop	{r7}
 80085e6:	4770      	bx	lr

080085e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a1b      	ldr	r3, [r3, #32]
 80085f8:	f023 0210 	bic.w	r2, r3, #16
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008612:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	031b      	lsls	r3, r3, #12
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	4313      	orrs	r3, r2
 800861c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008624:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	011b      	lsls	r3, r3, #4
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	4313      	orrs	r3, r2
 800862e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	621a      	str	r2, [r3, #32]
}
 800863c:	bf00      	nop
 800863e:	371c      	adds	r7, #28
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr

08008646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008646:	b480      	push	{r7}
 8008648:	b085      	sub	sp, #20
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4313      	orrs	r3, r2
 8008664:	f043 0307 	orr.w	r3, r3, #7
 8008668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	609a      	str	r2, [r3, #8]
}
 8008670:	bf00      	nop
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	bc80      	pop	{r7}
 8008678:	4770      	bx	lr

0800867a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800867a:	b480      	push	{r7}
 800867c:	b087      	sub	sp, #28
 800867e:	af00      	add	r7, sp, #0
 8008680:	60f8      	str	r0, [r7, #12]
 8008682:	60b9      	str	r1, [r7, #8]
 8008684:	607a      	str	r2, [r7, #4]
 8008686:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008694:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	021a      	lsls	r2, r3, #8
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	431a      	orrs	r2, r3
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	609a      	str	r2, [r3, #8]
}
 80086ae:	bf00      	nop
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bc80      	pop	{r7}
 80086b6:	4770      	bx	lr

080086b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f003 031f 	and.w	r3, r3, #31
 80086ca:	2201      	movs	r2, #1
 80086cc:	fa02 f303 	lsl.w	r3, r2, r3
 80086d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6a1a      	ldr	r2, [r3, #32]
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	43db      	mvns	r3, r3
 80086da:	401a      	ands	r2, r3
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6a1a      	ldr	r2, [r3, #32]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f003 031f 	and.w	r3, r3, #31
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	fa01 f303 	lsl.w	r3, r1, r3
 80086f0:	431a      	orrs	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	621a      	str	r2, [r3, #32]
}
 80086f6:	bf00      	nop
 80086f8:	371c      	adds	r7, #28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr

08008700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008710:	2b01      	cmp	r3, #1
 8008712:	d101      	bne.n	8008718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008714:	2302      	movs	r3, #2
 8008716:	e046      	b.n	80087a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2202      	movs	r2, #2
 8008724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a16      	ldr	r2, [pc, #88]	; (80087b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00e      	beq.n	800877a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008764:	d009      	beq.n	800877a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a12      	ldr	r2, [pc, #72]	; (80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d004      	beq.n	800877a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a10      	ldr	r2, [pc, #64]	; (80087b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d10c      	bne.n	8008794 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	4313      	orrs	r3, r2
 800878a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bc80      	pop	{r7}
 80087ae:	4770      	bx	lr
 80087b0:	40012c00 	.word	0x40012c00
 80087b4:	40000400 	.word	0x40000400
 80087b8:	40000800 	.word	0x40000800

080087bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bc80      	pop	{r7}
 80087cc:	4770      	bx	lr

080087ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	bc80      	pop	{r7}
 80087de:	4770      	bx	lr

080087e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80087e0:	b084      	sub	sp, #16
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	f107 0014 	add.w	r0, r7, #20
 80087ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bc80      	pop	{r7}
 80087fc:	b004      	add	sp, #16
 80087fe:	4770      	bx	lr

08008800 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008810:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008814:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	b29a      	uxth	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3714      	adds	r7, #20
 8008826:	46bd      	mov	sp, r7
 8008828:	bc80      	pop	{r7}
 800882a:	4770      	bx	lr

0800882c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008834:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008838:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008840:	b29a      	uxth	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	b29b      	uxth	r3, r3
 8008846:	43db      	mvns	r3, r3
 8008848:	b29b      	uxth	r3, r3
 800884a:	4013      	ands	r3, r2
 800884c:	b29a      	uxth	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	bc80      	pop	{r7}
 800885e:	4770      	bx	lr

08008860 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	bc80      	pop	{r7}
 8008876:	4770      	bx	lr

08008878 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008878:	b084      	sub	sp, #16
 800887a:	b480      	push	{r7}
 800887c:	b083      	sub	sp, #12
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	f107 0014 	add.w	r0, r7, #20
 8008886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	b004      	add	sp, #16
 80088b6:	4770      	bx	lr

080088b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b09b      	sub	sp, #108	; 0x6c
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80088da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	78db      	ldrb	r3, [r3, #3]
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d81f      	bhi.n	800892a <USB_ActivateEndpoint+0x72>
 80088ea:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <USB_ActivateEndpoint+0x38>)
 80088ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f0:	08008901 	.word	0x08008901
 80088f4:	0800891d 	.word	0x0800891d
 80088f8:	08008933 	.word	0x08008933
 80088fc:	0800890f 	.word	0x0800890f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008900:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008908:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800890c:	e012      	b.n	8008934 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800890e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008912:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008916:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800891a:	e00b      	b.n	8008934 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800891c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008920:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008924:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008928:	e004      	b.n	8008934 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008930:	e000      	b.n	8008934 <USB_ActivateEndpoint+0x7c>
      break;
 8008932:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	441a      	add	r2, r3
 800893e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800894a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800894e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008952:	b29b      	uxth	r3, r3
 8008954:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4413      	add	r3, r2
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29b      	uxth	r3, r3
 8008964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800896c:	b29a      	uxth	r2, r3
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	b29b      	uxth	r3, r3
 8008974:	4313      	orrs	r3, r2
 8008976:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	441a      	add	r2, r3
 8008984:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800898c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008998:	b29b      	uxth	r3, r3
 800899a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	7b1b      	ldrb	r3, [r3, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f040 8149 	bne.w	8008c38 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	785b      	ldrb	r3, [r3, #1]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 8084 	beq.w	8008ab8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	617b      	str	r3, [r7, #20]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	461a      	mov	r2, r3
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	4413      	add	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	011a      	lsls	r2, r3, #4
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	88db      	ldrh	r3, [r3, #6]
 80089d8:	085b      	lsrs	r3, r3, #1
 80089da:	b29b      	uxth	r3, r3
 80089dc:	005b      	lsls	r3, r3, #1
 80089de:	b29a      	uxth	r2, r3
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	81fb      	strh	r3, [r7, #14]
 80089f2:	89fb      	ldrh	r3, [r7, #14]
 80089f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01b      	beq.n	8008a34 <USB_ActivateEndpoint+0x17c>
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a12:	81bb      	strh	r3, [r7, #12]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	441a      	add	r2, r3
 8008a1e:	89bb      	ldrh	r3, [r7, #12]
 8008a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	78db      	ldrb	r3, [r3, #3]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d020      	beq.n	8008a7e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a52:	813b      	strh	r3, [r7, #8]
 8008a54:	893b      	ldrh	r3, [r7, #8]
 8008a56:	f083 0320 	eor.w	r3, r3, #32
 8008a5a:	813b      	strh	r3, [r7, #8]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	441a      	add	r2, r3
 8008a66:	893b      	ldrh	r3, [r7, #8]
 8008a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	8013      	strh	r3, [r2, #0]
 8008a7c:	e27f      	b.n	8008f7e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a94:	817b      	strh	r3, [r7, #10]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	441a      	add	r2, r3
 8008aa0:	897b      	ldrh	r3, [r7, #10]
 8008aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	8013      	strh	r3, [r2, #0]
 8008ab6:	e262      	b.n	8008f7e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac8:	4413      	add	r3, r2
 8008aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	011a      	lsls	r2, r3, #4
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	88db      	ldrh	r3, [r3, #6]
 8008ae0:	085b      	lsrs	r3, r3, #1
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aea:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	461a      	mov	r2, r3
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	4413      	add	r3, r2
 8008afe:	627b      	str	r3, [r7, #36]	; 0x24
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	011a      	lsls	r2, r3, #4
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	4413      	add	r3, r2
 8008b0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b0e:	623b      	str	r3, [r7, #32]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d112      	bne.n	8008b3e <USB_ActivateEndpoint+0x286>
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	881b      	ldrh	r3, [r3, #0]
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	6a3b      	ldr	r3, [r7, #32]
 8008b3a:	801a      	strh	r2, [r3, #0]
 8008b3c:	e02f      	b.n	8008b9e <USB_ActivateEndpoint+0x2e6>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	2b3e      	cmp	r3, #62	; 0x3e
 8008b44:	d813      	bhi.n	8008b6e <USB_ActivateEndpoint+0x2b6>
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	085b      	lsrs	r3, r3, #1
 8008b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <USB_ActivateEndpoint+0x2a8>
 8008b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	663b      	str	r3, [r7, #96]	; 0x60
 8008b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	029b      	lsls	r3, r3, #10
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	801a      	strh	r2, [r3, #0]
 8008b6c:	e017      	b.n	8008b9e <USB_ActivateEndpoint+0x2e6>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	095b      	lsrs	r3, r3, #5
 8008b74:	663b      	str	r3, [r7, #96]	; 0x60
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	f003 031f 	and.w	r3, r3, #31
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d102      	bne.n	8008b88 <USB_ActivateEndpoint+0x2d0>
 8008b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b84:	3b01      	subs	r3, #1
 8008b86:	663b      	str	r3, [r7, #96]	; 0x60
 8008b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	029b      	lsls	r3, r3, #10
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	83fb      	strh	r3, [r7, #30]
 8008bac:	8bfb      	ldrh	r3, [r7, #30]
 8008bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d01b      	beq.n	8008bee <USB_ActivateEndpoint+0x336>
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bcc:	83bb      	strh	r3, [r7, #28]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	441a      	add	r2, r3
 8008bd8:	8bbb      	ldrh	r3, [r7, #28]
 8008bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008be2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c04:	837b      	strh	r3, [r7, #26]
 8008c06:	8b7b      	ldrh	r3, [r7, #26]
 8008c08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c0c:	837b      	strh	r3, [r7, #26]
 8008c0e:	8b7b      	ldrh	r3, [r7, #26]
 8008c10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c14:	837b      	strh	r3, [r7, #26]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	441a      	add	r2, r3
 8008c20:	8b7b      	ldrh	r3, [r7, #26]
 8008c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	8013      	strh	r3, [r2, #0]
 8008c36:	e1a2      	b.n	8008f7e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4413      	add	r3, r2
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	441a      	add	r2, r3
 8008c5c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c68:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	461a      	mov	r2, r3
 8008c82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c84:	4413      	add	r3, r2
 8008c86:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	011a      	lsls	r2, r3, #4
 8008c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c96:	657b      	str	r3, [r7, #84]	; 0x54
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	891b      	ldrh	r3, [r3, #8]
 8008c9c:	085b      	lsrs	r3, r3, #1
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	005b      	lsls	r3, r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ca6:	801a      	strh	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	653b      	str	r3, [r7, #80]	; 0x50
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cb8:	4413      	add	r3, r2
 8008cba:	653b      	str	r3, [r7, #80]	; 0x50
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	011a      	lsls	r2, r3, #4
 8008cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	895b      	ldrh	r3, [r3, #10]
 8008cd0:	085b      	lsrs	r3, r3, #1
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cda:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	785b      	ldrb	r3, [r3, #1]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f040 8091 	bne.w	8008e08 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008cf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d01b      	beq.n	8008d36 <USB_ActivateEndpoint+0x47e>
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d14:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	441a      	add	r2, r3
 8008d20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	873b      	strh	r3, [r7, #56]	; 0x38
 8008d44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d01b      	beq.n	8008d86 <USB_ActivateEndpoint+0x4ce>
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	881b      	ldrh	r3, [r3, #0]
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	441a      	add	r2, r3
 8008d70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4413      	add	r3, r2
 8008d90:	881b      	ldrh	r3, [r3, #0]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008d9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008da0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008da4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008da6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008da8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008dac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	441a      	add	r2, r3
 8008db8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de4:	867b      	strh	r3, [r7, #50]	; 0x32
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	441a      	add	r2, r3
 8008df0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	8013      	strh	r3, [r2, #0]
 8008e06:	e0ba      	b.n	8008f7e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008e18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d01d      	beq.n	8008e60 <USB_ActivateEndpoint+0x5a8>
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	441a      	add	r2, r3
 8008e48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008e70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d01d      	beq.n	8008eb8 <USB_ActivateEndpoint+0x600>
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4413      	add	r3, r2
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	441a      	add	r2, r3
 8008ea0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	78db      	ldrb	r3, [r3, #3]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d024      	beq.n	8008f0a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ed6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008eda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008ede:	f083 0320 	eor.w	r3, r3, #32
 8008ee2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	441a      	add	r2, r3
 8008ef0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	8013      	strh	r3, [r2, #0]
 8008f08:	e01d      	b.n	8008f46 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	441a      	add	r2, r3
 8008f2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4413      	add	r3, r2
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	441a      	add	r2, r3
 8008f68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008f7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	376c      	adds	r7, #108	; 0x6c
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bc80      	pop	{r7}
 8008f8a:	4770      	bx	lr

08008f8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b08d      	sub	sp, #52	; 0x34
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	7b1b      	ldrb	r3, [r3, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f040 808e 	bne.w	80090bc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	785b      	ldrb	r3, [r3, #1]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d044      	beq.n	8009032 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	81bb      	strh	r3, [r7, #12]
 8008fb6:	89bb      	ldrh	r3, [r7, #12]
 8008fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d01b      	beq.n	8008ff8 <USB_DeactivateEndpoint+0x6c>
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd6:	817b      	strh	r3, [r7, #10]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	441a      	add	r2, r3
 8008fe2:	897b      	ldrh	r3, [r7, #10]
 8008fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ff0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	b29b      	uxth	r3, r3
 8009006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800900a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800900e:	813b      	strh	r3, [r7, #8]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	441a      	add	r2, r3
 800901a:	893b      	ldrh	r3, [r7, #8]
 800901c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800902c:	b29b      	uxth	r3, r3
 800902e:	8013      	strh	r3, [r2, #0]
 8009030:	e192      	b.n	8009358 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	827b      	strh	r3, [r7, #18]
 8009040:	8a7b      	ldrh	r3, [r7, #18]
 8009042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d01b      	beq.n	8009082 <USB_DeactivateEndpoint+0xf6>
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4413      	add	r3, r2
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	b29b      	uxth	r3, r3
 8009058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800905c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009060:	823b      	strh	r3, [r7, #16]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	441a      	add	r2, r3
 800906c:	8a3b      	ldrh	r3, [r7, #16]
 800906e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800907a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800907e:	b29b      	uxth	r3, r3
 8009080:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	b29b      	uxth	r3, r3
 8009090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009098:	81fb      	strh	r3, [r7, #14]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	441a      	add	r2, r3
 80090a4:	89fb      	ldrh	r3, [r7, #14]
 80090a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	8013      	strh	r3, [r2, #0]
 80090ba:	e14d      	b.n	8009358 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	785b      	ldrb	r3, [r3, #1]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f040 80a5 	bne.w	8009210 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	843b      	strh	r3, [r7, #32]
 80090d4:	8c3b      	ldrh	r3, [r7, #32]
 80090d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01b      	beq.n	8009116 <USB_DeactivateEndpoint+0x18a>
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f4:	83fb      	strh	r3, [r7, #30]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	441a      	add	r2, r3
 8009100:	8bfb      	ldrh	r3, [r7, #30]
 8009102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800910a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800910e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009112:	b29b      	uxth	r3, r3
 8009114:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	83bb      	strh	r3, [r7, #28]
 8009124:	8bbb      	ldrh	r3, [r7, #28]
 8009126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912a:	2b00      	cmp	r3, #0
 800912c:	d01b      	beq.n	8009166 <USB_DeactivateEndpoint+0x1da>
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009144:	837b      	strh	r3, [r7, #26]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	441a      	add	r2, r3
 8009150:	8b7b      	ldrh	r3, [r7, #26]
 8009152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800915a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800915e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009162:	b29b      	uxth	r3, r3
 8009164:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	881b      	ldrh	r3, [r3, #0]
 8009172:	b29b      	uxth	r3, r3
 8009174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800917c:	833b      	strh	r3, [r7, #24]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	441a      	add	r2, r3
 8009188:	8b3b      	ldrh	r3, [r7, #24]
 800918a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800918e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009196:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800919a:	b29b      	uxth	r3, r3
 800919c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b4:	82fb      	strh	r3, [r7, #22]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	441a      	add	r2, r3
 80091c0:	8afb      	ldrh	r3, [r7, #22]
 80091c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ec:	82bb      	strh	r3, [r7, #20]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	441a      	add	r2, r3
 80091f8:	8abb      	ldrh	r3, [r7, #20]
 80091fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800920a:	b29b      	uxth	r3, r3
 800920c:	8013      	strh	r3, [r2, #0]
 800920e:	e0a3      	b.n	8009358 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800921e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d01b      	beq.n	8009260 <USB_DeactivateEndpoint+0x2d4>
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4413      	add	r3, r2
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	b29b      	uxth	r3, r3
 8009236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800923a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	441a      	add	r2, r3
 800924a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800924c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800925c:	b29b      	uxth	r3, r3
 800925e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800926e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009274:	2b00      	cmp	r3, #0
 8009276:	d01b      	beq.n	80092b0 <USB_DeactivateEndpoint+0x324>
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	b29b      	uxth	r3, r3
 8009286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800928a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928e:	853b      	strh	r3, [r7, #40]	; 0x28
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	441a      	add	r2, r3
 800929a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800929c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	441a      	add	r2, r3
 80092d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	441a      	add	r2, r3
 800930a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800930c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931c:	b29b      	uxth	r3, r3
 800931e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	b29b      	uxth	r3, r3
 800932e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009336:	847b      	strh	r3, [r7, #34]	; 0x22
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	441a      	add	r2, r3
 8009342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800934c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009354:	b29b      	uxth	r3, r3
 8009356:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3734      	adds	r7, #52	; 0x34
 800935e:	46bd      	mov	sp, r7
 8009360:	bc80      	pop	{r7}
 8009362:	4770      	bx	lr

08009364 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b0cc      	sub	sp, #304	; 0x130
 8009368:	af00      	add	r7, sp, #0
 800936a:	1d3b      	adds	r3, r7, #4
 800936c:	6018      	str	r0, [r3, #0]
 800936e:	463b      	mov	r3, r7
 8009370:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009372:	463b      	mov	r3, r7
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	785b      	ldrb	r3, [r3, #1]
 8009378:	2b01      	cmp	r3, #1
 800937a:	f040 872e 	bne.w	800a1da <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800937e:	463b      	mov	r3, r7
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	699a      	ldr	r2, [r3, #24]
 8009384:	463b      	mov	r3, r7
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	429a      	cmp	r2, r3
 800938c:	d905      	bls.n	800939a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800938e:	463b      	mov	r3, r7
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009398:	e004      	b.n	80093a4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800939a:	463b      	mov	r3, r7
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80093a4:	463b      	mov	r3, r7
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	7b1b      	ldrb	r3, [r3, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d134      	bne.n	8009418 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80093ae:	463b      	mov	r3, r7
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6959      	ldr	r1, [r3, #20]
 80093b4:	463b      	mov	r3, r7
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	88da      	ldrh	r2, [r3, #6]
 80093ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093be:	b29b      	uxth	r3, r3
 80093c0:	1d38      	adds	r0, r7, #4
 80093c2:	6800      	ldr	r0, [r0, #0]
 80093c4:	f001 fc03 	bl	800abce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80093c8:	f107 0310 	add.w	r3, r7, #16
 80093cc:	1d3a      	adds	r2, r7, #4
 80093ce:	6812      	ldr	r2, [r2, #0]
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	1d3b      	adds	r3, r7, #4
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093da:	b29b      	uxth	r3, r3
 80093dc:	4619      	mov	r1, r3
 80093de:	f107 0310 	add.w	r3, r7, #16
 80093e2:	f107 0210 	add.w	r2, r7, #16
 80093e6:	6812      	ldr	r2, [r2, #0]
 80093e8:	440a      	add	r2, r1
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	463b      	mov	r3, r7
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	011a      	lsls	r2, r3, #4
 80093f4:	f107 0310 	add.w	r3, r7, #16
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4413      	add	r3, r2
 80093fc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009400:	f107 030c 	add.w	r3, r7, #12
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800940a:	b29a      	uxth	r2, r3
 800940c:	f107 030c 	add.w	r3, r7, #12
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	801a      	strh	r2, [r3, #0]
 8009414:	f000 beac 	b.w	800a170 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009418:	463b      	mov	r3, r7
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	78db      	ldrb	r3, [r3, #3]
 800941e:	2b02      	cmp	r3, #2
 8009420:	f040 838c 	bne.w	8009b3c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009424:	463b      	mov	r3, r7
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6a1a      	ldr	r2, [r3, #32]
 800942a:	463b      	mov	r3, r7
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	429a      	cmp	r2, r3
 8009432:	f240 8330 	bls.w	8009a96 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009436:	1d3b      	adds	r3, r7, #4
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	463b      	mov	r3, r7
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	b29b      	uxth	r3, r3
 8009448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800944c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009450:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009454:	1d3b      	adds	r3, r7, #4
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	463b      	mov	r3, r7
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	441a      	add	r2, r3
 8009462:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800946a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800946e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009476:	b29b      	uxth	r3, r3
 8009478:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800947a:	463b      	mov	r3, r7
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6a1a      	ldr	r2, [r3, #32]
 8009480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009484:	1ad2      	subs	r2, r2, r3
 8009486:	463b      	mov	r3, r7
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800948c:	1d3b      	adds	r3, r7, #4
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	463b      	mov	r3, r7
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	881b      	ldrh	r3, [r3, #0]
 800949c:	b29b      	uxth	r3, r3
 800949e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 819e 	beq.w	80097e4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80094a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094ac:	1d3a      	adds	r2, r7, #4
 80094ae:	6812      	ldr	r2, [r2, #0]
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	463b      	mov	r3, r7
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	785b      	ldrb	r3, [r3, #1]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d17a      	bne.n	80095b2 <USB_EPStartXfer+0x24e>
 80094bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094c0:	1d3a      	adds	r2, r7, #4
 80094c2:	6812      	ldr	r2, [r2, #0]
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	1d3b      	adds	r3, r7, #4
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	4619      	mov	r1, r3
 80094d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80094da:	6812      	ldr	r2, [r2, #0]
 80094dc:	440a      	add	r2, r1
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	463b      	mov	r3, r7
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	011a      	lsls	r2, r3, #4
 80094e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4413      	add	r3, r2
 80094f0:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80094f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094f8:	601a      	str	r2, [r3, #0]
 80094fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d11a      	bne.n	8009538 <USB_EPStartXfer+0x1d4>
 8009502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	b29b      	uxth	r3, r3
 800950c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009510:	b29a      	uxth	r2, r3
 8009512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	801a      	strh	r2, [r3, #0]
 800951a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	b29b      	uxth	r3, r3
 8009524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800952c:	b29a      	uxth	r2, r3
 800952e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	801a      	strh	r2, [r3, #0]
 8009536:	e062      	b.n	80095fe <USB_EPStartXfer+0x29a>
 8009538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800953c:	2b3e      	cmp	r3, #62	; 0x3e
 800953e:	d819      	bhi.n	8009574 <USB_EPStartXfer+0x210>
 8009540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009544:	085b      	lsrs	r3, r3, #1
 8009546:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800954a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	2b00      	cmp	r3, #0
 8009554:	d004      	beq.n	8009560 <USB_EPStartXfer+0x1fc>
 8009556:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800955a:	3301      	adds	r3, #1
 800955c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009560:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009564:	b29b      	uxth	r3, r3
 8009566:	029b      	lsls	r3, r3, #10
 8009568:	b29a      	uxth	r2, r3
 800956a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	801a      	strh	r2, [r3, #0]
 8009572:	e044      	b.n	80095fe <USB_EPStartXfer+0x29a>
 8009574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009578:	095b      	lsrs	r3, r3, #5
 800957a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800957e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009582:	f003 031f 	and.w	r3, r3, #31
 8009586:	2b00      	cmp	r3, #0
 8009588:	d104      	bne.n	8009594 <USB_EPStartXfer+0x230>
 800958a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800958e:	3b01      	subs	r3, #1
 8009590:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009594:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009598:	b29b      	uxth	r3, r3
 800959a:	029b      	lsls	r3, r3, #10
 800959c:	b29b      	uxth	r3, r3
 800959e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	801a      	strh	r2, [r3, #0]
 80095b0:	e025      	b.n	80095fe <USB_EPStartXfer+0x29a>
 80095b2:	463b      	mov	r3, r7
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	785b      	ldrb	r3, [r3, #1]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d120      	bne.n	80095fe <USB_EPStartXfer+0x29a>
 80095bc:	1d3b      	adds	r3, r7, #4
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	4619      	mov	r1, r3
 80095c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80095d0:	6812      	ldr	r2, [r2, #0]
 80095d2:	440a      	add	r2, r1
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	463b      	mov	r3, r7
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	011a      	lsls	r2, r3, #4
 80095de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4413      	add	r3, r2
 80095e6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80095ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80095fe:	463b      	mov	r3, r7
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	895b      	ldrh	r3, [r3, #10]
 8009604:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009608:	463b      	mov	r3, r7
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6959      	ldr	r1, [r3, #20]
 800960e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009612:	b29b      	uxth	r3, r3
 8009614:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009618:	1d38      	adds	r0, r7, #4
 800961a:	6800      	ldr	r0, [r0, #0]
 800961c:	f001 fad7 	bl	800abce <USB_WritePMA>
            ep->xfer_buff += len;
 8009620:	463b      	mov	r3, r7
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	695a      	ldr	r2, [r3, #20]
 8009626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800962a:	441a      	add	r2, r3
 800962c:	463b      	mov	r3, r7
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009632:	463b      	mov	r3, r7
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	6a1a      	ldr	r2, [r3, #32]
 8009638:	463b      	mov	r3, r7
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	429a      	cmp	r2, r3
 8009640:	d909      	bls.n	8009656 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8009642:	463b      	mov	r3, r7
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6a1a      	ldr	r2, [r3, #32]
 8009648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800964c:	1ad2      	subs	r2, r2, r3
 800964e:	463b      	mov	r3, r7
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	621a      	str	r2, [r3, #32]
 8009654:	e008      	b.n	8009668 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8009656:	463b      	mov	r3, r7
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	6a1b      	ldr	r3, [r3, #32]
 800965c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009660:	463b      	mov	r3, r7
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2200      	movs	r2, #0
 8009666:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009668:	463b      	mov	r3, r7
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	785b      	ldrb	r3, [r3, #1]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d17a      	bne.n	8009768 <USB_EPStartXfer+0x404>
 8009672:	f107 0318 	add.w	r3, r7, #24
 8009676:	1d3a      	adds	r2, r7, #4
 8009678:	6812      	ldr	r2, [r2, #0]
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	1d3b      	adds	r3, r7, #4
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009684:	b29b      	uxth	r3, r3
 8009686:	4619      	mov	r1, r3
 8009688:	f107 0318 	add.w	r3, r7, #24
 800968c:	f107 0218 	add.w	r2, r7, #24
 8009690:	6812      	ldr	r2, [r2, #0]
 8009692:	440a      	add	r2, r1
 8009694:	601a      	str	r2, [r3, #0]
 8009696:	463b      	mov	r3, r7
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	011a      	lsls	r2, r3, #4
 800969e:	f107 0318 	add.w	r3, r7, #24
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4413      	add	r3, r2
 80096a6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80096aa:	f107 0314 	add.w	r3, r7, #20
 80096ae:	601a      	str	r2, [r3, #0]
 80096b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d11a      	bne.n	80096ee <USB_EPStartXfer+0x38a>
 80096b8:	f107 0314 	add.w	r3, r7, #20
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	f107 0314 	add.w	r3, r7, #20
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	801a      	strh	r2, [r3, #0]
 80096d0:	f107 0314 	add.w	r3, r7, #20
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	f107 0314 	add.w	r3, r7, #20
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	801a      	strh	r2, [r3, #0]
 80096ec:	e067      	b.n	80097be <USB_EPStartXfer+0x45a>
 80096ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096f2:	2b3e      	cmp	r3, #62	; 0x3e
 80096f4:	d819      	bhi.n	800972a <USB_EPStartXfer+0x3c6>
 80096f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096fa:	085b      	lsrs	r3, r3, #1
 80096fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d004      	beq.n	8009716 <USB_EPStartXfer+0x3b2>
 800970c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009710:	3301      	adds	r3, #1
 8009712:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009716:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800971a:	b29b      	uxth	r3, r3
 800971c:	029b      	lsls	r3, r3, #10
 800971e:	b29a      	uxth	r2, r3
 8009720:	f107 0314 	add.w	r3, r7, #20
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	801a      	strh	r2, [r3, #0]
 8009728:	e049      	b.n	80097be <USB_EPStartXfer+0x45a>
 800972a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800972e:	095b      	lsrs	r3, r3, #5
 8009730:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009738:	f003 031f 	and.w	r3, r3, #31
 800973c:	2b00      	cmp	r3, #0
 800973e:	d104      	bne.n	800974a <USB_EPStartXfer+0x3e6>
 8009740:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009744:	3b01      	subs	r3, #1
 8009746:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800974a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800974e:	b29b      	uxth	r3, r3
 8009750:	029b      	lsls	r3, r3, #10
 8009752:	b29b      	uxth	r3, r3
 8009754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800975c:	b29a      	uxth	r2, r3
 800975e:	f107 0314 	add.w	r3, r7, #20
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	801a      	strh	r2, [r3, #0]
 8009766:	e02a      	b.n	80097be <USB_EPStartXfer+0x45a>
 8009768:	463b      	mov	r3, r7
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	785b      	ldrb	r3, [r3, #1]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d125      	bne.n	80097be <USB_EPStartXfer+0x45a>
 8009772:	f107 0320 	add.w	r3, r7, #32
 8009776:	1d3a      	adds	r2, r7, #4
 8009778:	6812      	ldr	r2, [r2, #0]
 800977a:	601a      	str	r2, [r3, #0]
 800977c:	1d3b      	adds	r3, r7, #4
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009784:	b29b      	uxth	r3, r3
 8009786:	4619      	mov	r1, r3
 8009788:	f107 0320 	add.w	r3, r7, #32
 800978c:	f107 0220 	add.w	r2, r7, #32
 8009790:	6812      	ldr	r2, [r2, #0]
 8009792:	440a      	add	r2, r1
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	463b      	mov	r3, r7
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	011a      	lsls	r2, r3, #4
 800979e:	f107 0320 	add.w	r3, r7, #32
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4413      	add	r3, r2
 80097a6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80097aa:	f107 031c 	add.w	r3, r7, #28
 80097ae:	601a      	str	r2, [r3, #0]
 80097b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	f107 031c 	add.w	r3, r7, #28
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80097be:	463b      	mov	r3, r7
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	891b      	ldrh	r3, [r3, #8]
 80097c4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097c8:	463b      	mov	r3, r7
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6959      	ldr	r1, [r3, #20]
 80097ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80097d8:	1d38      	adds	r0, r7, #4
 80097da:	6800      	ldr	r0, [r0, #0]
 80097dc:	f001 f9f7 	bl	800abce <USB_WritePMA>
 80097e0:	f000 bcc6 	b.w	800a170 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097e4:	463b      	mov	r3, r7
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	785b      	ldrb	r3, [r3, #1]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d164      	bne.n	80098b8 <USB_EPStartXfer+0x554>
 80097ee:	1d3b      	adds	r3, r7, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80097f4:	1d3b      	adds	r3, r7, #4
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	461a      	mov	r2, r3
 8009800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009802:	4413      	add	r3, r2
 8009804:	64bb      	str	r3, [r7, #72]	; 0x48
 8009806:	463b      	mov	r3, r7
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	011a      	lsls	r2, r3, #4
 800980e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009810:	4413      	add	r3, r2
 8009812:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009816:	647b      	str	r3, [r7, #68]	; 0x44
 8009818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800981c:	2b00      	cmp	r3, #0
 800981e:	d112      	bne.n	8009846 <USB_EPStartXfer+0x4e2>
 8009820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	b29b      	uxth	r3, r3
 8009826:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800982a:	b29a      	uxth	r2, r3
 800982c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800982e:	801a      	strh	r2, [r3, #0]
 8009830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	b29b      	uxth	r3, r3
 8009836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800983a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800983e:	b29a      	uxth	r2, r3
 8009840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009842:	801a      	strh	r2, [r3, #0]
 8009844:	e057      	b.n	80098f6 <USB_EPStartXfer+0x592>
 8009846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800984a:	2b3e      	cmp	r3, #62	; 0x3e
 800984c:	d817      	bhi.n	800987e <USB_EPStartXfer+0x51a>
 800984e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009852:	085b      	lsrs	r3, r3, #1
 8009854:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	2b00      	cmp	r3, #0
 8009862:	d004      	beq.n	800986e <USB_EPStartXfer+0x50a>
 8009864:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009868:	3301      	adds	r3, #1
 800986a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800986e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009872:	b29b      	uxth	r3, r3
 8009874:	029b      	lsls	r3, r3, #10
 8009876:	b29a      	uxth	r2, r3
 8009878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	e03b      	b.n	80098f6 <USB_EPStartXfer+0x592>
 800987e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009882:	095b      	lsrs	r3, r3, #5
 8009884:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800988c:	f003 031f 	and.w	r3, r3, #31
 8009890:	2b00      	cmp	r3, #0
 8009892:	d104      	bne.n	800989e <USB_EPStartXfer+0x53a>
 8009894:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009898:	3b01      	subs	r3, #1
 800989a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800989e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	029b      	lsls	r3, r3, #10
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098b4:	801a      	strh	r2, [r3, #0]
 80098b6:	e01e      	b.n	80098f6 <USB_EPStartXfer+0x592>
 80098b8:	463b      	mov	r3, r7
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	785b      	ldrb	r3, [r3, #1]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d119      	bne.n	80098f6 <USB_EPStartXfer+0x592>
 80098c2:	1d3b      	adds	r3, r7, #4
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	653b      	str	r3, [r7, #80]	; 0x50
 80098c8:	1d3b      	adds	r3, r7, #4
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	461a      	mov	r2, r3
 80098d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098d6:	4413      	add	r3, r2
 80098d8:	653b      	str	r3, [r7, #80]	; 0x50
 80098da:	463b      	mov	r3, r7
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	011a      	lsls	r2, r3, #4
 80098e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098e4:	4413      	add	r3, r2
 80098e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80098f6:	463b      	mov	r3, r7
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	891b      	ldrh	r3, [r3, #8]
 80098fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009900:	463b      	mov	r3, r7
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6959      	ldr	r1, [r3, #20]
 8009906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800990a:	b29b      	uxth	r3, r3
 800990c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009910:	1d38      	adds	r0, r7, #4
 8009912:	6800      	ldr	r0, [r0, #0]
 8009914:	f001 f95b 	bl	800abce <USB_WritePMA>
            ep->xfer_buff += len;
 8009918:	463b      	mov	r3, r7
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	695a      	ldr	r2, [r3, #20]
 800991e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009922:	441a      	add	r2, r3
 8009924:	463b      	mov	r3, r7
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800992a:	463b      	mov	r3, r7
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6a1a      	ldr	r2, [r3, #32]
 8009930:	463b      	mov	r3, r7
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	429a      	cmp	r2, r3
 8009938:	d909      	bls.n	800994e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800993a:	463b      	mov	r3, r7
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6a1a      	ldr	r2, [r3, #32]
 8009940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009944:	1ad2      	subs	r2, r2, r3
 8009946:	463b      	mov	r3, r7
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	621a      	str	r2, [r3, #32]
 800994c:	e008      	b.n	8009960 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800994e:	463b      	mov	r3, r7
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6a1b      	ldr	r3, [r3, #32]
 8009954:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009958:	463b      	mov	r3, r7
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2200      	movs	r2, #0
 800995e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009960:	1d3b      	adds	r3, r7, #4
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	643b      	str	r3, [r7, #64]	; 0x40
 8009966:	463b      	mov	r3, r7
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	785b      	ldrb	r3, [r3, #1]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d164      	bne.n	8009a3a <USB_EPStartXfer+0x6d6>
 8009970:	1d3b      	adds	r3, r7, #4
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	63bb      	str	r3, [r7, #56]	; 0x38
 8009976:	1d3b      	adds	r3, r7, #4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800997e:	b29b      	uxth	r3, r3
 8009980:	461a      	mov	r2, r3
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	4413      	add	r3, r2
 8009986:	63bb      	str	r3, [r7, #56]	; 0x38
 8009988:	463b      	mov	r3, r7
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	011a      	lsls	r2, r3, #4
 8009990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009992:	4413      	add	r3, r2
 8009994:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009998:	637b      	str	r3, [r7, #52]	; 0x34
 800999a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d112      	bne.n	80099c8 <USB_EPStartXfer+0x664>
 80099a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b0:	801a      	strh	r2, [r3, #0]
 80099b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c4:	801a      	strh	r2, [r3, #0]
 80099c6:	e054      	b.n	8009a72 <USB_EPStartXfer+0x70e>
 80099c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099cc:	2b3e      	cmp	r3, #62	; 0x3e
 80099ce:	d817      	bhi.n	8009a00 <USB_EPStartXfer+0x69c>
 80099d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099d4:	085b      	lsrs	r3, r3, #1
 80099d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80099da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d004      	beq.n	80099f0 <USB_EPStartXfer+0x68c>
 80099e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099ea:	3301      	adds	r3, #1
 80099ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80099f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	029b      	lsls	r3, r3, #10
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fc:	801a      	strh	r2, [r3, #0]
 80099fe:	e038      	b.n	8009a72 <USB_EPStartXfer+0x70e>
 8009a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a04:	095b      	lsrs	r3, r3, #5
 8009a06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a0e:	f003 031f 	and.w	r3, r3, #31
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d104      	bne.n	8009a20 <USB_EPStartXfer+0x6bc>
 8009a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	029b      	lsls	r3, r3, #10
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a36:	801a      	strh	r2, [r3, #0]
 8009a38:	e01b      	b.n	8009a72 <USB_EPStartXfer+0x70e>
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	785b      	ldrb	r3, [r3, #1]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d116      	bne.n	8009a72 <USB_EPStartXfer+0x70e>
 8009a44:	1d3b      	adds	r3, r7, #4
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	461a      	mov	r2, r3
 8009a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a52:	4413      	add	r3, r2
 8009a54:	643b      	str	r3, [r7, #64]	; 0x40
 8009a56:	463b      	mov	r3, r7
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	011a      	lsls	r2, r3, #4
 8009a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a60:	4413      	add	r3, r2
 8009a62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a72:	463b      	mov	r3, r7
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	895b      	ldrh	r3, [r3, #10]
 8009a78:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a7c:	463b      	mov	r3, r7
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6959      	ldr	r1, [r3, #20]
 8009a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a8c:	1d38      	adds	r0, r7, #4
 8009a8e:	6800      	ldr	r0, [r0, #0]
 8009a90:	f001 f89d 	bl	800abce <USB_WritePMA>
 8009a94:	e36c      	b.n	800a170 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009a96:	463b      	mov	r3, r7
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6a1b      	ldr	r3, [r3, #32]
 8009a9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009aa0:	1d3b      	adds	r3, r7, #4
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	463b      	mov	r3, r7
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009abe:	1d3b      	adds	r3, r7, #4
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	463b      	mov	r3, r7
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	441a      	add	r2, r3
 8009acc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009ae4:	1d3b      	adds	r3, r7, #4
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009aea:	1d3b      	adds	r3, r7, #4
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	461a      	mov	r2, r3
 8009af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009af8:	4413      	add	r3, r2
 8009afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009afc:	463b      	mov	r3, r7
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	011a      	lsls	r2, r3, #4
 8009b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b06:	4413      	add	r3, r2
 8009b08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009b18:	463b      	mov	r3, r7
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	891b      	ldrh	r3, [r3, #8]
 8009b1e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b22:	463b      	mov	r3, r7
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6959      	ldr	r1, [r3, #20]
 8009b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009b32:	1d38      	adds	r0, r7, #4
 8009b34:	6800      	ldr	r0, [r0, #0]
 8009b36:	f001 f84a 	bl	800abce <USB_WritePMA>
 8009b3a:	e319      	b.n	800a170 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009b3c:	1d3b      	adds	r3, r7, #4
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	463b      	mov	r3, r7
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	881b      	ldrh	r3, [r3, #0]
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b56:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009b5a:	1d3b      	adds	r3, r7, #4
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	463b      	mov	r3, r7
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	441a      	add	r2, r3
 8009b68:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b74:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009b80:	463b      	mov	r3, r7
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6a1a      	ldr	r2, [r3, #32]
 8009b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b8a:	1ad2      	subs	r2, r2, r3
 8009b8c:	463b      	mov	r3, r7
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b92:	1d3b      	adds	r3, r7, #4
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	463b      	mov	r3, r7
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 8162 	beq.w	8009e72 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009bae:	1d3b      	adds	r3, r7, #4
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bb6:	463b      	mov	r3, r7
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	785b      	ldrb	r3, [r3, #1]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d164      	bne.n	8009c8a <USB_EPStartXfer+0x926>
 8009bc0:	1d3b      	adds	r3, r7, #4
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bc6:	1d3b      	adds	r3, r7, #4
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bd4:	4413      	add	r3, r2
 8009bd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bd8:	463b      	mov	r3, r7
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	011a      	lsls	r2, r3, #4
 8009be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009be2:	4413      	add	r3, r2
 8009be4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009be8:	677b      	str	r3, [r7, #116]	; 0x74
 8009bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d112      	bne.n	8009c18 <USB_EPStartXfer+0x8b4>
 8009bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c00:	801a      	strh	r2, [r3, #0]
 8009c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c14:	801a      	strh	r2, [r3, #0]
 8009c16:	e057      	b.n	8009cc8 <USB_EPStartXfer+0x964>
 8009c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c1c:	2b3e      	cmp	r3, #62	; 0x3e
 8009c1e:	d817      	bhi.n	8009c50 <USB_EPStartXfer+0x8ec>
 8009c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c24:	085b      	lsrs	r3, r3, #1
 8009c26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d004      	beq.n	8009c40 <USB_EPStartXfer+0x8dc>
 8009c36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009c40:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	029b      	lsls	r3, r3, #10
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c4c:	801a      	strh	r2, [r3, #0]
 8009c4e:	e03b      	b.n	8009cc8 <USB_EPStartXfer+0x964>
 8009c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c54:	095b      	lsrs	r3, r3, #5
 8009c56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c5e:	f003 031f 	and.w	r3, r3, #31
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d104      	bne.n	8009c70 <USB_EPStartXfer+0x90c>
 8009c66:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009c70:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	029b      	lsls	r3, r3, #10
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c86:	801a      	strh	r2, [r3, #0]
 8009c88:	e01e      	b.n	8009cc8 <USB_EPStartXfer+0x964>
 8009c8a:	463b      	mov	r3, r7
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	785b      	ldrb	r3, [r3, #1]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d119      	bne.n	8009cc8 <USB_EPStartXfer+0x964>
 8009c94:	1d3b      	adds	r3, r7, #4
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009caa:	463b      	mov	r3, r7
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	011a      	lsls	r2, r3, #4
 8009cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009cc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009cc8:	463b      	mov	r3, r7
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	895b      	ldrh	r3, [r3, #10]
 8009cce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cd2:	463b      	mov	r3, r7
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6959      	ldr	r1, [r3, #20]
 8009cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009ce2:	1d38      	adds	r0, r7, #4
 8009ce4:	6800      	ldr	r0, [r0, #0]
 8009ce6:	f000 ff72 	bl	800abce <USB_WritePMA>
          ep->xfer_buff += len;
 8009cea:	463b      	mov	r3, r7
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	695a      	ldr	r2, [r3, #20]
 8009cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cf4:	441a      	add	r2, r3
 8009cf6:	463b      	mov	r3, r7
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009cfc:	463b      	mov	r3, r7
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6a1a      	ldr	r2, [r3, #32]
 8009d02:	463b      	mov	r3, r7
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d909      	bls.n	8009d20 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8009d0c:	463b      	mov	r3, r7
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6a1a      	ldr	r2, [r3, #32]
 8009d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d16:	1ad2      	subs	r2, r2, r3
 8009d18:	463b      	mov	r3, r7
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	621a      	str	r2, [r3, #32]
 8009d1e:	e008      	b.n	8009d32 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8009d20:	463b      	mov	r3, r7
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009d2a:	463b      	mov	r3, r7
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f000 821a 	beq.w	800a170 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d3c:	463b      	mov	r3, r7
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	785b      	ldrb	r3, [r3, #1]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d164      	bne.n	8009e10 <USB_EPStartXfer+0xaac>
 8009d46:	1d3b      	adds	r3, r7, #4
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d4c:	1d3b      	adds	r3, r7, #4
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	461a      	mov	r2, r3
 8009d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d5a:	4413      	add	r3, r2
 8009d5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d5e:	463b      	mov	r3, r7
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	011a      	lsls	r2, r3, #4
 8009d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d68:	4413      	add	r3, r2
 8009d6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d6e:	667b      	str	r3, [r7, #100]	; 0x64
 8009d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d112      	bne.n	8009d9e <USB_EPStartXfer+0xa3a>
 8009d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d7a:	881b      	ldrh	r3, [r3, #0]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d86:	801a      	strh	r2, [r3, #0]
 8009d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d9a:	801a      	strh	r2, [r3, #0]
 8009d9c:	e057      	b.n	8009e4e <USB_EPStartXfer+0xaea>
 8009d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009da2:	2b3e      	cmp	r3, #62	; 0x3e
 8009da4:	d817      	bhi.n	8009dd6 <USB_EPStartXfer+0xa72>
 8009da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009daa:	085b      	lsrs	r3, r3, #1
 8009dac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009db4:	f003 0301 	and.w	r3, r3, #1
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d004      	beq.n	8009dc6 <USB_EPStartXfer+0xa62>
 8009dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	029b      	lsls	r3, r3, #10
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dd2:	801a      	strh	r2, [r3, #0]
 8009dd4:	e03b      	b.n	8009e4e <USB_EPStartXfer+0xaea>
 8009dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dda:	095b      	lsrs	r3, r3, #5
 8009ddc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009de4:	f003 031f 	and.w	r3, r3, #31
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d104      	bne.n	8009df6 <USB_EPStartXfer+0xa92>
 8009dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df0:	3b01      	subs	r3, #1
 8009df2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	029b      	lsls	r3, r3, #10
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e0c:	801a      	strh	r2, [r3, #0]
 8009e0e:	e01e      	b.n	8009e4e <USB_EPStartXfer+0xaea>
 8009e10:	463b      	mov	r3, r7
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d119      	bne.n	8009e4e <USB_EPStartXfer+0xaea>
 8009e1a:	1d3b      	adds	r3, r7, #4
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	673b      	str	r3, [r7, #112]	; 0x70
 8009e20:	1d3b      	adds	r3, r7, #4
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e2e:	4413      	add	r3, r2
 8009e30:	673b      	str	r3, [r7, #112]	; 0x70
 8009e32:	463b      	mov	r3, r7
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	011a      	lsls	r2, r3, #4
 8009e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009e4e:	463b      	mov	r3, r7
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	891b      	ldrh	r3, [r3, #8]
 8009e54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e58:	463b      	mov	r3, r7
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6959      	ldr	r1, [r3, #20]
 8009e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009e68:	1d38      	adds	r0, r7, #4
 8009e6a:	6800      	ldr	r0, [r0, #0]
 8009e6c:	f000 feaf 	bl	800abce <USB_WritePMA>
 8009e70:	e17e      	b.n	800a170 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e72:	463b      	mov	r3, r7
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	785b      	ldrb	r3, [r3, #1]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d16f      	bne.n	8009f5c <USB_EPStartXfer+0xbf8>
 8009e7c:	1d3b      	adds	r3, r7, #4
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009e84:	1d3b      	adds	r3, r7, #4
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	461a      	mov	r2, r3
 8009e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e94:	4413      	add	r3, r2
 8009e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009e9a:	463b      	mov	r3, r7
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	011a      	lsls	r2, r3, #4
 8009ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d116      	bne.n	8009ee6 <USB_EPStartXfer+0xb82>
 8009eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009eca:	801a      	strh	r2, [r3, #0]
 8009ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ee2:	801a      	strh	r2, [r3, #0]
 8009ee4:	e05f      	b.n	8009fa6 <USB_EPStartXfer+0xc42>
 8009ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eea:	2b3e      	cmp	r3, #62	; 0x3e
 8009eec:	d818      	bhi.n	8009f20 <USB_EPStartXfer+0xbbc>
 8009eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ef2:	085b      	lsrs	r3, r3, #1
 8009ef4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d004      	beq.n	8009f0e <USB_EPStartXfer+0xbaa>
 8009f04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009f08:	3301      	adds	r3, #1
 8009f0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009f0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	029b      	lsls	r3, r3, #10
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f1c:	801a      	strh	r2, [r3, #0]
 8009f1e:	e042      	b.n	8009fa6 <USB_EPStartXfer+0xc42>
 8009f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f24:	095b      	lsrs	r3, r3, #5
 8009f26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f2e:	f003 031f 	and.w	r3, r3, #31
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d104      	bne.n	8009f40 <USB_EPStartXfer+0xbdc>
 8009f36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009f40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	029b      	lsls	r3, r3, #10
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f58:	801a      	strh	r2, [r3, #0]
 8009f5a:	e024      	b.n	8009fa6 <USB_EPStartXfer+0xc42>
 8009f5c:	463b      	mov	r3, r7
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	785b      	ldrb	r3, [r3, #1]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d11f      	bne.n	8009fa6 <USB_EPStartXfer+0xc42>
 8009f66:	1d3b      	adds	r3, r7, #4
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f6e:	1d3b      	adds	r3, r7, #4
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009f7e:	4413      	add	r3, r2
 8009f80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f84:	463b      	mov	r3, r7
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	011a      	lsls	r2, r3, #4
 8009f8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009f90:	4413      	add	r3, r2
 8009f92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fa4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009fa6:	463b      	mov	r3, r7
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	891b      	ldrh	r3, [r3, #8]
 8009fac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fb0:	463b      	mov	r3, r7
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6959      	ldr	r1, [r3, #20]
 8009fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009fc0:	1d38      	adds	r0, r7, #4
 8009fc2:	6800      	ldr	r0, [r0, #0]
 8009fc4:	f000 fe03 	bl	800abce <USB_WritePMA>
          ep->xfer_buff += len;
 8009fc8:	463b      	mov	r3, r7
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	695a      	ldr	r2, [r3, #20]
 8009fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fd2:	441a      	add	r2, r3
 8009fd4:	463b      	mov	r3, r7
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009fda:	463b      	mov	r3, r7
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	6a1a      	ldr	r2, [r3, #32]
 8009fe0:	463b      	mov	r3, r7
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d909      	bls.n	8009ffe <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8009fea:	463b      	mov	r3, r7
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	6a1a      	ldr	r2, [r3, #32]
 8009ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ff4:	1ad2      	subs	r2, r2, r3
 8009ff6:	463b      	mov	r3, r7
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	621a      	str	r2, [r3, #32]
 8009ffc:	e008      	b.n	800a010 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8009ffe:	463b      	mov	r3, r7
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	6a1b      	ldr	r3, [r3, #32]
 800a004:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800a008:	463b      	mov	r3, r7
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2200      	movs	r2, #0
 800a00e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800a010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 80ab 	beq.w	800a170 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a01a:	1d3b      	adds	r3, r7, #4
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a022:	463b      	mov	r3, r7
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d16f      	bne.n	800a10c <USB_EPStartXfer+0xda8>
 800a02c:	1d3b      	adds	r3, r7, #4
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a034:	1d3b      	adds	r3, r7, #4
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	461a      	mov	r2, r3
 800a040:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a044:	4413      	add	r3, r2
 800a046:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a04a:	463b      	mov	r3, r7
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	011a      	lsls	r2, r3, #4
 800a052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a056:	4413      	add	r3, r2
 800a058:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a05c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a064:	2b00      	cmp	r3, #0
 800a066:	d116      	bne.n	800a096 <USB_EPStartXfer+0xd32>
 800a068:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a06c:	881b      	ldrh	r3, [r3, #0]
 800a06e:	b29b      	uxth	r3, r3
 800a070:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a074:	b29a      	uxth	r2, r3
 800a076:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a07a:	801a      	strh	r2, [r3, #0]
 800a07c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	b29b      	uxth	r3, r3
 800a084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a092:	801a      	strh	r2, [r3, #0]
 800a094:	e05b      	b.n	800a14e <USB_EPStartXfer+0xdea>
 800a096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a09a:	2b3e      	cmp	r3, #62	; 0x3e
 800a09c:	d818      	bhi.n	800a0d0 <USB_EPStartXfer+0xd6c>
 800a09e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0a2:	085b      	lsrs	r3, r3, #1
 800a0a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a0a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d004      	beq.n	800a0be <USB_EPStartXfer+0xd5a>
 800a0b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a0be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	029b      	lsls	r3, r3, #10
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0cc:	801a      	strh	r2, [r3, #0]
 800a0ce:	e03e      	b.n	800a14e <USB_EPStartXfer+0xdea>
 800a0d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0d4:	095b      	lsrs	r3, r3, #5
 800a0d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a0da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0de:	f003 031f 	and.w	r3, r3, #31
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d104      	bne.n	800a0f0 <USB_EPStartXfer+0xd8c>
 800a0e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a0f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	029b      	lsls	r3, r3, #10
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a102:	b29a      	uxth	r2, r3
 800a104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a108:	801a      	strh	r2, [r3, #0]
 800a10a:	e020      	b.n	800a14e <USB_EPStartXfer+0xdea>
 800a10c:	463b      	mov	r3, r7
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	785b      	ldrb	r3, [r3, #1]
 800a112:	2b01      	cmp	r3, #1
 800a114:	d11b      	bne.n	800a14e <USB_EPStartXfer+0xdea>
 800a116:	1d3b      	adds	r3, r7, #4
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a11e:	b29b      	uxth	r3, r3
 800a120:	461a      	mov	r2, r3
 800a122:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a126:	4413      	add	r3, r2
 800a128:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a12c:	463b      	mov	r3, r7
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	011a      	lsls	r2, r3, #4
 800a134:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a138:	4413      	add	r3, r2
 800a13a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a13e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a146:	b29a      	uxth	r2, r3
 800a148:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a14c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a14e:	463b      	mov	r3, r7
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	895b      	ldrh	r3, [r3, #10]
 800a154:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a158:	463b      	mov	r3, r7
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6959      	ldr	r1, [r3, #20]
 800a15e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a162:	b29b      	uxth	r3, r3
 800a164:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a168:	1d38      	adds	r0, r7, #4
 800a16a:	6800      	ldr	r0, [r0, #0]
 800a16c:	f000 fd2f 	bl	800abce <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a170:	1d3b      	adds	r3, r7, #4
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	463b      	mov	r3, r7
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4413      	add	r3, r2
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	b29b      	uxth	r3, r3
 800a182:	f107 020a 	add.w	r2, r7, #10
 800a186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a18a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a18e:	8013      	strh	r3, [r2, #0]
 800a190:	f107 030a 	add.w	r3, r7, #10
 800a194:	f107 020a 	add.w	r2, r7, #10
 800a198:	8812      	ldrh	r2, [r2, #0]
 800a19a:	f082 0210 	eor.w	r2, r2, #16
 800a19e:	801a      	strh	r2, [r3, #0]
 800a1a0:	f107 030a 	add.w	r3, r7, #10
 800a1a4:	f107 020a 	add.w	r2, r7, #10
 800a1a8:	8812      	ldrh	r2, [r2, #0]
 800a1aa:	f082 0220 	eor.w	r2, r2, #32
 800a1ae:	801a      	strh	r2, [r3, #0]
 800a1b0:	1d3b      	adds	r3, r7, #4
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	463b      	mov	r3, r7
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	441a      	add	r2, r3
 800a1be:	f107 030a 	add.w	r3, r7, #10
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	8013      	strh	r3, [r2, #0]
 800a1d8:	e3b5      	b.n	800a946 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a1da:	463b      	mov	r3, r7
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	7b1b      	ldrb	r3, [r3, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f040 8090 	bne.w	800a306 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a1e6:	463b      	mov	r3, r7
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	699a      	ldr	r2, [r3, #24]
 800a1ec:	463b      	mov	r3, r7
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d90e      	bls.n	800a214 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800a1f6:	463b      	mov	r3, r7
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800a200:	463b      	mov	r3, r7
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	699a      	ldr	r2, [r3, #24]
 800a206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a20a:	1ad2      	subs	r2, r2, r3
 800a20c:	463b      	mov	r3, r7
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	619a      	str	r2, [r3, #24]
 800a212:	e008      	b.n	800a226 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800a214:	463b      	mov	r3, r7
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800a21e:	463b      	mov	r3, r7
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2200      	movs	r2, #0
 800a224:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a226:	1d3b      	adds	r3, r7, #4
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a22e:	1d3b      	adds	r3, r7, #4
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a236:	b29b      	uxth	r3, r3
 800a238:	461a      	mov	r2, r3
 800a23a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a23e:	4413      	add	r3, r2
 800a240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a244:	463b      	mov	r3, r7
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	011a      	lsls	r2, r3, #4
 800a24c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a250:	4413      	add	r3, r2
 800a252:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a25a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d116      	bne.n	800a290 <USB_EPStartXfer+0xf2c>
 800a262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a266:	881b      	ldrh	r3, [r3, #0]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a26e:	b29a      	uxth	r2, r3
 800a270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a274:	801a      	strh	r2, [r3, #0]
 800a276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a27a:	881b      	ldrh	r3, [r3, #0]
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a286:	b29a      	uxth	r2, r3
 800a288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a28c:	801a      	strh	r2, [r3, #0]
 800a28e:	e32c      	b.n	800a8ea <USB_EPStartXfer+0x1586>
 800a290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a294:	2b3e      	cmp	r3, #62	; 0x3e
 800a296:	d818      	bhi.n	800a2ca <USB_EPStartXfer+0xf66>
 800a298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a29c:	085b      	lsrs	r3, r3, #1
 800a29e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a2a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2a6:	f003 0301 	and.w	r3, r3, #1
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d004      	beq.n	800a2b8 <USB_EPStartXfer+0xf54>
 800a2ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a2b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	029b      	lsls	r3, r3, #10
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2c6:	801a      	strh	r2, [r3, #0]
 800a2c8:	e30f      	b.n	800a8ea <USB_EPStartXfer+0x1586>
 800a2ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2ce:	095b      	lsrs	r3, r3, #5
 800a2d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a2d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2d8:	f003 031f 	and.w	r3, r3, #31
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d104      	bne.n	800a2ea <USB_EPStartXfer+0xf86>
 800a2e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a2ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	029b      	lsls	r3, r3, #10
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a302:	801a      	strh	r2, [r3, #0]
 800a304:	e2f1      	b.n	800a8ea <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a306:	463b      	mov	r3, r7
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	78db      	ldrb	r3, [r3, #3]
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	f040 818f 	bne.w	800a630 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a312:	463b      	mov	r3, r7
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	785b      	ldrb	r3, [r3, #1]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d175      	bne.n	800a408 <USB_EPStartXfer+0x10a4>
 800a31c:	1d3b      	adds	r3, r7, #4
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a324:	1d3b      	adds	r3, r7, #4
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	461a      	mov	r2, r3
 800a330:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a334:	4413      	add	r3, r2
 800a336:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a33a:	463b      	mov	r3, r7
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	011a      	lsls	r2, r3, #4
 800a342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a346:	4413      	add	r3, r2
 800a348:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a34c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a350:	463b      	mov	r3, r7
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d116      	bne.n	800a388 <USB_EPStartXfer+0x1024>
 800a35a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a35e:	881b      	ldrh	r3, [r3, #0]
 800a360:	b29b      	uxth	r3, r3
 800a362:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a366:	b29a      	uxth	r2, r3
 800a368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a36c:	801a      	strh	r2, [r3, #0]
 800a36e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	b29b      	uxth	r3, r3
 800a376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a37a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a37e:	b29a      	uxth	r2, r3
 800a380:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a384:	801a      	strh	r2, [r3, #0]
 800a386:	e065      	b.n	800a454 <USB_EPStartXfer+0x10f0>
 800a388:	463b      	mov	r3, r7
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	2b3e      	cmp	r3, #62	; 0x3e
 800a390:	d81a      	bhi.n	800a3c8 <USB_EPStartXfer+0x1064>
 800a392:	463b      	mov	r3, r7
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	085b      	lsrs	r3, r3, #1
 800a39a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a39e:	463b      	mov	r3, r7
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d004      	beq.n	800a3b6 <USB_EPStartXfer+0x1052>
 800a3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	029b      	lsls	r3, r3, #10
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3c4:	801a      	strh	r2, [r3, #0]
 800a3c6:	e045      	b.n	800a454 <USB_EPStartXfer+0x10f0>
 800a3c8:	463b      	mov	r3, r7
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	095b      	lsrs	r3, r3, #5
 800a3d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a3d4:	463b      	mov	r3, r7
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	f003 031f 	and.w	r3, r3, #31
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d104      	bne.n	800a3ec <USB_EPStartXfer+0x1088>
 800a3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	029b      	lsls	r3, r3, #10
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a404:	801a      	strh	r2, [r3, #0]
 800a406:	e025      	b.n	800a454 <USB_EPStartXfer+0x10f0>
 800a408:	463b      	mov	r3, r7
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	785b      	ldrb	r3, [r3, #1]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d120      	bne.n	800a454 <USB_EPStartXfer+0x10f0>
 800a412:	1d3b      	adds	r3, r7, #4
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a41a:	1d3b      	adds	r3, r7, #4
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a422:	b29b      	uxth	r3, r3
 800a424:	461a      	mov	r2, r3
 800a426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a42a:	4413      	add	r3, r2
 800a42c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a430:	463b      	mov	r3, r7
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	011a      	lsls	r2, r3, #4
 800a438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a43c:	4413      	add	r3, r2
 800a43e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a442:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a446:	463b      	mov	r3, r7
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a452:	801a      	strh	r2, [r3, #0]
 800a454:	1d3b      	adds	r3, r7, #4
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a45c:	463b      	mov	r3, r7
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	785b      	ldrb	r3, [r3, #1]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d175      	bne.n	800a552 <USB_EPStartXfer+0x11ee>
 800a466:	1d3b      	adds	r3, r7, #4
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a46e:	1d3b      	adds	r3, r7, #4
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a476:	b29b      	uxth	r3, r3
 800a478:	461a      	mov	r2, r3
 800a47a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a47e:	4413      	add	r3, r2
 800a480:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a484:	463b      	mov	r3, r7
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	011a      	lsls	r2, r3, #4
 800a48c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a490:	4413      	add	r3, r2
 800a492:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a496:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a49a:	463b      	mov	r3, r7
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d116      	bne.n	800a4d2 <USB_EPStartXfer+0x116e>
 800a4a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4a8:	881b      	ldrh	r3, [r3, #0]
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4b6:	801a      	strh	r2, [r3, #0]
 800a4b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4ce:	801a      	strh	r2, [r3, #0]
 800a4d0:	e061      	b.n	800a596 <USB_EPStartXfer+0x1232>
 800a4d2:	463b      	mov	r3, r7
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	2b3e      	cmp	r3, #62	; 0x3e
 800a4da:	d81a      	bhi.n	800a512 <USB_EPStartXfer+0x11ae>
 800a4dc:	463b      	mov	r3, r7
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	085b      	lsrs	r3, r3, #1
 800a4e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4e8:	463b      	mov	r3, r7
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d004      	beq.n	800a500 <USB_EPStartXfer+0x119c>
 800a4f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a500:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a504:	b29b      	uxth	r3, r3
 800a506:	029b      	lsls	r3, r3, #10
 800a508:	b29a      	uxth	r2, r3
 800a50a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a50e:	801a      	strh	r2, [r3, #0]
 800a510:	e041      	b.n	800a596 <USB_EPStartXfer+0x1232>
 800a512:	463b      	mov	r3, r7
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	095b      	lsrs	r3, r3, #5
 800a51a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a51e:	463b      	mov	r3, r7
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	f003 031f 	and.w	r3, r3, #31
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d104      	bne.n	800a536 <USB_EPStartXfer+0x11d2>
 800a52c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a530:	3b01      	subs	r3, #1
 800a532:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a536:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	029b      	lsls	r3, r3, #10
 800a53e:	b29b      	uxth	r3, r3
 800a540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a548:	b29a      	uxth	r2, r3
 800a54a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a54e:	801a      	strh	r2, [r3, #0]
 800a550:	e021      	b.n	800a596 <USB_EPStartXfer+0x1232>
 800a552:	463b      	mov	r3, r7
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d11c      	bne.n	800a596 <USB_EPStartXfer+0x1232>
 800a55c:	1d3b      	adds	r3, r7, #4
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a564:	b29b      	uxth	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a56c:	4413      	add	r3, r2
 800a56e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a572:	463b      	mov	r3, r7
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	011a      	lsls	r2, r3, #4
 800a57a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a57e:	4413      	add	r3, r2
 800a580:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a584:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a588:	463b      	mov	r3, r7
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	b29a      	uxth	r2, r3
 800a590:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a594:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a596:	463b      	mov	r3, r7
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	69db      	ldr	r3, [r3, #28]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 81a4 	beq.w	800a8ea <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a5a2:	1d3b      	adds	r3, r7, #4
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	463b      	mov	r3, r7
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	881b      	ldrh	r3, [r3, #0]
 800a5b2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5b6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d005      	beq.n	800a5ce <USB_EPStartXfer+0x126a>
 800a5c2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10d      	bne.n	800a5ea <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5ce:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f040 8187 	bne.w	800a8ea <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5dc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f040 8180 	bne.w	800a8ea <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a5ea:	1d3b      	adds	r3, r7, #4
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	463b      	mov	r3, r7
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	881b      	ldrh	r3, [r3, #0]
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a604:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a608:	1d3b      	adds	r3, r7, #4
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	463b      	mov	r3, r7
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	441a      	add	r2, r3
 800a616:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a61a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a61e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a626:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	8013      	strh	r3, [r2, #0]
 800a62e:	e15c      	b.n	800a8ea <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a630:	463b      	mov	r3, r7
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	78db      	ldrb	r3, [r3, #3]
 800a636:	2b01      	cmp	r3, #1
 800a638:	f040 8155 	bne.w	800a8e6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a63c:	463b      	mov	r3, r7
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	699a      	ldr	r2, [r3, #24]
 800a642:	463b      	mov	r3, r7
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d90e      	bls.n	800a66a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800a64c:	463b      	mov	r3, r7
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a656:	463b      	mov	r3, r7
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	699a      	ldr	r2, [r3, #24]
 800a65c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a660:	1ad2      	subs	r2, r2, r3
 800a662:	463b      	mov	r3, r7
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	619a      	str	r2, [r3, #24]
 800a668:	e008      	b.n	800a67c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800a66a:	463b      	mov	r3, r7
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a674:	463b      	mov	r3, r7
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2200      	movs	r2, #0
 800a67a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a67c:	463b      	mov	r3, r7
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	785b      	ldrb	r3, [r3, #1]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d16f      	bne.n	800a766 <USB_EPStartXfer+0x1402>
 800a686:	1d3b      	adds	r3, r7, #4
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a68e:	1d3b      	adds	r3, r7, #4
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a696:	b29b      	uxth	r3, r3
 800a698:	461a      	mov	r2, r3
 800a69a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a69e:	4413      	add	r3, r2
 800a6a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a6a4:	463b      	mov	r3, r7
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	011a      	lsls	r2, r3, #4
 800a6ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a6b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a6ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d116      	bne.n	800a6f0 <USB_EPStartXfer+0x138c>
 800a6c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6c6:	881b      	ldrh	r3, [r3, #0]
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6d4:	801a      	strh	r2, [r3, #0]
 800a6d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6da:	881b      	ldrh	r3, [r3, #0]
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6ec:	801a      	strh	r2, [r3, #0]
 800a6ee:	e05f      	b.n	800a7b0 <USB_EPStartXfer+0x144c>
 800a6f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6f4:	2b3e      	cmp	r3, #62	; 0x3e
 800a6f6:	d818      	bhi.n	800a72a <USB_EPStartXfer+0x13c6>
 800a6f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6fc:	085b      	lsrs	r3, r3, #1
 800a6fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d004      	beq.n	800a718 <USB_EPStartXfer+0x13b4>
 800a70e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a712:	3301      	adds	r3, #1
 800a714:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	029b      	lsls	r3, r3, #10
 800a720:	b29a      	uxth	r2, r3
 800a722:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a726:	801a      	strh	r2, [r3, #0]
 800a728:	e042      	b.n	800a7b0 <USB_EPStartXfer+0x144c>
 800a72a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a72e:	095b      	lsrs	r3, r3, #5
 800a730:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a738:	f003 031f 	and.w	r3, r3, #31
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d104      	bne.n	800a74a <USB_EPStartXfer+0x13e6>
 800a740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a744:	3b01      	subs	r3, #1
 800a746:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a74a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a74e:	b29b      	uxth	r3, r3
 800a750:	029b      	lsls	r3, r3, #10
 800a752:	b29b      	uxth	r3, r3
 800a754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a762:	801a      	strh	r2, [r3, #0]
 800a764:	e024      	b.n	800a7b0 <USB_EPStartXfer+0x144c>
 800a766:	463b      	mov	r3, r7
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	785b      	ldrb	r3, [r3, #1]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d11f      	bne.n	800a7b0 <USB_EPStartXfer+0x144c>
 800a770:	1d3b      	adds	r3, r7, #4
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a778:	1d3b      	adds	r3, r7, #4
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a780:	b29b      	uxth	r3, r3
 800a782:	461a      	mov	r2, r3
 800a784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a788:	4413      	add	r3, r2
 800a78a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a78e:	463b      	mov	r3, r7
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	011a      	lsls	r2, r3, #4
 800a796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a79a:	4413      	add	r3, r2
 800a79c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a7a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a7a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a7ae:	801a      	strh	r2, [r3, #0]
 800a7b0:	1d3b      	adds	r3, r7, #4
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a7b8:	463b      	mov	r3, r7
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	785b      	ldrb	r3, [r3, #1]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d16f      	bne.n	800a8a2 <USB_EPStartXfer+0x153e>
 800a7c2:	1d3b      	adds	r3, r7, #4
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a7ca:	1d3b      	adds	r3, r7, #4
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7da:	4413      	add	r3, r2
 800a7dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a7e0:	463b      	mov	r3, r7
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	011a      	lsls	r2, r3, #4
 800a7e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a7f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a7f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d116      	bne.n	800a82c <USB_EPStartXfer+0x14c8>
 800a7fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	b29b      	uxth	r3, r3
 800a806:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a810:	801a      	strh	r2, [r3, #0]
 800a812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a816:	881b      	ldrh	r3, [r3, #0]
 800a818:	b29b      	uxth	r3, r3
 800a81a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a81e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a822:	b29a      	uxth	r2, r3
 800a824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a828:	801a      	strh	r2, [r3, #0]
 800a82a:	e05e      	b.n	800a8ea <USB_EPStartXfer+0x1586>
 800a82c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a830:	2b3e      	cmp	r3, #62	; 0x3e
 800a832:	d818      	bhi.n	800a866 <USB_EPStartXfer+0x1502>
 800a834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a838:	085b      	lsrs	r3, r3, #1
 800a83a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a83e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a842:	f003 0301 	and.w	r3, r3, #1
 800a846:	2b00      	cmp	r3, #0
 800a848:	d004      	beq.n	800a854 <USB_EPStartXfer+0x14f0>
 800a84a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a84e:	3301      	adds	r3, #1
 800a850:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a854:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a858:	b29b      	uxth	r3, r3
 800a85a:	029b      	lsls	r3, r3, #10
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a862:	801a      	strh	r2, [r3, #0]
 800a864:	e041      	b.n	800a8ea <USB_EPStartXfer+0x1586>
 800a866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a86a:	095b      	lsrs	r3, r3, #5
 800a86c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a874:	f003 031f 	and.w	r3, r3, #31
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d104      	bne.n	800a886 <USB_EPStartXfer+0x1522>
 800a87c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a880:	3b01      	subs	r3, #1
 800a882:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	029b      	lsls	r3, r3, #10
 800a88e:	b29b      	uxth	r3, r3
 800a890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a898:	b29a      	uxth	r2, r3
 800a89a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a89e:	801a      	strh	r2, [r3, #0]
 800a8a0:	e023      	b.n	800a8ea <USB_EPStartXfer+0x1586>
 800a8a2:	463b      	mov	r3, r7
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	785b      	ldrb	r3, [r3, #1]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d11e      	bne.n	800a8ea <USB_EPStartXfer+0x1586>
 800a8ac:	1d3b      	adds	r3, r7, #4
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8bc:	4413      	add	r3, r2
 800a8be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a8c2:	463b      	mov	r3, r7
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	011a      	lsls	r2, r3, #4
 800a8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ce:	4413      	add	r3, r2
 800a8d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a8d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8e2:	801a      	strh	r2, [r3, #0]
 800a8e4:	e001      	b.n	800a8ea <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e02e      	b.n	800a948 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a8ea:	1d3b      	adds	r3, r7, #4
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	463b      	mov	r3, r7
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a904:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a908:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a90c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a910:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a914:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a918:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a91c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a920:	1d3b      	adds	r3, r7, #4
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	463b      	mov	r3, r7
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	441a      	add	r2, r3
 800a92e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a93a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a93e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a942:	b29b      	uxth	r3, r3
 800a944:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a952:	b480      	push	{r7}
 800a954:	b085      	sub	sp, #20
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
 800a95a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	785b      	ldrb	r3, [r3, #1]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d020      	beq.n	800a9a6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	b29b      	uxth	r3, r3
 800a972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a97a:	81bb      	strh	r3, [r7, #12]
 800a97c:	89bb      	ldrh	r3, [r7, #12]
 800a97e:	f083 0310 	eor.w	r3, r3, #16
 800a982:	81bb      	strh	r3, [r7, #12]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	441a      	add	r2, r3
 800a98e:	89bb      	ldrh	r3, [r7, #12]
 800a990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a99c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	8013      	strh	r3, [r2, #0]
 800a9a4:	e01f      	b.n	800a9e6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	881b      	ldrh	r3, [r3, #0]
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9bc:	81fb      	strh	r3, [r7, #14]
 800a9be:	89fb      	ldrh	r3, [r7, #14]
 800a9c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a9c4:	81fb      	strh	r3, [r7, #14]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	441a      	add	r2, r3
 800a9d0:	89fb      	ldrh	r3, [r7, #14]
 800a9d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bc80      	pop	{r7}
 800a9f0:	4770      	bx	lr

0800a9f2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b087      	sub	sp, #28
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	7b1b      	ldrb	r3, [r3, #12]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f040 809d 	bne.w	800ab40 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	785b      	ldrb	r3, [r3, #1]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d04c      	beq.n	800aaa8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	823b      	strh	r3, [r7, #16]
 800aa1c:	8a3b      	ldrh	r3, [r7, #16]
 800aa1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d01b      	beq.n	800aa5e <USB_EPClearStall+0x6c>
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa3c:	81fb      	strh	r3, [r7, #14]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	441a      	add	r2, r3
 800aa48:	89fb      	ldrh	r3, [r7, #14]
 800aa4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	78db      	ldrb	r3, [r3, #3]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d06c      	beq.n	800ab40 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4413      	add	r3, r2
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa7c:	81bb      	strh	r3, [r7, #12]
 800aa7e:	89bb      	ldrh	r3, [r7, #12]
 800aa80:	f083 0320 	eor.w	r3, r3, #32
 800aa84:	81bb      	strh	r3, [r7, #12]
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	441a      	add	r2, r3
 800aa90:	89bb      	ldrh	r3, [r7, #12]
 800aa92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	8013      	strh	r3, [r2, #0]
 800aaa6:	e04b      	b.n	800ab40 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	4413      	add	r3, r2
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	82fb      	strh	r3, [r7, #22]
 800aab6:	8afb      	ldrh	r3, [r7, #22]
 800aab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d01b      	beq.n	800aaf8 <USB_EPClearStall+0x106>
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4413      	add	r3, r2
 800aaca:	881b      	ldrh	r3, [r3, #0]
 800aacc:	b29b      	uxth	r3, r3
 800aace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aad6:	82bb      	strh	r3, [r7, #20]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	441a      	add	r2, r3
 800aae2:	8abb      	ldrh	r3, [r7, #20]
 800aae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aaf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4413      	add	r3, r2
 800ab02:	881b      	ldrh	r3, [r3, #0]
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab0e:	827b      	strh	r3, [r7, #18]
 800ab10:	8a7b      	ldrh	r3, [r7, #18]
 800ab12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab16:	827b      	strh	r3, [r7, #18]
 800ab18:	8a7b      	ldrh	r3, [r7, #18]
 800ab1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab1e:	827b      	strh	r3, [r7, #18]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	441a      	add	r2, r3
 800ab2a:	8a7b      	ldrh	r3, [r7, #18]
 800ab2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	371c      	adds	r7, #28
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bc80      	pop	{r7}
 800ab4a:	4770      	bx	lr

0800ab4c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ab58:	78fb      	ldrb	r3, [r7, #3]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d103      	bne.n	800ab66 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2280      	movs	r2, #128	; 0x80
 800ab62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bc80      	pop	{r7}
 800ab70:	4770      	bx	lr

0800ab72 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ab72:	b480      	push	{r7}
 800ab74:	b083      	sub	sp, #12
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bc80      	pop	{r7}
 800ab84:	4770      	bx	lr

0800ab86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bc80      	pop	{r7}
 800ab98:	4770      	bx	lr

0800ab9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b085      	sub	sp, #20
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800abac:	68fb      	ldr	r3, [r7, #12]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bc80      	pop	{r7}
 800abb6:	4770      	bx	lr

0800abb8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	bc80      	pop	{r7}
 800abcc:	4770      	bx	lr

0800abce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800abce:	b480      	push	{r7}
 800abd0:	b08d      	sub	sp, #52	; 0x34
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	60f8      	str	r0, [r7, #12]
 800abd6:	60b9      	str	r1, [r7, #8]
 800abd8:	4611      	mov	r1, r2
 800abda:	461a      	mov	r2, r3
 800abdc:	460b      	mov	r3, r1
 800abde:	80fb      	strh	r3, [r7, #6]
 800abe0:	4613      	mov	r3, r2
 800abe2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800abe4:	88bb      	ldrh	r3, [r7, #4]
 800abe6:	3301      	adds	r3, #1
 800abe8:	085b      	lsrs	r3, r3, #1
 800abea:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800abf4:	88fb      	ldrh	r3, [r7, #6]
 800abf6:	005a      	lsls	r2, r3, #1
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac00:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac06:	e01e      	b.n	800ac46 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac10:	3301      	adds	r3, #1
 800ac12:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	021b      	lsls	r3, r3, #8
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	461a      	mov	r2, r3
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	3302      	adds	r3, #2
 800ac32:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800ac34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac36:	3302      	adds	r3, #2
 800ac38:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	3b01      	subs	r3, #1
 800ac44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1dd      	bne.n	800ac08 <USB_WritePMA+0x3a>
  }
}
 800ac4c:	bf00      	nop
 800ac4e:	bf00      	nop
 800ac50:	3734      	adds	r7, #52	; 0x34
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bc80      	pop	{r7}
 800ac56:	4770      	bx	lr

0800ac58 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b08b      	sub	sp, #44	; 0x2c
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	4611      	mov	r1, r2
 800ac64:	461a      	mov	r2, r3
 800ac66:	460b      	mov	r3, r1
 800ac68:	80fb      	strh	r3, [r7, #6]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ac6e:	88bb      	ldrh	r3, [r7, #4]
 800ac70:	085b      	lsrs	r3, r3, #1
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac7e:	88fb      	ldrh	r3, [r7, #6]
 800ac80:	005a      	lsls	r2, r3, #1
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac8a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac90:	e01b      	b.n	800acca <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800ac92:	6a3b      	ldr	r3, [r7, #32]
 800ac94:	881b      	ldrh	r3, [r3, #0]
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	3302      	adds	r3, #2
 800ac9e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	3301      	adds	r3, #1
 800acac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	0a1b      	lsrs	r3, r3, #8
 800acb2:	b2da      	uxtb	r2, r3
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	3301      	adds	r3, #1
 800acbc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	3302      	adds	r3, #2
 800acc2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800acc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc6:	3b01      	subs	r3, #1
 800acc8:	627b      	str	r3, [r7, #36]	; 0x24
 800acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1e0      	bne.n	800ac92 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800acd0:	88bb      	ldrh	r3, [r7, #4]
 800acd2:	f003 0301 	and.w	r3, r3, #1
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d007      	beq.n	800acec <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800acdc:	6a3b      	ldr	r3, [r7, #32]
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	701a      	strb	r2, [r3, #0]
  }
}
 800acec:	bf00      	nop
 800acee:	372c      	adds	r7, #44	; 0x2c
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bc80      	pop	{r7}
 800acf4:	4770      	bx	lr

0800acf6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b084      	sub	sp, #16
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	460b      	mov	r3, r1
 800ad00:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ad02:	2300      	movs	r3, #0
 800ad04:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	7c1b      	ldrb	r3, [r3, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d115      	bne.n	800ad3a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ad0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad12:	2202      	movs	r2, #2
 800ad14:	2181      	movs	r1, #129	; 0x81
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f001 fe87 	bl	800ca2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ad22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad26:	2202      	movs	r2, #2
 800ad28:	2101      	movs	r1, #1
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 fe7d 	bl	800ca2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ad38:	e012      	b.n	800ad60 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ad3a:	2340      	movs	r3, #64	; 0x40
 800ad3c:	2202      	movs	r2, #2
 800ad3e:	2181      	movs	r1, #129	; 0x81
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f001 fe72 	bl	800ca2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ad4c:	2340      	movs	r3, #64	; 0x40
 800ad4e:	2202      	movs	r2, #2
 800ad50:	2101      	movs	r1, #1
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f001 fe69 	bl	800ca2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad60:	2308      	movs	r3, #8
 800ad62:	2203      	movs	r2, #3
 800ad64:	2182      	movs	r1, #130	; 0x82
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f001 fe5f 	bl	800ca2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad72:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ad76:	f001 ff7f 	bl	800cc78 <USBD_static_malloc>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d102      	bne.n	800ad92 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	73fb      	strb	r3, [r7, #15]
 800ad90:	e026      	b.n	800ade0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad98:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2200      	movs	r2, #0
 800adb0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	7c1b      	ldrb	r3, [r3, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d109      	bne.n	800add0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adc6:	2101      	movs	r1, #1
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f001 ff1f 	bl	800cc0c <USBD_LL_PrepareReceive>
 800adce:	e007      	b.n	800ade0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800add6:	2340      	movs	r3, #64	; 0x40
 800add8:	2101      	movs	r1, #1
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f001 ff16 	bl	800cc0c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b084      	sub	sp, #16
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	460b      	mov	r3, r1
 800adf4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800adfa:	2181      	movs	r1, #129	; 0x81
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f001 fe3a 	bl	800ca76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ae08:	2101      	movs	r1, #1
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f001 fe33 	bl	800ca76 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ae18:	2182      	movs	r1, #130	; 0x82
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f001 fe2b 	bl	800ca76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00e      	beq.n	800ae4e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 ff25 	bl	800cc90 <USBD_static_free>
    pdev->pClassData = NULL;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae68:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d039      	beq.n	800aef6 <USBD_CDC_Setup+0x9e>
 800ae82:	2b20      	cmp	r3, #32
 800ae84:	d17f      	bne.n	800af86 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	88db      	ldrh	r3, [r3, #6]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d029      	beq.n	800aee2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	b25b      	sxtb	r3, r3
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	da11      	bge.n	800aebc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	683a      	ldr	r2, [r7, #0]
 800aea2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800aea4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aea6:	683a      	ldr	r2, [r7, #0]
 800aea8:	88d2      	ldrh	r2, [r2, #6]
 800aeaa:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aeac:	6939      	ldr	r1, [r7, #16]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	88db      	ldrh	r3, [r3, #6]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f001 fa0a 	bl	800c2ce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800aeba:	e06b      	b.n	800af94 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	785a      	ldrb	r2, [r3, #1]
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	88db      	ldrh	r3, [r3, #6]
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aed2:	6939      	ldr	r1, [r7, #16]
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	88db      	ldrh	r3, [r3, #6]
 800aed8:	461a      	mov	r2, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f001 fa25 	bl	800c32a <USBD_CtlPrepareRx>
      break;
 800aee0:	e058      	b.n	800af94 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	7850      	ldrb	r0, [r2, #1]
 800aeee:	2200      	movs	r2, #0
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	4798      	blx	r3
      break;
 800aef4:	e04e      	b.n	800af94 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	785b      	ldrb	r3, [r3, #1]
 800aefa:	2b0b      	cmp	r3, #11
 800aefc:	d02e      	beq.n	800af5c <USBD_CDC_Setup+0x104>
 800aefe:	2b0b      	cmp	r3, #11
 800af00:	dc38      	bgt.n	800af74 <USBD_CDC_Setup+0x11c>
 800af02:	2b00      	cmp	r3, #0
 800af04:	d002      	beq.n	800af0c <USBD_CDC_Setup+0xb4>
 800af06:	2b0a      	cmp	r3, #10
 800af08:	d014      	beq.n	800af34 <USBD_CDC_Setup+0xdc>
 800af0a:	e033      	b.n	800af74 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af12:	2b03      	cmp	r3, #3
 800af14:	d107      	bne.n	800af26 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800af16:	f107 030c 	add.w	r3, r7, #12
 800af1a:	2202      	movs	r2, #2
 800af1c:	4619      	mov	r1, r3
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f001 f9d5 	bl	800c2ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af24:	e02e      	b.n	800af84 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f001 f966 	bl	800c1fa <USBD_CtlError>
            ret = USBD_FAIL;
 800af2e:	2302      	movs	r3, #2
 800af30:	75fb      	strb	r3, [r7, #23]
          break;
 800af32:	e027      	b.n	800af84 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	d107      	bne.n	800af4e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800af3e:	f107 030f 	add.w	r3, r7, #15
 800af42:	2201      	movs	r2, #1
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f001 f9c1 	bl	800c2ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af4c:	e01a      	b.n	800af84 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f001 f952 	bl	800c1fa <USBD_CtlError>
            ret = USBD_FAIL;
 800af56:	2302      	movs	r3, #2
 800af58:	75fb      	strb	r3, [r7, #23]
          break;
 800af5a:	e013      	b.n	800af84 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af62:	2b03      	cmp	r3, #3
 800af64:	d00d      	beq.n	800af82 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800af66:	6839      	ldr	r1, [r7, #0]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f001 f946 	bl	800c1fa <USBD_CtlError>
            ret = USBD_FAIL;
 800af6e:	2302      	movs	r3, #2
 800af70:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af72:	e006      	b.n	800af82 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800af74:	6839      	ldr	r1, [r7, #0]
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f001 f93f 	bl	800c1fa <USBD_CtlError>
          ret = USBD_FAIL;
 800af7c:	2302      	movs	r3, #2
 800af7e:	75fb      	strb	r3, [r7, #23]
          break;
 800af80:	e000      	b.n	800af84 <USBD_CDC_Setup+0x12c>
          break;
 800af82:	bf00      	nop
      }
      break;
 800af84:	e006      	b.n	800af94 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800af86:	6839      	ldr	r1, [r7, #0]
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f001 f936 	bl	800c1fa <USBD_CtlError>
      ret = USBD_FAIL;
 800af8e:	2302      	movs	r3, #2
 800af90:	75fb      	strb	r3, [r7, #23]
      break;
 800af92:	bf00      	nop
  }

  return ret;
 800af94:	7dfb      	ldrb	r3, [r7, #23]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3718      	adds	r7, #24
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	460b      	mov	r3, r1
 800afa8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afb0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afb8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d03a      	beq.n	800b03a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800afc4:	78fa      	ldrb	r2, [r7, #3]
 800afc6:	6879      	ldr	r1, [r7, #4]
 800afc8:	4613      	mov	r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	440b      	add	r3, r1
 800afd2:	331c      	adds	r3, #28
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d029      	beq.n	800b02e <USBD_CDC_DataIn+0x90>
 800afda:	78fa      	ldrb	r2, [r7, #3]
 800afdc:	6879      	ldr	r1, [r7, #4]
 800afde:	4613      	mov	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	440b      	add	r3, r1
 800afe8:	331c      	adds	r3, #28
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	78f9      	ldrb	r1, [r7, #3]
 800afee:	68b8      	ldr	r0, [r7, #8]
 800aff0:	460b      	mov	r3, r1
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	440b      	add	r3, r1
 800aff6:	00db      	lsls	r3, r3, #3
 800aff8:	4403      	add	r3, r0
 800affa:	3338      	adds	r3, #56	; 0x38
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	fbb2 f1f3 	udiv	r1, r2, r3
 800b002:	fb03 f301 	mul.w	r3, r3, r1
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d110      	bne.n	800b02e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b00c:	78fa      	ldrb	r2, [r7, #3]
 800b00e:	6879      	ldr	r1, [r7, #4]
 800b010:	4613      	mov	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	440b      	add	r3, r1
 800b01a:	331c      	adds	r3, #28
 800b01c:	2200      	movs	r2, #0
 800b01e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b020:	78f9      	ldrb	r1, [r7, #3]
 800b022:	2300      	movs	r3, #0
 800b024:	2200      	movs	r2, #0
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f001 fdcd 	bl	800cbc6 <USBD_LL_Transmit>
 800b02c:	e003      	b.n	800b036 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	e000      	b.n	800b03c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b03a:	2302      	movs	r3, #2
  }
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	460b      	mov	r3, r1
 800b04e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b056:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b058:	78fb      	ldrb	r3, [r7, #3]
 800b05a:	4619      	mov	r1, r3
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f001 fdf8 	bl	800cc52 <USBD_LL_GetRxDataSize>
 800b062:	4602      	mov	r2, r0
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00d      	beq.n	800b090 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b088:	4611      	mov	r1, r2
 800b08a:	4798      	blx	r3

    return USBD_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	e000      	b.n	800b092 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b090:	2302      	movs	r3, #2
  }
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b084      	sub	sp, #16
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d015      	beq.n	800b0e0 <USBD_CDC_EP0_RxReady+0x46>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b0ba:	2bff      	cmp	r3, #255	; 0xff
 800b0bc:	d010      	beq.n	800b0e0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b0cc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b0d4:	b292      	uxth	r2, r2
 800b0d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	22ff      	movs	r2, #255	; 0xff
 800b0dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
	...

0800b0ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2243      	movs	r2, #67	; 0x43
 800b0f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b0fa:	4b03      	ldr	r3, [pc, #12]	; (800b108 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	bc80      	pop	{r7}
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	200000cc 	.word	0x200000cc

0800b10c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2243      	movs	r2, #67	; 0x43
 800b118:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b11a:	4b03      	ldr	r3, [pc, #12]	; (800b128 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	bc80      	pop	{r7}
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	20000088 	.word	0x20000088

0800b12c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2243      	movs	r2, #67	; 0x43
 800b138:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b13a:	4b03      	ldr	r3, [pc, #12]	; (800b148 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	bc80      	pop	{r7}
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	20000110 	.word	0x20000110

0800b14c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	220a      	movs	r2, #10
 800b158:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b15a:	4b03      	ldr	r3, [pc, #12]	; (800b168 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	bc80      	pop	{r7}
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	20000044 	.word	0x20000044

0800b16c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b176:	2302      	movs	r3, #2
 800b178:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d005      	beq.n	800b18c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3714      	adds	r7, #20
 800b192:	46bd      	mov	sp, r7
 800b194:	bc80      	pop	{r7}
 800b196:	4770      	bx	lr

0800b198 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b198:	b480      	push	{r7}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b1b6:	88fa      	ldrh	r2, [r7, #6]
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	371c      	adds	r7, #28
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bc80      	pop	{r7}
 800b1c8:	4770      	bx	lr

0800b1ca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b085      	sub	sp, #20
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1da:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3714      	adds	r7, #20
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bc80      	pop	{r7}
 800b1ee:	4770      	bx	lr

0800b1f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b206:	2b00      	cmp	r3, #0
 800b208:	d01c      	beq.n	800b244 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b210:	2b00      	cmp	r3, #0
 800b212:	d115      	bne.n	800b240 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2201      	movs	r2, #1
 800b218:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b232:	b29b      	uxth	r3, r3
 800b234:	2181      	movs	r1, #129	; 0x81
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f001 fcc5 	bl	800cbc6 <USBD_LL_Transmit>

      return USBD_OK;
 800b23c:	2300      	movs	r3, #0
 800b23e:	e002      	b.n	800b246 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b240:	2301      	movs	r3, #1
 800b242:	e000      	b.n	800b246 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b244:	2302      	movs	r3, #2
  }
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b084      	sub	sp, #16
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b25c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b264:	2b00      	cmp	r3, #0
 800b266:	d017      	beq.n	800b298 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	7c1b      	ldrb	r3, [r3, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d109      	bne.n	800b284 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b27a:	2101      	movs	r1, #1
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f001 fcc5 	bl	800cc0c <USBD_LL_PrepareReceive>
 800b282:	e007      	b.n	800b294 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b28a:	2340      	movs	r3, #64	; 0x40
 800b28c:	2101      	movs	r1, #1
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f001 fcbc 	bl	800cc0c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b294:	2300      	movs	r3, #0
 800b296:	e000      	b.n	800b29a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b298:	2302      	movs	r3, #2
  }
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	60f8      	str	r0, [r7, #12]
 800b2aa:	60b9      	str	r1, [r7, #8]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d101      	bne.n	800b2ba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b2b6:	2302      	movs	r3, #2
 800b2b8:	e01a      	b.n	800b2f0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d003      	beq.n	800b2cc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d003      	beq.n	800b2da <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	79fa      	ldrb	r2, [r7, #7]
 800b2e6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f001 fb29 	bl	800c940 <USBD_LL_Init>

  return USBD_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d006      	beq.n	800b31a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b314:	2300      	movs	r3, #0
 800b316:	73fb      	strb	r3, [r7, #15]
 800b318:	e001      	b.n	800b31e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b31a:	2302      	movs	r3, #2
 800b31c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	bc80      	pop	{r7}
 800b328:	4770      	bx	lr

0800b32a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b082      	sub	sp, #8
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f001 fb5e 	bl	800c9f4 <USBD_LL_Start>

  return USBD_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3708      	adds	r7, #8
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b342:	b480      	push	{r7}
 800b344:	b083      	sub	sp, #12
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	bc80      	pop	{r7}
 800b354:	4770      	bx	lr

0800b356 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b084      	sub	sp, #16
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
 800b35e:	460b      	mov	r3, r1
 800b360:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b362:	2302      	movs	r3, #2
 800b364:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00c      	beq.n	800b38a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	78fa      	ldrb	r2, [r7, #3]
 800b37a:	4611      	mov	r1, r2
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	4798      	blx	r3
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d101      	bne.n	800b38a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	78fa      	ldrb	r2, [r7, #3]
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	4798      	blx	r3

  return USBD_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b082      	sub	sp, #8
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b3ca:	6839      	ldr	r1, [r7, #0]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f000 fed8 	bl	800c182 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b3ee:	f003 031f 	and.w	r3, r3, #31
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d016      	beq.n	800b424 <USBD_LL_SetupStage+0x6a>
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d81c      	bhi.n	800b434 <USBD_LL_SetupStage+0x7a>
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d002      	beq.n	800b404 <USBD_LL_SetupStage+0x4a>
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d008      	beq.n	800b414 <USBD_LL_SetupStage+0x5a>
 800b402:	e017      	b.n	800b434 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b40a:	4619      	mov	r1, r3
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 f9cb 	bl	800b7a8 <USBD_StdDevReq>
      break;
 800b412:	e01a      	b.n	800b44a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b41a:	4619      	mov	r1, r3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fa2d 	bl	800b87c <USBD_StdItfReq>
      break;
 800b422:	e012      	b.n	800b44a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 fa6d 	bl	800b90c <USBD_StdEPReq>
      break;
 800b432:	e00a      	b.n	800b44a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b43a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	4619      	mov	r1, r3
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f001 fb36 	bl	800cab4 <USBD_LL_StallEP>
      break;
 800b448:	bf00      	nop
  }

  return USBD_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	460b      	mov	r3, r1
 800b45e:	607a      	str	r2, [r7, #4]
 800b460:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b462:	7afb      	ldrb	r3, [r7, #11]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d14b      	bne.n	800b500 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b46e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b476:	2b03      	cmp	r3, #3
 800b478:	d134      	bne.n	800b4e4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	68da      	ldr	r2, [r3, #12]
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	429a      	cmp	r2, r3
 800b484:	d919      	bls.n	800b4ba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	68da      	ldr	r2, [r3, #12]
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	1ad2      	subs	r2, r2, r3
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	68da      	ldr	r2, [r3, #12]
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d203      	bcs.n	800b4a8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	e002      	b.n	800b4ae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	6879      	ldr	r1, [r7, #4]
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f000 ff57 	bl	800c366 <USBD_CtlContinueRx>
 800b4b8:	e038      	b.n	800b52c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00a      	beq.n	800b4dc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b4cc:	2b03      	cmp	r3, #3
 800b4ce:	d105      	bne.n	800b4dc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 ff54 	bl	800c38a <USBD_CtlSendStatus>
 800b4e2:	e023      	b.n	800b52c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4ea:	2b05      	cmp	r3, #5
 800b4ec:	d11e      	bne.n	800b52c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f001 fadb 	bl	800cab4 <USBD_LL_StallEP>
 800b4fe:	e015      	b.n	800b52c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b506:	699b      	ldr	r3, [r3, #24]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00d      	beq.n	800b528 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b512:	2b03      	cmp	r3, #3
 800b514:	d108      	bne.n	800b528 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b51c:	699b      	ldr	r3, [r3, #24]
 800b51e:	7afa      	ldrb	r2, [r7, #11]
 800b520:	4611      	mov	r1, r2
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	4798      	blx	r3
 800b526:	e001      	b.n	800b52c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b528:	2302      	movs	r3, #2
 800b52a:	e000      	b.n	800b52e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3718      	adds	r7, #24
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b086      	sub	sp, #24
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	60f8      	str	r0, [r7, #12]
 800b53e:	460b      	mov	r3, r1
 800b540:	607a      	str	r2, [r7, #4]
 800b542:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b544:	7afb      	ldrb	r3, [r7, #11]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d17f      	bne.n	800b64a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	3314      	adds	r3, #20
 800b54e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b556:	2b02      	cmp	r3, #2
 800b558:	d15c      	bne.n	800b614 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	68da      	ldr	r2, [r3, #12]
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	429a      	cmp	r2, r3
 800b564:	d915      	bls.n	800b592 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	68da      	ldr	r2, [r3, #12]
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	691b      	ldr	r3, [r3, #16]
 800b56e:	1ad2      	subs	r2, r2, r3
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	b29b      	uxth	r3, r3
 800b57a:	461a      	mov	r2, r3
 800b57c:	6879      	ldr	r1, [r7, #4]
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f000 fec1 	bl	800c306 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b584:	2300      	movs	r3, #0
 800b586:	2200      	movs	r2, #0
 800b588:	2100      	movs	r1, #0
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f001 fb3e 	bl	800cc0c <USBD_LL_PrepareReceive>
 800b590:	e04e      	b.n	800b630 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	697a      	ldr	r2, [r7, #20]
 800b598:	6912      	ldr	r2, [r2, #16]
 800b59a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b59e:	fb02 f201 	mul.w	r2, r2, r1
 800b5a2:	1a9b      	subs	r3, r3, r2
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d11c      	bne.n	800b5e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	689a      	ldr	r2, [r3, #8]
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d316      	bcc.n	800b5e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	689a      	ldr	r2, [r3, #8]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d20f      	bcs.n	800b5e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f000 fe9d 	bl	800c306 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2100      	movs	r1, #0
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f001 fb16 	bl	800cc0c <USBD_LL_PrepareReceive>
 800b5e0:	e026      	b.n	800b630 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00a      	beq.n	800b604 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	d105      	bne.n	800b604 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b604:	2180      	movs	r1, #128	; 0x80
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f001 fa54 	bl	800cab4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fecf 	bl	800c3b0 <USBD_CtlReceiveStatus>
 800b612:	e00d      	b.n	800b630 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b61a:	2b04      	cmp	r3, #4
 800b61c:	d004      	beq.n	800b628 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b624:	2b00      	cmp	r3, #0
 800b626:	d103      	bne.n	800b630 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b628:	2180      	movs	r1, #128	; 0x80
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f001 fa42 	bl	800cab4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b636:	2b01      	cmp	r3, #1
 800b638:	d11d      	bne.n	800b676 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f7ff fe81 	bl	800b342 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2200      	movs	r2, #0
 800b644:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b648:	e015      	b.n	800b676 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00d      	beq.n	800b672 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b65c:	2b03      	cmp	r3, #3
 800b65e:	d108      	bne.n	800b672 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b666:	695b      	ldr	r3, [r3, #20]
 800b668:	7afa      	ldrb	r2, [r7, #11]
 800b66a:	4611      	mov	r1, r2
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	4798      	blx	r3
 800b670:	e001      	b.n	800b676 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b672:	2302      	movs	r3, #2
 800b674:	e000      	b.n	800b678 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3718      	adds	r7, #24
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b688:	2340      	movs	r3, #64	; 0x40
 800b68a:	2200      	movs	r2, #0
 800b68c:	2100      	movs	r1, #0
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f001 f9cb 	bl	800ca2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2240      	movs	r2, #64	; 0x40
 800b6a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6a4:	2340      	movs	r3, #64	; 0x40
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	2180      	movs	r1, #128	; 0x80
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f001 f9bd 	bl	800ca2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2240      	movs	r2, #64	; 0x40
 800b6ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d009      	beq.n	800b6f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	6852      	ldr	r2, [r2, #4]
 800b6f0:	b2d2      	uxtb	r2, r2
 800b6f2:	4611      	mov	r1, r2
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	4798      	blx	r3
  }

  return USBD_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b702:	b480      	push	{r7}
 800b704:	b083      	sub	sp, #12
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	460b      	mov	r3, r1
 800b70c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	78fa      	ldrb	r2, [r7, #3]
 800b712:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	370c      	adds	r7, #12
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bc80      	pop	{r7}
 800b71e:	4770      	bx	lr

0800b720 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2204      	movs	r2, #4
 800b738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	bc80      	pop	{r7}
 800b746:	4770      	bx	lr

0800b748 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b756:	2b04      	cmp	r3, #4
 800b758:	d105      	bne.n	800b766 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bc80      	pop	{r7}
 800b770:	4770      	bx	lr

0800b772 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b082      	sub	sp, #8
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b780:	2b03      	cmp	r3, #3
 800b782:	d10b      	bne.n	800b79c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b78a:	69db      	ldr	r3, [r3, #28]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d005      	beq.n	800b79c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b796:	69db      	ldr	r3, [r3, #28]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
	...

0800b7a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7be:	2b40      	cmp	r3, #64	; 0x40
 800b7c0:	d005      	beq.n	800b7ce <USBD_StdDevReq+0x26>
 800b7c2:	2b40      	cmp	r3, #64	; 0x40
 800b7c4:	d84f      	bhi.n	800b866 <USBD_StdDevReq+0xbe>
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d009      	beq.n	800b7de <USBD_StdDevReq+0x36>
 800b7ca:	2b20      	cmp	r3, #32
 800b7cc:	d14b      	bne.n	800b866 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	4798      	blx	r3
      break;
 800b7dc:	e048      	b.n	800b870 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	785b      	ldrb	r3, [r3, #1]
 800b7e2:	2b09      	cmp	r3, #9
 800b7e4:	d839      	bhi.n	800b85a <USBD_StdDevReq+0xb2>
 800b7e6:	a201      	add	r2, pc, #4	; (adr r2, 800b7ec <USBD_StdDevReq+0x44>)
 800b7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ec:	0800b83d 	.word	0x0800b83d
 800b7f0:	0800b851 	.word	0x0800b851
 800b7f4:	0800b85b 	.word	0x0800b85b
 800b7f8:	0800b847 	.word	0x0800b847
 800b7fc:	0800b85b 	.word	0x0800b85b
 800b800:	0800b81f 	.word	0x0800b81f
 800b804:	0800b815 	.word	0x0800b815
 800b808:	0800b85b 	.word	0x0800b85b
 800b80c:	0800b833 	.word	0x0800b833
 800b810:	0800b829 	.word	0x0800b829
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 f9dc 	bl	800bbd4 <USBD_GetDescriptor>
          break;
 800b81c:	e022      	b.n	800b864 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b81e:	6839      	ldr	r1, [r7, #0]
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fb3f 	bl	800bea4 <USBD_SetAddress>
          break;
 800b826:	e01d      	b.n	800b864 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fb7e 	bl	800bf2c <USBD_SetConfig>
          break;
 800b830:	e018      	b.n	800b864 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fc07 	bl	800c048 <USBD_GetConfig>
          break;
 800b83a:	e013      	b.n	800b864 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b83c:	6839      	ldr	r1, [r7, #0]
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fc37 	bl	800c0b2 <USBD_GetStatus>
          break;
 800b844:	e00e      	b.n	800b864 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fc65 	bl	800c118 <USBD_SetFeature>
          break;
 800b84e:	e009      	b.n	800b864 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b850:	6839      	ldr	r1, [r7, #0]
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 fc74 	bl	800c140 <USBD_ClrFeature>
          break;
 800b858:	e004      	b.n	800b864 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fccc 	bl	800c1fa <USBD_CtlError>
          break;
 800b862:	bf00      	nop
      }
      break;
 800b864:	e004      	b.n	800b870 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b866:	6839      	ldr	r1, [r7, #0]
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 fcc6 	bl	800c1fa <USBD_CtlError>
      break;
 800b86e:	bf00      	nop
  }

  return ret;
 800b870:	7bfb      	ldrb	r3, [r7, #15]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop

0800b87c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b886:	2300      	movs	r3, #0
 800b888:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b892:	2b40      	cmp	r3, #64	; 0x40
 800b894:	d005      	beq.n	800b8a2 <USBD_StdItfReq+0x26>
 800b896:	2b40      	cmp	r3, #64	; 0x40
 800b898:	d82e      	bhi.n	800b8f8 <USBD_StdItfReq+0x7c>
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d001      	beq.n	800b8a2 <USBD_StdItfReq+0x26>
 800b89e:	2b20      	cmp	r3, #32
 800b8a0:	d12a      	bne.n	800b8f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d81d      	bhi.n	800b8ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	889b      	ldrh	r3, [r3, #4]
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d813      	bhi.n	800b8e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	4798      	blx	r3
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	88db      	ldrh	r3, [r3, #6]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d110      	bne.n	800b8f4 <USBD_StdItfReq+0x78>
 800b8d2:	7bfb      	ldrb	r3, [r7, #15]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d10d      	bne.n	800b8f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fd56 	bl	800c38a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b8de:	e009      	b.n	800b8f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b8e0:	6839      	ldr	r1, [r7, #0]
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fc89 	bl	800c1fa <USBD_CtlError>
          break;
 800b8e8:	e004      	b.n	800b8f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b8ea:	6839      	ldr	r1, [r7, #0]
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 fc84 	bl	800c1fa <USBD_CtlError>
          break;
 800b8f2:	e000      	b.n	800b8f6 <USBD_StdItfReq+0x7a>
          break;
 800b8f4:	bf00      	nop
      }
      break;
 800b8f6:	e004      	b.n	800b902 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 fc7d 	bl	800c1fa <USBD_CtlError>
      break;
 800b900:	bf00      	nop
  }

  return USBD_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b916:	2300      	movs	r3, #0
 800b918:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	889b      	ldrh	r3, [r3, #4]
 800b91e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b928:	2b40      	cmp	r3, #64	; 0x40
 800b92a:	d007      	beq.n	800b93c <USBD_StdEPReq+0x30>
 800b92c:	2b40      	cmp	r3, #64	; 0x40
 800b92e:	f200 8146 	bhi.w	800bbbe <USBD_StdEPReq+0x2b2>
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00a      	beq.n	800b94c <USBD_StdEPReq+0x40>
 800b936:	2b20      	cmp	r3, #32
 800b938:	f040 8141 	bne.w	800bbbe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	6839      	ldr	r1, [r7, #0]
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	4798      	blx	r3
      break;
 800b94a:	e13d      	b.n	800bbc8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b954:	2b20      	cmp	r3, #32
 800b956:	d10a      	bne.n	800b96e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	6839      	ldr	r1, [r7, #0]
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	4798      	blx	r3
 800b966:	4603      	mov	r3, r0
 800b968:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
 800b96c:	e12d      	b.n	800bbca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	785b      	ldrb	r3, [r3, #1]
 800b972:	2b03      	cmp	r3, #3
 800b974:	d007      	beq.n	800b986 <USBD_StdEPReq+0x7a>
 800b976:	2b03      	cmp	r3, #3
 800b978:	f300 811b 	bgt.w	800bbb2 <USBD_StdEPReq+0x2a6>
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d072      	beq.n	800ba66 <USBD_StdEPReq+0x15a>
 800b980:	2b01      	cmp	r3, #1
 800b982:	d03a      	beq.n	800b9fa <USBD_StdEPReq+0xee>
 800b984:	e115      	b.n	800bbb2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d002      	beq.n	800b996 <USBD_StdEPReq+0x8a>
 800b990:	2b03      	cmp	r3, #3
 800b992:	d015      	beq.n	800b9c0 <USBD_StdEPReq+0xb4>
 800b994:	e02b      	b.n	800b9ee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b996:	7bbb      	ldrb	r3, [r7, #14]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00c      	beq.n	800b9b6 <USBD_StdEPReq+0xaa>
 800b99c:	7bbb      	ldrb	r3, [r7, #14]
 800b99e:	2b80      	cmp	r3, #128	; 0x80
 800b9a0:	d009      	beq.n	800b9b6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b9a2:	7bbb      	ldrb	r3, [r7, #14]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f001 f884 	bl	800cab4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b9ac:	2180      	movs	r1, #128	; 0x80
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f001 f880 	bl	800cab4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9b4:	e020      	b.n	800b9f8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b9b6:	6839      	ldr	r1, [r7, #0]
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 fc1e 	bl	800c1fa <USBD_CtlError>
              break;
 800b9be:	e01b      	b.n	800b9f8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	885b      	ldrh	r3, [r3, #2]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10e      	bne.n	800b9e6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b9c8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00b      	beq.n	800b9e6 <USBD_StdEPReq+0xda>
 800b9ce:	7bbb      	ldrb	r3, [r7, #14]
 800b9d0:	2b80      	cmp	r3, #128	; 0x80
 800b9d2:	d008      	beq.n	800b9e6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	88db      	ldrh	r3, [r3, #6]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d104      	bne.n	800b9e6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f001 f867 	bl	800cab4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fccf 	bl	800c38a <USBD_CtlSendStatus>

              break;
 800b9ec:	e004      	b.n	800b9f8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fc02 	bl	800c1fa <USBD_CtlError>
              break;
 800b9f6:	bf00      	nop
          }
          break;
 800b9f8:	e0e0      	b.n	800bbbc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d002      	beq.n	800ba0a <USBD_StdEPReq+0xfe>
 800ba04:	2b03      	cmp	r3, #3
 800ba06:	d015      	beq.n	800ba34 <USBD_StdEPReq+0x128>
 800ba08:	e026      	b.n	800ba58 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba0a:	7bbb      	ldrb	r3, [r7, #14]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00c      	beq.n	800ba2a <USBD_StdEPReq+0x11e>
 800ba10:	7bbb      	ldrb	r3, [r7, #14]
 800ba12:	2b80      	cmp	r3, #128	; 0x80
 800ba14:	d009      	beq.n	800ba2a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ba16:	7bbb      	ldrb	r3, [r7, #14]
 800ba18:	4619      	mov	r1, r3
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f001 f84a 	bl	800cab4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ba20:	2180      	movs	r1, #128	; 0x80
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f001 f846 	bl	800cab4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba28:	e01c      	b.n	800ba64 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ba2a:	6839      	ldr	r1, [r7, #0]
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fbe4 	bl	800c1fa <USBD_CtlError>
              break;
 800ba32:	e017      	b.n	800ba64 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	885b      	ldrh	r3, [r3, #2]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d112      	bne.n	800ba62 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba3c:	7bbb      	ldrb	r3, [r7, #14]
 800ba3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d004      	beq.n	800ba50 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba46:	7bbb      	ldrb	r3, [r7, #14]
 800ba48:	4619      	mov	r1, r3
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f001 f851 	bl	800caf2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 fc9a 	bl	800c38a <USBD_CtlSendStatus>
              }
              break;
 800ba56:	e004      	b.n	800ba62 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ba58:	6839      	ldr	r1, [r7, #0]
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fbcd 	bl	800c1fa <USBD_CtlError>
              break;
 800ba60:	e000      	b.n	800ba64 <USBD_StdEPReq+0x158>
              break;
 800ba62:	bf00      	nop
          }
          break;
 800ba64:	e0aa      	b.n	800bbbc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d002      	beq.n	800ba76 <USBD_StdEPReq+0x16a>
 800ba70:	2b03      	cmp	r3, #3
 800ba72:	d032      	beq.n	800bada <USBD_StdEPReq+0x1ce>
 800ba74:	e097      	b.n	800bba6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba76:	7bbb      	ldrb	r3, [r7, #14]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d007      	beq.n	800ba8c <USBD_StdEPReq+0x180>
 800ba7c:	7bbb      	ldrb	r3, [r7, #14]
 800ba7e:	2b80      	cmp	r3, #128	; 0x80
 800ba80:	d004      	beq.n	800ba8c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ba82:	6839      	ldr	r1, [r7, #0]
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fbb8 	bl	800c1fa <USBD_CtlError>
                break;
 800ba8a:	e091      	b.n	800bbb0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	da0b      	bge.n	800baac <USBD_StdEPReq+0x1a0>
 800ba94:	7bbb      	ldrb	r3, [r7, #14]
 800ba96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4413      	add	r3, r2
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	3310      	adds	r3, #16
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	4413      	add	r3, r2
 800baa8:	3304      	adds	r3, #4
 800baaa:	e00b      	b.n	800bac4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bab2:	4613      	mov	r3, r2
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4413      	add	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	4413      	add	r3, r2
 800bac2:	3304      	adds	r3, #4
 800bac4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	2200      	movs	r2, #0
 800baca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	2202      	movs	r2, #2
 800bad0:	4619      	mov	r1, r3
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fbfb 	bl	800c2ce <USBD_CtlSendData>
              break;
 800bad8:	e06a      	b.n	800bbb0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bada:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	da11      	bge.n	800bb06 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bae2:	7bbb      	ldrb	r3, [r7, #14]
 800bae4:	f003 020f 	and.w	r2, r3, #15
 800bae8:	6879      	ldr	r1, [r7, #4]
 800baea:	4613      	mov	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4413      	add	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	440b      	add	r3, r1
 800baf4:	3318      	adds	r3, #24
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d117      	bne.n	800bb2c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bafc:	6839      	ldr	r1, [r7, #0]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 fb7b 	bl	800c1fa <USBD_CtlError>
                  break;
 800bb04:	e054      	b.n	800bbb0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb06:	7bbb      	ldrb	r3, [r7, #14]
 800bb08:	f003 020f 	and.w	r2, r3, #15
 800bb0c:	6879      	ldr	r1, [r7, #4]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	4413      	add	r3, r2
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	440b      	add	r3, r1
 800bb18:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d104      	bne.n	800bb2c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bb22:	6839      	ldr	r1, [r7, #0]
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 fb68 	bl	800c1fa <USBD_CtlError>
                  break;
 800bb2a:	e041      	b.n	800bbb0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	da0b      	bge.n	800bb4c <USBD_StdEPReq+0x240>
 800bb34:	7bbb      	ldrb	r3, [r7, #14]
 800bb36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4413      	add	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	3310      	adds	r3, #16
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	4413      	add	r3, r2
 800bb48:	3304      	adds	r3, #4
 800bb4a:	e00b      	b.n	800bb64 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb4c:	7bbb      	ldrb	r3, [r7, #14]
 800bb4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb52:	4613      	mov	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4413      	add	r3, r2
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	4413      	add	r3, r2
 800bb62:	3304      	adds	r3, #4
 800bb64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb66:	7bbb      	ldrb	r3, [r7, #14]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d002      	beq.n	800bb72 <USBD_StdEPReq+0x266>
 800bb6c:	7bbb      	ldrb	r3, [r7, #14]
 800bb6e:	2b80      	cmp	r3, #128	; 0x80
 800bb70:	d103      	bne.n	800bb7a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2200      	movs	r2, #0
 800bb76:	601a      	str	r2, [r3, #0]
 800bb78:	e00e      	b.n	800bb98 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 ffd6 	bl	800cb30 <USBD_LL_IsStallEP>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	601a      	str	r2, [r3, #0]
 800bb90:	e002      	b.n	800bb98 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	2200      	movs	r2, #0
 800bb96:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fb95 	bl	800c2ce <USBD_CtlSendData>
              break;
 800bba4:	e004      	b.n	800bbb0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fb26 	bl	800c1fa <USBD_CtlError>
              break;
 800bbae:	bf00      	nop
          }
          break;
 800bbb0:	e004      	b.n	800bbbc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bbb2:	6839      	ldr	r1, [r7, #0]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fb20 	bl	800c1fa <USBD_CtlError>
          break;
 800bbba:	bf00      	nop
      }
      break;
 800bbbc:	e004      	b.n	800bbc8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bbbe:	6839      	ldr	r1, [r7, #0]
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fb1a 	bl	800c1fa <USBD_CtlError>
      break;
 800bbc6:	bf00      	nop
  }

  return ret;
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	885b      	ldrh	r3, [r3, #2]
 800bbee:	0a1b      	lsrs	r3, r3, #8
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	2b06      	cmp	r3, #6
 800bbf6:	f200 8128 	bhi.w	800be4a <USBD_GetDescriptor+0x276>
 800bbfa:	a201      	add	r2, pc, #4	; (adr r2, 800bc00 <USBD_GetDescriptor+0x2c>)
 800bbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc00:	0800bc1d 	.word	0x0800bc1d
 800bc04:	0800bc35 	.word	0x0800bc35
 800bc08:	0800bc75 	.word	0x0800bc75
 800bc0c:	0800be4b 	.word	0x0800be4b
 800bc10:	0800be4b 	.word	0x0800be4b
 800bc14:	0800bdeb 	.word	0x0800bdeb
 800bc18:	0800be17 	.word	0x0800be17
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	7c12      	ldrb	r2, [r2, #16]
 800bc28:	f107 0108 	add.w	r1, r7, #8
 800bc2c:	4610      	mov	r0, r2
 800bc2e:	4798      	blx	r3
 800bc30:	60f8      	str	r0, [r7, #12]
      break;
 800bc32:	e112      	b.n	800be5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	7c1b      	ldrb	r3, [r3, #16]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10d      	bne.n	800bc58 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc44:	f107 0208 	add.w	r2, r7, #8
 800bc48:	4610      	mov	r0, r2
 800bc4a:	4798      	blx	r3
 800bc4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	3301      	adds	r3, #1
 800bc52:	2202      	movs	r2, #2
 800bc54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc56:	e100      	b.n	800be5a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc60:	f107 0208 	add.w	r2, r7, #8
 800bc64:	4610      	mov	r0, r2
 800bc66:	4798      	blx	r3
 800bc68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	2202      	movs	r2, #2
 800bc70:	701a      	strb	r2, [r3, #0]
      break;
 800bc72:	e0f2      	b.n	800be5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	885b      	ldrh	r3, [r3, #2]
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	2b05      	cmp	r3, #5
 800bc7c:	f200 80ac 	bhi.w	800bdd8 <USBD_GetDescriptor+0x204>
 800bc80:	a201      	add	r2, pc, #4	; (adr r2, 800bc88 <USBD_GetDescriptor+0xb4>)
 800bc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc86:	bf00      	nop
 800bc88:	0800bca1 	.word	0x0800bca1
 800bc8c:	0800bcd5 	.word	0x0800bcd5
 800bc90:	0800bd09 	.word	0x0800bd09
 800bc94:	0800bd3d 	.word	0x0800bd3d
 800bc98:	0800bd71 	.word	0x0800bd71
 800bc9c:	0800bda5 	.word	0x0800bda5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00b      	beq.n	800bcc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	7c12      	ldrb	r2, [r2, #16]
 800bcb8:	f107 0108 	add.w	r1, r7, #8
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	4798      	blx	r3
 800bcc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcc2:	e091      	b.n	800bde8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 fa97 	bl	800c1fa <USBD_CtlError>
            err++;
 800bccc:	7afb      	ldrb	r3, [r7, #11]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcd2:	e089      	b.n	800bde8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00b      	beq.n	800bcf8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	7c12      	ldrb	r2, [r2, #16]
 800bcec:	f107 0108 	add.w	r1, r7, #8
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	4798      	blx	r3
 800bcf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcf6:	e077      	b.n	800bde8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcf8:	6839      	ldr	r1, [r7, #0]
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fa7d 	bl	800c1fa <USBD_CtlError>
            err++;
 800bd00:	7afb      	ldrb	r3, [r7, #11]
 800bd02:	3301      	adds	r3, #1
 800bd04:	72fb      	strb	r3, [r7, #11]
          break;
 800bd06:	e06f      	b.n	800bde8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00b      	beq.n	800bd2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	7c12      	ldrb	r2, [r2, #16]
 800bd20:	f107 0108 	add.w	r1, r7, #8
 800bd24:	4610      	mov	r0, r2
 800bd26:	4798      	blx	r3
 800bd28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd2a:	e05d      	b.n	800bde8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd2c:	6839      	ldr	r1, [r7, #0]
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fa63 	bl	800c1fa <USBD_CtlError>
            err++;
 800bd34:	7afb      	ldrb	r3, [r7, #11]
 800bd36:	3301      	adds	r3, #1
 800bd38:	72fb      	strb	r3, [r7, #11]
          break;
 800bd3a:	e055      	b.n	800bde8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00b      	beq.n	800bd60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	7c12      	ldrb	r2, [r2, #16]
 800bd54:	f107 0108 	add.w	r1, r7, #8
 800bd58:	4610      	mov	r0, r2
 800bd5a:	4798      	blx	r3
 800bd5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd5e:	e043      	b.n	800bde8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd60:	6839      	ldr	r1, [r7, #0]
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fa49 	bl	800c1fa <USBD_CtlError>
            err++;
 800bd68:	7afb      	ldrb	r3, [r7, #11]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd6e:	e03b      	b.n	800bde8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd76:	695b      	ldr	r3, [r3, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00b      	beq.n	800bd94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	7c12      	ldrb	r2, [r2, #16]
 800bd88:	f107 0108 	add.w	r1, r7, #8
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	4798      	blx	r3
 800bd90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd92:	e029      	b.n	800bde8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd94:	6839      	ldr	r1, [r7, #0]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fa2f 	bl	800c1fa <USBD_CtlError>
            err++;
 800bd9c:	7afb      	ldrb	r3, [r7, #11]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	72fb      	strb	r3, [r7, #11]
          break;
 800bda2:	e021      	b.n	800bde8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00b      	beq.n	800bdc8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdb6:	699b      	ldr	r3, [r3, #24]
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	7c12      	ldrb	r2, [r2, #16]
 800bdbc:	f107 0108 	add.w	r1, r7, #8
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	4798      	blx	r3
 800bdc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdc6:	e00f      	b.n	800bde8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdc8:	6839      	ldr	r1, [r7, #0]
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fa15 	bl	800c1fa <USBD_CtlError>
            err++;
 800bdd0:	7afb      	ldrb	r3, [r7, #11]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	72fb      	strb	r3, [r7, #11]
          break;
 800bdd6:	e007      	b.n	800bde8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fa0d 	bl	800c1fa <USBD_CtlError>
          err++;
 800bde0:	7afb      	ldrb	r3, [r7, #11]
 800bde2:	3301      	adds	r3, #1
 800bde4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bde6:	e038      	b.n	800be5a <USBD_GetDescriptor+0x286>
 800bde8:	e037      	b.n	800be5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	7c1b      	ldrb	r3, [r3, #16]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d109      	bne.n	800be06 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdfa:	f107 0208 	add.w	r2, r7, #8
 800bdfe:	4610      	mov	r0, r2
 800be00:	4798      	blx	r3
 800be02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be04:	e029      	b.n	800be5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 f9f6 	bl	800c1fa <USBD_CtlError>
        err++;
 800be0e:	7afb      	ldrb	r3, [r7, #11]
 800be10:	3301      	adds	r3, #1
 800be12:	72fb      	strb	r3, [r7, #11]
      break;
 800be14:	e021      	b.n	800be5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	7c1b      	ldrb	r3, [r3, #16]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10d      	bne.n	800be3a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be26:	f107 0208 	add.w	r2, r7, #8
 800be2a:	4610      	mov	r0, r2
 800be2c:	4798      	blx	r3
 800be2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	3301      	adds	r3, #1
 800be34:	2207      	movs	r2, #7
 800be36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be38:	e00f      	b.n	800be5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 f9dc 	bl	800c1fa <USBD_CtlError>
        err++;
 800be42:	7afb      	ldrb	r3, [r7, #11]
 800be44:	3301      	adds	r3, #1
 800be46:	72fb      	strb	r3, [r7, #11]
      break;
 800be48:	e007      	b.n	800be5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800be4a:	6839      	ldr	r1, [r7, #0]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 f9d4 	bl	800c1fa <USBD_CtlError>
      err++;
 800be52:	7afb      	ldrb	r3, [r7, #11]
 800be54:	3301      	adds	r3, #1
 800be56:	72fb      	strb	r3, [r7, #11]
      break;
 800be58:	bf00      	nop
  }

  if (err != 0U)
 800be5a:	7afb      	ldrb	r3, [r7, #11]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d11c      	bne.n	800be9a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800be60:	893b      	ldrh	r3, [r7, #8]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d011      	beq.n	800be8a <USBD_GetDescriptor+0x2b6>
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	88db      	ldrh	r3, [r3, #6]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00d      	beq.n	800be8a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	88da      	ldrh	r2, [r3, #6]
 800be72:	893b      	ldrh	r3, [r7, #8]
 800be74:	4293      	cmp	r3, r2
 800be76:	bf28      	it	cs
 800be78:	4613      	movcs	r3, r2
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be7e:	893b      	ldrh	r3, [r7, #8]
 800be80:	461a      	mov	r2, r3
 800be82:	68f9      	ldr	r1, [r7, #12]
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fa22 	bl	800c2ce <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	88db      	ldrh	r3, [r3, #6]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d104      	bne.n	800be9c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fa79 	bl	800c38a <USBD_CtlSendStatus>
 800be98:	e000      	b.n	800be9c <USBD_GetDescriptor+0x2c8>
    return;
 800be9a:	bf00      	nop
    }
  }
}
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop

0800bea4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	889b      	ldrh	r3, [r3, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d130      	bne.n	800bf18 <USBD_SetAddress+0x74>
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	88db      	ldrh	r3, [r3, #6]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d12c      	bne.n	800bf18 <USBD_SetAddress+0x74>
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	885b      	ldrh	r3, [r3, #2]
 800bec2:	2b7f      	cmp	r3, #127	; 0x7f
 800bec4:	d828      	bhi.n	800bf18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	885b      	ldrh	r3, [r3, #2]
 800beca:	b2db      	uxtb	r3, r3
 800becc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bed0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bed8:	2b03      	cmp	r3, #3
 800beda:	d104      	bne.n	800bee6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f98b 	bl	800c1fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bee4:	e01d      	b.n	800bf22 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	7bfa      	ldrb	r2, [r7, #15]
 800beea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800beee:	7bfb      	ldrb	r3, [r7, #15]
 800bef0:	4619      	mov	r1, r3
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 fe48 	bl	800cb88 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fa46 	bl	800c38a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800befe:	7bfb      	ldrb	r3, [r7, #15]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d004      	beq.n	800bf0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2202      	movs	r2, #2
 800bf08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf0c:	e009      	b.n	800bf22 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2201      	movs	r2, #1
 800bf12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf16:	e004      	b.n	800bf22 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f96d 	bl	800c1fa <USBD_CtlError>
  }
}
 800bf20:	bf00      	nop
 800bf22:	bf00      	nop
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
	...

0800bf2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	885b      	ldrh	r3, [r3, #2]
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	4b41      	ldr	r3, [pc, #260]	; (800c044 <USBD_SetConfig+0x118>)
 800bf3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf40:	4b40      	ldr	r3, [pc, #256]	; (800c044 <USBD_SetConfig+0x118>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d904      	bls.n	800bf52 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f955 	bl	800c1fa <USBD_CtlError>
 800bf50:	e075      	b.n	800c03e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	d002      	beq.n	800bf62 <USBD_SetConfig+0x36>
 800bf5c:	2b03      	cmp	r3, #3
 800bf5e:	d023      	beq.n	800bfa8 <USBD_SetConfig+0x7c>
 800bf60:	e062      	b.n	800c028 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bf62:	4b38      	ldr	r3, [pc, #224]	; (800c044 <USBD_SetConfig+0x118>)
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d01a      	beq.n	800bfa0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bf6a:	4b36      	ldr	r3, [pc, #216]	; (800c044 <USBD_SetConfig+0x118>)
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2203      	movs	r2, #3
 800bf78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bf7c:	4b31      	ldr	r3, [pc, #196]	; (800c044 <USBD_SetConfig+0x118>)
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	4619      	mov	r1, r3
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff f9e7 	bl	800b356 <USBD_SetClassConfig>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d104      	bne.n	800bf98 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bf8e:	6839      	ldr	r1, [r7, #0]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 f932 	bl	800c1fa <USBD_CtlError>
            return;
 800bf96:	e052      	b.n	800c03e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 f9f6 	bl	800c38a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bf9e:	e04e      	b.n	800c03e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 f9f2 	bl	800c38a <USBD_CtlSendStatus>
        break;
 800bfa6:	e04a      	b.n	800c03e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bfa8:	4b26      	ldr	r3, [pc, #152]	; (800c044 <USBD_SetConfig+0x118>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d112      	bne.n	800bfd6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2202      	movs	r2, #2
 800bfb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bfb8:	4b22      	ldr	r3, [pc, #136]	; (800c044 <USBD_SetConfig+0x118>)
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bfc2:	4b20      	ldr	r3, [pc, #128]	; (800c044 <USBD_SetConfig+0x118>)
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f7ff f9e3 	bl	800b394 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f9db 	bl	800c38a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bfd4:	e033      	b.n	800c03e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bfd6:	4b1b      	ldr	r3, [pc, #108]	; (800c044 <USBD_SetConfig+0x118>)
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d01d      	beq.n	800c020 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	4619      	mov	r1, r3
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f7ff f9d1 	bl	800b394 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bff2:	4b14      	ldr	r3, [pc, #80]	; (800c044 <USBD_SetConfig+0x118>)
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	461a      	mov	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bffc:	4b11      	ldr	r3, [pc, #68]	; (800c044 <USBD_SetConfig+0x118>)
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7ff f9a7 	bl	800b356 <USBD_SetClassConfig>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	d104      	bne.n	800c018 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f8f2 	bl	800c1fa <USBD_CtlError>
            return;
 800c016:	e012      	b.n	800c03e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f9b6 	bl	800c38a <USBD_CtlSendStatus>
        break;
 800c01e:	e00e      	b.n	800c03e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 f9b2 	bl	800c38a <USBD_CtlSendStatus>
        break;
 800c026:	e00a      	b.n	800c03e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c028:	6839      	ldr	r1, [r7, #0]
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 f8e5 	bl	800c1fa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c030:	4b04      	ldr	r3, [pc, #16]	; (800c044 <USBD_SetConfig+0x118>)
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f7ff f9ac 	bl	800b394 <USBD_ClrClassConfig>
        break;
 800c03c:	bf00      	nop
    }
  }
}
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	200002fc 	.word	0x200002fc

0800c048 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	88db      	ldrh	r3, [r3, #6]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d004      	beq.n	800c064 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 f8cc 	bl	800c1fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c062:	e022      	b.n	800c0aa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	dc02      	bgt.n	800c074 <USBD_GetConfig+0x2c>
 800c06e:	2b00      	cmp	r3, #0
 800c070:	dc03      	bgt.n	800c07a <USBD_GetConfig+0x32>
 800c072:	e015      	b.n	800c0a0 <USBD_GetConfig+0x58>
 800c074:	2b03      	cmp	r3, #3
 800c076:	d00b      	beq.n	800c090 <USBD_GetConfig+0x48>
 800c078:	e012      	b.n	800c0a0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	3308      	adds	r3, #8
 800c084:	2201      	movs	r2, #1
 800c086:	4619      	mov	r1, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 f920 	bl	800c2ce <USBD_CtlSendData>
        break;
 800c08e:	e00c      	b.n	800c0aa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	3304      	adds	r3, #4
 800c094:	2201      	movs	r2, #1
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f918 	bl	800c2ce <USBD_CtlSendData>
        break;
 800c09e:	e004      	b.n	800c0aa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 f8a9 	bl	800c1fa <USBD_CtlError>
        break;
 800c0a8:	bf00      	nop
}
 800c0aa:	bf00      	nop
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b082      	sub	sp, #8
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
 800c0ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d81e      	bhi.n	800c106 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	88db      	ldrh	r3, [r3, #6]
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d004      	beq.n	800c0da <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f891 	bl	800c1fa <USBD_CtlError>
        break;
 800c0d8:	e01a      	b.n	800c110 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d005      	beq.n	800c0f6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	f043 0202 	orr.w	r2, r3, #2
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	330c      	adds	r3, #12
 800c0fa:	2202      	movs	r2, #2
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f8e5 	bl	800c2ce <USBD_CtlSendData>
      break;
 800c104:	e004      	b.n	800c110 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 f876 	bl	800c1fa <USBD_CtlError>
      break;
 800c10e:	bf00      	nop
  }
}
 800c110:	bf00      	nop
 800c112:	3708      	adds	r7, #8
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	885b      	ldrh	r3, [r3, #2]
 800c126:	2b01      	cmp	r3, #1
 800c128:	d106      	bne.n	800c138 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2201      	movs	r2, #1
 800c12e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f929 	bl	800c38a <USBD_CtlSendStatus>
  }
}
 800c138:	bf00      	nop
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c150:	3b01      	subs	r3, #1
 800c152:	2b02      	cmp	r3, #2
 800c154:	d80b      	bhi.n	800c16e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	885b      	ldrh	r3, [r3, #2]
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d10c      	bne.n	800c178 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f90f 	bl	800c38a <USBD_CtlSendStatus>
      }
      break;
 800c16c:	e004      	b.n	800c178 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 f842 	bl	800c1fa <USBD_CtlError>
      break;
 800c176:	e000      	b.n	800c17a <USBD_ClrFeature+0x3a>
      break;
 800c178:	bf00      	nop
  }
}
 800c17a:	bf00      	nop
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c182:	b480      	push	{r7}
 800c184:	b083      	sub	sp, #12
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
 800c18a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	781a      	ldrb	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	785a      	ldrb	r2, [r3, #1]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	3302      	adds	r3, #2
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	3303      	adds	r3, #3
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	021b      	lsls	r3, r3, #8
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	4413      	add	r3, r2
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	3304      	adds	r3, #4
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	3305      	adds	r3, #5
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	021b      	lsls	r3, r3, #8
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	4413      	add	r3, r2
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	3306      	adds	r3, #6
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	3307      	adds	r3, #7
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	021b      	lsls	r3, r3, #8
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	4413      	add	r3, r2
 800c1ea:	b29a      	uxth	r2, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	80da      	strh	r2, [r3, #6]

}
 800c1f0:	bf00      	nop
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bc80      	pop	{r7}
 800c1f8:	4770      	bx	lr

0800c1fa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b082      	sub	sp, #8
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c204:	2180      	movs	r1, #128	; 0x80
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fc54 	bl	800cab4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c20c:	2100      	movs	r1, #0
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 fc50 	bl	800cab4 <USBD_LL_StallEP>
}
 800c214:	bf00      	nop
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b086      	sub	sp, #24
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c228:	2300      	movs	r3, #0
 800c22a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d032      	beq.n	800c298 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f000 f834 	bl	800c2a0 <USBD_GetLen>
 800c238:	4603      	mov	r3, r0
 800c23a:	3301      	adds	r3, #1
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	005b      	lsls	r3, r3, #1
 800c240:	b29a      	uxth	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c246:	7dfb      	ldrb	r3, [r7, #23]
 800c248:	1c5a      	adds	r2, r3, #1
 800c24a:	75fa      	strb	r2, [r7, #23]
 800c24c:	461a      	mov	r2, r3
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	4413      	add	r3, r2
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	7812      	ldrb	r2, [r2, #0]
 800c256:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c258:	7dfb      	ldrb	r3, [r7, #23]
 800c25a:	1c5a      	adds	r2, r3, #1
 800c25c:	75fa      	strb	r2, [r7, #23]
 800c25e:	461a      	mov	r2, r3
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	4413      	add	r3, r2
 800c264:	2203      	movs	r2, #3
 800c266:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c268:	e012      	b.n	800c290 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	1c5a      	adds	r2, r3, #1
 800c26e:	60fa      	str	r2, [r7, #12]
 800c270:	7dfa      	ldrb	r2, [r7, #23]
 800c272:	1c51      	adds	r1, r2, #1
 800c274:	75f9      	strb	r1, [r7, #23]
 800c276:	4611      	mov	r1, r2
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	440a      	add	r2, r1
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c280:	7dfb      	ldrb	r3, [r7, #23]
 800c282:	1c5a      	adds	r2, r3, #1
 800c284:	75fa      	strb	r2, [r7, #23]
 800c286:	461a      	mov	r2, r3
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	4413      	add	r3, r2
 800c28c:	2200      	movs	r2, #0
 800c28e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1e8      	bne.n	800c26a <USBD_GetString+0x4e>
    }
  }
}
 800c298:	bf00      	nop
 800c29a:	3718      	adds	r7, #24
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c2ac:	e005      	b.n	800c2ba <USBD_GetLen+0x1a>
  {
    len++;
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1f5      	bne.n	800c2ae <USBD_GetLen+0xe>
  }

  return len;
 800c2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3714      	adds	r7, #20
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bc80      	pop	{r7}
 800c2cc:	4770      	bx	lr

0800c2ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b084      	sub	sp, #16
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	60f8      	str	r0, [r7, #12]
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	4613      	mov	r3, r2
 800c2da:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2202      	movs	r2, #2
 800c2e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c2e4:	88fa      	ldrh	r2, [r7, #6]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c2ea:	88fa      	ldrh	r2, [r7, #6]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2f0:	88fb      	ldrh	r3, [r7, #6]
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f000 fc65 	bl	800cbc6 <USBD_LL_Transmit>

  return USBD_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b084      	sub	sp, #16
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	60f8      	str	r0, [r7, #12]
 800c30e:	60b9      	str	r1, [r7, #8]
 800c310:	4613      	mov	r3, r2
 800c312:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c314:	88fb      	ldrh	r3, [r7, #6]
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	2100      	movs	r1, #0
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f000 fc53 	bl	800cbc6 <USBD_LL_Transmit>

  return USBD_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b084      	sub	sp, #16
 800c32e:	af00      	add	r7, sp, #0
 800c330:	60f8      	str	r0, [r7, #12]
 800c332:	60b9      	str	r1, [r7, #8]
 800c334:	4613      	mov	r3, r2
 800c336:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2203      	movs	r2, #3
 800c33c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c340:	88fa      	ldrh	r2, [r7, #6]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c348:	88fa      	ldrh	r2, [r7, #6]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c350:	88fb      	ldrh	r3, [r7, #6]
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	2100      	movs	r1, #0
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f000 fc58 	bl	800cc0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	60b9      	str	r1, [r7, #8]
 800c370:	4613      	mov	r3, r2
 800c372:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c374:	88fb      	ldrh	r3, [r7, #6]
 800c376:	68ba      	ldr	r2, [r7, #8]
 800c378:	2100      	movs	r1, #0
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f000 fc46 	bl	800cc0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b082      	sub	sp, #8
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2204      	movs	r2, #4
 800c396:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c39a:	2300      	movs	r3, #0
 800c39c:	2200      	movs	r2, #0
 800c39e:	2100      	movs	r1, #0
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fc10 	bl	800cbc6 <USBD_LL_Transmit>

  return USBD_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2205      	movs	r2, #5
 800c3bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fc20 	bl	800cc0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
	...

0800c3d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	4912      	ldr	r1, [pc, #72]	; (800c428 <MX_USB_DEVICE_Init+0x50>)
 800c3e0:	4812      	ldr	r0, [pc, #72]	; (800c42c <MX_USB_DEVICE_Init+0x54>)
 800c3e2:	f7fe ff5e 	bl	800b2a2 <USBD_Init>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c3ec:	f7f6 fef4 	bl	80031d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c3f0:	490f      	ldr	r1, [pc, #60]	; (800c430 <MX_USB_DEVICE_Init+0x58>)
 800c3f2:	480e      	ldr	r0, [pc, #56]	; (800c42c <MX_USB_DEVICE_Init+0x54>)
 800c3f4:	f7fe ff80 	bl	800b2f8 <USBD_RegisterClass>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d001      	beq.n	800c402 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c3fe:	f7f6 feeb 	bl	80031d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c402:	490c      	ldr	r1, [pc, #48]	; (800c434 <MX_USB_DEVICE_Init+0x5c>)
 800c404:	4809      	ldr	r0, [pc, #36]	; (800c42c <MX_USB_DEVICE_Init+0x54>)
 800c406:	f7fe feb1 	bl	800b16c <USBD_CDC_RegisterInterface>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d001      	beq.n	800c414 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c410:	f7f6 fee2 	bl	80031d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c414:	4805      	ldr	r0, [pc, #20]	; (800c42c <MX_USB_DEVICE_Init+0x54>)
 800c416:	f7fe ff88 	bl	800b32a <USBD_Start>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d001      	beq.n	800c424 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c420:	f7f6 feda 	bl	80031d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c424:	bf00      	nop
 800c426:	bd80      	pop	{r7, pc}
 800c428:	20000164 	.word	0x20000164
 800c42c:	20000710 	.word	0x20000710
 800c430:	20000050 	.word	0x20000050
 800c434:	20000154 	.word	0x20000154

0800c438 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c43c:	2200      	movs	r2, #0
 800c43e:	4905      	ldr	r1, [pc, #20]	; (800c454 <CDC_Init_FS+0x1c>)
 800c440:	4805      	ldr	r0, [pc, #20]	; (800c458 <CDC_Init_FS+0x20>)
 800c442:	f7fe fea9 	bl	800b198 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c446:	4905      	ldr	r1, [pc, #20]	; (800c45c <CDC_Init_FS+0x24>)
 800c448:	4803      	ldr	r0, [pc, #12]	; (800c458 <CDC_Init_FS+0x20>)
 800c44a:	f7fe febe 	bl	800b1ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c44e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c450:	4618      	mov	r0, r3
 800c452:	bd80      	pop	{r7, pc}
 800c454:	20000dbc 	.word	0x20000dbc
 800c458:	20000710 	.word	0x20000710
 800c45c:	200009d4 	.word	0x200009d4

0800c460 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c460:	b480      	push	{r7}
 800c462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c464:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c466:	4618      	mov	r0, r3
 800c468:	46bd      	mov	sp, r7
 800c46a:	bc80      	pop	{r7}
 800c46c:	4770      	bx	lr
	...

0800c470 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	4603      	mov	r3, r0
 800c478:	6039      	str	r1, [r7, #0]
 800c47a:	71fb      	strb	r3, [r7, #7]
 800c47c:	4613      	mov	r3, r2
 800c47e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c480:	79fb      	ldrb	r3, [r7, #7]
 800c482:	2b23      	cmp	r3, #35	; 0x23
 800c484:	d84a      	bhi.n	800c51c <CDC_Control_FS+0xac>
 800c486:	a201      	add	r2, pc, #4	; (adr r2, 800c48c <CDC_Control_FS+0x1c>)
 800c488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c48c:	0800c51d 	.word	0x0800c51d
 800c490:	0800c51d 	.word	0x0800c51d
 800c494:	0800c51d 	.word	0x0800c51d
 800c498:	0800c51d 	.word	0x0800c51d
 800c49c:	0800c51d 	.word	0x0800c51d
 800c4a0:	0800c51d 	.word	0x0800c51d
 800c4a4:	0800c51d 	.word	0x0800c51d
 800c4a8:	0800c51d 	.word	0x0800c51d
 800c4ac:	0800c51d 	.word	0x0800c51d
 800c4b0:	0800c51d 	.word	0x0800c51d
 800c4b4:	0800c51d 	.word	0x0800c51d
 800c4b8:	0800c51d 	.word	0x0800c51d
 800c4bc:	0800c51d 	.word	0x0800c51d
 800c4c0:	0800c51d 	.word	0x0800c51d
 800c4c4:	0800c51d 	.word	0x0800c51d
 800c4c8:	0800c51d 	.word	0x0800c51d
 800c4cc:	0800c51d 	.word	0x0800c51d
 800c4d0:	0800c51d 	.word	0x0800c51d
 800c4d4:	0800c51d 	.word	0x0800c51d
 800c4d8:	0800c51d 	.word	0x0800c51d
 800c4dc:	0800c51d 	.word	0x0800c51d
 800c4e0:	0800c51d 	.word	0x0800c51d
 800c4e4:	0800c51d 	.word	0x0800c51d
 800c4e8:	0800c51d 	.word	0x0800c51d
 800c4ec:	0800c51d 	.word	0x0800c51d
 800c4f0:	0800c51d 	.word	0x0800c51d
 800c4f4:	0800c51d 	.word	0x0800c51d
 800c4f8:	0800c51d 	.word	0x0800c51d
 800c4fc:	0800c51d 	.word	0x0800c51d
 800c500:	0800c51d 	.word	0x0800c51d
 800c504:	0800c51d 	.word	0x0800c51d
 800c508:	0800c51d 	.word	0x0800c51d
 800c50c:	0800c51d 	.word	0x0800c51d
 800c510:	0800c51d 	.word	0x0800c51d
 800c514:	0800c51d 	.word	0x0800c51d
 800c518:	0800c51d 	.word	0x0800c51d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c51c:	bf00      	nop
  }

  return (USBD_OK);
 800c51e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c520:	4618      	mov	r0, r3
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	bc80      	pop	{r7}
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop

0800c52c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c536:	6879      	ldr	r1, [r7, #4]
 800c538:	4805      	ldr	r0, [pc, #20]	; (800c550 <CDC_Receive_FS+0x24>)
 800c53a:	f7fe fe46 	bl	800b1ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c53e:	4804      	ldr	r0, [pc, #16]	; (800c550 <CDC_Receive_FS+0x24>)
 800c540:	f7fe fe85 	bl	800b24e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c544:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c546:	4618      	mov	r0, r3
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	20000710 	.word	0x20000710

0800c554 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	460b      	mov	r3, r1
 800c55e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c560:	2300      	movs	r3, #0
 800c562:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c564:	4b0d      	ldr	r3, [pc, #52]	; (800c59c <CDC_Transmit_FS+0x48>)
 800c566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c56a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c572:	2b00      	cmp	r3, #0
 800c574:	d001      	beq.n	800c57a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c576:	2301      	movs	r3, #1
 800c578:	e00b      	b.n	800c592 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c57a:	887b      	ldrh	r3, [r7, #2]
 800c57c:	461a      	mov	r2, r3
 800c57e:	6879      	ldr	r1, [r7, #4]
 800c580:	4806      	ldr	r0, [pc, #24]	; (800c59c <CDC_Transmit_FS+0x48>)
 800c582:	f7fe fe09 	bl	800b198 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c586:	4805      	ldr	r0, [pc, #20]	; (800c59c <CDC_Transmit_FS+0x48>)
 800c588:	f7fe fe32 	bl	800b1f0 <USBD_CDC_TransmitPacket>
 800c58c:	4603      	mov	r3, r0
 800c58e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c590:	7bfb      	ldrb	r3, [r7, #15]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	20000710 	.word	0x20000710

0800c5a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	6039      	str	r1, [r7, #0]
 800c5aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2212      	movs	r2, #18
 800c5b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c5b2:	4b03      	ldr	r3, [pc, #12]	; (800c5c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bc80      	pop	{r7}
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	20000180 	.word	0x20000180

0800c5c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	6039      	str	r1, [r7, #0]
 800c5ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2204      	movs	r2, #4
 800c5d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c5d6:	4b03      	ldr	r3, [pc, #12]	; (800c5e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bc80      	pop	{r7}
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	20000194 	.word	0x20000194

0800c5e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	6039      	str	r1, [r7, #0]
 800c5f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5f4:	79fb      	ldrb	r3, [r7, #7]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d105      	bne.n	800c606 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	4907      	ldr	r1, [pc, #28]	; (800c61c <USBD_FS_ProductStrDescriptor+0x34>)
 800c5fe:	4808      	ldr	r0, [pc, #32]	; (800c620 <USBD_FS_ProductStrDescriptor+0x38>)
 800c600:	f7ff fe0c 	bl	800c21c <USBD_GetString>
 800c604:	e004      	b.n	800c610 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	4904      	ldr	r1, [pc, #16]	; (800c61c <USBD_FS_ProductStrDescriptor+0x34>)
 800c60a:	4805      	ldr	r0, [pc, #20]	; (800c620 <USBD_FS_ProductStrDescriptor+0x38>)
 800c60c:	f7ff fe06 	bl	800c21c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c610:	4b02      	ldr	r3, [pc, #8]	; (800c61c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c612:	4618      	mov	r0, r3
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	200011a4 	.word	0x200011a4
 800c620:	0800d8ac 	.word	0x0800d8ac

0800c624 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	6039      	str	r1, [r7, #0]
 800c62e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c630:	683a      	ldr	r2, [r7, #0]
 800c632:	4904      	ldr	r1, [pc, #16]	; (800c644 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c634:	4804      	ldr	r0, [pc, #16]	; (800c648 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c636:	f7ff fdf1 	bl	800c21c <USBD_GetString>
  return USBD_StrDesc;
 800c63a:	4b02      	ldr	r3, [pc, #8]	; (800c644 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	200011a4 	.word	0x200011a4
 800c648:	0800d8c4 	.word	0x0800d8c4

0800c64c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	4603      	mov	r3, r0
 800c654:	6039      	str	r1, [r7, #0]
 800c656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	221a      	movs	r2, #26
 800c65c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c65e:	f000 f843 	bl	800c6e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c662:	4b02      	ldr	r3, [pc, #8]	; (800c66c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c664:	4618      	mov	r0, r3
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	20000198 	.word	0x20000198

0800c670 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	4603      	mov	r3, r0
 800c678:	6039      	str	r1, [r7, #0]
 800c67a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c67c:	79fb      	ldrb	r3, [r7, #7]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d105      	bne.n	800c68e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c682:	683a      	ldr	r2, [r7, #0]
 800c684:	4907      	ldr	r1, [pc, #28]	; (800c6a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c686:	4808      	ldr	r0, [pc, #32]	; (800c6a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c688:	f7ff fdc8 	bl	800c21c <USBD_GetString>
 800c68c:	e004      	b.n	800c698 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	4904      	ldr	r1, [pc, #16]	; (800c6a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c692:	4805      	ldr	r0, [pc, #20]	; (800c6a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c694:	f7ff fdc2 	bl	800c21c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c698:	4b02      	ldr	r3, [pc, #8]	; (800c6a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	200011a4 	.word	0x200011a4
 800c6a8:	0800d8d8 	.word	0x0800d8d8

0800c6ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	6039      	str	r1, [r7, #0]
 800c6b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6b8:	79fb      	ldrb	r3, [r7, #7]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d105      	bne.n	800c6ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c6be:	683a      	ldr	r2, [r7, #0]
 800c6c0:	4907      	ldr	r1, [pc, #28]	; (800c6e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c6c2:	4808      	ldr	r0, [pc, #32]	; (800c6e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c6c4:	f7ff fdaa 	bl	800c21c <USBD_GetString>
 800c6c8:	e004      	b.n	800c6d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c6ca:	683a      	ldr	r2, [r7, #0]
 800c6cc:	4904      	ldr	r1, [pc, #16]	; (800c6e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c6ce:	4805      	ldr	r0, [pc, #20]	; (800c6e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c6d0:	f7ff fda4 	bl	800c21c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6d4:	4b02      	ldr	r3, [pc, #8]	; (800c6e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3708      	adds	r7, #8
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	200011a4 	.word	0x200011a4
 800c6e4:	0800d8e4 	.word	0x0800d8e4

0800c6e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c6ee:	4b0f      	ldr	r3, [pc, #60]	; (800c72c <Get_SerialNum+0x44>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c6f4:	4b0e      	ldr	r3, [pc, #56]	; (800c730 <Get_SerialNum+0x48>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c6fa:	4b0e      	ldr	r3, [pc, #56]	; (800c734 <Get_SerialNum+0x4c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4413      	add	r3, r2
 800c706:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d009      	beq.n	800c722 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c70e:	2208      	movs	r2, #8
 800c710:	4909      	ldr	r1, [pc, #36]	; (800c738 <Get_SerialNum+0x50>)
 800c712:	68f8      	ldr	r0, [r7, #12]
 800c714:	f000 f814 	bl	800c740 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c718:	2204      	movs	r2, #4
 800c71a:	4908      	ldr	r1, [pc, #32]	; (800c73c <Get_SerialNum+0x54>)
 800c71c:	68b8      	ldr	r0, [r7, #8]
 800c71e:	f000 f80f 	bl	800c740 <IntToUnicode>
  }
}
 800c722:	bf00      	nop
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	1ffff7e8 	.word	0x1ffff7e8
 800c730:	1ffff7ec 	.word	0x1ffff7ec
 800c734:	1ffff7f0 	.word	0x1ffff7f0
 800c738:	2000019a 	.word	0x2000019a
 800c73c:	200001aa 	.word	0x200001aa

0800c740 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c740:	b480      	push	{r7}
 800c742:	b087      	sub	sp, #28
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	4613      	mov	r3, r2
 800c74c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c74e:	2300      	movs	r3, #0
 800c750:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c752:	2300      	movs	r3, #0
 800c754:	75fb      	strb	r3, [r7, #23]
 800c756:	e027      	b.n	800c7a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	0f1b      	lsrs	r3, r3, #28
 800c75c:	2b09      	cmp	r3, #9
 800c75e:	d80b      	bhi.n	800c778 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	0f1b      	lsrs	r3, r3, #28
 800c764:	b2da      	uxtb	r2, r3
 800c766:	7dfb      	ldrb	r3, [r7, #23]
 800c768:	005b      	lsls	r3, r3, #1
 800c76a:	4619      	mov	r1, r3
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	440b      	add	r3, r1
 800c770:	3230      	adds	r2, #48	; 0x30
 800c772:	b2d2      	uxtb	r2, r2
 800c774:	701a      	strb	r2, [r3, #0]
 800c776:	e00a      	b.n	800c78e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	0f1b      	lsrs	r3, r3, #28
 800c77c:	b2da      	uxtb	r2, r3
 800c77e:	7dfb      	ldrb	r3, [r7, #23]
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	4619      	mov	r1, r3
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	440b      	add	r3, r1
 800c788:	3237      	adds	r2, #55	; 0x37
 800c78a:	b2d2      	uxtb	r2, r2
 800c78c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	011b      	lsls	r3, r3, #4
 800c792:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c794:	7dfb      	ldrb	r3, [r7, #23]
 800c796:	005b      	lsls	r3, r3, #1
 800c798:	3301      	adds	r3, #1
 800c79a:	68ba      	ldr	r2, [r7, #8]
 800c79c:	4413      	add	r3, r2
 800c79e:	2200      	movs	r2, #0
 800c7a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c7a2:	7dfb      	ldrb	r3, [r7, #23]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	75fb      	strb	r3, [r7, #23]
 800c7a8:	7dfa      	ldrb	r2, [r7, #23]
 800c7aa:	79fb      	ldrb	r3, [r7, #7]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d3d3      	bcc.n	800c758 <IntToUnicode+0x18>
  }
}
 800c7b0:	bf00      	nop
 800c7b2:	bf00      	nop
 800c7b4:	371c      	adds	r7, #28
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bc80      	pop	{r7}
 800c7ba:	4770      	bx	lr

0800c7bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a0d      	ldr	r2, [pc, #52]	; (800c800 <HAL_PCD_MspInit+0x44>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d113      	bne.n	800c7f6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c7ce:	4b0d      	ldr	r3, [pc, #52]	; (800c804 <HAL_PCD_MspInit+0x48>)
 800c7d0:	69db      	ldr	r3, [r3, #28]
 800c7d2:	4a0c      	ldr	r2, [pc, #48]	; (800c804 <HAL_PCD_MspInit+0x48>)
 800c7d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c7d8:	61d3      	str	r3, [r2, #28]
 800c7da:	4b0a      	ldr	r3, [pc, #40]	; (800c804 <HAL_PCD_MspInit+0x48>)
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	2014      	movs	r0, #20
 800c7ec:	f7f7 faa7 	bl	8003d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c7f0:	2014      	movs	r0, #20
 800c7f2:	f7f7 fac0 	bl	8003d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c7f6:	bf00      	nop
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	40005c00 	.word	0x40005c00
 800c804:	40021000 	.word	0x40021000

0800c808 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c81c:	4619      	mov	r1, r3
 800c81e:	4610      	mov	r0, r2
 800c820:	f7fe fdcb 	bl	800b3ba <USBD_LL_SetupStage>
}
 800c824:	bf00      	nop
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	460b      	mov	r3, r1
 800c836:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c83e:	78fa      	ldrb	r2, [r7, #3]
 800c840:	6879      	ldr	r1, [r7, #4]
 800c842:	4613      	mov	r3, r2
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	4413      	add	r3, r2
 800c848:	00db      	lsls	r3, r3, #3
 800c84a:	440b      	add	r3, r1
 800c84c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	78fb      	ldrb	r3, [r7, #3]
 800c854:	4619      	mov	r1, r3
 800c856:	f7fe fdfd 	bl	800b454 <USBD_LL_DataOutStage>
}
 800c85a:	bf00      	nop
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b082      	sub	sp, #8
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	460b      	mov	r3, r1
 800c86c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c874:	78fa      	ldrb	r2, [r7, #3]
 800c876:	6879      	ldr	r1, [r7, #4]
 800c878:	4613      	mov	r3, r2
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	4413      	add	r3, r2
 800c87e:	00db      	lsls	r3, r3, #3
 800c880:	440b      	add	r3, r1
 800c882:	333c      	adds	r3, #60	; 0x3c
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	78fb      	ldrb	r3, [r7, #3]
 800c888:	4619      	mov	r1, r3
 800c88a:	f7fe fe54 	bl	800b536 <USBD_LL_DataInStage>
}
 800c88e:	bf00      	nop
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b082      	sub	sp, #8
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7fe ff64 	bl	800b772 <USBD_LL_SOF>
}
 800c8aa:	bf00      	nop
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b084      	sub	sp, #16
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	2b02      	cmp	r3, #2
 800c8c4:	d001      	beq.n	800c8ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c8c6:	f7f6 fc87 	bl	80031d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c8d0:	7bfa      	ldrb	r2, [r7, #15]
 800c8d2:	4611      	mov	r1, r2
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fe ff14 	bl	800b702 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7fe fecd 	bl	800b680 <USBD_LL_Reset>
}
 800c8e6:	bf00      	nop
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
	...

0800c8f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fe ff0e 	bl	800b720 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	699b      	ldr	r3, [r3, #24]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d005      	beq.n	800c918 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c90c:	4b04      	ldr	r3, [pc, #16]	; (800c920 <HAL_PCD_SuspendCallback+0x30>)
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	4a03      	ldr	r2, [pc, #12]	; (800c920 <HAL_PCD_SuspendCallback+0x30>)
 800c912:	f043 0306 	orr.w	r3, r3, #6
 800c916:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c918:	bf00      	nop
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	e000ed00 	.word	0xe000ed00

0800c924 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c932:	4618      	mov	r0, r3
 800c934:	f7fe ff08 	bl	800b748 <USBD_LL_Resume>
}
 800c938:	bf00      	nop
 800c93a:	3708      	adds	r7, #8
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c948:	4a28      	ldr	r2, [pc, #160]	; (800c9ec <USBD_LL_Init+0xac>)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a26      	ldr	r2, [pc, #152]	; (800c9ec <USBD_LL_Init+0xac>)
 800c954:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c958:	4b24      	ldr	r3, [pc, #144]	; (800c9ec <USBD_LL_Init+0xac>)
 800c95a:	4a25      	ldr	r2, [pc, #148]	; (800c9f0 <USBD_LL_Init+0xb0>)
 800c95c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c95e:	4b23      	ldr	r3, [pc, #140]	; (800c9ec <USBD_LL_Init+0xac>)
 800c960:	2208      	movs	r2, #8
 800c962:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c964:	4b21      	ldr	r3, [pc, #132]	; (800c9ec <USBD_LL_Init+0xac>)
 800c966:	2202      	movs	r2, #2
 800c968:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c96a:	4b20      	ldr	r3, [pc, #128]	; (800c9ec <USBD_LL_Init+0xac>)
 800c96c:	2200      	movs	r2, #0
 800c96e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c970:	4b1e      	ldr	r3, [pc, #120]	; (800c9ec <USBD_LL_Init+0xac>)
 800c972:	2200      	movs	r2, #0
 800c974:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c976:	4b1d      	ldr	r3, [pc, #116]	; (800c9ec <USBD_LL_Init+0xac>)
 800c978:	2200      	movs	r2, #0
 800c97a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c97c:	481b      	ldr	r0, [pc, #108]	; (800c9ec <USBD_LL_Init+0xac>)
 800c97e:	f7f7 fe45 	bl	800460c <HAL_PCD_Init>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d001      	beq.n	800c98c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c988:	f7f6 fc26 	bl	80031d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c992:	2318      	movs	r3, #24
 800c994:	2200      	movs	r2, #0
 800c996:	2100      	movs	r1, #0
 800c998:	f7f9 fabb 	bl	8005f12 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9a2:	2358      	movs	r3, #88	; 0x58
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	2180      	movs	r1, #128	; 0x80
 800c9a8:	f7f9 fab3 	bl	8005f12 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9b2:	23c0      	movs	r3, #192	; 0xc0
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	2181      	movs	r1, #129	; 0x81
 800c9b8:	f7f9 faab 	bl	8005f12 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	2101      	movs	r1, #1
 800c9ca:	f7f9 faa2 	bl	8005f12 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9d8:	2200      	movs	r2, #0
 800c9da:	2182      	movs	r1, #130	; 0x82
 800c9dc:	f7f9 fa99 	bl	8005f12 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	200013a4 	.word	0x200013a4
 800c9f0:	40005c00 	.word	0x40005c00

0800c9f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca00:	2300      	movs	r3, #0
 800ca02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7f7 ff09 	bl	8004822 <HAL_PCD_Start>
 800ca10:	4603      	mov	r3, r0
 800ca12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f000 f94e 	bl	800ccb8 <USBD_Get_USB_Status>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b084      	sub	sp, #16
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
 800ca32:	4608      	mov	r0, r1
 800ca34:	4611      	mov	r1, r2
 800ca36:	461a      	mov	r2, r3
 800ca38:	4603      	mov	r3, r0
 800ca3a:	70fb      	strb	r3, [r7, #3]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	70bb      	strb	r3, [r7, #2]
 800ca40:	4613      	mov	r3, r2
 800ca42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca44:	2300      	movs	r3, #0
 800ca46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca52:	78bb      	ldrb	r3, [r7, #2]
 800ca54:	883a      	ldrh	r2, [r7, #0]
 800ca56:	78f9      	ldrb	r1, [r7, #3]
 800ca58:	f7f8 f883 	bl	8004b62 <HAL_PCD_EP_Open>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca60:	7bfb      	ldrb	r3, [r7, #15]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f000 f928 	bl	800ccb8 <USBD_Get_USB_Status>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b084      	sub	sp, #16
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	460b      	mov	r3, r1
 800ca80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca86:	2300      	movs	r3, #0
 800ca88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca90:	78fa      	ldrb	r2, [r7, #3]
 800ca92:	4611      	mov	r1, r2
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7f8 f8ca 	bl	8004c2e <HAL_PCD_EP_Close>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca9e:	7bfb      	ldrb	r3, [r7, #15]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 f909 	bl	800ccb8 <USBD_Get_USB_Status>
 800caa6:	4603      	mov	r3, r0
 800caa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800caaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	460b      	mov	r3, r1
 800cabe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cac0:	2300      	movs	r3, #0
 800cac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cace:	78fa      	ldrb	r2, [r7, #3]
 800cad0:	4611      	mov	r1, r2
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7f8 f98a 	bl	8004dec <HAL_PCD_EP_SetStall>
 800cad8:	4603      	mov	r3, r0
 800cada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
 800cade:	4618      	mov	r0, r3
 800cae0:	f000 f8ea 	bl	800ccb8 <USBD_Get_USB_Status>
 800cae4:	4603      	mov	r3, r0
 800cae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cae8:	7bbb      	ldrb	r3, [r7, #14]
}
 800caea:	4618      	mov	r0, r3
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b084      	sub	sp, #16
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
 800cafa:	460b      	mov	r3, r1
 800cafc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cafe:	2300      	movs	r3, #0
 800cb00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb02:	2300      	movs	r3, #0
 800cb04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb0c:	78fa      	ldrb	r2, [r7, #3]
 800cb0e:	4611      	mov	r1, r2
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7f8 f9cb 	bl	8004eac <HAL_PCD_EP_ClrStall>
 800cb16:	4603      	mov	r3, r0
 800cb18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb1a:	7bfb      	ldrb	r3, [r7, #15]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 f8cb 	bl	800ccb8 <USBD_Get_USB_Status>
 800cb22:	4603      	mov	r3, r0
 800cb24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb26:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	460b      	mov	r3, r1
 800cb3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cb44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	da0c      	bge.n	800cb66 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cb4c:	78fb      	ldrb	r3, [r7, #3]
 800cb4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb52:	68f9      	ldr	r1, [r7, #12]
 800cb54:	1c5a      	adds	r2, r3, #1
 800cb56:	4613      	mov	r3, r2
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	4413      	add	r3, r2
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	440b      	add	r3, r1
 800cb60:	3302      	adds	r3, #2
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	e00b      	b.n	800cb7e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cb66:	78fb      	ldrb	r3, [r7, #3]
 800cb68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb6c:	68f9      	ldr	r1, [r7, #12]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	4413      	add	r3, r2
 800cb74:	00db      	lsls	r3, r3, #3
 800cb76:	440b      	add	r3, r1
 800cb78:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cb7c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3714      	adds	r7, #20
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bc80      	pop	{r7}
 800cb86:	4770      	bx	lr

0800cb88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	460b      	mov	r3, r1
 800cb92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cba2:	78fa      	ldrb	r2, [r7, #3]
 800cba4:	4611      	mov	r1, r2
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7f7 ffb6 	bl	8004b18 <HAL_PCD_SetAddress>
 800cbac:	4603      	mov	r3, r0
 800cbae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbb0:	7bfb      	ldrb	r3, [r7, #15]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f000 f880 	bl	800ccb8 <USBD_Get_USB_Status>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}

0800cbc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b086      	sub	sp, #24
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	60f8      	str	r0, [r7, #12]
 800cbce:	607a      	str	r2, [r7, #4]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	72fb      	strb	r3, [r7, #11]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cbe8:	893b      	ldrh	r3, [r7, #8]
 800cbea:	7af9      	ldrb	r1, [r7, #11]
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	f7f8 f8ba 	bl	8004d66 <HAL_PCD_EP_Transmit>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbf6:	7dfb      	ldrb	r3, [r7, #23]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f000 f85d 	bl	800ccb8 <USBD_Get_USB_Status>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc02:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3718      	adds	r7, #24
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b086      	sub	sp, #24
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	607a      	str	r2, [r7, #4]
 800cc16:	461a      	mov	r2, r3
 800cc18:	460b      	mov	r3, r1
 800cc1a:	72fb      	strb	r3, [r7, #11]
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc20:	2300      	movs	r3, #0
 800cc22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc24:	2300      	movs	r3, #0
 800cc26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc2e:	893b      	ldrh	r3, [r7, #8]
 800cc30:	7af9      	ldrb	r1, [r7, #11]
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	f7f8 f843 	bl	8004cbe <HAL_PCD_EP_Receive>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc3c:	7dfb      	ldrb	r3, [r7, #23]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f000 f83a 	bl	800ccb8 <USBD_Get_USB_Status>
 800cc44:	4603      	mov	r3, r0
 800cc46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc48:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3718      	adds	r7, #24
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b082      	sub	sp, #8
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc64:	78fa      	ldrb	r2, [r7, #3]
 800cc66:	4611      	mov	r1, r2
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7f8 f865 	bl	8004d38 <HAL_PCD_EP_GetRxCount>
 800cc6e:	4603      	mov	r3, r0
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cc80:	4b02      	ldr	r3, [pc, #8]	; (800cc8c <USBD_static_malloc+0x14>)
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	370c      	adds	r7, #12
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bc80      	pop	{r7}
 800cc8a:	4770      	bx	lr
 800cc8c:	20000300 	.word	0x20000300

0800cc90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]

}
 800cc98:	bf00      	nop
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bc80      	pop	{r7}
 800cca0:	4770      	bx	lr

0800cca2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cca2:	b480      	push	{r7}
 800cca4:	b083      	sub	sp, #12
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
 800ccaa:	460b      	mov	r3, r1
 800ccac:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ccae:	bf00      	nop
 800ccb0:	370c      	adds	r7, #12
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bc80      	pop	{r7}
 800ccb6:	4770      	bx	lr

0800ccb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b085      	sub	sp, #20
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ccc6:	79fb      	ldrb	r3, [r7, #7]
 800ccc8:	2b03      	cmp	r3, #3
 800ccca:	d817      	bhi.n	800ccfc <USBD_Get_USB_Status+0x44>
 800cccc:	a201      	add	r2, pc, #4	; (adr r2, 800ccd4 <USBD_Get_USB_Status+0x1c>)
 800ccce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd2:	bf00      	nop
 800ccd4:	0800cce5 	.word	0x0800cce5
 800ccd8:	0800cceb 	.word	0x0800cceb
 800ccdc:	0800ccf1 	.word	0x0800ccf1
 800cce0:	0800ccf7 	.word	0x0800ccf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cce4:	2300      	movs	r3, #0
 800cce6:	73fb      	strb	r3, [r7, #15]
    break;
 800cce8:	e00b      	b.n	800cd02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccea:	2302      	movs	r3, #2
 800ccec:	73fb      	strb	r3, [r7, #15]
    break;
 800ccee:	e008      	b.n	800cd02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf4:	e005      	b.n	800cd02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccf6:	2302      	movs	r3, #2
 800ccf8:	73fb      	strb	r3, [r7, #15]
    break;
 800ccfa:	e002      	b.n	800cd02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ccfc:	2302      	movs	r3, #2
 800ccfe:	73fb      	strb	r3, [r7, #15]
    break;
 800cd00:	bf00      	nop
  }
  return usb_status;
 800cd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3714      	adds	r7, #20
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bc80      	pop	{r7}
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop

0800cd10 <__errno>:
 800cd10:	4b01      	ldr	r3, [pc, #4]	; (800cd18 <__errno+0x8>)
 800cd12:	6818      	ldr	r0, [r3, #0]
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	200001b4 	.word	0x200001b4

0800cd1c <__libc_init_array>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	2600      	movs	r6, #0
 800cd20:	4d0c      	ldr	r5, [pc, #48]	; (800cd54 <__libc_init_array+0x38>)
 800cd22:	4c0d      	ldr	r4, [pc, #52]	; (800cd58 <__libc_init_array+0x3c>)
 800cd24:	1b64      	subs	r4, r4, r5
 800cd26:	10a4      	asrs	r4, r4, #2
 800cd28:	42a6      	cmp	r6, r4
 800cd2a:	d109      	bne.n	800cd40 <__libc_init_array+0x24>
 800cd2c:	f000 fc70 	bl	800d610 <_init>
 800cd30:	2600      	movs	r6, #0
 800cd32:	4d0a      	ldr	r5, [pc, #40]	; (800cd5c <__libc_init_array+0x40>)
 800cd34:	4c0a      	ldr	r4, [pc, #40]	; (800cd60 <__libc_init_array+0x44>)
 800cd36:	1b64      	subs	r4, r4, r5
 800cd38:	10a4      	asrs	r4, r4, #2
 800cd3a:	42a6      	cmp	r6, r4
 800cd3c:	d105      	bne.n	800cd4a <__libc_init_array+0x2e>
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}
 800cd40:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd44:	4798      	blx	r3
 800cd46:	3601      	adds	r6, #1
 800cd48:	e7ee      	b.n	800cd28 <__libc_init_array+0xc>
 800cd4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd4e:	4798      	blx	r3
 800cd50:	3601      	adds	r6, #1
 800cd52:	e7f2      	b.n	800cd3a <__libc_init_array+0x1e>
 800cd54:	0800f224 	.word	0x0800f224
 800cd58:	0800f224 	.word	0x0800f224
 800cd5c:	0800f224 	.word	0x0800f224
 800cd60:	0800f228 	.word	0x0800f228

0800cd64 <memset>:
 800cd64:	4603      	mov	r3, r0
 800cd66:	4402      	add	r2, r0
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d100      	bne.n	800cd6e <memset+0xa>
 800cd6c:	4770      	bx	lr
 800cd6e:	f803 1b01 	strb.w	r1, [r3], #1
 800cd72:	e7f9      	b.n	800cd68 <memset+0x4>

0800cd74 <sniprintf>:
 800cd74:	b40c      	push	{r2, r3}
 800cd76:	b530      	push	{r4, r5, lr}
 800cd78:	4b17      	ldr	r3, [pc, #92]	; (800cdd8 <sniprintf+0x64>)
 800cd7a:	1e0c      	subs	r4, r1, #0
 800cd7c:	681d      	ldr	r5, [r3, #0]
 800cd7e:	b09d      	sub	sp, #116	; 0x74
 800cd80:	da08      	bge.n	800cd94 <sniprintf+0x20>
 800cd82:	238b      	movs	r3, #139	; 0x8b
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295
 800cd88:	602b      	str	r3, [r5, #0]
 800cd8a:	b01d      	add	sp, #116	; 0x74
 800cd8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd90:	b002      	add	sp, #8
 800cd92:	4770      	bx	lr
 800cd94:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cd98:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cd9c:	bf0c      	ite	eq
 800cd9e:	4623      	moveq	r3, r4
 800cda0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cda4:	9304      	str	r3, [sp, #16]
 800cda6:	9307      	str	r3, [sp, #28]
 800cda8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cdac:	9002      	str	r0, [sp, #8]
 800cdae:	9006      	str	r0, [sp, #24]
 800cdb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	ab21      	add	r3, sp, #132	; 0x84
 800cdb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cdba:	a902      	add	r1, sp, #8
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	f000 f869 	bl	800ce94 <_svfiprintf_r>
 800cdc2:	1c43      	adds	r3, r0, #1
 800cdc4:	bfbc      	itt	lt
 800cdc6:	238b      	movlt	r3, #139	; 0x8b
 800cdc8:	602b      	strlt	r3, [r5, #0]
 800cdca:	2c00      	cmp	r4, #0
 800cdcc:	d0dd      	beq.n	800cd8a <sniprintf+0x16>
 800cdce:	2200      	movs	r2, #0
 800cdd0:	9b02      	ldr	r3, [sp, #8]
 800cdd2:	701a      	strb	r2, [r3, #0]
 800cdd4:	e7d9      	b.n	800cd8a <sniprintf+0x16>
 800cdd6:	bf00      	nop
 800cdd8:	200001b4 	.word	0x200001b4

0800cddc <__ssputs_r>:
 800cddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cde0:	688e      	ldr	r6, [r1, #8]
 800cde2:	4682      	mov	sl, r0
 800cde4:	429e      	cmp	r6, r3
 800cde6:	460c      	mov	r4, r1
 800cde8:	4690      	mov	r8, r2
 800cdea:	461f      	mov	r7, r3
 800cdec:	d838      	bhi.n	800ce60 <__ssputs_r+0x84>
 800cdee:	898a      	ldrh	r2, [r1, #12]
 800cdf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdf4:	d032      	beq.n	800ce5c <__ssputs_r+0x80>
 800cdf6:	6825      	ldr	r5, [r4, #0]
 800cdf8:	6909      	ldr	r1, [r1, #16]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	eba5 0901 	sub.w	r9, r5, r1
 800ce00:	6965      	ldr	r5, [r4, #20]
 800ce02:	444b      	add	r3, r9
 800ce04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce0c:	106d      	asrs	r5, r5, #1
 800ce0e:	429d      	cmp	r5, r3
 800ce10:	bf38      	it	cc
 800ce12:	461d      	movcc	r5, r3
 800ce14:	0553      	lsls	r3, r2, #21
 800ce16:	d531      	bpl.n	800ce7c <__ssputs_r+0xa0>
 800ce18:	4629      	mov	r1, r5
 800ce1a:	f000 fb53 	bl	800d4c4 <_malloc_r>
 800ce1e:	4606      	mov	r6, r0
 800ce20:	b950      	cbnz	r0, 800ce38 <__ssputs_r+0x5c>
 800ce22:	230c      	movs	r3, #12
 800ce24:	f04f 30ff 	mov.w	r0, #4294967295
 800ce28:	f8ca 3000 	str.w	r3, [sl]
 800ce2c:	89a3      	ldrh	r3, [r4, #12]
 800ce2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce32:	81a3      	strh	r3, [r4, #12]
 800ce34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce38:	464a      	mov	r2, r9
 800ce3a:	6921      	ldr	r1, [r4, #16]
 800ce3c:	f000 face 	bl	800d3dc <memcpy>
 800ce40:	89a3      	ldrh	r3, [r4, #12]
 800ce42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce4a:	81a3      	strh	r3, [r4, #12]
 800ce4c:	6126      	str	r6, [r4, #16]
 800ce4e:	444e      	add	r6, r9
 800ce50:	6026      	str	r6, [r4, #0]
 800ce52:	463e      	mov	r6, r7
 800ce54:	6165      	str	r5, [r4, #20]
 800ce56:	eba5 0509 	sub.w	r5, r5, r9
 800ce5a:	60a5      	str	r5, [r4, #8]
 800ce5c:	42be      	cmp	r6, r7
 800ce5e:	d900      	bls.n	800ce62 <__ssputs_r+0x86>
 800ce60:	463e      	mov	r6, r7
 800ce62:	4632      	mov	r2, r6
 800ce64:	4641      	mov	r1, r8
 800ce66:	6820      	ldr	r0, [r4, #0]
 800ce68:	f000 fac6 	bl	800d3f8 <memmove>
 800ce6c:	68a3      	ldr	r3, [r4, #8]
 800ce6e:	6822      	ldr	r2, [r4, #0]
 800ce70:	1b9b      	subs	r3, r3, r6
 800ce72:	4432      	add	r2, r6
 800ce74:	2000      	movs	r0, #0
 800ce76:	60a3      	str	r3, [r4, #8]
 800ce78:	6022      	str	r2, [r4, #0]
 800ce7a:	e7db      	b.n	800ce34 <__ssputs_r+0x58>
 800ce7c:	462a      	mov	r2, r5
 800ce7e:	f000 fb7b 	bl	800d578 <_realloc_r>
 800ce82:	4606      	mov	r6, r0
 800ce84:	2800      	cmp	r0, #0
 800ce86:	d1e1      	bne.n	800ce4c <__ssputs_r+0x70>
 800ce88:	4650      	mov	r0, sl
 800ce8a:	6921      	ldr	r1, [r4, #16]
 800ce8c:	f000 face 	bl	800d42c <_free_r>
 800ce90:	e7c7      	b.n	800ce22 <__ssputs_r+0x46>
	...

0800ce94 <_svfiprintf_r>:
 800ce94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce98:	4698      	mov	r8, r3
 800ce9a:	898b      	ldrh	r3, [r1, #12]
 800ce9c:	4607      	mov	r7, r0
 800ce9e:	061b      	lsls	r3, r3, #24
 800cea0:	460d      	mov	r5, r1
 800cea2:	4614      	mov	r4, r2
 800cea4:	b09d      	sub	sp, #116	; 0x74
 800cea6:	d50e      	bpl.n	800cec6 <_svfiprintf_r+0x32>
 800cea8:	690b      	ldr	r3, [r1, #16]
 800ceaa:	b963      	cbnz	r3, 800cec6 <_svfiprintf_r+0x32>
 800ceac:	2140      	movs	r1, #64	; 0x40
 800ceae:	f000 fb09 	bl	800d4c4 <_malloc_r>
 800ceb2:	6028      	str	r0, [r5, #0]
 800ceb4:	6128      	str	r0, [r5, #16]
 800ceb6:	b920      	cbnz	r0, 800cec2 <_svfiprintf_r+0x2e>
 800ceb8:	230c      	movs	r3, #12
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	f04f 30ff 	mov.w	r0, #4294967295
 800cec0:	e0d1      	b.n	800d066 <_svfiprintf_r+0x1d2>
 800cec2:	2340      	movs	r3, #64	; 0x40
 800cec4:	616b      	str	r3, [r5, #20]
 800cec6:	2300      	movs	r3, #0
 800cec8:	9309      	str	r3, [sp, #36]	; 0x24
 800ceca:	2320      	movs	r3, #32
 800cecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ced0:	2330      	movs	r3, #48	; 0x30
 800ced2:	f04f 0901 	mov.w	r9, #1
 800ced6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ceda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d080 <_svfiprintf_r+0x1ec>
 800cede:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cee2:	4623      	mov	r3, r4
 800cee4:	469a      	mov	sl, r3
 800cee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceea:	b10a      	cbz	r2, 800cef0 <_svfiprintf_r+0x5c>
 800ceec:	2a25      	cmp	r2, #37	; 0x25
 800ceee:	d1f9      	bne.n	800cee4 <_svfiprintf_r+0x50>
 800cef0:	ebba 0b04 	subs.w	fp, sl, r4
 800cef4:	d00b      	beq.n	800cf0e <_svfiprintf_r+0x7a>
 800cef6:	465b      	mov	r3, fp
 800cef8:	4622      	mov	r2, r4
 800cefa:	4629      	mov	r1, r5
 800cefc:	4638      	mov	r0, r7
 800cefe:	f7ff ff6d 	bl	800cddc <__ssputs_r>
 800cf02:	3001      	adds	r0, #1
 800cf04:	f000 80aa 	beq.w	800d05c <_svfiprintf_r+0x1c8>
 800cf08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf0a:	445a      	add	r2, fp
 800cf0c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf0e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	f000 80a2 	beq.w	800d05c <_svfiprintf_r+0x1c8>
 800cf18:	2300      	movs	r3, #0
 800cf1a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf22:	f10a 0a01 	add.w	sl, sl, #1
 800cf26:	9304      	str	r3, [sp, #16]
 800cf28:	9307      	str	r3, [sp, #28]
 800cf2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf2e:	931a      	str	r3, [sp, #104]	; 0x68
 800cf30:	4654      	mov	r4, sl
 800cf32:	2205      	movs	r2, #5
 800cf34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf38:	4851      	ldr	r0, [pc, #324]	; (800d080 <_svfiprintf_r+0x1ec>)
 800cf3a:	f000 fa41 	bl	800d3c0 <memchr>
 800cf3e:	9a04      	ldr	r2, [sp, #16]
 800cf40:	b9d8      	cbnz	r0, 800cf7a <_svfiprintf_r+0xe6>
 800cf42:	06d0      	lsls	r0, r2, #27
 800cf44:	bf44      	itt	mi
 800cf46:	2320      	movmi	r3, #32
 800cf48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf4c:	0711      	lsls	r1, r2, #28
 800cf4e:	bf44      	itt	mi
 800cf50:	232b      	movmi	r3, #43	; 0x2b
 800cf52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf56:	f89a 3000 	ldrb.w	r3, [sl]
 800cf5a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf5c:	d015      	beq.n	800cf8a <_svfiprintf_r+0xf6>
 800cf5e:	4654      	mov	r4, sl
 800cf60:	2000      	movs	r0, #0
 800cf62:	f04f 0c0a 	mov.w	ip, #10
 800cf66:	9a07      	ldr	r2, [sp, #28]
 800cf68:	4621      	mov	r1, r4
 800cf6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf6e:	3b30      	subs	r3, #48	; 0x30
 800cf70:	2b09      	cmp	r3, #9
 800cf72:	d94e      	bls.n	800d012 <_svfiprintf_r+0x17e>
 800cf74:	b1b0      	cbz	r0, 800cfa4 <_svfiprintf_r+0x110>
 800cf76:	9207      	str	r2, [sp, #28]
 800cf78:	e014      	b.n	800cfa4 <_svfiprintf_r+0x110>
 800cf7a:	eba0 0308 	sub.w	r3, r0, r8
 800cf7e:	fa09 f303 	lsl.w	r3, r9, r3
 800cf82:	4313      	orrs	r3, r2
 800cf84:	46a2      	mov	sl, r4
 800cf86:	9304      	str	r3, [sp, #16]
 800cf88:	e7d2      	b.n	800cf30 <_svfiprintf_r+0x9c>
 800cf8a:	9b03      	ldr	r3, [sp, #12]
 800cf8c:	1d19      	adds	r1, r3, #4
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	9103      	str	r1, [sp, #12]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	bfbb      	ittet	lt
 800cf96:	425b      	neglt	r3, r3
 800cf98:	f042 0202 	orrlt.w	r2, r2, #2
 800cf9c:	9307      	strge	r3, [sp, #28]
 800cf9e:	9307      	strlt	r3, [sp, #28]
 800cfa0:	bfb8      	it	lt
 800cfa2:	9204      	strlt	r2, [sp, #16]
 800cfa4:	7823      	ldrb	r3, [r4, #0]
 800cfa6:	2b2e      	cmp	r3, #46	; 0x2e
 800cfa8:	d10c      	bne.n	800cfc4 <_svfiprintf_r+0x130>
 800cfaa:	7863      	ldrb	r3, [r4, #1]
 800cfac:	2b2a      	cmp	r3, #42	; 0x2a
 800cfae:	d135      	bne.n	800d01c <_svfiprintf_r+0x188>
 800cfb0:	9b03      	ldr	r3, [sp, #12]
 800cfb2:	3402      	adds	r4, #2
 800cfb4:	1d1a      	adds	r2, r3, #4
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	9203      	str	r2, [sp, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	bfb8      	it	lt
 800cfbe:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfc2:	9305      	str	r3, [sp, #20]
 800cfc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d090 <_svfiprintf_r+0x1fc>
 800cfc8:	2203      	movs	r2, #3
 800cfca:	4650      	mov	r0, sl
 800cfcc:	7821      	ldrb	r1, [r4, #0]
 800cfce:	f000 f9f7 	bl	800d3c0 <memchr>
 800cfd2:	b140      	cbz	r0, 800cfe6 <_svfiprintf_r+0x152>
 800cfd4:	2340      	movs	r3, #64	; 0x40
 800cfd6:	eba0 000a 	sub.w	r0, r0, sl
 800cfda:	fa03 f000 	lsl.w	r0, r3, r0
 800cfde:	9b04      	ldr	r3, [sp, #16]
 800cfe0:	3401      	adds	r4, #1
 800cfe2:	4303      	orrs	r3, r0
 800cfe4:	9304      	str	r3, [sp, #16]
 800cfe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfea:	2206      	movs	r2, #6
 800cfec:	4825      	ldr	r0, [pc, #148]	; (800d084 <_svfiprintf_r+0x1f0>)
 800cfee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cff2:	f000 f9e5 	bl	800d3c0 <memchr>
 800cff6:	2800      	cmp	r0, #0
 800cff8:	d038      	beq.n	800d06c <_svfiprintf_r+0x1d8>
 800cffa:	4b23      	ldr	r3, [pc, #140]	; (800d088 <_svfiprintf_r+0x1f4>)
 800cffc:	bb1b      	cbnz	r3, 800d046 <_svfiprintf_r+0x1b2>
 800cffe:	9b03      	ldr	r3, [sp, #12]
 800d000:	3307      	adds	r3, #7
 800d002:	f023 0307 	bic.w	r3, r3, #7
 800d006:	3308      	adds	r3, #8
 800d008:	9303      	str	r3, [sp, #12]
 800d00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d00c:	4433      	add	r3, r6
 800d00e:	9309      	str	r3, [sp, #36]	; 0x24
 800d010:	e767      	b.n	800cee2 <_svfiprintf_r+0x4e>
 800d012:	460c      	mov	r4, r1
 800d014:	2001      	movs	r0, #1
 800d016:	fb0c 3202 	mla	r2, ip, r2, r3
 800d01a:	e7a5      	b.n	800cf68 <_svfiprintf_r+0xd4>
 800d01c:	2300      	movs	r3, #0
 800d01e:	f04f 0c0a 	mov.w	ip, #10
 800d022:	4619      	mov	r1, r3
 800d024:	3401      	adds	r4, #1
 800d026:	9305      	str	r3, [sp, #20]
 800d028:	4620      	mov	r0, r4
 800d02a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d02e:	3a30      	subs	r2, #48	; 0x30
 800d030:	2a09      	cmp	r2, #9
 800d032:	d903      	bls.n	800d03c <_svfiprintf_r+0x1a8>
 800d034:	2b00      	cmp	r3, #0
 800d036:	d0c5      	beq.n	800cfc4 <_svfiprintf_r+0x130>
 800d038:	9105      	str	r1, [sp, #20]
 800d03a:	e7c3      	b.n	800cfc4 <_svfiprintf_r+0x130>
 800d03c:	4604      	mov	r4, r0
 800d03e:	2301      	movs	r3, #1
 800d040:	fb0c 2101 	mla	r1, ip, r1, r2
 800d044:	e7f0      	b.n	800d028 <_svfiprintf_r+0x194>
 800d046:	ab03      	add	r3, sp, #12
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	462a      	mov	r2, r5
 800d04c:	4638      	mov	r0, r7
 800d04e:	4b0f      	ldr	r3, [pc, #60]	; (800d08c <_svfiprintf_r+0x1f8>)
 800d050:	a904      	add	r1, sp, #16
 800d052:	f3af 8000 	nop.w
 800d056:	1c42      	adds	r2, r0, #1
 800d058:	4606      	mov	r6, r0
 800d05a:	d1d6      	bne.n	800d00a <_svfiprintf_r+0x176>
 800d05c:	89ab      	ldrh	r3, [r5, #12]
 800d05e:	065b      	lsls	r3, r3, #25
 800d060:	f53f af2c 	bmi.w	800cebc <_svfiprintf_r+0x28>
 800d064:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d066:	b01d      	add	sp, #116	; 0x74
 800d068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d06c:	ab03      	add	r3, sp, #12
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	462a      	mov	r2, r5
 800d072:	4638      	mov	r0, r7
 800d074:	4b05      	ldr	r3, [pc, #20]	; (800d08c <_svfiprintf_r+0x1f8>)
 800d076:	a904      	add	r1, sp, #16
 800d078:	f000 f87c 	bl	800d174 <_printf_i>
 800d07c:	e7eb      	b.n	800d056 <_svfiprintf_r+0x1c2>
 800d07e:	bf00      	nop
 800d080:	0800f1f0 	.word	0x0800f1f0
 800d084:	0800f1fa 	.word	0x0800f1fa
 800d088:	00000000 	.word	0x00000000
 800d08c:	0800cddd 	.word	0x0800cddd
 800d090:	0800f1f6 	.word	0x0800f1f6

0800d094 <_printf_common>:
 800d094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d098:	4616      	mov	r6, r2
 800d09a:	4699      	mov	r9, r3
 800d09c:	688a      	ldr	r2, [r1, #8]
 800d09e:	690b      	ldr	r3, [r1, #16]
 800d0a0:	4607      	mov	r7, r0
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	bfb8      	it	lt
 800d0a6:	4613      	movlt	r3, r2
 800d0a8:	6033      	str	r3, [r6, #0]
 800d0aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0b4:	b10a      	cbz	r2, 800d0ba <_printf_common+0x26>
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	6033      	str	r3, [r6, #0]
 800d0ba:	6823      	ldr	r3, [r4, #0]
 800d0bc:	0699      	lsls	r1, r3, #26
 800d0be:	bf42      	ittt	mi
 800d0c0:	6833      	ldrmi	r3, [r6, #0]
 800d0c2:	3302      	addmi	r3, #2
 800d0c4:	6033      	strmi	r3, [r6, #0]
 800d0c6:	6825      	ldr	r5, [r4, #0]
 800d0c8:	f015 0506 	ands.w	r5, r5, #6
 800d0cc:	d106      	bne.n	800d0dc <_printf_common+0x48>
 800d0ce:	f104 0a19 	add.w	sl, r4, #25
 800d0d2:	68e3      	ldr	r3, [r4, #12]
 800d0d4:	6832      	ldr	r2, [r6, #0]
 800d0d6:	1a9b      	subs	r3, r3, r2
 800d0d8:	42ab      	cmp	r3, r5
 800d0da:	dc28      	bgt.n	800d12e <_printf_common+0x9a>
 800d0dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0e0:	1e13      	subs	r3, r2, #0
 800d0e2:	6822      	ldr	r2, [r4, #0]
 800d0e4:	bf18      	it	ne
 800d0e6:	2301      	movne	r3, #1
 800d0e8:	0692      	lsls	r2, r2, #26
 800d0ea:	d42d      	bmi.n	800d148 <_printf_common+0xb4>
 800d0ec:	4649      	mov	r1, r9
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0f4:	47c0      	blx	r8
 800d0f6:	3001      	adds	r0, #1
 800d0f8:	d020      	beq.n	800d13c <_printf_common+0xa8>
 800d0fa:	6823      	ldr	r3, [r4, #0]
 800d0fc:	68e5      	ldr	r5, [r4, #12]
 800d0fe:	f003 0306 	and.w	r3, r3, #6
 800d102:	2b04      	cmp	r3, #4
 800d104:	bf18      	it	ne
 800d106:	2500      	movne	r5, #0
 800d108:	6832      	ldr	r2, [r6, #0]
 800d10a:	f04f 0600 	mov.w	r6, #0
 800d10e:	68a3      	ldr	r3, [r4, #8]
 800d110:	bf08      	it	eq
 800d112:	1aad      	subeq	r5, r5, r2
 800d114:	6922      	ldr	r2, [r4, #16]
 800d116:	bf08      	it	eq
 800d118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d11c:	4293      	cmp	r3, r2
 800d11e:	bfc4      	itt	gt
 800d120:	1a9b      	subgt	r3, r3, r2
 800d122:	18ed      	addgt	r5, r5, r3
 800d124:	341a      	adds	r4, #26
 800d126:	42b5      	cmp	r5, r6
 800d128:	d11a      	bne.n	800d160 <_printf_common+0xcc>
 800d12a:	2000      	movs	r0, #0
 800d12c:	e008      	b.n	800d140 <_printf_common+0xac>
 800d12e:	2301      	movs	r3, #1
 800d130:	4652      	mov	r2, sl
 800d132:	4649      	mov	r1, r9
 800d134:	4638      	mov	r0, r7
 800d136:	47c0      	blx	r8
 800d138:	3001      	adds	r0, #1
 800d13a:	d103      	bne.n	800d144 <_printf_common+0xb0>
 800d13c:	f04f 30ff 	mov.w	r0, #4294967295
 800d140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d144:	3501      	adds	r5, #1
 800d146:	e7c4      	b.n	800d0d2 <_printf_common+0x3e>
 800d148:	2030      	movs	r0, #48	; 0x30
 800d14a:	18e1      	adds	r1, r4, r3
 800d14c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d150:	1c5a      	adds	r2, r3, #1
 800d152:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d156:	4422      	add	r2, r4
 800d158:	3302      	adds	r3, #2
 800d15a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d15e:	e7c5      	b.n	800d0ec <_printf_common+0x58>
 800d160:	2301      	movs	r3, #1
 800d162:	4622      	mov	r2, r4
 800d164:	4649      	mov	r1, r9
 800d166:	4638      	mov	r0, r7
 800d168:	47c0      	blx	r8
 800d16a:	3001      	adds	r0, #1
 800d16c:	d0e6      	beq.n	800d13c <_printf_common+0xa8>
 800d16e:	3601      	adds	r6, #1
 800d170:	e7d9      	b.n	800d126 <_printf_common+0x92>
	...

0800d174 <_printf_i>:
 800d174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d178:	460c      	mov	r4, r1
 800d17a:	7e27      	ldrb	r7, [r4, #24]
 800d17c:	4691      	mov	r9, r2
 800d17e:	2f78      	cmp	r7, #120	; 0x78
 800d180:	4680      	mov	r8, r0
 800d182:	469a      	mov	sl, r3
 800d184:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d186:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d18a:	d807      	bhi.n	800d19c <_printf_i+0x28>
 800d18c:	2f62      	cmp	r7, #98	; 0x62
 800d18e:	d80a      	bhi.n	800d1a6 <_printf_i+0x32>
 800d190:	2f00      	cmp	r7, #0
 800d192:	f000 80d9 	beq.w	800d348 <_printf_i+0x1d4>
 800d196:	2f58      	cmp	r7, #88	; 0x58
 800d198:	f000 80a4 	beq.w	800d2e4 <_printf_i+0x170>
 800d19c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1a4:	e03a      	b.n	800d21c <_printf_i+0xa8>
 800d1a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1aa:	2b15      	cmp	r3, #21
 800d1ac:	d8f6      	bhi.n	800d19c <_printf_i+0x28>
 800d1ae:	a001      	add	r0, pc, #4	; (adr r0, 800d1b4 <_printf_i+0x40>)
 800d1b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d1b4:	0800d20d 	.word	0x0800d20d
 800d1b8:	0800d221 	.word	0x0800d221
 800d1bc:	0800d19d 	.word	0x0800d19d
 800d1c0:	0800d19d 	.word	0x0800d19d
 800d1c4:	0800d19d 	.word	0x0800d19d
 800d1c8:	0800d19d 	.word	0x0800d19d
 800d1cc:	0800d221 	.word	0x0800d221
 800d1d0:	0800d19d 	.word	0x0800d19d
 800d1d4:	0800d19d 	.word	0x0800d19d
 800d1d8:	0800d19d 	.word	0x0800d19d
 800d1dc:	0800d19d 	.word	0x0800d19d
 800d1e0:	0800d32f 	.word	0x0800d32f
 800d1e4:	0800d251 	.word	0x0800d251
 800d1e8:	0800d311 	.word	0x0800d311
 800d1ec:	0800d19d 	.word	0x0800d19d
 800d1f0:	0800d19d 	.word	0x0800d19d
 800d1f4:	0800d351 	.word	0x0800d351
 800d1f8:	0800d19d 	.word	0x0800d19d
 800d1fc:	0800d251 	.word	0x0800d251
 800d200:	0800d19d 	.word	0x0800d19d
 800d204:	0800d19d 	.word	0x0800d19d
 800d208:	0800d319 	.word	0x0800d319
 800d20c:	680b      	ldr	r3, [r1, #0]
 800d20e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d212:	1d1a      	adds	r2, r3, #4
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	600a      	str	r2, [r1, #0]
 800d218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d21c:	2301      	movs	r3, #1
 800d21e:	e0a4      	b.n	800d36a <_printf_i+0x1f6>
 800d220:	6825      	ldr	r5, [r4, #0]
 800d222:	6808      	ldr	r0, [r1, #0]
 800d224:	062e      	lsls	r6, r5, #24
 800d226:	f100 0304 	add.w	r3, r0, #4
 800d22a:	d50a      	bpl.n	800d242 <_printf_i+0xce>
 800d22c:	6805      	ldr	r5, [r0, #0]
 800d22e:	600b      	str	r3, [r1, #0]
 800d230:	2d00      	cmp	r5, #0
 800d232:	da03      	bge.n	800d23c <_printf_i+0xc8>
 800d234:	232d      	movs	r3, #45	; 0x2d
 800d236:	426d      	negs	r5, r5
 800d238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d23c:	230a      	movs	r3, #10
 800d23e:	485e      	ldr	r0, [pc, #376]	; (800d3b8 <_printf_i+0x244>)
 800d240:	e019      	b.n	800d276 <_printf_i+0x102>
 800d242:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d246:	6805      	ldr	r5, [r0, #0]
 800d248:	600b      	str	r3, [r1, #0]
 800d24a:	bf18      	it	ne
 800d24c:	b22d      	sxthne	r5, r5
 800d24e:	e7ef      	b.n	800d230 <_printf_i+0xbc>
 800d250:	680b      	ldr	r3, [r1, #0]
 800d252:	6825      	ldr	r5, [r4, #0]
 800d254:	1d18      	adds	r0, r3, #4
 800d256:	6008      	str	r0, [r1, #0]
 800d258:	0628      	lsls	r0, r5, #24
 800d25a:	d501      	bpl.n	800d260 <_printf_i+0xec>
 800d25c:	681d      	ldr	r5, [r3, #0]
 800d25e:	e002      	b.n	800d266 <_printf_i+0xf2>
 800d260:	0669      	lsls	r1, r5, #25
 800d262:	d5fb      	bpl.n	800d25c <_printf_i+0xe8>
 800d264:	881d      	ldrh	r5, [r3, #0]
 800d266:	2f6f      	cmp	r7, #111	; 0x6f
 800d268:	bf0c      	ite	eq
 800d26a:	2308      	moveq	r3, #8
 800d26c:	230a      	movne	r3, #10
 800d26e:	4852      	ldr	r0, [pc, #328]	; (800d3b8 <_printf_i+0x244>)
 800d270:	2100      	movs	r1, #0
 800d272:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d276:	6866      	ldr	r6, [r4, #4]
 800d278:	2e00      	cmp	r6, #0
 800d27a:	bfa8      	it	ge
 800d27c:	6821      	ldrge	r1, [r4, #0]
 800d27e:	60a6      	str	r6, [r4, #8]
 800d280:	bfa4      	itt	ge
 800d282:	f021 0104 	bicge.w	r1, r1, #4
 800d286:	6021      	strge	r1, [r4, #0]
 800d288:	b90d      	cbnz	r5, 800d28e <_printf_i+0x11a>
 800d28a:	2e00      	cmp	r6, #0
 800d28c:	d04d      	beq.n	800d32a <_printf_i+0x1b6>
 800d28e:	4616      	mov	r6, r2
 800d290:	fbb5 f1f3 	udiv	r1, r5, r3
 800d294:	fb03 5711 	mls	r7, r3, r1, r5
 800d298:	5dc7      	ldrb	r7, [r0, r7]
 800d29a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d29e:	462f      	mov	r7, r5
 800d2a0:	42bb      	cmp	r3, r7
 800d2a2:	460d      	mov	r5, r1
 800d2a4:	d9f4      	bls.n	800d290 <_printf_i+0x11c>
 800d2a6:	2b08      	cmp	r3, #8
 800d2a8:	d10b      	bne.n	800d2c2 <_printf_i+0x14e>
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	07df      	lsls	r7, r3, #31
 800d2ae:	d508      	bpl.n	800d2c2 <_printf_i+0x14e>
 800d2b0:	6923      	ldr	r3, [r4, #16]
 800d2b2:	6861      	ldr	r1, [r4, #4]
 800d2b4:	4299      	cmp	r1, r3
 800d2b6:	bfde      	ittt	le
 800d2b8:	2330      	movle	r3, #48	; 0x30
 800d2ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2be:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2c2:	1b92      	subs	r2, r2, r6
 800d2c4:	6122      	str	r2, [r4, #16]
 800d2c6:	464b      	mov	r3, r9
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	4640      	mov	r0, r8
 800d2cc:	f8cd a000 	str.w	sl, [sp]
 800d2d0:	aa03      	add	r2, sp, #12
 800d2d2:	f7ff fedf 	bl	800d094 <_printf_common>
 800d2d6:	3001      	adds	r0, #1
 800d2d8:	d14c      	bne.n	800d374 <_printf_i+0x200>
 800d2da:	f04f 30ff 	mov.w	r0, #4294967295
 800d2de:	b004      	add	sp, #16
 800d2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2e4:	4834      	ldr	r0, [pc, #208]	; (800d3b8 <_printf_i+0x244>)
 800d2e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2ea:	680e      	ldr	r6, [r1, #0]
 800d2ec:	6823      	ldr	r3, [r4, #0]
 800d2ee:	f856 5b04 	ldr.w	r5, [r6], #4
 800d2f2:	061f      	lsls	r7, r3, #24
 800d2f4:	600e      	str	r6, [r1, #0]
 800d2f6:	d514      	bpl.n	800d322 <_printf_i+0x1ae>
 800d2f8:	07d9      	lsls	r1, r3, #31
 800d2fa:	bf44      	itt	mi
 800d2fc:	f043 0320 	orrmi.w	r3, r3, #32
 800d300:	6023      	strmi	r3, [r4, #0]
 800d302:	b91d      	cbnz	r5, 800d30c <_printf_i+0x198>
 800d304:	6823      	ldr	r3, [r4, #0]
 800d306:	f023 0320 	bic.w	r3, r3, #32
 800d30a:	6023      	str	r3, [r4, #0]
 800d30c:	2310      	movs	r3, #16
 800d30e:	e7af      	b.n	800d270 <_printf_i+0xfc>
 800d310:	6823      	ldr	r3, [r4, #0]
 800d312:	f043 0320 	orr.w	r3, r3, #32
 800d316:	6023      	str	r3, [r4, #0]
 800d318:	2378      	movs	r3, #120	; 0x78
 800d31a:	4828      	ldr	r0, [pc, #160]	; (800d3bc <_printf_i+0x248>)
 800d31c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d320:	e7e3      	b.n	800d2ea <_printf_i+0x176>
 800d322:	065e      	lsls	r6, r3, #25
 800d324:	bf48      	it	mi
 800d326:	b2ad      	uxthmi	r5, r5
 800d328:	e7e6      	b.n	800d2f8 <_printf_i+0x184>
 800d32a:	4616      	mov	r6, r2
 800d32c:	e7bb      	b.n	800d2a6 <_printf_i+0x132>
 800d32e:	680b      	ldr	r3, [r1, #0]
 800d330:	6826      	ldr	r6, [r4, #0]
 800d332:	1d1d      	adds	r5, r3, #4
 800d334:	6960      	ldr	r0, [r4, #20]
 800d336:	600d      	str	r5, [r1, #0]
 800d338:	0635      	lsls	r5, r6, #24
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	d501      	bpl.n	800d342 <_printf_i+0x1ce>
 800d33e:	6018      	str	r0, [r3, #0]
 800d340:	e002      	b.n	800d348 <_printf_i+0x1d4>
 800d342:	0671      	lsls	r1, r6, #25
 800d344:	d5fb      	bpl.n	800d33e <_printf_i+0x1ca>
 800d346:	8018      	strh	r0, [r3, #0]
 800d348:	2300      	movs	r3, #0
 800d34a:	4616      	mov	r6, r2
 800d34c:	6123      	str	r3, [r4, #16]
 800d34e:	e7ba      	b.n	800d2c6 <_printf_i+0x152>
 800d350:	680b      	ldr	r3, [r1, #0]
 800d352:	1d1a      	adds	r2, r3, #4
 800d354:	600a      	str	r2, [r1, #0]
 800d356:	681e      	ldr	r6, [r3, #0]
 800d358:	2100      	movs	r1, #0
 800d35a:	4630      	mov	r0, r6
 800d35c:	6862      	ldr	r2, [r4, #4]
 800d35e:	f000 f82f 	bl	800d3c0 <memchr>
 800d362:	b108      	cbz	r0, 800d368 <_printf_i+0x1f4>
 800d364:	1b80      	subs	r0, r0, r6
 800d366:	6060      	str	r0, [r4, #4]
 800d368:	6863      	ldr	r3, [r4, #4]
 800d36a:	6123      	str	r3, [r4, #16]
 800d36c:	2300      	movs	r3, #0
 800d36e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d372:	e7a8      	b.n	800d2c6 <_printf_i+0x152>
 800d374:	4632      	mov	r2, r6
 800d376:	4649      	mov	r1, r9
 800d378:	4640      	mov	r0, r8
 800d37a:	6923      	ldr	r3, [r4, #16]
 800d37c:	47d0      	blx	sl
 800d37e:	3001      	adds	r0, #1
 800d380:	d0ab      	beq.n	800d2da <_printf_i+0x166>
 800d382:	6823      	ldr	r3, [r4, #0]
 800d384:	079b      	lsls	r3, r3, #30
 800d386:	d413      	bmi.n	800d3b0 <_printf_i+0x23c>
 800d388:	68e0      	ldr	r0, [r4, #12]
 800d38a:	9b03      	ldr	r3, [sp, #12]
 800d38c:	4298      	cmp	r0, r3
 800d38e:	bfb8      	it	lt
 800d390:	4618      	movlt	r0, r3
 800d392:	e7a4      	b.n	800d2de <_printf_i+0x16a>
 800d394:	2301      	movs	r3, #1
 800d396:	4632      	mov	r2, r6
 800d398:	4649      	mov	r1, r9
 800d39a:	4640      	mov	r0, r8
 800d39c:	47d0      	blx	sl
 800d39e:	3001      	adds	r0, #1
 800d3a0:	d09b      	beq.n	800d2da <_printf_i+0x166>
 800d3a2:	3501      	adds	r5, #1
 800d3a4:	68e3      	ldr	r3, [r4, #12]
 800d3a6:	9903      	ldr	r1, [sp, #12]
 800d3a8:	1a5b      	subs	r3, r3, r1
 800d3aa:	42ab      	cmp	r3, r5
 800d3ac:	dcf2      	bgt.n	800d394 <_printf_i+0x220>
 800d3ae:	e7eb      	b.n	800d388 <_printf_i+0x214>
 800d3b0:	2500      	movs	r5, #0
 800d3b2:	f104 0619 	add.w	r6, r4, #25
 800d3b6:	e7f5      	b.n	800d3a4 <_printf_i+0x230>
 800d3b8:	0800f201 	.word	0x0800f201
 800d3bc:	0800f212 	.word	0x0800f212

0800d3c0 <memchr>:
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	b510      	push	{r4, lr}
 800d3c4:	b2c9      	uxtb	r1, r1
 800d3c6:	4402      	add	r2, r0
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	d101      	bne.n	800d3d2 <memchr+0x12>
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	e003      	b.n	800d3da <memchr+0x1a>
 800d3d2:	7804      	ldrb	r4, [r0, #0]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	428c      	cmp	r4, r1
 800d3d8:	d1f6      	bne.n	800d3c8 <memchr+0x8>
 800d3da:	bd10      	pop	{r4, pc}

0800d3dc <memcpy>:
 800d3dc:	440a      	add	r2, r1
 800d3de:	4291      	cmp	r1, r2
 800d3e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3e4:	d100      	bne.n	800d3e8 <memcpy+0xc>
 800d3e6:	4770      	bx	lr
 800d3e8:	b510      	push	{r4, lr}
 800d3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3ee:	4291      	cmp	r1, r2
 800d3f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3f4:	d1f9      	bne.n	800d3ea <memcpy+0xe>
 800d3f6:	bd10      	pop	{r4, pc}

0800d3f8 <memmove>:
 800d3f8:	4288      	cmp	r0, r1
 800d3fa:	b510      	push	{r4, lr}
 800d3fc:	eb01 0402 	add.w	r4, r1, r2
 800d400:	d902      	bls.n	800d408 <memmove+0x10>
 800d402:	4284      	cmp	r4, r0
 800d404:	4623      	mov	r3, r4
 800d406:	d807      	bhi.n	800d418 <memmove+0x20>
 800d408:	1e43      	subs	r3, r0, #1
 800d40a:	42a1      	cmp	r1, r4
 800d40c:	d008      	beq.n	800d420 <memmove+0x28>
 800d40e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d412:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d416:	e7f8      	b.n	800d40a <memmove+0x12>
 800d418:	4601      	mov	r1, r0
 800d41a:	4402      	add	r2, r0
 800d41c:	428a      	cmp	r2, r1
 800d41e:	d100      	bne.n	800d422 <memmove+0x2a>
 800d420:	bd10      	pop	{r4, pc}
 800d422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d426:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d42a:	e7f7      	b.n	800d41c <memmove+0x24>

0800d42c <_free_r>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4605      	mov	r5, r0
 800d430:	2900      	cmp	r1, #0
 800d432:	d043      	beq.n	800d4bc <_free_r+0x90>
 800d434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d438:	1f0c      	subs	r4, r1, #4
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	bfb8      	it	lt
 800d43e:	18e4      	addlt	r4, r4, r3
 800d440:	f000 f8d0 	bl	800d5e4 <__malloc_lock>
 800d444:	4a1e      	ldr	r2, [pc, #120]	; (800d4c0 <_free_r+0x94>)
 800d446:	6813      	ldr	r3, [r2, #0]
 800d448:	4610      	mov	r0, r2
 800d44a:	b933      	cbnz	r3, 800d45a <_free_r+0x2e>
 800d44c:	6063      	str	r3, [r4, #4]
 800d44e:	6014      	str	r4, [r2, #0]
 800d450:	4628      	mov	r0, r5
 800d452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d456:	f000 b8cb 	b.w	800d5f0 <__malloc_unlock>
 800d45a:	42a3      	cmp	r3, r4
 800d45c:	d90a      	bls.n	800d474 <_free_r+0x48>
 800d45e:	6821      	ldr	r1, [r4, #0]
 800d460:	1862      	adds	r2, r4, r1
 800d462:	4293      	cmp	r3, r2
 800d464:	bf01      	itttt	eq
 800d466:	681a      	ldreq	r2, [r3, #0]
 800d468:	685b      	ldreq	r3, [r3, #4]
 800d46a:	1852      	addeq	r2, r2, r1
 800d46c:	6022      	streq	r2, [r4, #0]
 800d46e:	6063      	str	r3, [r4, #4]
 800d470:	6004      	str	r4, [r0, #0]
 800d472:	e7ed      	b.n	800d450 <_free_r+0x24>
 800d474:	461a      	mov	r2, r3
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	b10b      	cbz	r3, 800d47e <_free_r+0x52>
 800d47a:	42a3      	cmp	r3, r4
 800d47c:	d9fa      	bls.n	800d474 <_free_r+0x48>
 800d47e:	6811      	ldr	r1, [r2, #0]
 800d480:	1850      	adds	r0, r2, r1
 800d482:	42a0      	cmp	r0, r4
 800d484:	d10b      	bne.n	800d49e <_free_r+0x72>
 800d486:	6820      	ldr	r0, [r4, #0]
 800d488:	4401      	add	r1, r0
 800d48a:	1850      	adds	r0, r2, r1
 800d48c:	4283      	cmp	r3, r0
 800d48e:	6011      	str	r1, [r2, #0]
 800d490:	d1de      	bne.n	800d450 <_free_r+0x24>
 800d492:	6818      	ldr	r0, [r3, #0]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	4401      	add	r1, r0
 800d498:	6011      	str	r1, [r2, #0]
 800d49a:	6053      	str	r3, [r2, #4]
 800d49c:	e7d8      	b.n	800d450 <_free_r+0x24>
 800d49e:	d902      	bls.n	800d4a6 <_free_r+0x7a>
 800d4a0:	230c      	movs	r3, #12
 800d4a2:	602b      	str	r3, [r5, #0]
 800d4a4:	e7d4      	b.n	800d450 <_free_r+0x24>
 800d4a6:	6820      	ldr	r0, [r4, #0]
 800d4a8:	1821      	adds	r1, r4, r0
 800d4aa:	428b      	cmp	r3, r1
 800d4ac:	bf01      	itttt	eq
 800d4ae:	6819      	ldreq	r1, [r3, #0]
 800d4b0:	685b      	ldreq	r3, [r3, #4]
 800d4b2:	1809      	addeq	r1, r1, r0
 800d4b4:	6021      	streq	r1, [r4, #0]
 800d4b6:	6063      	str	r3, [r4, #4]
 800d4b8:	6054      	str	r4, [r2, #4]
 800d4ba:	e7c9      	b.n	800d450 <_free_r+0x24>
 800d4bc:	bd38      	pop	{r3, r4, r5, pc}
 800d4be:	bf00      	nop
 800d4c0:	20000520 	.word	0x20000520

0800d4c4 <_malloc_r>:
 800d4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c6:	1ccd      	adds	r5, r1, #3
 800d4c8:	f025 0503 	bic.w	r5, r5, #3
 800d4cc:	3508      	adds	r5, #8
 800d4ce:	2d0c      	cmp	r5, #12
 800d4d0:	bf38      	it	cc
 800d4d2:	250c      	movcc	r5, #12
 800d4d4:	2d00      	cmp	r5, #0
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	db01      	blt.n	800d4de <_malloc_r+0x1a>
 800d4da:	42a9      	cmp	r1, r5
 800d4dc:	d903      	bls.n	800d4e6 <_malloc_r+0x22>
 800d4de:	230c      	movs	r3, #12
 800d4e0:	6033      	str	r3, [r6, #0]
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4e6:	f000 f87d 	bl	800d5e4 <__malloc_lock>
 800d4ea:	4921      	ldr	r1, [pc, #132]	; (800d570 <_malloc_r+0xac>)
 800d4ec:	680a      	ldr	r2, [r1, #0]
 800d4ee:	4614      	mov	r4, r2
 800d4f0:	b99c      	cbnz	r4, 800d51a <_malloc_r+0x56>
 800d4f2:	4f20      	ldr	r7, [pc, #128]	; (800d574 <_malloc_r+0xb0>)
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	b923      	cbnz	r3, 800d502 <_malloc_r+0x3e>
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f000 f862 	bl	800d5c4 <_sbrk_r>
 800d500:	6038      	str	r0, [r7, #0]
 800d502:	4629      	mov	r1, r5
 800d504:	4630      	mov	r0, r6
 800d506:	f000 f85d 	bl	800d5c4 <_sbrk_r>
 800d50a:	1c43      	adds	r3, r0, #1
 800d50c:	d123      	bne.n	800d556 <_malloc_r+0x92>
 800d50e:	230c      	movs	r3, #12
 800d510:	4630      	mov	r0, r6
 800d512:	6033      	str	r3, [r6, #0]
 800d514:	f000 f86c 	bl	800d5f0 <__malloc_unlock>
 800d518:	e7e3      	b.n	800d4e2 <_malloc_r+0x1e>
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	1b5b      	subs	r3, r3, r5
 800d51e:	d417      	bmi.n	800d550 <_malloc_r+0x8c>
 800d520:	2b0b      	cmp	r3, #11
 800d522:	d903      	bls.n	800d52c <_malloc_r+0x68>
 800d524:	6023      	str	r3, [r4, #0]
 800d526:	441c      	add	r4, r3
 800d528:	6025      	str	r5, [r4, #0]
 800d52a:	e004      	b.n	800d536 <_malloc_r+0x72>
 800d52c:	6863      	ldr	r3, [r4, #4]
 800d52e:	42a2      	cmp	r2, r4
 800d530:	bf0c      	ite	eq
 800d532:	600b      	streq	r3, [r1, #0]
 800d534:	6053      	strne	r3, [r2, #4]
 800d536:	4630      	mov	r0, r6
 800d538:	f000 f85a 	bl	800d5f0 <__malloc_unlock>
 800d53c:	f104 000b 	add.w	r0, r4, #11
 800d540:	1d23      	adds	r3, r4, #4
 800d542:	f020 0007 	bic.w	r0, r0, #7
 800d546:	1ac2      	subs	r2, r0, r3
 800d548:	d0cc      	beq.n	800d4e4 <_malloc_r+0x20>
 800d54a:	1a1b      	subs	r3, r3, r0
 800d54c:	50a3      	str	r3, [r4, r2]
 800d54e:	e7c9      	b.n	800d4e4 <_malloc_r+0x20>
 800d550:	4622      	mov	r2, r4
 800d552:	6864      	ldr	r4, [r4, #4]
 800d554:	e7cc      	b.n	800d4f0 <_malloc_r+0x2c>
 800d556:	1cc4      	adds	r4, r0, #3
 800d558:	f024 0403 	bic.w	r4, r4, #3
 800d55c:	42a0      	cmp	r0, r4
 800d55e:	d0e3      	beq.n	800d528 <_malloc_r+0x64>
 800d560:	1a21      	subs	r1, r4, r0
 800d562:	4630      	mov	r0, r6
 800d564:	f000 f82e 	bl	800d5c4 <_sbrk_r>
 800d568:	3001      	adds	r0, #1
 800d56a:	d1dd      	bne.n	800d528 <_malloc_r+0x64>
 800d56c:	e7cf      	b.n	800d50e <_malloc_r+0x4a>
 800d56e:	bf00      	nop
 800d570:	20000520 	.word	0x20000520
 800d574:	20000524 	.word	0x20000524

0800d578 <_realloc_r>:
 800d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57a:	4607      	mov	r7, r0
 800d57c:	4614      	mov	r4, r2
 800d57e:	460e      	mov	r6, r1
 800d580:	b921      	cbnz	r1, 800d58c <_realloc_r+0x14>
 800d582:	4611      	mov	r1, r2
 800d584:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d588:	f7ff bf9c 	b.w	800d4c4 <_malloc_r>
 800d58c:	b922      	cbnz	r2, 800d598 <_realloc_r+0x20>
 800d58e:	f7ff ff4d 	bl	800d42c <_free_r>
 800d592:	4625      	mov	r5, r4
 800d594:	4628      	mov	r0, r5
 800d596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d598:	f000 f830 	bl	800d5fc <_malloc_usable_size_r>
 800d59c:	42a0      	cmp	r0, r4
 800d59e:	d20f      	bcs.n	800d5c0 <_realloc_r+0x48>
 800d5a0:	4621      	mov	r1, r4
 800d5a2:	4638      	mov	r0, r7
 800d5a4:	f7ff ff8e 	bl	800d4c4 <_malloc_r>
 800d5a8:	4605      	mov	r5, r0
 800d5aa:	2800      	cmp	r0, #0
 800d5ac:	d0f2      	beq.n	800d594 <_realloc_r+0x1c>
 800d5ae:	4631      	mov	r1, r6
 800d5b0:	4622      	mov	r2, r4
 800d5b2:	f7ff ff13 	bl	800d3dc <memcpy>
 800d5b6:	4631      	mov	r1, r6
 800d5b8:	4638      	mov	r0, r7
 800d5ba:	f7ff ff37 	bl	800d42c <_free_r>
 800d5be:	e7e9      	b.n	800d594 <_realloc_r+0x1c>
 800d5c0:	4635      	mov	r5, r6
 800d5c2:	e7e7      	b.n	800d594 <_realloc_r+0x1c>

0800d5c4 <_sbrk_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	4d05      	ldr	r5, [pc, #20]	; (800d5e0 <_sbrk_r+0x1c>)
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	4608      	mov	r0, r1
 800d5ce:	602b      	str	r3, [r5, #0]
 800d5d0:	f7f6 f9f6 	bl	80039c0 <_sbrk>
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	d102      	bne.n	800d5de <_sbrk_r+0x1a>
 800d5d8:	682b      	ldr	r3, [r5, #0]
 800d5da:	b103      	cbz	r3, 800d5de <_sbrk_r+0x1a>
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	bd38      	pop	{r3, r4, r5, pc}
 800d5e0:	20001690 	.word	0x20001690

0800d5e4 <__malloc_lock>:
 800d5e4:	4801      	ldr	r0, [pc, #4]	; (800d5ec <__malloc_lock+0x8>)
 800d5e6:	f000 b811 	b.w	800d60c <__retarget_lock_acquire_recursive>
 800d5ea:	bf00      	nop
 800d5ec:	20001698 	.word	0x20001698

0800d5f0 <__malloc_unlock>:
 800d5f0:	4801      	ldr	r0, [pc, #4]	; (800d5f8 <__malloc_unlock+0x8>)
 800d5f2:	f000 b80c 	b.w	800d60e <__retarget_lock_release_recursive>
 800d5f6:	bf00      	nop
 800d5f8:	20001698 	.word	0x20001698

0800d5fc <_malloc_usable_size_r>:
 800d5fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d600:	1f18      	subs	r0, r3, #4
 800d602:	2b00      	cmp	r3, #0
 800d604:	bfbc      	itt	lt
 800d606:	580b      	ldrlt	r3, [r1, r0]
 800d608:	18c0      	addlt	r0, r0, r3
 800d60a:	4770      	bx	lr

0800d60c <__retarget_lock_acquire_recursive>:
 800d60c:	4770      	bx	lr

0800d60e <__retarget_lock_release_recursive>:
 800d60e:	4770      	bx	lr

0800d610 <_init>:
 800d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d612:	bf00      	nop
 800d614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d616:	bc08      	pop	{r3}
 800d618:	469e      	mov	lr, r3
 800d61a:	4770      	bx	lr

0800d61c <_fini>:
 800d61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61e:	bf00      	nop
 800d620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d622:	bc08      	pop	{r3}
 800d624:	469e      	mov	lr, r3
 800d626:	4770      	bx	lr
