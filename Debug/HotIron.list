
HotIron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d54c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bfc  0800d658  0800d658  0001d658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f254  0800f254  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  0800f254  0800f254  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f254  0800f254  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f254  0800f254  0001f254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f258  0800f258  0001f258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800f25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001488  20000218  0800f474  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016a0  0800f474  000216a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d14d  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004017  00000000  00000000  0003d38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  000413a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  000427a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6e3  00000000  00000000  000439e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c3f  00000000  00000000  0005f0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090132  00000000  00000000  00077d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107e3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055ec  00000000  00000000  00107e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000218 	.word	0x20000218
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d640 	.word	0x0800d640

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000021c 	.word	0x2000021c
 8000148:	0800d640 	.word	0x0800d640

0800014c <delay_init>:
#include "main.h"

TIM_HandleTypeDef * htim;

void delay_init(TIM_HandleTypeDef * htim_i)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	htim = htim_i;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <delay_init+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htim);
 800015a:	4b04      	ldr	r3, [pc, #16]	; (800016c <delay_init+0x20>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4618      	mov	r0, r3
 8000160:	f006 feec 	bl	8006f3c <HAL_TIM_Base_Start>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000528 	.word	0x20000528

08000170 <delay_us>:

// delays for us count
void delay_us(uint16_t us)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim,0);
 800017a:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <delay_us+0x34>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2200      	movs	r2, #0
 8000182:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(htim) < us);
 8000184:	bf00      	nop
 8000186:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <delay_us+0x34>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800018e:	b29b      	uxth	r3, r3
 8000190:	88fa      	ldrh	r2, [r7, #6]
 8000192:	429a      	cmp	r2, r3
 8000194:	d8f7      	bhi.n	8000186 <delay_us+0x16>
}
 8000196:	bf00      	nop
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000528 	.word	0x20000528

080001a8 <lcd_create>:
 */
LCD_HandleTypeDef lcd_create(
		LCD_PortType port[], LCD_PinType pin[],
		LCD_PortType rs_port, LCD_PinType rs_pin,
		LCD_PortType en_port, LCD_PinType en_pin, LCD_ModeTypeDef mode)
{
 80001a8:	b5b0      	push	{r4, r5, r7, lr}
 80001aa:	b08a      	sub	sp, #40	; 0x28
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
 80001b4:	603b      	str	r3, [r7, #0]
	LCD_HandleTypeDef lcd;

	lcd.mode = mode;
 80001b6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80001ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80001be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80001c2:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80001c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001c6:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80001c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80001ca:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	613b      	str	r3, [r7, #16]

	delay_us(20000); // Display needs about 10ms to start, so you should provide delay
 80001d8:	f644 6020 	movw	r0, #20000	; 0x4e20
 80001dc:	f7ff ffc8 	bl	8000170 <delay_us>

	lcd_init(&lcd);
 80001e0:	f107 0310 	add.w	r3, r7, #16
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f80f 	bl	8000208 <lcd_init>

	return lcd;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	461d      	mov	r5, r3
 80001ee:	f107 0410 	add.w	r4, r7, #16
 80001f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001fa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001fe:	68f8      	ldr	r0, [r7, #12]
 8000200:	3728      	adds	r7, #40	; 0x28
 8000202:	46bd      	mov	sp, r7
 8000204:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000208 <lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void lcd_init(LCD_HandleTypeDef * lcd)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	7d9b      	ldrb	r3, [r3, #22]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d10f      	bne.n	8000238 <lcd_init+0x30>
	{
			lcd_write_command(lcd, 0x33);
 8000218:	2133      	movs	r1, #51	; 0x33
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f000 f8d4 	bl	80003c8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000220:	2132      	movs	r1, #50	; 0x32
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f8d0 	bl	80003c8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000228:	2128      	movs	r1, #40	; 0x28
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f8cc 	bl	80003c8 <lcd_write_command>
			lcd_8line_mode = false;
 8000230:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <lcd_init+0x60>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	e006      	b.n	8000246 <lcd_init+0x3e>
	}
	else
	{
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000238:	2138      	movs	r1, #56	; 0x38
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f000 f8c4 	bl	80003c8 <lcd_write_command>
		lcd_8line_mode = true;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <lcd_init+0x60>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
	}


	lcd_clear(lcd);											// Clear screen
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f000 f88c 	bl	8000364 <lcd_clear>
	lcd_mode(lcd, LCD_ENABLE, CURSOR_DISABLE, NO_BLINK);
 800024c:	2300      	movs	r3, #0
 800024e:	2200      	movs	r2, #0
 8000250:	2101      	movs	r1, #1
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 f80a 	bl	800026c <lcd_mode>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000258:	2106      	movs	r1, #6
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	f000 f8b4 	bl	80003c8 <lcd_write_command>
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000000 	.word	0x20000000

0800026c <lcd_mode>:

/**
 * Set display & cursor mode
 */
void lcd_mode(LCD_HandleTypeDef * lcd, LCD_ONOFF state, LCD_CURSOR cursor, LCD_BLINK blink)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	4608      	mov	r0, r1
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	4603      	mov	r3, r0
 800027c:	70fb      	strb	r3, [r7, #3]
 800027e:	460b      	mov	r3, r1
 8000280:	70bb      	strb	r3, [r7, #2]
 8000282:	4613      	mov	r3, r2
 8000284:	707b      	strb	r3, [r7, #1]
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL |
								 (state ?OPT_D:0) |
 8000286:	78fb      	ldrb	r3, [r7, #3]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <lcd_mode+0x24>
 800028c:	220c      	movs	r2, #12
 800028e:	e000      	b.n	8000292 <lcd_mode+0x26>
 8000290:	2208      	movs	r2, #8
 8000292:	78bb      	ldrb	r3, [r7, #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <lcd_mode+0x30>
 8000298:	2302      	movs	r3, #2
 800029a:	e000      	b.n	800029e <lcd_mode+0x32>
 800029c:	2300      	movs	r3, #0
 800029e:	4313      	orrs	r3, r2
 80002a0:	b25a      	sxtb	r2, r3
								 (cursor?OPT_C:0) |
								 (blink ?OPT_B:0));
 80002a2:	787b      	ldrb	r3, [r7, #1]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	bf14      	ite	ne
 80002a8:	2301      	movne	r3, #1
 80002aa:	2300      	moveq	r3, #0
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	b25b      	sxtb	r3, r3
								 (cursor?OPT_C:0) |
 80002b0:	4313      	orrs	r3, r2
 80002b2:	b25b      	sxtb	r3, r3
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL |
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4619      	mov	r1, r3
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f885 	bl	80003c8 <lcd_write_command>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <lcd_out>:

/**
 * Write a string on the current position
 */
void lcd_out(LCD_HandleTypeDef * lcd, uint8_t * arr, uint8_t length)
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b086      	sub	sp, #24
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	60f8      	str	r0, [r7, #12]
 80002ce:	60b9      	str	r1, [r7, #8]
 80002d0:	4613      	mov	r3, r2
 80002d2:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < length; i++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e00a      	b.n	80002f0 <lcd_out+0x2a>
	{
		lcd_write_data(lcd, arr[i]);
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	4413      	add	r3, r2
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	4619      	mov	r1, r3
 80002e4:	68f8      	ldr	r0, [r7, #12]
 80002e6:	f000 f8a9 	bl	800043c <lcd_write_data>
	for (int i = 0; i < length; i++)
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	3301      	adds	r3, #1
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	697a      	ldr	r2, [r7, #20]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	dbf0      	blt.n	80002da <lcd_out+0x14>
	}
}
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <lcd_string>:

/**
 * Write a string on the current position
 */
void lcd_string(LCD_HandleTypeDef * lcd, char * string)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b082      	sub	sp, #8
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	6039      	str	r1, [r7, #0]
	while (*string)
 800030c:	e007      	b.n	800031e <lcd_string+0x1c>
	{
		lcd_write_data(lcd, (uint8_t)*(string++));
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	1c5a      	adds	r2, r3, #1
 8000312:	603a      	str	r2, [r7, #0]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4619      	mov	r1, r3
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 f88f 	bl	800043c <lcd_write_data>
	while (*string)
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d1f3      	bne.n	800030e <lcd_string+0xc>
	}
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <lcd_set_xy>:

/**
 * Set the cursor position
 */
void lcd_set_xy(LCD_HandleTypeDef * lcd, uint8_t x, uint8_t y)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
 800033c:	4613      	mov	r3, r2
 800033e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[y] + x);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[y] + x);
 8000340:	78bb      	ldrb	r3, [r7, #2]
 8000342:	4a07      	ldr	r2, [pc, #28]	; (8000360 <lcd_set_xy+0x30>)
 8000344:	5cd2      	ldrb	r2, [r2, r3]
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	4413      	add	r3, r2
 800034a:	b2db      	uxtb	r3, r3
 800034c:	3b80      	subs	r3, #128	; 0x80
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4619      	mov	r1, r3
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 f838 	bl	80003c8 <lcd_write_command>
	#endif
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800d924 	.word	0x0800d924

08000364 <lcd_clear>:

/**
 * Clear the screen
 */
void lcd_clear(LCD_HandleTypeDef * lcd) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800036c:	2101      	movs	r1, #1
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f000 f82a 	bl	80003c8 <lcd_write_command>
	delay_us(maxi_delay);
 8000374:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000378:	f7ff fefa 	bl	8000170 <delay_us>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <lcd_define_chars>:
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
}

// load all 8 chars
void lcd_define_chars(LCD_HandleTypeDef * lcd, uint8_t bitmap[]){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
	lcd_write_command(lcd, SETCGRAM_ADDR);
 800038e:	2140      	movs	r1, #64	; 0x40
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f000 f819 	bl	80003c8 <lcd_write_command>
	for(uint8_t i=0;i<64;++i){
 8000396:	2300      	movs	r3, #0
 8000398:	73fb      	strb	r3, [r7, #15]
 800039a:	e00a      	b.n	80003b2 <lcd_define_chars+0x2e>
		lcd_write_data(lcd, bitmap[i]);
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	683a      	ldr	r2, [r7, #0]
 80003a0:	4413      	add	r3, r2
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	4619      	mov	r1, r3
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f000 f848 	bl	800043c <lcd_write_data>
	for(uint8_t i=0;i<64;++i){
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	3301      	adds	r3, #1
 80003b0:	73fb      	strb	r3, [r7, #15]
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	2b3f      	cmp	r3, #63	; 0x3f
 80003b6:	d9f1      	bls.n	800039c <lcd_define_chars+0x18>
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f000 f804 	bl	80003c8 <lcd_write_command>
}
 80003c0:	bf00      	nop
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(LCD_HandleTypeDef * lcd, uint8_t command)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6898      	ldr	r0, [r3, #8]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	899b      	ldrh	r3, [r3, #12]
 80003dc:	2200      	movs	r2, #0
 80003de:	4619      	mov	r1, r3
 80003e0:	f004 f8fb 	bl	80045da <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	7d9b      	ldrb	r3, [r3, #22]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d118      	bne.n	800041e <lcd_write_command+0x56>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80003ec:	78fb      	ldrb	r3, [r7, #3]
 80003ee:	091b      	lsrs	r3, r3, #4
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	2204      	movs	r2, #4
 80003f4:	4619      	mov	r1, r3
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f000 f85a 	bl	80004b0 <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <lcd_write_command+0x70>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d002      	beq.n	800040a <lcd_write_command+0x42>
 8000404:	202a      	movs	r0, #42	; 0x2a
 8000406:	f7ff feb3 	bl	8000170 <delay_us>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	f003 030f 	and.w	r3, r3, #15
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2204      	movs	r2, #4
 8000414:	4619      	mov	r1, r3
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f000 f84a 	bl	80004b0 <lcd_write>
 800041c:	e005      	b.n	800042a <lcd_write_command+0x62>
	}
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
 800041e:	78fb      	ldrb	r3, [r7, #3]
 8000420:	2208      	movs	r2, #8
 8000422:	4619      	mov	r1, r3
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f000 f843 	bl	80004b0 <lcd_write>
	}
	delay_us(mini_delay);
 800042a:	202a      	movs	r0, #42	; 0x2a
 800042c:	f7ff fea0 	bl	8000170 <delay_us>
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000000 	.word	0x20000000

0800043c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(LCD_HandleTypeDef * lcd, uint8_t data)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6898      	ldr	r0, [r3, #8]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	899b      	ldrh	r3, [r3, #12]
 8000450:	2201      	movs	r2, #1
 8000452:	4619      	mov	r1, r3
 8000454:	f004 f8c1 	bl	80045da <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	7d9b      	ldrb	r3, [r3, #22]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d118      	bne.n	8000492 <lcd_write_data+0x56>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	091b      	lsrs	r3, r3, #4
 8000464:	b2db      	uxtb	r3, r3
 8000466:	2204      	movs	r2, #4
 8000468:	4619      	mov	r1, r3
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f000 f820 	bl	80004b0 <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <lcd_write_data+0x70>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d002      	beq.n	800047e <lcd_write_data+0x42>
 8000478:	202a      	movs	r0, #42	; 0x2a
 800047a:	f7ff fe79 	bl	8000170 <delay_us>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800047e:	78fb      	ldrb	r3, [r7, #3]
 8000480:	f003 030f 	and.w	r3, r3, #15
 8000484:	b2db      	uxtb	r3, r3
 8000486:	2204      	movs	r2, #4
 8000488:	4619      	mov	r1, r3
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f000 f810 	bl	80004b0 <lcd_write>
 8000490:	e005      	b.n	800049e <lcd_write_data+0x62>
	}
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	2208      	movs	r2, #8
 8000496:	4619      	mov	r1, r3
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f000 f809 	bl	80004b0 <lcd_write>
	}
	delay_us(mini_delay);
 800049e:	202a      	movs	r0, #42	; 0x2a
 80004a0:	f7ff fe66 	bl	8000170 <delay_us>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000000 	.word	0x20000000

080004b0 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(LCD_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
 80004bc:	4613      	mov	r3, r2
 80004be:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]
 80004c4:	e019      	b.n	80004fa <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	4413      	add	r3, r2
 80004d0:	6818      	ldr	r0, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	4413      	add	r3, r2
 80004dc:	8819      	ldrh	r1, [r3, #0]
 80004de:	78fa      	ldrb	r2, [r7, #3]
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	fa42 f303 	asr.w	r3, r2, r3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	f004 f873 	bl	80045da <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	3301      	adds	r3, #1
 80004f8:	73fb      	strb	r3, [r7, #15]
 80004fa:	7bfa      	ldrb	r2, [r7, #15]
 80004fc:	78bb      	ldrb	r3, [r7, #2]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d3e1      	bcc.n	80004c6 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6918      	ldr	r0, [r3, #16]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	8a9b      	ldrh	r3, [r3, #20]
 800050a:	2201      	movs	r2, #1
 800050c:	4619      	mov	r1, r3
 800050e:	f004 f864 	bl	80045da <HAL_GPIO_WritePin>
	DELAY_US(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff fe2c 	bl	8000170 <delay_us>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6918      	ldr	r0, [r3, #16]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	8a9b      	ldrh	r3, [r3, #20]
 8000520:	2200      	movs	r2, #0
 8000522:	4619      	mov	r1, r3
 8000524:	f004 f859 	bl	80045da <HAL_GPIO_WritePin>
	DELAY_US(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff fe21 	bl	8000170 <delay_us>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <int2string>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void int2string(uint32_t digit, uint8_t * buf, uint8_t len)
{
 8000538:	b480      	push	{r7}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	4613      	mov	r3, r2
 8000544:	71fb      	strb	r3, [r7, #7]
	for (int i = len - 1; i >= 0; i--)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	3b01      	subs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	e027      	b.n	800059e <int2string+0x66>
	{
		if (digit || (i == (len-1)))
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d104      	bne.n	800055e <int2string+0x26>
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	3b01      	subs	r3, #1
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	429a      	cmp	r2, r3
 800055c:	d117      	bne.n	800058e <int2string+0x56>
		{
			buf[i] = digit % 10 + '0';
 800055e:	68f9      	ldr	r1, [r7, #12]
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <int2string+0x78>)
 8000562:	fba3 2301 	umull	r2, r3, r3, r1
 8000566:	08da      	lsrs	r2, r3, #3
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	1aca      	subs	r2, r1, r3
 8000572:	b2d2      	uxtb	r2, r2
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	68b9      	ldr	r1, [r7, #8]
 8000578:	440b      	add	r3, r1
 800057a:	3230      	adds	r2, #48	; 0x30
 800057c:	b2d2      	uxtb	r2, r2
 800057e:	701a      	strb	r2, [r3, #0]
			digit /= 10;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <int2string+0x78>)
 8000584:	fba2 2303 	umull	r2, r3, r2, r3
 8000588:	08db      	lsrs	r3, r3, #3
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	e004      	b.n	8000598 <int2string+0x60>
		}
		else
			buf[i] = ' ';
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	4413      	add	r3, r2
 8000594:	2220      	movs	r2, #32
 8000596:	701a      	strb	r2, [r3, #0]
	for (int i = len - 1; i >= 0; i--)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3b01      	subs	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dad4      	bge.n	800054e <int2string+0x16>
	}
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	371c      	adds	r7, #28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	cccccccd 	.word	0xcccccccd

080005b4 <int2time>:
 * converts int to time string
 * @param time - time in msec
 * @param buf - provide buffer for 5 positions
 */
char * int2time(uint32_t time, uint8_t * buf)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	buf[4] = '\0';
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	3304      	adds	r3, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	if (time >= 600)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80005cc:	d31e      	bcc.n	800060c <int2time+0x58>
	{
		// display time in minutes
		buf[3] = 'm';
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	3303      	adds	r3, #3
 80005d2:	226d      	movs	r2, #109	; 0x6d
 80005d4:	701a      	strb	r2, [r3, #0]
		time /= 60;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <int2time+0xd0>)
 80005da:	fba2 2303 	umull	r2, r3, r2, r3
 80005de:	095b      	lsrs	r3, r3, #5
 80005e0:	607b      	str	r3, [r7, #4]
		if (time >= 999)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f240 32e6 	movw	r2, #998	; 0x3e6
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d909      	bls.n	8000600 <int2time+0x4c>
		{
			global_error |= errTIMEOUT;
 80005ec:	4b26      	ldr	r3, [pc, #152]	; (8000688 <int2time+0xd4>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	f043 0320 	orr.w	r3, r3, #32
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b24      	ldr	r3, [pc, #144]	; (8000688 <int2time+0xd4>)
 80005f8:	701a      	strb	r2, [r3, #0]
			time = 999;
 80005fa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80005fe:	607b      	str	r3, [r7, #4]
		}
		int2string(time, buf, 3);
 8000600:	2203      	movs	r2, #3
 8000602:	6839      	ldr	r1, [r7, #0]
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff97 	bl	8000538 <int2string>
 800060a:	e035      	b.n	8000678 <int2time+0xc4>
	} else
	{
		buf[1] = ':';
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	223a      	movs	r2, #58	; 0x3a
 8000612:	701a      	strb	r2, [r3, #0]
		buf[3] = time % 10 + '0';
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <int2time+0xd8>)
 8000618:	fba3 2301 	umull	r2, r3, r3, r1
 800061c:	08da      	lsrs	r2, r3, #3
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	1aca      	subs	r2, r1, r3
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	3303      	adds	r3, #3
 800062e:	3230      	adds	r2, #48	; 0x30
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	701a      	strb	r2, [r3, #0]
		time /= 10;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a15      	ldr	r2, [pc, #84]	; (800068c <int2time+0xd8>)
 8000638:	fba2 2303 	umull	r2, r3, r2, r3
 800063c:	08db      	lsrs	r3, r3, #3
 800063e:	607b      	str	r3, [r7, #4]
		buf[2] = time % 6 + '0';
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <int2time+0xdc>)
 8000644:	fba3 2301 	umull	r2, r3, r3, r1
 8000648:	089a      	lsrs	r2, r3, #2
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	1aca      	subs	r2, r1, r3
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	3302      	adds	r3, #2
 800065a:	3230      	adds	r2, #48	; 0x30
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	701a      	strb	r2, [r3, #0]
		time /= 6;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <int2time+0xdc>)
 8000664:	fba2 2303 	umull	r2, r3, r2, r3
 8000668:	089b      	lsrs	r3, r3, #2
 800066a:	607b      	str	r3, [r7, #4]
		buf[0] = time + '0';
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	3330      	adds	r3, #48	; 0x30
 8000672:	b2da      	uxtb	r2, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	701a      	strb	r2, [r3, #0]
	}
	return (char *)buf;
 8000678:	683b      	ldr	r3, [r7, #0]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	88888889 	.word	0x88888889
 8000688:	20000234 	.word	0x20000234
 800068c:	cccccccd 	.word	0xcccccccd
 8000690:	aaaaaaab 	.word	0xaaaaaaab

08000694 <init_lcd>:
	scDOT = 0xA5, // big dot in the middle
	scSIGMA = 0xF6, // sigma
};

void init_lcd(void)
{
 8000694:	b5b0      	push	{r4, r5, r7, lr}
 8000696:	b09a      	sub	sp, #104	; 0x68
 8000698:	af04      	add	r7, sp, #16
	  lcd = lcd_create(ports, pins,
 800069a:	4c25      	ldr	r4, [pc, #148]	; (8000730 <init_lcd+0x9c>)
 800069c:	4638      	mov	r0, r7
 800069e:	2300      	movs	r3, #0
 80006a0:	9303      	str	r3, [sp, #12]
 80006a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <init_lcd+0xa0>)
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <init_lcd+0xa0>)
 80006b4:	4a20      	ldr	r2, [pc, #128]	; (8000738 <init_lcd+0xa4>)
 80006b6:	4921      	ldr	r1, [pc, #132]	; (800073c <init_lcd+0xa8>)
 80006b8:	f7ff fd76 	bl	80001a8 <lcd_create>
 80006bc:	4625      	mov	r5, r4
 80006be:	463c      	mov	r4, r7
 80006c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006c8:	e885 0003 	stmia.w	r5, {r0, r1}
						hd_E_GPIO_Port, hd_E_Pin,
						LCD_4_BIT_MODE);

	  /* load symbols */

	  uint8_t symbols [] = {
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <init_lcd+0xac>)
 80006ce:	f107 0418 	add.w	r4, r7, #24
 80006d2:	461d      	mov	r5, r3
 80006d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			  	  	  	  	0x0, 0xe, 0x11, 0x15, 0x11, 0xe, 0x0, 0x0, // OFF
//			  	  	  	  	0x0, 0x4, 0x15, 0x15, 0x11, 0xe, 0x0, 0x0, // ON
//							0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x15, 0x0,   // ellips
//							0x0, 0x0, 0xa, 0x1f, 0xe, 0x4, 0x0, 0x0, // heart
	  };
	  lcd_define_chars(&lcd, symbols);
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4619      	mov	r1, r3
 80006ee:	4810      	ldr	r0, [pc, #64]	; (8000730 <init_lcd+0x9c>)
 80006f0:	f7ff fe48 	bl	8000384 <lcd_define_chars>
	  lcd_set_xy(&lcd, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <init_lcd+0x9c>)
 80006fa:	f7ff fe19 	bl	8000330 <lcd_set_xy>
	  lcd_string(&lcd, "Maksim Jeskevic ");
 80006fe:	4911      	ldr	r1, [pc, #68]	; (8000744 <init_lcd+0xb0>)
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <init_lcd+0x9c>)
 8000702:	f7ff fdfe 	bl	8000302 <lcd_string>
	  lcd_set_xy(&lcd, 0, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	2100      	movs	r1, #0
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <init_lcd+0x9c>)
 800070c:	f7ff fe10 	bl	8000330 <lcd_set_xy>
	  lcd_string(&lcd, "         2021 08");
 8000710:	490d      	ldr	r1, [pc, #52]	; (8000748 <init_lcd+0xb4>)
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <init_lcd+0x9c>)
 8000714:	f7ff fdf5 	bl	8000302 <lcd_string>
	  HAL_Delay(1500);
 8000718:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800071c:	f003 fa2c 	bl	8003b78 <HAL_Delay>
	  lcd_clear(&lcd);
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <init_lcd+0x9c>)
 8000722:	f7ff fe1f 	bl	8000364 <lcd_clear>
}
 8000726:	bf00      	nop
 8000728:	3758      	adds	r7, #88	; 0x58
 800072a:	46bd      	mov	sp, r7
 800072c:	bdb0      	pop	{r4, r5, r7, pc}
 800072e:	bf00      	nop
 8000730:	20000570 	.word	0x20000570
 8000734:	40010c00 	.word	0x40010c00
 8000738:	20000014 	.word	0x20000014
 800073c:	20000004 	.word	0x20000004
 8000740:	0800d680 	.word	0x0800d680
 8000744:	0800d658 	.word	0x0800d658
 8000748:	0800d66c 	.word	0x0800d66c

0800074c <do_button>:
/**
 * updates button state, checks if button long pressed
 * also updates encoder value register
 */
void do_button(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
	const uint32_t time_for_long_press = 700;
 8000752:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000756:	607b      	str	r3, [r7, #4]
	static uint32_t last_time = 0;
	static bool last_button = false;
	static uint32_t but_time = 0;
	if (HAL_GetTick() - last_time < 20)
 8000758:	f003 fa04 	bl	8003b64 <HAL_GetTick>
 800075c:	4602      	mov	r2, r0
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <do_button+0xa0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	2b13      	cmp	r3, #19
 8000766:	d93d      	bls.n	80007e4 <do_button+0x98>
		return;
	encoder.pressed = !HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin);
 8000768:	2108      	movs	r1, #8
 800076a:	4821      	ldr	r0, [pc, #132]	; (80007f0 <do_button+0xa4>)
 800076c:	f003 ff1e 	bl	80045ac <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf0c      	ite	eq
 8000776:	2301      	moveq	r3, #1
 8000778:	2300      	movne	r3, #0
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <do_button+0xa8>)
 800077e:	709a      	strb	r2, [r3, #2]
	if (encoder.pressed)
 8000780:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <do_button+0xa8>)
 8000782:	789b      	ldrb	r3, [r3, #2]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d018      	beq.n	80007ba <do_button+0x6e>
	{
		if (!last_button)
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <do_button+0xac>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d004      	beq.n	80007a0 <do_button+0x54>
			but_time = HAL_GetTick();
 8000796:	f003 f9e5 	bl	8003b64 <HAL_GetTick>
 800079a:	4603      	mov	r3, r0
 800079c:	4a17      	ldr	r2, [pc, #92]	; (80007fc <do_button+0xb0>)
 800079e:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - but_time > time_for_long_press)
 80007a0:	f003 f9e0 	bl	8003b64 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <do_button+0xb0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d206      	bcs.n	80007c0 <do_button+0x74>
			encoder.long_press = true;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <do_button+0xa8>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	70da      	strb	r2, [r3, #3]
 80007b8:	e002      	b.n	80007c0 <do_button+0x74>
	}
	else
		encoder.long_press = false;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <do_button+0xa8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	70da      	strb	r2, [r3, #3]
	last_button = encoder.pressed;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <do_button+0xa8>)
 80007c2:	789a      	ldrb	r2, [r3, #2]
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <do_button+0xac>)
 80007c6:	701a      	strb	r2, [r3, #0]

	/**
	 * reads register value and drops non-significant byte
	 * also inverts direction of encoder
	 */
	encoder.value = (-((int16_t)(TIM3->CNT)))>>1;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <do_button+0xb4>)
 80007ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007cc:	b21b      	sxth	r3, r3
 80007ce:	425b      	negs	r3, r3
 80007d0:	105b      	asrs	r3, r3, #1
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <do_button+0xa8>)
 80007d6:	801a      	strh	r2, [r3, #0]

	last_time = HAL_GetTick();
 80007d8:	f003 f9c4 	bl	8003b64 <HAL_GetTick>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a03      	ldr	r2, [pc, #12]	; (80007ec <do_button+0xa0>)
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	e000      	b.n	80007e6 <do_button+0x9a>
		return;
 80007e4:	bf00      	nop
}
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000250 	.word	0x20000250
 80007f0:	40010c00 	.word	0x40010c00
 80007f4:	20000238 	.word	0x20000238
 80007f8:	20000254 	.word	0x20000254
 80007fc:	20000258 	.word	0x20000258
 8000800:	40000400 	.word	0x40000400

08000804 <do_blink>:

void do_blink(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 500)
 8000808:	f003 f9ac 	bl	8003b64 <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <do_blink+0x30>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000818:	d30a      	bcc.n	8000830 <do_blink+0x2c>
		return;
	last_time = HAL_GetTick();
 800081a:	f003 f9a3 	bl	8003b64 <HAL_GetTick>
 800081e:	4603      	mov	r3, r0
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <do_blink+0x30>)
 8000822:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <do_blink+0x34>)
 800082a:	f003 feee 	bl	800460a <HAL_GPIO_TogglePin>
 800082e:	e000      	b.n	8000832 <do_blink+0x2e>
		return;
 8000830:	bf00      	nop
}
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000025c 	.word	0x2000025c
 8000838:	40011000 	.word	0x40011000

0800083c <get_max6675>:
/**
 * read temperature from max6675
 * and check for validity
 */
void get_max6675(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	uint16_t data;
	HAL_SPI_ReceiveOnly(&hspi1, (uint8_t*)(&data), 1, 100);
 8000842:	1db9      	adds	r1, r7, #6
 8000844:	2364      	movs	r3, #100	; 0x64
 8000846:	2201      	movs	r2, #1
 8000848:	4810      	ldr	r0, [pc, #64]	; (800088c <get_max6675+0x50>)
 800084a:	f002 fdbd 	bl	80033c8 <HAL_SPI_ReceiveOnly>

	MAX6675.data_valid = !(data & 0b110);
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	f003 0306 	and.w	r3, r3, #6
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf0c      	ite	eq
 8000858:	2301      	moveq	r3, #1
 800085a:	2300      	movne	r3, #0
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <get_max6675+0x54>)
 8000860:	725a      	strb	r2, [r3, #9]
	MAX6675.temperature = data >> 3;
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <get_max6675+0x54>)
 800086a:	801a      	strh	r2, [r3, #0]
	if (!(MAX6675.data_valid))
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <get_max6675+0x54>)
 800086e:	7a5b      	ldrb	r3, [r3, #9]
 8000870:	f083 0301 	eor.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d003      	beq.n	8000882 <get_max6675+0x46>
		MAX6675.temperature = 0xfff;
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <get_max6675+0x54>)
 800087c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000880:	801a      	strh	r2, [r3, #0]
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000066c 	.word	0x2000066c
 8000890:	2000023c 	.word	0x2000023c

08000894 <ascii_max6675>:

void ascii_max6675(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
	if (MAX6675.data_valid)
 800089a:	4b48      	ldr	r3, [pc, #288]	; (80009bc <ascii_max6675+0x128>)
 800089c:	7a5b      	ldrb	r3, [r3, #9]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d074      	beq.n	800098c <ascii_max6675+0xf8>
		{
			uint32_t digit = 25*(MAX6675.temperature&0b11);
 80008a2:	4b46      	ldr	r3, [pc, #280]	; (80009bc <ascii_max6675+0x128>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	f003 0203 	and.w	r2, r3, #3
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	009a      	lsls	r2, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
			digit += (MAX6675.temperature>>2)*1000;
 80008b6:	4b41      	ldr	r3, [pc, #260]	; (80009bc <ascii_max6675+0x128>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	089b      	lsrs	r3, r3, #2
 80008bc:	b29b      	uxth	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c4:	fb03 f302 	mul.w	r3, r3, r2
 80008c8:	461a      	mov	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	4413      	add	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]
			int8_t i = 6;
 80008d0:	2306      	movs	r3, #6
 80008d2:	72fb      	strb	r3, [r7, #11]
			while (digit)
 80008d4:	e01b      	b.n	800090e <ascii_max6675+0x7a>
			{
				MAX6675.ascii[i--] = '0' + digit%10;
 80008d6:	68f9      	ldr	r1, [r7, #12]
 80008d8:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <ascii_max6675+0x12c>)
 80008da:	fba3 2301 	umull	r2, r3, r3, r1
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	1aca      	subs	r2, r1, r3
 80008ea:	b2d3      	uxtb	r3, r2
 80008ec:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80008f0:	b2ca      	uxtb	r2, r1
 80008f2:	3a01      	subs	r2, #1
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	72fa      	strb	r2, [r7, #11]
 80008f8:	3330      	adds	r3, #48	; 0x30
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <ascii_max6675+0x128>)
 80008fe:	440b      	add	r3, r1
 8000900:	709a      	strb	r2, [r3, #2]
				digit /= 10;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	4a2e      	ldr	r2, [pc, #184]	; (80009c0 <ascii_max6675+0x12c>)
 8000906:	fba2 2303 	umull	r2, r3, r2, r3
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	60fb      	str	r3, [r7, #12]
			while (digit)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1e0      	bne.n	80008d6 <ascii_max6675+0x42>
			}
			while (i >= 0)
 8000914:	e018      	b.n	8000948 <ascii_max6675+0xb4>
			{
				if (i > 2)
 8000916:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800091a:	2b02      	cmp	r3, #2
 800091c:	dd0a      	ble.n	8000934 <ascii_max6675+0xa0>
					MAX6675.ascii[i--] = '0';
 800091e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000922:	b2d3      	uxtb	r3, r2
 8000924:	3b01      	subs	r3, #1
 8000926:	b2db      	uxtb	r3, r3
 8000928:	72fb      	strb	r3, [r7, #11]
 800092a:	4b24      	ldr	r3, [pc, #144]	; (80009bc <ascii_max6675+0x128>)
 800092c:	4413      	add	r3, r2
 800092e:	2230      	movs	r2, #48	; 0x30
 8000930:	709a      	strb	r2, [r3, #2]
 8000932:	e009      	b.n	8000948 <ascii_max6675+0xb4>
				else
					MAX6675.ascii[i--] = ' ';
 8000934:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000938:	b2d3      	uxtb	r3, r2
 800093a:	3b01      	subs	r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	72fb      	strb	r3, [r7, #11]
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <ascii_max6675+0x128>)
 8000942:	4413      	add	r3, r2
 8000944:	2220      	movs	r2, #32
 8000946:	709a      	strb	r2, [r3, #2]
			while (i >= 0)
 8000948:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800094c:	2b00      	cmp	r3, #0
 800094e:	dae2      	bge.n	8000916 <ascii_max6675+0x82>
			}
			MAX6675.ascii[4] = '.';
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <ascii_max6675+0x128>)
 8000952:	222e      	movs	r2, #46	; 0x2e
 8000954:	719a      	strb	r2, [r3, #6]

			if (MAX6675.hot && (MAX6675.temperature < (HOT_TEMP<<2)))
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <ascii_max6675+0x128>)
 8000958:	7a9b      	ldrb	r3, [r3, #10]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d007      	beq.n	800096e <ascii_max6675+0xda>
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <ascii_max6675+0x128>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	2b9f      	cmp	r3, #159	; 0x9f
 8000964:	d803      	bhi.n	800096e <ascii_max6675+0xda>
				MAX6675.hot = false;
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <ascii_max6675+0x128>)
 8000968:	2200      	movs	r2, #0
 800096a:	729a      	strb	r2, [r3, #10]
		{
			for (int i = 0; i < sizeof(MAX6675); i ++)
				MAX6675.ascii[i] = 'x';
			MAX6675.hot = true;
		}
}
 800096c:	e020      	b.n	80009b0 <ascii_max6675+0x11c>
			else if ((!MAX6675.hot) &&
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <ascii_max6675+0x128>)
 8000970:	7a9b      	ldrb	r3, [r3, #10]
 8000972:	f083 0301 	eor.w	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d019      	beq.n	80009b0 <ascii_max6675+0x11c>
					(MAX6675.temperature > ((HOT_TEMP + HOT_HYST)<<2)))
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <ascii_max6675+0x128>)
 800097e:	881b      	ldrh	r3, [r3, #0]
			else if ((!MAX6675.hot) &&
 8000980:	2ba8      	cmp	r3, #168	; 0xa8
 8000982:	d915      	bls.n	80009b0 <ascii_max6675+0x11c>
				MAX6675.hot = true;
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <ascii_max6675+0x128>)
 8000986:	2201      	movs	r2, #1
 8000988:	729a      	strb	r2, [r3, #10]
}
 800098a:	e011      	b.n	80009b0 <ascii_max6675+0x11c>
			for (int i = 0; i < sizeof(MAX6675); i ++)
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	e008      	b.n	80009a4 <ascii_max6675+0x110>
				MAX6675.ascii[i] = 'x';
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <ascii_max6675+0x128>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	3302      	adds	r3, #2
 800099a:	2278      	movs	r2, #120	; 0x78
 800099c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(MAX6675); i ++)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3301      	adds	r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b0b      	cmp	r3, #11
 80009a8:	d9f3      	bls.n	8000992 <ascii_max6675+0xfe>
			MAX6675.hot = true;
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <ascii_max6675+0x128>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	729a      	strb	r2, [r3, #10]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	2000023c 	.word	0x2000023c
 80009c0:	cccccccd 	.word	0xcccccccd

080009c4 <do_usb>:

void do_usb(void)
{
 80009c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c6:	b0bf      	sub	sp, #252	; 0xfc
 80009c8:	af08      	add	r7, sp, #32
	if (!tick)
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <do_usb+0xa0>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	f083 0301 	eor.w	r3, r3, #1
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d140      	bne.n	8000a5a <do_usb+0x96>
		return;
	tick = false; // sync with ticks
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <do_usb+0xa0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]

	uint8_t buf[200];
	uint16_t n = snprintf((char*)buf, 200,
			"Tick: %lu; PV: %u.%02u; SP: %u; PWM: %u; P: %li; I: %li; D: %li\r",
						HAL_GetTick()/1000,
 80009de:	f003 f8c1 	bl	8003b64 <HAL_GetTick>
 80009e2:	4603      	mov	r3, r0
	uint16_t n = snprintf((char*)buf, 200,
 80009e4:	4a20      	ldr	r2, [pc, #128]	; (8000a68 <do_usb+0xa4>)
 80009e6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ea:	099d      	lsrs	r5, r3, #6
						MAX6675.temperature>>2,
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <do_usb+0xa8>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
	uint16_t n = snprintf((char*)buf, 200,
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	461e      	mov	r6, r3
						((MAX6675.temperature)&0b11)*25,
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <do_usb+0xa8>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	f003 0203 	and.w	r2, r3, #3
	uint16_t n = snprintf((char*)buf, 200,
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	009a      	lsls	r2, r3, #2
 8000a06:	4413      	add	r3, r2
 8000a08:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <do_usb+0xac>)
 8000a0a:	8812      	ldrh	r2, [r2, #0]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <do_usb+0xb0>)
 8000a10:	8812      	ldrh	r2, [r2, #0]
 8000a12:	603a      	str	r2, [r7, #0]
 8000a14:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <do_usb+0xb4>)
 8000a16:	6812      	ldr	r2, [r2, #0]
 8000a18:	4917      	ldr	r1, [pc, #92]	; (8000a78 <do_usb+0xb4>)
 8000a1a:	6849      	ldr	r1, [r1, #4]
 8000a1c:	4816      	ldr	r0, [pc, #88]	; (8000a78 <do_usb+0xb4>)
 8000a1e:	6880      	ldr	r0, [r0, #8]
 8000a20:	f107 040c 	add.w	r4, r7, #12
 8000a24:	9006      	str	r0, [sp, #24]
 8000a26:	9105      	str	r1, [sp, #20]
 8000a28:	9204      	str	r2, [sp, #16]
 8000a2a:	6839      	ldr	r1, [r7, #0]
 8000a2c:	9103      	str	r1, [sp, #12]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	9202      	str	r2, [sp, #8]
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	9600      	str	r6, [sp, #0]
 8000a36:	462b      	mov	r3, r5
 8000a38:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <do_usb+0xb8>)
 8000a3a:	21c8      	movs	r1, #200	; 0xc8
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f00c f9b1 	bl	800cda4 <sniprintf>
 8000a42:	4603      	mov	r3, r0
 8000a44:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
						temperature_SP,
						pwm_value,
						PID.P,
						PID.I,
						PID.D);
	CDC_Transmit_FS(buf, n);
 8000a48:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00b fd96 	bl	800c584 <CDC_Transmit_FS>
 8000a58:	e000      	b.n	8000a5c <do_usb+0x98>
		return;
 8000a5a:	bf00      	nop
}
 8000a5c:	37dc      	adds	r7, #220	; 0xdc
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000024c 	.word	0x2000024c
 8000a68:	10624dd3 	.word	0x10624dd3
 8000a6c:	2000023c 	.word	0x2000023c
 8000a70:	2000024a 	.word	0x2000024a
 8000a74:	20000248 	.word	0x20000248
 8000a78:	200005d0 	.word	0x200005d0
 8000a7c:	0800d6c0 	.word	0x0800d6c0

08000a80 <do_peep>:

void do_peep(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	static bool last_peep = false;

	static uint8_t peep_state = 0;

	if (peep.peep & (!last_peep))
 8000a84:	4b78      	ldr	r3, [pc, #480]	; (8000c68 <do_peep+0x1e8>)
 8000a86:	785b      	ldrb	r3, [r3, #1]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b78      	ldr	r3, [pc, #480]	; (8000c6c <do_peep+0x1ec>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	f083 0301 	eor.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d00a      	beq.n	8000ab0 <do_peep+0x30>
	{
		// first time
		peep_note = 0;
 8000a9a:	4b75      	ldr	r3, [pc, #468]	; (8000c70 <do_peep+0x1f0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
		peep_state = 0;
 8000aa0:	4b74      	ldr	r3, [pc, #464]	; (8000c74 <do_peep+0x1f4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
		last_time = HAL_GetTick();
 8000aa6:	f003 f85d 	bl	8003b64 <HAL_GetTick>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4a72      	ldr	r2, [pc, #456]	; (8000c78 <do_peep+0x1f8>)
 8000aae:	6013      	str	r3, [r2, #0]
	}

	if (peep.peep)
 8000ab0:	4b6d      	ldr	r3, [pc, #436]	; (8000c68 <do_peep+0x1e8>)
 8000ab2:	785b      	ldrb	r3, [r3, #1]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f000 80c5 	beq.w	8000c44 <do_peep+0x1c4>
	{
		switch (peep_state) {
 8000aba:	4b6e      	ldr	r3, [pc, #440]	; (8000c74 <do_peep+0x1f4>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	f200 80b8 	bhi.w	8000c34 <do_peep+0x1b4>
 8000ac4:	a201      	add	r2, pc, #4	; (adr r2, 8000acc <do_peep+0x4c>)
 8000ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aca:	bf00      	nop
 8000acc:	08000ae1 	.word	0x08000ae1
 8000ad0:	08000af5 	.word	0x08000af5
 8000ad4:	08000b6f 	.word	0x08000b6f
 8000ad8:	08000bd5 	.word	0x08000bd5
 8000adc:	08000beb 	.word	0x08000beb
		case 0: // init
			peep.stop = false;
 8000ae0:	4b61      	ldr	r3, [pc, #388]	; (8000c68 <do_peep+0x1e8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	709a      	strb	r2, [r3, #2]
			peep_note = 0;
 8000ae6:	4b62      	ldr	r3, [pc, #392]	; (8000c70 <do_peep+0x1f0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
			peep_state = 1;
 8000aec:	4b61      	ldr	r3, [pc, #388]	; (8000c74 <do_peep+0x1f4>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
			break;
 8000af2:	e0b2      	b.n	8000c5a <do_peep+0x1da>
		case 1: // load note and start
			if (melody[peep.melody].melody[peep_note].size) // if something to play, start PWM with DMA
 8000af4:	4b5c      	ldr	r3, [pc, #368]	; (8000c68 <do_peep+0x1e8>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <do_peep+0x1fc>)
 8000afc:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000b00:	4b5b      	ldr	r3, [pc, #364]	; (8000c70 <do_peep+0x1f0>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	460b      	mov	r3, r1
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	440b      	add	r3, r1
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4413      	add	r3, r2
 8000b10:	889b      	ldrh	r3, [r3, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d022      	beq.n	8000b5c <do_peep+0xdc>
			{
				HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2,
						(uint32_t *)melody[peep.melody].melody[peep_note].note,
 8000b16:	4b54      	ldr	r3, [pc, #336]	; (8000c68 <do_peep+0x1e8>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b57      	ldr	r3, [pc, #348]	; (8000c7c <do_peep+0x1fc>)
 8000b1e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000b22:	4b53      	ldr	r3, [pc, #332]	; (8000c70 <do_peep+0x1f0>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	460b      	mov	r3, r1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	440b      	add	r3, r1
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	6819      	ldr	r1, [r3, #0]
						melody[peep.melody].melody[peep_note].size);
 8000b34:	4b4c      	ldr	r3, [pc, #304]	; (8000c68 <do_peep+0x1e8>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b50      	ldr	r3, [pc, #320]	; (8000c7c <do_peep+0x1fc>)
 8000b3c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000b40:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <do_peep+0x1f0>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	4603      	mov	r3, r0
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	4403      	add	r3, r0
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
				HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2,
 8000b50:	889b      	ldrh	r3, [r3, #4]
 8000b52:	460a      	mov	r2, r1
 8000b54:	2104      	movs	r1, #4
 8000b56:	484a      	ldr	r0, [pc, #296]	; (8000c80 <do_peep+0x200>)
 8000b58:	f006 fbde 	bl	8007318 <HAL_TIM_PWM_Start_DMA>
			}
			last_time = HAL_GetTick();
 8000b5c:	f003 f802 	bl	8003b64 <HAL_GetTick>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a45      	ldr	r2, [pc, #276]	; (8000c78 <do_peep+0x1f8>)
 8000b64:	6013      	str	r3, [r2, #0]
			peep_state = 2;
 8000b66:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <do_peep+0x1f4>)
 8000b68:	2202      	movs	r2, #2
 8000b6a:	701a      	strb	r2, [r3, #0]
			break;
 8000b6c:	e075      	b.n	8000c5a <do_peep+0x1da>
		case 2: // wait note length
			if (HAL_GetTick() - last_time > melody[peep.melody].melody[peep_note].time)
 8000b6e:	f002 fff9 	bl	8003b64 <HAL_GetTick>
 8000b72:	4602      	mov	r2, r0
 8000b74:	4b40      	ldr	r3, [pc, #256]	; (8000c78 <do_peep+0x1f8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1ad2      	subs	r2, r2, r3
 8000b7a:	4b3b      	ldr	r3, [pc, #236]	; (8000c68 <do_peep+0x1e8>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4b3e      	ldr	r3, [pc, #248]	; (8000c7c <do_peep+0x1fc>)
 8000b82:	f853 1031 	ldr.w	r1, [r3, r1, lsl #3]
 8000b86:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <do_peep+0x1f0>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4403      	add	r3, r0
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	440b      	add	r3, r1
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d95b      	bls.n	8000c54 <do_peep+0x1d4>
			{
				if (melody[peep.melody].melody[peep_note].size == 0)
 8000b9c:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <do_peep+0x1e8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <do_peep+0x1fc>)
 8000ba4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000ba8:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <do_peep+0x1f0>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	460b      	mov	r3, r1
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	440b      	add	r3, r1
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	889b      	ldrh	r3, [r3, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d103      	bne.n	8000bc6 <do_peep+0x146>
				{
					// we need only pause, PWM & DMA already disabled
					peep_state = 4;
 8000bbe:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <do_peep+0x1f4>)
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	701a      	strb	r2, [r3, #0]
				{
					peep.stop = true;
					peep_state = 3;
				}
			}
			break;
 8000bc4:	e046      	b.n	8000c54 <do_peep+0x1d4>
					peep.stop = true;
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <do_peep+0x1e8>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	709a      	strb	r2, [r3, #2]
					peep_state = 3;
 8000bcc:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <do_peep+0x1f4>)
 8000bce:	2203      	movs	r2, #3
 8000bd0:	701a      	strb	r2, [r3, #0]
			break;
 8000bd2:	e03f      	b.n	8000c54 <do_peep+0x1d4>
		case 3: // wait PWM stop
			if (!peep.stop)
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <do_peep+0x1e8>)
 8000bd6:	789b      	ldrb	r3, [r3, #2]
 8000bd8:	f083 0301 	eor.w	r3, r3, #1
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d03a      	beq.n	8000c58 <do_peep+0x1d8>
				peep_state = 4;
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <do_peep+0x1f4>)
 8000be4:	2204      	movs	r2, #4
 8000be6:	701a      	strb	r2, [r3, #0]
			break;
 8000be8:	e036      	b.n	8000c58 <do_peep+0x1d8>
		case 4: // check if next note to play
			if (++peep_note < melody[peep.melody].size)
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <do_peep+0x1f0>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <do_peep+0x1f0>)
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <do_peep+0x1f0>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <do_peep+0x1e8>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	491e      	ldr	r1, [pc, #120]	; (8000c7c <do_peep+0x1fc>)
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	440b      	add	r3, r1
 8000c06:	889b      	ldrh	r3, [r3, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d203      	bcs.n	8000c14 <do_peep+0x194>
			{
				peep_state = 1; // play next note
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <do_peep+0x1f4>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
				{
					// we are finished, start again
					peep_state = 0;
				}
			}
			break;
 8000c12:	e022      	b.n	8000c5a <do_peep+0x1da>
				if (melody[peep.melody].play_once)
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <do_peep+0x1e8>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <do_peep+0x1fc>)
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	799b      	ldrb	r3, [r3, #6]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d003      	beq.n	8000c2c <do_peep+0x1ac>
					peep.peep = false; // so, we are finished
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <do_peep+0x1e8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	705a      	strb	r2, [r3, #1]
			break;
 8000c2a:	e016      	b.n	8000c5a <do_peep+0x1da>
					peep_state = 0;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <do_peep+0x1f4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
			break;
 8000c32:	e012      	b.n	8000c5a <do_peep+0x1da>
		default:
			global_error |= errFATAL;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <do_peep+0x204>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <do_peep+0x204>)
 8000c40:	701a      	strb	r2, [r3, #0]
			break;
 8000c42:	e00a      	b.n	8000c5a <do_peep+0x1da>
		}
	}
	else if (last_peep)
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <do_peep+0x1ec>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <do_peep+0x1da>
	{
		peep.stop = true;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <do_peep+0x1e8>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	709a      	strb	r2, [r3, #2]
 8000c52:	e002      	b.n	8000c5a <do_peep+0x1da>
			break;
 8000c54:	bf00      	nop
 8000c56:	e000      	b.n	8000c5a <do_peep+0x1da>
			break;
 8000c58:	bf00      	nop
	}
	last_peep = peep.peep;
 8000c5a:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <do_peep+0x1e8>)
 8000c5c:	785a      	ldrb	r2, [r3, #1]
 8000c5e:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <do_peep+0x1ec>)
 8000c60:	701a      	strb	r2, [r3, #0]
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000001c 	.word	0x2000001c
 8000c6c:	20000260 	.word	0x20000260
 8000c70:	20000261 	.word	0x20000261
 8000c74:	20000262 	.word	0x20000262
 8000c78:	20000264 	.word	0x20000264
 8000c7c:	0800f1d0 	.word	0x0800f1d0
 8000c80:	20000588 	.word	0x20000588
 8000c84:	20000234 	.word	0x20000234

08000c88 <lcd_mini_clear.8640>:

	/**
	 * clears left part of the display
	 */
	void lcd_mini_clear(LCD_HandleTypeDef * lcd)
	{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	f8c7 c000 	str.w	ip, [r7]
		lcd_mode(lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 8000c94:	2300      	movs	r3, #0
 8000c96:	2200      	movs	r2, #0
 8000c98:	2101      	movs	r1, #1
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fae6 	bl	800026c <lcd_mode>
		lcd_set_xy(lcd, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fb43 	bl	8000330 <lcd_set_xy>
		lcd_string(lcd, "            ");
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <lcd_mini_clear.8640+0x44>)
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fb28 	bl	8000302 <lcd_string>
		lcd_set_xy(lcd, 0, 1);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fb3a 	bl	8000330 <lcd_set_xy>
		lcd_string(lcd, "             ");
 8000cbc:	4904      	ldr	r1, [pc, #16]	; (8000cd0 <lcd_mini_clear.8640+0x48>)
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fb1f 	bl	8000302 <lcd_string>
	}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	0800d704 	.word	0x0800d704
 8000cd0:	0800d714 	.word	0x0800d714

08000cd4 <do_interface>:
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
void do_interface(void)
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	607b      	str	r3, [r7, #4]
	if (first_time)
 8000ce0:	4ba7      	ldr	r3, [pc, #668]	; (8000f80 <do_interface+0x2ac>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d023      	beq.n	8000d30 <do_interface+0x5c>
		max_steps = sizeof(steps_default)/sizeof(steps_default[0]);
 8000ce8:	4ba6      	ldr	r3, [pc, #664]	; (8000f84 <do_interface+0x2b0>)
 8000cea:	2202      	movs	r2, #2
 8000cec:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < max_steps; i ++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	e014      	b.n	8000d1e <do_interface+0x4a>
			steps[i].temp = steps_default[i].temp;
 8000cf4:	4aa4      	ldr	r2, [pc, #656]	; (8000f88 <do_interface+0x2b4>)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000cfc:	49a3      	ldr	r1, [pc, #652]	; (8000f8c <do_interface+0x2b8>)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			steps[i].time = steps_default[i].time;
 8000d04:	4aa0      	ldr	r2, [pc, #640]	; (8000f88 <do_interface+0x2b4>)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	4413      	add	r3, r2
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	499f      	ldr	r1, [pc, #636]	; (8000f8c <do_interface+0x2b8>)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	440b      	add	r3, r1
 8000d16:	605a      	str	r2, [r3, #4]
		for (int i = 0; i < max_steps; i ++)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b99      	ldr	r3, [pc, #612]	; (8000f84 <do_interface+0x2b0>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4293      	cmp	r3, r2
 8000d28:	dbe4      	blt.n	8000cf4 <do_interface+0x20>
		first_time = false;
 8000d2a:	4b95      	ldr	r3, [pc, #596]	; (8000f80 <do_interface+0x2ac>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
	/**
	 * this happens every 100 ms
	 */
	static uint32_t last_time = 0;
	static bool last_button = false;
	if (HAL_GetTick() - last_time < 100)
 8000d30:	f002 ff18 	bl	8003b64 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	4b96      	ldr	r3, [pc, #600]	; (8000f90 <do_interface+0x2bc>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b63      	cmp	r3, #99	; 0x63
 8000d3e:	f240 8366 	bls.w	800140e <do_interface+0x73a>
		return;
	last_time = HAL_GetTick();
 8000d42:	f002 ff0f 	bl	8003b64 <HAL_GetTick>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4a91      	ldr	r2, [pc, #580]	; (8000f90 <do_interface+0x2bc>)
 8000d4a:	6013      	str	r3, [r2, #0]

	/*** Right always visible section ***/

	int32_t dT=((int32_t)temperature_SP)-((int32_t)(MAX6675.temperature>>2));
 8000d4c:	4b91      	ldr	r3, [pc, #580]	; (8000f94 <do_interface+0x2c0>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b91      	ldr	r3, [pc, #580]	; (8000f98 <do_interface+0x2c4>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	60bb      	str	r3, [r7, #8]

	lcd_set_xy(&lcd, 12, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	210c      	movs	r1, #12
 8000d62:	488e      	ldr	r0, [pc, #568]	; (8000f9c <do_interface+0x2c8>)
 8000d64:	f7ff fae4 	bl	8000330 <lcd_set_xy>
	if (MAX6675.data_valid)
 8000d68:	4b8b      	ldr	r3, [pc, #556]	; (8000f98 <do_interface+0x2c4>)
 8000d6a:	7a5b      	ldrb	r3, [r3, #9]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00a      	beq.n	8000d86 <do_interface+0xb2>
	{
		lcd_out(&lcd, MAX6675.ascii+1, 3);
 8000d70:	4b8b      	ldr	r3, [pc, #556]	; (8000fa0 <do_interface+0x2cc>)
 8000d72:	2203      	movs	r2, #3
 8000d74:	4619      	mov	r1, r3
 8000d76:	4889      	ldr	r0, [pc, #548]	; (8000f9c <do_interface+0x2c8>)
 8000d78:	f7ff faa5 	bl	80002c6 <lcd_out>
		lcd_write_data(&lcd, scGRAD);
 8000d7c:	21df      	movs	r1, #223	; 0xdf
 8000d7e:	4887      	ldr	r0, [pc, #540]	; (8000f9c <do_interface+0x2c8>)
 8000d80:	f7ff fb5c 	bl	800043c <lcd_write_data>
 8000d84:	e00c      	b.n	8000da0 <do_interface+0xcc>
	}
	else
	{
		lcd_string(&lcd, "___");
 8000d86:	4987      	ldr	r1, [pc, #540]	; (8000fa4 <do_interface+0x2d0>)
 8000d88:	4884      	ldr	r0, [pc, #528]	; (8000f9c <do_interface+0x2c8>)
 8000d8a:	f7ff faba 	bl	8000302 <lcd_string>
		temperature_SP = 0;
 8000d8e:	4b81      	ldr	r3, [pc, #516]	; (8000f94 <do_interface+0x2c0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	801a      	strh	r2, [r3, #0]
		global_error = errMAX6675_invalid;
 8000d94:	4b84      	ldr	r3, [pc, #528]	; (8000fa8 <do_interface+0x2d4>)
 8000d96:	2210      	movs	r2, #16
 8000d98:	701a      	strb	r2, [r3, #0]
		ui_state = uiMALFUNCTION;
 8000d9a:	4b84      	ldr	r3, [pc, #528]	; (8000fac <do_interface+0x2d8>)
 8000d9c:	2209      	movs	r2, #9
 8000d9e:	701a      	strb	r2, [r3, #0]
	}

	lcd_set_xy(&lcd, 13, 1);
 8000da0:	2201      	movs	r2, #1
 8000da2:	210d      	movs	r1, #13
 8000da4:	487d      	ldr	r0, [pc, #500]	; (8000f9c <do_interface+0x2c8>)
 8000da6:	f7ff fac3 	bl	8000330 <lcd_set_xy>
	// first symbol
	if (encoder.pressed)
 8000daa:	4b81      	ldr	r3, [pc, #516]	; (8000fb0 <do_interface+0x2dc>)
 8000dac:	789b      	ldrb	r3, [r3, #2]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d004      	beq.n	8000dbc <do_interface+0xe8>
		lcd_write_data(&lcd, scDOT);
 8000db2:	21a5      	movs	r1, #165	; 0xa5
 8000db4:	4879      	ldr	r0, [pc, #484]	; (8000f9c <do_interface+0x2c8>)
 8000db6:	f7ff fb41 	bl	800043c <lcd_write_data>
 8000dba:	e003      	b.n	8000dc4 <do_interface+0xf0>
	else
		lcd_write_data(&lcd, ' ');
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	4877      	ldr	r0, [pc, #476]	; (8000f9c <do_interface+0x2c8>)
 8000dc0:	f7ff fb3c 	bl	800043c <lcd_write_data>
	// second symbol
	if (!MAX6675.data_valid)
 8000dc4:	4b74      	ldr	r3, [pc, #464]	; (8000f98 <do_interface+0x2c4>)
 8000dc6:	7a5b      	ldrb	r3, [r3, #9]
 8000dc8:	f083 0301 	eor.w	r3, r3, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <do_interface+0x108>
		lcd_write_data(&lcd, ' ');
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	4871      	ldr	r0, [pc, #452]	; (8000f9c <do_interface+0x2c8>)
 8000dd6:	f7ff fb31 	bl	800043c <lcd_write_data>
 8000dda:	e051      	b.n	8000e80 <do_interface+0x1ac>
	else
	{
		if ((temperature_SP == 0) && (!MAX6675.hot))
 8000ddc:	4b6d      	ldr	r3, [pc, #436]	; (8000f94 <do_interface+0x2c0>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10b      	bne.n	8000dfc <do_interface+0x128>
 8000de4:	4b6c      	ldr	r3, [pc, #432]	; (8000f98 <do_interface+0x2c4>)
 8000de6:	7a9b      	ldrb	r3, [r3, #10]
 8000de8:	f083 0301 	eor.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d004      	beq.n	8000dfc <do_interface+0x128>
			lcd_write_data(&lcd, '-');
 8000df2:	212d      	movs	r1, #45	; 0x2d
 8000df4:	4869      	ldr	r0, [pc, #420]	; (8000f9c <do_interface+0x2c8>)
 8000df6:	f7ff fb21 	bl	800043c <lcd_write_data>
 8000dfa:	e041      	b.n	8000e80 <do_interface+0x1ac>
		else if (((pwm_value + 9)/10)*3 > ticktack)
 8000dfc:	4b6d      	ldr	r3, [pc, #436]	; (8000fb4 <do_interface+0x2e0>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	3309      	adds	r3, #9
 8000e02:	4a6d      	ldr	r2, [pc, #436]	; (8000fb8 <do_interface+0x2e4>)
 8000e04:	fb82 1203 	smull	r1, r2, r2, r3
 8000e08:	1092      	asrs	r2, r2, #2
 8000e0a:	17db      	asrs	r3, r3, #31
 8000e0c:	1ad2      	subs	r2, r2, r3
 8000e0e:	4613      	mov	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	4a69      	ldr	r2, [pc, #420]	; (8000fbc <do_interface+0x2e8>)
 8000e16:	7812      	ldrb	r2, [r2, #0]
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	dd10      	ble.n	8000e3e <do_interface+0x16a>
		{
			if ((STEP_TEMP > dT) && (dT > -STEP_TEMP))
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	dc08      	bgt.n	8000e34 <do_interface+0x160>
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	f113 0f04 	cmn.w	r3, #4
 8000e28:	db04      	blt.n	8000e34 <do_interface+0x160>
				lcd_write_data(&lcd, ccUPEQ);
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	485b      	ldr	r0, [pc, #364]	; (8000f9c <do_interface+0x2c8>)
 8000e2e:	f7ff fb05 	bl	800043c <lcd_write_data>
 8000e32:	e025      	b.n	8000e80 <do_interface+0x1ac>
			else
				lcd_write_data(&lcd, ccUP);
 8000e34:	2103      	movs	r1, #3
 8000e36:	4859      	ldr	r0, [pc, #356]	; (8000f9c <do_interface+0x2c8>)
 8000e38:	f7ff fb00 	bl	800043c <lcd_write_data>
 8000e3c:	e020      	b.n	8000e80 <do_interface+0x1ac>
		}
		else if (dT >= STEP_TEMP)
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	dd04      	ble.n	8000e4e <do_interface+0x17a>
			lcd_write_data(&lcd, '^');
 8000e44:	215e      	movs	r1, #94	; 0x5e
 8000e46:	4855      	ldr	r0, [pc, #340]	; (8000f9c <do_interface+0x2c8>)
 8000e48:	f7ff faf8 	bl	800043c <lcd_write_data>
 8000e4c:	e018      	b.n	8000e80 <do_interface+0x1ac>
		else if ((STEP_TEMP > dT) && (dT > -STEP_TEMP))
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	dc08      	bgt.n	8000e66 <do_interface+0x192>
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	f113 0f04 	cmn.w	r3, #4
 8000e5a:	db04      	blt.n	8000e66 <do_interface+0x192>
		{
			lcd_write_data(&lcd, '=');
 8000e5c:	213d      	movs	r1, #61	; 0x3d
 8000e5e:	484f      	ldr	r0, [pc, #316]	; (8000f9c <do_interface+0x2c8>)
 8000e60:	f7ff faec 	bl	800043c <lcd_write_data>
 8000e64:	e00c      	b.n	8000e80 <do_interface+0x1ac>
		}
		else if (dT <= -STEP_TEMP)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	f113 0f04 	cmn.w	r3, #4
 8000e6c:	da04      	bge.n	8000e78 <do_interface+0x1a4>
			lcd_write_data(&lcd, ccDOWN);
 8000e6e:	2101      	movs	r1, #1
 8000e70:	484a      	ldr	r0, [pc, #296]	; (8000f9c <do_interface+0x2c8>)
 8000e72:	f7ff fae3 	bl	800043c <lcd_write_data>
 8000e76:	e003      	b.n	8000e80 <do_interface+0x1ac>
		else
			lcd_write_data(&lcd, '?'); // should never happen
 8000e78:	213f      	movs	r1, #63	; 0x3f
 8000e7a:	4848      	ldr	r0, [pc, #288]	; (8000f9c <do_interface+0x2c8>)
 8000e7c:	f7ff fade 	bl	800043c <lcd_write_data>

	}
	// last symbol
	if ((MAX6675.hot) || (!MAX6675.data_valid))
 8000e80:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <do_interface+0x2c4>)
 8000e82:	7a9b      	ldrb	r3, [r3, #10]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d106      	bne.n	8000e96 <do_interface+0x1c2>
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <do_interface+0x2c4>)
 8000e8a:	7a5b      	ldrb	r3, [r3, #9]
 8000e8c:	f083 0301 	eor.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d013      	beq.n	8000ebe <do_interface+0x1ea>
	{
		HAL_GPIO_WritePin(HOT_LEDS_GPIO_Port, HOT_LEDS_Pin, 1);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9c:	4848      	ldr	r0, [pc, #288]	; (8000fc0 <do_interface+0x2ec>)
 8000e9e:	f003 fb9c 	bl	80045da <HAL_GPIO_WritePin>
		if (ticktack < 5)
 8000ea2:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <do_interface+0x2e8>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d804      	bhi.n	8000eb4 <do_interface+0x1e0>
			lcd_write_data(&lcd, ccHOT);
 8000eaa:	2104      	movs	r1, #4
 8000eac:	483b      	ldr	r0, [pc, #236]	; (8000f9c <do_interface+0x2c8>)
 8000eae:	f7ff fac5 	bl	800043c <lcd_write_data>
		if (ticktack < 5)
 8000eb2:	e017      	b.n	8000ee4 <do_interface+0x210>
		else
			lcd_write_data(&lcd, ccHOTmirror);
 8000eb4:	2105      	movs	r1, #5
 8000eb6:	4839      	ldr	r0, [pc, #228]	; (8000f9c <do_interface+0x2c8>)
 8000eb8:	f7ff fac0 	bl	800043c <lcd_write_data>
		if (ticktack < 5)
 8000ebc:	e012      	b.n	8000ee4 <do_interface+0x210>
	}
	else
	{
		HAL_GPIO_WritePin(HOT_LEDS_GPIO_Port, HOT_LEDS_Pin, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec4:	483e      	ldr	r0, [pc, #248]	; (8000fc0 <do_interface+0x2ec>)
 8000ec6:	f003 fb88 	bl	80045da <HAL_GPIO_WritePin>
		if (ticktack < 5)
 8000eca:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <do_interface+0x2e8>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d804      	bhi.n	8000edc <do_interface+0x208>
			lcd_write_data(&lcd, ccDOT);
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	4831      	ldr	r0, [pc, #196]	; (8000f9c <do_interface+0x2c8>)
 8000ed6:	f7ff fab1 	bl	800043c <lcd_write_data>
 8000eda:	e003      	b.n	8000ee4 <do_interface+0x210>
		else
			lcd_write_data(&lcd, ' ');
 8000edc:	2120      	movs	r1, #32
 8000ede:	482f      	ldr	r0, [pc, #188]	; (8000f9c <do_interface+0x2c8>)
 8000ee0:	f7ff faac 	bl	800043c <lcd_write_data>
	}
	if (++ticktack > 9)
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <do_interface+0x2e8>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <do_interface+0x2e8>)
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <do_interface+0x2e8>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b09      	cmp	r3, #9
 8000ef6:	d902      	bls.n	8000efe <do_interface+0x22a>
		ticktack = 0;
 8000ef8:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <do_interface+0x2e8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]

	/* Check errors --------------------------------------------*/

	if (MAX6675.temperature > ((MAX_TEMP + 2*STEP_TEMP)<<2))
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <do_interface+0x2c4>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8000f06:	d909      	bls.n	8000f1c <do_interface+0x248>
	{
		temperature_SP = 0;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <do_interface+0x2c0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	801a      	strh	r2, [r3, #0]
		global_error |= errTEMP_PV;
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <do_interface+0x2d4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <do_interface+0x2d4>)
 8000f1a:	701a      	strb	r2, [r3, #0]
	}

	if (temperature_SP > MAX_TEMP)
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <do_interface+0x2c0>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000f24:	d909      	bls.n	8000f3a <do_interface+0x266>
	{
		temperature_SP = 0;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <do_interface+0x2c0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	801a      	strh	r2, [r3, #0]
		global_error |= errTEMP_SP;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <do_interface+0x2d4>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <do_interface+0x2d4>)
 8000f38:	701a      	strb	r2, [r3, #0]
	static uint32_t last_SP = 0xffff; // not realistic value, to be immediately replaced
	static uint32_t time_dT = 0;
	static bool check_heater = false;
	static uint32_t heater_timeout = 20;

	if (temperature_SP != last_SP) // user changed T
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <do_interface+0x2c0>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <do_interface+0x2f0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d047      	beq.n	8000fd8 <do_interface+0x304>
	{
		if (dT >= 20) // T diff is more than 20 grad
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b13      	cmp	r3, #19
 8000f4c:	dd14      	ble.n	8000f78 <do_interface+0x2a4>
		{
			check_heater = true;
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <do_interface+0x2f4>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
			last_dT = dT; // save value
 8000f54:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <do_interface+0x2f8>)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	6013      	str	r3, [r2, #0]
			time_dT = HAL_GetTick(); // start timer
 8000f5a:	f002 fe03 	bl	8003b64 <HAL_GetTick>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <do_interface+0x2fc>)
 8000f62:	6013      	str	r3, [r2, #0]
			heater_timeout = 120;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <do_interface+0x300>)
 8000f66:	2278      	movs	r2, #120	; 0x78
 8000f68:	601a      	str	r2, [r3, #0]
			if (dT >= 50)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b31      	cmp	r3, #49	; 0x31
 8000f6e:	dd56      	ble.n	800101e <do_interface+0x34a>
				heater_timeout = 20; // if diff 50 grad, react faster
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <do_interface+0x300>)
 8000f72:	2214      	movs	r2, #20
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e052      	b.n	800101e <do_interface+0x34a>
		}
		else
			check_heater = false;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <do_interface+0x2f4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e04e      	b.n	800101e <do_interface+0x34a>
 8000f80:	2000001f 	.word	0x2000001f
 8000f84:	20000020 	.word	0x20000020
 8000f88:	0800f1f0 	.word	0x0800f1f0
 8000f8c:	20000268 	.word	0x20000268
 8000f90:	200002b0 	.word	0x200002b0
 8000f94:	2000024a 	.word	0x2000024a
 8000f98:	2000023c 	.word	0x2000023c
 8000f9c:	20000570 	.word	0x20000570
 8000fa0:	2000023f 	.word	0x2000023f
 8000fa4:	0800d724 	.word	0x0800d724
 8000fa8:	20000234 	.word	0x20000234
 8000fac:	2000024d 	.word	0x2000024d
 8000fb0:	20000238 	.word	0x20000238
 8000fb4:	20000248 	.word	0x20000248
 8000fb8:	66666667 	.word	0x66666667
 8000fbc:	20000235 	.word	0x20000235
 8000fc0:	40011000 	.word	0x40011000
 8000fc4:	20000024 	.word	0x20000024
 8000fc8:	200002b4 	.word	0x200002b4
 8000fcc:	200002b8 	.word	0x200002b8
 8000fd0:	200002bc 	.word	0x200002bc
 8000fd4:	20000028 	.word	0x20000028
	}
	else if (check_heater)
 8000fd8:	4bb0      	ldr	r3, [pc, #704]	; (800129c <do_interface+0x5c8>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d01e      	beq.n	800101e <do_interface+0x34a>
	{
		if (last_dT - dT > 5) // temperature changed more than 5 grad, ok!
 8000fe0:	4baf      	ldr	r3, [pc, #700]	; (80012a0 <do_interface+0x5cc>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b05      	cmp	r3, #5
 8000fea:	dd03      	ble.n	8000ff4 <do_interface+0x320>
			check_heater = false;
 8000fec:	4bab      	ldr	r3, [pc, #684]	; (800129c <do_interface+0x5c8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e014      	b.n	800101e <do_interface+0x34a>
		else if (HAL_GetTick() - time_dT > heater_timeout*1024) // timeout, go in error
 8000ff4:	f002 fdb6 	bl	8003b64 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	4baa      	ldr	r3, [pc, #680]	; (80012a4 <do_interface+0x5d0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1ad2      	subs	r2, r2, r3
 8001000:	4ba9      	ldr	r3, [pc, #676]	; (80012a8 <do_interface+0x5d4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	029b      	lsls	r3, r3, #10
 8001006:	429a      	cmp	r2, r3
 8001008:	d909      	bls.n	800101e <do_interface+0x34a>
		{
			check_heater = false;
 800100a:	4ba4      	ldr	r3, [pc, #656]	; (800129c <do_interface+0x5c8>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
			global_error |= errHEATER;
 8001010:	4ba6      	ldr	r3, [pc, #664]	; (80012ac <do_interface+0x5d8>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4ba4      	ldr	r3, [pc, #656]	; (80012ac <do_interface+0x5d8>)
 800101c:	701a      	strb	r2, [r3, #0]
		}
	}
	last_SP = temperature_SP;
 800101e:	4ba4      	ldr	r3, [pc, #656]	; (80012b0 <do_interface+0x5dc>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	4ba3      	ldr	r3, [pc, #652]	; (80012b4 <do_interface+0x5e0>)
 8001026:	601a      	str	r2, [r3, #0]

	/************************************/


	if (encoder.long_press)
 8001028:	4ba3      	ldr	r3, [pc, #652]	; (80012b8 <do_interface+0x5e4>)
 800102a:	78db      	ldrb	r3, [r3, #3]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00b      	beq.n	8001048 <do_interface+0x374>
	{
		ui_state = uiLONG_PRESS;
 8001030:	4ba2      	ldr	r3, [pc, #648]	; (80012bc <do_interface+0x5e8>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
		temperature_SP = 0;
 8001036:	4b9e      	ldr	r3, [pc, #632]	; (80012b0 <do_interface+0x5dc>)
 8001038:	2200      	movs	r2, #0
 800103a:	801a      	strh	r2, [r3, #0]
		global_error = errOK;
 800103c:	4b9b      	ldr	r3, [pc, #620]	; (80012ac <do_interface+0x5d8>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
		peep.peep = false;
 8001042:	4b9f      	ldr	r3, [pc, #636]	; (80012c0 <do_interface+0x5ec>)
 8001044:	2200      	movs	r2, #0
 8001046:	705a      	strb	r2, [r3, #1]
	}

	if (global_error)
 8001048:	4b98      	ldr	r3, [pc, #608]	; (80012ac <do_interface+0x5d8>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <do_interface+0x38e>
	{
		ui_state = uiMALFUNCTION;
 8001050:	4b9a      	ldr	r3, [pc, #616]	; (80012bc <do_interface+0x5e8>)
 8001052:	2209      	movs	r2, #9
 8001054:	701a      	strb	r2, [r3, #0]
		peep.melody = melodyLOSE_LIFE;
 8001056:	4b9a      	ldr	r3, [pc, #616]	; (80012c0 <do_interface+0x5ec>)
 8001058:	2202      	movs	r2, #2
 800105a:	701a      	strb	r2, [r3, #0]
		peep.peep = true;
 800105c:	4b98      	ldr	r3, [pc, #608]	; (80012c0 <do_interface+0x5ec>)
 800105e:	2201      	movs	r2, #1
 8001060:	705a      	strb	r2, [r3, #1]
	}

	switch(ui_state)
 8001062:	4b96      	ldr	r3, [pc, #600]	; (80012bc <do_interface+0x5e8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b09      	cmp	r3, #9
 8001068:	f200 81be 	bhi.w	80013e8 <do_interface+0x714>
 800106c:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <do_interface+0x3a0>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	0800109d 	.word	0x0800109d
 8001078:	0800111b 	.word	0x0800111b
 800107c:	08001163 	.word	0x08001163
 8001080:	080011b7 	.word	0x080011b7
 8001084:	0800122b 	.word	0x0800122b
 8001088:	08001259 	.word	0x08001259
 800108c:	08001265 	.word	0x08001265
 8001090:	080012f5 	.word	0x080012f5
 8001094:	08001321 	.word	0x08001321
 8001098:	0800132d 	.word	0x0800132d
	{
	case uiSTART:
		lcd_set_xy(&lcd, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	4888      	ldr	r0, [pc, #544]	; (80012c4 <do_interface+0x5f0>)
 80010a2:	f7ff f945 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "Long press  ");
 80010a6:	4988      	ldr	r1, [pc, #544]	; (80012c8 <do_interface+0x5f4>)
 80010a8:	4886      	ldr	r0, [pc, #536]	; (80012c4 <do_interface+0x5f0>)
 80010aa:	f7ff f92a 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2100      	movs	r1, #0
 80010b2:	4884      	ldr	r0, [pc, #528]	; (80012c4 <do_interface+0x5f0>)
 80010b4:	f7ff f93c 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "T=0 & reset ");
 80010b8:	4984      	ldr	r1, [pc, #528]	; (80012cc <do_interface+0x5f8>)
 80010ba:	4882      	ldr	r0, [pc, #520]	; (80012c4 <do_interface+0x5f0>)
 80010bc:	f7ff f921 	bl	8000302 <lcd_string>
		lcd_write_data(&lcd, ccENTER);
 80010c0:	2100      	movs	r1, #0
 80010c2:	4880      	ldr	r0, [pc, #512]	; (80012c4 <do_interface+0x5f0>)
 80010c4:	f7ff f9ba 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 12, 1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	210c      	movs	r1, #12
 80010cc:	487d      	ldr	r0, [pc, #500]	; (80012c4 <do_interface+0x5f0>)
 80010ce:	f7ff f92f 	bl	8000330 <lcd_set_xy>
		lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 80010d2:	4b7f      	ldr	r3, [pc, #508]	; (80012d0 <do_interface+0x5fc>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf94      	ite	ls
 80010da:	2301      	movls	r3, #1
 80010dc:	2300      	movhi	r3, #0
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	2300      	movs	r3, #0
 80010e4:	2101      	movs	r1, #1
 80010e6:	4877      	ldr	r0, [pc, #476]	; (80012c4 <do_interface+0x5f0>)
 80010e8:	f7ff f8c0 	bl	800026c <lcd_mode>
		if (!encoder.pressed && last_button)
 80010ec:	4b72      	ldr	r3, [pc, #456]	; (80012b8 <do_interface+0x5e4>)
 80010ee:	789b      	ldrb	r3, [r3, #2]
 80010f0:	f083 0301 	eor.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 817d 	beq.w	80013f6 <do_interface+0x722>
 80010fc:	4b75      	ldr	r3, [pc, #468]	; (80012d4 <do_interface+0x600>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 8178 	beq.w	80013f6 <do_interface+0x722>
		{
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 8001106:	2300      	movs	r3, #0
 8001108:	2200      	movs	r2, #0
 800110a:	2101      	movs	r1, #1
 800110c:	486d      	ldr	r0, [pc, #436]	; (80012c4 <do_interface+0x5f0>)
 800110e:	f7ff f8ad 	bl	800026c <lcd_mode>
			ui_state = uiMENUenter;
 8001112:	4b6a      	ldr	r3, [pc, #424]	; (80012bc <do_interface+0x5e8>)
 8001114:	2202      	movs	r2, #2
 8001116:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001118:	e16d      	b.n	80013f6 <do_interface+0x722>
	case uiLONG_PRESS:
		lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 800111a:	2300      	movs	r3, #0
 800111c:	2200      	movs	r2, #0
 800111e:	2101      	movs	r1, #1
 8001120:	4868      	ldr	r0, [pc, #416]	; (80012c4 <do_interface+0x5f0>)
 8001122:	f7ff f8a3 	bl	800026c <lcd_mode>
		lcd_set_xy(&lcd, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	4866      	ldr	r0, [pc, #408]	; (80012c4 <do_interface+0x5f0>)
 800112c:	f7ff f900 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "T set to 0  ");
 8001130:	4969      	ldr	r1, [pc, #420]	; (80012d8 <do_interface+0x604>)
 8001132:	4864      	ldr	r0, [pc, #400]	; (80012c4 <do_interface+0x5f0>)
 8001134:	f7ff f8e5 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 8001138:	2201      	movs	r2, #1
 800113a:	2100      	movs	r1, #0
 800113c:	4861      	ldr	r0, [pc, #388]	; (80012c4 <do_interface+0x5f0>)
 800113e:	f7ff f8f7 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "err. cleared ");
 8001142:	4966      	ldr	r1, [pc, #408]	; (80012dc <do_interface+0x608>)
 8001144:	485f      	ldr	r0, [pc, #380]	; (80012c4 <do_interface+0x5f0>)
 8001146:	f7ff f8dc 	bl	8000302 <lcd_string>
		if (!encoder.pressed)
 800114a:	4b5b      	ldr	r3, [pc, #364]	; (80012b8 <do_interface+0x5e4>)
 800114c:	789b      	ldrb	r3, [r3, #2]
 800114e:	f083 0301 	eor.w	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 8150 	beq.w	80013fa <do_interface+0x726>
			ui_state = uiMENUenter;
 800115a:	4b58      	ldr	r3, [pc, #352]	; (80012bc <do_interface+0x5e8>)
 800115c:	2202      	movs	r2, #2
 800115e:	701a      	strb	r2, [r3, #0]
		break;
 8001160:	e14b      	b.n	80013fa <do_interface+0x726>
	case uiMENUenter:
		lcd_mini_clear(&lcd);
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	469c      	mov	ip, r3
 8001166:	4857      	ldr	r0, [pc, #348]	; (80012c4 <do_interface+0x5f0>)
 8001168:	f7ff fd8e 	bl	8000c88 <lcd_mini_clear.8640>
		lcd_set_xy(&lcd, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	4854      	ldr	r0, [pc, #336]	; (80012c4 <do_interface+0x5f0>)
 8001172:	f7ff f8dd 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " Profile");
 8001176:	495a      	ldr	r1, [pc, #360]	; (80012e0 <do_interface+0x60c>)
 8001178:	4852      	ldr	r0, [pc, #328]	; (80012c4 <do_interface+0x5f0>)
 800117a:	f7ff f8c2 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 800117e:	2201      	movs	r2, #1
 8001180:	2100      	movs	r1, #0
 8001182:	4850      	ldr	r0, [pc, #320]	; (80012c4 <do_interface+0x5f0>)
 8001184:	f7ff f8d4 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " Heatplate");
 8001188:	4956      	ldr	r1, [pc, #344]	; (80012e4 <do_interface+0x610>)
 800118a:	484e      	ldr	r0, [pc, #312]	; (80012c4 <do_interface+0x5f0>)
 800118c:	f7ff f8b9 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, (encoder.value)&0b1);
 8001190:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <do_interface+0x5e4>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	b2db      	uxtb	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	4848      	ldr	r0, [pc, #288]	; (80012c4 <do_interface+0x5f0>)
 80011a2:	f7ff f8c5 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, scAR);
 80011a6:	217e      	movs	r1, #126	; 0x7e
 80011a8:	4846      	ldr	r0, [pc, #280]	; (80012c4 <do_interface+0x5f0>)
 80011aa:	f7ff f947 	bl	800043c <lcd_write_data>
		ui_state = uiMENU;
 80011ae:	4b43      	ldr	r3, [pc, #268]	; (80012bc <do_interface+0x5e8>)
 80011b0:	2203      	movs	r2, #3
 80011b2:	701a      	strb	r2, [r3, #0]
		break;
 80011b4:	e126      	b.n	8001404 <do_interface+0x730>
	case uiMENU:
		lcd_set_xy(&lcd, 0, (encoder.value)&0b1);
 80011b6:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <do_interface+0x5e4>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	2100      	movs	r1, #0
 80011c6:	483f      	ldr	r0, [pc, #252]	; (80012c4 <do_interface+0x5f0>)
 80011c8:	f7ff f8b2 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, scAR);
 80011cc:	217e      	movs	r1, #126	; 0x7e
 80011ce:	483d      	ldr	r0, [pc, #244]	; (80012c4 <do_interface+0x5f0>)
 80011d0:	f7ff f934 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 0, 1 - ((encoder.value)&0b1));
 80011d4:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <do_interface+0x5e4>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bf0c      	ite	eq
 80011e0:	2301      	moveq	r3, #1
 80011e2:	2300      	movne	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	2100      	movs	r1, #0
 80011ea:	4836      	ldr	r0, [pc, #216]	; (80012c4 <do_interface+0x5f0>)
 80011ec:	f7ff f8a0 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, ' ');
 80011f0:	2120      	movs	r1, #32
 80011f2:	4834      	ldr	r0, [pc, #208]	; (80012c4 <do_interface+0x5f0>)
 80011f4:	f7ff f922 	bl	800043c <lcd_write_data>
		if (!encoder.pressed && last_button)
 80011f8:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <do_interface+0x5e4>)
 80011fa:	789b      	ldrb	r3, [r3, #2]
 80011fc:	f083 0301 	eor.w	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80fb 	beq.w	80013fe <do_interface+0x72a>
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <do_interface+0x600>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80f6 	beq.w	80013fe <do_interface+0x72a>
		{
			ui_state = ((encoder.value)&0b1)?uiHEATPLATEenter:uiSETTINGSenter;
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <do_interface+0x5e4>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <do_interface+0x54e>
 800121e:	2204      	movs	r2, #4
 8001220:	e000      	b.n	8001224 <do_interface+0x550>
 8001222:	2206      	movs	r2, #6
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <do_interface+0x5e8>)
 8001226:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001228:	e0e9      	b.n	80013fe <do_interface+0x72a>
	case uiHEATPLATEenter:
		lcd_mini_clear(&lcd);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	469c      	mov	ip, r3
 800122e:	4825      	ldr	r0, [pc, #148]	; (80012c4 <do_interface+0x5f0>)
 8001230:	f7ff fd2a 	bl	8000c88 <lcd_mini_clear.8640>
		lcd_set_xy(&lcd, 0, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	2100      	movs	r1, #0
 8001238:	4822      	ldr	r0, [pc, #136]	; (80012c4 <do_interface+0x5f0>)
 800123a:	f7ff f879 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "Heatplate   ");
 800123e:	492a      	ldr	r1, [pc, #168]	; (80012e8 <do_interface+0x614>)
 8001240:	4820      	ldr	r0, [pc, #128]	; (80012c4 <do_interface+0x5f0>)
 8001242:	f7ff f85e 	bl	8000302 <lcd_string>
		heatplate(true);
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	469c      	mov	ip, r3
 800124a:	2001      	movs	r0, #1
 800124c:	f000 f9a0 	bl	8001590 <heatplate.8655>
		ui_state = uiHEATPLATE;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <do_interface+0x5e8>)
 8001252:	2205      	movs	r2, #5
 8001254:	701a      	strb	r2, [r3, #0]
		break;
 8001256:	e0d5      	b.n	8001404 <do_interface+0x730>
	case uiHEATPLATE:
		heatplate(false);
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	469c      	mov	ip, r3
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f997 	bl	8001590 <heatplate.8655>
		break;
 8001262:	e0cf      	b.n	8001404 <do_interface+0x730>
	case uiSETTINGSenter:
		lcd_set_xy(&lcd, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	4816      	ldr	r0, [pc, #88]	; (80012c4 <do_interface+0x5f0>)
 800126a:	f7ff f861 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " Profile    ");
 800126e:	491f      	ldr	r1, [pc, #124]	; (80012ec <do_interface+0x618>)
 8001270:	4814      	ldr	r0, [pc, #80]	; (80012c4 <do_interface+0x5f0>)
 8001272:	f7ff f846 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 8001276:	2201      	movs	r2, #1
 8001278:	2100      	movs	r1, #0
 800127a:	4812      	ldr	r0, [pc, #72]	; (80012c4 <do_interface+0x5f0>)
 800127c:	f7ff f858 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " settings    ");
 8001280:	491b      	ldr	r1, [pc, #108]	; (80012f0 <do_interface+0x61c>)
 8001282:	4810      	ldr	r0, [pc, #64]	; (80012c4 <do_interface+0x5f0>)
 8001284:	f7ff f83d 	bl	8000302 <lcd_string>
		ui_state = uiSETTINGS;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <do_interface+0x5e8>)
 800128a:	2207      	movs	r2, #7
 800128c:	701a      	strb	r2, [r3, #0]
		do_profile_settings(true);
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	469c      	mov	ip, r3
 8001292:	2001      	movs	r0, #1
 8001294:	f000 fa7c 	bl	8001790 <do_profile_settings.8662>
		break;
 8001298:	e0b4      	b.n	8001404 <do_interface+0x730>
 800129a:	bf00      	nop
 800129c:	200002b4 	.word	0x200002b4
 80012a0:	200002b8 	.word	0x200002b8
 80012a4:	200002bc 	.word	0x200002bc
 80012a8:	20000028 	.word	0x20000028
 80012ac:	20000234 	.word	0x20000234
 80012b0:	2000024a 	.word	0x2000024a
 80012b4:	20000024 	.word	0x20000024
 80012b8:	20000238 	.word	0x20000238
 80012bc:	2000024d 	.word	0x2000024d
 80012c0:	2000001c 	.word	0x2000001c
 80012c4:	20000570 	.word	0x20000570
 80012c8:	0800d728 	.word	0x0800d728
 80012cc:	0800d738 	.word	0x0800d738
 80012d0:	20000235 	.word	0x20000235
 80012d4:	200002c0 	.word	0x200002c0
 80012d8:	0800d748 	.word	0x0800d748
 80012dc:	0800d758 	.word	0x0800d758
 80012e0:	0800d768 	.word	0x0800d768
 80012e4:	0800d774 	.word	0x0800d774
 80012e8:	0800d780 	.word	0x0800d780
 80012ec:	0800d790 	.word	0x0800d790
 80012f0:	0800d7a0 	.word	0x0800d7a0
	case uiSETTINGS:
		if (do_profile_settings(false))
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	469c      	mov	ip, r3
 80012f8:	2000      	movs	r0, #0
 80012fa:	f000 fa49 	bl	8001790 <do_profile_settings.8662>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d07e      	beq.n	8001402 <do_interface+0x72e>
		{
			lcd_mini_clear(&lcd);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	469c      	mov	ip, r3
 8001308:	4843      	ldr	r0, [pc, #268]	; (8001418 <do_interface+0x744>)
 800130a:	f7ff fcbd 	bl	8000c88 <lcd_mini_clear.8640>
			ui_state = uiREFLOW;
 800130e:	4b43      	ldr	r3, [pc, #268]	; (800141c <do_interface+0x748>)
 8001310:	2208      	movs	r2, #8
 8001312:	701a      	strb	r2, [r3, #0]
			do_reflow(true);
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	469c      	mov	ip, r3
 8001318:	2001      	movs	r0, #1
 800131a:	f000 ff59 	bl	80021d0 <do_reflow.8698>
		}
		break;
 800131e:	e070      	b.n	8001402 <do_interface+0x72e>
	case uiREFLOW:
		do_reflow(false);
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	469c      	mov	ip, r3
 8001324:	2000      	movs	r0, #0
 8001326:	f000 ff53 	bl	80021d0 <do_reflow.8698>
		break;
 800132a:	e06b      	b.n	8001404 <do_interface+0x730>
	case uiMALFUNCTION: // just check errors
		temperature_SP = 0;
 800132c:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <do_interface+0x74c>)
 800132e:	2200      	movs	r2, #0
 8001330:	801a      	strh	r2, [r3, #0]
		lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 8001332:	2300      	movs	r3, #0
 8001334:	2200      	movs	r2, #0
 8001336:	2101      	movs	r1, #1
 8001338:	4837      	ldr	r0, [pc, #220]	; (8001418 <do_interface+0x744>)
 800133a:	f7fe ff97 	bl	800026c <lcd_mode>
		lcd_set_xy(&lcd, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	4835      	ldr	r0, [pc, #212]	; (8001418 <do_interface+0x744>)
 8001344:	f7fe fff4 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " * Error! * ");
 8001348:	4936      	ldr	r1, [pc, #216]	; (8001424 <do_interface+0x750>)
 800134a:	4833      	ldr	r0, [pc, #204]	; (8001418 <do_interface+0x744>)
 800134c:	f7fe ffd9 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 8001350:	2201      	movs	r2, #1
 8001352:	2100      	movs	r1, #0
 8001354:	4830      	ldr	r0, [pc, #192]	; (8001418 <do_interface+0x744>)
 8001356:	f7fe ffeb 	bl	8000330 <lcd_set_xy>
		if (global_error & errMAX6675_invalid)
 800135a:	4b33      	ldr	r3, [pc, #204]	; (8001428 <do_interface+0x754>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <do_interface+0x69c>
			lcd_string(&lcd, "Temp. Sensor");
 8001366:	4931      	ldr	r1, [pc, #196]	; (800142c <do_interface+0x758>)
 8001368:	482b      	ldr	r0, [pc, #172]	; (8001418 <do_interface+0x744>)
 800136a:	f7fe ffca 	bl	8000302 <lcd_string>
		else if (global_error & errTIMEOUT)
			lcd_string(&lcd, "timeout     ");
		else
			lcd_string(&lcd, "fatal error ");

		break;
 800136e:	e049      	b.n	8001404 <do_interface+0x730>
		else if (global_error & errTEMP_SP)
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <do_interface+0x754>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <do_interface+0x6b2>
			lcd_string(&lcd, "SP too high ");
 800137c:	492c      	ldr	r1, [pc, #176]	; (8001430 <do_interface+0x75c>)
 800137e:	4826      	ldr	r0, [pc, #152]	; (8001418 <do_interface+0x744>)
 8001380:	f7fe ffbf 	bl	8000302 <lcd_string>
		break;
 8001384:	e03e      	b.n	8001404 <do_interface+0x730>
		else if (global_error & errTEMP_PV)
 8001386:	4b28      	ldr	r3, [pc, #160]	; (8001428 <do_interface+0x754>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d004      	beq.n	800139c <do_interface+0x6c8>
			lcd_string(&lcd, "T too high  ");
 8001392:	4928      	ldr	r1, [pc, #160]	; (8001434 <do_interface+0x760>)
 8001394:	4820      	ldr	r0, [pc, #128]	; (8001418 <do_interface+0x744>)
 8001396:	f7fe ffb4 	bl	8000302 <lcd_string>
		break;
 800139a:	e033      	b.n	8001404 <do_interface+0x730>
		else if (global_error & errHEATER)
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <do_interface+0x754>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <do_interface+0x6de>
			lcd_string(&lcd, "heater power");
 80013a8:	4923      	ldr	r1, [pc, #140]	; (8001438 <do_interface+0x764>)
 80013aa:	481b      	ldr	r0, [pc, #108]	; (8001418 <do_interface+0x744>)
 80013ac:	f7fe ffa9 	bl	8000302 <lcd_string>
		break;
 80013b0:	e028      	b.n	8001404 <do_interface+0x730>
		else if (global_error & errI_LIMIT)
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <do_interface+0x754>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <do_interface+0x6f4>
			lcd_string(&lcd, "heater limit");
 80013be:	491f      	ldr	r1, [pc, #124]	; (800143c <do_interface+0x768>)
 80013c0:	4815      	ldr	r0, [pc, #84]	; (8001418 <do_interface+0x744>)
 80013c2:	f7fe ff9e 	bl	8000302 <lcd_string>
		break;
 80013c6:	e01d      	b.n	8001404 <do_interface+0x730>
		else if (global_error & errTIMEOUT)
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <do_interface+0x754>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <do_interface+0x70a>
			lcd_string(&lcd, "timeout     ");
 80013d4:	491a      	ldr	r1, [pc, #104]	; (8001440 <do_interface+0x76c>)
 80013d6:	4810      	ldr	r0, [pc, #64]	; (8001418 <do_interface+0x744>)
 80013d8:	f7fe ff93 	bl	8000302 <lcd_string>
		break;
 80013dc:	e012      	b.n	8001404 <do_interface+0x730>
			lcd_string(&lcd, "fatal error ");
 80013de:	4919      	ldr	r1, [pc, #100]	; (8001444 <do_interface+0x770>)
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <do_interface+0x744>)
 80013e2:	f7fe ff8e 	bl	8000302 <lcd_string>
		break;
 80013e6:	e00d      	b.n	8001404 <do_interface+0x730>
	default:
		global_error = errFATAL;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <do_interface+0x754>)
 80013ea:	2240      	movs	r2, #64	; 0x40
 80013ec:	701a      	strb	r2, [r3, #0]
		ui_state = uiMALFUNCTION;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <do_interface+0x748>)
 80013f0:	2209      	movs	r2, #9
 80013f2:	701a      	strb	r2, [r3, #0]
		break;
 80013f4:	e006      	b.n	8001404 <do_interface+0x730>
		break;
 80013f6:	bf00      	nop
 80013f8:	e004      	b.n	8001404 <do_interface+0x730>
		break;
 80013fa:	bf00      	nop
 80013fc:	e002      	b.n	8001404 <do_interface+0x730>
		break;
 80013fe:	bf00      	nop
 8001400:	e000      	b.n	8001404 <do_interface+0x730>
		break;
 8001402:	bf00      	nop
	}
	last_button = encoder.pressed;
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <do_interface+0x774>)
 8001406:	789a      	ldrb	r2, [r3, #2]
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <do_interface+0x778>)
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	e000      	b.n	8001410 <do_interface+0x73c>
		return;
 800140e:	bf00      	nop

}
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000570 	.word	0x20000570
 800141c:	2000024d 	.word	0x2000024d
 8001420:	2000024a 	.word	0x2000024a
 8001424:	0800d7b0 	.word	0x0800d7b0
 8001428:	20000234 	.word	0x20000234
 800142c:	0800d7c0 	.word	0x0800d7c0
 8001430:	0800d7d0 	.word	0x0800d7d0
 8001434:	0800d7e0 	.word	0x0800d7e0
 8001438:	0800d7f0 	.word	0x0800d7f0
 800143c:	0800d800 	.word	0x0800d800
 8001440:	0800d810 	.word	0x0800d810
 8001444:	0800d820 	.word	0x0800d820
 8001448:	20000238 	.word	0x20000238
 800144c:	200002c0 	.word	0x200002c0

08001450 <change_temperature.8644>:
	{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	460b      	mov	r3, r1
 800145a:	817b      	strh	r3, [r7, #10]
 800145c:	f8c7 c004 	str.w	ip, [r7, #4]
		if (diff == 0)
 8001460:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <change_temperature.8644+0x1c>
			return t;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	e021      	b.n	80014b0 <change_temperature.8644+0x60>
		int32_t temp = (int32_t)t; // to avoid zero-cross
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	617b      	str	r3, [r7, #20]
		temp = (temp / STEP_TEMP) * STEP_TEMP; // round for more beauty
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <change_temperature.8644+0x6c>)
 8001474:	fb82 1203 	smull	r1, r2, r2, r3
 8001478:	1052      	asrs	r2, r2, #1
 800147a:	17db      	asrs	r3, r3, #31
 800147c:	1ad2      	subs	r2, r2, r3
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	617b      	str	r3, [r7, #20]
		temp += (diff)*STEP_TEMP;
 8001486:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4413      	add	r3, r2
 8001494:	617b      	str	r3, [r7, #20]
		if (temp < 0)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b00      	cmp	r3, #0
 800149a:	da01      	bge.n	80014a0 <change_temperature.8644+0x50>
			temp = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
		if (temp > MAX_TEMP)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80014a6:	dd02      	ble.n	80014ae <change_temperature.8644+0x5e>
			temp = MAX_TEMP;
 80014a8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80014ac:	617b      	str	r3, [r7, #20]
		return (uint32_t)temp;
 80014ae:	697b      	ldr	r3, [r7, #20]
	}
 80014b0:	4618      	mov	r0, r3
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	66666667 	.word	0x66666667

080014c0 <change_time.8650>:
	{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	460b      	mov	r3, r1
 80014ca:	817b      	strh	r3, [r7, #10]
 80014cc:	4613      	mov	r3, r2
 80014ce:	727b      	strb	r3, [r7, #9]
 80014d0:	f8c7 c004 	str.w	ip, [r7, #4]
		int32_t temp = (int32_t)t; // to avoid zero-cross
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	617b      	str	r3, [r7, #20]
		int32_t step = 5; // how much to change the time in seconds
 80014d8:	2305      	movs	r3, #5
 80014da:	613b      	str	r3, [r7, #16]
		if (t < 60)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b3b      	cmp	r3, #59	; 0x3b
 80014e0:	d802      	bhi.n	80014e8 <change_time.8650+0x28>
			step = 5;
 80014e2:	2305      	movs	r3, #5
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	e02d      	b.n	8001544 <change_time.8650+0x84>
		else if (t < 120)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b77      	cmp	r3, #119	; 0x77
 80014ec:	d802      	bhi.n	80014f4 <change_time.8650+0x34>
			step = 10;
 80014ee:	230a      	movs	r3, #10
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	e027      	b.n	8001544 <change_time.8650+0x84>
		else if (t < 300)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80014fa:	d202      	bcs.n	8001502 <change_time.8650+0x42>
			step = 20;
 80014fc:	2314      	movs	r3, #20
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	e020      	b.n	8001544 <change_time.8650+0x84>
		else if (t < 600)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001508:	d202      	bcs.n	8001510 <change_time.8650+0x50>
			step = 30;
 800150a:	231e      	movs	r3, #30
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	e019      	b.n	8001544 <change_time.8650+0x84>
		else if (t < 1200)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001516:	d202      	bcs.n	800151e <change_time.8650+0x5e>
			step = 60;
 8001518:	233c      	movs	r3, #60	; 0x3c
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	e012      	b.n	8001544 <change_time.8650+0x84>
		else if (t < 3600)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001524:	d203      	bcs.n	800152e <change_time.8650+0x6e>
			step = 300;
 8001526:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	e00a      	b.n	8001544 <change_time.8650+0x84>
		else if (t < 7200)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8001534:	d203      	bcs.n	800153e <change_time.8650+0x7e>
			step = 600;
 8001536:	f44f 7316 	mov.w	r3, #600	; 0x258
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	e002      	b.n	8001544 <change_time.8650+0x84>
			step = 1800;
 800153e:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001542:	613b      	str	r3, [r7, #16]
		if (round)
 8001544:	7a7b      	ldrb	r3, [r7, #9]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <change_time.8650+0x9a>
			temp = (temp / step) * step; // round
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	617b      	str	r3, [r7, #20]
		temp += (diff)*step;
 800155a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	4413      	add	r3, r2
 8001568:	617b      	str	r3, [r7, #20]
		if (temp < 5)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b04      	cmp	r3, #4
 800156e:	dc01      	bgt.n	8001574 <change_time.8650+0xb4>
			temp = 5;
 8001570:	2305      	movs	r3, #5
 8001572:	617b      	str	r3, [r7, #20]
		if (temp > 900*60)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 800157a:	4293      	cmp	r3, r2
 800157c:	dd02      	ble.n	8001584 <change_time.8650+0xc4>
			temp = 900*60;
 800157e:	f24d 23f0 	movw	r3, #54000	; 0xd2f0
 8001582:	617b      	str	r3, [r7, #20]
		return (uint32_t)temp;
 8001584:	697b      	ldr	r3, [r7, #20]
	}
 8001586:	4618      	mov	r0, r3
 8001588:	371c      	adds	r7, #28
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <heatplate.8655>:
	{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	4661      	mov	r1, ip
 800159c:	f8c7 c000 	str.w	ip, [r7]
		if (reset)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <heatplate.8655+0x2a>
			last_encoder = encoder.value;
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <heatplate.8655+0x104>)
 80015a8:	881a      	ldrh	r2, [r3, #0]
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <heatplate.8655+0x108>)
 80015ac:	801a      	strh	r2, [r3, #0]
			last_time = HAL_GetTick();
 80015ae:	f002 fad9 	bl	8003b64 <HAL_GetTick>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a39      	ldr	r2, [pc, #228]	; (800169c <heatplate.8655+0x10c>)
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	e069      	b.n	800168e <heatplate.8655+0xfe>
		if (encoder.pressed)
 80015ba:	4b36      	ldr	r3, [pc, #216]	; (8001694 <heatplate.8655+0x104>)
 80015bc:	789b      	ldrb	r3, [r3, #2]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <heatplate.8655+0x38>
			temperature_SP = 0;
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <heatplate.8655+0x110>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	801a      	strh	r2, [r3, #0]
		temperature_SP = change_temperature(temperature_SP,
 80015c8:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <heatplate.8655+0x110>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
							encoder.value - last_encoder);
 80015ce:	4b31      	ldr	r3, [pc, #196]	; (8001694 <heatplate.8655+0x104>)
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <heatplate.8655+0x108>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	b29b      	uxth	r3, r3
		temperature_SP = change_temperature(temperature_SP,
 80015da:	b21b      	sxth	r3, r3
 80015dc:	468c      	mov	ip, r1
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff ff36 	bl	8001450 <change_temperature.8644>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <heatplate.8655+0x110>)
 80015ea:	801a      	strh	r2, [r3, #0]
		last_encoder = encoder.value;
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <heatplate.8655+0x104>)
 80015ee:	881a      	ldrh	r2, [r3, #0]
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <heatplate.8655+0x108>)
 80015f2:	801a      	strh	r2, [r3, #0]
		tbuf[0] = '+';
 80015f4:	232b      	movs	r3, #43	; 0x2b
 80015f6:	743b      	strb	r3, [r7, #16]
		int2time((HAL_GetTick() - last_time)/1000, tbuf+1);
 80015f8:	f002 fab4 	bl	8003b64 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <heatplate.8655+0x10c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <heatplate.8655+0x114>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	099a      	lsrs	r2, r3, #6
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	3301      	adds	r3, #1
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f7fe ffcd 	bl	80005b4 <int2time>
		lcd_set_xy(&lcd, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	4822      	ldr	r0, [pc, #136]	; (80016a8 <heatplate.8655+0x118>)
 8001620:	f7fe fe86 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, (char*)tbuf);
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	4619      	mov	r1, r3
 800162a:	481f      	ldr	r0, [pc, #124]	; (80016a8 <heatplate.8655+0x118>)
 800162c:	f7fe fe69 	bl	8000302 <lcd_string>
		int2string(temperature_SP, buf, sizeof(buf));
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <heatplate.8655+0x110>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2203      	movs	r2, #3
 800163c:	4619      	mov	r1, r3
 800163e:	f7fe ff7b 	bl	8000538 <int2string>
		lcd_set_xy(&lcd, 7, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2107      	movs	r1, #7
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <heatplate.8655+0x118>)
 8001648:	f7fe fe72 	bl	8000330 <lcd_set_xy>
		lcd_out(&lcd, buf, sizeof(buf));
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2203      	movs	r2, #3
 8001652:	4619      	mov	r1, r3
 8001654:	4814      	ldr	r0, [pc, #80]	; (80016a8 <heatplate.8655+0x118>)
 8001656:	f7fe fe36 	bl	80002c6 <lcd_out>
		lcd_write_data(&lcd, scGRAD); // grad
 800165a:	21df      	movs	r1, #223	; 0xdf
 800165c:	4812      	ldr	r0, [pc, #72]	; (80016a8 <heatplate.8655+0x118>)
 800165e:	f7fe feed 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, scAR); // arrow right
 8001662:	217e      	movs	r1, #126	; 0x7e
 8001664:	4810      	ldr	r0, [pc, #64]	; (80016a8 <heatplate.8655+0x118>)
 8001666:	f7fe fee9 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 9, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2109      	movs	r1, #9
 800166e:	480e      	ldr	r0, [pc, #56]	; (80016a8 <heatplate.8655+0x118>)
 8001670:	f7fe fe5e 	bl	8000330 <lcd_set_xy>
		lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <heatplate.8655+0x11c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b04      	cmp	r3, #4
 800167a:	bf94      	ite	ls
 800167c:	2301      	movls	r3, #1
 800167e:	2300      	movhi	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	2300      	movs	r3, #0
 8001686:	2101      	movs	r1, #1
 8001688:	4807      	ldr	r0, [pc, #28]	; (80016a8 <heatplate.8655+0x118>)
 800168a:	f7fe fdef 	bl	800026c <lcd_mode>
	}
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000238 	.word	0x20000238
 8001698:	200002c2 	.word	0x200002c2
 800169c:	200002c4 	.word	0x200002c4
 80016a0:	2000024a 	.word	0x2000024a
 80016a4:	10624dd3 	.word	0x10624dd3
 80016a8:	20000570 	.word	0x20000570
 80016ac:	20000235 	.word	0x20000235

080016b0 <show_step_menu.8672>:
		{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4664      	mov	r4, ip
 80016b8:	f8c7 c004 	str.w	ip, [r7, #4]
			int2time(steps[pos].time, time_buf);
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <show_step_menu.8672+0xcc>)
 80016be:	f993 3000 	ldrsb.w	r3, [r3]
 80016c2:	4a2f      	ldr	r2, [pc, #188]	; (8001780 <show_step_menu.8672+0xd0>)
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4622      	mov	r2, r4
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ff70 	bl	80005b4 <int2time>
			lcd_set_xy(&lcd, 5, 1);
 80016d4:	2201      	movs	r2, #1
 80016d6:	2105      	movs	r1, #5
 80016d8:	482a      	ldr	r0, [pc, #168]	; (8001784 <show_step_menu.8672+0xd4>)
 80016da:	f7fe fe29 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, (char*)time_buf);
 80016de:	4623      	mov	r3, r4
 80016e0:	4619      	mov	r1, r3
 80016e2:	4828      	ldr	r0, [pc, #160]	; (8001784 <show_step_menu.8672+0xd4>)
 80016e4:	f7fe fe0d 	bl	8000302 <lcd_string>
			int2string(steps[pos].temp, buf, sizeof(buf));
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <show_step_menu.8672+0xcc>)
 80016ea:	f993 3000 	ldrsb.w	r3, [r3]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <show_step_menu.8672+0xd0>)
 80016f2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2203      	movs	r2, #3
 80016fe:	4619      	mov	r1, r3
 8001700:	f7fe ff1a 	bl	8000538 <int2string>
			lcd_set_xy(&lcd, 0, 1);
 8001704:	2201      	movs	r2, #1
 8001706:	2100      	movs	r1, #0
 8001708:	481e      	ldr	r0, [pc, #120]	; (8001784 <show_step_menu.8672+0xd4>)
 800170a:	f7fe fe11 	bl	8000330 <lcd_set_xy>
			lcd_out(&lcd, buf, sizeof(buf));
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	2203      	movs	r2, #3
 8001714:	4619      	mov	r1, r3
 8001716:	481b      	ldr	r0, [pc, #108]	; (8001784 <show_step_menu.8672+0xd4>)
 8001718:	f7fe fdd5 	bl	80002c6 <lcd_out>
			lcd_write_data(&lcd, scGRAD); // grad
 800171c:	21df      	movs	r1, #223	; 0xdf
 800171e:	4819      	ldr	r0, [pc, #100]	; (8001784 <show_step_menu.8672+0xd4>)
 8001720:	f7fe fe8c 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, ' ');
 8001724:	2120      	movs	r1, #32
 8001726:	4817      	ldr	r0, [pc, #92]	; (8001784 <show_step_menu.8672+0xd4>)
 8001728:	f7fe fe88 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 0, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2100      	movs	r1, #0
 8001730:	4814      	ldr	r0, [pc, #80]	; (8001784 <show_step_menu.8672+0xd4>)
 8001732:	f7fe fdfd 	bl	8000330 <lcd_set_xy>
			lcd_write_data(&lcd, '#');
 8001736:	2123      	movs	r1, #35	; 0x23
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <show_step_menu.8672+0xd4>)
 800173a:	f7fe fe7f 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, pos+'1');
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <show_step_menu.8672+0xcc>)
 8001740:	f993 3000 	ldrsb.w	r3, [r3]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	3331      	adds	r3, #49	; 0x31
 8001748:	b2db      	uxtb	r3, r3
 800174a:	4619      	mov	r1, r3
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <show_step_menu.8672+0xd4>)
 800174e:	f7fe fe75 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, '/');
 8001752:	212f      	movs	r1, #47	; 0x2f
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <show_step_menu.8672+0xd4>)
 8001756:	f7fe fe71 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, max_steps + '0');
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <show_step_menu.8672+0xd8>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	3330      	adds	r3, #48	; 0x30
 8001760:	b2db      	uxtb	r3, r3
 8001762:	4619      	mov	r1, r3
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <show_step_menu.8672+0xd4>)
 8001766:	f7fe fe69 	bl	800043c <lcd_write_data>
			lcd_string(&lcd, " step   ");
 800176a:	4908      	ldr	r1, [pc, #32]	; (800178c <show_step_menu.8672+0xdc>)
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <show_step_menu.8672+0xd4>)
 800176e:	f7fe fdc8 	bl	8000302 <lcd_string>
		}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bd90      	pop	{r4, r7, pc}
 800177a:	bf00      	nop
 800177c:	200002ca 	.word	0x200002ca
 8001780:	20000268 	.word	0x20000268
 8001784:	20000570 	.word	0x20000570
 8001788:	20000020 	.word	0x20000020
 800178c:	0800d830 	.word	0x0800d830

08001790 <do_profile_settings.8662>:
	{
 8001790:	b5b0      	push	{r4, r5, r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	4664      	mov	r4, ip
 800179c:	f8c7 c000 	str.w	ip, [r7]
	bool do_profile_settings(bool reset)
 80017a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017a4:	613b      	str	r3, [r7, #16]
		if (reset)
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d011      	beq.n	80017d0 <do_profile_settings.8662+0x40>
			last_encoder = encoder.value;
 80017ac:	4bb9      	ldr	r3, [pc, #740]	; (8001a94 <do_profile_settings.8662+0x304>)
 80017ae:	881a      	ldrh	r2, [r3, #0]
 80017b0:	4bb9      	ldr	r3, [pc, #740]	; (8001a98 <do_profile_settings.8662+0x308>)
 80017b2:	801a      	strh	r2, [r3, #0]
			pos = 0;
 80017b4:	4bb9      	ldr	r3, [pc, #740]	; (8001a9c <do_profile_settings.8662+0x30c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
			profile_state = 0;
 80017ba:	4bb9      	ldr	r3, [pc, #740]	; (8001aa0 <do_profile_settings.8662+0x310>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
			last_time = HAL_GetTick();
 80017c0:	f002 f9d0 	bl	8003b64 <HAL_GetTick>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4ab7      	ldr	r2, [pc, #732]	; (8001aa4 <do_profile_settings.8662+0x314>)
 80017c8:	6013      	str	r3, [r2, #0]
			return false;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f000 bce3 	b.w	8002196 <do_profile_settings.8662+0xa06>
		if (HAL_GetTick() - last_time < 1000)
 80017d0:	f002 f9c8 	bl	8003b64 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	4bb3      	ldr	r3, [pc, #716]	; (8001aa4 <do_profile_settings.8662+0x314>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017e0:	d202      	bcs.n	80017e8 <do_profile_settings.8662+0x58>
			return false; // delay to show intro text
 80017e2:	2300      	movs	r3, #0
 80017e4:	f000 bcd7 	b.w	8002196 <do_profile_settings.8662+0xa06>
		int16_t diff = encoder.value - last_encoder;
 80017e8:	4baa      	ldr	r3, [pc, #680]	; (8001a94 <do_profile_settings.8662+0x304>)
 80017ea:	881a      	ldrh	r2, [r3, #0]
 80017ec:	4baa      	ldr	r3, [pc, #680]	; (8001a98 <do_profile_settings.8662+0x308>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	82fb      	strh	r3, [r7, #22]
		last_encoder = encoder.value;
 80017f6:	4ba7      	ldr	r3, [pc, #668]	; (8001a94 <do_profile_settings.8662+0x304>)
 80017f8:	881a      	ldrh	r2, [r3, #0]
 80017fa:	4ba7      	ldr	r3, [pc, #668]	; (8001a98 <do_profile_settings.8662+0x308>)
 80017fc:	801a      	strh	r2, [r3, #0]
		switch (profile_state)
 80017fe:	4ba8      	ldr	r3, [pc, #672]	; (8001aa0 <do_profile_settings.8662+0x310>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b5a      	cmp	r3, #90	; 0x5a
 8001804:	f200 84b9 	bhi.w	800217a <do_profile_settings.8662+0x9ea>
 8001808:	a201      	add	r2, pc, #4	; (adr r2, 8001810 <do_profile_settings.8662+0x80>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	0800197d 	.word	0x0800197d
 8001814:	0800198d 	.word	0x0800198d
 8001818:	0800217b 	.word	0x0800217b
 800181c:	0800217b 	.word	0x0800217b
 8001820:	0800217b 	.word	0x0800217b
 8001824:	0800217b 	.word	0x0800217b
 8001828:	0800217b 	.word	0x0800217b
 800182c:	0800217b 	.word	0x0800217b
 8001830:	0800217b 	.word	0x0800217b
 8001834:	0800217b 	.word	0x0800217b
 8001838:	08001a5f 	.word	0x08001a5f
 800183c:	08001b15 	.word	0x08001b15
 8001840:	08001c33 	.word	0x08001c33
 8001844:	08001d5d 	.word	0x08001d5d
 8001848:	08001dcb 	.word	0x08001dcb
 800184c:	0800217b 	.word	0x0800217b
 8001850:	0800217b 	.word	0x0800217b
 8001854:	0800217b 	.word	0x0800217b
 8001858:	0800217b 	.word	0x0800217b
 800185c:	0800217b 	.word	0x0800217b
 8001860:	0800217b 	.word	0x0800217b
 8001864:	08001e39 	.word	0x08001e39
 8001868:	08001ec7 	.word	0x08001ec7
 800186c:	08001f57 	.word	0x08001f57
 8001870:	08001fef 	.word	0x08001fef
 8001874:	0800217b 	.word	0x0800217b
 8001878:	0800217b 	.word	0x0800217b
 800187c:	0800217b 	.word	0x0800217b
 8001880:	0800217b 	.word	0x0800217b
 8001884:	0800217b 	.word	0x0800217b
 8001888:	0800217b 	.word	0x0800217b
 800188c:	0800217b 	.word	0x0800217b
 8001890:	0800217b 	.word	0x0800217b
 8001894:	0800217b 	.word	0x0800217b
 8001898:	0800217b 	.word	0x0800217b
 800189c:	0800217b 	.word	0x0800217b
 80018a0:	0800217b 	.word	0x0800217b
 80018a4:	0800217b 	.word	0x0800217b
 80018a8:	0800217b 	.word	0x0800217b
 80018ac:	0800217b 	.word	0x0800217b
 80018b0:	0800217b 	.word	0x0800217b
 80018b4:	0800217b 	.word	0x0800217b
 80018b8:	0800217b 	.word	0x0800217b
 80018bc:	0800217b 	.word	0x0800217b
 80018c0:	0800217b 	.word	0x0800217b
 80018c4:	0800217b 	.word	0x0800217b
 80018c8:	0800217b 	.word	0x0800217b
 80018cc:	0800217b 	.word	0x0800217b
 80018d0:	0800217b 	.word	0x0800217b
 80018d4:	0800217b 	.word	0x0800217b
 80018d8:	0800217b 	.word	0x0800217b
 80018dc:	0800217b 	.word	0x0800217b
 80018e0:	0800217b 	.word	0x0800217b
 80018e4:	0800217b 	.word	0x0800217b
 80018e8:	0800217b 	.word	0x0800217b
 80018ec:	0800217b 	.word	0x0800217b
 80018f0:	0800217b 	.word	0x0800217b
 80018f4:	0800217b 	.word	0x0800217b
 80018f8:	0800217b 	.word	0x0800217b
 80018fc:	0800217b 	.word	0x0800217b
 8001900:	0800217b 	.word	0x0800217b
 8001904:	0800217b 	.word	0x0800217b
 8001908:	0800217b 	.word	0x0800217b
 800190c:	0800217b 	.word	0x0800217b
 8001910:	0800217b 	.word	0x0800217b
 8001914:	0800217b 	.word	0x0800217b
 8001918:	0800217b 	.word	0x0800217b
 800191c:	0800217b 	.word	0x0800217b
 8001920:	0800217b 	.word	0x0800217b
 8001924:	0800217b 	.word	0x0800217b
 8001928:	0800217b 	.word	0x0800217b
 800192c:	0800217b 	.word	0x0800217b
 8001930:	0800217b 	.word	0x0800217b
 8001934:	0800217b 	.word	0x0800217b
 8001938:	0800217b 	.word	0x0800217b
 800193c:	0800217b 	.word	0x0800217b
 8001940:	0800217b 	.word	0x0800217b
 8001944:	0800217b 	.word	0x0800217b
 8001948:	0800217b 	.word	0x0800217b
 800194c:	0800217b 	.word	0x0800217b
 8001950:	0800217b 	.word	0x0800217b
 8001954:	0800217b 	.word	0x0800217b
 8001958:	0800217b 	.word	0x0800217b
 800195c:	0800217b 	.word	0x0800217b
 8001960:	0800217b 	.word	0x0800217b
 8001964:	0800217b 	.word	0x0800217b
 8001968:	0800217b 	.word	0x0800217b
 800196c:	0800217b 	.word	0x0800217b
 8001970:	0800217b 	.word	0x0800217b
 8001974:	0800217b 	.word	0x0800217b
 8001978:	080020ab 	.word	0x080020ab
			pos = 0;
 800197c:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <do_profile_settings.8662+0x30c>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
			profile_state = 90;
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <do_profile_settings.8662+0x310>)
 8001984:	225a      	movs	r2, #90	; 0x5a
 8001986:	701a      	strb	r2, [r3, #0]
			break;
 8001988:	f000 bc00 	b.w	800218c <do_profile_settings.8662+0x9fc>
			if (diff == 0)
 800198c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10e      	bne.n	80019b2 <do_profile_settings.8662+0x222>
				if (last_button && (!encoder.pressed))
 8001994:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <do_profile_settings.8662+0x318>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d025      	beq.n	80019e8 <do_profile_settings.8662+0x258>
 800199c:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <do_profile_settings.8662+0x304>)
 800199e:	789b      	ldrb	r3, [r3, #2]
 80019a0:	f083 0301 	eor.w	r3, r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01e      	beq.n	80019e8 <do_profile_settings.8662+0x258>
					profile_state = 10;
 80019aa:	4b3d      	ldr	r3, [pc, #244]	; (8001aa0 <do_profile_settings.8662+0x310>)
 80019ac:	220a      	movs	r2, #10
 80019ae:	701a      	strb	r2, [r3, #0]
 80019b0:	e01a      	b.n	80019e8 <do_profile_settings.8662+0x258>
				if (diff > 0)
 80019b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	dd09      	ble.n	80019ce <do_profile_settings.8662+0x23e>
					pos++;
 80019ba:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <do_profile_settings.8662+0x30c>)
 80019bc:	f993 3000 	ldrsb.w	r3, [r3]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	3301      	adds	r3, #1
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	b25a      	sxtb	r2, r3
 80019c8:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <do_profile_settings.8662+0x30c>)
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e00c      	b.n	80019e8 <do_profile_settings.8662+0x258>
				else if (diff < 0)
 80019ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da08      	bge.n	80019e8 <do_profile_settings.8662+0x258>
					pos--;
 80019d6:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <do_profile_settings.8662+0x30c>)
 80019d8:	f993 3000 	ldrsb.w	r3, [r3]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	3b01      	subs	r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	b25a      	sxtb	r2, r3
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <do_profile_settings.8662+0x30c>)
 80019e6:	701a      	strb	r2, [r3, #0]
			if ((pos < 0) || (pos >= max_steps))
 80019e8:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <do_profile_settings.8662+0x30c>)
 80019ea:	f993 3000 	ldrsb.w	r3, [r3]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db07      	blt.n	8001a02 <do_profile_settings.8662+0x272>
 80019f2:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <do_profile_settings.8662+0x30c>)
 80019f4:	f993 3000 	ldrsb.w	r3, [r3]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <do_profile_settings.8662+0x31c>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	db03      	blt.n	8001a0a <do_profile_settings.8662+0x27a>
				profile_state = 90;
 8001a02:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <do_profile_settings.8662+0x310>)
 8001a04:	225a      	movs	r2, #90	; 0x5a
 8001a06:	701a      	strb	r2, [r3, #0]
				break;
 8001a08:	e3c0      	b.n	800218c <do_profile_settings.8662+0x9fc>
			show_step_menu();
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	469c      	mov	ip, r3
 8001a10:	f7ff fe4e 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2109      	movs	r1, #9
 8001a18:	4825      	ldr	r0, [pc, #148]	; (8001ab0 <do_profile_settings.8662+0x320>)
 8001a1a:	f7fe fc89 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "    ");
 8001a1e:	4925      	ldr	r1, [pc, #148]	; (8001ab4 <do_profile_settings.8662+0x324>)
 8001a20:	4823      	ldr	r0, [pc, #140]	; (8001ab0 <do_profile_settings.8662+0x320>)
 8001a22:	f7fe fc6e 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 11, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	210b      	movs	r1, #11
 8001a2a:	4821      	ldr	r0, [pc, #132]	; (8001ab0 <do_profile_settings.8662+0x320>)
 8001a2c:	f7fe fc80 	bl	8000330 <lcd_set_xy>
			lcd_write_data(&lcd, cc3dots);
 8001a30:	2106      	movs	r1, #6
 8001a32:	481f      	ldr	r0, [pc, #124]	; (8001ab0 <do_profile_settings.8662+0x320>)
 8001a34:	f7fe fd02 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 11, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	210b      	movs	r1, #11
 8001a3c:	481c      	ldr	r0, [pc, #112]	; (8001ab0 <do_profile_settings.8662+0x320>)
 8001a3e:	f7fe fc77 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <do_profile_settings.8662+0x328>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf94      	ite	ls
 8001a4a:	2301      	movls	r3, #1
 8001a4c:	2300      	movhi	r3, #0
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	2300      	movs	r3, #0
 8001a54:	2101      	movs	r1, #1
 8001a56:	4816      	ldr	r0, [pc, #88]	; (8001ab0 <do_profile_settings.8662+0x320>)
 8001a58:	f7fe fc08 	bl	800026c <lcd_mode>
			break;
 8001a5c:	e396      	b.n	800218c <do_profile_settings.8662+0x9fc>
			if (diff == 0)
 8001a5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10e      	bne.n	8001a84 <do_profile_settings.8662+0x2f4>
				if (last_button && (!encoder.pressed))
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <do_profile_settings.8662+0x318>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d02d      	beq.n	8001aca <do_profile_settings.8662+0x33a>
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <do_profile_settings.8662+0x304>)
 8001a70:	789b      	ldrb	r3, [r3, #2]
 8001a72:	f083 0301 	eor.w	r3, r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d026      	beq.n	8001aca <do_profile_settings.8662+0x33a>
					profile_state = 1; // stop editing
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <do_profile_settings.8662+0x310>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	e022      	b.n	8001aca <do_profile_settings.8662+0x33a>
				if (diff > 0)
 8001a84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	dd17      	ble.n	8001abc <do_profile_settings.8662+0x32c>
					profile_state = 21;
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <do_profile_settings.8662+0x310>)
 8001a8e:	2215      	movs	r2, #21
 8001a90:	701a      	strb	r2, [r3, #0]
 8001a92:	e01a      	b.n	8001aca <do_profile_settings.8662+0x33a>
 8001a94:	20000238 	.word	0x20000238
 8001a98:	200002c8 	.word	0x200002c8
 8001a9c:	200002ca 	.word	0x200002ca
 8001aa0:	200002cb 	.word	0x200002cb
 8001aa4:	200002cc 	.word	0x200002cc
 8001aa8:	200002d0 	.word	0x200002d0
 8001aac:	20000020 	.word	0x20000020
 8001ab0:	20000570 	.word	0x20000570
 8001ab4:	0800d83c 	.word	0x0800d83c
 8001ab8:	20000235 	.word	0x20000235
				else if (diff < 0)
 8001abc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	da02      	bge.n	8001aca <do_profile_settings.8662+0x33a>
					profile_state = 12;
 8001ac4:	4b9c      	ldr	r3, [pc, #624]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	469c      	mov	ip, r3
 8001ad0:	f7ff fdee 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2109      	movs	r1, #9
 8001ad8:	4898      	ldr	r0, [pc, #608]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001ada:	f7fe fc29 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001ade:	4998      	ldr	r1, [pc, #608]	; (8001d40 <do_profile_settings.8662+0x5b0>)
 8001ae0:	4896      	ldr	r0, [pc, #600]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001ae2:	f7fe fc0e 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4894      	ldr	r0, [pc, #592]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001aea:	f7fe fca7 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 8001aee:	2201      	movs	r2, #1
 8001af0:	210c      	movs	r1, #12
 8001af2:	4892      	ldr	r0, [pc, #584]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001af4:	f7fe fc1c 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001af8:	4b92      	ldr	r3, [pc, #584]	; (8001d44 <do_profile_settings.8662+0x5b4>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	bf94      	ite	ls
 8001b00:	2301      	movls	r3, #1
 8001b02:	2300      	movhi	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	488b      	ldr	r0, [pc, #556]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001b0e:	f7fe fbad 	bl	800026c <lcd_mode>
			break;
 8001b12:	e33b      	b.n	800218c <do_profile_settings.8662+0x9fc>
			if (diff == 0)
 8001b14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d156      	bne.n	8001bca <do_profile_settings.8662+0x43a>
				if (last_button && (!encoder.pressed))
 8001b1c:	4b8a      	ldr	r3, [pc, #552]	; (8001d48 <do_profile_settings.8662+0x5b8>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d061      	beq.n	8001be8 <do_profile_settings.8662+0x458>
 8001b24:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <do_profile_settings.8662+0x5bc>)
 8001b26:	789b      	ldrb	r3, [r3, #2]
 8001b28:	f083 0301 	eor.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d05a      	beq.n	8001be8 <do_profile_settings.8662+0x458>
					if (max_steps >= 9)
 8001b32:	4b87      	ldr	r3, [pc, #540]	; (8001d50 <do_profile_settings.8662+0x5c0>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d903      	bls.n	8001b42 <do_profile_settings.8662+0x3b2>
						profile_state = 13;
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001b3c:	220d      	movs	r2, #13
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	e052      	b.n	8001be8 <do_profile_settings.8662+0x458>
						for (int i = 8; i > pos; i--)
 8001b42:	2308      	movs	r3, #8
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	e016      	b.n	8001b76 <do_profile_settings.8662+0x3e6>
							steps[i].time = steps[i-1].time;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	4a81      	ldr	r2, [pc, #516]	; (8001d54 <do_profile_settings.8662+0x5c4>)
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	497f      	ldr	r1, [pc, #508]	; (8001d54 <do_profile_settings.8662+0x5c4>)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	605a      	str	r2, [r3, #4]
							steps[i].temp = steps[i-1].temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	4a7c      	ldr	r2, [pc, #496]	; (8001d54 <do_profile_settings.8662+0x5c4>)
 8001b64:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001b68:	497a      	ldr	r1, [pc, #488]	; (8001d54 <do_profile_settings.8662+0x5c4>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						for (int i = 8; i > pos; i--)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	4b78      	ldr	r3, [pc, #480]	; (8001d58 <do_profile_settings.8662+0x5c8>)
 8001b78:	f993 3000 	ldrsb.w	r3, [r3]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	4293      	cmp	r3, r2
 8001b82:	dce1      	bgt.n	8001b48 <do_profile_settings.8662+0x3b8>
						pos++;
 8001b84:	4b74      	ldr	r3, [pc, #464]	; (8001d58 <do_profile_settings.8662+0x5c8>)
 8001b86:	f993 3000 	ldrsb.w	r3, [r3]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	b25a      	sxtb	r2, r3
 8001b92:	4b71      	ldr	r3, [pc, #452]	; (8001d58 <do_profile_settings.8662+0x5c8>)
 8001b94:	701a      	strb	r2, [r3, #0]
						steps[pos].time = 60;
 8001b96:	4b70      	ldr	r3, [pc, #448]	; (8001d58 <do_profile_settings.8662+0x5c8>)
 8001b98:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9c:	4a6d      	ldr	r2, [pc, #436]	; (8001d54 <do_profile_settings.8662+0x5c4>)
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	223c      	movs	r2, #60	; 0x3c
 8001ba4:	605a      	str	r2, [r3, #4]
						steps[pos].temp = 100;
 8001ba6:	4b6c      	ldr	r3, [pc, #432]	; (8001d58 <do_profile_settings.8662+0x5c8>)
 8001ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bac:	4619      	mov	r1, r3
 8001bae:	4b69      	ldr	r3, [pc, #420]	; (8001d54 <do_profile_settings.8662+0x5c4>)
 8001bb0:	2264      	movs	r2, #100	; 0x64
 8001bb2:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
						max_steps++;
 8001bb6:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <do_profile_settings.8662+0x5c0>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b64      	ldr	r3, [pc, #400]	; (8001d50 <do_profile_settings.8662+0x5c0>)
 8001bc0:	701a      	strb	r2, [r3, #0]
						profile_state = 10; // wait for confirmation
 8001bc2:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001bc4:	220a      	movs	r2, #10
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	e00e      	b.n	8001be8 <do_profile_settings.8662+0x458>
				if (diff > 0)
 8001bca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	dd03      	ble.n	8001bda <do_profile_settings.8662+0x44a>
					profile_state = 12;
 8001bd2:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001bd4:	220c      	movs	r2, #12
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	e006      	b.n	8001be8 <do_profile_settings.8662+0x458>
				else if (diff < 0)
 8001bda:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da02      	bge.n	8001be8 <do_profile_settings.8662+0x458>
					profile_state = 23;
 8001be2:	4b55      	ldr	r3, [pc, #340]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001be4:	2217      	movs	r2, #23
 8001be6:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	469c      	mov	ip, r3
 8001bee:	f7ff fd5f 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2109      	movs	r1, #9
 8001bf6:	4851      	ldr	r0, [pc, #324]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001bf8:	f7fe fb9a 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001bfc:	4950      	ldr	r1, [pc, #320]	; (8001d40 <do_profile_settings.8662+0x5b0>)
 8001bfe:	484f      	ldr	r0, [pc, #316]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001c00:	f7fe fb7f 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001c04:	2100      	movs	r1, #0
 8001c06:	484d      	ldr	r0, [pc, #308]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001c08:	f7fe fc18 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 10, 1);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	210a      	movs	r1, #10
 8001c10:	484a      	ldr	r0, [pc, #296]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001c12:	f7fe fb8d 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001c16:	4b4b      	ldr	r3, [pc, #300]	; (8001d44 <do_profile_settings.8662+0x5b4>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf94      	ite	ls
 8001c1e:	2301      	movls	r3, #1
 8001c20:	2300      	movhi	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	2300      	movs	r3, #0
 8001c28:	2101      	movs	r1, #1
 8001c2a:	4844      	ldr	r0, [pc, #272]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001c2c:	f7fe fb1e 	bl	800026c <lcd_mode>
			break;
 8001c30:	e2ac      	b.n	800218c <do_profile_settings.8662+0x9fc>
			if (diff == 0)
 8001c32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d14a      	bne.n	8001cd0 <do_profile_settings.8662+0x540>
				if (last_button && (!encoder.pressed))
 8001c3a:	4b43      	ldr	r3, [pc, #268]	; (8001d48 <do_profile_settings.8662+0x5b8>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d055      	beq.n	8001cee <do_profile_settings.8662+0x55e>
 8001c42:	4b42      	ldr	r3, [pc, #264]	; (8001d4c <do_profile_settings.8662+0x5bc>)
 8001c44:	789b      	ldrb	r3, [r3, #2]
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d04e      	beq.n	8001cee <do_profile_settings.8662+0x55e>
					if (max_steps <= 1)
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <do_profile_settings.8662+0x5c0>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d803      	bhi.n	8001c60 <do_profile_settings.8662+0x4d0>
						profile_state = 14;
 8001c58:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001c5a:	220e      	movs	r2, #14
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	e046      	b.n	8001cee <do_profile_settings.8662+0x55e>
						for (int i = pos; i < 8; i++)
 8001c60:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <do_profile_settings.8662+0x5c8>)
 8001c62:	f993 3000 	ldrsb.w	r3, [r3]
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	e016      	b.n	8001c98 <do_profile_settings.8662+0x508>
							steps[i].time = steps[i+1].time;
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	4a39      	ldr	r2, [pc, #228]	; (8001d54 <do_profile_settings.8662+0x5c4>)
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	4937      	ldr	r1, [pc, #220]	; (8001d54 <do_profile_settings.8662+0x5c4>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	605a      	str	r2, [r3, #4]
							steps[i].temp = steps[i+1].temp;
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	3301      	adds	r3, #1
 8001c84:	4a33      	ldr	r2, [pc, #204]	; (8001d54 <do_profile_settings.8662+0x5c4>)
 8001c86:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001c8a:	4932      	ldr	r1, [pc, #200]	; (8001d54 <do_profile_settings.8662+0x5c4>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						for (int i = pos; i < 8; i++)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b07      	cmp	r3, #7
 8001c9c:	dde5      	ble.n	8001c6a <do_profile_settings.8662+0x4da>
						max_steps--;
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <do_profile_settings.8662+0x5c0>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <do_profile_settings.8662+0x5c0>)
 8001ca8:	701a      	strb	r2, [r3, #0]
						if (pos >= max_steps) 	// if it was last position
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <do_profile_settings.8662+0x5c8>)
 8001cac:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <do_profile_settings.8662+0x5c0>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	db06      	blt.n	8001cc8 <do_profile_settings.8662+0x538>
							pos = max_steps-1; 	// move to the previous one
 8001cba:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <do_profile_settings.8662+0x5c0>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	b25a      	sxtb	r2, r3
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <do_profile_settings.8662+0x5c8>)
 8001cc6:	701a      	strb	r2, [r3, #0]
						profile_state = 1; 	// show profile
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	e00e      	b.n	8001cee <do_profile_settings.8662+0x55e>
				if (diff > 0)
 8001cd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	dd03      	ble.n	8001ce0 <do_profile_settings.8662+0x550>
					profile_state = 10;
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001cda:	220a      	movs	r2, #10
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	e006      	b.n	8001cee <do_profile_settings.8662+0x55e>
				else if (diff < 0)
 8001ce0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	da02      	bge.n	8001cee <do_profile_settings.8662+0x55e>
					profile_state = 11;
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <do_profile_settings.8662+0x5a8>)
 8001cea:	220b      	movs	r2, #11
 8001cec:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	469c      	mov	ip, r3
 8001cf4:	f7ff fcdc 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	2109      	movs	r1, #9
 8001cfc:	480f      	ldr	r0, [pc, #60]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001cfe:	f7fe fb17 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001d02:	490f      	ldr	r1, [pc, #60]	; (8001d40 <do_profile_settings.8662+0x5b0>)
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001d06:	f7fe fafc 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	480b      	ldr	r0, [pc, #44]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001d0e:	f7fe fb95 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 11, 1);
 8001d12:	2201      	movs	r2, #1
 8001d14:	210b      	movs	r1, #11
 8001d16:	4809      	ldr	r0, [pc, #36]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001d18:	f7fe fb0a 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <do_profile_settings.8662+0x5b4>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	bf94      	ite	ls
 8001d24:	2301      	movls	r3, #1
 8001d26:	2300      	movhi	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2101      	movs	r1, #1
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <do_profile_settings.8662+0x5ac>)
 8001d32:	f7fe fa9b 	bl	800026c <lcd_mode>
			break;
 8001d36:	e229      	b.n	800218c <do_profile_settings.8662+0x9fc>
 8001d38:	200002cb 	.word	0x200002cb
 8001d3c:	20000570 	.word	0x20000570
 8001d40:	0800d844 	.word	0x0800d844
 8001d44:	20000235 	.word	0x20000235
 8001d48:	200002d0 	.word	0x200002d0
 8001d4c:	20000238 	.word	0x20000238
 8001d50:	20000020 	.word	0x20000020
 8001d54:	20000268 	.word	0x20000268
 8001d58:	200002ca 	.word	0x200002ca
			if (last_button && (!encoder.pressed)) // wait for confirmation
 8001d5c:	4bad      	ldr	r3, [pc, #692]	; (8002014 <do_profile_settings.8662+0x884>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d009      	beq.n	8001d78 <do_profile_settings.8662+0x5e8>
 8001d64:	4bac      	ldr	r3, [pc, #688]	; (8002018 <do_profile_settings.8662+0x888>)
 8001d66:	789b      	ldrb	r3, [r3, #2]
 8001d68:	f083 0301 	eor.w	r3, r3, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <do_profile_settings.8662+0x5e8>
				profile_state = 10;
 8001d72:	4baa      	ldr	r3, [pc, #680]	; (800201c <do_profile_settings.8662+0x88c>)
 8001d74:	220a      	movs	r2, #10
 8001d76:	701a      	strb	r2, [r3, #0]
			lcd_set_xy(&lcd, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	48a8      	ldr	r0, [pc, #672]	; (8002020 <do_profile_settings.8662+0x890>)
 8001d7e:	f7fe fad7 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "Not possible");
 8001d82:	49a8      	ldr	r1, [pc, #672]	; (8002024 <do_profile_settings.8662+0x894>)
 8001d84:	48a6      	ldr	r0, [pc, #664]	; (8002020 <do_profile_settings.8662+0x890>)
 8001d86:	f7fe fabc 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 0, 1);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	48a4      	ldr	r0, [pc, #656]	; (8002020 <do_profile_settings.8662+0x890>)
 8001d90:	f7fe face 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "max 9 steps ");
 8001d94:	49a4      	ldr	r1, [pc, #656]	; (8002028 <do_profile_settings.8662+0x898>)
 8001d96:	48a2      	ldr	r0, [pc, #648]	; (8002020 <do_profile_settings.8662+0x890>)
 8001d98:	f7fe fab3 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	48a0      	ldr	r0, [pc, #640]	; (8002020 <do_profile_settings.8662+0x890>)
 8001da0:	f7fe fb4c 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 8001da4:	2201      	movs	r2, #1
 8001da6:	210c      	movs	r1, #12
 8001da8:	489d      	ldr	r0, [pc, #628]	; (8002020 <do_profile_settings.8662+0x890>)
 8001daa:	f7fe fac1 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001dae:	4b9f      	ldr	r3, [pc, #636]	; (800202c <do_profile_settings.8662+0x89c>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf94      	ite	ls
 8001db6:	2301      	movls	r3, #1
 8001db8:	2300      	movhi	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4897      	ldr	r0, [pc, #604]	; (8002020 <do_profile_settings.8662+0x890>)
 8001dc4:	f7fe fa52 	bl	800026c <lcd_mode>
			break;
 8001dc8:	e1e0      	b.n	800218c <do_profile_settings.8662+0x9fc>
			if (last_button && (!encoder.pressed)) // wait for confirmation
 8001dca:	4b92      	ldr	r3, [pc, #584]	; (8002014 <do_profile_settings.8662+0x884>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <do_profile_settings.8662+0x656>
 8001dd2:	4b91      	ldr	r3, [pc, #580]	; (8002018 <do_profile_settings.8662+0x888>)
 8001dd4:	789b      	ldrb	r3, [r3, #2]
 8001dd6:	f083 0301 	eor.w	r3, r3, #1
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <do_profile_settings.8662+0x656>
				profile_state = 10;
 8001de0:	4b8e      	ldr	r3, [pc, #568]	; (800201c <do_profile_settings.8662+0x88c>)
 8001de2:	220a      	movs	r2, #10
 8001de4:	701a      	strb	r2, [r3, #0]
			lcd_set_xy(&lcd, 0, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	488d      	ldr	r0, [pc, #564]	; (8002020 <do_profile_settings.8662+0x890>)
 8001dec:	f7fe faa0 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "Not possible");
 8001df0:	498c      	ldr	r1, [pc, #560]	; (8002024 <do_profile_settings.8662+0x894>)
 8001df2:	488b      	ldr	r0, [pc, #556]	; (8002020 <do_profile_settings.8662+0x890>)
 8001df4:	f7fe fa85 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 0, 1);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4888      	ldr	r0, [pc, #544]	; (8002020 <do_profile_settings.8662+0x890>)
 8001dfe:	f7fe fa97 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "min 1 step  ");
 8001e02:	498b      	ldr	r1, [pc, #556]	; (8002030 <do_profile_settings.8662+0x8a0>)
 8001e04:	4886      	ldr	r0, [pc, #536]	; (8002020 <do_profile_settings.8662+0x890>)
 8001e06:	f7fe fa7c 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4884      	ldr	r0, [pc, #528]	; (8002020 <do_profile_settings.8662+0x890>)
 8001e0e:	f7fe fb15 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 8001e12:	2201      	movs	r2, #1
 8001e14:	210c      	movs	r1, #12
 8001e16:	4882      	ldr	r0, [pc, #520]	; (8002020 <do_profile_settings.8662+0x890>)
 8001e18:	f7fe fa8a 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001e1c:	4b83      	ldr	r3, [pc, #524]	; (800202c <do_profile_settings.8662+0x89c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	bf94      	ite	ls
 8001e24:	2301      	movls	r3, #1
 8001e26:	2300      	movhi	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	2101      	movs	r1, #1
 8001e30:	487b      	ldr	r0, [pc, #492]	; (8002020 <do_profile_settings.8662+0x890>)
 8001e32:	f7fe fa1b 	bl	800026c <lcd_mode>
			break;
 8001e36:	e1a9      	b.n	800218c <do_profile_settings.8662+0x9fc>
			if (diff == 0)
 8001e38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10e      	bne.n	8001e5e <do_profile_settings.8662+0x6ce>
				if (last_button && (!encoder.pressed))
 8001e40:	4b74      	ldr	r3, [pc, #464]	; (8002014 <do_profile_settings.8662+0x884>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d019      	beq.n	8001e7c <do_profile_settings.8662+0x6ec>
 8001e48:	4b73      	ldr	r3, [pc, #460]	; (8002018 <do_profile_settings.8662+0x888>)
 8001e4a:	789b      	ldrb	r3, [r3, #2]
 8001e4c:	f083 0301 	eor.w	r3, r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d012      	beq.n	8001e7c <do_profile_settings.8662+0x6ec>
					profile_state = 22; // start edit
 8001e56:	4b71      	ldr	r3, [pc, #452]	; (800201c <do_profile_settings.8662+0x88c>)
 8001e58:	2216      	movs	r2, #22
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	e00e      	b.n	8001e7c <do_profile_settings.8662+0x6ec>
				if (diff > 0)
 8001e5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	dd03      	ble.n	8001e6e <do_profile_settings.8662+0x6de>
					profile_state = 23;
 8001e66:	4b6d      	ldr	r3, [pc, #436]	; (800201c <do_profile_settings.8662+0x88c>)
 8001e68:	2217      	movs	r2, #23
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e006      	b.n	8001e7c <do_profile_settings.8662+0x6ec>
				else if (diff < 0)
 8001e6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	da02      	bge.n	8001e7c <do_profile_settings.8662+0x6ec>
					profile_state = 10;
 8001e76:	4b69      	ldr	r3, [pc, #420]	; (800201c <do_profile_settings.8662+0x88c>)
 8001e78:	220a      	movs	r2, #10
 8001e7a:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	469c      	mov	ip, r3
 8001e82:	f7ff fc15 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8001e86:	2201      	movs	r2, #1
 8001e88:	2109      	movs	r1, #9
 8001e8a:	4865      	ldr	r0, [pc, #404]	; (8002020 <do_profile_settings.8662+0x890>)
 8001e8c:	f7fe fa50 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001e90:	4968      	ldr	r1, [pc, #416]	; (8002034 <do_profile_settings.8662+0x8a4>)
 8001e92:	4863      	ldr	r0, [pc, #396]	; (8002020 <do_profile_settings.8662+0x890>)
 8001e94:	f7fe fa35 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4861      	ldr	r0, [pc, #388]	; (8002020 <do_profile_settings.8662+0x890>)
 8001e9c:	f7fe face 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 2, 1);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	485e      	ldr	r0, [pc, #376]	; (8002020 <do_profile_settings.8662+0x890>)
 8001ea6:	f7fe fa43 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001eaa:	4b60      	ldr	r3, [pc, #384]	; (800202c <do_profile_settings.8662+0x89c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf94      	ite	ls
 8001eb2:	2301      	movls	r3, #1
 8001eb4:	2300      	movhi	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4858      	ldr	r0, [pc, #352]	; (8002020 <do_profile_settings.8662+0x890>)
 8001ec0:	f7fe f9d4 	bl	800026c <lcd_mode>
			break;
 8001ec4:	e162      	b.n	800218c <do_profile_settings.8662+0x9fc>
			if (diff == 0)
 8001ec6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10e      	bne.n	8001eec <do_profile_settings.8662+0x75c>
				if (last_button && (!encoder.pressed))
 8001ece:	4b51      	ldr	r3, [pc, #324]	; (8002014 <do_profile_settings.8662+0x884>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d021      	beq.n	8001f1a <do_profile_settings.8662+0x78a>
 8001ed6:	4b50      	ldr	r3, [pc, #320]	; (8002018 <do_profile_settings.8662+0x888>)
 8001ed8:	789b      	ldrb	r3, [r3, #2]
 8001eda:	f083 0301 	eor.w	r3, r3, #1
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01a      	beq.n	8001f1a <do_profile_settings.8662+0x78a>
					profile_state = 21; // stop editing
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	; (800201c <do_profile_settings.8662+0x88c>)
 8001ee6:	2215      	movs	r2, #21
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	e016      	b.n	8001f1a <do_profile_settings.8662+0x78a>
				steps[pos].temp = change_temperature(steps[pos].temp, diff);
 8001eec:	4b52      	ldr	r3, [pc, #328]	; (8002038 <do_profile_settings.8662+0x8a8>)
 8001eee:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b51      	ldr	r3, [pc, #324]	; (800203c <do_profile_settings.8662+0x8ac>)
 8001ef6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f00:	46a4      	mov	ip, r4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f7ff faa3 	bl	8001450 <change_temperature.8644>
 8001f0a:	4601      	mov	r1, r0
 8001f0c:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <do_profile_settings.8662+0x8a8>)
 8001f0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b49      	ldr	r3, [pc, #292]	; (800203c <do_profile_settings.8662+0x8ac>)
 8001f16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			show_step_menu();
 8001f1a:	f107 0308 	add.w	r3, r7, #8
 8001f1e:	469c      	mov	ip, r3
 8001f20:	f7ff fbc6 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8001f24:	2201      	movs	r2, #1
 8001f26:	2109      	movs	r1, #9
 8001f28:	483d      	ldr	r0, [pc, #244]	; (8002020 <do_profile_settings.8662+0x890>)
 8001f2a:	f7fe fa01 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001f2e:	4941      	ldr	r1, [pc, #260]	; (8002034 <do_profile_settings.8662+0x8a4>)
 8001f30:	483b      	ldr	r0, [pc, #236]	; (8002020 <do_profile_settings.8662+0x890>)
 8001f32:	f7fe f9e6 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001f36:	2100      	movs	r1, #0
 8001f38:	4839      	ldr	r0, [pc, #228]	; (8002020 <do_profile_settings.8662+0x890>)
 8001f3a:	f7fe fa7f 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 2, 1);
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2102      	movs	r1, #2
 8001f42:	4837      	ldr	r0, [pc, #220]	; (8002020 <do_profile_settings.8662+0x890>)
 8001f44:	f7fe f9f4 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 8001f48:	2301      	movs	r3, #1
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4834      	ldr	r0, [pc, #208]	; (8002020 <do_profile_settings.8662+0x890>)
 8001f50:	f7fe f98c 	bl	800026c <lcd_mode>
			break;
 8001f54:	e11a      	b.n	800218c <do_profile_settings.8662+0x9fc>
			if (diff == 0)
 8001f56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10e      	bne.n	8001f7c <do_profile_settings.8662+0x7ec>
				if (last_button && (!encoder.pressed))
 8001f5e:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <do_profile_settings.8662+0x884>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d019      	beq.n	8001f9a <do_profile_settings.8662+0x80a>
 8001f66:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <do_profile_settings.8662+0x888>)
 8001f68:	789b      	ldrb	r3, [r3, #2]
 8001f6a:	f083 0301 	eor.w	r3, r3, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d012      	beq.n	8001f9a <do_profile_settings.8662+0x80a>
					profile_state = 24; // start edit
 8001f74:	4b29      	ldr	r3, [pc, #164]	; (800201c <do_profile_settings.8662+0x88c>)
 8001f76:	2218      	movs	r2, #24
 8001f78:	701a      	strb	r2, [r3, #0]
 8001f7a:	e00e      	b.n	8001f9a <do_profile_settings.8662+0x80a>
				if (diff > 0)
 8001f7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	dd03      	ble.n	8001f8c <do_profile_settings.8662+0x7fc>
					profile_state = 11;
 8001f84:	4b25      	ldr	r3, [pc, #148]	; (800201c <do_profile_settings.8662+0x88c>)
 8001f86:	220b      	movs	r2, #11
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	e006      	b.n	8001f9a <do_profile_settings.8662+0x80a>
				else if (diff < 0)
 8001f8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da02      	bge.n	8001f9a <do_profile_settings.8662+0x80a>
					profile_state = 21;
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <do_profile_settings.8662+0x88c>)
 8001f96:	2215      	movs	r2, #21
 8001f98:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001f9a:	f107 0308 	add.w	r3, r7, #8
 8001f9e:	469c      	mov	ip, r3
 8001fa0:	f7ff fb86 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 0, 1);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	481d      	ldr	r0, [pc, #116]	; (8002020 <do_profile_settings.8662+0x890>)
 8001faa:	f7fe f9c1 	bl	8000330 <lcd_set_xy>
			lcd_set_xy(&lcd, 9, 1);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	2109      	movs	r1, #9
 8001fb2:	481b      	ldr	r0, [pc, #108]	; (8002020 <do_profile_settings.8662+0x890>)
 8001fb4:	f7fe f9bc 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001fb8:	491e      	ldr	r1, [pc, #120]	; (8002034 <do_profile_settings.8662+0x8a4>)
 8001fba:	4819      	ldr	r0, [pc, #100]	; (8002020 <do_profile_settings.8662+0x890>)
 8001fbc:	f7fe f9a1 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4817      	ldr	r0, [pc, #92]	; (8002020 <do_profile_settings.8662+0x890>)
 8001fc4:	f7fe fa3a 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 8, 1);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2108      	movs	r1, #8
 8001fcc:	4814      	ldr	r0, [pc, #80]	; (8002020 <do_profile_settings.8662+0x890>)
 8001fce:	f7fe f9af 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <do_profile_settings.8662+0x89c>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf94      	ite	ls
 8001fda:	2301      	movls	r3, #1
 8001fdc:	2300      	movhi	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	480e      	ldr	r0, [pc, #56]	; (8002020 <do_profile_settings.8662+0x890>)
 8001fe8:	f7fe f940 	bl	800026c <lcd_mode>
			break;
 8001fec:	e0ce      	b.n	800218c <do_profile_settings.8662+0x9fc>
			if (diff == 0)
 8001fee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d124      	bne.n	8002040 <do_profile_settings.8662+0x8b0>
				if (last_button && (!encoder.pressed))
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <do_profile_settings.8662+0x884>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d037      	beq.n	800206e <do_profile_settings.8662+0x8de>
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <do_profile_settings.8662+0x888>)
 8002000:	789b      	ldrb	r3, [r3, #2]
 8002002:	f083 0301 	eor.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d030      	beq.n	800206e <do_profile_settings.8662+0x8de>
					profile_state = 23; // stop editing
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <do_profile_settings.8662+0x88c>)
 800200e:	2217      	movs	r2, #23
 8002010:	701a      	strb	r2, [r3, #0]
 8002012:	e02c      	b.n	800206e <do_profile_settings.8662+0x8de>
 8002014:	200002d0 	.word	0x200002d0
 8002018:	20000238 	.word	0x20000238
 800201c:	200002cb 	.word	0x200002cb
 8002020:	20000570 	.word	0x20000570
 8002024:	0800d848 	.word	0x0800d848
 8002028:	0800d858 	.word	0x0800d858
 800202c:	20000235 	.word	0x20000235
 8002030:	0800d868 	.word	0x0800d868
 8002034:	0800d844 	.word	0x0800d844
 8002038:	200002ca 	.word	0x200002ca
 800203c:	20000268 	.word	0x20000268
				steps[pos].time = change_time(steps[pos].time, diff, true);
 8002040:	4b57      	ldr	r3, [pc, #348]	; (80021a0 <do_profile_settings.8662+0xa10>)
 8002042:	f993 3000 	ldrsb.w	r3, [r3]
 8002046:	4a57      	ldr	r2, [pc, #348]	; (80021a4 <do_profile_settings.8662+0xa14>)
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4a54      	ldr	r2, [pc, #336]	; (80021a0 <do_profile_settings.8662+0xa10>)
 8002050:	f992 2000 	ldrsb.w	r2, [r2]
 8002054:	4615      	mov	r5, r2
 8002056:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800205a:	46a4      	mov	ip, r4
 800205c:	2201      	movs	r2, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fa2e 	bl	80014c0 <change_time.8650>
 8002064:	4602      	mov	r2, r0
 8002066:	494f      	ldr	r1, [pc, #316]	; (80021a4 <do_profile_settings.8662+0xa14>)
 8002068:	00eb      	lsls	r3, r5, #3
 800206a:	440b      	add	r3, r1
 800206c:	605a      	str	r2, [r3, #4]
			show_step_menu();
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	469c      	mov	ip, r3
 8002074:	f7ff fb1c 	bl	80016b0 <show_step_menu.8672>
			lcd_set_xy(&lcd, 9, 1);
 8002078:	2201      	movs	r2, #1
 800207a:	2109      	movs	r1, #9
 800207c:	484a      	ldr	r0, [pc, #296]	; (80021a8 <do_profile_settings.8662+0xa18>)
 800207e:	f7fe f957 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8002082:	494a      	ldr	r1, [pc, #296]	; (80021ac <do_profile_settings.8662+0xa1c>)
 8002084:	4848      	ldr	r0, [pc, #288]	; (80021a8 <do_profile_settings.8662+0xa18>)
 8002086:	f7fe f93c 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 800208a:	2100      	movs	r1, #0
 800208c:	4846      	ldr	r0, [pc, #280]	; (80021a8 <do_profile_settings.8662+0xa18>)
 800208e:	f7fe f9d5 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 8, 1);
 8002092:	2201      	movs	r2, #1
 8002094:	2108      	movs	r1, #8
 8002096:	4844      	ldr	r0, [pc, #272]	; (80021a8 <do_profile_settings.8662+0xa18>)
 8002098:	f7fe f94a 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 800209c:	2301      	movs	r3, #1
 800209e:	2200      	movs	r2, #0
 80020a0:	2101      	movs	r1, #1
 80020a2:	4841      	ldr	r0, [pc, #260]	; (80021a8 <do_profile_settings.8662+0xa18>)
 80020a4:	f7fe f8e2 	bl	800026c <lcd_mode>
			break;
 80020a8:	e070      	b.n	800218c <do_profile_settings.8662+0x9fc>
			lcd_set_xy(&lcd, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	483e      	ldr	r0, [pc, #248]	; (80021a8 <do_profile_settings.8662+0xa18>)
 80020b0:	f7fe f93e 	bl	8000330 <lcd_set_xy>
			lcd_write_data(&lcd, ' ');
 80020b4:	2120      	movs	r1, #32
 80020b6:	483c      	ldr	r0, [pc, #240]	; (80021a8 <do_profile_settings.8662+0xa18>)
 80020b8:	f7fe f9c0 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, scSIGMA);
 80020bc:	21f6      	movs	r1, #246	; 0xf6
 80020be:	483a      	ldr	r0, [pc, #232]	; (80021a8 <do_profile_settings.8662+0xa18>)
 80020c0:	f7fe f9bc 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, ' ');
 80020c4:	2120      	movs	r1, #32
 80020c6:	4838      	ldr	r0, [pc, #224]	; (80021a8 <do_profile_settings.8662+0xa18>)
 80020c8:	f7fe f9b8 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, max_steps + '0');
 80020cc:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <do_profile_settings.8662+0xa20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	3330      	adds	r3, #48	; 0x30
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	4619      	mov	r1, r3
 80020d6:	4834      	ldr	r0, [pc, #208]	; (80021a8 <do_profile_settings.8662+0xa18>)
 80020d8:	f7fe f9b0 	bl	800043c <lcd_write_data>
			lcd_string(&lcd, " steps  ");
 80020dc:	4935      	ldr	r1, [pc, #212]	; (80021b4 <do_profile_settings.8662+0xa24>)
 80020de:	4832      	ldr	r0, [pc, #200]	; (80021a8 <do_profile_settings.8662+0xa18>)
 80020e0:	f7fe f90f 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 0, 1);
 80020e4:	2201      	movs	r2, #1
 80020e6:	2100      	movs	r1, #0
 80020e8:	482f      	ldr	r0, [pc, #188]	; (80021a8 <do_profile_settings.8662+0xa18>)
 80020ea:	f7fe f921 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "start prof. ");
 80020ee:	4932      	ldr	r1, [pc, #200]	; (80021b8 <do_profile_settings.8662+0xa28>)
 80020f0:	482d      	ldr	r0, [pc, #180]	; (80021a8 <do_profile_settings.8662+0xa18>)
 80020f2:	f7fe f906 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 80020f6:	2100      	movs	r1, #0
 80020f8:	482b      	ldr	r0, [pc, #172]	; (80021a8 <do_profile_settings.8662+0xa18>)
 80020fa:	f7fe f99f 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 80020fe:	2201      	movs	r2, #1
 8002100:	210c      	movs	r1, #12
 8002102:	4829      	ldr	r0, [pc, #164]	; (80021a8 <do_profile_settings.8662+0xa18>)
 8002104:	f7fe f914 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8002108:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <do_profile_settings.8662+0xa2c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b04      	cmp	r3, #4
 800210e:	bf94      	ite	ls
 8002110:	2301      	movls	r3, #1
 8002112:	2300      	movhi	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	2300      	movs	r3, #0
 800211a:	2101      	movs	r1, #1
 800211c:	4822      	ldr	r0, [pc, #136]	; (80021a8 <do_profile_settings.8662+0xa18>)
 800211e:	f7fe f8a5 	bl	800026c <lcd_mode>
			if (diff == 0)
 8002122:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d110      	bne.n	800214c <do_profile_settings.8662+0x9bc>
				if (last_button && (!encoder.pressed))
 800212a:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <do_profile_settings.8662+0xa30>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d02b      	beq.n	800218a <do_profile_settings.8662+0x9fa>
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <do_profile_settings.8662+0xa34>)
 8002134:	789b      	ldrb	r3, [r3, #2]
 8002136:	f083 0301 	eor.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d024      	beq.n	800218a <do_profile_settings.8662+0x9fa>
					lcd_mini_clear(&lcd);
 8002140:	46a4      	mov	ip, r4
 8002142:	4819      	ldr	r0, [pc, #100]	; (80021a8 <do_profile_settings.8662+0xa18>)
 8002144:	f7fe fda0 	bl	8000c88 <lcd_mini_clear.8640>
					return true;
 8002148:	2301      	movs	r3, #1
 800214a:	e024      	b.n	8002196 <do_profile_settings.8662+0xa06>
				if (diff > 0)
 800214c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002150:	2b00      	cmp	r3, #0
 8002152:	dd03      	ble.n	800215c <do_profile_settings.8662+0x9cc>
					pos = 0;
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <do_profile_settings.8662+0xa10>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	e00a      	b.n	8002172 <do_profile_settings.8662+0x9e2>
				else if (diff < 0)
 800215c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002160:	2b00      	cmp	r3, #0
 8002162:	da06      	bge.n	8002172 <do_profile_settings.8662+0x9e2>
					pos = max_steps - 1;
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <do_profile_settings.8662+0xa20>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	3b01      	subs	r3, #1
 800216a:	b2db      	uxtb	r3, r3
 800216c:	b25a      	sxtb	r2, r3
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <do_profile_settings.8662+0xa10>)
 8002170:	701a      	strb	r2, [r3, #0]
				profile_state = 1;
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <do_profile_settings.8662+0xa38>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
			break;
 8002178:	e007      	b.n	800218a <do_profile_settings.8662+0x9fa>
			global_error |= errFATAL;
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <do_profile_settings.8662+0xa3c>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <do_profile_settings.8662+0xa3c>)
 8002186:	701a      	strb	r2, [r3, #0]
			break;
 8002188:	e000      	b.n	800218c <do_profile_settings.8662+0x9fc>
			break;
 800218a:	bf00      	nop
		last_button = encoder.pressed;
 800218c:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <do_profile_settings.8662+0xa34>)
 800218e:	789a      	ldrb	r2, [r3, #2]
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <do_profile_settings.8662+0xa30>)
 8002192:	701a      	strb	r2, [r3, #0]
		return false;
 8002194:	2300      	movs	r3, #0
	}
 8002196:	4618      	mov	r0, r3
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bdb0      	pop	{r4, r5, r7, pc}
 800219e:	bf00      	nop
 80021a0:	200002ca 	.word	0x200002ca
 80021a4:	20000268 	.word	0x20000268
 80021a8:	20000570 	.word	0x20000570
 80021ac:	0800d844 	.word	0x0800d844
 80021b0:	20000020 	.word	0x20000020
 80021b4:	0800d878 	.word	0x0800d878
 80021b8:	0800d884 	.word	0x0800d884
 80021bc:	20000235 	.word	0x20000235
 80021c0:	200002d0 	.word	0x200002d0
 80021c4:	20000238 	.word	0x20000238
 80021c8:	200002cb 	.word	0x200002cb
 80021cc:	20000234 	.word	0x20000234

080021d0 <do_reflow.8698>:
	{
 80021d0:	b5b0      	push	{r4, r5, r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
 80021da:	4664      	mov	r4, ip
 80021dc:	f8c7 c000 	str.w	ip, [r7]
		if (reset)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00e      	beq.n	8002204 <do_reflow.8698+0x34>
			last_time = HAL_GetTick();
 80021e6:	f001 fcbd 	bl	8003b64 <HAL_GetTick>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4aa7      	ldr	r2, [pc, #668]	; (800248c <do_reflow.8698+0x2bc>)
 80021ee:	6013      	str	r3, [r2, #0]
			peep_first_time = true;
 80021f0:	4ba7      	ldr	r3, [pc, #668]	; (8002490 <do_reflow.8698+0x2c0>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
			last_button = false;
 80021f6:	4ba7      	ldr	r3, [pc, #668]	; (8002494 <do_reflow.8698+0x2c4>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
			pos = 0;
 80021fc:	4ba6      	ldr	r3, [pc, #664]	; (8002498 <do_reflow.8698+0x2c8>)
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
			return;
 8002202:	e321      	b.n	8002848 <do_reflow.8698+0x678>
		int32_t dt = ((int32_t)(temperature_SP<<2)) -
 8002204:	4ba5      	ldr	r3, [pc, #660]	; (800249c <do_reflow.8698+0x2cc>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	009b      	lsls	r3, r3, #2
					 ((int32_t)MAX6675.temperature);
 800220a:	4aa5      	ldr	r2, [pc, #660]	; (80024a0 <do_reflow.8698+0x2d0>)
 800220c:	8812      	ldrh	r2, [r2, #0]
		int32_t dt = ((int32_t)(temperature_SP<<2)) -
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	61fb      	str	r3, [r7, #28]
		if (pos >= (2*max_steps))
 8002212:	4ba1      	ldr	r3, [pc, #644]	; (8002498 <do_reflow.8698+0x2c8>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	4ba2      	ldr	r3, [pc, #648]	; (80024a4 <do_reflow.8698+0x2d4>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	429a      	cmp	r2, r3
 8002222:	db79      	blt.n	8002318 <do_reflow.8698+0x148>
			if (peep_first_time)
 8002224:	4b9a      	ldr	r3, [pc, #616]	; (8002490 <do_reflow.8698+0x2c0>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <do_reflow.8698+0x6e>
				peep.melody = melodyLEVEL_COMPLETE;
 800222c:	4b9e      	ldr	r3, [pc, #632]	; (80024a8 <do_reflow.8698+0x2d8>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
				peep.peep = true;
 8002232:	4b9d      	ldr	r3, [pc, #628]	; (80024a8 <do_reflow.8698+0x2d8>)
 8002234:	2201      	movs	r2, #1
 8002236:	705a      	strb	r2, [r3, #1]
				peep_first_time = false;
 8002238:	4b95      	ldr	r3, [pc, #596]	; (8002490 <do_reflow.8698+0x2c0>)
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
			if (encoder.pressed)
 800223e:	4b9b      	ldr	r3, [pc, #620]	; (80024ac <do_reflow.8698+0x2dc>)
 8002240:	789b      	ldrb	r3, [r3, #2]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <do_reflow.8698+0x7c>
				peep.peep = false;
 8002246:	4b98      	ldr	r3, [pc, #608]	; (80024a8 <do_reflow.8698+0x2d8>)
 8002248:	2200      	movs	r2, #0
 800224a:	705a      	strb	r2, [r3, #1]
			temperature_SP = 0;
 800224c:	4b93      	ldr	r3, [pc, #588]	; (800249c <do_reflow.8698+0x2cc>)
 800224e:	2200      	movs	r2, #0
 8002250:	801a      	strh	r2, [r3, #0]
			lcd_set_xy(&lcd, 0, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	4896      	ldr	r0, [pc, #600]	; (80024b0 <do_reflow.8698+0x2e0>)
 8002258:	f7fe f86a 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "Cooldown    ");
 800225c:	4995      	ldr	r1, [pc, #596]	; (80024b4 <do_reflow.8698+0x2e4>)
 800225e:	4894      	ldr	r0, [pc, #592]	; (80024b0 <do_reflow.8698+0x2e0>)
 8002260:	f7fe f84f 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 7, 1);
 8002264:	2201      	movs	r2, #1
 8002266:	2107      	movs	r1, #7
 8002268:	4891      	ldr	r0, [pc, #580]	; (80024b0 <do_reflow.8698+0x2e0>)
 800226a:	f7fe f861 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "+");
 800226e:	4992      	ldr	r1, [pc, #584]	; (80024b8 <do_reflow.8698+0x2e8>)
 8002270:	488f      	ldr	r0, [pc, #572]	; (80024b0 <do_reflow.8698+0x2e0>)
 8002272:	f7fe f846 	bl	8000302 <lcd_string>
			lcd_string(&lcd, int2time((HAL_GetTick() - last_time)/1000, time_buf));
 8002276:	f001 fc75 	bl	8003b64 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	4b83      	ldr	r3, [pc, #524]	; (800248c <do_reflow.8698+0x2bc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	4a8e      	ldr	r2, [pc, #568]	; (80024bc <do_reflow.8698+0x2ec>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	f107 0210 	add.w	r2, r7, #16
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f98f 	bl	80005b4 <int2time>
 8002296:	4603      	mov	r3, r0
 8002298:	4619      	mov	r1, r3
 800229a:	4885      	ldr	r0, [pc, #532]	; (80024b0 <do_reflow.8698+0x2e0>)
 800229c:	f7fe f831 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ' ');
 80022a0:	2120      	movs	r1, #32
 80022a2:	4883      	ldr	r0, [pc, #524]	; (80024b0 <do_reflow.8698+0x2e0>)
 80022a4:	f7fe f8ca 	bl	800043c <lcd_write_data>
			if (peep.peep)
 80022a8:	4b7f      	ldr	r3, [pc, #508]	; (80024a8 <do_reflow.8698+0x2d8>)
 80022aa:	785b      	ldrb	r3, [r3, #1]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d023      	beq.n	80022f8 <do_reflow.8698+0x128>
				lcd_set_xy(&lcd, 0, 1);
 80022b0:	2201      	movs	r2, #1
 80022b2:	2100      	movs	r1, #0
 80022b4:	487e      	ldr	r0, [pc, #504]	; (80024b0 <do_reflow.8698+0x2e0>)
 80022b6:	f7fe f83b 	bl	8000330 <lcd_set_xy>
				lcd_string(&lcd, "mute");
 80022ba:	4981      	ldr	r1, [pc, #516]	; (80024c0 <do_reflow.8698+0x2f0>)
 80022bc:	487c      	ldr	r0, [pc, #496]	; (80024b0 <do_reflow.8698+0x2e0>)
 80022be:	f7fe f820 	bl	8000302 <lcd_string>
				lcd_write_data(&lcd, ccENTER);
 80022c2:	2100      	movs	r1, #0
 80022c4:	487a      	ldr	r0, [pc, #488]	; (80024b0 <do_reflow.8698+0x2e0>)
 80022c6:	f7fe f8b9 	bl	800043c <lcd_write_data>
				lcd_string(&lcd, "  ");
 80022ca:	497e      	ldr	r1, [pc, #504]	; (80024c4 <do_reflow.8698+0x2f4>)
 80022cc:	4878      	ldr	r0, [pc, #480]	; (80024b0 <do_reflow.8698+0x2e0>)
 80022ce:	f7fe f818 	bl	8000302 <lcd_string>
				lcd_set_xy(&lcd, 4, 1);
 80022d2:	2201      	movs	r2, #1
 80022d4:	2104      	movs	r1, #4
 80022d6:	4876      	ldr	r0, [pc, #472]	; (80024b0 <do_reflow.8698+0x2e0>)
 80022d8:	f7fe f82a 	bl	8000330 <lcd_set_xy>
				lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 80022dc:	4b7a      	ldr	r3, [pc, #488]	; (80024c8 <do_reflow.8698+0x2f8>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	bf94      	ite	ls
 80022e4:	2301      	movls	r3, #1
 80022e6:	2300      	movhi	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	2300      	movs	r3, #0
 80022ee:	2101      	movs	r1, #1
 80022f0:	486f      	ldr	r0, [pc, #444]	; (80024b0 <do_reflow.8698+0x2e0>)
 80022f2:	f7fd ffbb 	bl	800026c <lcd_mode>
			return;
 80022f6:	e2a7      	b.n	8002848 <do_reflow.8698+0x678>
				lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 80022f8:	2300      	movs	r3, #0
 80022fa:	2200      	movs	r2, #0
 80022fc:	2101      	movs	r1, #1
 80022fe:	486c      	ldr	r0, [pc, #432]	; (80024b0 <do_reflow.8698+0x2e0>)
 8002300:	f7fd ffb4 	bl	800026c <lcd_mode>
				lcd_set_xy(&lcd, 0, 1);
 8002304:	2201      	movs	r2, #1
 8002306:	2100      	movs	r1, #0
 8002308:	4869      	ldr	r0, [pc, #420]	; (80024b0 <do_reflow.8698+0x2e0>)
 800230a:	f7fe f811 	bl	8000330 <lcd_set_xy>
				lcd_string(&lcd, "       ");
 800230e:	496f      	ldr	r1, [pc, #444]	; (80024cc <do_reflow.8698+0x2fc>)
 8002310:	4867      	ldr	r0, [pc, #412]	; (80024b0 <do_reflow.8698+0x2e0>)
 8002312:	f7fd fff6 	bl	8000302 <lcd_string>
			return;
 8002316:	e297      	b.n	8002848 <do_reflow.8698+0x678>
		if (pos%2 == 0)
 8002318:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <do_reflow.8698+0x2c8>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d15e      	bne.n	80023e6 <do_reflow.8698+0x216>
			temperature_SP = steps[pos>>1].temp;
 8002328:	4b5b      	ldr	r3, [pc, #364]	; (8002498 <do_reflow.8698+0x2c8>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	085b      	lsrs	r3, r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	4b66      	ldr	r3, [pc, #408]	; (80024d0 <do_reflow.8698+0x300>)
 8002336:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800233a:	b29a      	uxth	r2, r3
 800233c:	4b57      	ldr	r3, [pc, #348]	; (800249c <do_reflow.8698+0x2cc>)
 800233e:	801a      	strh	r2, [r3, #0]
			time_buf[0] = '+';
 8002340:	232b      	movs	r3, #43	; 0x2b
 8002342:	743b      	strb	r3, [r7, #16]
			int2time((HAL_GetTick() - last_time)/1000, time_buf+1);
 8002344:	f001 fc0e 	bl	8003b64 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	4b50      	ldr	r3, [pc, #320]	; (800248c <do_reflow.8698+0x2bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	4a5a      	ldr	r2, [pc, #360]	; (80024bc <do_reflow.8698+0x2ec>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	099a      	lsrs	r2, r3, #6
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	3301      	adds	r3, #1
 800235e:	4619      	mov	r1, r3
 8002360:	4610      	mov	r0, r2
 8002362:	f7fe f927 	bl	80005b4 <int2time>
			lcd_set_xy(&lcd, 0, 1);
 8002366:	2201      	movs	r2, #1
 8002368:	2100      	movs	r1, #0
 800236a:	4851      	ldr	r0, [pc, #324]	; (80024b0 <do_reflow.8698+0x2e0>)
 800236c:	f7fd ffe0 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "goto");
 8002370:	4958      	ldr	r1, [pc, #352]	; (80024d4 <do_reflow.8698+0x304>)
 8002372:	484f      	ldr	r0, [pc, #316]	; (80024b0 <do_reflow.8698+0x2e0>)
 8002374:	f7fd ffc5 	bl	8000302 <lcd_string>
			if ((dt > -(4<<2)) && (dt < (4<<2)))
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f113 0f0f 	cmn.w	r3, #15
 800237e:	db2c      	blt.n	80023da <do_reflow.8698+0x20a>
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	dc29      	bgt.n	80023da <do_reflow.8698+0x20a>
				if (HAL_GetTick() - check_time > 3000) // we should be at least some time in range
 8002386:	f001 fbed 	bl	8003b64 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	4b52      	ldr	r3, [pc, #328]	; (80024d8 <do_reflow.8698+0x308>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002396:	4293      	cmp	r3, r2
 8002398:	f240 80c8 	bls.w	800252c <do_reflow.8698+0x35c>
					last_time = HAL_GetTick();
 800239c:	f001 fbe2 	bl	8003b64 <HAL_GetTick>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4a3a      	ldr	r2, [pc, #232]	; (800248c <do_reflow.8698+0x2bc>)
 80023a4:	6013      	str	r3, [r2, #0]
					pos++;
 80023a6:	4b3c      	ldr	r3, [pc, #240]	; (8002498 <do_reflow.8698+0x2c8>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b39      	ldr	r3, [pc, #228]	; (8002498 <do_reflow.8698+0x2c8>)
 80023b2:	701a      	strb	r2, [r3, #0]
					temperature_SP = steps[pos>>1].temp;
 80023b4:	4b38      	ldr	r3, [pc, #224]	; (8002498 <do_reflow.8698+0x2c8>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	085b      	lsrs	r3, r3, #1
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <do_reflow.8698+0x300>)
 80023c2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4b34      	ldr	r3, [pc, #208]	; (800249c <do_reflow.8698+0x2cc>)
 80023ca:	801a      	strh	r2, [r3, #0]
					peep.melody = melodyCOIN;
 80023cc:	4b36      	ldr	r3, [pc, #216]	; (80024a8 <do_reflow.8698+0x2d8>)
 80023ce:	2203      	movs	r2, #3
 80023d0:	701a      	strb	r2, [r3, #0]
					peep.peep = true;
 80023d2:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <do_reflow.8698+0x2d8>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	705a      	strb	r2, [r3, #1]
				if (HAL_GetTick() - check_time > 3000) // we should be at least some time in range
 80023d8:	e0a8      	b.n	800252c <do_reflow.8698+0x35c>
				check_time = HAL_GetTick();
 80023da:	f001 fbc3 	bl	8003b64 <HAL_GetTick>
 80023de:	4603      	mov	r3, r0
 80023e0:	4a3d      	ldr	r2, [pc, #244]	; (80024d8 <do_reflow.8698+0x308>)
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	e0a2      	b.n	800252c <do_reflow.8698+0x35c>
			temperature_SP = steps[pos>>1].temp;
 80023e6:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <do_reflow.8698+0x2c8>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	085b      	lsrs	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <do_reflow.8698+0x300>)
 80023f4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	4b28      	ldr	r3, [pc, #160]	; (800249c <do_reflow.8698+0x2cc>)
 80023fc:	801a      	strh	r2, [r3, #0]
			if (HAL_GetTick() - last_time >= steps[pos>>1].time*1000)
 80023fe:	f001 fbb1 	bl	8003b64 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <do_reflow.8698+0x2bc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	1ad2      	subs	r2, r2, r3
 800240a:	4b23      	ldr	r3, [pc, #140]	; (8002498 <do_reflow.8698+0x2c8>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	085b      	lsrs	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	492e      	ldr	r1, [pc, #184]	; (80024d0 <do_reflow.8698+0x300>)
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	429a      	cmp	r2, r3
 8002426:	d359      	bcc.n	80024dc <do_reflow.8698+0x30c>
				last_time = HAL_GetTick();
 8002428:	f001 fb9c 	bl	8003b64 <HAL_GetTick>
 800242c:	4603      	mov	r3, r0
 800242e:	4a17      	ldr	r2, [pc, #92]	; (800248c <do_reflow.8698+0x2bc>)
 8002430:	6013      	str	r3, [r2, #0]
				check_time = HAL_GetTick();
 8002432:	f001 fb97 	bl	8003b64 <HAL_GetTick>
 8002436:	4603      	mov	r3, r0
 8002438:	4a27      	ldr	r2, [pc, #156]	; (80024d8 <do_reflow.8698+0x308>)
 800243a:	6013      	str	r3, [r2, #0]
				pos++;
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <do_reflow.8698+0x2c8>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	3301      	adds	r3, #1
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <do_reflow.8698+0x2c8>)
 8002448:	701a      	strb	r2, [r3, #0]
				if (pos < (2*max_steps))
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <do_reflow.8698+0x2c8>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <do_reflow.8698+0x2d4>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	429a      	cmp	r2, r3
 800245a:	da12      	bge.n	8002482 <do_reflow.8698+0x2b2>
					temperature_SP = steps[pos>>1].temp;
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <do_reflow.8698+0x2c8>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	085b      	lsrs	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <do_reflow.8698+0x300>)
 800246a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800246e:	b29a      	uxth	r2, r3
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <do_reflow.8698+0x2cc>)
 8002472:	801a      	strh	r2, [r3, #0]
					peep.melody = melodyCOIN;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <do_reflow.8698+0x2d8>)
 8002476:	2203      	movs	r2, #3
 8002478:	701a      	strb	r2, [r3, #0]
					peep.peep = true;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <do_reflow.8698+0x2d8>)
 800247c:	2201      	movs	r2, #1
 800247e:	705a      	strb	r2, [r3, #1]
 8002480:	e054      	b.n	800252c <do_reflow.8698+0x35c>
					temperature_SP = 0;
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <do_reflow.8698+0x2cc>)
 8002484:	2200      	movs	r2, #0
 8002486:	801a      	strh	r2, [r3, #0]
 8002488:	e050      	b.n	800252c <do_reflow.8698+0x35c>
 800248a:	bf00      	nop
 800248c:	200002d4 	.word	0x200002d4
 8002490:	2000002c 	.word	0x2000002c
 8002494:	200002d8 	.word	0x200002d8
 8002498:	200002d9 	.word	0x200002d9
 800249c:	2000024a 	.word	0x2000024a
 80024a0:	2000023c 	.word	0x2000023c
 80024a4:	20000020 	.word	0x20000020
 80024a8:	2000001c 	.word	0x2000001c
 80024ac:	20000238 	.word	0x20000238
 80024b0:	20000570 	.word	0x20000570
 80024b4:	0800d894 	.word	0x0800d894
 80024b8:	0800d8a4 	.word	0x0800d8a4
 80024bc:	10624dd3 	.word	0x10624dd3
 80024c0:	0800d8a8 	.word	0x0800d8a8
 80024c4:	0800d8b0 	.word	0x0800d8b0
 80024c8:	20000235 	.word	0x20000235
 80024cc:	0800d8b4 	.word	0x0800d8b4
 80024d0:	20000268 	.word	0x20000268
 80024d4:	0800d8bc 	.word	0x0800d8bc
 80024d8:	200002dc 	.word	0x200002dc
				time_buf[0] = '-';
 80024dc:	232d      	movs	r3, #45	; 0x2d
 80024de:	743b      	strb	r3, [r7, #16]
				int2time(steps[pos>>1].time - (HAL_GetTick() - last_time + 1000)/1000, time_buf+1);
 80024e0:	4b9a      	ldr	r3, [pc, #616]	; (800274c <do_reflow.8698+0x57c>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	085b      	lsrs	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	4a99      	ldr	r2, [pc, #612]	; (8002750 <do_reflow.8698+0x580>)
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	685d      	ldr	r5, [r3, #4]
 80024f2:	f001 fb37 	bl	8003b64 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	4b96      	ldr	r3, [pc, #600]	; (8002754 <do_reflow.8698+0x584>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002502:	4a95      	ldr	r2, [pc, #596]	; (8002758 <do_reflow.8698+0x588>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	1aea      	subs	r2, r5, r3
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	3301      	adds	r3, #1
 8002512:	4619      	mov	r1, r3
 8002514:	4610      	mov	r0, r2
 8002516:	f7fe f84d 	bl	80005b4 <int2time>
				lcd_set_xy(&lcd, 0, 1);
 800251a:	2201      	movs	r2, #1
 800251c:	2100      	movs	r1, #0
 800251e:	488f      	ldr	r0, [pc, #572]	; (800275c <do_reflow.8698+0x58c>)
 8002520:	f7fd ff06 	bl	8000330 <lcd_set_xy>
				lcd_string(&lcd, "hold");
 8002524:	498e      	ldr	r1, [pc, #568]	; (8002760 <do_reflow.8698+0x590>)
 8002526:	488d      	ldr	r0, [pc, #564]	; (800275c <do_reflow.8698+0x58c>)
 8002528:	f7fd feeb 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 0);
 800252c:	2200      	movs	r2, #0
 800252e:	2100      	movs	r1, #0
 8002530:	488a      	ldr	r0, [pc, #552]	; (800275c <do_reflow.8698+0x58c>)
 8002532:	f7fd fefd 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, '#');
 8002536:	2123      	movs	r1, #35	; 0x23
 8002538:	4888      	ldr	r0, [pc, #544]	; (800275c <do_reflow.8698+0x58c>)
 800253a:	f7fd ff7f 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, (pos>>1)+'1');
 800253e:	4b83      	ldr	r3, [pc, #524]	; (800274c <do_reflow.8698+0x57c>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	3331      	adds	r3, #49	; 0x31
 800254a:	b2db      	uxtb	r3, r3
 800254c:	4619      	mov	r1, r3
 800254e:	4883      	ldr	r0, [pc, #524]	; (800275c <do_reflow.8698+0x58c>)
 8002550:	f7fd ff74 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, '/');
 8002554:	212f      	movs	r1, #47	; 0x2f
 8002556:	4881      	ldr	r0, [pc, #516]	; (800275c <do_reflow.8698+0x58c>)
 8002558:	f7fd ff70 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, max_steps + '0');
 800255c:	4b81      	ldr	r3, [pc, #516]	; (8002764 <do_reflow.8698+0x594>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	3330      	adds	r3, #48	; 0x30
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	487d      	ldr	r0, [pc, #500]	; (800275c <do_reflow.8698+0x58c>)
 8002568:	f7fd ff68 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 7, 1);
 800256c:	2201      	movs	r2, #1
 800256e:	2107      	movs	r1, #7
 8002570:	487a      	ldr	r0, [pc, #488]	; (800275c <do_reflow.8698+0x58c>)
 8002572:	f7fd fedd 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, (char*)time_buf);
 8002576:	f107 0310 	add.w	r3, r7, #16
 800257a:	4619      	mov	r1, r3
 800257c:	4877      	ldr	r0, [pc, #476]	; (800275c <do_reflow.8698+0x58c>)
 800257e:	f7fd fec0 	bl	8000302 <lcd_string>
		int2string(temperature_SP, buf, sizeof(buf));
 8002582:	4b79      	ldr	r3, [pc, #484]	; (8002768 <do_reflow.8698+0x598>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f107 030c 	add.w	r3, r7, #12
 800258c:	2203      	movs	r2, #3
 800258e:	4619      	mov	r1, r3
 8002590:	f7fd ffd2 	bl	8000538 <int2string>
		lcd_set_xy(&lcd, 7, 0);
 8002594:	2200      	movs	r2, #0
 8002596:	2107      	movs	r1, #7
 8002598:	4870      	ldr	r0, [pc, #448]	; (800275c <do_reflow.8698+0x58c>)
 800259a:	f7fd fec9 	bl	8000330 <lcd_set_xy>
		lcd_out(&lcd, buf, sizeof(buf));
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	2203      	movs	r2, #3
 80025a4:	4619      	mov	r1, r3
 80025a6:	486d      	ldr	r0, [pc, #436]	; (800275c <do_reflow.8698+0x58c>)
 80025a8:	f7fd fe8d 	bl	80002c6 <lcd_out>
		lcd_write_data(&lcd, scGRAD); // grad
 80025ac:	21df      	movs	r1, #223	; 0xdf
 80025ae:	486b      	ldr	r0, [pc, #428]	; (800275c <do_reflow.8698+0x58c>)
 80025b0:	f7fd ff44 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, scAR); // arrow right
 80025b4:	217e      	movs	r1, #126	; 0x7e
 80025b6:	4869      	ldr	r0, [pc, #420]	; (800275c <do_reflow.8698+0x58c>)
 80025b8:	f7fd ff40 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 9, 0);
 80025bc:	2200      	movs	r2, #0
 80025be:	2109      	movs	r1, #9
 80025c0:	4866      	ldr	r0, [pc, #408]	; (800275c <do_reflow.8698+0x58c>)
 80025c2:	f7fd feb5 	bl	8000330 <lcd_set_xy>
		if (last_pos != pos)
 80025c6:	4b69      	ldr	r3, [pc, #420]	; (800276c <do_reflow.8698+0x59c>)
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	4b60      	ldr	r3, [pc, #384]	; (800274c <do_reflow.8698+0x57c>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d002      	beq.n	80025da <do_reflow.8698+0x40a>
			rf_ui_state = 0;
 80025d4:	4b66      	ldr	r3, [pc, #408]	; (8002770 <do_reflow.8698+0x5a0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
		last_pos = pos;
 80025da:	4b5c      	ldr	r3, [pc, #368]	; (800274c <do_reflow.8698+0x57c>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b62      	ldr	r3, [pc, #392]	; (800276c <do_reflow.8698+0x59c>)
 80025e2:	701a      	strb	r2, [r3, #0]
		switch (rf_ui_state)
 80025e4:	4b62      	ldr	r3, [pc, #392]	; (8002770 <do_reflow.8698+0x5a0>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	f200 811a 	bhi.w	8002822 <do_reflow.8698+0x652>
 80025ee:	a201      	add	r2, pc, #4	; (adr r2, 80025f4 <do_reflow.8698+0x424>)
 80025f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f4:	08002609 	.word	0x08002609
 80025f8:	08002611 	.word	0x08002611
 80025fc:	08002677 	.word	0x08002677
 8002600:	080026f9 	.word	0x080026f9
 8002604:	08002785 	.word	0x08002785
			rf_ui_state = 1;
 8002608:	4b59      	ldr	r3, [pc, #356]	; (8002770 <do_reflow.8698+0x5a0>)
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
			break;
 800260e:	e113      	b.n	8002838 <do_reflow.8698+0x668>
			lcd_set_xy(&lcd, 9, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2109      	movs	r1, #9
 8002614:	4851      	ldr	r0, [pc, #324]	; (800275c <do_reflow.8698+0x58c>)
 8002616:	f7fd fe8b 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 800261a:	4b56      	ldr	r3, [pc, #344]	; (8002774 <do_reflow.8698+0x5a4>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b04      	cmp	r3, #4
 8002620:	bf94      	ite	ls
 8002622:	2301      	movls	r3, #1
 8002624:	2300      	movhi	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	2300      	movs	r3, #0
 800262c:	2101      	movs	r1, #1
 800262e:	484b      	ldr	r0, [pc, #300]	; (800275c <do_reflow.8698+0x58c>)
 8002630:	f7fd fe1c 	bl	800026c <lcd_mode>
			if (((encoder.value) != (last_encoder)) && (pos&0b1)) // we are on working temperature
 8002634:	4b50      	ldr	r3, [pc, #320]	; (8002778 <do_reflow.8698+0x5a8>)
 8002636:	881a      	ldrh	r2, [r3, #0]
 8002638:	4b50      	ldr	r3, [pc, #320]	; (800277c <do_reflow.8698+0x5ac>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d009      	beq.n	8002654 <do_reflow.8698+0x484>
 8002640:	4b42      	ldr	r3, [pc, #264]	; (800274c <do_reflow.8698+0x57c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <do_reflow.8698+0x484>
				rf_ui_state = 3;
 800264e:	4b48      	ldr	r3, [pc, #288]	; (8002770 <do_reflow.8698+0x5a0>)
 8002650:	2203      	movs	r2, #3
 8002652:	701a      	strb	r2, [r3, #0]
			if ((last_button) && (!encoder.pressed))
 8002654:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <do_reflow.8698+0x5b0>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80e6 	beq.w	800282a <do_reflow.8698+0x65a>
 800265e:	4b46      	ldr	r3, [pc, #280]	; (8002778 <do_reflow.8698+0x5a8>)
 8002660:	789b      	ldrb	r3, [r3, #2]
 8002662:	f083 0301 	eor.w	r3, r3, #1
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80de 	beq.w	800282a <do_reflow.8698+0x65a>
				rf_ui_state = 2;
 800266e:	4b40      	ldr	r3, [pc, #256]	; (8002770 <do_reflow.8698+0x5a0>)
 8002670:	2202      	movs	r2, #2
 8002672:	701a      	strb	r2, [r3, #0]
			break;
 8002674:	e0d9      	b.n	800282a <do_reflow.8698+0x65a>
			if (encoder.value != last_encoder)
 8002676:	4b40      	ldr	r3, [pc, #256]	; (8002778 <do_reflow.8698+0x5a8>)
 8002678:	881a      	ldrh	r2, [r3, #0]
 800267a:	4b40      	ldr	r3, [pc, #256]	; (800277c <do_reflow.8698+0x5ac>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d01e      	beq.n	80026c0 <do_reflow.8698+0x4f0>
				steps[pos>>1].temp = change_temperature(steps[pos>>1].temp,
 8002682:	4b32      	ldr	r3, [pc, #200]	; (800274c <do_reflow.8698+0x57c>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	4b30      	ldr	r3, [pc, #192]	; (8002750 <do_reflow.8698+0x580>)
 8002690:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002694:	4618      	mov	r0, r3
											encoder.value - last_encoder);
 8002696:	4b38      	ldr	r3, [pc, #224]	; (8002778 <do_reflow.8698+0x5a8>)
 8002698:	881a      	ldrh	r2, [r3, #0]
 800269a:	4b38      	ldr	r3, [pc, #224]	; (800277c <do_reflow.8698+0x5ac>)
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	b29b      	uxth	r3, r3
				steps[pos>>1].temp = change_temperature(steps[pos>>1].temp,
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	46a4      	mov	ip, r4
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7fe fed2 	bl	8001450 <change_temperature.8644>
 80026ac:	4601      	mov	r1, r0
 80026ae:	4b27      	ldr	r3, [pc, #156]	; (800274c <do_reflow.8698+0x57c>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b25      	ldr	r3, [pc, #148]	; (8002750 <do_reflow.8698+0x580>)
 80026bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			lcd_set_xy(&lcd, 9, 0);
 80026c0:	2200      	movs	r2, #0
 80026c2:	2109      	movs	r1, #9
 80026c4:	4825      	ldr	r0, [pc, #148]	; (800275c <do_reflow.8698+0x58c>)
 80026c6:	f7fd fe33 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 80026ca:	2301      	movs	r3, #1
 80026cc:	2200      	movs	r2, #0
 80026ce:	2101      	movs	r1, #1
 80026d0:	4822      	ldr	r0, [pc, #136]	; (800275c <do_reflow.8698+0x58c>)
 80026d2:	f7fd fdcb 	bl	800026c <lcd_mode>
			if ((last_button) && (!encoder.pressed))
 80026d6:	4b2a      	ldr	r3, [pc, #168]	; (8002780 <do_reflow.8698+0x5b0>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80a7 	beq.w	800282e <do_reflow.8698+0x65e>
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <do_reflow.8698+0x5a8>)
 80026e2:	789b      	ldrb	r3, [r3, #2]
 80026e4:	f083 0301 	eor.w	r3, r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 809f 	beq.w	800282e <do_reflow.8698+0x65e>
				rf_ui_state = 1;
 80026f0:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <do_reflow.8698+0x5a0>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
			break;
 80026f6:	e09a      	b.n	800282e <do_reflow.8698+0x65e>
			lcd_set_xy(&lcd, 11, 1);
 80026f8:	2201      	movs	r2, #1
 80026fa:	210b      	movs	r1, #11
 80026fc:	4817      	ldr	r0, [pc, #92]	; (800275c <do_reflow.8698+0x58c>)
 80026fe:	f7fd fe17 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <do_reflow.8698+0x5a4>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b04      	cmp	r3, #4
 8002708:	bf94      	ite	ls
 800270a:	2301      	movls	r3, #1
 800270c:	2300      	movhi	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	2300      	movs	r3, #0
 8002714:	2101      	movs	r1, #1
 8002716:	4811      	ldr	r0, [pc, #68]	; (800275c <do_reflow.8698+0x58c>)
 8002718:	f7fd fda8 	bl	800026c <lcd_mode>
			if ((encoder.value) != (last_encoder))
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <do_reflow.8698+0x5a8>)
 800271e:	881a      	ldrh	r2, [r3, #0]
 8002720:	4b16      	ldr	r3, [pc, #88]	; (800277c <do_reflow.8698+0x5ac>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d002      	beq.n	800272e <do_reflow.8698+0x55e>
				rf_ui_state = 1;
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <do_reflow.8698+0x5a0>)
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
			if ((last_button) && (!encoder.pressed))
 800272e:	4b14      	ldr	r3, [pc, #80]	; (8002780 <do_reflow.8698+0x5b0>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d07d      	beq.n	8002832 <do_reflow.8698+0x662>
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <do_reflow.8698+0x5a8>)
 8002738:	789b      	ldrb	r3, [r3, #2]
 800273a:	f083 0301 	eor.w	r3, r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d076      	beq.n	8002832 <do_reflow.8698+0x662>
				rf_ui_state = 4;
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <do_reflow.8698+0x5a0>)
 8002746:	2204      	movs	r2, #4
 8002748:	701a      	strb	r2, [r3, #0]
			break;
 800274a:	e072      	b.n	8002832 <do_reflow.8698+0x662>
 800274c:	200002d9 	.word	0x200002d9
 8002750:	20000268 	.word	0x20000268
 8002754:	200002d4 	.word	0x200002d4
 8002758:	10624dd3 	.word	0x10624dd3
 800275c:	20000570 	.word	0x20000570
 8002760:	0800d8c4 	.word	0x0800d8c4
 8002764:	20000020 	.word	0x20000020
 8002768:	2000024a 	.word	0x2000024a
 800276c:	200002e0 	.word	0x200002e0
 8002770:	200002e1 	.word	0x200002e1
 8002774:	20000235 	.word	0x20000235
 8002778:	20000238 	.word	0x20000238
 800277c:	200002e2 	.word	0x200002e2
 8002780:	200002d8 	.word	0x200002d8
			if (encoder.value != last_encoder)
 8002784:	4b32      	ldr	r3, [pc, #200]	; (8002850 <do_reflow.8698+0x680>)
 8002786:	881a      	ldrh	r2, [r3, #0]
 8002788:	4b32      	ldr	r3, [pc, #200]	; (8002854 <do_reflow.8698+0x684>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d02e      	beq.n	80027ee <do_reflow.8698+0x61e>
				uint32_t tmp = (HAL_GetTick() - last_time)/1000;
 8002790:	f001 f9e8 	bl	8003b64 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	4b30      	ldr	r3, [pc, #192]	; (8002858 <do_reflow.8698+0x688>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	4a2f      	ldr	r2, [pc, #188]	; (800285c <do_reflow.8698+0x68c>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	099b      	lsrs	r3, r3, #6
 80027a4:	61bb      	str	r3, [r7, #24]
				steps[pos>>1].time = tmp + change_time(steps[pos>>1].time - tmp,
 80027a6:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <do_reflow.8698+0x690>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	4a2c      	ldr	r2, [pc, #176]	; (8002864 <do_reflow.8698+0x694>)
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4413      	add	r3, r2
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	1ad0      	subs	r0, r2, r3
															encoder.value - last_encoder,
 80027bc:	4b24      	ldr	r3, [pc, #144]	; (8002850 <do_reflow.8698+0x680>)
 80027be:	881a      	ldrh	r2, [r3, #0]
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <do_reflow.8698+0x684>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	b29b      	uxth	r3, r3
				steps[pos>>1].time = tmp + change_time(steps[pos>>1].time - tmp,
 80027c8:	b21b      	sxth	r3, r3
 80027ca:	46a4      	mov	ip, r4
 80027cc:	2200      	movs	r2, #0
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7fe fe76 	bl	80014c0 <change_time.8650>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <do_reflow.8698+0x690>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	085b      	lsrs	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	4618      	mov	r0, r3
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	441a      	add	r2, r3
 80027e6:	491f      	ldr	r1, [pc, #124]	; (8002864 <do_reflow.8698+0x694>)
 80027e8:	00c3      	lsls	r3, r0, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	605a      	str	r2, [r3, #4]
			lcd_set_xy(&lcd, 11, 1);
 80027ee:	2201      	movs	r2, #1
 80027f0:	210b      	movs	r1, #11
 80027f2:	481d      	ldr	r0, [pc, #116]	; (8002868 <do_reflow.8698+0x698>)
 80027f4:	f7fd fd9c 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 80027f8:	2301      	movs	r3, #1
 80027fa:	2200      	movs	r2, #0
 80027fc:	2101      	movs	r1, #1
 80027fe:	481a      	ldr	r0, [pc, #104]	; (8002868 <do_reflow.8698+0x698>)
 8002800:	f7fd fd34 	bl	800026c <lcd_mode>
			if ((last_button) && (!encoder.pressed))
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <do_reflow.8698+0x69c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d014      	beq.n	8002836 <do_reflow.8698+0x666>
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <do_reflow.8698+0x680>)
 800280e:	789b      	ldrb	r3, [r3, #2]
 8002810:	f083 0301 	eor.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00d      	beq.n	8002836 <do_reflow.8698+0x666>
				rf_ui_state = 3;
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <do_reflow.8698+0x6a0>)
 800281c:	2203      	movs	r2, #3
 800281e:	701a      	strb	r2, [r3, #0]
			break;
 8002820:	e009      	b.n	8002836 <do_reflow.8698+0x666>
			rf_ui_state = 0;
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <do_reflow.8698+0x6a0>)
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
			break;
 8002828:	e006      	b.n	8002838 <do_reflow.8698+0x668>
			break;
 800282a:	bf00      	nop
 800282c:	e004      	b.n	8002838 <do_reflow.8698+0x668>
			break;
 800282e:	bf00      	nop
 8002830:	e002      	b.n	8002838 <do_reflow.8698+0x668>
			break;
 8002832:	bf00      	nop
 8002834:	e000      	b.n	8002838 <do_reflow.8698+0x668>
			break;
 8002836:	bf00      	nop
		last_encoder = encoder.value;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <do_reflow.8698+0x680>)
 800283a:	881a      	ldrh	r2, [r3, #0]
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <do_reflow.8698+0x684>)
 800283e:	801a      	strh	r2, [r3, #0]
		last_button = encoder.pressed;
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <do_reflow.8698+0x680>)
 8002842:	789a      	ldrb	r2, [r3, #2]
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <do_reflow.8698+0x69c>)
 8002846:	701a      	strb	r2, [r3, #0]
	}
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bdb0      	pop	{r4, r5, r7, pc}
 800284e:	bf00      	nop
 8002850:	20000238 	.word	0x20000238
 8002854:	200002e2 	.word	0x200002e2
 8002858:	200002d4 	.word	0x200002d4
 800285c:	10624dd3 	.word	0x10624dd3
 8002860:	200002d9 	.word	0x200002d9
 8002864:	20000268 	.word	0x20000268
 8002868:	20000570 	.word	0x20000570
 800286c:	200002d8 	.word	0x200002d8
 8002870:	200002e1 	.word	0x200002e1

08002874 <deltaT.8748>:
	static const int32_t I=0.00153*32768;
	static const int32_t D=10*32768;
	static const int32_t limit_top=25*4/0.00153; // max 25% of PWM

	int32_t deltaT(uint16_t PV)
	{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
 800287e:	f8c7 c000 	str.w	ip, [r7]
#define size 4
		static int32_t arr[size];
		static bool first_time = true;
		if (first_time)
 8002882:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <deltaT.8748+0x80>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d010      	beq.n	80028ac <deltaT.8748+0x38>
		{
			first_time = false;
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <deltaT.8748+0x80>)
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < size; i++)
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	e007      	b.n	80028a6 <deltaT.8748+0x32>
				arr[i] = PV;
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	4917      	ldr	r1, [pc, #92]	; (80028f8 <deltaT.8748+0x84>)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 0; i < size; i++)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	3301      	adds	r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	ddf4      	ble.n	8002896 <deltaT.8748+0x22>
		}
		int32_t temp = arr[0];
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <deltaT.8748+0x84>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < size; i++)
 80028b2:	2301      	movs	r3, #1
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	e00b      	b.n	80028d0 <deltaT.8748+0x5c>
			arr[i-1] = arr[i];
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	490e      	ldr	r1, [pc, #56]	; (80028f8 <deltaT.8748+0x84>)
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80028c4:	490c      	ldr	r1, [pc, #48]	; (80028f8 <deltaT.8748+0x84>)
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 1; i < size; i++)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	3301      	adds	r3, #1
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	ddf0      	ble.n	80028b8 <deltaT.8748+0x44>
		arr[size-1] = PV;
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <deltaT.8748+0x84>)
 80028da:	60d3      	str	r3, [r2, #12]
		return (temp - PV)/size;
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	da00      	bge.n	80028e8 <deltaT.8748+0x74>
 80028e6:	3303      	adds	r3, #3
 80028e8:	109b      	asrs	r3, r3, #2
	}
 80028ea:	4618      	mov	r0, r3
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	20000034 	.word	0x20000034
 80028f8:	200002e8 	.word	0x200002e8

080028fc <pid>:
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	460a      	mov	r2, r1
 8002906:	80fb      	strh	r3, [r7, #6]
 8002908:	4613      	mov	r3, r2
 800290a:	80bb      	strh	r3, [r7, #4]
uint8_t pid(uint16_t PV, uint16_t SP)
 800290c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002910:	60bb      	str	r3, [r7, #8]

	static int32_t integral = 0;
	static int32_t last_PV = -1;
	if (last_PV < 0)
 8002912:	4b58      	ldr	r3, [pc, #352]	; (8002a74 <pid+0x178>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	da02      	bge.n	8002920 <pid+0x24>
		last_PV = PV; // first time, init this thing to avoid jump
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	4a55      	ldr	r2, [pc, #340]	; (8002a74 <pid+0x178>)
 800291e:	6013      	str	r3, [r2, #0]

	int32_t error = SP-PV;
 8002920:	88ba      	ldrh	r2, [r7, #4]
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	617b      	str	r3, [r7, #20]
	int32_t p = error * P;
 8002928:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <pid+0x17c>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	613b      	str	r3, [r7, #16]
	if (error > 0)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	dd10      	ble.n	800295c <pid+0x60>
	{
		integral += error;
 800293a:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <pid+0x180>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	4413      	add	r3, r2
 8002942:	4a4e      	ldr	r2, [pc, #312]	; (8002a7c <pid+0x180>)
 8002944:	6013      	str	r3, [r2, #0]
		if (error < 4*4) // almost here, but we need some boost
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b0f      	cmp	r3, #15
 800294a:	dc1d      	bgt.n	8002988 <pid+0x8c>
			integral += error*8;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	00da      	lsls	r2, r3, #3
 8002950:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <pid+0x180>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4413      	add	r3, r2
 8002956:	4a49      	ldr	r2, [pc, #292]	; (8002a7c <pid+0x180>)
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e015      	b.n	8002988 <pid+0x8c>
	}
	else
	{
		integral += error/4; // cool down is slower
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	da00      	bge.n	8002964 <pid+0x68>
 8002962:	3303      	adds	r3, #3
 8002964:	109b      	asrs	r3, r3, #2
 8002966:	461a      	mov	r2, r3
 8002968:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <pid+0x180>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4413      	add	r3, r2
 800296e:	4a43      	ldr	r2, [pc, #268]	; (8002a7c <pid+0x180>)
 8002970:	6013      	str	r3, [r2, #0]
		if (error > -4*4)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f113 0f0f 	cmn.w	r3, #15
 8002978:	db06      	blt.n	8002988 <pid+0x8c>
			integral += error*16; // almost here, we need boost!
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	011a      	lsls	r2, r3, #4
 800297e:	4b3f      	ldr	r3, [pc, #252]	; (8002a7c <pid+0x180>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4413      	add	r3, r2
 8002984:	4a3d      	ldr	r2, [pc, #244]	; (8002a7c <pid+0x180>)
 8002986:	6013      	str	r3, [r2, #0]
	}
	if (integral > limit_top)
 8002988:	4b3c      	ldr	r3, [pc, #240]	; (8002a7c <pid+0x180>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b3c      	ldr	r3, [pc, #240]	; (8002a80 <pid+0x184>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	dd0d      	ble.n	80029b0 <pid+0xb4>
	{
		global_error |= errI_LIMIT;
 8002994:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <pid+0x188>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b39      	ldr	r3, [pc, #228]	; (8002a84 <pid+0x188>)
 80029a0:	701a      	strb	r2, [r3, #0]
		temperature_SP = 0;
 80029a2:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <pid+0x18c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	801a      	strh	r2, [r3, #0]
		integral = limit_top;
 80029a8:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <pid+0x184>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a33      	ldr	r2, [pc, #204]	; (8002a7c <pid+0x180>)
 80029ae:	6013      	str	r3, [r2, #0]
	}
	if (integral < 0)
 80029b0:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <pid+0x180>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	da02      	bge.n	80029be <pid+0xc2>
		integral = 0;
 80029b8:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <pid+0x180>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
	int32_t i = integral * I;
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <pid+0x180>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a32      	ldr	r2, [pc, #200]	; (8002a8c <pid+0x190>)
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	60fb      	str	r3, [r7, #12]
	/* signal is noisy, but slow, I use additional filter for D */
	//int32_t d = (last_PV - PV)*D;
	int32_t d = deltaT(PV)*D;
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	f107 0208 	add.w	r2, r7, #8
 80029d2:	4694      	mov	ip, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff4d 	bl	8002874 <deltaT.8748>
 80029da:	4602      	mov	r2, r0
 80029dc:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <pid+0x194>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	fb03 f302 	mul.w	r3, r3, r2
 80029e4:	61fb      	str	r3, [r7, #28]
	if (d > 0)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	dd01      	ble.n	80029f0 <pid+0xf4>
		d = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
	last_PV = PV;
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <pid+0x178>)
 80029f4:	6013      	str	r3, [r2, #0]
	int32_t out = (p+i+d)/4/32768;
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	441a      	add	r2, r3
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	4413      	add	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da03      	bge.n	8002a0c <pid+0x110>
 8002a04:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8002a08:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a0c:	145b      	asrs	r3, r3, #17
 8002a0e:	61bb      	str	r3, [r7, #24]
	if (out > 100)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b64      	cmp	r3, #100	; 0x64
 8002a14:	dd01      	ble.n	8002a1a <pid+0x11e>
		out = 100;
 8002a16:	2364      	movs	r3, #100	; 0x64
 8002a18:	61bb      	str	r3, [r7, #24]
	if (out < 0)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	da01      	bge.n	8002a24 <pid+0x128>
		out = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]

	PID.P = p/4/32768;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	da03      	bge.n	8002a32 <pid+0x136>
 8002a2a:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8002a2e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a32:	145b      	asrs	r3, r3, #17
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <pid+0x198>)
 8002a38:	601a      	str	r2, [r3, #0]
	PID.I = i/4/32768;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	da03      	bge.n	8002a48 <pid+0x14c>
 8002a40:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8002a44:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a48:	145b      	asrs	r3, r3, #17
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <pid+0x198>)
 8002a4e:	605a      	str	r2, [r3, #4]
	PID.D = d/4/32768;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	da03      	bge.n	8002a5e <pid+0x162>
 8002a56:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8002a5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a5e:	145b      	asrs	r3, r3, #17
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <pid+0x198>)
 8002a64:	609a      	str	r2, [r3, #8]

	return out;
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	b2db      	uxtb	r3, r3
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000030 	.word	0x20000030
 8002a78:	0800f200 	.word	0x0800f200
 8002a7c:	200002e4 	.word	0x200002e4
 8002a80:	0800f204 	.word	0x0800f204
 8002a84:	20000234 	.word	0x20000234
 8002a88:	2000024a 	.word	0x2000024a
 8002a8c:	0800f208 	.word	0x0800f208
 8002a90:	0800f20c 	.word	0x0800f20c
 8002a94:	200005d0 	.word	0x200005d0

08002a98 <HAL_TIM_OC_DelayElapsedCallback>:
/**
 * here happens two interrupts, at 998ms (for pid update)
 * and also at ~500ms (for second temperature update
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	get_max6675();
 8002aa0:	f7fd fecc 	bl	800083c <get_max6675>
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	7f1b      	ldrb	r3, [r3, #28]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d125      	bne.n	8002af8 <HAL_TIM_OC_DelayElapsedCallback+0x60>
	{
		if (!(MAX6675.data_valid))
 8002aac:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8002aae:	7a5b      	ldrb	r3, [r3, #9]
 8002ab0:	f083 0301 	eor.w	r3, r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <HAL_TIM_OC_DelayElapsedCallback+0x28>
			temperature_SP = 0;
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	801a      	strh	r2, [r3, #0]
		pwm_value = pid(MAX6675.temperature, temperature_SP<<2);
 8002ac0:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8002ac2:	881a      	ldrh	r2, [r3, #0]
 8002ac4:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f7ff ff14 	bl	80028fc <pid>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8002ada:	801a      	strh	r2, [r3, #0]
		uint16_t val = 10*pwm_value;
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	0092      	lsls	r2, r2, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	81fb      	strh	r3, [r7, #14]
		TIM2->CCR1 = val;
 8002aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aee:	89fb      	ldrh	r3, [r7, #14]
 8002af0:	6353      	str	r3, [r2, #52]	; 0x34
		tick = true;
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
	}
	ascii_max6675();
 8002af8:	f7fd fecc 	bl	8000894 <ascii_max6675>
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	2000023c 	.word	0x2000023c
 8002b08:	2000024a 	.word	0x2000024a
 8002b0c:	20000248 	.word	0x20000248
 8002b10:	2000024c 	.word	0x2000024c

08002b14 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	if (peep.stop && (htim == &htim4))
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8002b1e:	789b      	ldrb	r3, [r3, #2]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_TIM_PWM_PulseFinishedCallback+0x26>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d106      	bne.n	8002b3a <HAL_TIM_PWM_PulseFinishedCallback+0x26>
	{
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f004 fd8c 	bl	800764c <HAL_TIM_PWM_Stop_DMA>
		peep.stop = false;
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	709a      	strb	r2, [r3, #2]
	}
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	2000001c 	.word	0x2000001c
 8002b48:	20000588 	.word	0x20000588

08002b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b50:	f000 ffb0 	bl	8003ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b54:	f000 f84c 	bl	8002bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b58:	f000 fabe 	bl	80030d8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8002b5c:	f009 fc54 	bl	800c408 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002b60:	f000 f8a2 	bl	8002ca8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002b64:	f000 f8d8 	bl	8002d18 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002b68:	f000 f930 	bl	8002dcc <MX_TIM2_Init>
  MX_DMA_Init();
 8002b6c:	f000 fa96 	bl	800309c <MX_DMA_Init>
  MX_TIM4_Init();
 8002b70:	f000 fa1e 	bl	8002fb0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002b74:	f000 f9c8 	bl	8002f08 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, 1); // enable USB
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b7e:	4818      	ldr	r0, [pc, #96]	; (8002be0 <main+0x94>)
 8002b80:	f001 fd2b 	bl	80045da <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // PWM for output
 8002b84:	2100      	movs	r1, #0
 8002b86:	4817      	ldr	r0, [pc, #92]	; (8002be4 <main+0x98>)
 8002b88:	f004 fb24 	bl	80071d4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // ENCODER
 8002b8c:	213c      	movs	r1, #60	; 0x3c
 8002b8e:	4816      	ldr	r0, [pc, #88]	; (8002be8 <main+0x9c>)
 8002b90:	f004 febc 	bl	800790c <HAL_TIM_Encoder_Start>
  TIM2->CCR2 = 998; // timer for PID interrupt + temperature update
 8002b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b98:	f240 32e6 	movw	r2, #998	; 0x3e6
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 499; // timer for temperature update
 8002b9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ba2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ba6:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM2->DIER |= TIM_DIER_CC2IE|TIM_DIER_CC3IE; // interrupt enable
 8002ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bb2:	f043 030c 	orr.w	r3, r3, #12
 8002bb6:	60d3      	str	r3, [r2, #12]
  HAL_TIM_Base_Start_IT(&htim2); // Enable Interrupts
 8002bb8:	480a      	ldr	r0, [pc, #40]	; (8002be4 <main+0x98>)
 8002bba:	f004 fa09 	bl	8006fd0 <HAL_TIM_Base_Start_IT>
  delay_init(&htim1); // inits the library for us delay
 8002bbe:	480b      	ldr	r0, [pc, #44]	; (8002bec <main+0xa0>)
 8002bc0:	f7fd fac4 	bl	800014c <delay_init>
  init_lcd(); // init lcd and load special symbols
 8002bc4:	f7fd fd66 	bl	8000694 <init_lcd>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  do_button(); // update encoder status
 8002bc8:	f7fd fdc0 	bl	800074c <do_button>
	  do_blink(); // led heartbeat
 8002bcc:	f7fd fe1a 	bl	8000804 <do_blink>
	  do_usb();  // output debug information
 8002bd0:	f7fd fef8 	bl	80009c4 <do_usb>
	  do_interface(); // here happens the magic
 8002bd4:	f7fe f87e 	bl	8000cd4 <do_interface>
	  do_peep(); // peep-peep
 8002bd8:	f7fd ff52 	bl	8000a80 <do_peep>
	  do_button(); // update encoder status
 8002bdc:	e7f4      	b.n	8002bc8 <main+0x7c>
 8002bde:	bf00      	nop
 8002be0:	40010800 	.word	0x40010800
 8002be4:	200006c4 	.word	0x200006c4
 8002be8:	200005dc 	.word	0x200005dc
 8002bec:	20000624 	.word	0x20000624

08002bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b094      	sub	sp, #80	; 0x50
 8002bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bfa:	2228      	movs	r2, #40	; 0x28
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f00a f8c8 	bl	800cd94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c20:	2301      	movs	r3, #1
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c32:	2302      	movs	r3, #2
 8002c34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002c3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 f9be 	bl	8005fc8 <HAL_RCC_OscConfig>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002c52:	f000 fad9 	bl	8003208 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c56:	230f      	movs	r3, #15
 8002c58:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c66:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	2101      	movs	r1, #1
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 fc28 	bl	80064c8 <HAL_RCC_ClockConfig>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002c7e:	f000 fac3 	bl	8003208 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002c82:	2310      	movs	r3, #16
 8002c84:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002c86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c8a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 fd82 	bl	8006798 <HAL_RCCEx_PeriphCLKConfig>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002c9a:	f000 fab5 	bl	8003208 <Error_Handler>
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	3750      	adds	r7, #80	; 0x50
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002cac:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002cae:	4a19      	ldr	r2, [pc, #100]	; (8002d14 <MX_SPI1_Init+0x6c>)
 8002cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cb2:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002cbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cc0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002cc2:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002cd8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002cdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002ce0:	2230      	movs	r2, #48	; 0x30
 8002ce2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf0:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002cf8:	220a      	movs	r2, #10
 8002cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cfc:	4804      	ldr	r0, [pc, #16]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002cfe:	f003 fe01 	bl	8006904 <HAL_SPI_Init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002d08:	f000 fa7e 	bl	8003208 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	2000066c 	.word	0x2000066c
 8002d14:	40013000 	.word	0x40013000

08002d18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d1e:	f107 0308 	add.w	r3, r7, #8
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d34:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <MX_TIM1_Init+0xa8>)
 8002d36:	4a23      	ldr	r2, [pc, #140]	; (8002dc4 <MX_TIM1_Init+0xac>)
 8002d38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000000-1;
 8002d3a:	f003 fcaf 	bl	800669c <HAL_RCC_GetSysClockFreq>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <MX_TIM1_Init+0xb0>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	0c9b      	lsrs	r3, r3, #18
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <MX_TIM1_Init+0xa8>)
 8002d4c:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4e:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <MX_TIM1_Init+0xa8>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <MX_TIM1_Init+0xa8>)
 8002d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d5c:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <MX_TIM1_Init+0xa8>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <MX_TIM1_Init+0xa8>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <MX_TIM1_Init+0xa8>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d6e:	4814      	ldr	r0, [pc, #80]	; (8002dc0 <MX_TIM1_Init+0xa8>)
 8002d70:	f004 f894 	bl	8006e9c <HAL_TIM_Base_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8002d7a:	f000 fa45 	bl	8003208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d84:	f107 0308 	add.w	r3, r7, #8
 8002d88:	4619      	mov	r1, r3
 8002d8a:	480d      	ldr	r0, [pc, #52]	; (8002dc0 <MX_TIM1_Init+0xa8>)
 8002d8c:	f005 f86a 	bl	8007e64 <HAL_TIM_ConfigClockSource>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002d96:	f000 fa37 	bl	8003208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002da2:	463b      	mov	r3, r7
 8002da4:	4619      	mov	r1, r3
 8002da6:	4806      	ldr	r0, [pc, #24]	; (8002dc0 <MX_TIM1_Init+0xa8>)
 8002da8:	f005 fcc2 	bl	8008730 <HAL_TIMEx_MasterConfigSynchronization>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002db2:	f000 fa29 	bl	8003208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002db6:	bf00      	nop
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000624 	.word	0x20000624
 8002dc4:	40012c00 	.word	0x40012c00
 8002dc8:	431bde83 	.word	0x431bde83

08002dcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08e      	sub	sp, #56	; 0x38
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de0:	f107 0320 	add.w	r3, r7, #32
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
 8002df8:	615a      	str	r2, [r3, #20]
 8002dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dfc:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000-1;
 8002e04:	f003 fc4a 	bl	800669c <HAL_RCC_GetSysClockFreq>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4a3e      	ldr	r2, [pc, #248]	; (8002f04 <MX_TIM2_Init+0x138>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	099b      	lsrs	r3, r3, #6
 8002e12:	3b01      	subs	r3, #1
 8002e14:	4a3a      	ldr	r2, [pc, #232]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002e16:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e18:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002e1e:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002e20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e26:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e2c:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002e2e:	2280      	movs	r2, #128	; 0x80
 8002e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e32:	4833      	ldr	r0, [pc, #204]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002e34:	f004 f832 	bl	8006e9c <HAL_TIM_Base_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002e3e:	f000 f9e3 	bl	8003208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	482c      	ldr	r0, [pc, #176]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002e50:	f005 f808 	bl	8007e64 <HAL_TIM_ConfigClockSource>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002e5a:	f000 f9d5 	bl	8003208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e5e:	4828      	ldr	r0, [pc, #160]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002e60:	f004 f960 	bl	8007124 <HAL_TIM_PWM_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002e6a:	f000 f9cd 	bl	8003208 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002e6e:	4824      	ldr	r0, [pc, #144]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002e70:	f004 f900 	bl	8007074 <HAL_TIM_OC_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002e7a:	f000 f9c5 	bl	8003208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e86:	f107 0320 	add.w	r3, r7, #32
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	481c      	ldr	r0, [pc, #112]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002e8e:	f005 fc4f 	bl	8008730 <HAL_TIMEx_MasterConfigSynchronization>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8002e98:	f000 f9b6 	bl	8003208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e9c:	2360      	movs	r3, #96	; 0x60
 8002e9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	2200      	movs	r2, #0
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4813      	ldr	r0, [pc, #76]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002eb4:	f004 ff18 	bl	8007ce8 <HAL_TIM_PWM_ConfigChannel>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8002ebe:	f000 f9a3 	bl	8003208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	2204      	movs	r2, #4
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002ece:	f004 feb3 	bl	8007c38 <HAL_TIM_OC_ConfigChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8002ed8:	f000 f996 	bl	8003208 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	2208      	movs	r2, #8
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4807      	ldr	r0, [pc, #28]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002ee4:	f004 fea8 	bl	8007c38 <HAL_TIM_OC_ConfigChannel>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8002eee:	f000 f98b 	bl	8003208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ef2:	4803      	ldr	r0, [pc, #12]	; (8002f00 <MX_TIM2_Init+0x134>)
 8002ef4:	f000 fce4 	bl	80038c0 <HAL_TIM_MspPostInit>

}
 8002ef8:	bf00      	nop
 8002efa:	3738      	adds	r7, #56	; 0x38
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200006c4 	.word	0x200006c4
 8002f04:	10624dd3 	.word	0x10624dd3

08002f08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08c      	sub	sp, #48	; 0x30
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f0e:	f107 030c 	add.w	r3, r7, #12
 8002f12:	2224      	movs	r2, #36	; 0x24
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f009 ff3c 	bl	800cd94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f24:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <MX_TIM3_Init+0xa0>)
 8002f26:	4a21      	ldr	r2, [pc, #132]	; (8002fac <MX_TIM3_Init+0xa4>)
 8002f28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f2a:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <MX_TIM3_Init+0xa0>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <MX_TIM3_Init+0xa0>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f36:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <MX_TIM3_Init+0xa0>)
 8002f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <MX_TIM3_Init+0xa0>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <MX_TIM3_Init+0xa0>)
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f52:	2301      	movs	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002f5a:	230a      	movs	r3, #10
 8002f5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f62:	2301      	movs	r3, #1
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f66:	2300      	movs	r3, #0
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002f6a:	230a      	movs	r3, #10
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002f6e:	f107 030c 	add.w	r3, r7, #12
 8002f72:	4619      	mov	r1, r3
 8002f74:	480c      	ldr	r0, [pc, #48]	; (8002fa8 <MX_TIM3_Init+0xa0>)
 8002f76:	f004 fc27 	bl	80077c8 <HAL_TIM_Encoder_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002f80:	f000 f942 	bl	8003208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f84:	2300      	movs	r3, #0
 8002f86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <MX_TIM3_Init+0xa0>)
 8002f92:	f005 fbcd 	bl	8008730 <HAL_TIMEx_MasterConfigSynchronization>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002f9c:	f000 f934 	bl	8003208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fa0:	bf00      	nop
 8002fa2:	3730      	adds	r7, #48	; 0x30
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	200005dc 	.word	0x200005dc
 8002fac:	40000400 	.word	0x40000400

08002fb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08e      	sub	sp, #56	; 0x38
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc4:	f107 0320 	add.w	r3, r7, #32
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
 8002fdc:	615a      	str	r2, [r3, #20]
 8002fde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fe0:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <MX_TIM4_Init+0xe4>)
 8002fe2:	4a2d      	ldr	r2, [pc, #180]	; (8003098 <MX_TIM4_Init+0xe8>)
 8002fe4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002fe6:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <MX_TIM4_Init+0xe4>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fec:	4b29      	ldr	r3, [pc, #164]	; (8003094 <MX_TIM4_Init+0xe4>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 127;
 8002ff2:	4b28      	ldr	r3, [pc, #160]	; (8003094 <MX_TIM4_Init+0xe4>)
 8002ff4:	227f      	movs	r2, #127	; 0x7f
 8002ff6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff8:	4b26      	ldr	r3, [pc, #152]	; (8003094 <MX_TIM4_Init+0xe4>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ffe:	4b25      	ldr	r3, [pc, #148]	; (8003094 <MX_TIM4_Init+0xe4>)
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003004:	4823      	ldr	r0, [pc, #140]	; (8003094 <MX_TIM4_Init+0xe4>)
 8003006:	f003 ff49 	bl	8006e9c <HAL_TIM_Base_Init>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8003010:	f000 f8fa 	bl	8003208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800301a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800301e:	4619      	mov	r1, r3
 8003020:	481c      	ldr	r0, [pc, #112]	; (8003094 <MX_TIM4_Init+0xe4>)
 8003022:	f004 ff1f 	bl	8007e64 <HAL_TIM_ConfigClockSource>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800302c:	f000 f8ec 	bl	8003208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003030:	4818      	ldr	r0, [pc, #96]	; (8003094 <MX_TIM4_Init+0xe4>)
 8003032:	f004 f877 	bl	8007124 <HAL_TIM_PWM_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800303c:	f000 f8e4 	bl	8003208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003040:	2300      	movs	r3, #0
 8003042:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003044:	2300      	movs	r3, #0
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003048:	f107 0320 	add.w	r3, r7, #32
 800304c:	4619      	mov	r1, r3
 800304e:	4811      	ldr	r0, [pc, #68]	; (8003094 <MX_TIM4_Init+0xe4>)
 8003050:	f005 fb6e 	bl	8008730 <HAL_TIMEx_MasterConfigSynchronization>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800305a:	f000 f8d5 	bl	8003208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800305e:	2360      	movs	r3, #96	; 0x60
 8003060:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800306e:	1d3b      	adds	r3, r7, #4
 8003070:	2204      	movs	r2, #4
 8003072:	4619      	mov	r1, r3
 8003074:	4807      	ldr	r0, [pc, #28]	; (8003094 <MX_TIM4_Init+0xe4>)
 8003076:	f004 fe37 	bl	8007ce8 <HAL_TIM_PWM_ConfigChannel>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8003080:	f000 f8c2 	bl	8003208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <MX_TIM4_Init+0xe4>)
 8003086:	f000 fc1b 	bl	80038c0 <HAL_TIM_MspPostInit>

}
 800308a:	bf00      	nop
 800308c:	3738      	adds	r7, #56	; 0x38
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000588 	.word	0x20000588
 8003098:	40000800 	.word	0x40000800

0800309c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <MX_DMA_Init+0x38>)
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <MX_DMA_Init+0x38>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6153      	str	r3, [r2, #20]
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <MX_DMA_Init+0x38>)
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80030ba:	2200      	movs	r2, #0
 80030bc:	2100      	movs	r1, #0
 80030be:	200e      	movs	r0, #14
 80030c0:	f000 fe55 	bl	8003d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80030c4:	200e      	movs	r0, #14
 80030c6:	f000 fe6e 	bl	8003da6 <HAL_NVIC_EnableIRQ>

}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000

080030d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030de:	f107 0310 	add.w	r3, r7, #16
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ec:	4b42      	ldr	r3, [pc, #264]	; (80031f8 <MX_GPIO_Init+0x120>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	4a41      	ldr	r2, [pc, #260]	; (80031f8 <MX_GPIO_Init+0x120>)
 80030f2:	f043 0310 	orr.w	r3, r3, #16
 80030f6:	6193      	str	r3, [r2, #24]
 80030f8:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <MX_GPIO_Init+0x120>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003104:	4b3c      	ldr	r3, [pc, #240]	; (80031f8 <MX_GPIO_Init+0x120>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	4a3b      	ldr	r2, [pc, #236]	; (80031f8 <MX_GPIO_Init+0x120>)
 800310a:	f043 0320 	orr.w	r3, r3, #32
 800310e:	6193      	str	r3, [r2, #24]
 8003110:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <MX_GPIO_Init+0x120>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <MX_GPIO_Init+0x120>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	4a35      	ldr	r2, [pc, #212]	; (80031f8 <MX_GPIO_Init+0x120>)
 8003122:	f043 0304 	orr.w	r3, r3, #4
 8003126:	6193      	str	r3, [r2, #24]
 8003128:	4b33      	ldr	r3, [pc, #204]	; (80031f8 <MX_GPIO_Init+0x120>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003134:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <MX_GPIO_Init+0x120>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <MX_GPIO_Init+0x120>)
 800313a:	f043 0308 	orr.w	r3, r3, #8
 800313e:	6193      	str	r3, [r2, #24]
 8003140:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <MX_GPIO_Init+0x120>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|HOT_LEDS_Pin, GPIO_PIN_RESET);
 800314c:	2200      	movs	r2, #0
 800314e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003152:	482a      	ldr	r0, [pc, #168]	; (80031fc <MX_GPIO_Init+0x124>)
 8003154:	f001 fa41 	bl	80045da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 8003158:	2201      	movs	r2, #1
 800315a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800315e:	4828      	ldr	r0, [pc, #160]	; (8003200 <MX_GPIO_Init+0x128>)
 8003160:	f001 fa3b 	bl	80045da <HAL_GPIO_WritePin>
                          |hd_4_Pin|hd_5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8003164:	2200      	movs	r2, #0
 8003166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800316a:	4826      	ldr	r0, [pc, #152]	; (8003204 <MX_GPIO_Init+0x12c>)
 800316c:	f001 fa35 	bl	80045da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, debug_a_Pin|debug_b_Pin, GPIO_PIN_RESET);
 8003170:	2200      	movs	r2, #0
 8003172:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003176:	4822      	ldr	r0, [pc, #136]	; (8003200 <MX_GPIO_Init+0x128>)
 8003178:	f001 fa2f 	bl	80045da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin HOT_LEDS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|HOT_LEDS_Pin;
 800317c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003182:	2301      	movs	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	2302      	movs	r3, #2
 800318c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800318e:	f107 0310 	add.w	r3, r7, #16
 8003192:	4619      	mov	r1, r3
 8003194:	4819      	ldr	r0, [pc, #100]	; (80031fc <MX_GPIO_Init+0x124>)
 8003196:	f001 f885 	bl	80042a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : hd_7_Pin hd_6_Pin hd_RS_Pin hd_E_Pin
                           hd_4_Pin hd_5_Pin debug_a_Pin debug_b_Pin */
  GPIO_InitStruct.Pin = hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 800319a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800319e:	613b      	str	r3, [r7, #16]
                          |hd_4_Pin|hd_5_Pin|debug_a_Pin|debug_b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a0:	2301      	movs	r3, #1
 80031a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a8:	2302      	movs	r3, #2
 80031aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ac:	f107 0310 	add.w	r3, r7, #16
 80031b0:	4619      	mov	r1, r3
 80031b2:	4813      	ldr	r0, [pc, #76]	; (8003200 <MX_GPIO_Init+0x128>)
 80031b4:	f001 f876 	bl	80042a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 80031b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031be:	2301      	movs	r3, #1
 80031c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2302      	movs	r3, #2
 80031c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 80031ca:	f107 0310 	add.w	r3, r7, #16
 80031ce:	4619      	mov	r1, r3
 80031d0:	480c      	ldr	r0, [pc, #48]	; (8003204 <MX_GPIO_Init+0x12c>)
 80031d2:	f001 f867 	bl	80042a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_s_Pin */
  GPIO_InitStruct.Pin = enc_s_Pin;
 80031d6:	2308      	movs	r3, #8
 80031d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(enc_s_GPIO_Port, &GPIO_InitStruct);
 80031e2:	f107 0310 	add.w	r3, r7, #16
 80031e6:	4619      	mov	r1, r3
 80031e8:	4805      	ldr	r0, [pc, #20]	; (8003200 <MX_GPIO_Init+0x128>)
 80031ea:	f001 f85b 	bl	80042a4 <HAL_GPIO_Init>

}
 80031ee:	bf00      	nop
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40011000 	.word	0x40011000
 8003200:	40010c00 	.word	0x40010c00
 8003204:	40010800 	.word	0x40010800

08003208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800320c:	b672      	cpsid	i
}
 800320e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003210:	e7fe      	b.n	8003210 <Error_Handler+0x8>
	...

08003214 <SPI_WaitFlagStateUntilTimeout>:
#include "main.h"
#include "spi_rxonly.h"

static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003224:	f000 fc9e 	bl	8003b64 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	4413      	add	r3, r2
 8003232:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003234:	f000 fc96 	bl	8003b64 <HAL_GetTick>
 8003238:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800323a:	4b39      	ldr	r3, [pc, #228]	; (8003320 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	015b      	lsls	r3, r3, #5
 8003240:	0d1b      	lsrs	r3, r3, #20
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	fb02 f303 	mul.w	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800324a:	e054      	b.n	80032f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d050      	beq.n	80032f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003254:	f000 fc86 	bl	8003b64 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	429a      	cmp	r2, r3
 8003262:	d902      	bls.n	800326a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d13d      	bne.n	80032e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003278:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003282:	d111      	bne.n	80032a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800328c:	d004      	beq.n	8003298 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003296:	d107      	bne.n	80032a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b0:	d10f      	bne.n	80032d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e017      	b.n	8003316 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4013      	ands	r3, r2
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	429a      	cmp	r2, r3
 8003304:	bf0c      	ite	eq
 8003306:	2301      	moveq	r3, #1
 8003308:	2300      	movne	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	429a      	cmp	r2, r3
 8003312:	d19b      	bne.n	800324c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000038 	.word	0x20000038

08003324 <SPI_EndRxTransaction>:

static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003338:	d111      	bne.n	800335e <SPI_EndRxTransaction+0x3a>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003342:	d004      	beq.n	800334e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334c:	d107      	bne.n	800335e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800335c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003366:	d117      	bne.n	8003398 <SPI_EndRxTransaction+0x74>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003370:	d112      	bne.n	8003398 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2200      	movs	r2, #0
 800337a:	2101      	movs	r1, #1
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff ff49 	bl	8003214 <SPI_WaitFlagStateUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01a      	beq.n	80033be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e013      	b.n	80033c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2200      	movs	r2, #0
 80033a0:	2180      	movs	r1, #128	; 0x80
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f7ff ff36 	bl	8003214 <SPI_WaitFlagStateUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	f043 0220 	orr.w	r2, r3, #32
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e000      	b.n	80033c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_SPI_ReceiveOnly>:

// HAL Receive procedure doesn't work well in RXONLY mode
// (it doesn't know when to stop), so here is quick fix
HAL_StatusTypeDef HAL_SPI_ReceiveOnly(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033e4:	d112      	bne.n	800340c <HAL_SPI_ReceiveOnly+0x44>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10e      	bne.n	800340c <HAL_SPI_ReceiveOnly+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2204      	movs	r2, #4
 80033f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f003 fb02 	bl	8006a0c <HAL_SPI_TransmitReceive>
 8003408:	4603      	mov	r3, r0
 800340a:	e110      	b.n	800362e <HAL_SPI_ReceiveOnly+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_SPI_ReceiveOnly+0x52>
 8003416:	2302      	movs	r3, #2
 8003418:	e109      	b.n	800362e <HAL_SPI_ReceiveOnly+0x266>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003422:	f000 fb9f 	bl	8003b64 <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d002      	beq.n	800343a <HAL_SPI_ReceiveOnly+0x72>
  {
    errorcode = HAL_BUSY;
 8003434:	2302      	movs	r3, #2
 8003436:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003438:	e0f0      	b.n	800361c <HAL_SPI_ReceiveOnly+0x254>
  }

  if ((pData == NULL) || (Size == 0U))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_SPI_ReceiveOnly+0x7e>
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <HAL_SPI_ReceiveOnly+0x84>
  {
    errorcode = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	77fb      	strb	r3, [r7, #31]
    goto error;
 800344a:	e0e7      	b.n	800361c <HAL_SPI_ReceiveOnly+0x254>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2204      	movs	r2, #4
 8003450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	88fa      	ldrh	r2, [r7, #6]
 800346a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003492:	d10f      	bne.n	80034b4 <HAL_SPI_ReceiveOnly+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d007      	beq.n	80034d2 <HAL_SPI_ReceiveOnly+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f040 8088 	bne.w	80035ec <HAL_SPI_ReceiveOnly+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80034dc:	e02e      	b.n	800353c <HAL_SPI_ReceiveOnly+0x174>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d115      	bne.n	8003518 <HAL_SPI_ReceiveOnly+0x150>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f103 020c 	add.w	r2, r3, #12
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	7812      	ldrb	r2, [r2, #0]
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003516:	e011      	b.n	800353c <HAL_SPI_ReceiveOnly+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003518:	f000 fb24 	bl	8003b64 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d803      	bhi.n	8003530 <HAL_SPI_ReceiveOnly+0x168>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d102      	bne.n	8003536 <HAL_SPI_ReceiveOnly+0x16e>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <HAL_SPI_ReceiveOnly+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	77fb      	strb	r3, [r7, #31]
          goto error;
 800353a:	e06f      	b.n	800361c <HAL_SPI_ReceiveOnly+0x254>
    while (hspi->RxXferCount > 0U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1cb      	bne.n	80034de <HAL_SPI_ReceiveOnly+0x116>
 8003546:	e056      	b.n	80035f6 <HAL_SPI_ReceiveOnly+0x22e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
    	// if RXONLY
    	if ((hspi->Instance->CR1 & SPI_CR1_RXONLY) == SPI_CR1_RXONLY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003556:	d11c      	bne.n	8003592 <HAL_SPI_ReceiveOnly+0x1ca>
    	{
		  /* Check if the SPI is already enabled */
		  if (((hspi->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b40      	cmp	r3, #64	; 0x40
 8003564:	d115      	bne.n	8003592 <HAL_SPI_ReceiveOnly+0x1ca>
				  && (hspi->RxXferCount == 1U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d110      	bne.n	8003592 <HAL_SPI_ReceiveOnly+0x1ca>
		  {
			  // delay for ~ 150 cycles (~ SPI clock cycle for Fclk/128
			  // (Page 718 from RM0008 Rev 21)
			  for (int i = 12; i > 0; i--);
 8003570:	230c      	movs	r3, #12
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	e002      	b.n	800357c <HAL_SPI_ReceiveOnly+0x1b4>
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	3b01      	subs	r3, #1
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	dcf9      	bgt.n	8003576 <HAL_SPI_ReceiveOnly+0x1ae>
			/* Disable SPI peripheral */
			__HAL_SPI_DISABLE(hspi);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003590:	601a      	str	r2, [r3, #0]
		  }
    	}
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d113      	bne.n	80035c8 <HAL_SPI_ReceiveOnly+0x200>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	b292      	uxth	r2, r2
 80035ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	1c9a      	adds	r2, r3, #2
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035c6:	e011      	b.n	80035ec <HAL_SPI_ReceiveOnly+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035c8:	f000 facc 	bl	8003b64 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d803      	bhi.n	80035e0 <HAL_SPI_ReceiveOnly+0x218>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d102      	bne.n	80035e6 <HAL_SPI_ReceiveOnly+0x21e>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d102      	bne.n	80035ec <HAL_SPI_ReceiveOnly+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035ea:	e017      	b.n	800361c <HAL_SPI_ReceiveOnly+0x254>
    while (hspi->RxXferCount > 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1a8      	bne.n	8003548 <HAL_SPI_ReceiveOnly+0x180>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f7ff fe92 	bl	8003324 <SPI_EndRxTransaction>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_SPI_ReceiveOnly+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_SPI_ReceiveOnly+0x252>
  {
    errorcode = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	e000      	b.n	800361c <HAL_SPI_ReceiveOnly+0x254>
  }

error :
 800361a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800362c:	7ffb      	ldrb	r3, [r7, #31]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <HAL_MspInit+0x5c>)
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	4a14      	ldr	r2, [pc, #80]	; (8003694 <HAL_MspInit+0x5c>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6193      	str	r3, [r2, #24]
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_MspInit+0x5c>)
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003656:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <HAL_MspInit+0x5c>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4a0e      	ldr	r2, [pc, #56]	; (8003694 <HAL_MspInit+0x5c>)
 800365c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003660:	61d3      	str	r3, [r2, #28]
 8003662:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <HAL_MspInit+0x5c>)
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800366e:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <HAL_MspInit+0x60>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	4a04      	ldr	r2, [pc, #16]	; (8003698 <HAL_MspInit+0x60>)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	40021000 	.word	0x40021000
 8003698:	40010000 	.word	0x40010000

0800369c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	f107 0310 	add.w	r3, r7, #16
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1b      	ldr	r2, [pc, #108]	; (8003724 <HAL_SPI_MspInit+0x88>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d12f      	bne.n	800371c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036bc:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <HAL_SPI_MspInit+0x8c>)
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	4a19      	ldr	r2, [pc, #100]	; (8003728 <HAL_SPI_MspInit+0x8c>)
 80036c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036c6:	6193      	str	r3, [r2, #24]
 80036c8:	4b17      	ldr	r3, [pc, #92]	; (8003728 <HAL_SPI_MspInit+0x8c>)
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_SPI_MspInit+0x8c>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	4a13      	ldr	r2, [pc, #76]	; (8003728 <HAL_SPI_MspInit+0x8c>)
 80036da:	f043 0304 	orr.w	r3, r3, #4
 80036de:	6193      	str	r3, [r2, #24]
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <HAL_SPI_MspInit+0x8c>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80036ec:	2330      	movs	r3, #48	; 0x30
 80036ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2302      	movs	r3, #2
 80036f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036f4:	2303      	movs	r3, #3
 80036f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f8:	f107 0310 	add.w	r3, r7, #16
 80036fc:	4619      	mov	r1, r3
 80036fe:	480b      	ldr	r0, [pc, #44]	; (800372c <HAL_SPI_MspInit+0x90>)
 8003700:	f000 fdd0 	bl	80042a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003704:	2340      	movs	r3, #64	; 0x40
 8003706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800370c:	2301      	movs	r3, #1
 800370e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003710:	f107 0310 	add.w	r3, r7, #16
 8003714:	4619      	mov	r1, r3
 8003716:	4805      	ldr	r0, [pc, #20]	; (800372c <HAL_SPI_MspInit+0x90>)
 8003718:	f000 fdc4 	bl	80042a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800371c:	bf00      	nop
 800371e:	3720      	adds	r7, #32
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40013000 	.word	0x40013000
 8003728:	40021000 	.word	0x40021000
 800372c:	40010800 	.word	0x40010800

08003730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a32      	ldr	r2, [pc, #200]	; (8003808 <HAL_TIM_Base_MspInit+0xd8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10c      	bne.n	800375c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003742:	4b32      	ldr	r3, [pc, #200]	; (800380c <HAL_TIM_Base_MspInit+0xdc>)
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	4a31      	ldr	r2, [pc, #196]	; (800380c <HAL_TIM_Base_MspInit+0xdc>)
 8003748:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800374c:	6193      	str	r3, [r2, #24]
 800374e:	4b2f      	ldr	r3, [pc, #188]	; (800380c <HAL_TIM_Base_MspInit+0xdc>)
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800375a:	e051      	b.n	8003800 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d114      	bne.n	8003790 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003766:	4b29      	ldr	r3, [pc, #164]	; (800380c <HAL_TIM_Base_MspInit+0xdc>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	4a28      	ldr	r2, [pc, #160]	; (800380c <HAL_TIM_Base_MspInit+0xdc>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	61d3      	str	r3, [r2, #28]
 8003772:	4b26      	ldr	r3, [pc, #152]	; (800380c <HAL_TIM_Base_MspInit+0xdc>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	201c      	movs	r0, #28
 8003784:	f000 faf3 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003788:	201c      	movs	r0, #28
 800378a:	f000 fb0c 	bl	8003da6 <HAL_NVIC_EnableIRQ>
}
 800378e:	e037      	b.n	8003800 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <HAL_TIM_Base_MspInit+0xe0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d132      	bne.n	8003800 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800379a:	4b1c      	ldr	r3, [pc, #112]	; (800380c <HAL_TIM_Base_MspInit+0xdc>)
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	4a1b      	ldr	r2, [pc, #108]	; (800380c <HAL_TIM_Base_MspInit+0xdc>)
 80037a0:	f043 0304 	orr.w	r3, r3, #4
 80037a4:	61d3      	str	r3, [r2, #28]
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_TIM_Base_MspInit+0xdc>)
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_TIM_Base_MspInit+0xe4>)
 80037b4:	4a18      	ldr	r2, [pc, #96]	; (8003818 <HAL_TIM_Base_MspInit+0xe8>)
 80037b6:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037b8:	4b16      	ldr	r3, [pc, #88]	; (8003814 <HAL_TIM_Base_MspInit+0xe4>)
 80037ba:	2210      	movs	r2, #16
 80037bc:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <HAL_TIM_Base_MspInit+0xe4>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80037c4:	4b13      	ldr	r3, [pc, #76]	; (8003814 <HAL_TIM_Base_MspInit+0xe4>)
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_TIM_Base_MspInit+0xe4>)
 80037cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037d0:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <HAL_TIM_Base_MspInit+0xe4>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 80037d8:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_TIM_Base_MspInit+0xe4>)
 80037da:	2220      	movs	r2, #32
 80037dc:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80037de:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <HAL_TIM_Base_MspInit+0xe4>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 80037e4:	480b      	ldr	r0, [pc, #44]	; (8003814 <HAL_TIM_Base_MspInit+0xe4>)
 80037e6:	f000 faf9 	bl	8003ddc <HAL_DMA_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_TIM_Base_MspInit+0xc4>
      Error_Handler();
 80037f0:	f7ff fd0a 	bl	8003208 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a07      	ldr	r2, [pc, #28]	; (8003814 <HAL_TIM_Base_MspInit+0xe4>)
 80037f8:	629a      	str	r2, [r3, #40]	; 0x28
 80037fa:	4a06      	ldr	r2, [pc, #24]	; (8003814 <HAL_TIM_Base_MspInit+0xe4>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003800:	bf00      	nop
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40021000 	.word	0x40021000
 8003810:	40000800 	.word	0x40000800
 8003814:	2000052c 	.word	0x2000052c
 8003818:	40020044 	.word	0x40020044

0800381c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	; 0x28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 0314 	add.w	r3, r7, #20
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1e      	ldr	r2, [pc, #120]	; (80038b0 <HAL_TIM_Encoder_MspInit+0x94>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d135      	bne.n	80038a8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_TIM_Encoder_MspInit+0x98>)
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003842:	f043 0302 	orr.w	r3, r3, #2
 8003846:	61d3      	str	r3, [r2, #28]
 8003848:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <HAL_TIM_Encoder_MspInit+0x98>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003854:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	4a16      	ldr	r2, [pc, #88]	; (80038b4 <HAL_TIM_Encoder_MspInit+0x98>)
 800385a:	f043 0308 	orr.w	r3, r3, #8
 800385e:	6193      	str	r3, [r2, #24]
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin;
 800386c:	2330      	movs	r3, #48	; 0x30
 800386e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003870:	2300      	movs	r3, #0
 8003872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003878:	f107 0314 	add.w	r3, r7, #20
 800387c:	4619      	mov	r1, r3
 800387e:	480e      	ldr	r0, [pc, #56]	; (80038b8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003880:	f000 fd10 	bl	80042a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003884:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <HAL_TIM_Encoder_MspInit+0xa0>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
 80038a2:	4a06      	ldr	r2, [pc, #24]	; (80038bc <HAL_TIM_Encoder_MspInit+0xa0>)
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038a8:	bf00      	nop
 80038aa:	3728      	adds	r7, #40	; 0x28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40000400 	.word	0x40000400
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40010c00 	.word	0x40010c00
 80038bc:	40010000 	.word	0x40010000

080038c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 0310 	add.w	r3, r7, #16
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038de:	d118      	bne.n	8003912 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e0:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <HAL_TIM_MspPostInit+0x94>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <HAL_TIM_MspPostInit+0x94>)
 80038e6:	f043 0304 	orr.w	r3, r3, #4
 80038ea:	6193      	str	r3, [r2, #24]
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_TIM_MspPostInit+0x94>)
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SSR_control_Pin;
 80038f8:	2301      	movs	r3, #1
 80038fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fc:	2302      	movs	r3, #2
 80038fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003900:	2302      	movs	r3, #2
 8003902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SSR_control_GPIO_Port, &GPIO_InitStruct);
 8003904:	f107 0310 	add.w	r3, r7, #16
 8003908:	4619      	mov	r1, r3
 800390a:	4813      	ldr	r0, [pc, #76]	; (8003958 <HAL_TIM_MspPostInit+0x98>)
 800390c:	f000 fcca 	bl	80042a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003910:	e01c      	b.n	800394c <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a11      	ldr	r2, [pc, #68]	; (800395c <HAL_TIM_MspPostInit+0x9c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d117      	bne.n	800394c <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800391c:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <HAL_TIM_MspPostInit+0x94>)
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <HAL_TIM_MspPostInit+0x94>)
 8003922:	f043 0308 	orr.w	r3, r3, #8
 8003926:	6193      	str	r3, [r2, #24]
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <HAL_TIM_MspPostInit+0x94>)
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Loudspeaker_Pin;
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003938:	2302      	movs	r3, #2
 800393a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393c:	2302      	movs	r3, #2
 800393e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Loudspeaker_GPIO_Port, &GPIO_InitStruct);
 8003940:	f107 0310 	add.w	r3, r7, #16
 8003944:	4619      	mov	r1, r3
 8003946:	4806      	ldr	r0, [pc, #24]	; (8003960 <HAL_TIM_MspPostInit+0xa0>)
 8003948:	f000 fcac 	bl	80042a4 <HAL_GPIO_Init>
}
 800394c:	bf00      	nop
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	40010800 	.word	0x40010800
 800395c:	40000800 	.word	0x40000800
 8003960:	40010c00 	.word	0x40010c00

08003964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003968:	e7fe      	b.n	8003968 <NMI_Handler+0x4>

0800396a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800396e:	e7fe      	b.n	800396e <HardFault_Handler+0x4>

08003970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003974:	e7fe      	b.n	8003974 <MemManage_Handler+0x4>

08003976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800397a:	e7fe      	b.n	800397a <BusFault_Handler+0x4>

0800397c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003980:	e7fe      	b.n	8003980 <UsageFault_Handler+0x4>

08003982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800398e:	b480      	push	{r7}
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800399a:	b480      	push	{r7}
 800399c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039aa:	f000 f8c9 	bl	8003b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <DMA1_Channel4_IRQHandler+0x10>)
 80039ba:	f000 fb3f 	bl	800403c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000052c 	.word	0x2000052c

080039c8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80039ce:	f000 ff66 	bl	800489e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200013a4 	.word	0x200013a4

080039dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039e0:	4802      	ldr	r0, [pc, #8]	; (80039ec <TIM2_IRQHandler+0x10>)
 80039e2:	f004 f821 	bl	8007a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	200006c4 	.word	0x200006c4

080039f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <_sbrk+0x5c>)
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <_sbrk+0x60>)
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a04:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <_sbrk+0x64>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a0c:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <_sbrk+0x64>)
 8003a0e:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <_sbrk+0x68>)
 8003a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a12:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <_sbrk+0x64>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d207      	bcs.n	8003a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a20:	f009 f98e 	bl	800cd40 <__errno>
 8003a24:	4603      	mov	r3, r0
 8003a26:	220c      	movs	r2, #12
 8003a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2e:	e009      	b.n	8003a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <_sbrk+0x64>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a36:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <_sbrk+0x64>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	4a05      	ldr	r2, [pc, #20]	; (8003a54 <_sbrk+0x64>)
 8003a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a42:	68fb      	ldr	r3, [r7, #12]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20005000 	.word	0x20005000
 8003a50:	00000400 	.word	0x00000400
 8003a54:	200002f8 	.word	0x200002f8
 8003a58:	200016a0 	.word	0x200016a0

08003a5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a68:	480c      	ldr	r0, [pc, #48]	; (8003a9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a6a:	490d      	ldr	r1, [pc, #52]	; (8003aa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a6c:	4a0d      	ldr	r2, [pc, #52]	; (8003aa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a70:	e002      	b.n	8003a78 <LoopCopyDataInit>

08003a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a76:	3304      	adds	r3, #4

08003a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a7c:	d3f9      	bcc.n	8003a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a80:	4c0a      	ldr	r4, [pc, #40]	; (8003aac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a84:	e001      	b.n	8003a8a <LoopFillZerobss>

08003a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a88:	3204      	adds	r2, #4

08003a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a8c:	d3fb      	bcc.n	8003a86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a8e:	f7ff ffe5 	bl	8003a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a92:	f009 f95b 	bl	800cd4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a96:	f7ff f859 	bl	8002b4c <main>
  bx lr
 8003a9a:	4770      	bx	lr
  ldr r0, =_sdata
 8003a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aa0:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003aa4:	0800f25c 	.word	0x0800f25c
  ldr r2, =_sbss
 8003aa8:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003aac:	200016a0 	.word	0x200016a0

08003ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ab0:	e7fe      	b.n	8003ab0 <ADC1_2_IRQHandler>
	...

08003ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_Init+0x28>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a07      	ldr	r2, [pc, #28]	; (8003adc <HAL_Init+0x28>)
 8003abe:	f043 0310 	orr.w	r3, r3, #16
 8003ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ac4:	2003      	movs	r0, #3
 8003ac6:	f000 f947 	bl	8003d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aca:	2000      	movs	r0, #0
 8003acc:	f000 f808 	bl	8003ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ad0:	f7ff fdb2 	bl	8003638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40022000 	.word	0x40022000

08003ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ae8:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_InitTick+0x54>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <HAL_InitTick+0x58>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4619      	mov	r1, r3
 8003af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 f95f 	bl	8003dc2 <HAL_SYSTICK_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00e      	b.n	8003b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b0f      	cmp	r3, #15
 8003b12:	d80a      	bhi.n	8003b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b14:	2200      	movs	r2, #0
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	f000 f927 	bl	8003d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b20:	4a06      	ldr	r2, [pc, #24]	; (8003b3c <HAL_InitTick+0x5c>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000038 	.word	0x20000038
 8003b38:	20000040 	.word	0x20000040
 8003b3c:	2000003c 	.word	0x2000003c

08003b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_IncTick+0x1c>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_IncTick+0x20>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a03      	ldr	r2, [pc, #12]	; (8003b60 <HAL_IncTick+0x20>)
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	20000040 	.word	0x20000040
 8003b60:	2000070c 	.word	0x2000070c

08003b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return uwTick;
 8003b68:	4b02      	ldr	r3, [pc, #8]	; (8003b74 <HAL_GetTick+0x10>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	2000070c 	.word	0x2000070c

08003b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b80:	f7ff fff0 	bl	8003b64 <HAL_GetTick>
 8003b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d005      	beq.n	8003b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b92:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <HAL_Delay+0x44>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b9e:	bf00      	nop
 8003ba0:	f7ff ffe0 	bl	8003b64 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d8f7      	bhi.n	8003ba0 <HAL_Delay+0x28>
  {
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000040 	.word	0x20000040

08003bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf2:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	60d3      	str	r3, [r2, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <__NVIC_GetPriorityGrouping+0x18>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	f003 0307 	and.w	r3, r3, #7
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	db0b      	blt.n	8003c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	f003 021f 	and.w	r2, r3, #31
 8003c3c:	4906      	ldr	r1, [pc, #24]	; (8003c58 <__NVIC_EnableIRQ+0x34>)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2001      	movs	r0, #1
 8003c46:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	e000e100 	.word	0xe000e100

08003c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	db0a      	blt.n	8003c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	490c      	ldr	r1, [pc, #48]	; (8003ca8 <__NVIC_SetPriority+0x4c>)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	0112      	lsls	r2, r2, #4
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	440b      	add	r3, r1
 8003c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c84:	e00a      	b.n	8003c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	4908      	ldr	r1, [pc, #32]	; (8003cac <__NVIC_SetPriority+0x50>)
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	3b04      	subs	r3, #4
 8003c94:	0112      	lsls	r2, r2, #4
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	440b      	add	r3, r1
 8003c9a:	761a      	strb	r2, [r3, #24]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000e100 	.word	0xe000e100
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	; 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f1c3 0307 	rsb	r3, r3, #7
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	bf28      	it	cs
 8003cce:	2304      	movcs	r3, #4
 8003cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	2b06      	cmp	r3, #6
 8003cd8:	d902      	bls.n	8003ce0 <NVIC_EncodePriority+0x30>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3b03      	subs	r3, #3
 8003cde:	e000      	b.n	8003ce2 <NVIC_EncodePriority+0x32>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	43d9      	mvns	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d08:	4313      	orrs	r3, r2
         );
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3724      	adds	r7, #36	; 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d24:	d301      	bcc.n	8003d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d26:	2301      	movs	r3, #1
 8003d28:	e00f      	b.n	8003d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <SysTick_Config+0x40>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d32:	210f      	movs	r1, #15
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295
 8003d38:	f7ff ff90 	bl	8003c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <SysTick_Config+0x40>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <SysTick_Config+0x40>)
 8003d44:	2207      	movs	r2, #7
 8003d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	e000e010 	.word	0xe000e010

08003d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff2d 	bl	8003bc0 <__NVIC_SetPriorityGrouping>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b086      	sub	sp, #24
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	4603      	mov	r3, r0
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d80:	f7ff ff42 	bl	8003c08 <__NVIC_GetPriorityGrouping>
 8003d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	6978      	ldr	r0, [r7, #20]
 8003d8c:	f7ff ff90 	bl	8003cb0 <NVIC_EncodePriority>
 8003d90:	4602      	mov	r2, r0
 8003d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff5f 	bl	8003c5c <__NVIC_SetPriority>
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff35 	bl	8003c24 <__NVIC_EnableIRQ>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ffa2 	bl	8003d14 <SysTick_Config>
 8003dd0:	4603      	mov	r3, r0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e043      	b.n	8003e7a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <HAL_DMA_Init+0xa8>)
 8003dfa:	4413      	add	r3, r2
 8003dfc:	4a22      	ldr	r2, [pc, #136]	; (8003e88 <HAL_DMA_Init+0xac>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	091b      	lsrs	r3, r3, #4
 8003e04:	009a      	lsls	r2, r3, #2
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a1f      	ldr	r2, [pc, #124]	; (8003e8c <HAL_DMA_Init+0xb0>)
 8003e0e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003e2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr
 8003e84:	bffdfff8 	.word	0xbffdfff8
 8003e88:	cccccccd 	.word	0xcccccccd
 8003e8c:	40020000 	.word	0x40020000

08003e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_DMA_Start_IT+0x20>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e04a      	b.n	8003f46 <HAL_DMA_Start_IT+0xb6>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d13a      	bne.n	8003f38 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0201 	bic.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f9ae 	bl	8004248 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 020e 	orr.w	r2, r2, #14
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e00f      	b.n	8003f26 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0204 	bic.w	r2, r2, #4
 8003f14:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 020a 	orr.w	r2, r2, #10
 8003f24:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	e005      	b.n	8003f44 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f40:	2302      	movs	r3, #2
 8003f42:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d005      	beq.n	8003f72 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
 8003f70:	e051      	b.n	8004016 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 020e 	bic.w	r2, r2, #14
 8003f80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a22      	ldr	r2, [pc, #136]	; (8004020 <HAL_DMA_Abort_IT+0xd0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d029      	beq.n	8003ff0 <HAL_DMA_Abort_IT+0xa0>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a20      	ldr	r2, [pc, #128]	; (8004024 <HAL_DMA_Abort_IT+0xd4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d022      	beq.n	8003fec <HAL_DMA_Abort_IT+0x9c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_DMA_Abort_IT+0xd8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d01a      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x96>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1d      	ldr	r2, [pc, #116]	; (800402c <HAL_DMA_Abort_IT+0xdc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d012      	beq.n	8003fe0 <HAL_DMA_Abort_IT+0x90>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <HAL_DMA_Abort_IT+0xe0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00a      	beq.n	8003fda <HAL_DMA_Abort_IT+0x8a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1a      	ldr	r2, [pc, #104]	; (8004034 <HAL_DMA_Abort_IT+0xe4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d102      	bne.n	8003fd4 <HAL_DMA_Abort_IT+0x84>
 8003fce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003fd2:	e00e      	b.n	8003ff2 <HAL_DMA_Abort_IT+0xa2>
 8003fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fd8:	e00b      	b.n	8003ff2 <HAL_DMA_Abort_IT+0xa2>
 8003fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fde:	e008      	b.n	8003ff2 <HAL_DMA_Abort_IT+0xa2>
 8003fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fe4:	e005      	b.n	8003ff2 <HAL_DMA_Abort_IT+0xa2>
 8003fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fea:	e002      	b.n	8003ff2 <HAL_DMA_Abort_IT+0xa2>
 8003fec:	2310      	movs	r3, #16
 8003fee:	e000      	b.n	8003ff2 <HAL_DMA_Abort_IT+0xa2>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	4a11      	ldr	r2, [pc, #68]	; (8004038 <HAL_DMA_Abort_IT+0xe8>)
 8003ff4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
    } 
  }
  return status;
 8004016:	7bfb      	ldrb	r3, [r7, #15]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40020008 	.word	0x40020008
 8004024:	4002001c 	.word	0x4002001c
 8004028:	40020030 	.word	0x40020030
 800402c:	40020044 	.word	0x40020044
 8004030:	40020058 	.word	0x40020058
 8004034:	4002006c 	.word	0x4002006c
 8004038:	40020000 	.word	0x40020000

0800403c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	2204      	movs	r2, #4
 800405a:	409a      	lsls	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d04f      	beq.n	8004104 <HAL_DMA_IRQHandler+0xc8>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	d04a      	beq.n	8004104 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d107      	bne.n	800408c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0204 	bic.w	r2, r2, #4
 800408a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a66      	ldr	r2, [pc, #408]	; (800422c <HAL_DMA_IRQHandler+0x1f0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d029      	beq.n	80040ea <HAL_DMA_IRQHandler+0xae>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a65      	ldr	r2, [pc, #404]	; (8004230 <HAL_DMA_IRQHandler+0x1f4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d022      	beq.n	80040e6 <HAL_DMA_IRQHandler+0xaa>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a63      	ldr	r2, [pc, #396]	; (8004234 <HAL_DMA_IRQHandler+0x1f8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d01a      	beq.n	80040e0 <HAL_DMA_IRQHandler+0xa4>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a62      	ldr	r2, [pc, #392]	; (8004238 <HAL_DMA_IRQHandler+0x1fc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d012      	beq.n	80040da <HAL_DMA_IRQHandler+0x9e>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a60      	ldr	r2, [pc, #384]	; (800423c <HAL_DMA_IRQHandler+0x200>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00a      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x98>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a5f      	ldr	r2, [pc, #380]	; (8004240 <HAL_DMA_IRQHandler+0x204>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d102      	bne.n	80040ce <HAL_DMA_IRQHandler+0x92>
 80040c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040cc:	e00e      	b.n	80040ec <HAL_DMA_IRQHandler+0xb0>
 80040ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80040d2:	e00b      	b.n	80040ec <HAL_DMA_IRQHandler+0xb0>
 80040d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80040d8:	e008      	b.n	80040ec <HAL_DMA_IRQHandler+0xb0>
 80040da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040de:	e005      	b.n	80040ec <HAL_DMA_IRQHandler+0xb0>
 80040e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040e4:	e002      	b.n	80040ec <HAL_DMA_IRQHandler+0xb0>
 80040e6:	2340      	movs	r3, #64	; 0x40
 80040e8:	e000      	b.n	80040ec <HAL_DMA_IRQHandler+0xb0>
 80040ea:	2304      	movs	r3, #4
 80040ec:	4a55      	ldr	r2, [pc, #340]	; (8004244 <HAL_DMA_IRQHandler+0x208>)
 80040ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 8094 	beq.w	8004222 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004102:	e08e      	b.n	8004222 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	2202      	movs	r2, #2
 800410a:	409a      	lsls	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d056      	beq.n	80041c2 <HAL_DMA_IRQHandler+0x186>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d051      	beq.n	80041c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 020a 	bic.w	r2, r2, #10
 800413a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a38      	ldr	r2, [pc, #224]	; (800422c <HAL_DMA_IRQHandler+0x1f0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d029      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x166>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a37      	ldr	r2, [pc, #220]	; (8004230 <HAL_DMA_IRQHandler+0x1f4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d022      	beq.n	800419e <HAL_DMA_IRQHandler+0x162>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a35      	ldr	r2, [pc, #212]	; (8004234 <HAL_DMA_IRQHandler+0x1f8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d01a      	beq.n	8004198 <HAL_DMA_IRQHandler+0x15c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a34      	ldr	r2, [pc, #208]	; (8004238 <HAL_DMA_IRQHandler+0x1fc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d012      	beq.n	8004192 <HAL_DMA_IRQHandler+0x156>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a32      	ldr	r2, [pc, #200]	; (800423c <HAL_DMA_IRQHandler+0x200>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00a      	beq.n	800418c <HAL_DMA_IRQHandler+0x150>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a31      	ldr	r2, [pc, #196]	; (8004240 <HAL_DMA_IRQHandler+0x204>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d102      	bne.n	8004186 <HAL_DMA_IRQHandler+0x14a>
 8004180:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004184:	e00e      	b.n	80041a4 <HAL_DMA_IRQHandler+0x168>
 8004186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800418a:	e00b      	b.n	80041a4 <HAL_DMA_IRQHandler+0x168>
 800418c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004190:	e008      	b.n	80041a4 <HAL_DMA_IRQHandler+0x168>
 8004192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004196:	e005      	b.n	80041a4 <HAL_DMA_IRQHandler+0x168>
 8004198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800419c:	e002      	b.n	80041a4 <HAL_DMA_IRQHandler+0x168>
 800419e:	2320      	movs	r3, #32
 80041a0:	e000      	b.n	80041a4 <HAL_DMA_IRQHandler+0x168>
 80041a2:	2302      	movs	r3, #2
 80041a4:	4a27      	ldr	r2, [pc, #156]	; (8004244 <HAL_DMA_IRQHandler+0x208>)
 80041a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d034      	beq.n	8004222 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80041c0:	e02f      	b.n	8004222 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2208      	movs	r2, #8
 80041c8:	409a      	lsls	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d028      	beq.n	8004224 <HAL_DMA_IRQHandler+0x1e8>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d023      	beq.n	8004224 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 020e 	bic.w	r2, r2, #14
 80041ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f4:	2101      	movs	r1, #1
 80041f6:	fa01 f202 	lsl.w	r2, r1, r2
 80041fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	2b00      	cmp	r3, #0
 8004218:	d004      	beq.n	8004224 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
    }
  }
  return;
 8004222:	bf00      	nop
 8004224:	bf00      	nop
}
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40020008 	.word	0x40020008
 8004230:	4002001c 	.word	0x4002001c
 8004234:	40020030 	.word	0x40020030
 8004238:	40020044 	.word	0x40020044
 800423c:	40020058 	.word	0x40020058
 8004240:	4002006c 	.word	0x4002006c
 8004244:	40020000 	.word	0x40020000

08004248 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	2101      	movs	r1, #1
 8004260:	fa01 f202 	lsl.w	r2, r1, r2
 8004264:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b10      	cmp	r3, #16
 8004274:	d108      	bne.n	8004288 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004286:	e007      	b.n	8004298 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b08b      	sub	sp, #44	; 0x2c
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042ae:	2300      	movs	r3, #0
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042b2:	2300      	movs	r3, #0
 80042b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042b6:	e169      	b.n	800458c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80042b8:	2201      	movs	r2, #1
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	f040 8158 	bne.w	8004586 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	4a9a      	ldr	r2, [pc, #616]	; (8004544 <HAL_GPIO_Init+0x2a0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d05e      	beq.n	800439e <HAL_GPIO_Init+0xfa>
 80042e0:	4a98      	ldr	r2, [pc, #608]	; (8004544 <HAL_GPIO_Init+0x2a0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d875      	bhi.n	80043d2 <HAL_GPIO_Init+0x12e>
 80042e6:	4a98      	ldr	r2, [pc, #608]	; (8004548 <HAL_GPIO_Init+0x2a4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d058      	beq.n	800439e <HAL_GPIO_Init+0xfa>
 80042ec:	4a96      	ldr	r2, [pc, #600]	; (8004548 <HAL_GPIO_Init+0x2a4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d86f      	bhi.n	80043d2 <HAL_GPIO_Init+0x12e>
 80042f2:	4a96      	ldr	r2, [pc, #600]	; (800454c <HAL_GPIO_Init+0x2a8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d052      	beq.n	800439e <HAL_GPIO_Init+0xfa>
 80042f8:	4a94      	ldr	r2, [pc, #592]	; (800454c <HAL_GPIO_Init+0x2a8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d869      	bhi.n	80043d2 <HAL_GPIO_Init+0x12e>
 80042fe:	4a94      	ldr	r2, [pc, #592]	; (8004550 <HAL_GPIO_Init+0x2ac>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d04c      	beq.n	800439e <HAL_GPIO_Init+0xfa>
 8004304:	4a92      	ldr	r2, [pc, #584]	; (8004550 <HAL_GPIO_Init+0x2ac>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d863      	bhi.n	80043d2 <HAL_GPIO_Init+0x12e>
 800430a:	4a92      	ldr	r2, [pc, #584]	; (8004554 <HAL_GPIO_Init+0x2b0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d046      	beq.n	800439e <HAL_GPIO_Init+0xfa>
 8004310:	4a90      	ldr	r2, [pc, #576]	; (8004554 <HAL_GPIO_Init+0x2b0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d85d      	bhi.n	80043d2 <HAL_GPIO_Init+0x12e>
 8004316:	2b12      	cmp	r3, #18
 8004318:	d82a      	bhi.n	8004370 <HAL_GPIO_Init+0xcc>
 800431a:	2b12      	cmp	r3, #18
 800431c:	d859      	bhi.n	80043d2 <HAL_GPIO_Init+0x12e>
 800431e:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <HAL_GPIO_Init+0x80>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	0800439f 	.word	0x0800439f
 8004328:	08004379 	.word	0x08004379
 800432c:	0800438b 	.word	0x0800438b
 8004330:	080043cd 	.word	0x080043cd
 8004334:	080043d3 	.word	0x080043d3
 8004338:	080043d3 	.word	0x080043d3
 800433c:	080043d3 	.word	0x080043d3
 8004340:	080043d3 	.word	0x080043d3
 8004344:	080043d3 	.word	0x080043d3
 8004348:	080043d3 	.word	0x080043d3
 800434c:	080043d3 	.word	0x080043d3
 8004350:	080043d3 	.word	0x080043d3
 8004354:	080043d3 	.word	0x080043d3
 8004358:	080043d3 	.word	0x080043d3
 800435c:	080043d3 	.word	0x080043d3
 8004360:	080043d3 	.word	0x080043d3
 8004364:	080043d3 	.word	0x080043d3
 8004368:	08004381 	.word	0x08004381
 800436c:	08004395 	.word	0x08004395
 8004370:	4a79      	ldr	r2, [pc, #484]	; (8004558 <HAL_GPIO_Init+0x2b4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004376:	e02c      	b.n	80043d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	623b      	str	r3, [r7, #32]
          break;
 800437e:	e029      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	3304      	adds	r3, #4
 8004386:	623b      	str	r3, [r7, #32]
          break;
 8004388:	e024      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	3308      	adds	r3, #8
 8004390:	623b      	str	r3, [r7, #32]
          break;
 8004392:	e01f      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	330c      	adds	r3, #12
 800439a:	623b      	str	r3, [r7, #32]
          break;
 800439c:	e01a      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80043a6:	2304      	movs	r3, #4
 80043a8:	623b      	str	r3, [r7, #32]
          break;
 80043aa:	e013      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d105      	bne.n	80043c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043b4:	2308      	movs	r3, #8
 80043b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	611a      	str	r2, [r3, #16]
          break;
 80043be:	e009      	b.n	80043d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043c0:	2308      	movs	r3, #8
 80043c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	615a      	str	r2, [r3, #20]
          break;
 80043ca:	e003      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80043cc:	2300      	movs	r3, #0
 80043ce:	623b      	str	r3, [r7, #32]
          break;
 80043d0:	e000      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          break;
 80043d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2bff      	cmp	r3, #255	; 0xff
 80043d8:	d801      	bhi.n	80043de <HAL_GPIO_Init+0x13a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	e001      	b.n	80043e2 <HAL_GPIO_Init+0x13e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2bff      	cmp	r3, #255	; 0xff
 80043e8:	d802      	bhi.n	80043f0 <HAL_GPIO_Init+0x14c>
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	e002      	b.n	80043f6 <HAL_GPIO_Init+0x152>
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	3b08      	subs	r3, #8
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	210f      	movs	r1, #15
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	fa01 f303 	lsl.w	r3, r1, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	401a      	ands	r2, r3
 8004408:	6a39      	ldr	r1, [r7, #32]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	431a      	orrs	r2, r3
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 80b1 	beq.w	8004586 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004424:	4b4d      	ldr	r3, [pc, #308]	; (800455c <HAL_GPIO_Init+0x2b8>)
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	4a4c      	ldr	r2, [pc, #304]	; (800455c <HAL_GPIO_Init+0x2b8>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	6193      	str	r3, [r2, #24]
 8004430:	4b4a      	ldr	r3, [pc, #296]	; (800455c <HAL_GPIO_Init+0x2b8>)
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800443c:	4a48      	ldr	r2, [pc, #288]	; (8004560 <HAL_GPIO_Init+0x2bc>)
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	089b      	lsrs	r3, r3, #2
 8004442:	3302      	adds	r3, #2
 8004444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004448:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	220f      	movs	r2, #15
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4013      	ands	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a40      	ldr	r2, [pc, #256]	; (8004564 <HAL_GPIO_Init+0x2c0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <HAL_GPIO_Init+0x1ec>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a3f      	ldr	r2, [pc, #252]	; (8004568 <HAL_GPIO_Init+0x2c4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00d      	beq.n	800448c <HAL_GPIO_Init+0x1e8>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a3e      	ldr	r2, [pc, #248]	; (800456c <HAL_GPIO_Init+0x2c8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d007      	beq.n	8004488 <HAL_GPIO_Init+0x1e4>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a3d      	ldr	r2, [pc, #244]	; (8004570 <HAL_GPIO_Init+0x2cc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d101      	bne.n	8004484 <HAL_GPIO_Init+0x1e0>
 8004480:	2303      	movs	r3, #3
 8004482:	e006      	b.n	8004492 <HAL_GPIO_Init+0x1ee>
 8004484:	2304      	movs	r3, #4
 8004486:	e004      	b.n	8004492 <HAL_GPIO_Init+0x1ee>
 8004488:	2302      	movs	r3, #2
 800448a:	e002      	b.n	8004492 <HAL_GPIO_Init+0x1ee>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <HAL_GPIO_Init+0x1ee>
 8004490:	2300      	movs	r3, #0
 8004492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004494:	f002 0203 	and.w	r2, r2, #3
 8004498:	0092      	lsls	r2, r2, #2
 800449a:	4093      	lsls	r3, r2
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80044a2:	492f      	ldr	r1, [pc, #188]	; (8004560 <HAL_GPIO_Init+0x2bc>)
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	3302      	adds	r3, #2
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d006      	beq.n	80044ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80044bc:	4b2d      	ldr	r3, [pc, #180]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	492c      	ldr	r1, [pc, #176]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	600b      	str	r3, [r1, #0]
 80044c8:	e006      	b.n	80044d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80044ca:	4b2a      	ldr	r3, [pc, #168]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	4928      	ldr	r1, [pc, #160]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d006      	beq.n	80044f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80044e4:	4b23      	ldr	r3, [pc, #140]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	4922      	ldr	r1, [pc, #136]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	604b      	str	r3, [r1, #4]
 80044f0:	e006      	b.n	8004500 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80044f2:	4b20      	ldr	r3, [pc, #128]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	491e      	ldr	r1, [pc, #120]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d006      	beq.n	800451a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	4918      	ldr	r1, [pc, #96]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	4313      	orrs	r3, r2
 8004516:	608b      	str	r3, [r1, #8]
 8004518:	e006      	b.n	8004528 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800451a:	4b16      	ldr	r3, [pc, #88]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	43db      	mvns	r3, r3
 8004522:	4914      	ldr	r1, [pc, #80]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 8004524:	4013      	ands	r3, r2
 8004526:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d021      	beq.n	8004578 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004534:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	490e      	ldr	r1, [pc, #56]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	4313      	orrs	r3, r2
 800453e:	60cb      	str	r3, [r1, #12]
 8004540:	e021      	b.n	8004586 <HAL_GPIO_Init+0x2e2>
 8004542:	bf00      	nop
 8004544:	10320000 	.word	0x10320000
 8004548:	10310000 	.word	0x10310000
 800454c:	10220000 	.word	0x10220000
 8004550:	10210000 	.word	0x10210000
 8004554:	10120000 	.word	0x10120000
 8004558:	10110000 	.word	0x10110000
 800455c:	40021000 	.word	0x40021000
 8004560:	40010000 	.word	0x40010000
 8004564:	40010800 	.word	0x40010800
 8004568:	40010c00 	.word	0x40010c00
 800456c:	40011000 	.word	0x40011000
 8004570:	40011400 	.word	0x40011400
 8004574:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_GPIO_Init+0x304>)
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	43db      	mvns	r3, r3
 8004580:	4909      	ldr	r1, [pc, #36]	; (80045a8 <HAL_GPIO_Init+0x304>)
 8004582:	4013      	ands	r3, r2
 8004584:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	3301      	adds	r3, #1
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	fa22 f303 	lsr.w	r3, r2, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	f47f ae8e 	bne.w	80042b8 <HAL_GPIO_Init+0x14>
  }
}
 800459c:	bf00      	nop
 800459e:	bf00      	nop
 80045a0:	372c      	adds	r7, #44	; 0x2c
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr
 80045a8:	40010400 	.word	0x40010400

080045ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	887b      	ldrh	r3, [r7, #2]
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
 80045c8:	e001      	b.n	80045ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045ca:	2300      	movs	r3, #0
 80045cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	807b      	strh	r3, [r7, #2]
 80045e6:	4613      	mov	r3, r2
 80045e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045ea:	787b      	ldrb	r3, [r7, #1]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045f0:	887a      	ldrh	r2, [r7, #2]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80045f6:	e003      	b.n	8004600 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045f8:	887b      	ldrh	r3, [r7, #2]
 80045fa:	041a      	lsls	r2, r3, #16
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	611a      	str	r2, [r3, #16]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr

0800460a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800460a:	b480      	push	{r7}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800461c:	887a      	ldrh	r2, [r7, #2]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4013      	ands	r3, r2
 8004622:	041a      	lsls	r2, r3, #16
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	43d9      	mvns	r1, r3
 8004628:	887b      	ldrh	r3, [r7, #2]
 800462a:	400b      	ands	r3, r1
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	611a      	str	r2, [r3, #16]
}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800463c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800463e:	b08b      	sub	sp, #44	; 0x2c
 8004640:	af06      	add	r7, sp, #24
 8004642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e0fd      	b.n	800484a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f008 f8c2 	bl	800c7ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2203      	movs	r2, #3
 800466c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f004 f8f1 	bl	800885c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	687e      	ldr	r6, [r7, #4]
 8004682:	466d      	mov	r5, sp
 8004684:	f106 0410 	add.w	r4, r6, #16
 8004688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800468a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	602b      	str	r3, [r5, #0]
 8004690:	1d33      	adds	r3, r6, #4
 8004692:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004694:	6838      	ldr	r0, [r7, #0]
 8004696:	f004 f8bb 	bl	8008810 <USB_CoreInit>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0ce      	b.n	800484a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f004 f8ec 	bl	8008890 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b8:	2300      	movs	r3, #0
 80046ba:	73fb      	strb	r3, [r7, #15]
 80046bc:	e04c      	b.n	8004758 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	440b      	add	r3, r1
 80046ce:	3301      	adds	r3, #1
 80046d0:	2201      	movs	r2, #1
 80046d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	440b      	add	r3, r1
 80046e4:	7bfa      	ldrb	r2, [r7, #15]
 80046e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046e8:	7bfa      	ldrb	r2, [r7, #15]
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	b298      	uxth	r0, r3
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	440b      	add	r3, r1
 80046fa:	3336      	adds	r3, #54	; 0x36
 80046fc:	4602      	mov	r2, r0
 80046fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	440b      	add	r3, r1
 8004710:	3303      	adds	r3, #3
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004716:	7bfa      	ldrb	r2, [r7, #15]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	440b      	add	r3, r1
 8004724:	3338      	adds	r3, #56	; 0x38
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800472a:	7bfa      	ldrb	r2, [r7, #15]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	440b      	add	r3, r1
 8004738:	333c      	adds	r3, #60	; 0x3c
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800473e:	7bfa      	ldrb	r2, [r7, #15]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	440b      	add	r3, r1
 800474c:	3340      	adds	r3, #64	; 0x40
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	3301      	adds	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
 8004758:	7bfa      	ldrb	r2, [r7, #15]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	429a      	cmp	r2, r3
 8004760:	d3ad      	bcc.n	80046be <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
 8004766:	e044      	b.n	80047f2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	440b      	add	r3, r1
 8004776:	f203 1369 	addw	r3, r3, #361	; 0x169
 800477a:	2200      	movs	r2, #0
 800477c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800477e:	7bfa      	ldrb	r2, [r7, #15]
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	440b      	add	r3, r1
 800478c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004790:	7bfa      	ldrb	r2, [r7, #15]
 8004792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004794:	7bfa      	ldrb	r2, [r7, #15]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	440b      	add	r3, r1
 80047a2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047aa:	7bfa      	ldrb	r2, [r7, #15]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	440b      	add	r3, r1
 80047b8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047c0:	7bfa      	ldrb	r2, [r7, #15]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	440b      	add	r3, r1
 80047ce:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047d6:	7bfa      	ldrb	r2, [r7, #15]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	440b      	add	r3, r1
 80047e4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	3301      	adds	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
 80047f2:	7bfa      	ldrb	r2, [r7, #15]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d3b5      	bcc.n	8004768 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	687e      	ldr	r6, [r7, #4]
 8004804:	466d      	mov	r5, sp
 8004806:	f106 0410 	add.w	r4, r6, #16
 800480a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800480c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	602b      	str	r3, [r5, #0]
 8004812:	1d33      	adds	r3, r6, #4
 8004814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004816:	6838      	ldr	r0, [r7, #0]
 8004818:	f004 f846 	bl	80088a8 <USB_DevInit>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2202      	movs	r2, #2
 8004826:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e00d      	b.n	800484a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f006 f9b7 	bl	800abb6 <USB_DevDisconnect>

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004852 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_PCD_Start+0x16>
 8004864:	2302      	movs	r3, #2
 8004866:	e016      	b.n	8004896 <HAL_PCD_Start+0x44>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f003 ffdb 	bl	8008830 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800487a:	2101      	movs	r1, #1
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f008 fa28 	bl	800ccd2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f006 f98b 	bl	800aba2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b088      	sub	sp, #32
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f006 f98d 	bl	800abca <USB_ReadInterrupts>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ba:	d102      	bne.n	80048c2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fb61 	bl	8004f84 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f006 f97f 	bl	800abca <USB_ReadInterrupts>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d6:	d112      	bne.n	80048fe <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ea:	b292      	uxth	r2, r2
 80048ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f007 fff6 	bl	800c8e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80048f6:	2100      	movs	r1, #0
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f925 	bl	8004b48 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f006 f961 	bl	800abca <USB_ReadInterrupts>
 8004908:	4603      	mov	r3, r0
 800490a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004912:	d10b      	bne.n	800492c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800491c:	b29a      	uxth	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004926:	b292      	uxth	r2, r2
 8004928:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f006 f94a 	bl	800abca <USB_ReadInterrupts>
 8004936:	4603      	mov	r3, r0
 8004938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800493c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004940:	d10b      	bne.n	800495a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004954:	b292      	uxth	r2, r2
 8004956:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f006 f933 	bl	800abca <USB_ReadInterrupts>
 8004964:	4603      	mov	r3, r0
 8004966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800496a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496e:	d126      	bne.n	80049be <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0204 	bic.w	r2, r2, #4
 8004982:	b292      	uxth	r2, r2
 8004984:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004990:	b29a      	uxth	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0208 	bic.w	r2, r2, #8
 800499a:	b292      	uxth	r2, r2
 800499c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f007 ffd7 	bl	800c954 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049b8:	b292      	uxth	r2, r2
 80049ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f006 f901 	bl	800abca <USB_ReadInterrupts>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d2:	f040 8084 	bne.w	8004ade <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	77fb      	strb	r3, [r7, #31]
 80049da:	e011      	b.n	8004a00 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	7ffb      	ldrb	r3, [r7, #31]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	441a      	add	r2, r3
 80049e8:	7ffb      	ldrb	r3, [r7, #31]
 80049ea:	8812      	ldrh	r2, [r2, #0]
 80049ec:	b292      	uxth	r2, r2
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	f107 0120 	add.w	r1, r7, #32
 80049f4:	440b      	add	r3, r1
 80049f6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80049fa:	7ffb      	ldrb	r3, [r7, #31]
 80049fc:	3301      	adds	r3, #1
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	7ffb      	ldrb	r3, [r7, #31]
 8004a02:	2b07      	cmp	r3, #7
 8004a04:	d9ea      	bls.n	80049dc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	b292      	uxth	r2, r2
 8004a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0201 	bic.w	r2, r2, #1
 8004a30:	b292      	uxth	r2, r2
 8004a32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004a36:	bf00      	nop
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f6      	beq.n	8004a38 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5c:	b292      	uxth	r2, r2
 8004a5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004a62:	2300      	movs	r3, #0
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e010      	b.n	8004a8a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004a68:	7ffb      	ldrb	r3, [r7, #31]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	4611      	mov	r1, r2
 8004a70:	7ffa      	ldrb	r2, [r7, #31]
 8004a72:	0092      	lsls	r2, r2, #2
 8004a74:	440a      	add	r2, r1
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	f107 0120 	add.w	r1, r7, #32
 8004a7c:	440b      	add	r3, r1
 8004a7e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004a82:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004a84:	7ffb      	ldrb	r3, [r7, #31]
 8004a86:	3301      	adds	r3, #1
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	7ffb      	ldrb	r3, [r7, #31]
 8004a8c:	2b07      	cmp	r3, #7
 8004a8e:	d9eb      	bls.n	8004a68 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0208 	orr.w	r2, r2, #8
 8004aa2:	b292      	uxth	r2, r2
 8004aa4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aba:	b292      	uxth	r2, r2
 8004abc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0204 	orr.w	r2, r2, #4
 8004ad2:	b292      	uxth	r2, r2
 8004ad4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f007 ff21 	bl	800c920 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f006 f871 	bl	800abca <USB_ReadInterrupts>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af2:	d10e      	bne.n	8004b12 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b06:	b292      	uxth	r2, r2
 8004b08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f007 feda 	bl	800c8c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f006 f857 	bl	800abca <USB_ReadInterrupts>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b26:	d10b      	bne.n	8004b40 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b3a:	b292      	uxth	r2, r2
 8004b3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004b40:	bf00      	nop
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_PCD_SetAddress+0x1a>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e013      	b.n	8004b8a <HAL_PCD_SetAddress+0x42>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f005 fffe 	bl	800ab7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	4608      	mov	r0, r1
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	70fb      	strb	r3, [r7, #3]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	803b      	strh	r3, [r7, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	da0e      	bge.n	8004bd6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4413      	add	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	705a      	strb	r2, [r3, #1]
 8004bd4:	e00e      	b.n	8004bf4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	f003 0207 	and.w	r2, r3, #7
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	4413      	add	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004c00:	883a      	ldrh	r2, [r7, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	78ba      	ldrb	r2, [r7, #2]
 8004c0a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	785b      	ldrb	r3, [r3, #1]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004c1e:	78bb      	ldrb	r3, [r7, #2]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d102      	bne.n	8004c2a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_PCD_EP_Open+0xa6>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e00e      	b.n	8004c56 <HAL_PCD_EP_Open+0xc4>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68f9      	ldr	r1, [r7, #12]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f003 fe4e 	bl	80088e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004c54:	7afb      	ldrb	r3, [r7, #11]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	460b      	mov	r3, r1
 8004c68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	da0e      	bge.n	8004c90 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	4413      	add	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	705a      	strb	r2, [r3, #1]
 8004c8e:	e00e      	b.n	8004cae <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	f003 0207 	and.w	r2, r3, #7
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_PCD_EP_Close+0x6a>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e00e      	b.n	8004ce6 <HAL_PCD_EP_Close+0x88>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68f9      	ldr	r1, [r7, #12]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f004 f970 	bl	8008fbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b086      	sub	sp, #24
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cfe:	7afb      	ldrb	r3, [r7, #11]
 8004d00:	f003 0207 	and.w	r2, r3, #7
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2200      	movs	r2, #0
 8004d26:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d2e:	7afb      	ldrb	r3, [r7, #11]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d3a:	7afb      	ldrb	r3, [r7, #11]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6979      	ldr	r1, [r7, #20]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f004 fb22 	bl	8009394 <USB_EPStartXfer>
 8004d50:	e005      	b.n	8004d5e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6979      	ldr	r1, [r7, #20]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f004 fb1b 	bl	8009394 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	f003 0207 	and.w	r2, r3, #7
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	440b      	add	r3, r1
 8004d86:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004d8a:	681b      	ldr	r3, [r3, #0]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr

08004d96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b086      	sub	sp, #24
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
 8004da2:	460b      	mov	r3, r1
 8004da4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004da6:	7afb      	ldrb	r3, [r7, #11]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4413      	add	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2201      	movs	r2, #1
 8004de0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004de2:	7afb      	ldrb	r3, [r7, #11]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dee:	7afb      	ldrb	r3, [r7, #11]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6979      	ldr	r1, [r7, #20]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f004 fac8 	bl	8009394 <USB_EPStartXfer>
 8004e04:	e005      	b.n	8004e12 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6979      	ldr	r1, [r7, #20]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f004 fac1 	bl	8009394 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	f003 0207 	and.w	r2, r3, #7
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d901      	bls.n	8004e3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e04c      	b.n	8004ed4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	da0e      	bge.n	8004e60 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	4413      	add	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	705a      	strb	r2, [r3, #1]
 8004e5e:	e00c      	b.n	8004e7a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e60:	78fa      	ldrb	r2, [r7, #3]
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4413      	add	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_PCD_EP_SetStall+0x7e>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e01c      	b.n	8004ed4 <HAL_PCD_EP_SetStall+0xb8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f005 fd6a 	bl	800a982 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d108      	bne.n	8004eca <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f005 fe8f 	bl	800abe8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	f003 020f 	and.w	r2, r3, #15
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d901      	bls.n	8004efa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e040      	b.n	8004f7c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004efa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	da0e      	bge.n	8004f20 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4413      	add	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	705a      	strb	r2, [r3, #1]
 8004f1e:	e00e      	b.n	8004f3e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	f003 0207 	and.w	r2, r3, #7
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4413      	add	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f44:	78fb      	ldrb	r3, [r7, #3]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_PCD_EP_ClrStall+0x82>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e00e      	b.n	8004f7c <HAL_PCD_EP_ClrStall+0xa0>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68f9      	ldr	r1, [r7, #12]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f005 fd58 	bl	800aa22 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08e      	sub	sp, #56	; 0x38
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f8c:	e2ec      	b.n	8005568 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f96:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004f98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004fa4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f040 8161 	bne.w	8005270 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004fae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d152      	bne.n	800505e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc8:	81fb      	strh	r3, [r7, #14]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	89fb      	ldrh	r3, [r7, #14]
 8004fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3328      	adds	r3, #40	; 0x28
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3302      	adds	r3, #2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	695a      	ldr	r2, [r3, #20]
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	441a      	add	r2, r3
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800501c:	2100      	movs	r1, #0
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f007 fc37 	bl	800c892 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 829b 	beq.w	8005568 <PCD_EP_ISR_Handler+0x5e4>
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	f040 8296 	bne.w	8005568 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005042:	b2db      	uxtb	r3, r3
 8005044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005048:	b2da      	uxtb	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	b292      	uxth	r2, r2
 8005050:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800505c:	e284      	b.n	8005568 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800506e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005074:	2b00      	cmp	r3, #0
 8005076:	d034      	beq.n	80050e2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005080:	b29b      	uxth	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	4413      	add	r3, r2
 800508c:	3306      	adds	r3, #6
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f005 fde6 	bl	800ac88 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80050c8:	4013      	ands	r3, r2
 80050ca:	823b      	strh	r3, [r7, #16]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	8a3a      	ldrh	r2, [r7, #16]
 80050d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050d6:	b292      	uxth	r2, r2
 80050d8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f007 fbac 	bl	800c838 <HAL_PCD_SetupStageCallback>
 80050e0:	e242      	b.n	8005568 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80050e2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f280 823e 	bge.w	8005568 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80050f8:	4013      	ands	r3, r2
 80050fa:	83bb      	strh	r3, [r7, #28]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	8bba      	ldrh	r2, [r7, #28]
 8005102:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005106:	b292      	uxth	r2, r2
 8005108:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005112:	b29b      	uxth	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4413      	add	r3, r2
 800511e:	3306      	adds	r3, #6
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d019      	beq.n	8005172 <PCD_EP_ISR_Handler+0x1ee>
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d015      	beq.n	8005172 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	6959      	ldr	r1, [r3, #20]
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005156:	b29b      	uxth	r3, r3
 8005158:	f005 fd96 	bl	800ac88 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	441a      	add	r2, r3
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800516a:	2100      	movs	r1, #0
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f007 fb75 	bl	800c85c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	b29b      	uxth	r3, r3
 800517a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 81f2 	bne.w	8005568 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005192:	b29b      	uxth	r3, r3
 8005194:	461a      	mov	r2, r3
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	4413      	add	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d112      	bne.n	80051d2 <PCD_EP_ISR_Handler+0x24e>
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	801a      	strh	r2, [r3, #0]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	801a      	strh	r2, [r3, #0]
 80051d0:	e02f      	b.n	8005232 <PCD_EP_ISR_Handler+0x2ae>
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b3e      	cmp	r3, #62	; 0x3e
 80051d8:	d813      	bhi.n	8005202 <PCD_EP_ISR_Handler+0x27e>
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	085b      	lsrs	r3, r3, #1
 80051e0:	633b      	str	r3, [r7, #48]	; 0x30
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <PCD_EP_ISR_Handler+0x270>
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	3301      	adds	r3, #1
 80051f2:	633b      	str	r3, [r7, #48]	; 0x30
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	029b      	lsls	r3, r3, #10
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	e017      	b.n	8005232 <PCD_EP_ISR_Handler+0x2ae>
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	633b      	str	r3, [r7, #48]	; 0x30
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 031f 	and.w	r3, r3, #31
 8005212:	2b00      	cmp	r3, #0
 8005214:	d102      	bne.n	800521c <PCD_EP_ISR_Handler+0x298>
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	3b01      	subs	r3, #1
 800521a:	633b      	str	r3, [r7, #48]	; 0x30
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	b29b      	uxth	r3, r3
 8005220:	029b      	lsls	r3, r3, #10
 8005222:	b29b      	uxth	r3, r3
 8005224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522c:	b29a      	uxth	r2, r3
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	827b      	strh	r3, [r7, #18]
 8005244:	8a7b      	ldrh	r3, [r7, #18]
 8005246:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800524a:	827b      	strh	r3, [r7, #18]
 800524c:	8a7b      	ldrh	r3, [r7, #18]
 800524e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005252:	827b      	strh	r3, [r7, #18]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	8a7b      	ldrh	r3, [r7, #18]
 800525a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526a:	b29b      	uxth	r3, r3
 800526c:	8013      	strh	r3, [r2, #0]
 800526e:	e17b      	b.n	8005568 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	461a      	mov	r2, r3
 8005276:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005282:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005286:	2b00      	cmp	r3, #0
 8005288:	f280 80ea 	bge.w	8005460 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29a      	uxth	r2, r3
 800529e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052a2:	4013      	ands	r3, r2
 80052a4:	853b      	strh	r3, [r7, #40]	; 0x28
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80052b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052ba:	b292      	uxth	r2, r2
 80052bc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80052be:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	4413      	add	r3, r2
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	7b1b      	ldrb	r3, [r3, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d122      	bne.n	8005322 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	4413      	add	r3, r2
 80052f0:	3306      	adds	r3, #6
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005304:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005306:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8087 	beq.w	800541c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	6959      	ldr	r1, [r3, #20]
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	88da      	ldrh	r2, [r3, #6]
 800531a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800531c:	f005 fcb4 	bl	800ac88 <USB_ReadPMA>
 8005320:	e07c      	b.n	800541c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	78db      	ldrb	r3, [r3, #3]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d108      	bne.n	800533c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800532a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800532c:	461a      	mov	r2, r3
 800532e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f927 	bl	8005584 <HAL_PCD_EP_DB_Receive>
 8005336:	4603      	mov	r3, r0
 8005338:	86fb      	strh	r3, [r7, #54]	; 0x36
 800533a:	e06f      	b.n	800541c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005356:	847b      	strh	r3, [r7, #34]	; 0x22
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	441a      	add	r2, r3
 8005366:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800536c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005374:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005378:	b29b      	uxth	r3, r3
 800537a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d021      	beq.n	80053da <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539e:	b29b      	uxth	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	3302      	adds	r3, #2
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053be:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80053c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d02a      	beq.n	800541c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	6959      	ldr	r1, [r3, #20]
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	891a      	ldrh	r2, [r3, #8]
 80053d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053d4:	f005 fc58 	bl	800ac88 <USB_ReadPMA>
 80053d8:	e020      	b.n	800541c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4413      	add	r3, r2
 80053ee:	3306      	adds	r3, #6
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005402:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005404:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005406:	2b00      	cmp	r3, #0
 8005408:	d008      	beq.n	800541c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	6959      	ldr	r1, [r3, #20]
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	895a      	ldrh	r2, [r3, #10]
 8005416:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005418:	f005 fc36 	bl	800ac88 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005422:	441a      	add	r2, r3
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	695a      	ldr	r2, [r3, #20]
 800542c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800542e:	441a      	add	r2, r3
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d004      	beq.n	8005446 <PCD_EP_ISR_Handler+0x4c2>
 800543c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	429a      	cmp	r2, r3
 8005444:	d206      	bcs.n	8005454 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f007 fa05 	bl	800c85c <HAL_PCD_DataOutStageCallback>
 8005452:	e005      	b.n	8005460 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800545a:	4618      	mov	r0, r3
 800545c:	f003 ff9a 	bl	8009394 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005460:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005466:	2b00      	cmp	r3, #0
 8005468:	d07e      	beq.n	8005568 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800546a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	4413      	add	r3, r2
 800547c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005498:	843b      	strh	r3, [r7, #32]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	441a      	add	r2, r3
 80054a8:	8c3b      	ldrh	r3, [r7, #32]
 80054aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	78db      	ldrb	r3, [r3, #3]
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d00c      	beq.n	80054d8 <PCD_EP_ISR_Handler+0x554>
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	78db      	ldrb	r3, [r3, #3]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d008      	beq.n	80054d8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d146      	bne.n	800555c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80054ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d141      	bne.n	800555c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	461a      	mov	r2, r3
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4413      	add	r3, r2
 80054ec:	3302      	adds	r3, #2
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005500:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	8bfb      	ldrh	r3, [r7, #30]
 8005508:	429a      	cmp	r2, r3
 800550a:	d906      	bls.n	800551a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	699a      	ldr	r2, [r3, #24]
 8005510:	8bfb      	ldrh	r3, [r7, #30]
 8005512:	1ad2      	subs	r2, r2, r3
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	619a      	str	r2, [r3, #24]
 8005518:	e002      	b.n	8005520 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	2200      	movs	r2, #0
 800551e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d106      	bne.n	8005536 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	4619      	mov	r1, r3
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f007 f9af 	bl	800c892 <HAL_PCD_DataInStageCallback>
 8005534:	e018      	b.n	8005568 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	8bfb      	ldrh	r3, [r7, #30]
 800553c:	441a      	add	r2, r3
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	69da      	ldr	r2, [r3, #28]
 8005546:	8bfb      	ldrh	r3, [r7, #30]
 8005548:	441a      	add	r2, r3
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005554:	4618      	mov	r0, r3
 8005556:	f003 ff1d 	bl	8009394 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800555a:	e005      	b.n	8005568 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800555c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800555e:	461a      	mov	r2, r3
 8005560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f91b 	bl	800579e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005570:	b29b      	uxth	r3, r3
 8005572:	b21b      	sxth	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	f6ff ad0a 	blt.w	8004f8e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3738      	adds	r7, #56	; 0x38
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005592:	88fb      	ldrh	r3, [r7, #6]
 8005594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d07e      	beq.n	800569a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	4413      	add	r3, r2
 80055b0:	3302      	adds	r3, #2
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	8b7b      	ldrh	r3, [r7, #26]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d306      	bcc.n	80055de <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	699a      	ldr	r2, [r3, #24]
 80055d4:	8b7b      	ldrh	r3, [r7, #26]
 80055d6:	1ad2      	subs	r2, r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	619a      	str	r2, [r3, #24]
 80055dc:	e002      	b.n	80055e4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2200      	movs	r2, #0
 80055e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d123      	bne.n	8005634 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005606:	833b      	strh	r3, [r7, #24]
 8005608:	8b3b      	ldrh	r3, [r7, #24]
 800560a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800560e:	833b      	strh	r3, [r7, #24]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	441a      	add	r2, r3
 800561e:	8b3b      	ldrh	r3, [r7, #24]
 8005620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005630:	b29b      	uxth	r3, r3
 8005632:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01f      	beq.n	800567e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005658:	82fb      	strh	r3, [r7, #22]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	8afb      	ldrh	r3, [r7, #22]
 800566a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005676:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800567a:	b29b      	uxth	r3, r3
 800567c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800567e:	8b7b      	ldrh	r3, [r7, #26]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 8087 	beq.w	8005794 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6959      	ldr	r1, [r3, #20]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	891a      	ldrh	r2, [r3, #8]
 8005692:	8b7b      	ldrh	r3, [r7, #26]
 8005694:	f005 faf8 	bl	800ac88 <USB_ReadPMA>
 8005698:	e07c      	b.n	8005794 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4413      	add	r3, r2
 80056ae:	3306      	adds	r3, #6
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	699a      	ldr	r2, [r3, #24]
 80056c8:	8b7b      	ldrh	r3, [r7, #26]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d306      	bcc.n	80056dc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	8b7b      	ldrh	r3, [r7, #26]
 80056d4:	1ad2      	subs	r2, r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	619a      	str	r2, [r3, #24]
 80056da:	e002      	b.n	80056e2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2200      	movs	r2, #0
 80056e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d123      	bne.n	8005732 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005704:	83fb      	strh	r3, [r7, #30]
 8005706:	8bfb      	ldrh	r3, [r7, #30]
 8005708:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800570c:	83fb      	strh	r3, [r7, #30]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	441a      	add	r2, r3
 800571c:	8bfb      	ldrh	r3, [r7, #30]
 800571e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800572e:	b29b      	uxth	r3, r3
 8005730:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d11f      	bne.n	800577c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	83bb      	strh	r3, [r7, #28]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	441a      	add	r2, r3
 8005766:	8bbb      	ldrh	r3, [r7, #28]
 8005768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800576c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005778:	b29b      	uxth	r3, r3
 800577a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800577c:	8b7b      	ldrh	r3, [r7, #26]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	6959      	ldr	r1, [r3, #20]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	895a      	ldrh	r2, [r3, #10]
 800578e:	8b7b      	ldrh	r3, [r7, #26]
 8005790:	f005 fa7a 	bl	800ac88 <USB_ReadPMA>
    }
  }

  return count;
 8005794:	8b7b      	ldrh	r3, [r7, #26]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3720      	adds	r7, #32
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b0a2      	sub	sp, #136	; 0x88
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	4613      	mov	r3, r2
 80057aa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 81c7 	beq.w	8005b46 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4413      	add	r3, r2
 80057cc:	3302      	adds	r3, #2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d907      	bls.n	8005800 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	699a      	ldr	r2, [r3, #24]
 80057f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057f8:	1ad2      	subs	r2, r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	619a      	str	r2, [r3, #24]
 80057fe:	e002      	b.n	8005806 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2200      	movs	r2, #0
 8005804:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f040 80b9 	bne.w	8005982 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d126      	bne.n	8005866 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	62bb      	str	r3, [r7, #40]	; 0x28
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005826:	b29b      	uxth	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	4413      	add	r3, r2
 800582e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	011a      	lsls	r2, r3, #4
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005838:	4413      	add	r3, r2
 800583a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b29b      	uxth	r3, r3
 8005846:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800584a:	b29a      	uxth	r2, r3
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585e:	b29a      	uxth	r2, r3
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e01a      	b.n	800589c <HAL_PCD_EP_DB_Transmit+0xfe>
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	785b      	ldrb	r3, [r3, #1]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d116      	bne.n	800589c <HAL_PCD_EP_DB_Transmit+0xfe>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	633b      	str	r3, [r7, #48]	; 0x30
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587c:	b29b      	uxth	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	4413      	add	r3, r2
 8005884:	633b      	str	r3, [r7, #48]	; 0x30
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	011a      	lsls	r2, r3, #4
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	4413      	add	r3, r2
 8005890:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	2200      	movs	r2, #0
 800589a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	623b      	str	r3, [r7, #32]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d126      	bne.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x15a>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	61bb      	str	r3, [r7, #24]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	4413      	add	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	011a      	lsls	r2, r3, #4
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	4413      	add	r3, r2
 80058cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058dc:	b29a      	uxth	r2, r3
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	801a      	strh	r2, [r3, #0]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	e017      	b.n	8005928 <HAL_PCD_EP_DB_Transmit+0x18a>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d113      	bne.n	8005928 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005908:	b29b      	uxth	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	4413      	add	r3, r2
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	011a      	lsls	r2, r3, #4
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	4413      	add	r3, r2
 800591c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005920:	61fb      	str	r3, [r7, #28]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	2200      	movs	r2, #0
 8005926:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	4619      	mov	r1, r3
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f006 ffaf 	bl	800c892 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005934:	88fb      	ldrh	r3, [r7, #6]
 8005936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 82d4 	beq.w	8005ee8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	827b      	strh	r3, [r7, #18]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	441a      	add	r2, r3
 800596a:	8a7b      	ldrh	r3, [r7, #18]
 800596c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597c:	b29b      	uxth	r3, r3
 800597e:	8013      	strh	r3, [r2, #0]
 8005980:	e2b2      	b.n	8005ee8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d021      	beq.n	80059d0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	441a      	add	r2, r3
 80059b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	f040 8286 	bne.w	8005ee8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	695a      	ldr	r2, [r3, #20]
 80059e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059e4:	441a      	add	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	69da      	ldr	r2, [r3, #28]
 80059ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059f2:	441a      	add	r2, r3
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	6a1a      	ldr	r2, [r3, #32]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d309      	bcc.n	8005a18 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	6a1a      	ldr	r2, [r3, #32]
 8005a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a10:	1ad2      	subs	r2, r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	621a      	str	r2, [r3, #32]
 8005a16:	e015      	b.n	8005a44 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d107      	bne.n	8005a30 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005a20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005a2e:	e009      	b.n	8005a44 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2200      	movs	r2, #0
 8005a42:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	785b      	ldrb	r3, [r3, #1]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d155      	bne.n	8005af8 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	4413      	add	r3, r2
 8005a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	011a      	lsls	r2, r3, #4
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a72:	637b      	str	r3, [r7, #52]	; 0x34
 8005a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d112      	bne.n	8005aa0 <HAL_PCD_EP_DB_Transmit+0x302>
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a88:	801a      	strh	r2, [r3, #0]
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	e047      	b.n	8005b30 <HAL_PCD_EP_DB_Transmit+0x392>
 8005aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa2:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa4:	d811      	bhi.n	8005aca <HAL_PCD_EP_DB_Transmit+0x32c>
 8005aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_PCD_EP_DB_Transmit+0x31e>
 8005ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab8:	3301      	adds	r3, #1
 8005aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8005abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	029b      	lsls	r3, r3, #10
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac6:	801a      	strh	r2, [r3, #0]
 8005ac8:	e032      	b.n	8005b30 <HAL_PCD_EP_DB_Transmit+0x392>
 8005aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d102      	bne.n	8005ae0 <HAL_PCD_EP_DB_Transmit+0x342>
 8005ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005adc:	3b01      	subs	r3, #1
 8005ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	029b      	lsls	r3, r3, #10
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	e01b      	b.n	8005b30 <HAL_PCD_EP_DB_Transmit+0x392>
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d117      	bne.n	8005b30 <HAL_PCD_EP_DB_Transmit+0x392>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	643b      	str	r3, [r7, #64]	; 0x40
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b14:	4413      	add	r3, r2
 8005b16:	643b      	str	r3, [r7, #64]	; 0x40
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	011a      	lsls	r2, r3, #4
 8005b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b20:	4413      	add	r3, r2
 8005b22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6818      	ldr	r0, [r3, #0]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	6959      	ldr	r1, [r3, #20]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	891a      	ldrh	r2, [r3, #8]
 8005b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f005 f85d 	bl	800abfe <USB_WritePMA>
 8005b44:	e1d0      	b.n	8005ee8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	4413      	add	r3, r2
 8005b5a:	3306      	adds	r3, #6
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d307      	bcc.n	8005b8e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b86:	1ad2      	subs	r2, r2, r3
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	619a      	str	r2, [r3, #24]
 8005b8c:	e002      	b.n	8005b94 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2200      	movs	r2, #0
 8005b92:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f040 80c4 	bne.w	8005d26 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	785b      	ldrb	r3, [r3, #1]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d126      	bne.n	8005bf4 <HAL_PCD_EP_DB_Transmit+0x456>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bba:	4413      	add	r3, r2
 8005bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	011a      	lsls	r2, r3, #4
 8005bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e01a      	b.n	8005c2a <HAL_PCD_EP_DB_Transmit+0x48c>
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d116      	bne.n	8005c2a <HAL_PCD_EP_DB_Transmit+0x48c>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	677b      	str	r3, [r7, #116]	; 0x74
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c10:	4413      	add	r3, r2
 8005c12:	677b      	str	r3, [r7, #116]	; 0x74
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	011a      	lsls	r2, r3, #4
 8005c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c22:	673b      	str	r3, [r7, #112]	; 0x70
 8005c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c26:	2200      	movs	r2, #0
 8005c28:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	785b      	ldrb	r3, [r3, #1]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d12f      	bne.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c50:	4413      	add	r3, r2
 8005c52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	011a      	lsls	r2, r3, #4
 8005c5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c60:	4413      	add	r3, r2
 8005c62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c94:	801a      	strh	r2, [r3, #0]
 8005c96:	e017      	b.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d113      	bne.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cae:	4413      	add	r3, r2
 8005cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	011a      	lsls	r2, r3, #4
 8005cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cba:	4413      	add	r3, r2
 8005cbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f006 fddf 	bl	800c892 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f040 8104 	bne.w	8005ee8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	441a      	add	r2, r3
 8005d0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	8013      	strh	r3, [r2, #0]
 8005d24:	e0e0      	b.n	8005ee8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d121      	bne.n	8005d74 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	441a      	add	r2, r3
 8005d5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	f040 80b4 	bne.w	8005ee8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	695a      	ldr	r2, [r3, #20]
 8005d84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d88:	441a      	add	r2, r3
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	69da      	ldr	r2, [r3, #28]
 8005d92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d96:	441a      	add	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6a1a      	ldr	r2, [r3, #32]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d309      	bcc.n	8005dbc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6a1a      	ldr	r2, [r3, #32]
 8005db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db4:	1ad2      	subs	r2, r2, r3
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	621a      	str	r2, [r3, #32]
 8005dba:	e015      	b.n	8005de8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d107      	bne.n	8005dd4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005dc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005dc8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005dd2:	e009      	b.n	8005de8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	667b      	str	r3, [r7, #100]	; 0x64
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d155      	bne.n	8005ea2 <HAL_PCD_EP_DB_Transmit+0x704>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	461a      	mov	r2, r3
 8005e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e0a:	4413      	add	r3, r2
 8005e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	011a      	lsls	r2, r3, #4
 8005e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e16:	4413      	add	r3, r2
 8005e18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d112      	bne.n	8005e4a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	e044      	b.n	8005ed4 <HAL_PCD_EP_DB_Transmit+0x736>
 8005e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e4e:	d811      	bhi.n	8005e74 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	657b      	str	r3, [r7, #84]	; 0x54
 8005e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e62:	3301      	adds	r3, #1
 8005e64:	657b      	str	r3, [r7, #84]	; 0x54
 8005e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	029b      	lsls	r3, r3, #10
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	e02f      	b.n	8005ed4 <HAL_PCD_EP_DB_Transmit+0x736>
 8005e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e76:	095b      	lsrs	r3, r3, #5
 8005e78:	657b      	str	r3, [r7, #84]	; 0x54
 8005e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d102      	bne.n	8005e8a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e86:	3b01      	subs	r3, #1
 8005e88:	657b      	str	r3, [r7, #84]	; 0x54
 8005e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	029b      	lsls	r3, r3, #10
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e9e:	801a      	strh	r2, [r3, #0]
 8005ea0:	e018      	b.n	8005ed4 <HAL_PCD_EP_DB_Transmit+0x736>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	785b      	ldrb	r3, [r3, #1]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d114      	bne.n	8005ed4 <HAL_PCD_EP_DB_Transmit+0x736>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eb8:	4413      	add	r3, r2
 8005eba:	667b      	str	r3, [r7, #100]	; 0x64
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	011a      	lsls	r2, r3, #4
 8005ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eca:	663b      	str	r3, [r7, #96]	; 0x60
 8005ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	6959      	ldr	r1, [r3, #20]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	895a      	ldrh	r2, [r3, #10]
 8005ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f004 fe8b 	bl	800abfe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f02:	823b      	strh	r3, [r7, #16]
 8005f04:	8a3b      	ldrh	r3, [r7, #16]
 8005f06:	f083 0310 	eor.w	r3, r3, #16
 8005f0a:	823b      	strh	r3, [r7, #16]
 8005f0c:	8a3b      	ldrh	r3, [r7, #16]
 8005f0e:	f083 0320 	eor.w	r3, r3, #32
 8005f12:	823b      	strh	r3, [r7, #16]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	441a      	add	r2, r3
 8005f22:	8a3b      	ldrh	r3, [r7, #16]
 8005f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3788      	adds	r7, #136	; 0x88
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b087      	sub	sp, #28
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	607b      	str	r3, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	817b      	strh	r3, [r7, #10]
 8005f50:	4613      	mov	r3, r2
 8005f52:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005f54:	897b      	ldrh	r3, [r7, #10]
 8005f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f60:	897b      	ldrh	r3, [r7, #10]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	e009      	b.n	8005f8c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f78:	897a      	ldrh	r2, [r7, #10]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005f8c:	893b      	ldrh	r3, [r7, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d107      	bne.n	8005fa2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2200      	movs	r2, #0
 8005f96:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	80da      	strh	r2, [r3, #6]
 8005fa0:	e00b      	b.n	8005fba <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	0c1b      	lsrs	r3, r3, #16
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr
	...

08005fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e26c      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8087 	beq.w	80060f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fe8:	4b92      	ldr	r3, [pc, #584]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f003 030c 	and.w	r3, r3, #12
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d00c      	beq.n	800600e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ff4:	4b8f      	ldr	r3, [pc, #572]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f003 030c 	and.w	r3, r3, #12
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d112      	bne.n	8006026 <HAL_RCC_OscConfig+0x5e>
 8006000:	4b8c      	ldr	r3, [pc, #560]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600c:	d10b      	bne.n	8006026 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800600e:	4b89      	ldr	r3, [pc, #548]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d06c      	beq.n	80060f4 <HAL_RCC_OscConfig+0x12c>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d168      	bne.n	80060f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e246      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800602e:	d106      	bne.n	800603e <HAL_RCC_OscConfig+0x76>
 8006030:	4b80      	ldr	r3, [pc, #512]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a7f      	ldr	r2, [pc, #508]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	e02e      	b.n	800609c <HAL_RCC_OscConfig+0xd4>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10c      	bne.n	8006060 <HAL_RCC_OscConfig+0x98>
 8006046:	4b7b      	ldr	r3, [pc, #492]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a7a      	ldr	r2, [pc, #488]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 800604c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	4b78      	ldr	r3, [pc, #480]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a77      	ldr	r2, [pc, #476]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	e01d      	b.n	800609c <HAL_RCC_OscConfig+0xd4>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006068:	d10c      	bne.n	8006084 <HAL_RCC_OscConfig+0xbc>
 800606a:	4b72      	ldr	r3, [pc, #456]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a71      	ldr	r2, [pc, #452]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	4b6f      	ldr	r3, [pc, #444]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a6e      	ldr	r2, [pc, #440]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 800607c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	e00b      	b.n	800609c <HAL_RCC_OscConfig+0xd4>
 8006084:	4b6b      	ldr	r3, [pc, #428]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a6a      	ldr	r2, [pc, #424]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 800608a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	4b68      	ldr	r3, [pc, #416]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a67      	ldr	r2, [pc, #412]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800609a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d013      	beq.n	80060cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a4:	f7fd fd5e 	bl	8003b64 <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060ac:	f7fd fd5a 	bl	8003b64 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b64      	cmp	r3, #100	; 0x64
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e1fa      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060be:	4b5d      	ldr	r3, [pc, #372]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f0      	beq.n	80060ac <HAL_RCC_OscConfig+0xe4>
 80060ca:	e014      	b.n	80060f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060cc:	f7fd fd4a 	bl	8003b64 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060d4:	f7fd fd46 	bl	8003b64 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b64      	cmp	r3, #100	; 0x64
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e1e6      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060e6:	4b53      	ldr	r3, [pc, #332]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f0      	bne.n	80060d4 <HAL_RCC_OscConfig+0x10c>
 80060f2:	e000      	b.n	80060f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d063      	beq.n	80061ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006102:	4b4c      	ldr	r3, [pc, #304]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f003 030c 	and.w	r3, r3, #12
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00b      	beq.n	8006126 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800610e:	4b49      	ldr	r3, [pc, #292]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	2b08      	cmp	r3, #8
 8006118:	d11c      	bne.n	8006154 <HAL_RCC_OscConfig+0x18c>
 800611a:	4b46      	ldr	r3, [pc, #280]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d116      	bne.n	8006154 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006126:	4b43      	ldr	r3, [pc, #268]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d005      	beq.n	800613e <HAL_RCC_OscConfig+0x176>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d001      	beq.n	800613e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e1ba      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613e:	4b3d      	ldr	r3, [pc, #244]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4939      	ldr	r1, [pc, #228]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 800614e:	4313      	orrs	r3, r2
 8006150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006152:	e03a      	b.n	80061ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d020      	beq.n	800619e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800615c:	4b36      	ldr	r3, [pc, #216]	; (8006238 <HAL_RCC_OscConfig+0x270>)
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006162:	f7fd fcff 	bl	8003b64 <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800616a:	f7fd fcfb 	bl	8003b64 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e19b      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800617c:	4b2d      	ldr	r3, [pc, #180]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f0      	beq.n	800616a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006188:	4b2a      	ldr	r3, [pc, #168]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4927      	ldr	r1, [pc, #156]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006198:	4313      	orrs	r3, r2
 800619a:	600b      	str	r3, [r1, #0]
 800619c:	e015      	b.n	80061ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800619e:	4b26      	ldr	r3, [pc, #152]	; (8006238 <HAL_RCC_OscConfig+0x270>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a4:	f7fd fcde 	bl	8003b64 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061ac:	f7fd fcda 	bl	8003b64 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e17a      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061be:	4b1d      	ldr	r3, [pc, #116]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d03a      	beq.n	800624c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d019      	beq.n	8006212 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061de:	4b17      	ldr	r3, [pc, #92]	; (800623c <HAL_RCC_OscConfig+0x274>)
 80061e0:	2201      	movs	r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061e4:	f7fd fcbe 	bl	8003b64 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ec:	f7fd fcba 	bl	8003b64 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e15a      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061fe:	4b0d      	ldr	r3, [pc, #52]	; (8006234 <HAL_RCC_OscConfig+0x26c>)
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0f0      	beq.n	80061ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800620a:	2001      	movs	r0, #1
 800620c:	f000 faa6 	bl	800675c <RCC_Delay>
 8006210:	e01c      	b.n	800624c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006212:	4b0a      	ldr	r3, [pc, #40]	; (800623c <HAL_RCC_OscConfig+0x274>)
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006218:	f7fd fca4 	bl	8003b64 <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800621e:	e00f      	b.n	8006240 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006220:	f7fd fca0 	bl	8003b64 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d908      	bls.n	8006240 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e140      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
 8006232:	bf00      	nop
 8006234:	40021000 	.word	0x40021000
 8006238:	42420000 	.word	0x42420000
 800623c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006240:	4b9e      	ldr	r3, [pc, #632]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e9      	bne.n	8006220 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 80a6 	beq.w	80063a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800625a:	2300      	movs	r3, #0
 800625c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800625e:	4b97      	ldr	r3, [pc, #604]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10d      	bne.n	8006286 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800626a:	4b94      	ldr	r3, [pc, #592]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	4a93      	ldr	r2, [pc, #588]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006274:	61d3      	str	r3, [r2, #28]
 8006276:	4b91      	ldr	r3, [pc, #580]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627e:	60bb      	str	r3, [r7, #8]
 8006280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006282:	2301      	movs	r3, #1
 8006284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006286:	4b8e      	ldr	r3, [pc, #568]	; (80064c0 <HAL_RCC_OscConfig+0x4f8>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628e:	2b00      	cmp	r3, #0
 8006290:	d118      	bne.n	80062c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006292:	4b8b      	ldr	r3, [pc, #556]	; (80064c0 <HAL_RCC_OscConfig+0x4f8>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a8a      	ldr	r2, [pc, #552]	; (80064c0 <HAL_RCC_OscConfig+0x4f8>)
 8006298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800629c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800629e:	f7fd fc61 	bl	8003b64 <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062a6:	f7fd fc5d 	bl	8003b64 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b64      	cmp	r3, #100	; 0x64
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e0fd      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b8:	4b81      	ldr	r3, [pc, #516]	; (80064c0 <HAL_RCC_OscConfig+0x4f8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0f0      	beq.n	80062a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d106      	bne.n	80062da <HAL_RCC_OscConfig+0x312>
 80062cc:	4b7b      	ldr	r3, [pc, #492]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	4a7a      	ldr	r2, [pc, #488]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 80062d2:	f043 0301 	orr.w	r3, r3, #1
 80062d6:	6213      	str	r3, [r2, #32]
 80062d8:	e02d      	b.n	8006336 <HAL_RCC_OscConfig+0x36e>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10c      	bne.n	80062fc <HAL_RCC_OscConfig+0x334>
 80062e2:	4b76      	ldr	r3, [pc, #472]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	4a75      	ldr	r2, [pc, #468]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	6213      	str	r3, [r2, #32]
 80062ee:	4b73      	ldr	r3, [pc, #460]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	4a72      	ldr	r2, [pc, #456]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 80062f4:	f023 0304 	bic.w	r3, r3, #4
 80062f8:	6213      	str	r3, [r2, #32]
 80062fa:	e01c      	b.n	8006336 <HAL_RCC_OscConfig+0x36e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	2b05      	cmp	r3, #5
 8006302:	d10c      	bne.n	800631e <HAL_RCC_OscConfig+0x356>
 8006304:	4b6d      	ldr	r3, [pc, #436]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	4a6c      	ldr	r2, [pc, #432]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 800630a:	f043 0304 	orr.w	r3, r3, #4
 800630e:	6213      	str	r3, [r2, #32]
 8006310:	4b6a      	ldr	r3, [pc, #424]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	4a69      	ldr	r2, [pc, #420]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006316:	f043 0301 	orr.w	r3, r3, #1
 800631a:	6213      	str	r3, [r2, #32]
 800631c:	e00b      	b.n	8006336 <HAL_RCC_OscConfig+0x36e>
 800631e:	4b67      	ldr	r3, [pc, #412]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	4a66      	ldr	r2, [pc, #408]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006324:	f023 0301 	bic.w	r3, r3, #1
 8006328:	6213      	str	r3, [r2, #32]
 800632a:	4b64      	ldr	r3, [pc, #400]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	4a63      	ldr	r2, [pc, #396]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006330:	f023 0304 	bic.w	r3, r3, #4
 8006334:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d015      	beq.n	800636a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800633e:	f7fd fc11 	bl	8003b64 <HAL_GetTick>
 8006342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006344:	e00a      	b.n	800635c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006346:	f7fd fc0d 	bl	8003b64 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	f241 3288 	movw	r2, #5000	; 0x1388
 8006354:	4293      	cmp	r3, r2
 8006356:	d901      	bls.n	800635c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e0ab      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800635c:	4b57      	ldr	r3, [pc, #348]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0ee      	beq.n	8006346 <HAL_RCC_OscConfig+0x37e>
 8006368:	e014      	b.n	8006394 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800636a:	f7fd fbfb 	bl	8003b64 <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006370:	e00a      	b.n	8006388 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006372:	f7fd fbf7 	bl	8003b64 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006380:	4293      	cmp	r3, r2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e095      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006388:	4b4c      	ldr	r3, [pc, #304]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1ee      	bne.n	8006372 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d105      	bne.n	80063a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800639a:	4b48      	ldr	r3, [pc, #288]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	4a47      	ldr	r2, [pc, #284]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 80063a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 8081 	beq.w	80064b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063b0:	4b42      	ldr	r3, [pc, #264]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f003 030c 	and.w	r3, r3, #12
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d061      	beq.n	8006480 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d146      	bne.n	8006452 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c4:	4b3f      	ldr	r3, [pc, #252]	; (80064c4 <HAL_RCC_OscConfig+0x4fc>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ca:	f7fd fbcb 	bl	8003b64 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d2:	f7fd fbc7 	bl	8003b64 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e067      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063e4:	4b35      	ldr	r3, [pc, #212]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1f0      	bne.n	80063d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f8:	d108      	bne.n	800640c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80063fa:	4b30      	ldr	r3, [pc, #192]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	492d      	ldr	r1, [pc, #180]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006408:	4313      	orrs	r3, r2
 800640a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800640c:	4b2b      	ldr	r3, [pc, #172]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a19      	ldr	r1, [r3, #32]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	430b      	orrs	r3, r1
 800641e:	4927      	ldr	r1, [pc, #156]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006420:	4313      	orrs	r3, r2
 8006422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006424:	4b27      	ldr	r3, [pc, #156]	; (80064c4 <HAL_RCC_OscConfig+0x4fc>)
 8006426:	2201      	movs	r2, #1
 8006428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642a:	f7fd fb9b 	bl	8003b64 <HAL_GetTick>
 800642e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006432:	f7fd fb97 	bl	8003b64 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e037      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006444:	4b1d      	ldr	r3, [pc, #116]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <HAL_RCC_OscConfig+0x46a>
 8006450:	e02f      	b.n	80064b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006452:	4b1c      	ldr	r3, [pc, #112]	; (80064c4 <HAL_RCC_OscConfig+0x4fc>)
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006458:	f7fd fb84 	bl	8003b64 <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006460:	f7fd fb80 	bl	8003b64 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e020      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006472:	4b12      	ldr	r3, [pc, #72]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f0      	bne.n	8006460 <HAL_RCC_OscConfig+0x498>
 800647e:	e018      	b.n	80064b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e013      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800648c:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <HAL_RCC_OscConfig+0x4f4>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	429a      	cmp	r2, r3
 800649e:	d106      	bne.n	80064ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d001      	beq.n	80064b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40021000 	.word	0x40021000
 80064c0:	40007000 	.word	0x40007000
 80064c4:	42420060 	.word	0x42420060

080064c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e0d0      	b.n	800667e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064dc:	4b6a      	ldr	r3, [pc, #424]	; (8006688 <HAL_RCC_ClockConfig+0x1c0>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d910      	bls.n	800650c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ea:	4b67      	ldr	r3, [pc, #412]	; (8006688 <HAL_RCC_ClockConfig+0x1c0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f023 0207 	bic.w	r2, r3, #7
 80064f2:	4965      	ldr	r1, [pc, #404]	; (8006688 <HAL_RCC_ClockConfig+0x1c0>)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fa:	4b63      	ldr	r3, [pc, #396]	; (8006688 <HAL_RCC_ClockConfig+0x1c0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d001      	beq.n	800650c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0b8      	b.n	800667e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d020      	beq.n	800655a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d005      	beq.n	8006530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006524:	4b59      	ldr	r3, [pc, #356]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	4a58      	ldr	r2, [pc, #352]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 800652a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800652e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800653c:	4b53      	ldr	r3, [pc, #332]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	4a52      	ldr	r2, [pc, #328]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 8006542:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006546:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006548:	4b50      	ldr	r3, [pc, #320]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	494d      	ldr	r1, [pc, #308]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 8006556:	4313      	orrs	r3, r2
 8006558:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d040      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d107      	bne.n	800657e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656e:	4b47      	ldr	r3, [pc, #284]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d115      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e07f      	b.n	800667e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d107      	bne.n	8006596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006586:	4b41      	ldr	r3, [pc, #260]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d109      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e073      	b.n	800667e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006596:	4b3d      	ldr	r3, [pc, #244]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e06b      	b.n	800667e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065a6:	4b39      	ldr	r3, [pc, #228]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f023 0203 	bic.w	r2, r3, #3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	4936      	ldr	r1, [pc, #216]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065b8:	f7fd fad4 	bl	8003b64 <HAL_GetTick>
 80065bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065be:	e00a      	b.n	80065d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c0:	f7fd fad0 	bl	8003b64 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e053      	b.n	800667e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d6:	4b2d      	ldr	r3, [pc, #180]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 020c 	and.w	r2, r3, #12
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d1eb      	bne.n	80065c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065e8:	4b27      	ldr	r3, [pc, #156]	; (8006688 <HAL_RCC_ClockConfig+0x1c0>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d210      	bcs.n	8006618 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f6:	4b24      	ldr	r3, [pc, #144]	; (8006688 <HAL_RCC_ClockConfig+0x1c0>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f023 0207 	bic.w	r2, r3, #7
 80065fe:	4922      	ldr	r1, [pc, #136]	; (8006688 <HAL_RCC_ClockConfig+0x1c0>)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	4313      	orrs	r3, r2
 8006604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006606:	4b20      	ldr	r3, [pc, #128]	; (8006688 <HAL_RCC_ClockConfig+0x1c0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d001      	beq.n	8006618 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e032      	b.n	800667e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006624:	4b19      	ldr	r3, [pc, #100]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	4916      	ldr	r1, [pc, #88]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 8006632:	4313      	orrs	r3, r2
 8006634:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b00      	cmp	r3, #0
 8006640:	d009      	beq.n	8006656 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	490e      	ldr	r1, [pc, #56]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 8006652:	4313      	orrs	r3, r2
 8006654:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006656:	f000 f821 	bl	800669c <HAL_RCC_GetSysClockFreq>
 800665a:	4602      	mov	r2, r0
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <HAL_RCC_ClockConfig+0x1c4>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	091b      	lsrs	r3, r3, #4
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	490a      	ldr	r1, [pc, #40]	; (8006690 <HAL_RCC_ClockConfig+0x1c8>)
 8006668:	5ccb      	ldrb	r3, [r1, r3]
 800666a:	fa22 f303 	lsr.w	r3, r2, r3
 800666e:	4a09      	ldr	r2, [pc, #36]	; (8006694 <HAL_RCC_ClockConfig+0x1cc>)
 8006670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <HAL_RCC_ClockConfig+0x1d0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f7fd fa32 	bl	8003ae0 <HAL_InitTick>

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40022000 	.word	0x40022000
 800668c:	40021000 	.word	0x40021000
 8006690:	0800f210 	.word	0x0800f210
 8006694:	20000038 	.word	0x20000038
 8006698:	2000003c 	.word	0x2000003c

0800669c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800669c:	b490      	push	{r4, r7}
 800669e:	b08a      	sub	sp, #40	; 0x28
 80066a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80066a2:	4b2a      	ldr	r3, [pc, #168]	; (800674c <HAL_RCC_GetSysClockFreq+0xb0>)
 80066a4:	1d3c      	adds	r4, r7, #4
 80066a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80066ac:	f240 2301 	movw	r3, #513	; 0x201
 80066b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
 80066b6:	2300      	movs	r3, #0
 80066b8:	61bb      	str	r3, [r7, #24]
 80066ba:	2300      	movs	r3, #0
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80066c6:	4b22      	ldr	r3, [pc, #136]	; (8006750 <HAL_RCC_GetSysClockFreq+0xb4>)
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d002      	beq.n	80066dc <HAL_RCC_GetSysClockFreq+0x40>
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d003      	beq.n	80066e2 <HAL_RCC_GetSysClockFreq+0x46>
 80066da:	e02d      	b.n	8006738 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80066dc:	4b1d      	ldr	r3, [pc, #116]	; (8006754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066de:	623b      	str	r3, [r7, #32]
      break;
 80066e0:	e02d      	b.n	800673e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	0c9b      	lsrs	r3, r3, #18
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80066ee:	4413      	add	r3, r2
 80066f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80066f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d013      	beq.n	8006728 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006700:	4b13      	ldr	r3, [pc, #76]	; (8006750 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	0c5b      	lsrs	r3, r3, #17
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800670e:	4413      	add	r3, r2
 8006710:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006714:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	4a0e      	ldr	r2, [pc, #56]	; (8006754 <HAL_RCC_GetSysClockFreq+0xb8>)
 800671a:	fb02 f203 	mul.w	r2, r2, r3
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
 8006726:	e004      	b.n	8006732 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	4a0b      	ldr	r2, [pc, #44]	; (8006758 <HAL_RCC_GetSysClockFreq+0xbc>)
 800672c:	fb02 f303 	mul.w	r3, r2, r3
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	623b      	str	r3, [r7, #32]
      break;
 8006736:	e002      	b.n	800673e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006738:	4b06      	ldr	r3, [pc, #24]	; (8006754 <HAL_RCC_GetSysClockFreq+0xb8>)
 800673a:	623b      	str	r3, [r7, #32]
      break;
 800673c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800673e:	6a3b      	ldr	r3, [r7, #32]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3728      	adds	r7, #40	; 0x28
 8006744:	46bd      	mov	sp, r7
 8006746:	bc90      	pop	{r4, r7}
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	0800d8cc 	.word	0x0800d8cc
 8006750:	40021000 	.word	0x40021000
 8006754:	007a1200 	.word	0x007a1200
 8006758:	003d0900 	.word	0x003d0900

0800675c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006764:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <RCC_Delay+0x34>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a0a      	ldr	r2, [pc, #40]	; (8006794 <RCC_Delay+0x38>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	0a5b      	lsrs	r3, r3, #9
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	fb02 f303 	mul.w	r3, r2, r3
 8006776:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006778:	bf00      	nop
  }
  while (Delay --);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	1e5a      	subs	r2, r3, #1
 800677e:	60fa      	str	r2, [r7, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1f9      	bne.n	8006778 <RCC_Delay+0x1c>
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr
 8006790:	20000038 	.word	0x20000038
 8006794:	10624dd3 	.word	0x10624dd3

08006798 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d07d      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80067b4:	2300      	movs	r3, #0
 80067b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067b8:	4b4f      	ldr	r3, [pc, #316]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10d      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067c4:	4b4c      	ldr	r3, [pc, #304]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	4a4b      	ldr	r2, [pc, #300]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ce:	61d3      	str	r3, [r2, #28]
 80067d0:	4b49      	ldr	r3, [pc, #292]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d8:	60bb      	str	r3, [r7, #8]
 80067da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067dc:	2301      	movs	r3, #1
 80067de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e0:	4b46      	ldr	r3, [pc, #280]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d118      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067ec:	4b43      	ldr	r3, [pc, #268]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a42      	ldr	r2, [pc, #264]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067f8:	f7fd f9b4 	bl	8003b64 <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067fe:	e008      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006800:	f7fd f9b0 	bl	8003b64 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b64      	cmp	r3, #100	; 0x64
 800680c:	d901      	bls.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e06d      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006812:	4b3a      	ldr	r3, [pc, #232]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f0      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800681e:	4b36      	ldr	r3, [pc, #216]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006826:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d02e      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	429a      	cmp	r2, r3
 800683a:	d027      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800683c:	4b2e      	ldr	r3, [pc, #184]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006844:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006846:	4b2e      	ldr	r3, [pc, #184]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006848:	2201      	movs	r2, #1
 800684a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800684c:	4b2c      	ldr	r3, [pc, #176]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800684e:	2200      	movs	r2, #0
 8006850:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006852:	4a29      	ldr	r2, [pc, #164]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d014      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006862:	f7fd f97f 	bl	8003b64 <HAL_GetTick>
 8006866:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006868:	e00a      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800686a:	f7fd f97b 	bl	8003b64 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	f241 3288 	movw	r2, #5000	; 0x1388
 8006878:	4293      	cmp	r3, r2
 800687a:	d901      	bls.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e036      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006880:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0ee      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800688c:	4b1a      	ldr	r3, [pc, #104]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	4917      	ldr	r1, [pc, #92]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800689a:	4313      	orrs	r3, r2
 800689c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800689e:	7dfb      	ldrb	r3, [r7, #23]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d105      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068a4:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	4a13      	ldr	r2, [pc, #76]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068bc:	4b0e      	ldr	r3, [pc, #56]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	490b      	ldr	r1, [pc, #44]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0310 	and.w	r3, r3, #16
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068da:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	4904      	ldr	r1, [pc, #16]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	40021000 	.word	0x40021000
 80068fc:	40007000 	.word	0x40007000
 8006900:	42420440 	.word	0x42420440

08006904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e076      	b.n	8006a04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	d108      	bne.n	8006930 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006926:	d009      	beq.n	800693c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	61da      	str	r2, [r3, #28]
 800692e:	e005      	b.n	800693c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fc fea0 	bl	800369c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006972:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c0:	ea42 0103 	orr.w	r1, r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	0c1a      	lsrs	r2, r3, #16
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f002 0204 	and.w	r2, r2, #4
 80069e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	69da      	ldr	r2, [r3, #28]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08c      	sub	sp, #48	; 0x30
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_SPI_TransmitReceive+0x26>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e18a      	b.n	8006d48 <HAL_SPI_TransmitReceive+0x33c>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a3a:	f7fd f893 	bl	8003b64 <HAL_GetTick>
 8006a3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006a50:	887b      	ldrh	r3, [r7, #2]
 8006a52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d00f      	beq.n	8006a7c <HAL_SPI_TransmitReceive+0x70>
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a62:	d107      	bne.n	8006a74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d103      	bne.n	8006a74 <HAL_SPI_TransmitReceive+0x68>
 8006a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d003      	beq.n	8006a7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006a74:	2302      	movs	r3, #2
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a7a:	e15b      	b.n	8006d34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d005      	beq.n	8006a8e <HAL_SPI_TransmitReceive+0x82>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <HAL_SPI_TransmitReceive+0x82>
 8006a88:	887b      	ldrh	r3, [r7, #2]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d103      	bne.n	8006a96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a94:	e14e      	b.n	8006d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d003      	beq.n	8006aaa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2205      	movs	r2, #5
 8006aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	887a      	ldrh	r2, [r7, #2]
 8006aba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	887a      	ldrh	r2, [r7, #2]
 8006ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	887a      	ldrh	r2, [r7, #2]
 8006acc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	887a      	ldrh	r2, [r7, #2]
 8006ad2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	d007      	beq.n	8006afe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006afc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b06:	d178      	bne.n	8006bfa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_SPI_TransmitReceive+0x10a>
 8006b10:	8b7b      	ldrh	r3, [r7, #26]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d166      	bne.n	8006be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	881a      	ldrh	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	1c9a      	adds	r2, r3, #2
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b3a:	e053      	b.n	8006be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d11b      	bne.n	8006b82 <HAL_SPI_TransmitReceive+0x176>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d016      	beq.n	8006b82 <HAL_SPI_TransmitReceive+0x176>
 8006b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d113      	bne.n	8006b82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	881a      	ldrh	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	1c9a      	adds	r2, r3, #2
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d119      	bne.n	8006bc4 <HAL_SPI_TransmitReceive+0x1b8>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d014      	beq.n	8006bc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	b292      	uxth	r2, r2
 8006ba6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	1c9a      	adds	r2, r3, #2
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006bc4:	f7fc ffce 	bl	8003b64 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d807      	bhi.n	8006be4 <HAL_SPI_TransmitReceive+0x1d8>
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d003      	beq.n	8006be4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006be2:	e0a7      	b.n	8006d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1a6      	bne.n	8006b3c <HAL_SPI_TransmitReceive+0x130>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1a1      	bne.n	8006b3c <HAL_SPI_TransmitReceive+0x130>
 8006bf8:	e07c      	b.n	8006cf4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <HAL_SPI_TransmitReceive+0x1fc>
 8006c02:	8b7b      	ldrh	r3, [r7, #26]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d16b      	bne.n	8006ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	330c      	adds	r3, #12
 8006c12:	7812      	ldrb	r2, [r2, #0]
 8006c14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3b01      	subs	r3, #1
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c2e:	e057      	b.n	8006ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d11c      	bne.n	8006c78 <HAL_SPI_TransmitReceive+0x26c>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d017      	beq.n	8006c78 <HAL_SPI_TransmitReceive+0x26c>
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d114      	bne.n	8006c78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	330c      	adds	r3, #12
 8006c58:	7812      	ldrb	r2, [r2, #0]
 8006c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d119      	bne.n	8006cba <HAL_SPI_TransmitReceive+0x2ae>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d014      	beq.n	8006cba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006cba:	f7fc ff53 	bl	8003b64 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d803      	bhi.n	8006cd2 <HAL_SPI_TransmitReceive+0x2c6>
 8006cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd0:	d102      	bne.n	8006cd8 <HAL_SPI_TransmitReceive+0x2cc>
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d103      	bne.n	8006ce0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006cde:	e029      	b.n	8006d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1a2      	bne.n	8006c30 <HAL_SPI_TransmitReceive+0x224>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d19d      	bne.n	8006c30 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f8b1 	bl	8006e60 <SPI_EndRxTxTransaction>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d006      	beq.n	8006d12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006d10:	e010      	b.n	8006d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10b      	bne.n	8006d32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	e000      	b.n	8006d34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3730      	adds	r7, #48	; 0x30
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d60:	f7fc ff00 	bl	8003b64 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	1a9b      	subs	r3, r3, r2
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d70:	f7fc fef8 	bl	8003b64 <HAL_GetTick>
 8006d74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d76:	4b39      	ldr	r3, [pc, #228]	; (8006e5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	015b      	lsls	r3, r3, #5
 8006d7c:	0d1b      	lsrs	r3, r3, #20
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	fb02 f303 	mul.w	r3, r2, r3
 8006d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d86:	e054      	b.n	8006e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8e:	d050      	beq.n	8006e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d90:	f7fc fee8 	bl	8003b64 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d902      	bls.n	8006da6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d13d      	bne.n	8006e22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006db4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dbe:	d111      	bne.n	8006de4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc8:	d004      	beq.n	8006dd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd2:	d107      	bne.n	8006de4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dec:	d10f      	bne.n	8006e0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e017      	b.n	8006e52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	bf0c      	ite	eq
 8006e42:	2301      	moveq	r3, #1
 8006e44:	2300      	movne	r3, #0
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d19b      	bne.n	8006d88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3720      	adds	r7, #32
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000038 	.word	0x20000038

08006e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af02      	add	r7, sp, #8
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2200      	movs	r2, #0
 8006e74:	2180      	movs	r1, #128	; 0x80
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f7ff ff6a 	bl	8006d50 <SPI_WaitFlagStateUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e86:	f043 0220 	orr.w	r2, r3, #32
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e000      	b.n	8006e94 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e041      	b.n	8006f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fc fc34 	bl	8003730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f001 f984 	bl	80081e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d001      	beq.n	8006f54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e032      	b.n	8006fba <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a18      	ldr	r2, [pc, #96]	; (8006fc4 <HAL_TIM_Base_Start+0x88>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00e      	beq.n	8006f84 <HAL_TIM_Base_Start+0x48>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6e:	d009      	beq.n	8006f84 <HAL_TIM_Base_Start+0x48>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a14      	ldr	r2, [pc, #80]	; (8006fc8 <HAL_TIM_Base_Start+0x8c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d004      	beq.n	8006f84 <HAL_TIM_Base_Start+0x48>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a13      	ldr	r2, [pc, #76]	; (8006fcc <HAL_TIM_Base_Start+0x90>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d111      	bne.n	8006fa8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b06      	cmp	r3, #6
 8006f94:	d010      	beq.n	8006fb8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f042 0201 	orr.w	r2, r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa6:	e007      	b.n	8006fb8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0201 	orr.w	r2, r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bc80      	pop	{r7}
 8006fc2:	4770      	bx	lr
 8006fc4:	40012c00 	.word	0x40012c00
 8006fc8:	40000400 	.word	0x40000400
 8006fcc:	40000800 	.word	0x40000800

08006fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d001      	beq.n	8006fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e03a      	b.n	800705e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a18      	ldr	r2, [pc, #96]	; (8007068 <HAL_TIM_Base_Start_IT+0x98>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00e      	beq.n	8007028 <HAL_TIM_Base_Start_IT+0x58>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007012:	d009      	beq.n	8007028 <HAL_TIM_Base_Start_IT+0x58>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a14      	ldr	r2, [pc, #80]	; (800706c <HAL_TIM_Base_Start_IT+0x9c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d004      	beq.n	8007028 <HAL_TIM_Base_Start_IT+0x58>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a13      	ldr	r2, [pc, #76]	; (8007070 <HAL_TIM_Base_Start_IT+0xa0>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d111      	bne.n	800704c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 0307 	and.w	r3, r3, #7
 8007032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b06      	cmp	r3, #6
 8007038:	d010      	beq.n	800705c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0201 	orr.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704a:	e007      	b.n	800705c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40000400 	.word	0x40000400
 8007070:	40000800 	.word	0x40000800

08007074 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e041      	b.n	800710a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d106      	bne.n	80070a0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f839 	bl	8007112 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3304      	adds	r3, #4
 80070b0:	4619      	mov	r1, r3
 80070b2:	4610      	mov	r0, r2
 80070b4:	f001 f898 	bl	80081e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr

08007124 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e041      	b.n	80071ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d106      	bne.n	8007150 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f839 	bl	80071c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f001 f840 	bl	80081e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr

080071d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d109      	bne.n	80071f8 <HAL_TIM_PWM_Start+0x24>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	bf14      	ite	ne
 80071f0:	2301      	movne	r3, #1
 80071f2:	2300      	moveq	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	e022      	b.n	800723e <HAL_TIM_PWM_Start+0x6a>
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d109      	bne.n	8007212 <HAL_TIM_PWM_Start+0x3e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b01      	cmp	r3, #1
 8007208:	bf14      	ite	ne
 800720a:	2301      	movne	r3, #1
 800720c:	2300      	moveq	r3, #0
 800720e:	b2db      	uxtb	r3, r3
 8007210:	e015      	b.n	800723e <HAL_TIM_PWM_Start+0x6a>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b08      	cmp	r3, #8
 8007216:	d109      	bne.n	800722c <HAL_TIM_PWM_Start+0x58>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b01      	cmp	r3, #1
 8007222:	bf14      	ite	ne
 8007224:	2301      	movne	r3, #1
 8007226:	2300      	moveq	r3, #0
 8007228:	b2db      	uxtb	r3, r3
 800722a:	e008      	b.n	800723e <HAL_TIM_PWM_Start+0x6a>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b01      	cmp	r3, #1
 8007236:	bf14      	ite	ne
 8007238:	2301      	movne	r3, #1
 800723a:	2300      	moveq	r3, #0
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e05e      	b.n	8007304 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d104      	bne.n	8007256 <HAL_TIM_PWM_Start+0x82>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007254:	e013      	b.n	800727e <HAL_TIM_PWM_Start+0xaa>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b04      	cmp	r3, #4
 800725a:	d104      	bne.n	8007266 <HAL_TIM_PWM_Start+0x92>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007264:	e00b      	b.n	800727e <HAL_TIM_PWM_Start+0xaa>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b08      	cmp	r3, #8
 800726a:	d104      	bne.n	8007276 <HAL_TIM_PWM_Start+0xa2>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007274:	e003      	b.n	800727e <HAL_TIM_PWM_Start+0xaa>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2202      	movs	r2, #2
 800727a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2201      	movs	r2, #1
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f001 fa2e 	bl	80086e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1e      	ldr	r2, [pc, #120]	; (800730c <HAL_TIM_PWM_Start+0x138>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d107      	bne.n	80072a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a18      	ldr	r2, [pc, #96]	; (800730c <HAL_TIM_PWM_Start+0x138>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00e      	beq.n	80072ce <HAL_TIM_PWM_Start+0xfa>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b8:	d009      	beq.n	80072ce <HAL_TIM_PWM_Start+0xfa>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a14      	ldr	r2, [pc, #80]	; (8007310 <HAL_TIM_PWM_Start+0x13c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d004      	beq.n	80072ce <HAL_TIM_PWM_Start+0xfa>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a12      	ldr	r2, [pc, #72]	; (8007314 <HAL_TIM_PWM_Start+0x140>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d111      	bne.n	80072f2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b06      	cmp	r3, #6
 80072de:	d010      	beq.n	8007302 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0201 	orr.w	r2, r2, #1
 80072ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f0:	e007      	b.n	8007302 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f042 0201 	orr.w	r2, r2, #1
 8007300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	40012c00 	.word	0x40012c00
 8007310:	40000400 	.word	0x40000400
 8007314:	40000800 	.word	0x40000800

08007318 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d109      	bne.n	8007340 <HAL_TIM_PWM_Start_DMA+0x28>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	bf0c      	ite	eq
 8007338:	2301      	moveq	r3, #1
 800733a:	2300      	movne	r3, #0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	e022      	b.n	8007386 <HAL_TIM_PWM_Start_DMA+0x6e>
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b04      	cmp	r3, #4
 8007344:	d109      	bne.n	800735a <HAL_TIM_PWM_Start_DMA+0x42>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	bf0c      	ite	eq
 8007352:	2301      	moveq	r3, #1
 8007354:	2300      	movne	r3, #0
 8007356:	b2db      	uxtb	r3, r3
 8007358:	e015      	b.n	8007386 <HAL_TIM_PWM_Start_DMA+0x6e>
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b08      	cmp	r3, #8
 800735e:	d109      	bne.n	8007374 <HAL_TIM_PWM_Start_DMA+0x5c>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	bf0c      	ite	eq
 800736c:	2301      	moveq	r3, #1
 800736e:	2300      	movne	r3, #0
 8007370:	b2db      	uxtb	r3, r3
 8007372:	e008      	b.n	8007386 <HAL_TIM_PWM_Start_DMA+0x6e>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	bf0c      	ite	eq
 8007380:	2301      	moveq	r3, #1
 8007382:	2300      	movne	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 800738a:	2302      	movs	r3, #2
 800738c:	e14e      	b.n	800762c <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <HAL_TIM_PWM_Start_DMA+0x90>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	bf0c      	ite	eq
 80073a0:	2301      	moveq	r3, #1
 80073a2:	2300      	movne	r3, #0
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	e022      	b.n	80073ee <HAL_TIM_PWM_Start_DMA+0xd6>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d109      	bne.n	80073c2 <HAL_TIM_PWM_Start_DMA+0xaa>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	bf0c      	ite	eq
 80073ba:	2301      	moveq	r3, #1
 80073bc:	2300      	movne	r3, #0
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	e015      	b.n	80073ee <HAL_TIM_PWM_Start_DMA+0xd6>
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d109      	bne.n	80073dc <HAL_TIM_PWM_Start_DMA+0xc4>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	bf0c      	ite	eq
 80073d4:	2301      	moveq	r3, #1
 80073d6:	2300      	movne	r3, #0
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	e008      	b.n	80073ee <HAL_TIM_PWM_Start_DMA+0xd6>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	bf0c      	ite	eq
 80073e8:	2301      	moveq	r3, #1
 80073ea:	2300      	movne	r3, #0
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d024      	beq.n	800743c <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d104      	bne.n	8007402 <HAL_TIM_PWM_Start_DMA+0xea>
 80073f8:	887b      	ldrh	r3, [r7, #2]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e114      	b.n	800762c <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <HAL_TIM_PWM_Start_DMA+0xfa>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007410:	e016      	b.n	8007440 <HAL_TIM_PWM_Start_DMA+0x128>
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b04      	cmp	r3, #4
 8007416:	d104      	bne.n	8007422 <HAL_TIM_PWM_Start_DMA+0x10a>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007420:	e00e      	b.n	8007440 <HAL_TIM_PWM_Start_DMA+0x128>
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b08      	cmp	r3, #8
 8007426:	d104      	bne.n	8007432 <HAL_TIM_PWM_Start_DMA+0x11a>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2202      	movs	r2, #2
 800742c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007430:	e006      	b.n	8007440 <HAL_TIM_PWM_Start_DMA+0x128>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2202      	movs	r2, #2
 8007436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800743a:	e001      	b.n	8007440 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e0f5      	b.n	800762c <HAL_TIM_PWM_Start_DMA+0x314>
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b0c      	cmp	r3, #12
 8007444:	f200 80ae 	bhi.w	80075a4 <HAL_TIM_PWM_Start_DMA+0x28c>
 8007448:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <HAL_TIM_PWM_Start_DMA+0x138>)
 800744a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744e:	bf00      	nop
 8007450:	08007485 	.word	0x08007485
 8007454:	080075a5 	.word	0x080075a5
 8007458:	080075a5 	.word	0x080075a5
 800745c:	080075a5 	.word	0x080075a5
 8007460:	080074cd 	.word	0x080074cd
 8007464:	080075a5 	.word	0x080075a5
 8007468:	080075a5 	.word	0x080075a5
 800746c:	080075a5 	.word	0x080075a5
 8007470:	08007515 	.word	0x08007515
 8007474:	080075a5 	.word	0x080075a5
 8007478:	080075a5 	.word	0x080075a5
 800747c:	080075a5 	.word	0x080075a5
 8007480:	0800755d 	.word	0x0800755d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	4a6a      	ldr	r2, [pc, #424]	; (8007634 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800748a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	4a69      	ldr	r2, [pc, #420]	; (8007638 <HAL_TIM_PWM_Start_DMA+0x320>)
 8007492:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	4a68      	ldr	r2, [pc, #416]	; (800763c <HAL_TIM_PWM_Start_DMA+0x324>)
 800749a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3334      	adds	r3, #52	; 0x34
 80074a8:	461a      	mov	r2, r3
 80074aa:	887b      	ldrh	r3, [r7, #2]
 80074ac:	f7fc fcf0 	bl	8003e90 <HAL_DMA_Start_IT>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e0b8      	b.n	800762c <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68da      	ldr	r2, [r3, #12]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074c8:	60da      	str	r2, [r3, #12]
      break;
 80074ca:	e06c      	b.n	80075a6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d0:	4a58      	ldr	r2, [pc, #352]	; (8007634 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80074d2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d8:	4a57      	ldr	r2, [pc, #348]	; (8007638 <HAL_TIM_PWM_Start_DMA+0x320>)
 80074da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	4a56      	ldr	r2, [pc, #344]	; (800763c <HAL_TIM_PWM_Start_DMA+0x324>)
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3338      	adds	r3, #56	; 0x38
 80074f0:	461a      	mov	r2, r3
 80074f2:	887b      	ldrh	r3, [r7, #2]
 80074f4:	f7fc fccc 	bl	8003e90 <HAL_DMA_Start_IT>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e094      	b.n	800762c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007510:	60da      	str	r2, [r3, #12]
      break;
 8007512:	e048      	b.n	80075a6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007518:	4a46      	ldr	r2, [pc, #280]	; (8007634 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800751a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	4a45      	ldr	r2, [pc, #276]	; (8007638 <HAL_TIM_PWM_Start_DMA+0x320>)
 8007522:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	4a44      	ldr	r2, [pc, #272]	; (800763c <HAL_TIM_PWM_Start_DMA+0x324>)
 800752a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	333c      	adds	r3, #60	; 0x3c
 8007538:	461a      	mov	r2, r3
 800753a:	887b      	ldrh	r3, [r7, #2]
 800753c:	f7fc fca8 	bl	8003e90 <HAL_DMA_Start_IT>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e070      	b.n	800762c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007558:	60da      	str	r2, [r3, #12]
      break;
 800755a:	e024      	b.n	80075a6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	4a34      	ldr	r2, [pc, #208]	; (8007634 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8007562:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	4a33      	ldr	r2, [pc, #204]	; (8007638 <HAL_TIM_PWM_Start_DMA+0x320>)
 800756a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007570:	4a32      	ldr	r2, [pc, #200]	; (800763c <HAL_TIM_PWM_Start_DMA+0x324>)
 8007572:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3340      	adds	r3, #64	; 0x40
 8007580:	461a      	mov	r2, r3
 8007582:	887b      	ldrh	r3, [r7, #2]
 8007584:	f7fc fc84 	bl	8003e90 <HAL_DMA_Start_IT>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e04c      	b.n	800762c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075a0:	60da      	str	r2, [r3, #12]
      break;
 80075a2:	e000      	b.n	80075a6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80075a4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2201      	movs	r2, #1
 80075ac:	68b9      	ldr	r1, [r7, #8]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f001 f89a 	bl	80086e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a21      	ldr	r2, [pc, #132]	; (8007640 <HAL_TIM_PWM_Start_DMA+0x328>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d107      	bne.n	80075ce <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a1b      	ldr	r2, [pc, #108]	; (8007640 <HAL_TIM_PWM_Start_DMA+0x328>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00e      	beq.n	80075f6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e0:	d009      	beq.n	80075f6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a17      	ldr	r2, [pc, #92]	; (8007644 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d004      	beq.n	80075f6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a15      	ldr	r2, [pc, #84]	; (8007648 <HAL_TIM_PWM_Start_DMA+0x330>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d111      	bne.n	800761a <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b06      	cmp	r3, #6
 8007606:	d010      	beq.n	800762a <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f042 0201 	orr.w	r2, r2, #1
 8007616:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007618:	e007      	b.n	800762a <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0201 	orr.w	r2, r2, #1
 8007628:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	080080d9 	.word	0x080080d9
 8007638:	08008181 	.word	0x08008181
 800763c:	08008047 	.word	0x08008047
 8007640:	40012c00 	.word	0x40012c00
 8007644:	40000400 	.word	0x40000400
 8007648:	40000800 	.word	0x40000800

0800764c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2b0c      	cmp	r3, #12
 800765a:	d855      	bhi.n	8007708 <HAL_TIM_PWM_Stop_DMA+0xbc>
 800765c:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800765e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007662:	bf00      	nop
 8007664:	08007699 	.word	0x08007699
 8007668:	08007709 	.word	0x08007709
 800766c:	08007709 	.word	0x08007709
 8007670:	08007709 	.word	0x08007709
 8007674:	080076b5 	.word	0x080076b5
 8007678:	08007709 	.word	0x08007709
 800767c:	08007709 	.word	0x08007709
 8007680:	08007709 	.word	0x08007709
 8007684:	080076d1 	.word	0x080076d1
 8007688:	08007709 	.word	0x08007709
 800768c:	08007709 	.word	0x08007709
 8007690:	08007709 	.word	0x08007709
 8007694:	080076ed 	.word	0x080076ed
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80076a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fc fc4f 	bl	8003f50 <HAL_DMA_Abort_IT>
      break;
 80076b2:	e02a      	b.n	800770a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fc fc41 	bl	8003f50 <HAL_DMA_Abort_IT>
      break;
 80076ce:	e01c      	b.n	800770a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fc fc33 	bl	8003f50 <HAL_DMA_Abort_IT>
      break;
 80076ea:	e00e      	b.n	800770a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007700:	4618      	mov	r0, r3
 8007702:	f7fc fc25 	bl	8003f50 <HAL_DMA_Abort_IT>
      break;
 8007706:	e000      	b.n	800770a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8007708:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2200      	movs	r2, #0
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 ffe8 	bl	80086e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a29      	ldr	r2, [pc, #164]	; (80077c4 <HAL_TIM_PWM_Stop_DMA+0x178>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d117      	bne.n	8007752 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6a1a      	ldr	r2, [r3, #32]
 8007728:	f241 1311 	movw	r3, #4369	; 0x1111
 800772c:	4013      	ands	r3, r2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10f      	bne.n	8007752 <HAL_TIM_PWM_Stop_DMA+0x106>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6a1a      	ldr	r2, [r3, #32]
 8007738:	f240 4344 	movw	r3, #1092	; 0x444
 800773c:	4013      	ands	r3, r2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d107      	bne.n	8007752 <HAL_TIM_PWM_Stop_DMA+0x106>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007750:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6a1a      	ldr	r2, [r3, #32]
 8007758:	f241 1311 	movw	r3, #4369	; 0x1111
 800775c:	4013      	ands	r3, r2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10f      	bne.n	8007782 <HAL_TIM_PWM_Stop_DMA+0x136>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6a1a      	ldr	r2, [r3, #32]
 8007768:	f240 4344 	movw	r3, #1092	; 0x444
 800776c:	4013      	ands	r3, r2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d107      	bne.n	8007782 <HAL_TIM_PWM_Stop_DMA+0x136>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0201 	bic.w	r2, r2, #1
 8007780:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d104      	bne.n	8007792 <HAL_TIM_PWM_Stop_DMA+0x146>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007790:	e013      	b.n	80077ba <HAL_TIM_PWM_Stop_DMA+0x16e>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b04      	cmp	r3, #4
 8007796:	d104      	bne.n	80077a2 <HAL_TIM_PWM_Stop_DMA+0x156>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077a0:	e00b      	b.n	80077ba <HAL_TIM_PWM_Stop_DMA+0x16e>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b08      	cmp	r3, #8
 80077a6:	d104      	bne.n	80077b2 <HAL_TIM_PWM_Stop_DMA+0x166>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077b0:	e003      	b.n	80077ba <HAL_TIM_PWM_Stop_DMA+0x16e>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40012c00 	.word	0x40012c00

080077c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e093      	b.n	8007904 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d106      	bne.n	80077f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7fc f813 	bl	800381c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2202      	movs	r2, #2
 80077fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6812      	ldr	r2, [r2, #0]
 8007808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800780c:	f023 0307 	bic.w	r3, r3, #7
 8007810:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3304      	adds	r3, #4
 800781a:	4619      	mov	r1, r3
 800781c:	4610      	mov	r0, r2
 800781e:	f000 fce3 	bl	80081e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800784a:	f023 0303 	bic.w	r3, r3, #3
 800784e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	021b      	lsls	r3, r3, #8
 800785a:	4313      	orrs	r3, r2
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	4313      	orrs	r3, r2
 8007860:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007868:	f023 030c 	bic.w	r3, r3, #12
 800786c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007874:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007878:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	021b      	lsls	r3, r3, #8
 8007884:	4313      	orrs	r3, r2
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	4313      	orrs	r3, r2
 800788a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	011a      	lsls	r2, r3, #4
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	031b      	lsls	r3, r3, #12
 8007898:	4313      	orrs	r3, r2
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	4313      	orrs	r3, r2
 800789e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	011b      	lsls	r3, r3, #4
 80078b2:	4313      	orrs	r3, r2
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800791c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007924:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800792c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007934:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d110      	bne.n	800795e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d102      	bne.n	8007948 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007942:	7b7b      	ldrb	r3, [r7, #13]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d001      	beq.n	800794c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e069      	b.n	8007a20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800795c:	e031      	b.n	80079c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b04      	cmp	r3, #4
 8007962:	d110      	bne.n	8007986 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d102      	bne.n	8007970 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800796a:	7b3b      	ldrb	r3, [r7, #12]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d001      	beq.n	8007974 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e055      	b.n	8007a20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007984:	e01d      	b.n	80079c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d108      	bne.n	800799e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d105      	bne.n	800799e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007992:	7b7b      	ldrb	r3, [r7, #13]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d102      	bne.n	800799e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007998:	7b3b      	ldrb	r3, [r7, #12]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d001      	beq.n	80079a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e03e      	b.n	8007a20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2202      	movs	r2, #2
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2202      	movs	r2, #2
 80079ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2202      	movs	r2, #2
 80079b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2202      	movs	r2, #2
 80079be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d003      	beq.n	80079d0 <HAL_TIM_Encoder_Start+0xc4>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d008      	beq.n	80079e0 <HAL_TIM_Encoder_Start+0xd4>
 80079ce:	e00f      	b.n	80079f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2201      	movs	r2, #1
 80079d6:	2100      	movs	r1, #0
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 fe85 	bl	80086e8 <TIM_CCxChannelCmd>
      break;
 80079de:	e016      	b.n	8007a0e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2201      	movs	r2, #1
 80079e6:	2104      	movs	r1, #4
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fe7d 	bl	80086e8 <TIM_CCxChannelCmd>
      break;
 80079ee:	e00e      	b.n	8007a0e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2201      	movs	r2, #1
 80079f6:	2100      	movs	r1, #0
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fe75 	bl	80086e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2201      	movs	r2, #1
 8007a04:	2104      	movs	r1, #4
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fe6e 	bl	80086e8 <TIM_CCxChannelCmd>
      break;
 8007a0c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f042 0201 	orr.w	r2, r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d122      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d11b      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f06f 0202 	mvn.w	r2, #2
 8007a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fac7 	bl	8007ffe <HAL_TIM_IC_CaptureCallback>
 8007a70:	e005      	b.n	8007a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fb f810 	bl	8002a98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7fb f84b 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f003 0304 	and.w	r3, r3, #4
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d122      	bne.n	8007ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d11b      	bne.n	8007ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f06f 0204 	mvn.w	r2, #4
 8007aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2202      	movs	r2, #2
 8007aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fa9d 	bl	8007ffe <HAL_TIM_IC_CaptureCallback>
 8007ac4:	e005      	b.n	8007ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fa ffe6 	bl	8002a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7fb f821 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	f003 0308 	and.w	r3, r3, #8
 8007ae2:	2b08      	cmp	r3, #8
 8007ae4:	d122      	bne.n	8007b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	f003 0308 	and.w	r3, r3, #8
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d11b      	bne.n	8007b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f06f 0208 	mvn.w	r2, #8
 8007afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2204      	movs	r2, #4
 8007b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	69db      	ldr	r3, [r3, #28]
 8007b0a:	f003 0303 	and.w	r3, r3, #3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fa73 	bl	8007ffe <HAL_TIM_IC_CaptureCallback>
 8007b18:	e005      	b.n	8007b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fa ffbc 	bl	8002a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7fa fff7 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f003 0310 	and.w	r3, r3, #16
 8007b36:	2b10      	cmp	r3, #16
 8007b38:	d122      	bne.n	8007b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b10      	cmp	r3, #16
 8007b46:	d11b      	bne.n	8007b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f06f 0210 	mvn.w	r2, #16
 8007b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2208      	movs	r2, #8
 8007b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fa49 	bl	8007ffe <HAL_TIM_IC_CaptureCallback>
 8007b6c:	e005      	b.n	8007b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7fa ff92 	bl	8002a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7fa ffcd 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d10e      	bne.n	8007bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d107      	bne.n	8007bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f06f 0201 	mvn.w	r2, #1
 8007ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa20 	bl	8007fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb6:	2b80      	cmp	r3, #128	; 0x80
 8007bb8:	d10e      	bne.n	8007bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc4:	2b80      	cmp	r3, #128	; 0x80
 8007bc6:	d107      	bne.n	8007bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fe13 	bl	80087fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be2:	2b40      	cmp	r3, #64	; 0x40
 8007be4:	d10e      	bne.n	8007c04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf0:	2b40      	cmp	r3, #64	; 0x40
 8007bf2:	d107      	bne.n	8007c04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa0f 	bl	8008022 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d10e      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b20      	cmp	r3, #32
 8007c1e:	d107      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f06f 0220 	mvn.w	r2, #32
 8007c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fdde 	bl	80087ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d101      	bne.n	8007c52 <HAL_TIM_OC_ConfigChannel+0x1a>
 8007c4e:	2302      	movs	r3, #2
 8007c50:	e046      	b.n	8007ce0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b0c      	cmp	r3, #12
 8007c5e:	d839      	bhi.n	8007cd4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8007c60:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <HAL_TIM_OC_ConfigChannel+0x30>)
 8007c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c66:	bf00      	nop
 8007c68:	08007c9d 	.word	0x08007c9d
 8007c6c:	08007cd5 	.word	0x08007cd5
 8007c70:	08007cd5 	.word	0x08007cd5
 8007c74:	08007cd5 	.word	0x08007cd5
 8007c78:	08007cab 	.word	0x08007cab
 8007c7c:	08007cd5 	.word	0x08007cd5
 8007c80:	08007cd5 	.word	0x08007cd5
 8007c84:	08007cd5 	.word	0x08007cd5
 8007c88:	08007cb9 	.word	0x08007cb9
 8007c8c:	08007cd5 	.word	0x08007cd5
 8007c90:	08007cd5 	.word	0x08007cd5
 8007c94:	08007cd5 	.word	0x08007cd5
 8007c98:	08007cc7 	.word	0x08007cc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68b9      	ldr	r1, [r7, #8]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fb02 	bl	80082ac <TIM_OC1_SetConfig>
      break;
 8007ca8:	e015      	b.n	8007cd6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 fb61 	bl	8008378 <TIM_OC2_SetConfig>
      break;
 8007cb6:	e00e      	b.n	8007cd6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fbc4 	bl	800844c <TIM_OC3_SetConfig>
      break;
 8007cc4:	e007      	b.n	8007cd6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68b9      	ldr	r1, [r7, #8]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 fc27 	bl	8008520 <TIM_OC4_SetConfig>
      break;
 8007cd2:	e000      	b.n	8007cd6 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8007cd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d101      	bne.n	8007d02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	e0ac      	b.n	8007e5c <HAL_TIM_PWM_ConfigChannel+0x174>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b0c      	cmp	r3, #12
 8007d0e:	f200 809f 	bhi.w	8007e50 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007d12:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007d4d 	.word	0x08007d4d
 8007d1c:	08007e51 	.word	0x08007e51
 8007d20:	08007e51 	.word	0x08007e51
 8007d24:	08007e51 	.word	0x08007e51
 8007d28:	08007d8d 	.word	0x08007d8d
 8007d2c:	08007e51 	.word	0x08007e51
 8007d30:	08007e51 	.word	0x08007e51
 8007d34:	08007e51 	.word	0x08007e51
 8007d38:	08007dcf 	.word	0x08007dcf
 8007d3c:	08007e51 	.word	0x08007e51
 8007d40:	08007e51 	.word	0x08007e51
 8007d44:	08007e51 	.word	0x08007e51
 8007d48:	08007e0f 	.word	0x08007e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68b9      	ldr	r1, [r7, #8]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 faaa 	bl	80082ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0208 	orr.w	r2, r2, #8
 8007d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	699a      	ldr	r2, [r3, #24]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0204 	bic.w	r2, r2, #4
 8007d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6999      	ldr	r1, [r3, #24]
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	691a      	ldr	r2, [r3, #16]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	619a      	str	r2, [r3, #24]
      break;
 8007d8a:	e062      	b.n	8007e52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 faf0 	bl	8008378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699a      	ldr	r2, [r3, #24]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	699a      	ldr	r2, [r3, #24]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6999      	ldr	r1, [r3, #24]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	021a      	lsls	r2, r3, #8
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	619a      	str	r2, [r3, #24]
      break;
 8007dcc:	e041      	b.n	8007e52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68b9      	ldr	r1, [r7, #8]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 fb39 	bl	800844c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	69da      	ldr	r2, [r3, #28]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0208 	orr.w	r2, r2, #8
 8007de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69da      	ldr	r2, [r3, #28]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0204 	bic.w	r2, r2, #4
 8007df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69d9      	ldr	r1, [r3, #28]
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	691a      	ldr	r2, [r3, #16]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	61da      	str	r2, [r3, #28]
      break;
 8007e0c:	e021      	b.n	8007e52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fb83 	bl	8008520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69da      	ldr	r2, [r3, #28]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69da      	ldr	r2, [r3, #28]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69d9      	ldr	r1, [r3, #28]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	021a      	lsls	r2, r3, #8
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	61da      	str	r2, [r3, #28]
      break;
 8007e4e:	e000      	b.n	8007e52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007e50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d101      	bne.n	8007e7c <HAL_TIM_ConfigClockSource+0x18>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	e0b3      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x180>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ea2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eb4:	d03e      	beq.n	8007f34 <HAL_TIM_ConfigClockSource+0xd0>
 8007eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eba:	f200 8087 	bhi.w	8007fcc <HAL_TIM_ConfigClockSource+0x168>
 8007ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec2:	f000 8085 	beq.w	8007fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eca:	d87f      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x168>
 8007ecc:	2b70      	cmp	r3, #112	; 0x70
 8007ece:	d01a      	beq.n	8007f06 <HAL_TIM_ConfigClockSource+0xa2>
 8007ed0:	2b70      	cmp	r3, #112	; 0x70
 8007ed2:	d87b      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x168>
 8007ed4:	2b60      	cmp	r3, #96	; 0x60
 8007ed6:	d050      	beq.n	8007f7a <HAL_TIM_ConfigClockSource+0x116>
 8007ed8:	2b60      	cmp	r3, #96	; 0x60
 8007eda:	d877      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x168>
 8007edc:	2b50      	cmp	r3, #80	; 0x50
 8007ede:	d03c      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0xf6>
 8007ee0:	2b50      	cmp	r3, #80	; 0x50
 8007ee2:	d873      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x168>
 8007ee4:	2b40      	cmp	r3, #64	; 0x40
 8007ee6:	d058      	beq.n	8007f9a <HAL_TIM_ConfigClockSource+0x136>
 8007ee8:	2b40      	cmp	r3, #64	; 0x40
 8007eea:	d86f      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x168>
 8007eec:	2b30      	cmp	r3, #48	; 0x30
 8007eee:	d064      	beq.n	8007fba <HAL_TIM_ConfigClockSource+0x156>
 8007ef0:	2b30      	cmp	r3, #48	; 0x30
 8007ef2:	d86b      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x168>
 8007ef4:	2b20      	cmp	r3, #32
 8007ef6:	d060      	beq.n	8007fba <HAL_TIM_ConfigClockSource+0x156>
 8007ef8:	2b20      	cmp	r3, #32
 8007efa:	d867      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x168>
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d05c      	beq.n	8007fba <HAL_TIM_ConfigClockSource+0x156>
 8007f00:	2b10      	cmp	r3, #16
 8007f02:	d05a      	beq.n	8007fba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007f04:	e062      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	6899      	ldr	r1, [r3, #8]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	f000 fbc8 	bl	80086aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	609a      	str	r2, [r3, #8]
      break;
 8007f32:	e04e      	b.n	8007fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	6899      	ldr	r1, [r3, #8]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f000 fbb1 	bl	80086aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689a      	ldr	r2, [r3, #8]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f56:	609a      	str	r2, [r3, #8]
      break;
 8007f58:	e03b      	b.n	8007fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	6859      	ldr	r1, [r3, #4]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f000 fb28 	bl	80085bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2150      	movs	r1, #80	; 0x50
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fb7f 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8007f78:	e02b      	b.n	8007fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6859      	ldr	r1, [r3, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f000 fb46 	bl	8008618 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2160      	movs	r1, #96	; 0x60
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fb6f 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8007f98:	e01b      	b.n	8007fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	6859      	ldr	r1, [r3, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f000 fb08 	bl	80085bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2140      	movs	r1, #64	; 0x40
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fb5f 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8007fb8:	e00b      	b.n	8007fd2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	f000 fb56 	bl	8008676 <TIM_ITRx_SetConfig>
        break;
 8007fca:	e002      	b.n	8007fd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007fcc:	bf00      	nop
 8007fce:	e000      	b.n	8007fd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007fd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	bc80      	pop	{r7}
 800800e:	4770      	bx	lr

08008010 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr

08008022 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	bc80      	pop	{r7}
 8008032:	4770      	bx	lr

08008034 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	bc80      	pop	{r7}
 8008044:	4770      	bx	lr

08008046 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	429a      	cmp	r2, r3
 800805c:	d107      	bne.n	800806e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2201      	movs	r2, #1
 8008062:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800806c:	e02a      	b.n	80080c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	429a      	cmp	r2, r3
 8008076:	d107      	bne.n	8008088 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2202      	movs	r2, #2
 800807c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008086:	e01d      	b.n	80080c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	429a      	cmp	r2, r3
 8008090:	d107      	bne.n	80080a2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2204      	movs	r2, #4
 8008096:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080a0:	e010      	b.n	80080c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d107      	bne.n	80080bc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2208      	movs	r2, #8
 80080b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080ba:	e003      	b.n	80080c4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7ff ffb5 	bl	8008034 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	771a      	strb	r2, [r3, #28]
}
 80080d0:	bf00      	nop
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d10b      	bne.n	8008108 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2201      	movs	r2, #1
 80080f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d136      	bne.n	800816c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008106:	e031      	b.n	800816c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	429a      	cmp	r2, r3
 8008110:	d10b      	bne.n	800812a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2202      	movs	r2, #2
 8008116:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d125      	bne.n	800816c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008128:	e020      	b.n	800816c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	429a      	cmp	r2, r3
 8008132:	d10b      	bne.n	800814c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2204      	movs	r2, #4
 8008138:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d114      	bne.n	800816c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800814a:	e00f      	b.n	800816c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	d10a      	bne.n	800816c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2208      	movs	r2, #8
 800815a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d103      	bne.n	800816c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7fa fcd1 	bl	8002b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	771a      	strb	r2, [r3, #28]
}
 8008178:	bf00      	nop
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	429a      	cmp	r2, r3
 8008196:	d103      	bne.n	80081a0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2201      	movs	r2, #1
 800819c:	771a      	strb	r2, [r3, #28]
 800819e:	e019      	b.n	80081d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d103      	bne.n	80081b2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2202      	movs	r2, #2
 80081ae:	771a      	strb	r2, [r3, #28]
 80081b0:	e010      	b.n	80081d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d103      	bne.n	80081c4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2204      	movs	r2, #4
 80081c0:	771a      	strb	r2, [r3, #28]
 80081c2:	e007      	b.n	80081d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d102      	bne.n	80081d4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2208      	movs	r2, #8
 80081d2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f7ff ff1b 	bl	8008010 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	771a      	strb	r2, [r3, #28]
}
 80081e0:	bf00      	nop
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a29      	ldr	r2, [pc, #164]	; (80082a0 <TIM_Base_SetConfig+0xb8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00b      	beq.n	8008218 <TIM_Base_SetConfig+0x30>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008206:	d007      	beq.n	8008218 <TIM_Base_SetConfig+0x30>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a26      	ldr	r2, [pc, #152]	; (80082a4 <TIM_Base_SetConfig+0xbc>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d003      	beq.n	8008218 <TIM_Base_SetConfig+0x30>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a25      	ldr	r2, [pc, #148]	; (80082a8 <TIM_Base_SetConfig+0xc0>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d108      	bne.n	800822a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800821e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	4313      	orrs	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a1c      	ldr	r2, [pc, #112]	; (80082a0 <TIM_Base_SetConfig+0xb8>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d00b      	beq.n	800824a <TIM_Base_SetConfig+0x62>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008238:	d007      	beq.n	800824a <TIM_Base_SetConfig+0x62>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a19      	ldr	r2, [pc, #100]	; (80082a4 <TIM_Base_SetConfig+0xbc>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d003      	beq.n	800824a <TIM_Base_SetConfig+0x62>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a18      	ldr	r2, [pc, #96]	; (80082a8 <TIM_Base_SetConfig+0xc0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d108      	bne.n	800825c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a07      	ldr	r2, [pc, #28]	; (80082a0 <TIM_Base_SetConfig+0xb8>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d103      	bne.n	8008290 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	691a      	ldr	r2, [r3, #16]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	615a      	str	r2, [r3, #20]
}
 8008296:	bf00      	nop
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr
 80082a0:	40012c00 	.word	0x40012c00
 80082a4:	40000400 	.word	0x40000400
 80082a8:	40000800 	.word	0x40000800

080082ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	f023 0201 	bic.w	r2, r3, #1
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 0303 	bic.w	r3, r3, #3
 80082e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f023 0302 	bic.w	r3, r3, #2
 80082f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a1c      	ldr	r2, [pc, #112]	; (8008374 <TIM_OC1_SetConfig+0xc8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d10c      	bne.n	8008322 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f023 0308 	bic.w	r3, r3, #8
 800830e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	4313      	orrs	r3, r2
 8008318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f023 0304 	bic.w	r3, r3, #4
 8008320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a13      	ldr	r2, [pc, #76]	; (8008374 <TIM_OC1_SetConfig+0xc8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d111      	bne.n	800834e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	4313      	orrs	r3, r2
 8008342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	4313      	orrs	r3, r2
 800834c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	621a      	str	r2, [r3, #32]
}
 8008368:	bf00      	nop
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	bc80      	pop	{r7}
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40012c00 	.word	0x40012c00

08008378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	f023 0210 	bic.w	r2, r3, #16
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	021b      	lsls	r3, r3, #8
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f023 0320 	bic.w	r3, r3, #32
 80083c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	011b      	lsls	r3, r3, #4
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a1d      	ldr	r2, [pc, #116]	; (8008448 <TIM_OC2_SetConfig+0xd0>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d10d      	bne.n	80083f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a14      	ldr	r2, [pc, #80]	; (8008448 <TIM_OC2_SetConfig+0xd0>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d113      	bne.n	8008424 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800840a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	4313      	orrs	r3, r2
 8008416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	4313      	orrs	r3, r2
 8008422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	621a      	str	r2, [r3, #32]
}
 800843e:	bf00      	nop
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr
 8008448:	40012c00 	.word	0x40012c00

0800844c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800847a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0303 	bic.w	r3, r3, #3
 8008482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	021b      	lsls	r3, r3, #8
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a1d      	ldr	r2, [pc, #116]	; (800851c <TIM_OC3_SetConfig+0xd0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d10d      	bne.n	80084c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	021b      	lsls	r3, r3, #8
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a14      	ldr	r2, [pc, #80]	; (800851c <TIM_OC3_SetConfig+0xd0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d113      	bne.n	80084f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	011b      	lsls	r3, r3, #4
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	621a      	str	r2, [r3, #32]
}
 8008510:	bf00      	nop
 8008512:	371c      	adds	r7, #28
 8008514:	46bd      	mov	sp, r7
 8008516:	bc80      	pop	{r7}
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	40012c00 	.word	0x40012c00

08008520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800854e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	021b      	lsls	r3, r3, #8
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	4313      	orrs	r3, r2
 8008562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800856a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	031b      	lsls	r3, r3, #12
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	4313      	orrs	r3, r2
 8008576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a0f      	ldr	r2, [pc, #60]	; (80085b8 <TIM_OC4_SetConfig+0x98>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d109      	bne.n	8008594 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	019b      	lsls	r3, r3, #6
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	4313      	orrs	r3, r2
 8008592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	621a      	str	r2, [r3, #32]
}
 80085ae:	bf00      	nop
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bc80      	pop	{r7}
 80085b6:	4770      	bx	lr
 80085b8:	40012c00 	.word	0x40012c00

080085bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	f023 0201 	bic.w	r2, r3, #1
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	011b      	lsls	r3, r3, #4
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f023 030a 	bic.w	r3, r3, #10
 80085f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4313      	orrs	r3, r2
 8008600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	bc80      	pop	{r7}
 8008616:	4770      	bx	lr

08008618 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a1b      	ldr	r3, [r3, #32]
 8008628:	f023 0210 	bic.w	r2, r3, #16
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008642:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	031b      	lsls	r3, r3, #12
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	4313      	orrs	r3, r2
 800864c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008654:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	4313      	orrs	r3, r2
 800865e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	621a      	str	r2, [r3, #32]
}
 800866c:	bf00      	nop
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	bc80      	pop	{r7}
 8008674:	4770      	bx	lr

08008676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	f043 0307 	orr.w	r3, r3, #7
 8008698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	609a      	str	r2, [r3, #8]
}
 80086a0:	bf00      	nop
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bc80      	pop	{r7}
 80086a8:	4770      	bx	lr

080086aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b087      	sub	sp, #28
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	60f8      	str	r0, [r7, #12]
 80086b2:	60b9      	str	r1, [r7, #8]
 80086b4:	607a      	str	r2, [r7, #4]
 80086b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	021a      	lsls	r2, r3, #8
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	431a      	orrs	r2, r3
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	609a      	str	r2, [r3, #8]
}
 80086de:	bf00      	nop
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bc80      	pop	{r7}
 80086e6:	4770      	bx	lr

080086e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f003 031f 	and.w	r3, r3, #31
 80086fa:	2201      	movs	r2, #1
 80086fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008700:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6a1a      	ldr	r2, [r3, #32]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	43db      	mvns	r3, r3
 800870a:	401a      	ands	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a1a      	ldr	r2, [r3, #32]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f003 031f 	and.w	r3, r3, #31
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	fa01 f303 	lsl.w	r3, r1, r3
 8008720:	431a      	orrs	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	621a      	str	r2, [r3, #32]
}
 8008726:	bf00      	nop
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	bc80      	pop	{r7}
 800872e:	4770      	bx	lr

08008730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008740:	2b01      	cmp	r3, #1
 8008742:	d101      	bne.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008744:	2302      	movs	r3, #2
 8008746:	e046      	b.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a16      	ldr	r2, [pc, #88]	; (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d00e      	beq.n	80087aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008794:	d009      	beq.n	80087aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a12      	ldr	r2, [pc, #72]	; (80087e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d004      	beq.n	80087aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a10      	ldr	r2, [pc, #64]	; (80087e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d10c      	bne.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	bc80      	pop	{r7}
 80087de:	4770      	bx	lr
 80087e0:	40012c00 	.word	0x40012c00
 80087e4:	40000400 	.word	0x40000400
 80087e8:	40000800 	.word	0x40000800

080087ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bc80      	pop	{r7}
 80087fc:	4770      	bx	lr

080087fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087fe:	b480      	push	{r7}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008806:	bf00      	nop
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	bc80      	pop	{r7}
 800880e:	4770      	bx	lr

08008810 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008810:	b084      	sub	sp, #16
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	f107 0014 	add.w	r0, r7, #20
 800881e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	bc80      	pop	{r7}
 800882c:	b004      	add	sp, #16
 800882e:	4770      	bx	lr

08008830 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008840:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008844:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	b29a      	uxth	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	bc80      	pop	{r7}
 800885a:	4770      	bx	lr

0800885c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008864:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008868:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008870:	b29a      	uxth	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	b29b      	uxth	r3, r3
 8008876:	43db      	mvns	r3, r3
 8008878:	b29b      	uxth	r3, r3
 800887a:	4013      	ands	r3, r2
 800887c:	b29a      	uxth	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	bc80      	pop	{r7}
 800888e:	4770      	bx	lr

08008890 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bc80      	pop	{r7}
 80088a6:	4770      	bx	lr

080088a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80088a8:	b084      	sub	sp, #16
 80088aa:	b480      	push	{r7}
 80088ac:	b083      	sub	sp, #12
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	f107 0014 	add.w	r0, r7, #20
 80088b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bc80      	pop	{r7}
 80088e4:	b004      	add	sp, #16
 80088e6:	4770      	bx	lr

080088e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b09b      	sub	sp, #108	; 0x6c
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b29b      	uxth	r3, r3
 8008906:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800890a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	78db      	ldrb	r3, [r3, #3]
 8008916:	2b03      	cmp	r3, #3
 8008918:	d81f      	bhi.n	800895a <USB_ActivateEndpoint+0x72>
 800891a:	a201      	add	r2, pc, #4	; (adr r2, 8008920 <USB_ActivateEndpoint+0x38>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	08008931 	.word	0x08008931
 8008924:	0800894d 	.word	0x0800894d
 8008928:	08008963 	.word	0x08008963
 800892c:	0800893f 	.word	0x0800893f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008930:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008938:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800893c:	e012      	b.n	8008964 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800893e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008942:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008946:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800894a:	e00b      	b.n	8008964 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800894c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008950:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008954:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008958:	e004      	b.n	8008964 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008960:	e000      	b.n	8008964 <USB_ActivateEndpoint+0x7c>
      break;
 8008962:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	441a      	add	r2, r3
 800896e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800897a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800897e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008982:	b29b      	uxth	r3, r3
 8008984:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899c:	b29a      	uxth	r2, r3
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	4313      	orrs	r3, r2
 80089a6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	441a      	add	r2, r3
 80089b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80089b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	7b1b      	ldrb	r3, [r3, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f040 8149 	bne.w	8008c68 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	785b      	ldrb	r3, [r3, #1]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 8084 	beq.w	8008ae8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	617b      	str	r3, [r7, #20]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	461a      	mov	r2, r3
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	4413      	add	r3, r2
 80089f2:	617b      	str	r3, [r7, #20]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	011a      	lsls	r2, r3, #4
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	88db      	ldrh	r3, [r3, #6]
 8008a08:	085b      	lsrs	r3, r3, #1
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	81fb      	strh	r3, [r7, #14]
 8008a22:	89fb      	ldrh	r3, [r7, #14]
 8008a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01b      	beq.n	8008a64 <USB_ActivateEndpoint+0x17c>
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a42:	81bb      	strh	r3, [r7, #12]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	441a      	add	r2, r3
 8008a4e:	89bb      	ldrh	r3, [r7, #12]
 8008a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	78db      	ldrb	r3, [r3, #3]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d020      	beq.n	8008aae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a82:	813b      	strh	r3, [r7, #8]
 8008a84:	893b      	ldrh	r3, [r7, #8]
 8008a86:	f083 0320 	eor.w	r3, r3, #32
 8008a8a:	813b      	strh	r3, [r7, #8]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	441a      	add	r2, r3
 8008a96:	893b      	ldrh	r3, [r7, #8]
 8008a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	8013      	strh	r3, [r2, #0]
 8008aac:	e27f      	b.n	8008fae <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	881b      	ldrh	r3, [r3, #0]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ac4:	817b      	strh	r3, [r7, #10]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	441a      	add	r2, r3
 8008ad0:	897b      	ldrh	r3, [r7, #10]
 8008ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	8013      	strh	r3, [r2, #0]
 8008ae6:	e262      	b.n	8008fae <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	461a      	mov	r2, r3
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	4413      	add	r3, r2
 8008afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	011a      	lsls	r2, r3, #4
 8008b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	88db      	ldrh	r3, [r3, #6]
 8008b10:	085b      	lsrs	r3, r3, #1
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	4413      	add	r3, r2
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	011a      	lsls	r2, r3, #4
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	4413      	add	r3, r2
 8008b3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b3e:	623b      	str	r3, [r7, #32]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d112      	bne.n	8008b6e <USB_ActivateEndpoint+0x286>
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	801a      	strh	r2, [r3, #0]
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	801a      	strh	r2, [r3, #0]
 8008b6c:	e02f      	b.n	8008bce <USB_ActivateEndpoint+0x2e6>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	2b3e      	cmp	r3, #62	; 0x3e
 8008b74:	d813      	bhi.n	8008b9e <USB_ActivateEndpoint+0x2b6>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	085b      	lsrs	r3, r3, #1
 8008b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <USB_ActivateEndpoint+0x2a8>
 8008b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	663b      	str	r3, [r7, #96]	; 0x60
 8008b90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	029b      	lsls	r3, r3, #10
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	801a      	strh	r2, [r3, #0]
 8008b9c:	e017      	b.n	8008bce <USB_ActivateEndpoint+0x2e6>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	095b      	lsrs	r3, r3, #5
 8008ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	f003 031f 	and.w	r3, r3, #31
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d102      	bne.n	8008bb8 <USB_ActivateEndpoint+0x2d0>
 8008bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	663b      	str	r3, [r7, #96]	; 0x60
 8008bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	029b      	lsls	r3, r3, #10
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	83fb      	strh	r3, [r7, #30]
 8008bdc:	8bfb      	ldrh	r3, [r7, #30]
 8008bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d01b      	beq.n	8008c1e <USB_ActivateEndpoint+0x336>
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfc:	83bb      	strh	r3, [r7, #28]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	441a      	add	r2, r3
 8008c08:	8bbb      	ldrh	r3, [r7, #28]
 8008c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c34:	837b      	strh	r3, [r7, #26]
 8008c36:	8b7b      	ldrh	r3, [r7, #26]
 8008c38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c3c:	837b      	strh	r3, [r7, #26]
 8008c3e:	8b7b      	ldrh	r3, [r7, #26]
 8008c40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c44:	837b      	strh	r3, [r7, #26]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	441a      	add	r2, r3
 8008c50:	8b7b      	ldrh	r3, [r7, #26]
 8008c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	8013      	strh	r3, [r2, #0]
 8008c66:	e1a2      	b.n	8008fae <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	441a      	add	r2, r3
 8008c8c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c98:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cb4:	4413      	add	r3, r2
 8008cb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	011a      	lsls	r2, r3, #4
 8008cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	891b      	ldrh	r3, [r3, #8]
 8008ccc:	085b      	lsrs	r3, r3, #1
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cd6:	801a      	strh	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	653b      	str	r3, [r7, #80]	; 0x50
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ce8:	4413      	add	r3, r2
 8008cea:	653b      	str	r3, [r7, #80]	; 0x50
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	011a      	lsls	r2, r3, #4
 8008cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	895b      	ldrh	r3, [r3, #10]
 8008d00:	085b      	lsrs	r3, r3, #1
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d0a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	785b      	ldrb	r3, [r3, #1]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f040 8091 	bne.w	8008e38 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008d24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d01b      	beq.n	8008d66 <USB_ActivateEndpoint+0x47e>
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d44:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	441a      	add	r2, r3
 8008d50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	873b      	strh	r3, [r7, #56]	; 0x38
 8008d74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d01b      	beq.n	8008db6 <USB_ActivateEndpoint+0x4ce>
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d94:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	441a      	add	r2, r3
 8008da0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dcc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008dce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008dd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008dd4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008dd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008dd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ddc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	441a      	add	r2, r3
 8008de8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e14:	867b      	strh	r3, [r7, #50]	; 0x32
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	441a      	add	r2, r3
 8008e20:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	8013      	strh	r3, [r2, #0]
 8008e36:	e0ba      	b.n	8008fae <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	881b      	ldrh	r3, [r3, #0]
 8008e44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008e48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d01d      	beq.n	8008e90 <USB_ActivateEndpoint+0x5a8>
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	881b      	ldrh	r3, [r3, #0]
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	441a      	add	r2, r3
 8008e78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008ea0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01d      	beq.n	8008ee8 <USB_ActivateEndpoint+0x600>
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	441a      	add	r2, r3
 8008ed0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ee0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	78db      	ldrb	r3, [r3, #3]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d024      	beq.n	8008f3a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008f0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008f0e:	f083 0320 	eor.w	r3, r3, #32
 8008f12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	441a      	add	r2, r3
 8008f20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	8013      	strh	r3, [r2, #0]
 8008f38:	e01d      	b.n	8008f76 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	441a      	add	r2, r3
 8008f5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	441a      	add	r2, r3
 8008f98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008fae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	376c      	adds	r7, #108	; 0x6c
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bc80      	pop	{r7}
 8008fba:	4770      	bx	lr

08008fbc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b08d      	sub	sp, #52	; 0x34
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	7b1b      	ldrb	r3, [r3, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f040 808e 	bne.w	80090ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d044      	beq.n	8009062 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	81bb      	strh	r3, [r7, #12]
 8008fe6:	89bb      	ldrh	r3, [r7, #12]
 8008fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d01b      	beq.n	8009028 <USB_DeactivateEndpoint+0x6c>
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009006:	817b      	strh	r3, [r7, #10]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	441a      	add	r2, r3
 8009012:	897b      	ldrh	r3, [r7, #10]
 8009014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800901c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009020:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009024:	b29b      	uxth	r3, r3
 8009026:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	881b      	ldrh	r3, [r3, #0]
 8009034:	b29b      	uxth	r3, r3
 8009036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800903a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800903e:	813b      	strh	r3, [r7, #8]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	441a      	add	r2, r3
 800904a:	893b      	ldrh	r3, [r7, #8]
 800904c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800905c:	b29b      	uxth	r3, r3
 800905e:	8013      	strh	r3, [r2, #0]
 8009060:	e192      	b.n	8009388 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	827b      	strh	r3, [r7, #18]
 8009070:	8a7b      	ldrh	r3, [r7, #18]
 8009072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d01b      	beq.n	80090b2 <USB_DeactivateEndpoint+0xf6>
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	b29b      	uxth	r3, r3
 8009088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800908c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009090:	823b      	strh	r3, [r7, #16]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	441a      	add	r2, r3
 800909c:	8a3b      	ldrh	r3, [r7, #16]
 800909e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4413      	add	r3, r2
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090c8:	81fb      	strh	r3, [r7, #14]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	441a      	add	r2, r3
 80090d4:	89fb      	ldrh	r3, [r7, #14]
 80090d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	8013      	strh	r3, [r2, #0]
 80090ea:	e14d      	b.n	8009388 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	785b      	ldrb	r3, [r3, #1]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f040 80a5 	bne.w	8009240 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	843b      	strh	r3, [r7, #32]
 8009104:	8c3b      	ldrh	r3, [r7, #32]
 8009106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d01b      	beq.n	8009146 <USB_DeactivateEndpoint+0x18a>
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4413      	add	r3, r2
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	b29b      	uxth	r3, r3
 800911c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009124:	83fb      	strh	r3, [r7, #30]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	441a      	add	r2, r3
 8009130:	8bfb      	ldrh	r3, [r7, #30]
 8009132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800913a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800913e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009142:	b29b      	uxth	r3, r3
 8009144:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	83bb      	strh	r3, [r7, #28]
 8009154:	8bbb      	ldrh	r3, [r7, #28]
 8009156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d01b      	beq.n	8009196 <USB_DeactivateEndpoint+0x1da>
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	b29b      	uxth	r3, r3
 800916c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009174:	837b      	strh	r3, [r7, #26]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	441a      	add	r2, r3
 8009180:	8b7b      	ldrh	r3, [r7, #26]
 8009182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800918a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800918e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009192:	b29b      	uxth	r3, r3
 8009194:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ac:	833b      	strh	r3, [r7, #24]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	441a      	add	r2, r3
 80091b8:	8b3b      	ldrh	r3, [r7, #24]
 80091ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e4:	82fb      	strh	r3, [r7, #22]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	441a      	add	r2, r3
 80091f0:	8afb      	ldrh	r3, [r7, #22]
 80091f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009202:	b29b      	uxth	r3, r3
 8009204:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	881b      	ldrh	r3, [r3, #0]
 8009212:	b29b      	uxth	r3, r3
 8009214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800921c:	82bb      	strh	r3, [r7, #20]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	441a      	add	r2, r3
 8009228:	8abb      	ldrh	r3, [r7, #20]
 800922a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800922e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800923a:	b29b      	uxth	r3, r3
 800923c:	8013      	strh	r3, [r2, #0]
 800923e:	e0a3      	b.n	8009388 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800924e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d01b      	beq.n	8009290 <USB_DeactivateEndpoint+0x2d4>
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	b29b      	uxth	r3, r3
 8009266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800926a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800926e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	441a      	add	r2, r3
 800927a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800927c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800928c:	b29b      	uxth	r3, r3
 800928e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	881b      	ldrh	r3, [r3, #0]
 800929c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800929e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80092a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d01b      	beq.n	80092e0 <USB_DeactivateEndpoint+0x324>
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092be:	853b      	strh	r3, [r7, #40]	; 0x28
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	441a      	add	r2, r3
 80092ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092dc:	b29b      	uxth	r3, r3
 80092de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	881b      	ldrh	r3, [r3, #0]
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	441a      	add	r2, r3
 8009302:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800930c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009314:	b29b      	uxth	r3, r3
 8009316:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	b29b      	uxth	r3, r3
 8009326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800932a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800932e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	441a      	add	r2, r3
 800933a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800933c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800934c:	b29b      	uxth	r3, r3
 800934e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	b29b      	uxth	r3, r3
 800935e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009366:	847b      	strh	r3, [r7, #34]	; 0x22
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	441a      	add	r2, r3
 8009372:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800937c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009384:	b29b      	uxth	r3, r3
 8009386:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3734      	adds	r7, #52	; 0x34
 800938e:	46bd      	mov	sp, r7
 8009390:	bc80      	pop	{r7}
 8009392:	4770      	bx	lr

08009394 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b0cc      	sub	sp, #304	; 0x130
 8009398:	af00      	add	r7, sp, #0
 800939a:	1d3b      	adds	r3, r7, #4
 800939c:	6018      	str	r0, [r3, #0]
 800939e:	463b      	mov	r3, r7
 80093a0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093a2:	463b      	mov	r3, r7
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	785b      	ldrb	r3, [r3, #1]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	f040 872e 	bne.w	800a20a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80093ae:	463b      	mov	r3, r7
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	699a      	ldr	r2, [r3, #24]
 80093b4:	463b      	mov	r3, r7
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d905      	bls.n	80093ca <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80093be:	463b      	mov	r3, r7
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80093c8:	e004      	b.n	80093d4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80093ca:	463b      	mov	r3, r7
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80093d4:	463b      	mov	r3, r7
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	7b1b      	ldrb	r3, [r3, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d134      	bne.n	8009448 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80093de:	463b      	mov	r3, r7
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6959      	ldr	r1, [r3, #20]
 80093e4:	463b      	mov	r3, r7
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	88da      	ldrh	r2, [r3, #6]
 80093ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	1d38      	adds	r0, r7, #4
 80093f2:	6800      	ldr	r0, [r0, #0]
 80093f4:	f001 fc03 	bl	800abfe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80093f8:	f107 0310 	add.w	r3, r7, #16
 80093fc:	1d3a      	adds	r2, r7, #4
 80093fe:	6812      	ldr	r2, [r2, #0]
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	1d3b      	adds	r3, r7, #4
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800940a:	b29b      	uxth	r3, r3
 800940c:	4619      	mov	r1, r3
 800940e:	f107 0310 	add.w	r3, r7, #16
 8009412:	f107 0210 	add.w	r2, r7, #16
 8009416:	6812      	ldr	r2, [r2, #0]
 8009418:	440a      	add	r2, r1
 800941a:	601a      	str	r2, [r3, #0]
 800941c:	463b      	mov	r3, r7
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	011a      	lsls	r2, r3, #4
 8009424:	f107 0310 	add.w	r3, r7, #16
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4413      	add	r3, r2
 800942c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009430:	f107 030c 	add.w	r3, r7, #12
 8009434:	601a      	str	r2, [r3, #0]
 8009436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800943a:	b29a      	uxth	r2, r3
 800943c:	f107 030c 	add.w	r3, r7, #12
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	801a      	strh	r2, [r3, #0]
 8009444:	f000 beac 	b.w	800a1a0 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009448:	463b      	mov	r3, r7
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	78db      	ldrb	r3, [r3, #3]
 800944e:	2b02      	cmp	r3, #2
 8009450:	f040 838c 	bne.w	8009b6c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009454:	463b      	mov	r3, r7
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6a1a      	ldr	r2, [r3, #32]
 800945a:	463b      	mov	r3, r7
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	429a      	cmp	r2, r3
 8009462:	f240 8330 	bls.w	8009ac6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009466:	1d3b      	adds	r3, r7, #4
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	463b      	mov	r3, r7
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	881b      	ldrh	r3, [r3, #0]
 8009476:	b29b      	uxth	r3, r3
 8009478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800947c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009480:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009484:	1d3b      	adds	r3, r7, #4
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	463b      	mov	r3, r7
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	441a      	add	r2, r3
 8009492:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800949a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800949e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80094a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80094aa:	463b      	mov	r3, r7
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6a1a      	ldr	r2, [r3, #32]
 80094b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094b4:	1ad2      	subs	r2, r2, r3
 80094b6:	463b      	mov	r3, r7
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80094bc:	1d3b      	adds	r3, r7, #4
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	463b      	mov	r3, r7
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 819e 	beq.w	8009814 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80094d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094dc:	1d3a      	adds	r2, r7, #4
 80094de:	6812      	ldr	r2, [r2, #0]
 80094e0:	601a      	str	r2, [r3, #0]
 80094e2:	463b      	mov	r3, r7
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	785b      	ldrb	r3, [r3, #1]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d17a      	bne.n	80095e2 <USB_EPStartXfer+0x24e>
 80094ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094f0:	1d3a      	adds	r2, r7, #4
 80094f2:	6812      	ldr	r2, [r2, #0]
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	1d3b      	adds	r3, r7, #4
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094fe:	b29b      	uxth	r3, r3
 8009500:	4619      	mov	r1, r3
 8009502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009506:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800950a:	6812      	ldr	r2, [r2, #0]
 800950c:	440a      	add	r2, r1
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	463b      	mov	r3, r7
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	011a      	lsls	r2, r3, #4
 8009518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4413      	add	r3, r2
 8009520:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d11a      	bne.n	8009568 <USB_EPStartXfer+0x1d4>
 8009532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	b29b      	uxth	r3, r3
 800953c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009540:	b29a      	uxth	r2, r3
 8009542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	801a      	strh	r2, [r3, #0]
 800954a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	b29b      	uxth	r3, r3
 8009554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800955c:	b29a      	uxth	r2, r3
 800955e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	801a      	strh	r2, [r3, #0]
 8009566:	e062      	b.n	800962e <USB_EPStartXfer+0x29a>
 8009568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800956c:	2b3e      	cmp	r3, #62	; 0x3e
 800956e:	d819      	bhi.n	80095a4 <USB_EPStartXfer+0x210>
 8009570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009574:	085b      	lsrs	r3, r3, #1
 8009576:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800957a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d004      	beq.n	8009590 <USB_EPStartXfer+0x1fc>
 8009586:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800958a:	3301      	adds	r3, #1
 800958c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009590:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009594:	b29b      	uxth	r3, r3
 8009596:	029b      	lsls	r3, r3, #10
 8009598:	b29a      	uxth	r2, r3
 800959a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	801a      	strh	r2, [r3, #0]
 80095a2:	e044      	b.n	800962e <USB_EPStartXfer+0x29a>
 80095a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a8:	095b      	lsrs	r3, r3, #5
 80095aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80095ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b2:	f003 031f 	and.w	r3, r3, #31
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d104      	bne.n	80095c4 <USB_EPStartXfer+0x230>
 80095ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095be:	3b01      	subs	r3, #1
 80095c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80095c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	029b      	lsls	r3, r3, #10
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	801a      	strh	r2, [r3, #0]
 80095e0:	e025      	b.n	800962e <USB_EPStartXfer+0x29a>
 80095e2:	463b      	mov	r3, r7
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	785b      	ldrb	r3, [r3, #1]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d120      	bne.n	800962e <USB_EPStartXfer+0x29a>
 80095ec:	1d3b      	adds	r3, r7, #4
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	4619      	mov	r1, r3
 80095f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009600:	6812      	ldr	r2, [r2, #0]
 8009602:	440a      	add	r2, r1
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	463b      	mov	r3, r7
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	011a      	lsls	r2, r3, #4
 800960e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4413      	add	r3, r2
 8009616:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800961a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009624:	b29a      	uxth	r2, r3
 8009626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800962e:	463b      	mov	r3, r7
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	895b      	ldrh	r3, [r3, #10]
 8009634:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009638:	463b      	mov	r3, r7
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6959      	ldr	r1, [r3, #20]
 800963e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009642:	b29b      	uxth	r3, r3
 8009644:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009648:	1d38      	adds	r0, r7, #4
 800964a:	6800      	ldr	r0, [r0, #0]
 800964c:	f001 fad7 	bl	800abfe <USB_WritePMA>
            ep->xfer_buff += len;
 8009650:	463b      	mov	r3, r7
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	695a      	ldr	r2, [r3, #20]
 8009656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800965a:	441a      	add	r2, r3
 800965c:	463b      	mov	r3, r7
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009662:	463b      	mov	r3, r7
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6a1a      	ldr	r2, [r3, #32]
 8009668:	463b      	mov	r3, r7
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	429a      	cmp	r2, r3
 8009670:	d909      	bls.n	8009686 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8009672:	463b      	mov	r3, r7
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6a1a      	ldr	r2, [r3, #32]
 8009678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800967c:	1ad2      	subs	r2, r2, r3
 800967e:	463b      	mov	r3, r7
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	621a      	str	r2, [r3, #32]
 8009684:	e008      	b.n	8009698 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8009686:	463b      	mov	r3, r7
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009690:	463b      	mov	r3, r7
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2200      	movs	r2, #0
 8009696:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009698:	463b      	mov	r3, r7
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	785b      	ldrb	r3, [r3, #1]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d17a      	bne.n	8009798 <USB_EPStartXfer+0x404>
 80096a2:	f107 0318 	add.w	r3, r7, #24
 80096a6:	1d3a      	adds	r2, r7, #4
 80096a8:	6812      	ldr	r2, [r2, #0]
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	1d3b      	adds	r3, r7, #4
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	4619      	mov	r1, r3
 80096b8:	f107 0318 	add.w	r3, r7, #24
 80096bc:	f107 0218 	add.w	r2, r7, #24
 80096c0:	6812      	ldr	r2, [r2, #0]
 80096c2:	440a      	add	r2, r1
 80096c4:	601a      	str	r2, [r3, #0]
 80096c6:	463b      	mov	r3, r7
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	011a      	lsls	r2, r3, #4
 80096ce:	f107 0318 	add.w	r3, r7, #24
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4413      	add	r3, r2
 80096d6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80096da:	f107 0314 	add.w	r3, r7, #20
 80096de:	601a      	str	r2, [r3, #0]
 80096e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d11a      	bne.n	800971e <USB_EPStartXfer+0x38a>
 80096e8:	f107 0314 	add.w	r3, r7, #20
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	f107 0314 	add.w	r3, r7, #20
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	801a      	strh	r2, [r3, #0]
 8009700:	f107 0314 	add.w	r3, r7, #20
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	881b      	ldrh	r3, [r3, #0]
 8009708:	b29b      	uxth	r3, r3
 800970a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800970e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009712:	b29a      	uxth	r2, r3
 8009714:	f107 0314 	add.w	r3, r7, #20
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	801a      	strh	r2, [r3, #0]
 800971c:	e067      	b.n	80097ee <USB_EPStartXfer+0x45a>
 800971e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009722:	2b3e      	cmp	r3, #62	; 0x3e
 8009724:	d819      	bhi.n	800975a <USB_EPStartXfer+0x3c6>
 8009726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800972a:	085b      	lsrs	r3, r3, #1
 800972c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	2b00      	cmp	r3, #0
 800973a:	d004      	beq.n	8009746 <USB_EPStartXfer+0x3b2>
 800973c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009740:	3301      	adds	r3, #1
 8009742:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009746:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800974a:	b29b      	uxth	r3, r3
 800974c:	029b      	lsls	r3, r3, #10
 800974e:	b29a      	uxth	r2, r3
 8009750:	f107 0314 	add.w	r3, r7, #20
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	801a      	strh	r2, [r3, #0]
 8009758:	e049      	b.n	80097ee <USB_EPStartXfer+0x45a>
 800975a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800975e:	095b      	lsrs	r3, r3, #5
 8009760:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009768:	f003 031f 	and.w	r3, r3, #31
 800976c:	2b00      	cmp	r3, #0
 800976e:	d104      	bne.n	800977a <USB_EPStartXfer+0x3e6>
 8009770:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009774:	3b01      	subs	r3, #1
 8009776:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800977a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800977e:	b29b      	uxth	r3, r3
 8009780:	029b      	lsls	r3, r3, #10
 8009782:	b29b      	uxth	r3, r3
 8009784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800978c:	b29a      	uxth	r2, r3
 800978e:	f107 0314 	add.w	r3, r7, #20
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	801a      	strh	r2, [r3, #0]
 8009796:	e02a      	b.n	80097ee <USB_EPStartXfer+0x45a>
 8009798:	463b      	mov	r3, r7
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	785b      	ldrb	r3, [r3, #1]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d125      	bne.n	80097ee <USB_EPStartXfer+0x45a>
 80097a2:	f107 0320 	add.w	r3, r7, #32
 80097a6:	1d3a      	adds	r2, r7, #4
 80097a8:	6812      	ldr	r2, [r2, #0]
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	1d3b      	adds	r3, r7, #4
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	4619      	mov	r1, r3
 80097b8:	f107 0320 	add.w	r3, r7, #32
 80097bc:	f107 0220 	add.w	r2, r7, #32
 80097c0:	6812      	ldr	r2, [r2, #0]
 80097c2:	440a      	add	r2, r1
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	463b      	mov	r3, r7
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	011a      	lsls	r2, r3, #4
 80097ce:	f107 0320 	add.w	r3, r7, #32
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4413      	add	r3, r2
 80097d6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80097da:	f107 031c 	add.w	r3, r7, #28
 80097de:	601a      	str	r2, [r3, #0]
 80097e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	f107 031c 	add.w	r3, r7, #28
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80097ee:	463b      	mov	r3, r7
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	891b      	ldrh	r3, [r3, #8]
 80097f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097f8:	463b      	mov	r3, r7
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6959      	ldr	r1, [r3, #20]
 80097fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009802:	b29b      	uxth	r3, r3
 8009804:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009808:	1d38      	adds	r0, r7, #4
 800980a:	6800      	ldr	r0, [r0, #0]
 800980c:	f001 f9f7 	bl	800abfe <USB_WritePMA>
 8009810:	f000 bcc6 	b.w	800a1a0 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009814:	463b      	mov	r3, r7
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	785b      	ldrb	r3, [r3, #1]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d164      	bne.n	80098e8 <USB_EPStartXfer+0x554>
 800981e:	1d3b      	adds	r3, r7, #4
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	64bb      	str	r3, [r7, #72]	; 0x48
 8009824:	1d3b      	adds	r3, r7, #4
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800982c:	b29b      	uxth	r3, r3
 800982e:	461a      	mov	r2, r3
 8009830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009832:	4413      	add	r3, r2
 8009834:	64bb      	str	r3, [r7, #72]	; 0x48
 8009836:	463b      	mov	r3, r7
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	011a      	lsls	r2, r3, #4
 800983e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009840:	4413      	add	r3, r2
 8009842:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009846:	647b      	str	r3, [r7, #68]	; 0x44
 8009848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800984c:	2b00      	cmp	r3, #0
 800984e:	d112      	bne.n	8009876 <USB_EPStartXfer+0x4e2>
 8009850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009852:	881b      	ldrh	r3, [r3, #0]
 8009854:	b29b      	uxth	r3, r3
 8009856:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800985a:	b29a      	uxth	r2, r3
 800985c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800985e:	801a      	strh	r2, [r3, #0]
 8009860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	b29b      	uxth	r3, r3
 8009866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800986a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800986e:	b29a      	uxth	r2, r3
 8009870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009872:	801a      	strh	r2, [r3, #0]
 8009874:	e057      	b.n	8009926 <USB_EPStartXfer+0x592>
 8009876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800987a:	2b3e      	cmp	r3, #62	; 0x3e
 800987c:	d817      	bhi.n	80098ae <USB_EPStartXfer+0x51a>
 800987e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009882:	085b      	lsrs	r3, r3, #1
 8009884:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	d004      	beq.n	800989e <USB_EPStartXfer+0x50a>
 8009894:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009898:	3301      	adds	r3, #1
 800989a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800989e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	029b      	lsls	r3, r3, #10
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098aa:	801a      	strh	r2, [r3, #0]
 80098ac:	e03b      	b.n	8009926 <USB_EPStartXfer+0x592>
 80098ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b2:	095b      	lsrs	r3, r3, #5
 80098b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80098b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098bc:	f003 031f 	and.w	r3, r3, #31
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d104      	bne.n	80098ce <USB_EPStartXfer+0x53a>
 80098c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80098c8:	3b01      	subs	r3, #1
 80098ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80098ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	029b      	lsls	r3, r3, #10
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e4:	801a      	strh	r2, [r3, #0]
 80098e6:	e01e      	b.n	8009926 <USB_EPStartXfer+0x592>
 80098e8:	463b      	mov	r3, r7
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d119      	bne.n	8009926 <USB_EPStartXfer+0x592>
 80098f2:	1d3b      	adds	r3, r7, #4
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	653b      	str	r3, [r7, #80]	; 0x50
 80098f8:	1d3b      	adds	r3, r7, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009900:	b29b      	uxth	r3, r3
 8009902:	461a      	mov	r2, r3
 8009904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009906:	4413      	add	r3, r2
 8009908:	653b      	str	r3, [r7, #80]	; 0x50
 800990a:	463b      	mov	r3, r7
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	011a      	lsls	r2, r3, #4
 8009912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009914:	4413      	add	r3, r2
 8009916:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800991a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800991c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009920:	b29a      	uxth	r2, r3
 8009922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009924:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009926:	463b      	mov	r3, r7
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	891b      	ldrh	r3, [r3, #8]
 800992c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009930:	463b      	mov	r3, r7
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6959      	ldr	r1, [r3, #20]
 8009936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800993a:	b29b      	uxth	r3, r3
 800993c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009940:	1d38      	adds	r0, r7, #4
 8009942:	6800      	ldr	r0, [r0, #0]
 8009944:	f001 f95b 	bl	800abfe <USB_WritePMA>
            ep->xfer_buff += len;
 8009948:	463b      	mov	r3, r7
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	695a      	ldr	r2, [r3, #20]
 800994e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009952:	441a      	add	r2, r3
 8009954:	463b      	mov	r3, r7
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800995a:	463b      	mov	r3, r7
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6a1a      	ldr	r2, [r3, #32]
 8009960:	463b      	mov	r3, r7
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	429a      	cmp	r2, r3
 8009968:	d909      	bls.n	800997e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800996a:	463b      	mov	r3, r7
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	6a1a      	ldr	r2, [r3, #32]
 8009970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009974:	1ad2      	subs	r2, r2, r3
 8009976:	463b      	mov	r3, r7
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	621a      	str	r2, [r3, #32]
 800997c:	e008      	b.n	8009990 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800997e:	463b      	mov	r3, r7
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6a1b      	ldr	r3, [r3, #32]
 8009984:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009988:	463b      	mov	r3, r7
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2200      	movs	r2, #0
 800998e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009990:	1d3b      	adds	r3, r7, #4
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	643b      	str	r3, [r7, #64]	; 0x40
 8009996:	463b      	mov	r3, r7
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	785b      	ldrb	r3, [r3, #1]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d164      	bne.n	8009a6a <USB_EPStartXfer+0x6d6>
 80099a0:	1d3b      	adds	r3, r7, #4
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80099a6:	1d3b      	adds	r3, r7, #4
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	461a      	mov	r2, r3
 80099b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b4:	4413      	add	r3, r2
 80099b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80099b8:	463b      	mov	r3, r7
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	011a      	lsls	r2, r3, #4
 80099c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c2:	4413      	add	r3, r2
 80099c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099c8:	637b      	str	r3, [r7, #52]	; 0x34
 80099ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d112      	bne.n	80099f8 <USB_EPStartXfer+0x664>
 80099d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099dc:	b29a      	uxth	r2, r3
 80099de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e0:	801a      	strh	r2, [r3, #0]
 80099e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f4:	801a      	strh	r2, [r3, #0]
 80099f6:	e054      	b.n	8009aa2 <USB_EPStartXfer+0x70e>
 80099f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099fc:	2b3e      	cmp	r3, #62	; 0x3e
 80099fe:	d817      	bhi.n	8009a30 <USB_EPStartXfer+0x69c>
 8009a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a04:	085b      	lsrs	r3, r3, #1
 8009a06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d004      	beq.n	8009a20 <USB_EPStartXfer+0x68c>
 8009a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	029b      	lsls	r3, r3, #10
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2c:	801a      	strh	r2, [r3, #0]
 8009a2e:	e038      	b.n	8009aa2 <USB_EPStartXfer+0x70e>
 8009a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a34:	095b      	lsrs	r3, r3, #5
 8009a36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a3e:	f003 031f 	and.w	r3, r3, #31
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d104      	bne.n	8009a50 <USB_EPStartXfer+0x6bc>
 8009a46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	029b      	lsls	r3, r3, #10
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a66:	801a      	strh	r2, [r3, #0]
 8009a68:	e01b      	b.n	8009aa2 <USB_EPStartXfer+0x70e>
 8009a6a:	463b      	mov	r3, r7
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	785b      	ldrb	r3, [r3, #1]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d116      	bne.n	8009aa2 <USB_EPStartXfer+0x70e>
 8009a74:	1d3b      	adds	r3, r7, #4
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	461a      	mov	r2, r3
 8009a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a82:	4413      	add	r3, r2
 8009a84:	643b      	str	r3, [r7, #64]	; 0x40
 8009a86:	463b      	mov	r3, r7
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	011a      	lsls	r2, r3, #4
 8009a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a90:	4413      	add	r3, r2
 8009a92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aa0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009aa2:	463b      	mov	r3, r7
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	895b      	ldrh	r3, [r3, #10]
 8009aa8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009aac:	463b      	mov	r3, r7
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6959      	ldr	r1, [r3, #20]
 8009ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009abc:	1d38      	adds	r0, r7, #4
 8009abe:	6800      	ldr	r0, [r0, #0]
 8009ac0:	f001 f89d 	bl	800abfe <USB_WritePMA>
 8009ac4:	e36c      	b.n	800a1a0 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009ac6:	463b      	mov	r3, r7
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6a1b      	ldr	r3, [r3, #32]
 8009acc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009ad0:	1d3b      	adds	r3, r7, #4
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	463b      	mov	r3, r7
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009aee:	1d3b      	adds	r3, r7, #4
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	463b      	mov	r3, r7
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	441a      	add	r2, r3
 8009afc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b14:	1d3b      	adds	r3, r7, #4
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b1a:	1d3b      	adds	r3, r7, #4
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	461a      	mov	r2, r3
 8009b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b28:	4413      	add	r3, r2
 8009b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b2c:	463b      	mov	r3, r7
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	011a      	lsls	r2, r3, #4
 8009b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b36:	4413      	add	r3, r2
 8009b38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009b48:	463b      	mov	r3, r7
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	891b      	ldrh	r3, [r3, #8]
 8009b4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b52:	463b      	mov	r3, r7
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6959      	ldr	r1, [r3, #20]
 8009b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009b62:	1d38      	adds	r0, r7, #4
 8009b64:	6800      	ldr	r0, [r0, #0]
 8009b66:	f001 f84a 	bl	800abfe <USB_WritePMA>
 8009b6a:	e319      	b.n	800a1a0 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009b6c:	1d3b      	adds	r3, r7, #4
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	463b      	mov	r3, r7
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b86:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009b8a:	1d3b      	adds	r3, r7, #4
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	463b      	mov	r3, r7
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	441a      	add	r2, r3
 8009b98:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ba4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009bb0:	463b      	mov	r3, r7
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6a1a      	ldr	r2, [r3, #32]
 8009bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bba:	1ad2      	subs	r2, r2, r3
 8009bbc:	463b      	mov	r3, r7
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009bc2:	1d3b      	adds	r3, r7, #4
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	463b      	mov	r3, r7
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 8162 	beq.w	8009ea2 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009bde:	1d3b      	adds	r3, r7, #4
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009be6:	463b      	mov	r3, r7
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	785b      	ldrb	r3, [r3, #1]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d164      	bne.n	8009cba <USB_EPStartXfer+0x926>
 8009bf0:	1d3b      	adds	r3, r7, #4
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bf6:	1d3b      	adds	r3, r7, #4
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	461a      	mov	r2, r3
 8009c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c04:	4413      	add	r3, r2
 8009c06:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c08:	463b      	mov	r3, r7
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	011a      	lsls	r2, r3, #4
 8009c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c12:	4413      	add	r3, r2
 8009c14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c18:	677b      	str	r3, [r7, #116]	; 0x74
 8009c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d112      	bne.n	8009c48 <USB_EPStartXfer+0x8b4>
 8009c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c30:	801a      	strh	r2, [r3, #0]
 8009c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c34:	881b      	ldrh	r3, [r3, #0]
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c44:	801a      	strh	r2, [r3, #0]
 8009c46:	e057      	b.n	8009cf8 <USB_EPStartXfer+0x964>
 8009c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c4c:	2b3e      	cmp	r3, #62	; 0x3e
 8009c4e:	d817      	bhi.n	8009c80 <USB_EPStartXfer+0x8ec>
 8009c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c54:	085b      	lsrs	r3, r3, #1
 8009c56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d004      	beq.n	8009c70 <USB_EPStartXfer+0x8dc>
 8009c66:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009c70:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	029b      	lsls	r3, r3, #10
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c7c:	801a      	strh	r2, [r3, #0]
 8009c7e:	e03b      	b.n	8009cf8 <USB_EPStartXfer+0x964>
 8009c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c84:	095b      	lsrs	r3, r3, #5
 8009c86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c8e:	f003 031f 	and.w	r3, r3, #31
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d104      	bne.n	8009ca0 <USB_EPStartXfer+0x90c>
 8009c96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009ca0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	029b      	lsls	r3, r3, #10
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	e01e      	b.n	8009cf8 <USB_EPStartXfer+0x964>
 8009cba:	463b      	mov	r3, r7
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	785b      	ldrb	r3, [r3, #1]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d119      	bne.n	8009cf8 <USB_EPStartXfer+0x964>
 8009cc4:	1d3b      	adds	r3, r7, #4
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009cda:	463b      	mov	r3, r7
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	011a      	lsls	r2, r3, #4
 8009ce2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009cec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009cf6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009cf8:	463b      	mov	r3, r7
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	895b      	ldrh	r3, [r3, #10]
 8009cfe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d02:	463b      	mov	r3, r7
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6959      	ldr	r1, [r3, #20]
 8009d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009d12:	1d38      	adds	r0, r7, #4
 8009d14:	6800      	ldr	r0, [r0, #0]
 8009d16:	f000 ff72 	bl	800abfe <USB_WritePMA>
          ep->xfer_buff += len;
 8009d1a:	463b      	mov	r3, r7
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695a      	ldr	r2, [r3, #20]
 8009d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d24:	441a      	add	r2, r3
 8009d26:	463b      	mov	r3, r7
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009d2c:	463b      	mov	r3, r7
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6a1a      	ldr	r2, [r3, #32]
 8009d32:	463b      	mov	r3, r7
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d909      	bls.n	8009d50 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8009d3c:	463b      	mov	r3, r7
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6a1a      	ldr	r2, [r3, #32]
 8009d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d46:	1ad2      	subs	r2, r2, r3
 8009d48:	463b      	mov	r3, r7
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	621a      	str	r2, [r3, #32]
 8009d4e:	e008      	b.n	8009d62 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8009d50:	463b      	mov	r3, r7
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009d5a:	463b      	mov	r3, r7
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 821a 	beq.w	800a1a0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d6c:	463b      	mov	r3, r7
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	785b      	ldrb	r3, [r3, #1]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d164      	bne.n	8009e40 <USB_EPStartXfer+0xaac>
 8009d76:	1d3b      	adds	r3, r7, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d7c:	1d3b      	adds	r3, r7, #4
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	461a      	mov	r2, r3
 8009d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d8a:	4413      	add	r3, r2
 8009d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d8e:	463b      	mov	r3, r7
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	011a      	lsls	r2, r3, #4
 8009d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d98:	4413      	add	r3, r2
 8009d9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d9e:	667b      	str	r3, [r7, #100]	; 0x64
 8009da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d112      	bne.n	8009dce <USB_EPStartXfer+0xa3a>
 8009da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009db6:	801a      	strh	r2, [r3, #0]
 8009db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dca:	801a      	strh	r2, [r3, #0]
 8009dcc:	e057      	b.n	8009e7e <USB_EPStartXfer+0xaea>
 8009dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dd2:	2b3e      	cmp	r3, #62	; 0x3e
 8009dd4:	d817      	bhi.n	8009e06 <USB_EPStartXfer+0xa72>
 8009dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dda:	085b      	lsrs	r3, r3, #1
 8009ddc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d004      	beq.n	8009df6 <USB_EPStartXfer+0xa62>
 8009dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df0:	3301      	adds	r3, #1
 8009df2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	029b      	lsls	r3, r3, #10
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e02:	801a      	strh	r2, [r3, #0]
 8009e04:	e03b      	b.n	8009e7e <USB_EPStartXfer+0xaea>
 8009e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e0a:	095b      	lsrs	r3, r3, #5
 8009e0c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e14:	f003 031f 	and.w	r3, r3, #31
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d104      	bne.n	8009e26 <USB_EPStartXfer+0xa92>
 8009e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e20:	3b01      	subs	r3, #1
 8009e22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	029b      	lsls	r3, r3, #10
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e3c:	801a      	strh	r2, [r3, #0]
 8009e3e:	e01e      	b.n	8009e7e <USB_EPStartXfer+0xaea>
 8009e40:	463b      	mov	r3, r7
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	785b      	ldrb	r3, [r3, #1]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d119      	bne.n	8009e7e <USB_EPStartXfer+0xaea>
 8009e4a:	1d3b      	adds	r3, r7, #4
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8009e50:	1d3b      	adds	r3, r7, #4
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e5e:	4413      	add	r3, r2
 8009e60:	673b      	str	r3, [r7, #112]	; 0x70
 8009e62:	463b      	mov	r3, r7
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	011a      	lsls	r2, r3, #4
 8009e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009e7e:	463b      	mov	r3, r7
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	891b      	ldrh	r3, [r3, #8]
 8009e84:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e88:	463b      	mov	r3, r7
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6959      	ldr	r1, [r3, #20]
 8009e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009e98:	1d38      	adds	r0, r7, #4
 8009e9a:	6800      	ldr	r0, [r0, #0]
 8009e9c:	f000 feaf 	bl	800abfe <USB_WritePMA>
 8009ea0:	e17e      	b.n	800a1a0 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ea2:	463b      	mov	r3, r7
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	785b      	ldrb	r3, [r3, #1]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d16f      	bne.n	8009f8c <USB_EPStartXfer+0xbf8>
 8009eac:	1d3b      	adds	r3, r7, #4
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009eb4:	1d3b      	adds	r3, r7, #4
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009eca:	463b      	mov	r3, r7
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	011a      	lsls	r2, r3, #4
 8009ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009edc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d116      	bne.n	8009f16 <USB_EPStartXfer+0xb82>
 8009ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009efa:	801a      	strh	r2, [r3, #0]
 8009efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f00:	881b      	ldrh	r3, [r3, #0]
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f12:	801a      	strh	r2, [r3, #0]
 8009f14:	e05f      	b.n	8009fd6 <USB_EPStartXfer+0xc42>
 8009f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8009f1c:	d818      	bhi.n	8009f50 <USB_EPStartXfer+0xbbc>
 8009f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f22:	085b      	lsrs	r3, r3, #1
 8009f24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d004      	beq.n	8009f3e <USB_EPStartXfer+0xbaa>
 8009f34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009f38:	3301      	adds	r3, #1
 8009f3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009f3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	029b      	lsls	r3, r3, #10
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f4c:	801a      	strh	r2, [r3, #0]
 8009f4e:	e042      	b.n	8009fd6 <USB_EPStartXfer+0xc42>
 8009f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f54:	095b      	lsrs	r3, r3, #5
 8009f56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f5e:	f003 031f 	and.w	r3, r3, #31
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d104      	bne.n	8009f70 <USB_EPStartXfer+0xbdc>
 8009f66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009f70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	029b      	lsls	r3, r3, #10
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f88:	801a      	strh	r2, [r3, #0]
 8009f8a:	e024      	b.n	8009fd6 <USB_EPStartXfer+0xc42>
 8009f8c:	463b      	mov	r3, r7
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	785b      	ldrb	r3, [r3, #1]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d11f      	bne.n	8009fd6 <USB_EPStartXfer+0xc42>
 8009f96:	1d3b      	adds	r3, r7, #4
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f9e:	1d3b      	adds	r3, r7, #4
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	461a      	mov	r2, r3
 8009faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009fae:	4413      	add	r3, r2
 8009fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009fb4:	463b      	mov	r3, r7
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	011a      	lsls	r2, r3, #4
 8009fbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fd4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009fd6:	463b      	mov	r3, r7
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	891b      	ldrh	r3, [r3, #8]
 8009fdc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fe0:	463b      	mov	r3, r7
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6959      	ldr	r1, [r3, #20]
 8009fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009ff0:	1d38      	adds	r0, r7, #4
 8009ff2:	6800      	ldr	r0, [r0, #0]
 8009ff4:	f000 fe03 	bl	800abfe <USB_WritePMA>
          ep->xfer_buff += len;
 8009ff8:	463b      	mov	r3, r7
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	695a      	ldr	r2, [r3, #20]
 8009ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a002:	441a      	add	r2, r3
 800a004:	463b      	mov	r3, r7
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800a00a:	463b      	mov	r3, r7
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6a1a      	ldr	r2, [r3, #32]
 800a010:	463b      	mov	r3, r7
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	429a      	cmp	r2, r3
 800a018:	d909      	bls.n	800a02e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800a01a:	463b      	mov	r3, r7
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6a1a      	ldr	r2, [r3, #32]
 800a020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a024:	1ad2      	subs	r2, r2, r3
 800a026:	463b      	mov	r3, r7
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	621a      	str	r2, [r3, #32]
 800a02c:	e008      	b.n	800a040 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800a02e:	463b      	mov	r3, r7
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800a038:	463b      	mov	r3, r7
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2200      	movs	r2, #0
 800a03e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800a040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a044:	2b00      	cmp	r3, #0
 800a046:	f000 80ab 	beq.w	800a1a0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a04a:	1d3b      	adds	r3, r7, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a052:	463b      	mov	r3, r7
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	785b      	ldrb	r3, [r3, #1]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d16f      	bne.n	800a13c <USB_EPStartXfer+0xda8>
 800a05c:	1d3b      	adds	r3, r7, #4
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a064:	1d3b      	adds	r3, r7, #4
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	461a      	mov	r2, r3
 800a070:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a074:	4413      	add	r3, r2
 800a076:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a07a:	463b      	mov	r3, r7
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	011a      	lsls	r2, r3, #4
 800a082:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a086:	4413      	add	r3, r2
 800a088:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a08c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a094:	2b00      	cmp	r3, #0
 800a096:	d116      	bne.n	800a0c6 <USB_EPStartXfer+0xd32>
 800a098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0aa:	801a      	strh	r2, [r3, #0]
 800a0ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0c2:	801a      	strh	r2, [r3, #0]
 800a0c4:	e05b      	b.n	800a17e <USB_EPStartXfer+0xdea>
 800a0c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0ca:	2b3e      	cmp	r3, #62	; 0x3e
 800a0cc:	d818      	bhi.n	800a100 <USB_EPStartXfer+0xd6c>
 800a0ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0d2:	085b      	lsrs	r3, r3, #1
 800a0d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a0d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d004      	beq.n	800a0ee <USB_EPStartXfer+0xd5a>
 800a0e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a0ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	029b      	lsls	r3, r3, #10
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0fc:	801a      	strh	r2, [r3, #0]
 800a0fe:	e03e      	b.n	800a17e <USB_EPStartXfer+0xdea>
 800a100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a104:	095b      	lsrs	r3, r3, #5
 800a106:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a10a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a10e:	f003 031f 	and.w	r3, r3, #31
 800a112:	2b00      	cmp	r3, #0
 800a114:	d104      	bne.n	800a120 <USB_EPStartXfer+0xd8c>
 800a116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a11a:	3b01      	subs	r3, #1
 800a11c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a124:	b29b      	uxth	r3, r3
 800a126:	029b      	lsls	r3, r3, #10
 800a128:	b29b      	uxth	r3, r3
 800a12a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a12e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a132:	b29a      	uxth	r2, r3
 800a134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a138:	801a      	strh	r2, [r3, #0]
 800a13a:	e020      	b.n	800a17e <USB_EPStartXfer+0xdea>
 800a13c:	463b      	mov	r3, r7
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	785b      	ldrb	r3, [r3, #1]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d11b      	bne.n	800a17e <USB_EPStartXfer+0xdea>
 800a146:	1d3b      	adds	r3, r7, #4
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a14e:	b29b      	uxth	r3, r3
 800a150:	461a      	mov	r2, r3
 800a152:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a156:	4413      	add	r3, r2
 800a158:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a15c:	463b      	mov	r3, r7
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	011a      	lsls	r2, r3, #4
 800a164:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a168:	4413      	add	r3, r2
 800a16a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a16e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a176:	b29a      	uxth	r2, r3
 800a178:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a17c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a17e:	463b      	mov	r3, r7
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	895b      	ldrh	r3, [r3, #10]
 800a184:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a188:	463b      	mov	r3, r7
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6959      	ldr	r1, [r3, #20]
 800a18e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a192:	b29b      	uxth	r3, r3
 800a194:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a198:	1d38      	adds	r0, r7, #4
 800a19a:	6800      	ldr	r0, [r0, #0]
 800a19c:	f000 fd2f 	bl	800abfe <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a1a0:	1d3b      	adds	r3, r7, #4
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	463b      	mov	r3, r7
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	f107 020a 	add.w	r2, r7, #10
 800a1b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1be:	8013      	strh	r3, [r2, #0]
 800a1c0:	f107 030a 	add.w	r3, r7, #10
 800a1c4:	f107 020a 	add.w	r2, r7, #10
 800a1c8:	8812      	ldrh	r2, [r2, #0]
 800a1ca:	f082 0210 	eor.w	r2, r2, #16
 800a1ce:	801a      	strh	r2, [r3, #0]
 800a1d0:	f107 030a 	add.w	r3, r7, #10
 800a1d4:	f107 020a 	add.w	r2, r7, #10
 800a1d8:	8812      	ldrh	r2, [r2, #0]
 800a1da:	f082 0220 	eor.w	r2, r2, #32
 800a1de:	801a      	strh	r2, [r3, #0]
 800a1e0:	1d3b      	adds	r3, r7, #4
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	463b      	mov	r3, r7
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	441a      	add	r2, r3
 800a1ee:	f107 030a 	add.w	r3, r7, #10
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a204:	b29b      	uxth	r3, r3
 800a206:	8013      	strh	r3, [r2, #0]
 800a208:	e3b5      	b.n	800a976 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a20a:	463b      	mov	r3, r7
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	7b1b      	ldrb	r3, [r3, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	f040 8090 	bne.w	800a336 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a216:	463b      	mov	r3, r7
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	699a      	ldr	r2, [r3, #24]
 800a21c:	463b      	mov	r3, r7
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	429a      	cmp	r2, r3
 800a224:	d90e      	bls.n	800a244 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800a226:	463b      	mov	r3, r7
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800a230:	463b      	mov	r3, r7
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699a      	ldr	r2, [r3, #24]
 800a236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a23a:	1ad2      	subs	r2, r2, r3
 800a23c:	463b      	mov	r3, r7
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	619a      	str	r2, [r3, #24]
 800a242:	e008      	b.n	800a256 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800a244:	463b      	mov	r3, r7
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800a24e:	463b      	mov	r3, r7
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2200      	movs	r2, #0
 800a254:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a256:	1d3b      	adds	r3, r7, #4
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a25e:	1d3b      	adds	r3, r7, #4
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a266:	b29b      	uxth	r3, r3
 800a268:	461a      	mov	r2, r3
 800a26a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a26e:	4413      	add	r3, r2
 800a270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a274:	463b      	mov	r3, r7
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	011a      	lsls	r2, r3, #4
 800a27c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a280:	4413      	add	r3, r2
 800a282:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a286:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a28a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d116      	bne.n	800a2c0 <USB_EPStartXfer+0xf2c>
 800a292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	b29b      	uxth	r3, r3
 800a29a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2a4:	801a      	strh	r2, [r3, #0]
 800a2a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2bc:	801a      	strh	r2, [r3, #0]
 800a2be:	e32c      	b.n	800a91a <USB_EPStartXfer+0x1586>
 800a2c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2c4:	2b3e      	cmp	r3, #62	; 0x3e
 800a2c6:	d818      	bhi.n	800a2fa <USB_EPStartXfer+0xf66>
 800a2c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2cc:	085b      	lsrs	r3, r3, #1
 800a2ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a2d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2d6:	f003 0301 	and.w	r3, r3, #1
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d004      	beq.n	800a2e8 <USB_EPStartXfer+0xf54>
 800a2de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a2e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	029b      	lsls	r3, r3, #10
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2f6:	801a      	strh	r2, [r3, #0]
 800a2f8:	e30f      	b.n	800a91a <USB_EPStartXfer+0x1586>
 800a2fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2fe:	095b      	lsrs	r3, r3, #5
 800a300:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a308:	f003 031f 	and.w	r3, r3, #31
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d104      	bne.n	800a31a <USB_EPStartXfer+0xf86>
 800a310:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a314:	3b01      	subs	r3, #1
 800a316:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a31a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a31e:	b29b      	uxth	r3, r3
 800a320:	029b      	lsls	r3, r3, #10
 800a322:	b29b      	uxth	r3, r3
 800a324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a332:	801a      	strh	r2, [r3, #0]
 800a334:	e2f1      	b.n	800a91a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a336:	463b      	mov	r3, r7
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	78db      	ldrb	r3, [r3, #3]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	f040 818f 	bne.w	800a660 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a342:	463b      	mov	r3, r7
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	785b      	ldrb	r3, [r3, #1]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d175      	bne.n	800a438 <USB_EPStartXfer+0x10a4>
 800a34c:	1d3b      	adds	r3, r7, #4
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a354:	1d3b      	adds	r3, r7, #4
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	461a      	mov	r2, r3
 800a360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a364:	4413      	add	r3, r2
 800a366:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a36a:	463b      	mov	r3, r7
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	011a      	lsls	r2, r3, #4
 800a372:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a376:	4413      	add	r3, r2
 800a378:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a37c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a380:	463b      	mov	r3, r7
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d116      	bne.n	800a3b8 <USB_EPStartXfer+0x1024>
 800a38a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	b29b      	uxth	r3, r3
 800a392:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a396:	b29a      	uxth	r2, r3
 800a398:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a39c:	801a      	strh	r2, [r3, #0]
 800a39e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3a2:	881b      	ldrh	r3, [r3, #0]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3b4:	801a      	strh	r2, [r3, #0]
 800a3b6:	e065      	b.n	800a484 <USB_EPStartXfer+0x10f0>
 800a3b8:	463b      	mov	r3, r7
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	2b3e      	cmp	r3, #62	; 0x3e
 800a3c0:	d81a      	bhi.n	800a3f8 <USB_EPStartXfer+0x1064>
 800a3c2:	463b      	mov	r3, r7
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	085b      	lsrs	r3, r3, #1
 800a3ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a3ce:	463b      	mov	r3, r7
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	f003 0301 	and.w	r3, r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d004      	beq.n	800a3e6 <USB_EPStartXfer+0x1052>
 800a3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	029b      	lsls	r3, r3, #10
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3f4:	801a      	strh	r2, [r3, #0]
 800a3f6:	e045      	b.n	800a484 <USB_EPStartXfer+0x10f0>
 800a3f8:	463b      	mov	r3, r7
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	095b      	lsrs	r3, r3, #5
 800a400:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a404:	463b      	mov	r3, r7
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	f003 031f 	and.w	r3, r3, #31
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d104      	bne.n	800a41c <USB_EPStartXfer+0x1088>
 800a412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a416:	3b01      	subs	r3, #1
 800a418:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a420:	b29b      	uxth	r3, r3
 800a422:	029b      	lsls	r3, r3, #10
 800a424:	b29b      	uxth	r3, r3
 800a426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a42a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a42e:	b29a      	uxth	r2, r3
 800a430:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a434:	801a      	strh	r2, [r3, #0]
 800a436:	e025      	b.n	800a484 <USB_EPStartXfer+0x10f0>
 800a438:	463b      	mov	r3, r7
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	785b      	ldrb	r3, [r3, #1]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d120      	bne.n	800a484 <USB_EPStartXfer+0x10f0>
 800a442:	1d3b      	adds	r3, r7, #4
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a44a:	1d3b      	adds	r3, r7, #4
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a452:	b29b      	uxth	r3, r3
 800a454:	461a      	mov	r2, r3
 800a456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a45a:	4413      	add	r3, r2
 800a45c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a460:	463b      	mov	r3, r7
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	011a      	lsls	r2, r3, #4
 800a468:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a46c:	4413      	add	r3, r2
 800a46e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a472:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a476:	463b      	mov	r3, r7
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a482:	801a      	strh	r2, [r3, #0]
 800a484:	1d3b      	adds	r3, r7, #4
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a48c:	463b      	mov	r3, r7
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	785b      	ldrb	r3, [r3, #1]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d175      	bne.n	800a582 <USB_EPStartXfer+0x11ee>
 800a496:	1d3b      	adds	r3, r7, #4
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a49e:	1d3b      	adds	r3, r7, #4
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a4b4:	463b      	mov	r3, r7
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	011a      	lsls	r2, r3, #4
 800a4bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4ca:	463b      	mov	r3, r7
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d116      	bne.n	800a502 <USB_EPStartXfer+0x116e>
 800a4d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4e6:	801a      	strh	r2, [r3, #0]
 800a4e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4fe:	801a      	strh	r2, [r3, #0]
 800a500:	e061      	b.n	800a5c6 <USB_EPStartXfer+0x1232>
 800a502:	463b      	mov	r3, r7
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	2b3e      	cmp	r3, #62	; 0x3e
 800a50a:	d81a      	bhi.n	800a542 <USB_EPStartXfer+0x11ae>
 800a50c:	463b      	mov	r3, r7
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	085b      	lsrs	r3, r3, #1
 800a514:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a518:	463b      	mov	r3, r7
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	2b00      	cmp	r3, #0
 800a524:	d004      	beq.n	800a530 <USB_EPStartXfer+0x119c>
 800a526:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a52a:	3301      	adds	r3, #1
 800a52c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a530:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a534:	b29b      	uxth	r3, r3
 800a536:	029b      	lsls	r3, r3, #10
 800a538:	b29a      	uxth	r2, r3
 800a53a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a53e:	801a      	strh	r2, [r3, #0]
 800a540:	e041      	b.n	800a5c6 <USB_EPStartXfer+0x1232>
 800a542:	463b      	mov	r3, r7
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	095b      	lsrs	r3, r3, #5
 800a54a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a54e:	463b      	mov	r3, r7
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	f003 031f 	and.w	r3, r3, #31
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d104      	bne.n	800a566 <USB_EPStartXfer+0x11d2>
 800a55c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a560:	3b01      	subs	r3, #1
 800a562:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a566:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	029b      	lsls	r3, r3, #10
 800a56e:	b29b      	uxth	r3, r3
 800a570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a578:	b29a      	uxth	r2, r3
 800a57a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a57e:	801a      	strh	r2, [r3, #0]
 800a580:	e021      	b.n	800a5c6 <USB_EPStartXfer+0x1232>
 800a582:	463b      	mov	r3, r7
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	785b      	ldrb	r3, [r3, #1]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d11c      	bne.n	800a5c6 <USB_EPStartXfer+0x1232>
 800a58c:	1d3b      	adds	r3, r7, #4
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a594:	b29b      	uxth	r3, r3
 800a596:	461a      	mov	r2, r3
 800a598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a59c:	4413      	add	r3, r2
 800a59e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a5a2:	463b      	mov	r3, r7
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	011a      	lsls	r2, r3, #4
 800a5aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a5b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5b8:	463b      	mov	r3, r7
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a5c4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a5c6:	463b      	mov	r3, r7
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	69db      	ldr	r3, [r3, #28]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f000 81a4 	beq.w	800a91a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a5d2:	1d3b      	adds	r3, r7, #4
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	463b      	mov	r3, r7
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4413      	add	r3, r2
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5e6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d005      	beq.n	800a5fe <USB_EPStartXfer+0x126a>
 800a5f2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10d      	bne.n	800a61a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5fe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a606:	2b00      	cmp	r3, #0
 800a608:	f040 8187 	bne.w	800a91a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a60c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a614:	2b00      	cmp	r3, #0
 800a616:	f040 8180 	bne.w	800a91a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a61a:	1d3b      	adds	r3, r7, #4
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	463b      	mov	r3, r7
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	881b      	ldrh	r3, [r3, #0]
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a634:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a638:	1d3b      	adds	r3, r7, #4
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	463b      	mov	r3, r7
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	441a      	add	r2, r3
 800a646:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a64a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a64e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a656:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	8013      	strh	r3, [r2, #0]
 800a65e:	e15c      	b.n	800a91a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a660:	463b      	mov	r3, r7
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	78db      	ldrb	r3, [r3, #3]
 800a666:	2b01      	cmp	r3, #1
 800a668:	f040 8155 	bne.w	800a916 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a66c:	463b      	mov	r3, r7
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	699a      	ldr	r2, [r3, #24]
 800a672:	463b      	mov	r3, r7
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d90e      	bls.n	800a69a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800a67c:	463b      	mov	r3, r7
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a686:	463b      	mov	r3, r7
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	699a      	ldr	r2, [r3, #24]
 800a68c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a690:	1ad2      	subs	r2, r2, r3
 800a692:	463b      	mov	r3, r7
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	619a      	str	r2, [r3, #24]
 800a698:	e008      	b.n	800a6ac <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800a69a:	463b      	mov	r3, r7
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a6a4:	463b      	mov	r3, r7
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a6ac:	463b      	mov	r3, r7
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	785b      	ldrb	r3, [r3, #1]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d16f      	bne.n	800a796 <USB_EPStartXfer+0x1402>
 800a6b6:	1d3b      	adds	r3, r7, #4
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a6be:	1d3b      	adds	r3, r7, #4
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a6d4:	463b      	mov	r3, r7
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	011a      	lsls	r2, r3, #4
 800a6dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a6e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a6ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d116      	bne.n	800a720 <USB_EPStartXfer+0x138c>
 800a6f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6f6:	881b      	ldrh	r3, [r3, #0]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a704:	801a      	strh	r2, [r3, #0]
 800a706:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a716:	b29a      	uxth	r2, r3
 800a718:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a71c:	801a      	strh	r2, [r3, #0]
 800a71e:	e05f      	b.n	800a7e0 <USB_EPStartXfer+0x144c>
 800a720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a724:	2b3e      	cmp	r3, #62	; 0x3e
 800a726:	d818      	bhi.n	800a75a <USB_EPStartXfer+0x13c6>
 800a728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a72c:	085b      	lsrs	r3, r3, #1
 800a72e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d004      	beq.n	800a748 <USB_EPStartXfer+0x13b4>
 800a73e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a742:	3301      	adds	r3, #1
 800a744:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	029b      	lsls	r3, r3, #10
 800a750:	b29a      	uxth	r2, r3
 800a752:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a756:	801a      	strh	r2, [r3, #0]
 800a758:	e042      	b.n	800a7e0 <USB_EPStartXfer+0x144c>
 800a75a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a75e:	095b      	lsrs	r3, r3, #5
 800a760:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a768:	f003 031f 	and.w	r3, r3, #31
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d104      	bne.n	800a77a <USB_EPStartXfer+0x13e6>
 800a770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a774:	3b01      	subs	r3, #1
 800a776:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a77a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a77e:	b29b      	uxth	r3, r3
 800a780:	029b      	lsls	r3, r3, #10
 800a782:	b29b      	uxth	r3, r3
 800a784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a792:	801a      	strh	r2, [r3, #0]
 800a794:	e024      	b.n	800a7e0 <USB_EPStartXfer+0x144c>
 800a796:	463b      	mov	r3, r7
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	785b      	ldrb	r3, [r3, #1]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d11f      	bne.n	800a7e0 <USB_EPStartXfer+0x144c>
 800a7a0:	1d3b      	adds	r3, r7, #4
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7a8:	1d3b      	adds	r3, r7, #4
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b8:	4413      	add	r3, r2
 800a7ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7be:	463b      	mov	r3, r7
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	011a      	lsls	r2, r3, #4
 800a7c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a7d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a7d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a7de:	801a      	strh	r2, [r3, #0]
 800a7e0:	1d3b      	adds	r3, r7, #4
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a7e8:	463b      	mov	r3, r7
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	785b      	ldrb	r3, [r3, #1]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d16f      	bne.n	800a8d2 <USB_EPStartXfer+0x153e>
 800a7f2:	1d3b      	adds	r3, r7, #4
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a7fa:	1d3b      	adds	r3, r7, #4
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a802:	b29b      	uxth	r3, r3
 800a804:	461a      	mov	r2, r3
 800a806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a80a:	4413      	add	r3, r2
 800a80c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a810:	463b      	mov	r3, r7
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	011a      	lsls	r2, r3, #4
 800a818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a81c:	4413      	add	r3, r2
 800a81e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a822:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d116      	bne.n	800a85c <USB_EPStartXfer+0x14c8>
 800a82e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	b29b      	uxth	r3, r3
 800a836:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a840:	801a      	strh	r2, [r3, #0]
 800a842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	b29b      	uxth	r3, r3
 800a84a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a84e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a852:	b29a      	uxth	r2, r3
 800a854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a858:	801a      	strh	r2, [r3, #0]
 800a85a:	e05e      	b.n	800a91a <USB_EPStartXfer+0x1586>
 800a85c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a860:	2b3e      	cmp	r3, #62	; 0x3e
 800a862:	d818      	bhi.n	800a896 <USB_EPStartXfer+0x1502>
 800a864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a868:	085b      	lsrs	r3, r3, #1
 800a86a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a86e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	2b00      	cmp	r3, #0
 800a878:	d004      	beq.n	800a884 <USB_EPStartXfer+0x14f0>
 800a87a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a87e:	3301      	adds	r3, #1
 800a880:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a884:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a888:	b29b      	uxth	r3, r3
 800a88a:	029b      	lsls	r3, r3, #10
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a892:	801a      	strh	r2, [r3, #0]
 800a894:	e041      	b.n	800a91a <USB_EPStartXfer+0x1586>
 800a896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a89a:	095b      	lsrs	r3, r3, #5
 800a89c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8a4:	f003 031f 	and.w	r3, r3, #31
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d104      	bne.n	800a8b6 <USB_EPStartXfer+0x1522>
 800a8ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	029b      	lsls	r3, r3, #10
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8ce:	801a      	strh	r2, [r3, #0]
 800a8d0:	e023      	b.n	800a91a <USB_EPStartXfer+0x1586>
 800a8d2:	463b      	mov	r3, r7
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	785b      	ldrb	r3, [r3, #1]
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d11e      	bne.n	800a91a <USB_EPStartXfer+0x1586>
 800a8dc:	1d3b      	adds	r3, r7, #4
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a8f2:	463b      	mov	r3, r7
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	011a      	lsls	r2, r3, #4
 800a8fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8fe:	4413      	add	r3, r2
 800a900:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a90c:	b29a      	uxth	r2, r3
 800a90e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a912:	801a      	strh	r2, [r3, #0]
 800a914:	e001      	b.n	800a91a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e02e      	b.n	800a978 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a91a:	1d3b      	adds	r3, r7, #4
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	463b      	mov	r3, r7
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	4413      	add	r3, r2
 800a928:	881b      	ldrh	r3, [r3, #0]
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a934:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a938:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a93c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a940:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a944:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a948:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a94c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a950:	1d3b      	adds	r3, r7, #4
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	463b      	mov	r3, r7
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	441a      	add	r2, r3
 800a95e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a96a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a96e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a972:	b29b      	uxth	r3, r3
 800a974:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a982:	b480      	push	{r7}
 800a984:	b085      	sub	sp, #20
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	785b      	ldrb	r3, [r3, #1]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d020      	beq.n	800a9d6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4413      	add	r3, r2
 800a99e:	881b      	ldrh	r3, [r3, #0]
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9aa:	81bb      	strh	r3, [r7, #12]
 800a9ac:	89bb      	ldrh	r3, [r7, #12]
 800a9ae:	f083 0310 	eor.w	r3, r3, #16
 800a9b2:	81bb      	strh	r3, [r7, #12]
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	441a      	add	r2, r3
 800a9be:	89bb      	ldrh	r3, [r7, #12]
 800a9c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	8013      	strh	r3, [r2, #0]
 800a9d4:	e01f      	b.n	800aa16 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ec:	81fb      	strh	r3, [r7, #14]
 800a9ee:	89fb      	ldrh	r3, [r7, #14]
 800a9f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a9f4:	81fb      	strh	r3, [r7, #14]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	441a      	add	r2, r3
 800aa00:	89fb      	ldrh	r3, [r7, #14]
 800aa02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bc80      	pop	{r7}
 800aa20:	4770      	bx	lr

0800aa22 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b087      	sub	sp, #28
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	7b1b      	ldrb	r3, [r3, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f040 809d 	bne.w	800ab70 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	785b      	ldrb	r3, [r3, #1]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d04c      	beq.n	800aad8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	881b      	ldrh	r3, [r3, #0]
 800aa4a:	823b      	strh	r3, [r7, #16]
 800aa4c:	8a3b      	ldrh	r3, [r7, #16]
 800aa4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d01b      	beq.n	800aa8e <USB_EPClearStall+0x6c>
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4413      	add	r3, r2
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa6c:	81fb      	strh	r3, [r7, #14]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	441a      	add	r2, r3
 800aa78:	89fb      	ldrh	r3, [r7, #14]
 800aa7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	78db      	ldrb	r3, [r3, #3]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d06c      	beq.n	800ab70 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	881b      	ldrh	r3, [r3, #0]
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaac:	81bb      	strh	r3, [r7, #12]
 800aaae:	89bb      	ldrh	r3, [r7, #12]
 800aab0:	f083 0320 	eor.w	r3, r3, #32
 800aab4:	81bb      	strh	r3, [r7, #12]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	441a      	add	r2, r3
 800aac0:	89bb      	ldrh	r3, [r7, #12]
 800aac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	8013      	strh	r3, [r2, #0]
 800aad6:	e04b      	b.n	800ab70 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	4413      	add	r3, r2
 800aae2:	881b      	ldrh	r3, [r3, #0]
 800aae4:	82fb      	strh	r3, [r7, #22]
 800aae6:	8afb      	ldrh	r3, [r7, #22]
 800aae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d01b      	beq.n	800ab28 <USB_EPClearStall+0x106>
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4413      	add	r3, r2
 800aafa:	881b      	ldrh	r3, [r3, #0]
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab06:	82bb      	strh	r3, [r7, #20]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	441a      	add	r2, r3
 800ab12:	8abb      	ldrh	r3, [r7, #20]
 800ab14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab3e:	827b      	strh	r3, [r7, #18]
 800ab40:	8a7b      	ldrh	r3, [r7, #18]
 800ab42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab46:	827b      	strh	r3, [r7, #18]
 800ab48:	8a7b      	ldrh	r3, [r7, #18]
 800ab4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab4e:	827b      	strh	r3, [r7, #18]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	441a      	add	r2, r3
 800ab5a:	8a7b      	ldrh	r3, [r7, #18]
 800ab5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	371c      	adds	r7, #28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bc80      	pop	{r7}
 800ab7a:	4770      	bx	lr

0800ab7c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ab88:	78fb      	ldrb	r3, [r7, #3]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d103      	bne.n	800ab96 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2280      	movs	r2, #128	; 0x80
 800ab92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bc80      	pop	{r7}
 800aba0:	4770      	bx	lr

0800aba2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b083      	sub	sp, #12
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bc80      	pop	{r7}
 800abb4:	4770      	bx	lr

0800abb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b083      	sub	sp, #12
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bc80      	pop	{r7}
 800abc8:	4770      	bx	lr

0800abca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800abca:	b480      	push	{r7}
 800abcc:	b085      	sub	sp, #20
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800abd8:	b29b      	uxth	r3, r3
 800abda:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800abdc:	68fb      	ldr	r3, [r7, #12]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3714      	adds	r7, #20
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bc80      	pop	{r7}
 800abe6:	4770      	bx	lr

0800abe8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bc80      	pop	{r7}
 800abfc:	4770      	bx	lr

0800abfe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b08d      	sub	sp, #52	; 0x34
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	60f8      	str	r0, [r7, #12]
 800ac06:	60b9      	str	r1, [r7, #8]
 800ac08:	4611      	mov	r1, r2
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	80fb      	strh	r3, [r7, #6]
 800ac10:	4613      	mov	r3, r2
 800ac12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ac14:	88bb      	ldrh	r3, [r7, #4]
 800ac16:	3301      	adds	r3, #1
 800ac18:	085b      	lsrs	r3, r3, #1
 800ac1a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac24:	88fb      	ldrh	r3, [r7, #6]
 800ac26:	005a      	lsls	r2, r3, #1
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac30:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac36:	e01e      	b.n	800ac76 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800ac38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac40:	3301      	adds	r3, #1
 800ac42:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	021b      	lsls	r3, r3, #8
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	461a      	mov	r2, r3
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	3302      	adds	r3, #2
 800ac62:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800ac64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac66:	3302      	adds	r3, #2
 800ac68:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800ac70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac72:	3b01      	subs	r3, #1
 800ac74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1dd      	bne.n	800ac38 <USB_WritePMA+0x3a>
  }
}
 800ac7c:	bf00      	nop
 800ac7e:	bf00      	nop
 800ac80:	3734      	adds	r7, #52	; 0x34
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bc80      	pop	{r7}
 800ac86:	4770      	bx	lr

0800ac88 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b08b      	sub	sp, #44	; 0x2c
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	4611      	mov	r1, r2
 800ac94:	461a      	mov	r2, r3
 800ac96:	460b      	mov	r3, r1
 800ac98:	80fb      	strh	r3, [r7, #6]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ac9e:	88bb      	ldrh	r3, [r7, #4]
 800aca0:	085b      	lsrs	r3, r3, #1
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800acae:	88fb      	ldrh	r3, [r7, #6]
 800acb0:	005a      	lsls	r2, r3, #1
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	4413      	add	r3, r2
 800acb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acba:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	627b      	str	r3, [r7, #36]	; 0x24
 800acc0:	e01b      	b.n	800acfa <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800acc2:	6a3b      	ldr	r3, [r7, #32]
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800acca:	6a3b      	ldr	r3, [r7, #32]
 800accc:	3302      	adds	r3, #2
 800acce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	b2da      	uxtb	r2, r3
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	3301      	adds	r3, #1
 800acdc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	0a1b      	lsrs	r3, r3, #8
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	3301      	adds	r3, #1
 800acec:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	3302      	adds	r3, #2
 800acf2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	3b01      	subs	r3, #1
 800acf8:	627b      	str	r3, [r7, #36]	; 0x24
 800acfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1e0      	bne.n	800acc2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800ad00:	88bb      	ldrh	r3, [r7, #4]
 800ad02:	f003 0301 	and.w	r3, r3, #1
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d007      	beq.n	800ad1c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800ad0c:	6a3b      	ldr	r3, [r7, #32]
 800ad0e:	881b      	ldrh	r3, [r3, #0]
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	701a      	strb	r2, [r3, #0]
  }
}
 800ad1c:	bf00      	nop
 800ad1e:	372c      	adds	r7, #44	; 0x2c
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bc80      	pop	{r7}
 800ad24:	4770      	bx	lr

0800ad26 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	7c1b      	ldrb	r3, [r3, #16]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d115      	bne.n	800ad6a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ad3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad42:	2202      	movs	r2, #2
 800ad44:	2181      	movs	r1, #129	; 0x81
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f001 fe87 	bl	800ca5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ad52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad56:	2202      	movs	r2, #2
 800ad58:	2101      	movs	r1, #1
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f001 fe7d 	bl	800ca5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ad68:	e012      	b.n	800ad90 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ad6a:	2340      	movs	r3, #64	; 0x40
 800ad6c:	2202      	movs	r2, #2
 800ad6e:	2181      	movs	r1, #129	; 0x81
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f001 fe72 	bl	800ca5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ad7c:	2340      	movs	r3, #64	; 0x40
 800ad7e:	2202      	movs	r2, #2
 800ad80:	2101      	movs	r1, #1
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f001 fe69 	bl	800ca5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad90:	2308      	movs	r3, #8
 800ad92:	2203      	movs	r2, #3
 800ad94:	2182      	movs	r1, #130	; 0x82
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f001 fe5f 	bl	800ca5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ada2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ada6:	f001 ff7f 	bl	800cca8 <USBD_static_malloc>
 800adaa:	4602      	mov	r2, r0
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d102      	bne.n	800adc2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800adbc:	2301      	movs	r3, #1
 800adbe:	73fb      	strb	r3, [r7, #15]
 800adc0:	e026      	b.n	800ae10 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	2200      	movs	r2, #0
 800add8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2200      	movs	r2, #0
 800ade0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	7c1b      	ldrb	r3, [r3, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d109      	bne.n	800ae00 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adf6:	2101      	movs	r1, #1
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 ff1f 	bl	800cc3c <USBD_LL_PrepareReceive>
 800adfe:	e007      	b.n	800ae10 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae06:	2340      	movs	r3, #64	; 0x40
 800ae08:	2101      	movs	r1, #1
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f001 ff16 	bl	800cc3c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	460b      	mov	r3, r1
 800ae24:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ae26:	2300      	movs	r3, #0
 800ae28:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ae2a:	2181      	movs	r1, #129	; 0x81
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f001 fe3a 	bl	800caa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ae38:	2101      	movs	r1, #1
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f001 fe33 	bl	800caa6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ae48:	2182      	movs	r1, #130	; 0x82
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f001 fe2b 	bl	800caa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00e      	beq.n	800ae7e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae70:	4618      	mov	r0, r3
 800ae72:	f001 ff25 	bl	800ccc0 <USBD_static_free>
    pdev->pClassData = NULL;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae98:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d039      	beq.n	800af26 <USBD_CDC_Setup+0x9e>
 800aeb2:	2b20      	cmp	r3, #32
 800aeb4:	d17f      	bne.n	800afb6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	88db      	ldrh	r3, [r3, #6]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d029      	beq.n	800af12 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	b25b      	sxtb	r3, r3
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	da11      	bge.n	800aeec <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	683a      	ldr	r2, [r7, #0]
 800aed2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800aed4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	88d2      	ldrh	r2, [r2, #6]
 800aeda:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aedc:	6939      	ldr	r1, [r7, #16]
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	88db      	ldrh	r3, [r3, #6]
 800aee2:	461a      	mov	r2, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f001 fa0a 	bl	800c2fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800aeea:	e06b      	b.n	800afc4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	785a      	ldrb	r2, [r3, #1]
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	88db      	ldrh	r3, [r3, #6]
 800aefa:	b2da      	uxtb	r2, r3
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800af02:	6939      	ldr	r1, [r7, #16]
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	88db      	ldrh	r3, [r3, #6]
 800af08:	461a      	mov	r2, r3
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f001 fa25 	bl	800c35a <USBD_CtlPrepareRx>
      break;
 800af10:	e058      	b.n	800afc4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	7850      	ldrb	r0, [r2, #1]
 800af1e:	2200      	movs	r2, #0
 800af20:	6839      	ldr	r1, [r7, #0]
 800af22:	4798      	blx	r3
      break;
 800af24:	e04e      	b.n	800afc4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	785b      	ldrb	r3, [r3, #1]
 800af2a:	2b0b      	cmp	r3, #11
 800af2c:	d02e      	beq.n	800af8c <USBD_CDC_Setup+0x104>
 800af2e:	2b0b      	cmp	r3, #11
 800af30:	dc38      	bgt.n	800afa4 <USBD_CDC_Setup+0x11c>
 800af32:	2b00      	cmp	r3, #0
 800af34:	d002      	beq.n	800af3c <USBD_CDC_Setup+0xb4>
 800af36:	2b0a      	cmp	r3, #10
 800af38:	d014      	beq.n	800af64 <USBD_CDC_Setup+0xdc>
 800af3a:	e033      	b.n	800afa4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af42:	2b03      	cmp	r3, #3
 800af44:	d107      	bne.n	800af56 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800af46:	f107 030c 	add.w	r3, r7, #12
 800af4a:	2202      	movs	r2, #2
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f001 f9d5 	bl	800c2fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af54:	e02e      	b.n	800afb4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f001 f966 	bl	800c22a <USBD_CtlError>
            ret = USBD_FAIL;
 800af5e:	2302      	movs	r3, #2
 800af60:	75fb      	strb	r3, [r7, #23]
          break;
 800af62:	e027      	b.n	800afb4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af6a:	2b03      	cmp	r3, #3
 800af6c:	d107      	bne.n	800af7e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800af6e:	f107 030f 	add.w	r3, r7, #15
 800af72:	2201      	movs	r2, #1
 800af74:	4619      	mov	r1, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f001 f9c1 	bl	800c2fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af7c:	e01a      	b.n	800afb4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f001 f952 	bl	800c22a <USBD_CtlError>
            ret = USBD_FAIL;
 800af86:	2302      	movs	r3, #2
 800af88:	75fb      	strb	r3, [r7, #23]
          break;
 800af8a:	e013      	b.n	800afb4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af92:	2b03      	cmp	r3, #3
 800af94:	d00d      	beq.n	800afb2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 f946 	bl	800c22a <USBD_CtlError>
            ret = USBD_FAIL;
 800af9e:	2302      	movs	r3, #2
 800afa0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800afa2:	e006      	b.n	800afb2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f001 f93f 	bl	800c22a <USBD_CtlError>
          ret = USBD_FAIL;
 800afac:	2302      	movs	r3, #2
 800afae:	75fb      	strb	r3, [r7, #23]
          break;
 800afb0:	e000      	b.n	800afb4 <USBD_CDC_Setup+0x12c>
          break;
 800afb2:	bf00      	nop
      }
      break;
 800afb4:	e006      	b.n	800afc4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800afb6:	6839      	ldr	r1, [r7, #0]
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 f936 	bl	800c22a <USBD_CtlError>
      ret = USBD_FAIL;
 800afbe:	2302      	movs	r3, #2
 800afc0:	75fb      	strb	r3, [r7, #23]
      break;
 800afc2:	bf00      	nop
  }

  return ret;
 800afc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3718      	adds	r7, #24
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	460b      	mov	r3, r1
 800afd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afe0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afe8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d03a      	beq.n	800b06a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aff4:	78fa      	ldrb	r2, [r7, #3]
 800aff6:	6879      	ldr	r1, [r7, #4]
 800aff8:	4613      	mov	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	4413      	add	r3, r2
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	440b      	add	r3, r1
 800b002:	331c      	adds	r3, #28
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d029      	beq.n	800b05e <USBD_CDC_DataIn+0x90>
 800b00a:	78fa      	ldrb	r2, [r7, #3]
 800b00c:	6879      	ldr	r1, [r7, #4]
 800b00e:	4613      	mov	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4413      	add	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	440b      	add	r3, r1
 800b018:	331c      	adds	r3, #28
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	78f9      	ldrb	r1, [r7, #3]
 800b01e:	68b8      	ldr	r0, [r7, #8]
 800b020:	460b      	mov	r3, r1
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	440b      	add	r3, r1
 800b026:	00db      	lsls	r3, r3, #3
 800b028:	4403      	add	r3, r0
 800b02a:	3338      	adds	r3, #56	; 0x38
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	fbb2 f1f3 	udiv	r1, r2, r3
 800b032:	fb03 f301 	mul.w	r3, r3, r1
 800b036:	1ad3      	subs	r3, r2, r3
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d110      	bne.n	800b05e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b03c:	78fa      	ldrb	r2, [r7, #3]
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	4613      	mov	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4413      	add	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	440b      	add	r3, r1
 800b04a:	331c      	adds	r3, #28
 800b04c:	2200      	movs	r2, #0
 800b04e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b050:	78f9      	ldrb	r1, [r7, #3]
 800b052:	2300      	movs	r3, #0
 800b054:	2200      	movs	r2, #0
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f001 fdcd 	bl	800cbf6 <USBD_LL_Transmit>
 800b05c:	e003      	b.n	800b066 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	e000      	b.n	800b06c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b06a:	2302      	movs	r3, #2
  }
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	460b      	mov	r3, r1
 800b07e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b086:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b088:	78fb      	ldrb	r3, [r7, #3]
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f001 fdf8 	bl	800cc82 <USBD_LL_GetRxDataSize>
 800b092:	4602      	mov	r2, r0
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d00d      	beq.n	800b0c0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	4798      	blx	r3

    return USBD_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	e000      	b.n	800b0c2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b0c0:	2302      	movs	r3, #2
  }
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0d8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d015      	beq.n	800b110 <USBD_CDC_EP0_RxReady+0x46>
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b0ea:	2bff      	cmp	r3, #255	; 0xff
 800b0ec:	d010      	beq.n	800b110 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b0fc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b104:	b292      	uxth	r2, r2
 800b106:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	22ff      	movs	r2, #255	; 0xff
 800b10c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
	...

0800b11c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2243      	movs	r2, #67	; 0x43
 800b128:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b12a:	4b03      	ldr	r3, [pc, #12]	; (800b138 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	bc80      	pop	{r7}
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	200000cc 	.word	0x200000cc

0800b13c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2243      	movs	r2, #67	; 0x43
 800b148:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b14a:	4b03      	ldr	r3, [pc, #12]	; (800b158 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	bc80      	pop	{r7}
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	20000088 	.word	0x20000088

0800b15c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2243      	movs	r2, #67	; 0x43
 800b168:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b16a:	4b03      	ldr	r3, [pc, #12]	; (800b178 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	bc80      	pop	{r7}
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	20000110 	.word	0x20000110

0800b17c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	220a      	movs	r2, #10
 800b188:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b18a:	4b03      	ldr	r3, [pc, #12]	; (800b198 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	bc80      	pop	{r7}
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	20000044 	.word	0x20000044

0800b19c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d005      	beq.n	800b1bc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bc80      	pop	{r7}
 800b1c6:	4770      	bx	lr

0800b1c8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b087      	sub	sp, #28
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1dc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b1e6:	88fa      	ldrh	r2, [r7, #6]
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	371c      	adds	r7, #28
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bc80      	pop	{r7}
 800b1f8:	4770      	bx	lr

0800b1fa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b085      	sub	sp, #20
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b20a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bc80      	pop	{r7}
 800b21e:	4770      	bx	lr

0800b220 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b22e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b236:	2b00      	cmp	r3, #0
 800b238:	d01c      	beq.n	800b274 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b240:	2b00      	cmp	r3, #0
 800b242:	d115      	bne.n	800b270 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2201      	movs	r2, #1
 800b248:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b262:	b29b      	uxth	r3, r3
 800b264:	2181      	movs	r1, #129	; 0x81
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f001 fcc5 	bl	800cbf6 <USBD_LL_Transmit>

      return USBD_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	e002      	b.n	800b276 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b270:	2301      	movs	r3, #1
 800b272:	e000      	b.n	800b276 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b274:	2302      	movs	r3, #2
  }
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b084      	sub	sp, #16
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b28c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b294:	2b00      	cmp	r3, #0
 800b296:	d017      	beq.n	800b2c8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	7c1b      	ldrb	r3, [r3, #16]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d109      	bne.n	800b2b4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2aa:	2101      	movs	r1, #1
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f001 fcc5 	bl	800cc3c <USBD_LL_PrepareReceive>
 800b2b2:	e007      	b.n	800b2c4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2ba:	2340      	movs	r3, #64	; 0x40
 800b2bc:	2101      	movs	r1, #1
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f001 fcbc 	bl	800cc3c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	e000      	b.n	800b2ca <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b2c8:	2302      	movs	r3, #2
  }
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	60f8      	str	r0, [r7, #12]
 800b2da:	60b9      	str	r1, [r7, #8]
 800b2dc:	4613      	mov	r3, r2
 800b2de:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	e01a      	b.n	800b320 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d003      	beq.n	800b2fc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d003      	beq.n	800b30a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	79fa      	ldrb	r2, [r7, #7]
 800b316:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f001 fb29 	bl	800c970 <USBD_LL_Init>

  return USBD_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d006      	beq.n	800b34a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	73fb      	strb	r3, [r7, #15]
 800b348:	e001      	b.n	800b34e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b34a:	2302      	movs	r3, #2
 800b34c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	bc80      	pop	{r7}
 800b358:	4770      	bx	lr

0800b35a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b082      	sub	sp, #8
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f001 fb5e 	bl	800ca24 <USBD_LL_Start>

  return USBD_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	bc80      	pop	{r7}
 800b384:	4770      	bx	lr

0800b386 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	460b      	mov	r3, r1
 800b390:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b392:	2302      	movs	r3, #2
 800b394:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00c      	beq.n	800b3ba <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	78fa      	ldrb	r2, [r7, #3]
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	4798      	blx	r3
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	78fa      	ldrb	r2, [r7, #3]
 800b3da:	4611      	mov	r1, r2
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	4798      	blx	r3

  return USBD_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b082      	sub	sp, #8
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 fed8 	bl	800c1b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2201      	movs	r2, #1
 800b406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b410:	461a      	mov	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b41e:	f003 031f 	and.w	r3, r3, #31
 800b422:	2b02      	cmp	r3, #2
 800b424:	d016      	beq.n	800b454 <USBD_LL_SetupStage+0x6a>
 800b426:	2b02      	cmp	r3, #2
 800b428:	d81c      	bhi.n	800b464 <USBD_LL_SetupStage+0x7a>
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d002      	beq.n	800b434 <USBD_LL_SetupStage+0x4a>
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d008      	beq.n	800b444 <USBD_LL_SetupStage+0x5a>
 800b432:	e017      	b.n	800b464 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b43a:	4619      	mov	r1, r3
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 f9cb 	bl	800b7d8 <USBD_StdDevReq>
      break;
 800b442:	e01a      	b.n	800b47a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fa2d 	bl	800b8ac <USBD_StdItfReq>
      break;
 800b452:	e012      	b.n	800b47a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b45a:	4619      	mov	r1, r3
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fa6d 	bl	800b93c <USBD_StdEPReq>
      break;
 800b462:	e00a      	b.n	800b47a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b46a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f001 fb36 	bl	800cae4 <USBD_LL_StallEP>
      break;
 800b478:	bf00      	nop
  }

  return USBD_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	460b      	mov	r3, r1
 800b48e:	607a      	str	r2, [r7, #4]
 800b490:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b492:	7afb      	ldrb	r3, [r7, #11]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d14b      	bne.n	800b530 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b49e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4a6:	2b03      	cmp	r3, #3
 800b4a8:	d134      	bne.n	800b514 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	68da      	ldr	r2, [r3, #12]
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d919      	bls.n	800b4ea <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	68da      	ldr	r2, [r3, #12]
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	1ad2      	subs	r2, r2, r3
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	68da      	ldr	r2, [r3, #12]
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d203      	bcs.n	800b4d8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	e002      	b.n	800b4de <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	461a      	mov	r2, r3
 800b4e0:	6879      	ldr	r1, [r7, #4]
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f000 ff57 	bl	800c396 <USBD_CtlContinueRx>
 800b4e8:	e038      	b.n	800b55c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00a      	beq.n	800b50c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b4fc:	2b03      	cmp	r3, #3
 800b4fe:	d105      	bne.n	800b50c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f000 ff54 	bl	800c3ba <USBD_CtlSendStatus>
 800b512:	e023      	b.n	800b55c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b51a:	2b05      	cmp	r3, #5
 800b51c:	d11e      	bne.n	800b55c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b526:	2100      	movs	r1, #0
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f001 fadb 	bl	800cae4 <USBD_LL_StallEP>
 800b52e:	e015      	b.n	800b55c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00d      	beq.n	800b558 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b542:	2b03      	cmp	r3, #3
 800b544:	d108      	bne.n	800b558 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	7afa      	ldrb	r2, [r7, #11]
 800b550:	4611      	mov	r1, r2
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	4798      	blx	r3
 800b556:	e001      	b.n	800b55c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b558:	2302      	movs	r3, #2
 800b55a:	e000      	b.n	800b55e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b086      	sub	sp, #24
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	60f8      	str	r0, [r7, #12]
 800b56e:	460b      	mov	r3, r1
 800b570:	607a      	str	r2, [r7, #4]
 800b572:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b574:	7afb      	ldrb	r3, [r7, #11]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d17f      	bne.n	800b67a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	3314      	adds	r3, #20
 800b57e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b586:	2b02      	cmp	r3, #2
 800b588:	d15c      	bne.n	800b644 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	68da      	ldr	r2, [r3, #12]
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	429a      	cmp	r2, r3
 800b594:	d915      	bls.n	800b5c2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	68da      	ldr	r2, [r3, #12]
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	1ad2      	subs	r2, r2, r3
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	6879      	ldr	r1, [r7, #4]
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f000 fec1 	bl	800c336 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f001 fb3e 	bl	800cc3c <USBD_LL_PrepareReceive>
 800b5c0:	e04e      	b.n	800b660 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	6912      	ldr	r2, [r2, #16]
 800b5ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5ce:	fb02 f201 	mul.w	r2, r2, r1
 800b5d2:	1a9b      	subs	r3, r3, r2
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d11c      	bne.n	800b612 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	689a      	ldr	r2, [r3, #8]
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d316      	bcc.n	800b612 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	689a      	ldr	r2, [r3, #8]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d20f      	bcs.n	800b612 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f000 fe9d 	bl	800c336 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b604:	2300      	movs	r3, #0
 800b606:	2200      	movs	r2, #0
 800b608:	2100      	movs	r1, #0
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f001 fb16 	bl	800cc3c <USBD_LL_PrepareReceive>
 800b610:	e026      	b.n	800b660 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00a      	beq.n	800b634 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b624:	2b03      	cmp	r3, #3
 800b626:	d105      	bne.n	800b634 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b634:	2180      	movs	r1, #128	; 0x80
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f001 fa54 	bl	800cae4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 fecf 	bl	800c3e0 <USBD_CtlReceiveStatus>
 800b642:	e00d      	b.n	800b660 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b64a:	2b04      	cmp	r3, #4
 800b64c:	d004      	beq.n	800b658 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b654:	2b00      	cmp	r3, #0
 800b656:	d103      	bne.n	800b660 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b658:	2180      	movs	r1, #128	; 0x80
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f001 fa42 	bl	800cae4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b666:	2b01      	cmp	r3, #1
 800b668:	d11d      	bne.n	800b6a6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f7ff fe81 	bl	800b372 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b678:	e015      	b.n	800b6a6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b680:	695b      	ldr	r3, [r3, #20]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00d      	beq.n	800b6a2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b68c:	2b03      	cmp	r3, #3
 800b68e:	d108      	bne.n	800b6a2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b696:	695b      	ldr	r3, [r3, #20]
 800b698:	7afa      	ldrb	r2, [r7, #11]
 800b69a:	4611      	mov	r1, r2
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	4798      	blx	r3
 800b6a0:	e001      	b.n	800b6a6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	e000      	b.n	800b6a8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3718      	adds	r7, #24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6b8:	2340      	movs	r3, #64	; 0x40
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	2100      	movs	r1, #0
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f001 f9cb 	bl	800ca5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2240      	movs	r2, #64	; 0x40
 800b6d0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6d4:	2340      	movs	r3, #64	; 0x40
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	2180      	movs	r1, #128	; 0x80
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f001 f9bd 	bl	800ca5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2240      	movs	r2, #64	; 0x40
 800b6ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b710:	2b00      	cmp	r3, #0
 800b712:	d009      	beq.n	800b728 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	6852      	ldr	r2, [r2, #4]
 800b720:	b2d2      	uxtb	r2, r2
 800b722:	4611      	mov	r1, r2
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	4798      	blx	r3
  }

  return USBD_OK;
 800b728:	2300      	movs	r3, #0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b732:	b480      	push	{r7}
 800b734:	b083      	sub	sp, #12
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	460b      	mov	r3, r1
 800b73c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	78fa      	ldrb	r2, [r7, #3]
 800b742:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bc80      	pop	{r7}
 800b74e:	4770      	bx	lr

0800b750 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2204      	movs	r2, #4
 800b768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	bc80      	pop	{r7}
 800b776:	4770      	bx	lr

0800b778 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b786:	2b04      	cmp	r3, #4
 800b788:	d105      	bne.n	800b796 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bc80      	pop	{r7}
 800b7a0:	4770      	bx	lr

0800b7a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b082      	sub	sp, #8
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7b0:	2b03      	cmp	r3, #3
 800b7b2:	d10b      	bne.n	800b7cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ba:	69db      	ldr	r3, [r3, #28]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d005      	beq.n	800b7cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7c6:	69db      	ldr	r3, [r3, #28]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
	...

0800b7d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7ee:	2b40      	cmp	r3, #64	; 0x40
 800b7f0:	d005      	beq.n	800b7fe <USBD_StdDevReq+0x26>
 800b7f2:	2b40      	cmp	r3, #64	; 0x40
 800b7f4:	d84f      	bhi.n	800b896 <USBD_StdDevReq+0xbe>
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d009      	beq.n	800b80e <USBD_StdDevReq+0x36>
 800b7fa:	2b20      	cmp	r3, #32
 800b7fc:	d14b      	bne.n	800b896 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	4798      	blx	r3
      break;
 800b80c:	e048      	b.n	800b8a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	785b      	ldrb	r3, [r3, #1]
 800b812:	2b09      	cmp	r3, #9
 800b814:	d839      	bhi.n	800b88a <USBD_StdDevReq+0xb2>
 800b816:	a201      	add	r2, pc, #4	; (adr r2, 800b81c <USBD_StdDevReq+0x44>)
 800b818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b81c:	0800b86d 	.word	0x0800b86d
 800b820:	0800b881 	.word	0x0800b881
 800b824:	0800b88b 	.word	0x0800b88b
 800b828:	0800b877 	.word	0x0800b877
 800b82c:	0800b88b 	.word	0x0800b88b
 800b830:	0800b84f 	.word	0x0800b84f
 800b834:	0800b845 	.word	0x0800b845
 800b838:	0800b88b 	.word	0x0800b88b
 800b83c:	0800b863 	.word	0x0800b863
 800b840:	0800b859 	.word	0x0800b859
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b844:	6839      	ldr	r1, [r7, #0]
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 f9dc 	bl	800bc04 <USBD_GetDescriptor>
          break;
 800b84c:	e022      	b.n	800b894 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b84e:	6839      	ldr	r1, [r7, #0]
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fb3f 	bl	800bed4 <USBD_SetAddress>
          break;
 800b856:	e01d      	b.n	800b894 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fb7e 	bl	800bf5c <USBD_SetConfig>
          break;
 800b860:	e018      	b.n	800b894 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fc07 	bl	800c078 <USBD_GetConfig>
          break;
 800b86a:	e013      	b.n	800b894 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b86c:	6839      	ldr	r1, [r7, #0]
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fc37 	bl	800c0e2 <USBD_GetStatus>
          break;
 800b874:	e00e      	b.n	800b894 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 fc65 	bl	800c148 <USBD_SetFeature>
          break;
 800b87e:	e009      	b.n	800b894 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fc74 	bl	800c170 <USBD_ClrFeature>
          break;
 800b888:	e004      	b.n	800b894 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fccc 	bl	800c22a <USBD_CtlError>
          break;
 800b892:	bf00      	nop
      }
      break;
 800b894:	e004      	b.n	800b8a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b896:	6839      	ldr	r1, [r7, #0]
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 fcc6 	bl	800c22a <USBD_CtlError>
      break;
 800b89e:	bf00      	nop
  }

  return ret;
 800b8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop

0800b8ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8c2:	2b40      	cmp	r3, #64	; 0x40
 800b8c4:	d005      	beq.n	800b8d2 <USBD_StdItfReq+0x26>
 800b8c6:	2b40      	cmp	r3, #64	; 0x40
 800b8c8:	d82e      	bhi.n	800b928 <USBD_StdItfReq+0x7c>
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <USBD_StdItfReq+0x26>
 800b8ce:	2b20      	cmp	r3, #32
 800b8d0:	d12a      	bne.n	800b928 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d81d      	bhi.n	800b91a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	889b      	ldrh	r3, [r3, #4]
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d813      	bhi.n	800b910 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	6839      	ldr	r1, [r7, #0]
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	4798      	blx	r3
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	88db      	ldrh	r3, [r3, #6]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d110      	bne.n	800b924 <USBD_StdItfReq+0x78>
 800b902:	7bfb      	ldrb	r3, [r7, #15]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d10d      	bne.n	800b924 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fd56 	bl	800c3ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b90e:	e009      	b.n	800b924 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fc89 	bl	800c22a <USBD_CtlError>
          break;
 800b918:	e004      	b.n	800b924 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b91a:	6839      	ldr	r1, [r7, #0]
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fc84 	bl	800c22a <USBD_CtlError>
          break;
 800b922:	e000      	b.n	800b926 <USBD_StdItfReq+0x7a>
          break;
 800b924:	bf00      	nop
      }
      break;
 800b926:	e004      	b.n	800b932 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b928:	6839      	ldr	r1, [r7, #0]
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fc7d 	bl	800c22a <USBD_CtlError>
      break;
 800b930:	bf00      	nop
  }

  return USBD_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	889b      	ldrh	r3, [r3, #4]
 800b94e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b958:	2b40      	cmp	r3, #64	; 0x40
 800b95a:	d007      	beq.n	800b96c <USBD_StdEPReq+0x30>
 800b95c:	2b40      	cmp	r3, #64	; 0x40
 800b95e:	f200 8146 	bhi.w	800bbee <USBD_StdEPReq+0x2b2>
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00a      	beq.n	800b97c <USBD_StdEPReq+0x40>
 800b966:	2b20      	cmp	r3, #32
 800b968:	f040 8141 	bne.w	800bbee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	4798      	blx	r3
      break;
 800b97a:	e13d      	b.n	800bbf8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b984:	2b20      	cmp	r3, #32
 800b986:	d10a      	bne.n	800b99e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	6839      	ldr	r1, [r7, #0]
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	4798      	blx	r3
 800b996:	4603      	mov	r3, r0
 800b998:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b99a:	7bfb      	ldrb	r3, [r7, #15]
 800b99c:	e12d      	b.n	800bbfa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	785b      	ldrb	r3, [r3, #1]
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d007      	beq.n	800b9b6 <USBD_StdEPReq+0x7a>
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	f300 811b 	bgt.w	800bbe2 <USBD_StdEPReq+0x2a6>
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d072      	beq.n	800ba96 <USBD_StdEPReq+0x15a>
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d03a      	beq.n	800ba2a <USBD_StdEPReq+0xee>
 800b9b4:	e115      	b.n	800bbe2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d002      	beq.n	800b9c6 <USBD_StdEPReq+0x8a>
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	d015      	beq.n	800b9f0 <USBD_StdEPReq+0xb4>
 800b9c4:	e02b      	b.n	800ba1e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9c6:	7bbb      	ldrb	r3, [r7, #14]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00c      	beq.n	800b9e6 <USBD_StdEPReq+0xaa>
 800b9cc:	7bbb      	ldrb	r3, [r7, #14]
 800b9ce:	2b80      	cmp	r3, #128	; 0x80
 800b9d0:	d009      	beq.n	800b9e6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b9d2:	7bbb      	ldrb	r3, [r7, #14]
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f001 f884 	bl	800cae4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b9dc:	2180      	movs	r1, #128	; 0x80
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f001 f880 	bl	800cae4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9e4:	e020      	b.n	800ba28 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 fc1e 	bl	800c22a <USBD_CtlError>
              break;
 800b9ee:	e01b      	b.n	800ba28 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	885b      	ldrh	r3, [r3, #2]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10e      	bne.n	800ba16 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b9f8:	7bbb      	ldrb	r3, [r7, #14]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00b      	beq.n	800ba16 <USBD_StdEPReq+0xda>
 800b9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ba00:	2b80      	cmp	r3, #128	; 0x80
 800ba02:	d008      	beq.n	800ba16 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	88db      	ldrh	r3, [r3, #6]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d104      	bne.n	800ba16 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ba0c:	7bbb      	ldrb	r3, [r7, #14]
 800ba0e:	4619      	mov	r1, r3
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f001 f867 	bl	800cae4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fccf 	bl	800c3ba <USBD_CtlSendStatus>

              break;
 800ba1c:	e004      	b.n	800ba28 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fc02 	bl	800c22a <USBD_CtlError>
              break;
 800ba26:	bf00      	nop
          }
          break;
 800ba28:	e0e0      	b.n	800bbec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba30:	2b02      	cmp	r3, #2
 800ba32:	d002      	beq.n	800ba3a <USBD_StdEPReq+0xfe>
 800ba34:	2b03      	cmp	r3, #3
 800ba36:	d015      	beq.n	800ba64 <USBD_StdEPReq+0x128>
 800ba38:	e026      	b.n	800ba88 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba3a:	7bbb      	ldrb	r3, [r7, #14]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00c      	beq.n	800ba5a <USBD_StdEPReq+0x11e>
 800ba40:	7bbb      	ldrb	r3, [r7, #14]
 800ba42:	2b80      	cmp	r3, #128	; 0x80
 800ba44:	d009      	beq.n	800ba5a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ba46:	7bbb      	ldrb	r3, [r7, #14]
 800ba48:	4619      	mov	r1, r3
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f001 f84a 	bl	800cae4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ba50:	2180      	movs	r1, #128	; 0x80
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f001 f846 	bl	800cae4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba58:	e01c      	b.n	800ba94 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fbe4 	bl	800c22a <USBD_CtlError>
              break;
 800ba62:	e017      	b.n	800ba94 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	885b      	ldrh	r3, [r3, #2]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d112      	bne.n	800ba92 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
 800ba6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d004      	beq.n	800ba80 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba76:	7bbb      	ldrb	r3, [r7, #14]
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f001 f851 	bl	800cb22 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fc9a 	bl	800c3ba <USBD_CtlSendStatus>
              }
              break;
 800ba86:	e004      	b.n	800ba92 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ba88:	6839      	ldr	r1, [r7, #0]
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 fbcd 	bl	800c22a <USBD_CtlError>
              break;
 800ba90:	e000      	b.n	800ba94 <USBD_StdEPReq+0x158>
              break;
 800ba92:	bf00      	nop
          }
          break;
 800ba94:	e0aa      	b.n	800bbec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d002      	beq.n	800baa6 <USBD_StdEPReq+0x16a>
 800baa0:	2b03      	cmp	r3, #3
 800baa2:	d032      	beq.n	800bb0a <USBD_StdEPReq+0x1ce>
 800baa4:	e097      	b.n	800bbd6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d007      	beq.n	800babc <USBD_StdEPReq+0x180>
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	2b80      	cmp	r3, #128	; 0x80
 800bab0:	d004      	beq.n	800babc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fbb8 	bl	800c22a <USBD_CtlError>
                break;
 800baba:	e091      	b.n	800bbe0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800babc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	da0b      	bge.n	800badc <USBD_StdEPReq+0x1a0>
 800bac4:	7bbb      	ldrb	r3, [r7, #14]
 800bac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baca:	4613      	mov	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4413      	add	r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	3310      	adds	r3, #16
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	4413      	add	r3, r2
 800bad8:	3304      	adds	r3, #4
 800bada:	e00b      	b.n	800baf4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800badc:	7bbb      	ldrb	r3, [r7, #14]
 800bade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bae2:	4613      	mov	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	4413      	add	r3, r2
 800baf2:	3304      	adds	r3, #4
 800baf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	2202      	movs	r2, #2
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fbfb 	bl	800c2fe <USBD_CtlSendData>
              break;
 800bb08:	e06a      	b.n	800bbe0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	da11      	bge.n	800bb36 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	f003 020f 	and.w	r2, r3, #15
 800bb18:	6879      	ldr	r1, [r7, #4]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4413      	add	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	440b      	add	r3, r1
 800bb24:	3318      	adds	r3, #24
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d117      	bne.n	800bb5c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fb7b 	bl	800c22a <USBD_CtlError>
                  break;
 800bb34:	e054      	b.n	800bbe0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb36:	7bbb      	ldrb	r3, [r7, #14]
 800bb38:	f003 020f 	and.w	r2, r3, #15
 800bb3c:	6879      	ldr	r1, [r7, #4]
 800bb3e:	4613      	mov	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	4413      	add	r3, r2
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	440b      	add	r3, r1
 800bb48:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d104      	bne.n	800bb5c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fb68 	bl	800c22a <USBD_CtlError>
                  break;
 800bb5a:	e041      	b.n	800bbe0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	da0b      	bge.n	800bb7c <USBD_StdEPReq+0x240>
 800bb64:	7bbb      	ldrb	r3, [r7, #14]
 800bb66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	3310      	adds	r3, #16
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	4413      	add	r3, r2
 800bb78:	3304      	adds	r3, #4
 800bb7a:	e00b      	b.n	800bb94 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb7c:	7bbb      	ldrb	r3, [r7, #14]
 800bb7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb82:	4613      	mov	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	4413      	add	r3, r2
 800bb92:	3304      	adds	r3, #4
 800bb94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb96:	7bbb      	ldrb	r3, [r7, #14]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <USBD_StdEPReq+0x266>
 800bb9c:	7bbb      	ldrb	r3, [r7, #14]
 800bb9e:	2b80      	cmp	r3, #128	; 0x80
 800bba0:	d103      	bne.n	800bbaa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	2200      	movs	r2, #0
 800bba6:	601a      	str	r2, [r3, #0]
 800bba8:	e00e      	b.n	800bbc8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bbaa:	7bbb      	ldrb	r3, [r7, #14]
 800bbac:	4619      	mov	r1, r3
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 ffd6 	bl	800cb60 <USBD_LL_IsStallEP>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d003      	beq.n	800bbc2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	601a      	str	r2, [r3, #0]
 800bbc0:	e002      	b.n	800bbc8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	2202      	movs	r2, #2
 800bbcc:	4619      	mov	r1, r3
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 fb95 	bl	800c2fe <USBD_CtlSendData>
              break;
 800bbd4:	e004      	b.n	800bbe0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 fb26 	bl	800c22a <USBD_CtlError>
              break;
 800bbde:	bf00      	nop
          }
          break;
 800bbe0:	e004      	b.n	800bbec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bbe2:	6839      	ldr	r1, [r7, #0]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fb20 	bl	800c22a <USBD_CtlError>
          break;
 800bbea:	bf00      	nop
      }
      break;
 800bbec:	e004      	b.n	800bbf8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bbee:	6839      	ldr	r1, [r7, #0]
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fb1a 	bl	800c22a <USBD_CtlError>
      break;
 800bbf6:	bf00      	nop
  }

  return ret;
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
	...

0800bc04 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc12:	2300      	movs	r3, #0
 800bc14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc16:	2300      	movs	r3, #0
 800bc18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	885b      	ldrh	r3, [r3, #2]
 800bc1e:	0a1b      	lsrs	r3, r3, #8
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	3b01      	subs	r3, #1
 800bc24:	2b06      	cmp	r3, #6
 800bc26:	f200 8128 	bhi.w	800be7a <USBD_GetDescriptor+0x276>
 800bc2a:	a201      	add	r2, pc, #4	; (adr r2, 800bc30 <USBD_GetDescriptor+0x2c>)
 800bc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc30:	0800bc4d 	.word	0x0800bc4d
 800bc34:	0800bc65 	.word	0x0800bc65
 800bc38:	0800bca5 	.word	0x0800bca5
 800bc3c:	0800be7b 	.word	0x0800be7b
 800bc40:	0800be7b 	.word	0x0800be7b
 800bc44:	0800be1b 	.word	0x0800be1b
 800bc48:	0800be47 	.word	0x0800be47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	7c12      	ldrb	r2, [r2, #16]
 800bc58:	f107 0108 	add.w	r1, r7, #8
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	4798      	blx	r3
 800bc60:	60f8      	str	r0, [r7, #12]
      break;
 800bc62:	e112      	b.n	800be8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	7c1b      	ldrb	r3, [r3, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10d      	bne.n	800bc88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc74:	f107 0208 	add.w	r2, r7, #8
 800bc78:	4610      	mov	r0, r2
 800bc7a:	4798      	blx	r3
 800bc7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	3301      	adds	r3, #1
 800bc82:	2202      	movs	r2, #2
 800bc84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc86:	e100      	b.n	800be8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc90:	f107 0208 	add.w	r2, r7, #8
 800bc94:	4610      	mov	r0, r2
 800bc96:	4798      	blx	r3
 800bc98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	2202      	movs	r2, #2
 800bca0:	701a      	strb	r2, [r3, #0]
      break;
 800bca2:	e0f2      	b.n	800be8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	885b      	ldrh	r3, [r3, #2]
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b05      	cmp	r3, #5
 800bcac:	f200 80ac 	bhi.w	800be08 <USBD_GetDescriptor+0x204>
 800bcb0:	a201      	add	r2, pc, #4	; (adr r2, 800bcb8 <USBD_GetDescriptor+0xb4>)
 800bcb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb6:	bf00      	nop
 800bcb8:	0800bcd1 	.word	0x0800bcd1
 800bcbc:	0800bd05 	.word	0x0800bd05
 800bcc0:	0800bd39 	.word	0x0800bd39
 800bcc4:	0800bd6d 	.word	0x0800bd6d
 800bcc8:	0800bda1 	.word	0x0800bda1
 800bccc:	0800bdd5 	.word	0x0800bdd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00b      	beq.n	800bcf4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	7c12      	ldrb	r2, [r2, #16]
 800bce8:	f107 0108 	add.w	r1, r7, #8
 800bcec:	4610      	mov	r0, r2
 800bcee:	4798      	blx	r3
 800bcf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcf2:	e091      	b.n	800be18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fa97 	bl	800c22a <USBD_CtlError>
            err++;
 800bcfc:	7afb      	ldrb	r3, [r7, #11]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	72fb      	strb	r3, [r7, #11]
          break;
 800bd02:	e089      	b.n	800be18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00b      	beq.n	800bd28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	7c12      	ldrb	r2, [r2, #16]
 800bd1c:	f107 0108 	add.w	r1, r7, #8
 800bd20:	4610      	mov	r0, r2
 800bd22:	4798      	blx	r3
 800bd24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd26:	e077      	b.n	800be18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd28:	6839      	ldr	r1, [r7, #0]
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fa7d 	bl	800c22a <USBD_CtlError>
            err++;
 800bd30:	7afb      	ldrb	r3, [r7, #11]
 800bd32:	3301      	adds	r3, #1
 800bd34:	72fb      	strb	r3, [r7, #11]
          break;
 800bd36:	e06f      	b.n	800be18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00b      	beq.n	800bd5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	7c12      	ldrb	r2, [r2, #16]
 800bd50:	f107 0108 	add.w	r1, r7, #8
 800bd54:	4610      	mov	r0, r2
 800bd56:	4798      	blx	r3
 800bd58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd5a:	e05d      	b.n	800be18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fa63 	bl	800c22a <USBD_CtlError>
            err++;
 800bd64:	7afb      	ldrb	r3, [r7, #11]
 800bd66:	3301      	adds	r3, #1
 800bd68:	72fb      	strb	r3, [r7, #11]
          break;
 800bd6a:	e055      	b.n	800be18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00b      	beq.n	800bd90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	7c12      	ldrb	r2, [r2, #16]
 800bd84:	f107 0108 	add.w	r1, r7, #8
 800bd88:	4610      	mov	r0, r2
 800bd8a:	4798      	blx	r3
 800bd8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd8e:	e043      	b.n	800be18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd90:	6839      	ldr	r1, [r7, #0]
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 fa49 	bl	800c22a <USBD_CtlError>
            err++;
 800bd98:	7afb      	ldrb	r3, [r7, #11]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd9e:	e03b      	b.n	800be18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00b      	beq.n	800bdc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	7c12      	ldrb	r2, [r2, #16]
 800bdb8:	f107 0108 	add.w	r1, r7, #8
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	4798      	blx	r3
 800bdc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdc2:	e029      	b.n	800be18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa2f 	bl	800c22a <USBD_CtlError>
            err++;
 800bdcc:	7afb      	ldrb	r3, [r7, #11]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	72fb      	strb	r3, [r7, #11]
          break;
 800bdd2:	e021      	b.n	800be18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdda:	699b      	ldr	r3, [r3, #24]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00b      	beq.n	800bdf8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	7c12      	ldrb	r2, [r2, #16]
 800bdec:	f107 0108 	add.w	r1, r7, #8
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	4798      	blx	r3
 800bdf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdf6:	e00f      	b.n	800be18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fa15 	bl	800c22a <USBD_CtlError>
            err++;
 800be00:	7afb      	ldrb	r3, [r7, #11]
 800be02:	3301      	adds	r3, #1
 800be04:	72fb      	strb	r3, [r7, #11]
          break;
 800be06:	e007      	b.n	800be18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fa0d 	bl	800c22a <USBD_CtlError>
          err++;
 800be10:	7afb      	ldrb	r3, [r7, #11]
 800be12:	3301      	adds	r3, #1
 800be14:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800be16:	e038      	b.n	800be8a <USBD_GetDescriptor+0x286>
 800be18:	e037      	b.n	800be8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	7c1b      	ldrb	r3, [r3, #16]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d109      	bne.n	800be36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be2a:	f107 0208 	add.w	r2, r7, #8
 800be2e:	4610      	mov	r0, r2
 800be30:	4798      	blx	r3
 800be32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be34:	e029      	b.n	800be8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 f9f6 	bl	800c22a <USBD_CtlError>
        err++;
 800be3e:	7afb      	ldrb	r3, [r7, #11]
 800be40:	3301      	adds	r3, #1
 800be42:	72fb      	strb	r3, [r7, #11]
      break;
 800be44:	e021      	b.n	800be8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	7c1b      	ldrb	r3, [r3, #16]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10d      	bne.n	800be6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be56:	f107 0208 	add.w	r2, r7, #8
 800be5a:	4610      	mov	r0, r2
 800be5c:	4798      	blx	r3
 800be5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	3301      	adds	r3, #1
 800be64:	2207      	movs	r2, #7
 800be66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be68:	e00f      	b.n	800be8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 f9dc 	bl	800c22a <USBD_CtlError>
        err++;
 800be72:	7afb      	ldrb	r3, [r7, #11]
 800be74:	3301      	adds	r3, #1
 800be76:	72fb      	strb	r3, [r7, #11]
      break;
 800be78:	e007      	b.n	800be8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 f9d4 	bl	800c22a <USBD_CtlError>
      err++;
 800be82:	7afb      	ldrb	r3, [r7, #11]
 800be84:	3301      	adds	r3, #1
 800be86:	72fb      	strb	r3, [r7, #11]
      break;
 800be88:	bf00      	nop
  }

  if (err != 0U)
 800be8a:	7afb      	ldrb	r3, [r7, #11]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d11c      	bne.n	800beca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800be90:	893b      	ldrh	r3, [r7, #8]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d011      	beq.n	800beba <USBD_GetDescriptor+0x2b6>
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	88db      	ldrh	r3, [r3, #6]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00d      	beq.n	800beba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	88da      	ldrh	r2, [r3, #6]
 800bea2:	893b      	ldrh	r3, [r7, #8]
 800bea4:	4293      	cmp	r3, r2
 800bea6:	bf28      	it	cs
 800bea8:	4613      	movcs	r3, r2
 800beaa:	b29b      	uxth	r3, r3
 800beac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800beae:	893b      	ldrh	r3, [r7, #8]
 800beb0:	461a      	mov	r2, r3
 800beb2:	68f9      	ldr	r1, [r7, #12]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fa22 	bl	800c2fe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	88db      	ldrh	r3, [r3, #6]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d104      	bne.n	800becc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fa79 	bl	800c3ba <USBD_CtlSendStatus>
 800bec8:	e000      	b.n	800becc <USBD_GetDescriptor+0x2c8>
    return;
 800beca:	bf00      	nop
    }
  }
}
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop

0800bed4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	889b      	ldrh	r3, [r3, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d130      	bne.n	800bf48 <USBD_SetAddress+0x74>
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	88db      	ldrh	r3, [r3, #6]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d12c      	bne.n	800bf48 <USBD_SetAddress+0x74>
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	885b      	ldrh	r3, [r3, #2]
 800bef2:	2b7f      	cmp	r3, #127	; 0x7f
 800bef4:	d828      	bhi.n	800bf48 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	885b      	ldrh	r3, [r3, #2]
 800befa:	b2db      	uxtb	r3, r3
 800befc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf08:	2b03      	cmp	r3, #3
 800bf0a:	d104      	bne.n	800bf16 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f98b 	bl	800c22a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf14:	e01d      	b.n	800bf52 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	7bfa      	ldrb	r2, [r7, #15]
 800bf1a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 fe48 	bl	800cbb8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 fa46 	bl	800c3ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf2e:	7bfb      	ldrb	r3, [r7, #15]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d004      	beq.n	800bf3e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2202      	movs	r2, #2
 800bf38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf3c:	e009      	b.n	800bf52 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2201      	movs	r2, #1
 800bf42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf46:	e004      	b.n	800bf52 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f96d 	bl	800c22a <USBD_CtlError>
  }
}
 800bf50:	bf00      	nop
 800bf52:	bf00      	nop
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
	...

0800bf5c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	885b      	ldrh	r3, [r3, #2]
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	4b41      	ldr	r3, [pc, #260]	; (800c074 <USBD_SetConfig+0x118>)
 800bf6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf70:	4b40      	ldr	r3, [pc, #256]	; (800c074 <USBD_SetConfig+0x118>)
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d904      	bls.n	800bf82 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f955 	bl	800c22a <USBD_CtlError>
 800bf80:	e075      	b.n	800c06e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d002      	beq.n	800bf92 <USBD_SetConfig+0x36>
 800bf8c:	2b03      	cmp	r3, #3
 800bf8e:	d023      	beq.n	800bfd8 <USBD_SetConfig+0x7c>
 800bf90:	e062      	b.n	800c058 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bf92:	4b38      	ldr	r3, [pc, #224]	; (800c074 <USBD_SetConfig+0x118>)
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d01a      	beq.n	800bfd0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bf9a:	4b36      	ldr	r3, [pc, #216]	; (800c074 <USBD_SetConfig+0x118>)
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2203      	movs	r2, #3
 800bfa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bfac:	4b31      	ldr	r3, [pc, #196]	; (800c074 <USBD_SetConfig+0x118>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7ff f9e7 	bl	800b386 <USBD_SetClassConfig>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d104      	bne.n	800bfc8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 f932 	bl	800c22a <USBD_CtlError>
            return;
 800bfc6:	e052      	b.n	800c06e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f9f6 	bl	800c3ba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bfce:	e04e      	b.n	800c06e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f9f2 	bl	800c3ba <USBD_CtlSendStatus>
        break;
 800bfd6:	e04a      	b.n	800c06e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bfd8:	4b26      	ldr	r3, [pc, #152]	; (800c074 <USBD_SetConfig+0x118>)
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d112      	bne.n	800c006 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bfe8:	4b22      	ldr	r3, [pc, #136]	; (800c074 <USBD_SetConfig+0x118>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	461a      	mov	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bff2:	4b20      	ldr	r3, [pc, #128]	; (800c074 <USBD_SetConfig+0x118>)
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	4619      	mov	r1, r3
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f7ff f9e3 	bl	800b3c4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f9db 	bl	800c3ba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c004:	e033      	b.n	800c06e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c006:	4b1b      	ldr	r3, [pc, #108]	; (800c074 <USBD_SetConfig+0x118>)
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	461a      	mov	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	429a      	cmp	r2, r3
 800c012:	d01d      	beq.n	800c050 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7ff f9d1 	bl	800b3c4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c022:	4b14      	ldr	r3, [pc, #80]	; (800c074 <USBD_SetConfig+0x118>)
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	461a      	mov	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c02c:	4b11      	ldr	r3, [pc, #68]	; (800c074 <USBD_SetConfig+0x118>)
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	4619      	mov	r1, r3
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f7ff f9a7 	bl	800b386 <USBD_SetClassConfig>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d104      	bne.n	800c048 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 f8f2 	bl	800c22a <USBD_CtlError>
            return;
 800c046:	e012      	b.n	800c06e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f9b6 	bl	800c3ba <USBD_CtlSendStatus>
        break;
 800c04e:	e00e      	b.n	800c06e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 f9b2 	bl	800c3ba <USBD_CtlSendStatus>
        break;
 800c056:	e00a      	b.n	800c06e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c058:	6839      	ldr	r1, [r7, #0]
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 f8e5 	bl	800c22a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c060:	4b04      	ldr	r3, [pc, #16]	; (800c074 <USBD_SetConfig+0x118>)
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	4619      	mov	r1, r3
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff f9ac 	bl	800b3c4 <USBD_ClrClassConfig>
        break;
 800c06c:	bf00      	nop
    }
  }
}
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	200002fc 	.word	0x200002fc

0800c078 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	88db      	ldrh	r3, [r3, #6]
 800c086:	2b01      	cmp	r3, #1
 800c088:	d004      	beq.n	800c094 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c08a:	6839      	ldr	r1, [r7, #0]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f8cc 	bl	800c22a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c092:	e022      	b.n	800c0da <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	dc02      	bgt.n	800c0a4 <USBD_GetConfig+0x2c>
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	dc03      	bgt.n	800c0aa <USBD_GetConfig+0x32>
 800c0a2:	e015      	b.n	800c0d0 <USBD_GetConfig+0x58>
 800c0a4:	2b03      	cmp	r3, #3
 800c0a6:	d00b      	beq.n	800c0c0 <USBD_GetConfig+0x48>
 800c0a8:	e012      	b.n	800c0d0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	3308      	adds	r3, #8
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 f920 	bl	800c2fe <USBD_CtlSendData>
        break;
 800c0be:	e00c      	b.n	800c0da <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 f918 	bl	800c2fe <USBD_CtlSendData>
        break;
 800c0ce:	e004      	b.n	800c0da <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f8a9 	bl	800c22a <USBD_CtlError>
        break;
 800c0d8:	bf00      	nop
}
 800c0da:	bf00      	nop
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b082      	sub	sp, #8
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d81e      	bhi.n	800c136 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	88db      	ldrh	r3, [r3, #6]
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	d004      	beq.n	800c10a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f891 	bl	800c22a <USBD_CtlError>
        break;
 800c108:	e01a      	b.n	800c140 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2201      	movs	r2, #1
 800c10e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c116:	2b00      	cmp	r3, #0
 800c118:	d005      	beq.n	800c126 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	f043 0202 	orr.w	r2, r3, #2
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	330c      	adds	r3, #12
 800c12a:	2202      	movs	r2, #2
 800c12c:	4619      	mov	r1, r3
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f8e5 	bl	800c2fe <USBD_CtlSendData>
      break;
 800c134:	e004      	b.n	800c140 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f876 	bl	800c22a <USBD_CtlError>
      break;
 800c13e:	bf00      	nop
  }
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	885b      	ldrh	r3, [r3, #2]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d106      	bne.n	800c168 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2201      	movs	r2, #1
 800c15e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 f929 	bl	800c3ba <USBD_CtlSendStatus>
  }
}
 800c168:	bf00      	nop
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c180:	3b01      	subs	r3, #1
 800c182:	2b02      	cmp	r3, #2
 800c184:	d80b      	bhi.n	800c19e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	885b      	ldrh	r3, [r3, #2]
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d10c      	bne.n	800c1a8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 f90f 	bl	800c3ba <USBD_CtlSendStatus>
      }
      break;
 800c19c:	e004      	b.n	800c1a8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 f842 	bl	800c22a <USBD_CtlError>
      break;
 800c1a6:	e000      	b.n	800c1aa <USBD_ClrFeature+0x3a>
      break;
 800c1a8:	bf00      	nop
  }
}
 800c1aa:	bf00      	nop
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c1b2:	b480      	push	{r7}
 800c1b4:	b083      	sub	sp, #12
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	781a      	ldrb	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	785a      	ldrb	r2, [r3, #1]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	3302      	adds	r3, #2
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	3303      	adds	r3, #3
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	021b      	lsls	r3, r3, #8
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	4413      	add	r3, r2
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	3305      	adds	r3, #5
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	021b      	lsls	r3, r3, #8
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	4413      	add	r3, r2
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	3306      	adds	r3, #6
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	3307      	adds	r3, #7
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	b29b      	uxth	r3, r3
 800c214:	021b      	lsls	r3, r3, #8
 800c216:	b29b      	uxth	r3, r3
 800c218:	4413      	add	r3, r2
 800c21a:	b29a      	uxth	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	80da      	strh	r2, [r3, #6]

}
 800c220:	bf00      	nop
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	bc80      	pop	{r7}
 800c228:	4770      	bx	lr

0800c22a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b082      	sub	sp, #8
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c234:	2180      	movs	r1, #128	; 0x80
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fc54 	bl	800cae4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c23c:	2100      	movs	r1, #0
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 fc50 	bl	800cae4 <USBD_LL_StallEP>
}
 800c244:	bf00      	nop
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b086      	sub	sp, #24
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c258:	2300      	movs	r3, #0
 800c25a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d032      	beq.n	800c2c8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f000 f834 	bl	800c2d0 <USBD_GetLen>
 800c268:	4603      	mov	r3, r0
 800c26a:	3301      	adds	r3, #1
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	005b      	lsls	r3, r3, #1
 800c270:	b29a      	uxth	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c276:	7dfb      	ldrb	r3, [r7, #23]
 800c278:	1c5a      	adds	r2, r3, #1
 800c27a:	75fa      	strb	r2, [r7, #23]
 800c27c:	461a      	mov	r2, r3
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	4413      	add	r3, r2
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	7812      	ldrb	r2, [r2, #0]
 800c286:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c288:	7dfb      	ldrb	r3, [r7, #23]
 800c28a:	1c5a      	adds	r2, r3, #1
 800c28c:	75fa      	strb	r2, [r7, #23]
 800c28e:	461a      	mov	r2, r3
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	4413      	add	r3, r2
 800c294:	2203      	movs	r2, #3
 800c296:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c298:	e012      	b.n	800c2c0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	1c5a      	adds	r2, r3, #1
 800c29e:	60fa      	str	r2, [r7, #12]
 800c2a0:	7dfa      	ldrb	r2, [r7, #23]
 800c2a2:	1c51      	adds	r1, r2, #1
 800c2a4:	75f9      	strb	r1, [r7, #23]
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	68ba      	ldr	r2, [r7, #8]
 800c2aa:	440a      	add	r2, r1
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
 800c2b2:	1c5a      	adds	r2, r3, #1
 800c2b4:	75fa      	strb	r2, [r7, #23]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	2200      	movs	r2, #0
 800c2be:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d1e8      	bne.n	800c29a <USBD_GetString+0x4e>
    }
  }
}
 800c2c8:	bf00      	nop
 800c2ca:	3718      	adds	r7, #24
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c2dc:	e005      	b.n	800c2ea <USBD_GetLen+0x1a>
  {
    len++;
 800c2de:	7bfb      	ldrb	r3, [r7, #15]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1f5      	bne.n	800c2de <USBD_GetLen+0xe>
  }

  return len;
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3714      	adds	r7, #20
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bc80      	pop	{r7}
 800c2fc:	4770      	bx	lr

0800c2fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b084      	sub	sp, #16
 800c302:	af00      	add	r7, sp, #0
 800c304:	60f8      	str	r0, [r7, #12]
 800c306:	60b9      	str	r1, [r7, #8]
 800c308:	4613      	mov	r3, r2
 800c30a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2202      	movs	r2, #2
 800c310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c314:	88fa      	ldrh	r2, [r7, #6]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c31a:	88fa      	ldrh	r2, [r7, #6]
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c320:	88fb      	ldrh	r3, [r7, #6]
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	2100      	movs	r1, #0
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f000 fc65 	bl	800cbf6 <USBD_LL_Transmit>

  return USBD_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b084      	sub	sp, #16
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	60f8      	str	r0, [r7, #12]
 800c33e:	60b9      	str	r1, [r7, #8]
 800c340:	4613      	mov	r3, r2
 800c342:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c344:	88fb      	ldrh	r3, [r7, #6]
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	2100      	movs	r1, #0
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	f000 fc53 	bl	800cbf6 <USBD_LL_Transmit>

  return USBD_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b084      	sub	sp, #16
 800c35e:	af00      	add	r7, sp, #0
 800c360:	60f8      	str	r0, [r7, #12]
 800c362:	60b9      	str	r1, [r7, #8]
 800c364:	4613      	mov	r3, r2
 800c366:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2203      	movs	r2, #3
 800c36c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c370:	88fa      	ldrh	r2, [r7, #6]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c378:	88fa      	ldrh	r2, [r7, #6]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c380:	88fb      	ldrh	r3, [r7, #6]
 800c382:	68ba      	ldr	r2, [r7, #8]
 800c384:	2100      	movs	r1, #0
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f000 fc58 	bl	800cc3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c396:	b580      	push	{r7, lr}
 800c398:	b084      	sub	sp, #16
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	60f8      	str	r0, [r7, #12]
 800c39e:	60b9      	str	r1, [r7, #8]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3a4:	88fb      	ldrh	r3, [r7, #6]
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f000 fc46 	bl	800cc3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b082      	sub	sp, #8
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2204      	movs	r2, #4
 800c3c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fc10 	bl	800cbf6 <USBD_LL_Transmit>

  return USBD_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2205      	movs	r2, #5
 800c3ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 fc20 	bl	800cc3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3708      	adds	r7, #8
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
	...

0800c408 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c40c:	2200      	movs	r2, #0
 800c40e:	4912      	ldr	r1, [pc, #72]	; (800c458 <MX_USB_DEVICE_Init+0x50>)
 800c410:	4812      	ldr	r0, [pc, #72]	; (800c45c <MX_USB_DEVICE_Init+0x54>)
 800c412:	f7fe ff5e 	bl	800b2d2 <USBD_Init>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d001      	beq.n	800c420 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c41c:	f7f6 fef4 	bl	8003208 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c420:	490f      	ldr	r1, [pc, #60]	; (800c460 <MX_USB_DEVICE_Init+0x58>)
 800c422:	480e      	ldr	r0, [pc, #56]	; (800c45c <MX_USB_DEVICE_Init+0x54>)
 800c424:	f7fe ff80 	bl	800b328 <USBD_RegisterClass>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c42e:	f7f6 feeb 	bl	8003208 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c432:	490c      	ldr	r1, [pc, #48]	; (800c464 <MX_USB_DEVICE_Init+0x5c>)
 800c434:	4809      	ldr	r0, [pc, #36]	; (800c45c <MX_USB_DEVICE_Init+0x54>)
 800c436:	f7fe feb1 	bl	800b19c <USBD_CDC_RegisterInterface>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d001      	beq.n	800c444 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c440:	f7f6 fee2 	bl	8003208 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c444:	4805      	ldr	r0, [pc, #20]	; (800c45c <MX_USB_DEVICE_Init+0x54>)
 800c446:	f7fe ff88 	bl	800b35a <USBD_Start>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d001      	beq.n	800c454 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c450:	f7f6 feda 	bl	8003208 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c454:	bf00      	nop
 800c456:	bd80      	pop	{r7, pc}
 800c458:	20000164 	.word	0x20000164
 800c45c:	20000710 	.word	0x20000710
 800c460:	20000050 	.word	0x20000050
 800c464:	20000154 	.word	0x20000154

0800c468 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c46c:	2200      	movs	r2, #0
 800c46e:	4905      	ldr	r1, [pc, #20]	; (800c484 <CDC_Init_FS+0x1c>)
 800c470:	4805      	ldr	r0, [pc, #20]	; (800c488 <CDC_Init_FS+0x20>)
 800c472:	f7fe fea9 	bl	800b1c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c476:	4905      	ldr	r1, [pc, #20]	; (800c48c <CDC_Init_FS+0x24>)
 800c478:	4803      	ldr	r0, [pc, #12]	; (800c488 <CDC_Init_FS+0x20>)
 800c47a:	f7fe febe 	bl	800b1fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c47e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c480:	4618      	mov	r0, r3
 800c482:	bd80      	pop	{r7, pc}
 800c484:	20000dbc 	.word	0x20000dbc
 800c488:	20000710 	.word	0x20000710
 800c48c:	200009d4 	.word	0x200009d4

0800c490 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c490:	b480      	push	{r7}
 800c492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c494:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c496:	4618      	mov	r0, r3
 800c498:	46bd      	mov	sp, r7
 800c49a:	bc80      	pop	{r7}
 800c49c:	4770      	bx	lr
	...

0800c4a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	6039      	str	r1, [r7, #0]
 800c4aa:	71fb      	strb	r3, [r7, #7]
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c4b0:	79fb      	ldrb	r3, [r7, #7]
 800c4b2:	2b23      	cmp	r3, #35	; 0x23
 800c4b4:	d84a      	bhi.n	800c54c <CDC_Control_FS+0xac>
 800c4b6:	a201      	add	r2, pc, #4	; (adr r2, 800c4bc <CDC_Control_FS+0x1c>)
 800c4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4bc:	0800c54d 	.word	0x0800c54d
 800c4c0:	0800c54d 	.word	0x0800c54d
 800c4c4:	0800c54d 	.word	0x0800c54d
 800c4c8:	0800c54d 	.word	0x0800c54d
 800c4cc:	0800c54d 	.word	0x0800c54d
 800c4d0:	0800c54d 	.word	0x0800c54d
 800c4d4:	0800c54d 	.word	0x0800c54d
 800c4d8:	0800c54d 	.word	0x0800c54d
 800c4dc:	0800c54d 	.word	0x0800c54d
 800c4e0:	0800c54d 	.word	0x0800c54d
 800c4e4:	0800c54d 	.word	0x0800c54d
 800c4e8:	0800c54d 	.word	0x0800c54d
 800c4ec:	0800c54d 	.word	0x0800c54d
 800c4f0:	0800c54d 	.word	0x0800c54d
 800c4f4:	0800c54d 	.word	0x0800c54d
 800c4f8:	0800c54d 	.word	0x0800c54d
 800c4fc:	0800c54d 	.word	0x0800c54d
 800c500:	0800c54d 	.word	0x0800c54d
 800c504:	0800c54d 	.word	0x0800c54d
 800c508:	0800c54d 	.word	0x0800c54d
 800c50c:	0800c54d 	.word	0x0800c54d
 800c510:	0800c54d 	.word	0x0800c54d
 800c514:	0800c54d 	.word	0x0800c54d
 800c518:	0800c54d 	.word	0x0800c54d
 800c51c:	0800c54d 	.word	0x0800c54d
 800c520:	0800c54d 	.word	0x0800c54d
 800c524:	0800c54d 	.word	0x0800c54d
 800c528:	0800c54d 	.word	0x0800c54d
 800c52c:	0800c54d 	.word	0x0800c54d
 800c530:	0800c54d 	.word	0x0800c54d
 800c534:	0800c54d 	.word	0x0800c54d
 800c538:	0800c54d 	.word	0x0800c54d
 800c53c:	0800c54d 	.word	0x0800c54d
 800c540:	0800c54d 	.word	0x0800c54d
 800c544:	0800c54d 	.word	0x0800c54d
 800c548:	0800c54d 	.word	0x0800c54d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c54c:	bf00      	nop
  }

  return (USBD_OK);
 800c54e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c550:	4618      	mov	r0, r3
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	bc80      	pop	{r7}
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop

0800c55c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c566:	6879      	ldr	r1, [r7, #4]
 800c568:	4805      	ldr	r0, [pc, #20]	; (800c580 <CDC_Receive_FS+0x24>)
 800c56a:	f7fe fe46 	bl	800b1fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c56e:	4804      	ldr	r0, [pc, #16]	; (800c580 <CDC_Receive_FS+0x24>)
 800c570:	f7fe fe85 	bl	800b27e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c574:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c576:	4618      	mov	r0, r3
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	20000710 	.word	0x20000710

0800c584 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c594:	4b0d      	ldr	r3, [pc, #52]	; (800c5cc <CDC_Transmit_FS+0x48>)
 800c596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c59a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e00b      	b.n	800c5c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c5aa:	887b      	ldrh	r3, [r7, #2]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	4806      	ldr	r0, [pc, #24]	; (800c5cc <CDC_Transmit_FS+0x48>)
 800c5b2:	f7fe fe09 	bl	800b1c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c5b6:	4805      	ldr	r0, [pc, #20]	; (800c5cc <CDC_Transmit_FS+0x48>)
 800c5b8:	f7fe fe32 	bl	800b220 <USBD_CDC_TransmitPacket>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	20000710 	.word	0x20000710

0800c5d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	6039      	str	r1, [r7, #0]
 800c5da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2212      	movs	r2, #18
 800c5e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c5e2:	4b03      	ldr	r3, [pc, #12]	; (800c5f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bc80      	pop	{r7}
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	20000180 	.word	0x20000180

0800c5f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	6039      	str	r1, [r7, #0]
 800c5fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2204      	movs	r2, #4
 800c604:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c606:	4b03      	ldr	r3, [pc, #12]	; (800c614 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c608:	4618      	mov	r0, r3
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bc80      	pop	{r7}
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	20000194 	.word	0x20000194

0800c618 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	4603      	mov	r3, r0
 800c620:	6039      	str	r1, [r7, #0]
 800c622:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c624:	79fb      	ldrb	r3, [r7, #7]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d105      	bne.n	800c636 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c62a:	683a      	ldr	r2, [r7, #0]
 800c62c:	4907      	ldr	r1, [pc, #28]	; (800c64c <USBD_FS_ProductStrDescriptor+0x34>)
 800c62e:	4808      	ldr	r0, [pc, #32]	; (800c650 <USBD_FS_ProductStrDescriptor+0x38>)
 800c630:	f7ff fe0c 	bl	800c24c <USBD_GetString>
 800c634:	e004      	b.n	800c640 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c636:	683a      	ldr	r2, [r7, #0]
 800c638:	4904      	ldr	r1, [pc, #16]	; (800c64c <USBD_FS_ProductStrDescriptor+0x34>)
 800c63a:	4805      	ldr	r0, [pc, #20]	; (800c650 <USBD_FS_ProductStrDescriptor+0x38>)
 800c63c:	f7ff fe06 	bl	800c24c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c640:	4b02      	ldr	r3, [pc, #8]	; (800c64c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	200011a4 	.word	0x200011a4
 800c650:	0800d8dc 	.word	0x0800d8dc

0800c654 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	4603      	mov	r3, r0
 800c65c:	6039      	str	r1, [r7, #0]
 800c65e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c660:	683a      	ldr	r2, [r7, #0]
 800c662:	4904      	ldr	r1, [pc, #16]	; (800c674 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c664:	4804      	ldr	r0, [pc, #16]	; (800c678 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c666:	f7ff fdf1 	bl	800c24c <USBD_GetString>
  return USBD_StrDesc;
 800c66a:	4b02      	ldr	r3, [pc, #8]	; (800c674 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	200011a4 	.word	0x200011a4
 800c678:	0800d8f4 	.word	0x0800d8f4

0800c67c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	4603      	mov	r3, r0
 800c684:	6039      	str	r1, [r7, #0]
 800c686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	221a      	movs	r2, #26
 800c68c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c68e:	f000 f843 	bl	800c718 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c692:	4b02      	ldr	r3, [pc, #8]	; (800c69c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c694:	4618      	mov	r0, r3
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	20000198 	.word	0x20000198

0800c6a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	6039      	str	r1, [r7, #0]
 800c6aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c6ac:	79fb      	ldrb	r3, [r7, #7]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d105      	bne.n	800c6be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6b2:	683a      	ldr	r2, [r7, #0]
 800c6b4:	4907      	ldr	r1, [pc, #28]	; (800c6d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6b6:	4808      	ldr	r0, [pc, #32]	; (800c6d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6b8:	f7ff fdc8 	bl	800c24c <USBD_GetString>
 800c6bc:	e004      	b.n	800c6c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6be:	683a      	ldr	r2, [r7, #0]
 800c6c0:	4904      	ldr	r1, [pc, #16]	; (800c6d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6c2:	4805      	ldr	r0, [pc, #20]	; (800c6d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6c4:	f7ff fdc2 	bl	800c24c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6c8:	4b02      	ldr	r3, [pc, #8]	; (800c6d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	200011a4 	.word	0x200011a4
 800c6d8:	0800d908 	.word	0x0800d908

0800c6dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	6039      	str	r1, [r7, #0]
 800c6e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6e8:	79fb      	ldrb	r3, [r7, #7]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d105      	bne.n	800c6fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c6ee:	683a      	ldr	r2, [r7, #0]
 800c6f0:	4907      	ldr	r1, [pc, #28]	; (800c710 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c6f2:	4808      	ldr	r0, [pc, #32]	; (800c714 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c6f4:	f7ff fdaa 	bl	800c24c <USBD_GetString>
 800c6f8:	e004      	b.n	800c704 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c6fa:	683a      	ldr	r2, [r7, #0]
 800c6fc:	4904      	ldr	r1, [pc, #16]	; (800c710 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c6fe:	4805      	ldr	r0, [pc, #20]	; (800c714 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c700:	f7ff fda4 	bl	800c24c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c704:	4b02      	ldr	r3, [pc, #8]	; (800c710 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c706:	4618      	mov	r0, r3
 800c708:	3708      	adds	r7, #8
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	200011a4 	.word	0x200011a4
 800c714:	0800d914 	.word	0x0800d914

0800c718 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c71e:	4b0f      	ldr	r3, [pc, #60]	; (800c75c <Get_SerialNum+0x44>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c724:	4b0e      	ldr	r3, [pc, #56]	; (800c760 <Get_SerialNum+0x48>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c72a:	4b0e      	ldr	r3, [pc, #56]	; (800c764 <Get_SerialNum+0x4c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4413      	add	r3, r2
 800c736:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d009      	beq.n	800c752 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c73e:	2208      	movs	r2, #8
 800c740:	4909      	ldr	r1, [pc, #36]	; (800c768 <Get_SerialNum+0x50>)
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f000 f814 	bl	800c770 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c748:	2204      	movs	r2, #4
 800c74a:	4908      	ldr	r1, [pc, #32]	; (800c76c <Get_SerialNum+0x54>)
 800c74c:	68b8      	ldr	r0, [r7, #8]
 800c74e:	f000 f80f 	bl	800c770 <IntToUnicode>
  }
}
 800c752:	bf00      	nop
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	1ffff7e8 	.word	0x1ffff7e8
 800c760:	1ffff7ec 	.word	0x1ffff7ec
 800c764:	1ffff7f0 	.word	0x1ffff7f0
 800c768:	2000019a 	.word	0x2000019a
 800c76c:	200001aa 	.word	0x200001aa

0800c770 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c770:	b480      	push	{r7}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	4613      	mov	r3, r2
 800c77c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c782:	2300      	movs	r3, #0
 800c784:	75fb      	strb	r3, [r7, #23]
 800c786:	e027      	b.n	800c7d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	0f1b      	lsrs	r3, r3, #28
 800c78c:	2b09      	cmp	r3, #9
 800c78e:	d80b      	bhi.n	800c7a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	0f1b      	lsrs	r3, r3, #28
 800c794:	b2da      	uxtb	r2, r3
 800c796:	7dfb      	ldrb	r3, [r7, #23]
 800c798:	005b      	lsls	r3, r3, #1
 800c79a:	4619      	mov	r1, r3
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	440b      	add	r3, r1
 800c7a0:	3230      	adds	r2, #48	; 0x30
 800c7a2:	b2d2      	uxtb	r2, r2
 800c7a4:	701a      	strb	r2, [r3, #0]
 800c7a6:	e00a      	b.n	800c7be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	0f1b      	lsrs	r3, r3, #28
 800c7ac:	b2da      	uxtb	r2, r3
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	440b      	add	r3, r1
 800c7b8:	3237      	adds	r2, #55	; 0x37
 800c7ba:	b2d2      	uxtb	r2, r2
 800c7bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	011b      	lsls	r3, r3, #4
 800c7c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c7c4:	7dfb      	ldrb	r3, [r7, #23]
 800c7c6:	005b      	lsls	r3, r3, #1
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c7d2:	7dfb      	ldrb	r3, [r7, #23]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	75fb      	strb	r3, [r7, #23]
 800c7d8:	7dfa      	ldrb	r2, [r7, #23]
 800c7da:	79fb      	ldrb	r3, [r7, #7]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d3d3      	bcc.n	800c788 <IntToUnicode+0x18>
  }
}
 800c7e0:	bf00      	nop
 800c7e2:	bf00      	nop
 800c7e4:	371c      	adds	r7, #28
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bc80      	pop	{r7}
 800c7ea:	4770      	bx	lr

0800c7ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a0d      	ldr	r2, [pc, #52]	; (800c830 <HAL_PCD_MspInit+0x44>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d113      	bne.n	800c826 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c7fe:	4b0d      	ldr	r3, [pc, #52]	; (800c834 <HAL_PCD_MspInit+0x48>)
 800c800:	69db      	ldr	r3, [r3, #28]
 800c802:	4a0c      	ldr	r2, [pc, #48]	; (800c834 <HAL_PCD_MspInit+0x48>)
 800c804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c808:	61d3      	str	r3, [r2, #28]
 800c80a:	4b0a      	ldr	r3, [pc, #40]	; (800c834 <HAL_PCD_MspInit+0x48>)
 800c80c:	69db      	ldr	r3, [r3, #28]
 800c80e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c816:	2200      	movs	r2, #0
 800c818:	2100      	movs	r1, #0
 800c81a:	2014      	movs	r0, #20
 800c81c:	f7f7 faa7 	bl	8003d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c820:	2014      	movs	r0, #20
 800c822:	f7f7 fac0 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c826:	bf00      	nop
 800c828:	3710      	adds	r7, #16
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	40005c00 	.word	0x40005c00
 800c834:	40021000 	.word	0x40021000

0800c838 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c84c:	4619      	mov	r1, r3
 800c84e:	4610      	mov	r0, r2
 800c850:	f7fe fdcb 	bl	800b3ea <USBD_LL_SetupStage>
}
 800c854:	bf00      	nop
 800c856:	3708      	adds	r7, #8
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	460b      	mov	r3, r1
 800c866:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c86e:	78fa      	ldrb	r2, [r7, #3]
 800c870:	6879      	ldr	r1, [r7, #4]
 800c872:	4613      	mov	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	00db      	lsls	r3, r3, #3
 800c87a:	440b      	add	r3, r1
 800c87c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	78fb      	ldrb	r3, [r7, #3]
 800c884:	4619      	mov	r1, r3
 800c886:	f7fe fdfd 	bl	800b484 <USBD_LL_DataOutStage>
}
 800c88a:	bf00      	nop
 800c88c:	3708      	adds	r7, #8
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b082      	sub	sp, #8
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	460b      	mov	r3, r1
 800c89c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c8a4:	78fa      	ldrb	r2, [r7, #3]
 800c8a6:	6879      	ldr	r1, [r7, #4]
 800c8a8:	4613      	mov	r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	4413      	add	r3, r2
 800c8ae:	00db      	lsls	r3, r3, #3
 800c8b0:	440b      	add	r3, r1
 800c8b2:	333c      	adds	r3, #60	; 0x3c
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	78fb      	ldrb	r3, [r7, #3]
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	f7fe fe54 	bl	800b566 <USBD_LL_DataInStage>
}
 800c8be:	bf00      	nop
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b082      	sub	sp, #8
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fe ff64 	bl	800b7a2 <USBD_LL_SOF>
}
 800c8da:	bf00      	nop
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b084      	sub	sp, #16
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	d001      	beq.n	800c8fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c8f6:	f7f6 fc87 	bl	8003208 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c900:	7bfa      	ldrb	r2, [r7, #15]
 800c902:	4611      	mov	r1, r2
 800c904:	4618      	mov	r0, r3
 800c906:	f7fe ff14 	bl	800b732 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c910:	4618      	mov	r0, r3
 800c912:	f7fe fecd 	bl	800b6b0 <USBD_LL_Reset>
}
 800c916:	bf00      	nop
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
	...

0800c920 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fe ff0e 	bl	800b750 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	699b      	ldr	r3, [r3, #24]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d005      	beq.n	800c948 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c93c:	4b04      	ldr	r3, [pc, #16]	; (800c950 <HAL_PCD_SuspendCallback+0x30>)
 800c93e:	691b      	ldr	r3, [r3, #16]
 800c940:	4a03      	ldr	r2, [pc, #12]	; (800c950 <HAL_PCD_SuspendCallback+0x30>)
 800c942:	f043 0306 	orr.w	r3, r3, #6
 800c946:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c948:	bf00      	nop
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	e000ed00 	.word	0xe000ed00

0800c954 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c962:	4618      	mov	r0, r3
 800c964:	f7fe ff08 	bl	800b778 <USBD_LL_Resume>
}
 800c968:	bf00      	nop
 800c96a:	3708      	adds	r7, #8
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c978:	4a28      	ldr	r2, [pc, #160]	; (800ca1c <USBD_LL_Init+0xac>)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	4a26      	ldr	r2, [pc, #152]	; (800ca1c <USBD_LL_Init+0xac>)
 800c984:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c988:	4b24      	ldr	r3, [pc, #144]	; (800ca1c <USBD_LL_Init+0xac>)
 800c98a:	4a25      	ldr	r2, [pc, #148]	; (800ca20 <USBD_LL_Init+0xb0>)
 800c98c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c98e:	4b23      	ldr	r3, [pc, #140]	; (800ca1c <USBD_LL_Init+0xac>)
 800c990:	2208      	movs	r2, #8
 800c992:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c994:	4b21      	ldr	r3, [pc, #132]	; (800ca1c <USBD_LL_Init+0xac>)
 800c996:	2202      	movs	r2, #2
 800c998:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c99a:	4b20      	ldr	r3, [pc, #128]	; (800ca1c <USBD_LL_Init+0xac>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c9a0:	4b1e      	ldr	r3, [pc, #120]	; (800ca1c <USBD_LL_Init+0xac>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c9a6:	4b1d      	ldr	r3, [pc, #116]	; (800ca1c <USBD_LL_Init+0xac>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c9ac:	481b      	ldr	r0, [pc, #108]	; (800ca1c <USBD_LL_Init+0xac>)
 800c9ae:	f7f7 fe45 	bl	800463c <HAL_PCD_Init>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d001      	beq.n	800c9bc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c9b8:	f7f6 fc26 	bl	8003208 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9c2:	2318      	movs	r3, #24
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	f7f9 fabb 	bl	8005f42 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9d2:	2358      	movs	r3, #88	; 0x58
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	2180      	movs	r1, #128	; 0x80
 800c9d8:	f7f9 fab3 	bl	8005f42 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9e2:	23c0      	movs	r3, #192	; 0xc0
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	2181      	movs	r1, #129	; 0x81
 800c9e8:	f7f9 faab 	bl	8005f42 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	2101      	movs	r1, #1
 800c9fa:	f7f9 faa2 	bl	8005f42 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca08:	2200      	movs	r2, #0
 800ca0a:	2182      	movs	r1, #130	; 0x82
 800ca0c:	f7f9 fa99 	bl	8005f42 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	200013a4 	.word	0x200013a4
 800ca20:	40005c00 	.word	0x40005c00

0800ca24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca30:	2300      	movs	r3, #0
 800ca32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7f7 ff09 	bl	8004852 <HAL_PCD_Start>
 800ca40:	4603      	mov	r3, r0
 800ca42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca44:	7bfb      	ldrb	r3, [r7, #15]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 f94e 	bl	800cce8 <USBD_Get_USB_Status>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b084      	sub	sp, #16
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	4608      	mov	r0, r1
 800ca64:	4611      	mov	r1, r2
 800ca66:	461a      	mov	r2, r3
 800ca68:	4603      	mov	r3, r0
 800ca6a:	70fb      	strb	r3, [r7, #3]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	70bb      	strb	r3, [r7, #2]
 800ca70:	4613      	mov	r3, r2
 800ca72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca74:	2300      	movs	r3, #0
 800ca76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca82:	78bb      	ldrb	r3, [r7, #2]
 800ca84:	883a      	ldrh	r2, [r7, #0]
 800ca86:	78f9      	ldrb	r1, [r7, #3]
 800ca88:	f7f8 f883 	bl	8004b92 <HAL_PCD_EP_Open>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca90:	7bfb      	ldrb	r3, [r7, #15]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f000 f928 	bl	800cce8 <USBD_Get_USB_Status>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b084      	sub	sp, #16
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
 800caae:	460b      	mov	r3, r1
 800cab0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cab6:	2300      	movs	r3, #0
 800cab8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cac0:	78fa      	ldrb	r2, [r7, #3]
 800cac2:	4611      	mov	r1, r2
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7f8 f8ca 	bl	8004c5e <HAL_PCD_EP_Close>
 800caca:	4603      	mov	r3, r0
 800cacc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cace:	7bfb      	ldrb	r3, [r7, #15]
 800cad0:	4618      	mov	r0, r3
 800cad2:	f000 f909 	bl	800cce8 <USBD_Get_USB_Status>
 800cad6:	4603      	mov	r3, r0
 800cad8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cada:	7bbb      	ldrb	r3, [r7, #14]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	460b      	mov	r3, r1
 800caee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caf0:	2300      	movs	r3, #0
 800caf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caf4:	2300      	movs	r3, #0
 800caf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cafe:	78fa      	ldrb	r2, [r7, #3]
 800cb00:	4611      	mov	r1, r2
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7f8 f98a 	bl	8004e1c <HAL_PCD_EP_SetStall>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb0c:	7bfb      	ldrb	r3, [r7, #15]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f000 f8ea 	bl	800cce8 <USBD_Get_USB_Status>
 800cb14:	4603      	mov	r3, r0
 800cb16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb18:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b084      	sub	sp, #16
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb3c:	78fa      	ldrb	r2, [r7, #3]
 800cb3e:	4611      	mov	r1, r2
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7f8 f9cb 	bl	8004edc <HAL_PCD_EP_ClrStall>
 800cb46:	4603      	mov	r3, r0
 800cb48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb4a:	7bfb      	ldrb	r3, [r7, #15]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f000 f8cb 	bl	800cce8 <USBD_Get_USB_Status>
 800cb52:	4603      	mov	r3, r0
 800cb54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb56:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3710      	adds	r7, #16
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	460b      	mov	r3, r1
 800cb6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cb74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	da0c      	bge.n	800cb96 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cb7c:	78fb      	ldrb	r3, [r7, #3]
 800cb7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb82:	68f9      	ldr	r1, [r7, #12]
 800cb84:	1c5a      	adds	r2, r3, #1
 800cb86:	4613      	mov	r3, r2
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	4413      	add	r3, r2
 800cb8c:	00db      	lsls	r3, r3, #3
 800cb8e:	440b      	add	r3, r1
 800cb90:	3302      	adds	r3, #2
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	e00b      	b.n	800cbae <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cb96:	78fb      	ldrb	r3, [r7, #3]
 800cb98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb9c:	68f9      	ldr	r1, [r7, #12]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	4413      	add	r3, r2
 800cba4:	00db      	lsls	r3, r3, #3
 800cba6:	440b      	add	r3, r1
 800cba8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cbac:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bc80      	pop	{r7}
 800cbb6:	4770      	bx	lr

0800cbb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbd2:	78fa      	ldrb	r2, [r7, #3]
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7f7 ffb6 	bl	8004b48 <HAL_PCD_SetAddress>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbe0:	7bfb      	ldrb	r3, [r7, #15]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f000 f880 	bl	800cce8 <USBD_Get_USB_Status>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbec:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b086      	sub	sp, #24
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	60f8      	str	r0, [r7, #12]
 800cbfe:	607a      	str	r2, [r7, #4]
 800cc00:	461a      	mov	r2, r3
 800cc02:	460b      	mov	r3, r1
 800cc04:	72fb      	strb	r3, [r7, #11]
 800cc06:	4613      	mov	r3, r2
 800cc08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc18:	893b      	ldrh	r3, [r7, #8]
 800cc1a:	7af9      	ldrb	r1, [r7, #11]
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	f7f8 f8ba 	bl	8004d96 <HAL_PCD_EP_Transmit>
 800cc22:	4603      	mov	r3, r0
 800cc24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc26:	7dfb      	ldrb	r3, [r7, #23]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f000 f85d 	bl	800cce8 <USBD_Get_USB_Status>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc32:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3718      	adds	r7, #24
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b086      	sub	sp, #24
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	607a      	str	r2, [r7, #4]
 800cc46:	461a      	mov	r2, r3
 800cc48:	460b      	mov	r3, r1
 800cc4a:	72fb      	strb	r3, [r7, #11]
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc5e:	893b      	ldrh	r3, [r7, #8]
 800cc60:	7af9      	ldrb	r1, [r7, #11]
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	f7f8 f843 	bl	8004cee <HAL_PCD_EP_Receive>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc6c:	7dfb      	ldrb	r3, [r7, #23]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 f83a 	bl	800cce8 <USBD_Get_USB_Status>
 800cc74:	4603      	mov	r3, r0
 800cc76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc78:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3718      	adds	r7, #24
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b082      	sub	sp, #8
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc94:	78fa      	ldrb	r2, [r7, #3]
 800cc96:	4611      	mov	r1, r2
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7f8 f865 	bl	8004d68 <HAL_PCD_EP_GetRxCount>
 800cc9e:	4603      	mov	r3, r0
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ccb0:	4b02      	ldr	r3, [pc, #8]	; (800ccbc <USBD_static_malloc+0x14>)
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	370c      	adds	r7, #12
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bc80      	pop	{r7}
 800ccba:	4770      	bx	lr
 800ccbc:	20000300 	.word	0x20000300

0800ccc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]

}
 800ccc8:	bf00      	nop
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bc80      	pop	{r7}
 800ccd0:	4770      	bx	lr

0800ccd2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	b083      	sub	sp, #12
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	460b      	mov	r3, r1
 800ccdc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ccde:	bf00      	nop
 800cce0:	370c      	adds	r7, #12
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bc80      	pop	{r7}
 800cce6:	4770      	bx	lr

0800cce8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	4603      	mov	r3, r0
 800ccf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ccf6:	79fb      	ldrb	r3, [r7, #7]
 800ccf8:	2b03      	cmp	r3, #3
 800ccfa:	d817      	bhi.n	800cd2c <USBD_Get_USB_Status+0x44>
 800ccfc:	a201      	add	r2, pc, #4	; (adr r2, 800cd04 <USBD_Get_USB_Status+0x1c>)
 800ccfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd02:	bf00      	nop
 800cd04:	0800cd15 	.word	0x0800cd15
 800cd08:	0800cd1b 	.word	0x0800cd1b
 800cd0c:	0800cd21 	.word	0x0800cd21
 800cd10:	0800cd27 	.word	0x0800cd27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	73fb      	strb	r3, [r7, #15]
    break;
 800cd18:	e00b      	b.n	800cd32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd1a:	2302      	movs	r3, #2
 800cd1c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd1e:	e008      	b.n	800cd32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd20:	2301      	movs	r3, #1
 800cd22:	73fb      	strb	r3, [r7, #15]
    break;
 800cd24:	e005      	b.n	800cd32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd26:	2302      	movs	r3, #2
 800cd28:	73fb      	strb	r3, [r7, #15]
    break;
 800cd2a:	e002      	b.n	800cd32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cd2c:	2302      	movs	r3, #2
 800cd2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd30:	bf00      	nop
  }
  return usb_status;
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bc80      	pop	{r7}
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop

0800cd40 <__errno>:
 800cd40:	4b01      	ldr	r3, [pc, #4]	; (800cd48 <__errno+0x8>)
 800cd42:	6818      	ldr	r0, [r3, #0]
 800cd44:	4770      	bx	lr
 800cd46:	bf00      	nop
 800cd48:	200001b4 	.word	0x200001b4

0800cd4c <__libc_init_array>:
 800cd4c:	b570      	push	{r4, r5, r6, lr}
 800cd4e:	2600      	movs	r6, #0
 800cd50:	4d0c      	ldr	r5, [pc, #48]	; (800cd84 <__libc_init_array+0x38>)
 800cd52:	4c0d      	ldr	r4, [pc, #52]	; (800cd88 <__libc_init_array+0x3c>)
 800cd54:	1b64      	subs	r4, r4, r5
 800cd56:	10a4      	asrs	r4, r4, #2
 800cd58:	42a6      	cmp	r6, r4
 800cd5a:	d109      	bne.n	800cd70 <__libc_init_array+0x24>
 800cd5c:	f000 fc70 	bl	800d640 <_init>
 800cd60:	2600      	movs	r6, #0
 800cd62:	4d0a      	ldr	r5, [pc, #40]	; (800cd8c <__libc_init_array+0x40>)
 800cd64:	4c0a      	ldr	r4, [pc, #40]	; (800cd90 <__libc_init_array+0x44>)
 800cd66:	1b64      	subs	r4, r4, r5
 800cd68:	10a4      	asrs	r4, r4, #2
 800cd6a:	42a6      	cmp	r6, r4
 800cd6c:	d105      	bne.n	800cd7a <__libc_init_array+0x2e>
 800cd6e:	bd70      	pop	{r4, r5, r6, pc}
 800cd70:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd74:	4798      	blx	r3
 800cd76:	3601      	adds	r6, #1
 800cd78:	e7ee      	b.n	800cd58 <__libc_init_array+0xc>
 800cd7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd7e:	4798      	blx	r3
 800cd80:	3601      	adds	r6, #1
 800cd82:	e7f2      	b.n	800cd6a <__libc_init_array+0x1e>
 800cd84:	0800f254 	.word	0x0800f254
 800cd88:	0800f254 	.word	0x0800f254
 800cd8c:	0800f254 	.word	0x0800f254
 800cd90:	0800f258 	.word	0x0800f258

0800cd94 <memset>:
 800cd94:	4603      	mov	r3, r0
 800cd96:	4402      	add	r2, r0
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d100      	bne.n	800cd9e <memset+0xa>
 800cd9c:	4770      	bx	lr
 800cd9e:	f803 1b01 	strb.w	r1, [r3], #1
 800cda2:	e7f9      	b.n	800cd98 <memset+0x4>

0800cda4 <sniprintf>:
 800cda4:	b40c      	push	{r2, r3}
 800cda6:	b530      	push	{r4, r5, lr}
 800cda8:	4b17      	ldr	r3, [pc, #92]	; (800ce08 <sniprintf+0x64>)
 800cdaa:	1e0c      	subs	r4, r1, #0
 800cdac:	681d      	ldr	r5, [r3, #0]
 800cdae:	b09d      	sub	sp, #116	; 0x74
 800cdb0:	da08      	bge.n	800cdc4 <sniprintf+0x20>
 800cdb2:	238b      	movs	r3, #139	; 0x8b
 800cdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb8:	602b      	str	r3, [r5, #0]
 800cdba:	b01d      	add	sp, #116	; 0x74
 800cdbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdc0:	b002      	add	sp, #8
 800cdc2:	4770      	bx	lr
 800cdc4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cdc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cdcc:	bf0c      	ite	eq
 800cdce:	4623      	moveq	r3, r4
 800cdd0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cdd4:	9304      	str	r3, [sp, #16]
 800cdd6:	9307      	str	r3, [sp, #28]
 800cdd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cddc:	9002      	str	r0, [sp, #8]
 800cdde:	9006      	str	r0, [sp, #24]
 800cde0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cde4:	4628      	mov	r0, r5
 800cde6:	ab21      	add	r3, sp, #132	; 0x84
 800cde8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cdea:	a902      	add	r1, sp, #8
 800cdec:	9301      	str	r3, [sp, #4]
 800cdee:	f000 f869 	bl	800cec4 <_svfiprintf_r>
 800cdf2:	1c43      	adds	r3, r0, #1
 800cdf4:	bfbc      	itt	lt
 800cdf6:	238b      	movlt	r3, #139	; 0x8b
 800cdf8:	602b      	strlt	r3, [r5, #0]
 800cdfa:	2c00      	cmp	r4, #0
 800cdfc:	d0dd      	beq.n	800cdba <sniprintf+0x16>
 800cdfe:	2200      	movs	r2, #0
 800ce00:	9b02      	ldr	r3, [sp, #8]
 800ce02:	701a      	strb	r2, [r3, #0]
 800ce04:	e7d9      	b.n	800cdba <sniprintf+0x16>
 800ce06:	bf00      	nop
 800ce08:	200001b4 	.word	0x200001b4

0800ce0c <__ssputs_r>:
 800ce0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce10:	688e      	ldr	r6, [r1, #8]
 800ce12:	4682      	mov	sl, r0
 800ce14:	429e      	cmp	r6, r3
 800ce16:	460c      	mov	r4, r1
 800ce18:	4690      	mov	r8, r2
 800ce1a:	461f      	mov	r7, r3
 800ce1c:	d838      	bhi.n	800ce90 <__ssputs_r+0x84>
 800ce1e:	898a      	ldrh	r2, [r1, #12]
 800ce20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce24:	d032      	beq.n	800ce8c <__ssputs_r+0x80>
 800ce26:	6825      	ldr	r5, [r4, #0]
 800ce28:	6909      	ldr	r1, [r1, #16]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	eba5 0901 	sub.w	r9, r5, r1
 800ce30:	6965      	ldr	r5, [r4, #20]
 800ce32:	444b      	add	r3, r9
 800ce34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce3c:	106d      	asrs	r5, r5, #1
 800ce3e:	429d      	cmp	r5, r3
 800ce40:	bf38      	it	cc
 800ce42:	461d      	movcc	r5, r3
 800ce44:	0553      	lsls	r3, r2, #21
 800ce46:	d531      	bpl.n	800ceac <__ssputs_r+0xa0>
 800ce48:	4629      	mov	r1, r5
 800ce4a:	f000 fb53 	bl	800d4f4 <_malloc_r>
 800ce4e:	4606      	mov	r6, r0
 800ce50:	b950      	cbnz	r0, 800ce68 <__ssputs_r+0x5c>
 800ce52:	230c      	movs	r3, #12
 800ce54:	f04f 30ff 	mov.w	r0, #4294967295
 800ce58:	f8ca 3000 	str.w	r3, [sl]
 800ce5c:	89a3      	ldrh	r3, [r4, #12]
 800ce5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce62:	81a3      	strh	r3, [r4, #12]
 800ce64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce68:	464a      	mov	r2, r9
 800ce6a:	6921      	ldr	r1, [r4, #16]
 800ce6c:	f000 face 	bl	800d40c <memcpy>
 800ce70:	89a3      	ldrh	r3, [r4, #12]
 800ce72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce7a:	81a3      	strh	r3, [r4, #12]
 800ce7c:	6126      	str	r6, [r4, #16]
 800ce7e:	444e      	add	r6, r9
 800ce80:	6026      	str	r6, [r4, #0]
 800ce82:	463e      	mov	r6, r7
 800ce84:	6165      	str	r5, [r4, #20]
 800ce86:	eba5 0509 	sub.w	r5, r5, r9
 800ce8a:	60a5      	str	r5, [r4, #8]
 800ce8c:	42be      	cmp	r6, r7
 800ce8e:	d900      	bls.n	800ce92 <__ssputs_r+0x86>
 800ce90:	463e      	mov	r6, r7
 800ce92:	4632      	mov	r2, r6
 800ce94:	4641      	mov	r1, r8
 800ce96:	6820      	ldr	r0, [r4, #0]
 800ce98:	f000 fac6 	bl	800d428 <memmove>
 800ce9c:	68a3      	ldr	r3, [r4, #8]
 800ce9e:	6822      	ldr	r2, [r4, #0]
 800cea0:	1b9b      	subs	r3, r3, r6
 800cea2:	4432      	add	r2, r6
 800cea4:	2000      	movs	r0, #0
 800cea6:	60a3      	str	r3, [r4, #8]
 800cea8:	6022      	str	r2, [r4, #0]
 800ceaa:	e7db      	b.n	800ce64 <__ssputs_r+0x58>
 800ceac:	462a      	mov	r2, r5
 800ceae:	f000 fb7b 	bl	800d5a8 <_realloc_r>
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	d1e1      	bne.n	800ce7c <__ssputs_r+0x70>
 800ceb8:	4650      	mov	r0, sl
 800ceba:	6921      	ldr	r1, [r4, #16]
 800cebc:	f000 face 	bl	800d45c <_free_r>
 800cec0:	e7c7      	b.n	800ce52 <__ssputs_r+0x46>
	...

0800cec4 <_svfiprintf_r>:
 800cec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec8:	4698      	mov	r8, r3
 800ceca:	898b      	ldrh	r3, [r1, #12]
 800cecc:	4607      	mov	r7, r0
 800cece:	061b      	lsls	r3, r3, #24
 800ced0:	460d      	mov	r5, r1
 800ced2:	4614      	mov	r4, r2
 800ced4:	b09d      	sub	sp, #116	; 0x74
 800ced6:	d50e      	bpl.n	800cef6 <_svfiprintf_r+0x32>
 800ced8:	690b      	ldr	r3, [r1, #16]
 800ceda:	b963      	cbnz	r3, 800cef6 <_svfiprintf_r+0x32>
 800cedc:	2140      	movs	r1, #64	; 0x40
 800cede:	f000 fb09 	bl	800d4f4 <_malloc_r>
 800cee2:	6028      	str	r0, [r5, #0]
 800cee4:	6128      	str	r0, [r5, #16]
 800cee6:	b920      	cbnz	r0, 800cef2 <_svfiprintf_r+0x2e>
 800cee8:	230c      	movs	r3, #12
 800ceea:	603b      	str	r3, [r7, #0]
 800ceec:	f04f 30ff 	mov.w	r0, #4294967295
 800cef0:	e0d1      	b.n	800d096 <_svfiprintf_r+0x1d2>
 800cef2:	2340      	movs	r3, #64	; 0x40
 800cef4:	616b      	str	r3, [r5, #20]
 800cef6:	2300      	movs	r3, #0
 800cef8:	9309      	str	r3, [sp, #36]	; 0x24
 800cefa:	2320      	movs	r3, #32
 800cefc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf00:	2330      	movs	r3, #48	; 0x30
 800cf02:	f04f 0901 	mov.w	r9, #1
 800cf06:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d0b0 <_svfiprintf_r+0x1ec>
 800cf0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf12:	4623      	mov	r3, r4
 800cf14:	469a      	mov	sl, r3
 800cf16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf1a:	b10a      	cbz	r2, 800cf20 <_svfiprintf_r+0x5c>
 800cf1c:	2a25      	cmp	r2, #37	; 0x25
 800cf1e:	d1f9      	bne.n	800cf14 <_svfiprintf_r+0x50>
 800cf20:	ebba 0b04 	subs.w	fp, sl, r4
 800cf24:	d00b      	beq.n	800cf3e <_svfiprintf_r+0x7a>
 800cf26:	465b      	mov	r3, fp
 800cf28:	4622      	mov	r2, r4
 800cf2a:	4629      	mov	r1, r5
 800cf2c:	4638      	mov	r0, r7
 800cf2e:	f7ff ff6d 	bl	800ce0c <__ssputs_r>
 800cf32:	3001      	adds	r0, #1
 800cf34:	f000 80aa 	beq.w	800d08c <_svfiprintf_r+0x1c8>
 800cf38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf3a:	445a      	add	r2, fp
 800cf3c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf3e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 80a2 	beq.w	800d08c <_svfiprintf_r+0x1c8>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf52:	f10a 0a01 	add.w	sl, sl, #1
 800cf56:	9304      	str	r3, [sp, #16]
 800cf58:	9307      	str	r3, [sp, #28]
 800cf5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf5e:	931a      	str	r3, [sp, #104]	; 0x68
 800cf60:	4654      	mov	r4, sl
 800cf62:	2205      	movs	r2, #5
 800cf64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf68:	4851      	ldr	r0, [pc, #324]	; (800d0b0 <_svfiprintf_r+0x1ec>)
 800cf6a:	f000 fa41 	bl	800d3f0 <memchr>
 800cf6e:	9a04      	ldr	r2, [sp, #16]
 800cf70:	b9d8      	cbnz	r0, 800cfaa <_svfiprintf_r+0xe6>
 800cf72:	06d0      	lsls	r0, r2, #27
 800cf74:	bf44      	itt	mi
 800cf76:	2320      	movmi	r3, #32
 800cf78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf7c:	0711      	lsls	r1, r2, #28
 800cf7e:	bf44      	itt	mi
 800cf80:	232b      	movmi	r3, #43	; 0x2b
 800cf82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf86:	f89a 3000 	ldrb.w	r3, [sl]
 800cf8a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf8c:	d015      	beq.n	800cfba <_svfiprintf_r+0xf6>
 800cf8e:	4654      	mov	r4, sl
 800cf90:	2000      	movs	r0, #0
 800cf92:	f04f 0c0a 	mov.w	ip, #10
 800cf96:	9a07      	ldr	r2, [sp, #28]
 800cf98:	4621      	mov	r1, r4
 800cf9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf9e:	3b30      	subs	r3, #48	; 0x30
 800cfa0:	2b09      	cmp	r3, #9
 800cfa2:	d94e      	bls.n	800d042 <_svfiprintf_r+0x17e>
 800cfa4:	b1b0      	cbz	r0, 800cfd4 <_svfiprintf_r+0x110>
 800cfa6:	9207      	str	r2, [sp, #28]
 800cfa8:	e014      	b.n	800cfd4 <_svfiprintf_r+0x110>
 800cfaa:	eba0 0308 	sub.w	r3, r0, r8
 800cfae:	fa09 f303 	lsl.w	r3, r9, r3
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	46a2      	mov	sl, r4
 800cfb6:	9304      	str	r3, [sp, #16]
 800cfb8:	e7d2      	b.n	800cf60 <_svfiprintf_r+0x9c>
 800cfba:	9b03      	ldr	r3, [sp, #12]
 800cfbc:	1d19      	adds	r1, r3, #4
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	9103      	str	r1, [sp, #12]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	bfbb      	ittet	lt
 800cfc6:	425b      	neglt	r3, r3
 800cfc8:	f042 0202 	orrlt.w	r2, r2, #2
 800cfcc:	9307      	strge	r3, [sp, #28]
 800cfce:	9307      	strlt	r3, [sp, #28]
 800cfd0:	bfb8      	it	lt
 800cfd2:	9204      	strlt	r2, [sp, #16]
 800cfd4:	7823      	ldrb	r3, [r4, #0]
 800cfd6:	2b2e      	cmp	r3, #46	; 0x2e
 800cfd8:	d10c      	bne.n	800cff4 <_svfiprintf_r+0x130>
 800cfda:	7863      	ldrb	r3, [r4, #1]
 800cfdc:	2b2a      	cmp	r3, #42	; 0x2a
 800cfde:	d135      	bne.n	800d04c <_svfiprintf_r+0x188>
 800cfe0:	9b03      	ldr	r3, [sp, #12]
 800cfe2:	3402      	adds	r4, #2
 800cfe4:	1d1a      	adds	r2, r3, #4
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	9203      	str	r2, [sp, #12]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	bfb8      	it	lt
 800cfee:	f04f 33ff 	movlt.w	r3, #4294967295
 800cff2:	9305      	str	r3, [sp, #20]
 800cff4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0c0 <_svfiprintf_r+0x1fc>
 800cff8:	2203      	movs	r2, #3
 800cffa:	4650      	mov	r0, sl
 800cffc:	7821      	ldrb	r1, [r4, #0]
 800cffe:	f000 f9f7 	bl	800d3f0 <memchr>
 800d002:	b140      	cbz	r0, 800d016 <_svfiprintf_r+0x152>
 800d004:	2340      	movs	r3, #64	; 0x40
 800d006:	eba0 000a 	sub.w	r0, r0, sl
 800d00a:	fa03 f000 	lsl.w	r0, r3, r0
 800d00e:	9b04      	ldr	r3, [sp, #16]
 800d010:	3401      	adds	r4, #1
 800d012:	4303      	orrs	r3, r0
 800d014:	9304      	str	r3, [sp, #16]
 800d016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d01a:	2206      	movs	r2, #6
 800d01c:	4825      	ldr	r0, [pc, #148]	; (800d0b4 <_svfiprintf_r+0x1f0>)
 800d01e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d022:	f000 f9e5 	bl	800d3f0 <memchr>
 800d026:	2800      	cmp	r0, #0
 800d028:	d038      	beq.n	800d09c <_svfiprintf_r+0x1d8>
 800d02a:	4b23      	ldr	r3, [pc, #140]	; (800d0b8 <_svfiprintf_r+0x1f4>)
 800d02c:	bb1b      	cbnz	r3, 800d076 <_svfiprintf_r+0x1b2>
 800d02e:	9b03      	ldr	r3, [sp, #12]
 800d030:	3307      	adds	r3, #7
 800d032:	f023 0307 	bic.w	r3, r3, #7
 800d036:	3308      	adds	r3, #8
 800d038:	9303      	str	r3, [sp, #12]
 800d03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d03c:	4433      	add	r3, r6
 800d03e:	9309      	str	r3, [sp, #36]	; 0x24
 800d040:	e767      	b.n	800cf12 <_svfiprintf_r+0x4e>
 800d042:	460c      	mov	r4, r1
 800d044:	2001      	movs	r0, #1
 800d046:	fb0c 3202 	mla	r2, ip, r2, r3
 800d04a:	e7a5      	b.n	800cf98 <_svfiprintf_r+0xd4>
 800d04c:	2300      	movs	r3, #0
 800d04e:	f04f 0c0a 	mov.w	ip, #10
 800d052:	4619      	mov	r1, r3
 800d054:	3401      	adds	r4, #1
 800d056:	9305      	str	r3, [sp, #20]
 800d058:	4620      	mov	r0, r4
 800d05a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d05e:	3a30      	subs	r2, #48	; 0x30
 800d060:	2a09      	cmp	r2, #9
 800d062:	d903      	bls.n	800d06c <_svfiprintf_r+0x1a8>
 800d064:	2b00      	cmp	r3, #0
 800d066:	d0c5      	beq.n	800cff4 <_svfiprintf_r+0x130>
 800d068:	9105      	str	r1, [sp, #20]
 800d06a:	e7c3      	b.n	800cff4 <_svfiprintf_r+0x130>
 800d06c:	4604      	mov	r4, r0
 800d06e:	2301      	movs	r3, #1
 800d070:	fb0c 2101 	mla	r1, ip, r1, r2
 800d074:	e7f0      	b.n	800d058 <_svfiprintf_r+0x194>
 800d076:	ab03      	add	r3, sp, #12
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	462a      	mov	r2, r5
 800d07c:	4638      	mov	r0, r7
 800d07e:	4b0f      	ldr	r3, [pc, #60]	; (800d0bc <_svfiprintf_r+0x1f8>)
 800d080:	a904      	add	r1, sp, #16
 800d082:	f3af 8000 	nop.w
 800d086:	1c42      	adds	r2, r0, #1
 800d088:	4606      	mov	r6, r0
 800d08a:	d1d6      	bne.n	800d03a <_svfiprintf_r+0x176>
 800d08c:	89ab      	ldrh	r3, [r5, #12]
 800d08e:	065b      	lsls	r3, r3, #25
 800d090:	f53f af2c 	bmi.w	800ceec <_svfiprintf_r+0x28>
 800d094:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d096:	b01d      	add	sp, #116	; 0x74
 800d098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09c:	ab03      	add	r3, sp, #12
 800d09e:	9300      	str	r3, [sp, #0]
 800d0a0:	462a      	mov	r2, r5
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	4b05      	ldr	r3, [pc, #20]	; (800d0bc <_svfiprintf_r+0x1f8>)
 800d0a6:	a904      	add	r1, sp, #16
 800d0a8:	f000 f87c 	bl	800d1a4 <_printf_i>
 800d0ac:	e7eb      	b.n	800d086 <_svfiprintf_r+0x1c2>
 800d0ae:	bf00      	nop
 800d0b0:	0800f220 	.word	0x0800f220
 800d0b4:	0800f22a 	.word	0x0800f22a
 800d0b8:	00000000 	.word	0x00000000
 800d0bc:	0800ce0d 	.word	0x0800ce0d
 800d0c0:	0800f226 	.word	0x0800f226

0800d0c4 <_printf_common>:
 800d0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c8:	4616      	mov	r6, r2
 800d0ca:	4699      	mov	r9, r3
 800d0cc:	688a      	ldr	r2, [r1, #8]
 800d0ce:	690b      	ldr	r3, [r1, #16]
 800d0d0:	4607      	mov	r7, r0
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	bfb8      	it	lt
 800d0d6:	4613      	movlt	r3, r2
 800d0d8:	6033      	str	r3, [r6, #0]
 800d0da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0de:	460c      	mov	r4, r1
 800d0e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0e4:	b10a      	cbz	r2, 800d0ea <_printf_common+0x26>
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	6033      	str	r3, [r6, #0]
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	0699      	lsls	r1, r3, #26
 800d0ee:	bf42      	ittt	mi
 800d0f0:	6833      	ldrmi	r3, [r6, #0]
 800d0f2:	3302      	addmi	r3, #2
 800d0f4:	6033      	strmi	r3, [r6, #0]
 800d0f6:	6825      	ldr	r5, [r4, #0]
 800d0f8:	f015 0506 	ands.w	r5, r5, #6
 800d0fc:	d106      	bne.n	800d10c <_printf_common+0x48>
 800d0fe:	f104 0a19 	add.w	sl, r4, #25
 800d102:	68e3      	ldr	r3, [r4, #12]
 800d104:	6832      	ldr	r2, [r6, #0]
 800d106:	1a9b      	subs	r3, r3, r2
 800d108:	42ab      	cmp	r3, r5
 800d10a:	dc28      	bgt.n	800d15e <_printf_common+0x9a>
 800d10c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d110:	1e13      	subs	r3, r2, #0
 800d112:	6822      	ldr	r2, [r4, #0]
 800d114:	bf18      	it	ne
 800d116:	2301      	movne	r3, #1
 800d118:	0692      	lsls	r2, r2, #26
 800d11a:	d42d      	bmi.n	800d178 <_printf_common+0xb4>
 800d11c:	4649      	mov	r1, r9
 800d11e:	4638      	mov	r0, r7
 800d120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d124:	47c0      	blx	r8
 800d126:	3001      	adds	r0, #1
 800d128:	d020      	beq.n	800d16c <_printf_common+0xa8>
 800d12a:	6823      	ldr	r3, [r4, #0]
 800d12c:	68e5      	ldr	r5, [r4, #12]
 800d12e:	f003 0306 	and.w	r3, r3, #6
 800d132:	2b04      	cmp	r3, #4
 800d134:	bf18      	it	ne
 800d136:	2500      	movne	r5, #0
 800d138:	6832      	ldr	r2, [r6, #0]
 800d13a:	f04f 0600 	mov.w	r6, #0
 800d13e:	68a3      	ldr	r3, [r4, #8]
 800d140:	bf08      	it	eq
 800d142:	1aad      	subeq	r5, r5, r2
 800d144:	6922      	ldr	r2, [r4, #16]
 800d146:	bf08      	it	eq
 800d148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d14c:	4293      	cmp	r3, r2
 800d14e:	bfc4      	itt	gt
 800d150:	1a9b      	subgt	r3, r3, r2
 800d152:	18ed      	addgt	r5, r5, r3
 800d154:	341a      	adds	r4, #26
 800d156:	42b5      	cmp	r5, r6
 800d158:	d11a      	bne.n	800d190 <_printf_common+0xcc>
 800d15a:	2000      	movs	r0, #0
 800d15c:	e008      	b.n	800d170 <_printf_common+0xac>
 800d15e:	2301      	movs	r3, #1
 800d160:	4652      	mov	r2, sl
 800d162:	4649      	mov	r1, r9
 800d164:	4638      	mov	r0, r7
 800d166:	47c0      	blx	r8
 800d168:	3001      	adds	r0, #1
 800d16a:	d103      	bne.n	800d174 <_printf_common+0xb0>
 800d16c:	f04f 30ff 	mov.w	r0, #4294967295
 800d170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d174:	3501      	adds	r5, #1
 800d176:	e7c4      	b.n	800d102 <_printf_common+0x3e>
 800d178:	2030      	movs	r0, #48	; 0x30
 800d17a:	18e1      	adds	r1, r4, r3
 800d17c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d180:	1c5a      	adds	r2, r3, #1
 800d182:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d186:	4422      	add	r2, r4
 800d188:	3302      	adds	r3, #2
 800d18a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d18e:	e7c5      	b.n	800d11c <_printf_common+0x58>
 800d190:	2301      	movs	r3, #1
 800d192:	4622      	mov	r2, r4
 800d194:	4649      	mov	r1, r9
 800d196:	4638      	mov	r0, r7
 800d198:	47c0      	blx	r8
 800d19a:	3001      	adds	r0, #1
 800d19c:	d0e6      	beq.n	800d16c <_printf_common+0xa8>
 800d19e:	3601      	adds	r6, #1
 800d1a0:	e7d9      	b.n	800d156 <_printf_common+0x92>
	...

0800d1a4 <_printf_i>:
 800d1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a8:	460c      	mov	r4, r1
 800d1aa:	7e27      	ldrb	r7, [r4, #24]
 800d1ac:	4691      	mov	r9, r2
 800d1ae:	2f78      	cmp	r7, #120	; 0x78
 800d1b0:	4680      	mov	r8, r0
 800d1b2:	469a      	mov	sl, r3
 800d1b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d1b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1ba:	d807      	bhi.n	800d1cc <_printf_i+0x28>
 800d1bc:	2f62      	cmp	r7, #98	; 0x62
 800d1be:	d80a      	bhi.n	800d1d6 <_printf_i+0x32>
 800d1c0:	2f00      	cmp	r7, #0
 800d1c2:	f000 80d9 	beq.w	800d378 <_printf_i+0x1d4>
 800d1c6:	2f58      	cmp	r7, #88	; 0x58
 800d1c8:	f000 80a4 	beq.w	800d314 <_printf_i+0x170>
 800d1cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1d4:	e03a      	b.n	800d24c <_printf_i+0xa8>
 800d1d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1da:	2b15      	cmp	r3, #21
 800d1dc:	d8f6      	bhi.n	800d1cc <_printf_i+0x28>
 800d1de:	a001      	add	r0, pc, #4	; (adr r0, 800d1e4 <_printf_i+0x40>)
 800d1e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d1e4:	0800d23d 	.word	0x0800d23d
 800d1e8:	0800d251 	.word	0x0800d251
 800d1ec:	0800d1cd 	.word	0x0800d1cd
 800d1f0:	0800d1cd 	.word	0x0800d1cd
 800d1f4:	0800d1cd 	.word	0x0800d1cd
 800d1f8:	0800d1cd 	.word	0x0800d1cd
 800d1fc:	0800d251 	.word	0x0800d251
 800d200:	0800d1cd 	.word	0x0800d1cd
 800d204:	0800d1cd 	.word	0x0800d1cd
 800d208:	0800d1cd 	.word	0x0800d1cd
 800d20c:	0800d1cd 	.word	0x0800d1cd
 800d210:	0800d35f 	.word	0x0800d35f
 800d214:	0800d281 	.word	0x0800d281
 800d218:	0800d341 	.word	0x0800d341
 800d21c:	0800d1cd 	.word	0x0800d1cd
 800d220:	0800d1cd 	.word	0x0800d1cd
 800d224:	0800d381 	.word	0x0800d381
 800d228:	0800d1cd 	.word	0x0800d1cd
 800d22c:	0800d281 	.word	0x0800d281
 800d230:	0800d1cd 	.word	0x0800d1cd
 800d234:	0800d1cd 	.word	0x0800d1cd
 800d238:	0800d349 	.word	0x0800d349
 800d23c:	680b      	ldr	r3, [r1, #0]
 800d23e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d242:	1d1a      	adds	r2, r3, #4
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	600a      	str	r2, [r1, #0]
 800d248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d24c:	2301      	movs	r3, #1
 800d24e:	e0a4      	b.n	800d39a <_printf_i+0x1f6>
 800d250:	6825      	ldr	r5, [r4, #0]
 800d252:	6808      	ldr	r0, [r1, #0]
 800d254:	062e      	lsls	r6, r5, #24
 800d256:	f100 0304 	add.w	r3, r0, #4
 800d25a:	d50a      	bpl.n	800d272 <_printf_i+0xce>
 800d25c:	6805      	ldr	r5, [r0, #0]
 800d25e:	600b      	str	r3, [r1, #0]
 800d260:	2d00      	cmp	r5, #0
 800d262:	da03      	bge.n	800d26c <_printf_i+0xc8>
 800d264:	232d      	movs	r3, #45	; 0x2d
 800d266:	426d      	negs	r5, r5
 800d268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d26c:	230a      	movs	r3, #10
 800d26e:	485e      	ldr	r0, [pc, #376]	; (800d3e8 <_printf_i+0x244>)
 800d270:	e019      	b.n	800d2a6 <_printf_i+0x102>
 800d272:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d276:	6805      	ldr	r5, [r0, #0]
 800d278:	600b      	str	r3, [r1, #0]
 800d27a:	bf18      	it	ne
 800d27c:	b22d      	sxthne	r5, r5
 800d27e:	e7ef      	b.n	800d260 <_printf_i+0xbc>
 800d280:	680b      	ldr	r3, [r1, #0]
 800d282:	6825      	ldr	r5, [r4, #0]
 800d284:	1d18      	adds	r0, r3, #4
 800d286:	6008      	str	r0, [r1, #0]
 800d288:	0628      	lsls	r0, r5, #24
 800d28a:	d501      	bpl.n	800d290 <_printf_i+0xec>
 800d28c:	681d      	ldr	r5, [r3, #0]
 800d28e:	e002      	b.n	800d296 <_printf_i+0xf2>
 800d290:	0669      	lsls	r1, r5, #25
 800d292:	d5fb      	bpl.n	800d28c <_printf_i+0xe8>
 800d294:	881d      	ldrh	r5, [r3, #0]
 800d296:	2f6f      	cmp	r7, #111	; 0x6f
 800d298:	bf0c      	ite	eq
 800d29a:	2308      	moveq	r3, #8
 800d29c:	230a      	movne	r3, #10
 800d29e:	4852      	ldr	r0, [pc, #328]	; (800d3e8 <_printf_i+0x244>)
 800d2a0:	2100      	movs	r1, #0
 800d2a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d2a6:	6866      	ldr	r6, [r4, #4]
 800d2a8:	2e00      	cmp	r6, #0
 800d2aa:	bfa8      	it	ge
 800d2ac:	6821      	ldrge	r1, [r4, #0]
 800d2ae:	60a6      	str	r6, [r4, #8]
 800d2b0:	bfa4      	itt	ge
 800d2b2:	f021 0104 	bicge.w	r1, r1, #4
 800d2b6:	6021      	strge	r1, [r4, #0]
 800d2b8:	b90d      	cbnz	r5, 800d2be <_printf_i+0x11a>
 800d2ba:	2e00      	cmp	r6, #0
 800d2bc:	d04d      	beq.n	800d35a <_printf_i+0x1b6>
 800d2be:	4616      	mov	r6, r2
 800d2c0:	fbb5 f1f3 	udiv	r1, r5, r3
 800d2c4:	fb03 5711 	mls	r7, r3, r1, r5
 800d2c8:	5dc7      	ldrb	r7, [r0, r7]
 800d2ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d2ce:	462f      	mov	r7, r5
 800d2d0:	42bb      	cmp	r3, r7
 800d2d2:	460d      	mov	r5, r1
 800d2d4:	d9f4      	bls.n	800d2c0 <_printf_i+0x11c>
 800d2d6:	2b08      	cmp	r3, #8
 800d2d8:	d10b      	bne.n	800d2f2 <_printf_i+0x14e>
 800d2da:	6823      	ldr	r3, [r4, #0]
 800d2dc:	07df      	lsls	r7, r3, #31
 800d2de:	d508      	bpl.n	800d2f2 <_printf_i+0x14e>
 800d2e0:	6923      	ldr	r3, [r4, #16]
 800d2e2:	6861      	ldr	r1, [r4, #4]
 800d2e4:	4299      	cmp	r1, r3
 800d2e6:	bfde      	ittt	le
 800d2e8:	2330      	movle	r3, #48	; 0x30
 800d2ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2f2:	1b92      	subs	r2, r2, r6
 800d2f4:	6122      	str	r2, [r4, #16]
 800d2f6:	464b      	mov	r3, r9
 800d2f8:	4621      	mov	r1, r4
 800d2fa:	4640      	mov	r0, r8
 800d2fc:	f8cd a000 	str.w	sl, [sp]
 800d300:	aa03      	add	r2, sp, #12
 800d302:	f7ff fedf 	bl	800d0c4 <_printf_common>
 800d306:	3001      	adds	r0, #1
 800d308:	d14c      	bne.n	800d3a4 <_printf_i+0x200>
 800d30a:	f04f 30ff 	mov.w	r0, #4294967295
 800d30e:	b004      	add	sp, #16
 800d310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d314:	4834      	ldr	r0, [pc, #208]	; (800d3e8 <_printf_i+0x244>)
 800d316:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d31a:	680e      	ldr	r6, [r1, #0]
 800d31c:	6823      	ldr	r3, [r4, #0]
 800d31e:	f856 5b04 	ldr.w	r5, [r6], #4
 800d322:	061f      	lsls	r7, r3, #24
 800d324:	600e      	str	r6, [r1, #0]
 800d326:	d514      	bpl.n	800d352 <_printf_i+0x1ae>
 800d328:	07d9      	lsls	r1, r3, #31
 800d32a:	bf44      	itt	mi
 800d32c:	f043 0320 	orrmi.w	r3, r3, #32
 800d330:	6023      	strmi	r3, [r4, #0]
 800d332:	b91d      	cbnz	r5, 800d33c <_printf_i+0x198>
 800d334:	6823      	ldr	r3, [r4, #0]
 800d336:	f023 0320 	bic.w	r3, r3, #32
 800d33a:	6023      	str	r3, [r4, #0]
 800d33c:	2310      	movs	r3, #16
 800d33e:	e7af      	b.n	800d2a0 <_printf_i+0xfc>
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	f043 0320 	orr.w	r3, r3, #32
 800d346:	6023      	str	r3, [r4, #0]
 800d348:	2378      	movs	r3, #120	; 0x78
 800d34a:	4828      	ldr	r0, [pc, #160]	; (800d3ec <_printf_i+0x248>)
 800d34c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d350:	e7e3      	b.n	800d31a <_printf_i+0x176>
 800d352:	065e      	lsls	r6, r3, #25
 800d354:	bf48      	it	mi
 800d356:	b2ad      	uxthmi	r5, r5
 800d358:	e7e6      	b.n	800d328 <_printf_i+0x184>
 800d35a:	4616      	mov	r6, r2
 800d35c:	e7bb      	b.n	800d2d6 <_printf_i+0x132>
 800d35e:	680b      	ldr	r3, [r1, #0]
 800d360:	6826      	ldr	r6, [r4, #0]
 800d362:	1d1d      	adds	r5, r3, #4
 800d364:	6960      	ldr	r0, [r4, #20]
 800d366:	600d      	str	r5, [r1, #0]
 800d368:	0635      	lsls	r5, r6, #24
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	d501      	bpl.n	800d372 <_printf_i+0x1ce>
 800d36e:	6018      	str	r0, [r3, #0]
 800d370:	e002      	b.n	800d378 <_printf_i+0x1d4>
 800d372:	0671      	lsls	r1, r6, #25
 800d374:	d5fb      	bpl.n	800d36e <_printf_i+0x1ca>
 800d376:	8018      	strh	r0, [r3, #0]
 800d378:	2300      	movs	r3, #0
 800d37a:	4616      	mov	r6, r2
 800d37c:	6123      	str	r3, [r4, #16]
 800d37e:	e7ba      	b.n	800d2f6 <_printf_i+0x152>
 800d380:	680b      	ldr	r3, [r1, #0]
 800d382:	1d1a      	adds	r2, r3, #4
 800d384:	600a      	str	r2, [r1, #0]
 800d386:	681e      	ldr	r6, [r3, #0]
 800d388:	2100      	movs	r1, #0
 800d38a:	4630      	mov	r0, r6
 800d38c:	6862      	ldr	r2, [r4, #4]
 800d38e:	f000 f82f 	bl	800d3f0 <memchr>
 800d392:	b108      	cbz	r0, 800d398 <_printf_i+0x1f4>
 800d394:	1b80      	subs	r0, r0, r6
 800d396:	6060      	str	r0, [r4, #4]
 800d398:	6863      	ldr	r3, [r4, #4]
 800d39a:	6123      	str	r3, [r4, #16]
 800d39c:	2300      	movs	r3, #0
 800d39e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3a2:	e7a8      	b.n	800d2f6 <_printf_i+0x152>
 800d3a4:	4632      	mov	r2, r6
 800d3a6:	4649      	mov	r1, r9
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	6923      	ldr	r3, [r4, #16]
 800d3ac:	47d0      	blx	sl
 800d3ae:	3001      	adds	r0, #1
 800d3b0:	d0ab      	beq.n	800d30a <_printf_i+0x166>
 800d3b2:	6823      	ldr	r3, [r4, #0]
 800d3b4:	079b      	lsls	r3, r3, #30
 800d3b6:	d413      	bmi.n	800d3e0 <_printf_i+0x23c>
 800d3b8:	68e0      	ldr	r0, [r4, #12]
 800d3ba:	9b03      	ldr	r3, [sp, #12]
 800d3bc:	4298      	cmp	r0, r3
 800d3be:	bfb8      	it	lt
 800d3c0:	4618      	movlt	r0, r3
 800d3c2:	e7a4      	b.n	800d30e <_printf_i+0x16a>
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	4632      	mov	r2, r6
 800d3c8:	4649      	mov	r1, r9
 800d3ca:	4640      	mov	r0, r8
 800d3cc:	47d0      	blx	sl
 800d3ce:	3001      	adds	r0, #1
 800d3d0:	d09b      	beq.n	800d30a <_printf_i+0x166>
 800d3d2:	3501      	adds	r5, #1
 800d3d4:	68e3      	ldr	r3, [r4, #12]
 800d3d6:	9903      	ldr	r1, [sp, #12]
 800d3d8:	1a5b      	subs	r3, r3, r1
 800d3da:	42ab      	cmp	r3, r5
 800d3dc:	dcf2      	bgt.n	800d3c4 <_printf_i+0x220>
 800d3de:	e7eb      	b.n	800d3b8 <_printf_i+0x214>
 800d3e0:	2500      	movs	r5, #0
 800d3e2:	f104 0619 	add.w	r6, r4, #25
 800d3e6:	e7f5      	b.n	800d3d4 <_printf_i+0x230>
 800d3e8:	0800f231 	.word	0x0800f231
 800d3ec:	0800f242 	.word	0x0800f242

0800d3f0 <memchr>:
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	b510      	push	{r4, lr}
 800d3f4:	b2c9      	uxtb	r1, r1
 800d3f6:	4402      	add	r2, r0
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	d101      	bne.n	800d402 <memchr+0x12>
 800d3fe:	2000      	movs	r0, #0
 800d400:	e003      	b.n	800d40a <memchr+0x1a>
 800d402:	7804      	ldrb	r4, [r0, #0]
 800d404:	3301      	adds	r3, #1
 800d406:	428c      	cmp	r4, r1
 800d408:	d1f6      	bne.n	800d3f8 <memchr+0x8>
 800d40a:	bd10      	pop	{r4, pc}

0800d40c <memcpy>:
 800d40c:	440a      	add	r2, r1
 800d40e:	4291      	cmp	r1, r2
 800d410:	f100 33ff 	add.w	r3, r0, #4294967295
 800d414:	d100      	bne.n	800d418 <memcpy+0xc>
 800d416:	4770      	bx	lr
 800d418:	b510      	push	{r4, lr}
 800d41a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d41e:	4291      	cmp	r1, r2
 800d420:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d424:	d1f9      	bne.n	800d41a <memcpy+0xe>
 800d426:	bd10      	pop	{r4, pc}

0800d428 <memmove>:
 800d428:	4288      	cmp	r0, r1
 800d42a:	b510      	push	{r4, lr}
 800d42c:	eb01 0402 	add.w	r4, r1, r2
 800d430:	d902      	bls.n	800d438 <memmove+0x10>
 800d432:	4284      	cmp	r4, r0
 800d434:	4623      	mov	r3, r4
 800d436:	d807      	bhi.n	800d448 <memmove+0x20>
 800d438:	1e43      	subs	r3, r0, #1
 800d43a:	42a1      	cmp	r1, r4
 800d43c:	d008      	beq.n	800d450 <memmove+0x28>
 800d43e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d442:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d446:	e7f8      	b.n	800d43a <memmove+0x12>
 800d448:	4601      	mov	r1, r0
 800d44a:	4402      	add	r2, r0
 800d44c:	428a      	cmp	r2, r1
 800d44e:	d100      	bne.n	800d452 <memmove+0x2a>
 800d450:	bd10      	pop	{r4, pc}
 800d452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d45a:	e7f7      	b.n	800d44c <memmove+0x24>

0800d45c <_free_r>:
 800d45c:	b538      	push	{r3, r4, r5, lr}
 800d45e:	4605      	mov	r5, r0
 800d460:	2900      	cmp	r1, #0
 800d462:	d043      	beq.n	800d4ec <_free_r+0x90>
 800d464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d468:	1f0c      	subs	r4, r1, #4
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	bfb8      	it	lt
 800d46e:	18e4      	addlt	r4, r4, r3
 800d470:	f000 f8d0 	bl	800d614 <__malloc_lock>
 800d474:	4a1e      	ldr	r2, [pc, #120]	; (800d4f0 <_free_r+0x94>)
 800d476:	6813      	ldr	r3, [r2, #0]
 800d478:	4610      	mov	r0, r2
 800d47a:	b933      	cbnz	r3, 800d48a <_free_r+0x2e>
 800d47c:	6063      	str	r3, [r4, #4]
 800d47e:	6014      	str	r4, [r2, #0]
 800d480:	4628      	mov	r0, r5
 800d482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d486:	f000 b8cb 	b.w	800d620 <__malloc_unlock>
 800d48a:	42a3      	cmp	r3, r4
 800d48c:	d90a      	bls.n	800d4a4 <_free_r+0x48>
 800d48e:	6821      	ldr	r1, [r4, #0]
 800d490:	1862      	adds	r2, r4, r1
 800d492:	4293      	cmp	r3, r2
 800d494:	bf01      	itttt	eq
 800d496:	681a      	ldreq	r2, [r3, #0]
 800d498:	685b      	ldreq	r3, [r3, #4]
 800d49a:	1852      	addeq	r2, r2, r1
 800d49c:	6022      	streq	r2, [r4, #0]
 800d49e:	6063      	str	r3, [r4, #4]
 800d4a0:	6004      	str	r4, [r0, #0]
 800d4a2:	e7ed      	b.n	800d480 <_free_r+0x24>
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	b10b      	cbz	r3, 800d4ae <_free_r+0x52>
 800d4aa:	42a3      	cmp	r3, r4
 800d4ac:	d9fa      	bls.n	800d4a4 <_free_r+0x48>
 800d4ae:	6811      	ldr	r1, [r2, #0]
 800d4b0:	1850      	adds	r0, r2, r1
 800d4b2:	42a0      	cmp	r0, r4
 800d4b4:	d10b      	bne.n	800d4ce <_free_r+0x72>
 800d4b6:	6820      	ldr	r0, [r4, #0]
 800d4b8:	4401      	add	r1, r0
 800d4ba:	1850      	adds	r0, r2, r1
 800d4bc:	4283      	cmp	r3, r0
 800d4be:	6011      	str	r1, [r2, #0]
 800d4c0:	d1de      	bne.n	800d480 <_free_r+0x24>
 800d4c2:	6818      	ldr	r0, [r3, #0]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	4401      	add	r1, r0
 800d4c8:	6011      	str	r1, [r2, #0]
 800d4ca:	6053      	str	r3, [r2, #4]
 800d4cc:	e7d8      	b.n	800d480 <_free_r+0x24>
 800d4ce:	d902      	bls.n	800d4d6 <_free_r+0x7a>
 800d4d0:	230c      	movs	r3, #12
 800d4d2:	602b      	str	r3, [r5, #0]
 800d4d4:	e7d4      	b.n	800d480 <_free_r+0x24>
 800d4d6:	6820      	ldr	r0, [r4, #0]
 800d4d8:	1821      	adds	r1, r4, r0
 800d4da:	428b      	cmp	r3, r1
 800d4dc:	bf01      	itttt	eq
 800d4de:	6819      	ldreq	r1, [r3, #0]
 800d4e0:	685b      	ldreq	r3, [r3, #4]
 800d4e2:	1809      	addeq	r1, r1, r0
 800d4e4:	6021      	streq	r1, [r4, #0]
 800d4e6:	6063      	str	r3, [r4, #4]
 800d4e8:	6054      	str	r4, [r2, #4]
 800d4ea:	e7c9      	b.n	800d480 <_free_r+0x24>
 800d4ec:	bd38      	pop	{r3, r4, r5, pc}
 800d4ee:	bf00      	nop
 800d4f0:	20000520 	.word	0x20000520

0800d4f4 <_malloc_r>:
 800d4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f6:	1ccd      	adds	r5, r1, #3
 800d4f8:	f025 0503 	bic.w	r5, r5, #3
 800d4fc:	3508      	adds	r5, #8
 800d4fe:	2d0c      	cmp	r5, #12
 800d500:	bf38      	it	cc
 800d502:	250c      	movcc	r5, #12
 800d504:	2d00      	cmp	r5, #0
 800d506:	4606      	mov	r6, r0
 800d508:	db01      	blt.n	800d50e <_malloc_r+0x1a>
 800d50a:	42a9      	cmp	r1, r5
 800d50c:	d903      	bls.n	800d516 <_malloc_r+0x22>
 800d50e:	230c      	movs	r3, #12
 800d510:	6033      	str	r3, [r6, #0]
 800d512:	2000      	movs	r0, #0
 800d514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d516:	f000 f87d 	bl	800d614 <__malloc_lock>
 800d51a:	4921      	ldr	r1, [pc, #132]	; (800d5a0 <_malloc_r+0xac>)
 800d51c:	680a      	ldr	r2, [r1, #0]
 800d51e:	4614      	mov	r4, r2
 800d520:	b99c      	cbnz	r4, 800d54a <_malloc_r+0x56>
 800d522:	4f20      	ldr	r7, [pc, #128]	; (800d5a4 <_malloc_r+0xb0>)
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	b923      	cbnz	r3, 800d532 <_malloc_r+0x3e>
 800d528:	4621      	mov	r1, r4
 800d52a:	4630      	mov	r0, r6
 800d52c:	f000 f862 	bl	800d5f4 <_sbrk_r>
 800d530:	6038      	str	r0, [r7, #0]
 800d532:	4629      	mov	r1, r5
 800d534:	4630      	mov	r0, r6
 800d536:	f000 f85d 	bl	800d5f4 <_sbrk_r>
 800d53a:	1c43      	adds	r3, r0, #1
 800d53c:	d123      	bne.n	800d586 <_malloc_r+0x92>
 800d53e:	230c      	movs	r3, #12
 800d540:	4630      	mov	r0, r6
 800d542:	6033      	str	r3, [r6, #0]
 800d544:	f000 f86c 	bl	800d620 <__malloc_unlock>
 800d548:	e7e3      	b.n	800d512 <_malloc_r+0x1e>
 800d54a:	6823      	ldr	r3, [r4, #0]
 800d54c:	1b5b      	subs	r3, r3, r5
 800d54e:	d417      	bmi.n	800d580 <_malloc_r+0x8c>
 800d550:	2b0b      	cmp	r3, #11
 800d552:	d903      	bls.n	800d55c <_malloc_r+0x68>
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	441c      	add	r4, r3
 800d558:	6025      	str	r5, [r4, #0]
 800d55a:	e004      	b.n	800d566 <_malloc_r+0x72>
 800d55c:	6863      	ldr	r3, [r4, #4]
 800d55e:	42a2      	cmp	r2, r4
 800d560:	bf0c      	ite	eq
 800d562:	600b      	streq	r3, [r1, #0]
 800d564:	6053      	strne	r3, [r2, #4]
 800d566:	4630      	mov	r0, r6
 800d568:	f000 f85a 	bl	800d620 <__malloc_unlock>
 800d56c:	f104 000b 	add.w	r0, r4, #11
 800d570:	1d23      	adds	r3, r4, #4
 800d572:	f020 0007 	bic.w	r0, r0, #7
 800d576:	1ac2      	subs	r2, r0, r3
 800d578:	d0cc      	beq.n	800d514 <_malloc_r+0x20>
 800d57a:	1a1b      	subs	r3, r3, r0
 800d57c:	50a3      	str	r3, [r4, r2]
 800d57e:	e7c9      	b.n	800d514 <_malloc_r+0x20>
 800d580:	4622      	mov	r2, r4
 800d582:	6864      	ldr	r4, [r4, #4]
 800d584:	e7cc      	b.n	800d520 <_malloc_r+0x2c>
 800d586:	1cc4      	adds	r4, r0, #3
 800d588:	f024 0403 	bic.w	r4, r4, #3
 800d58c:	42a0      	cmp	r0, r4
 800d58e:	d0e3      	beq.n	800d558 <_malloc_r+0x64>
 800d590:	1a21      	subs	r1, r4, r0
 800d592:	4630      	mov	r0, r6
 800d594:	f000 f82e 	bl	800d5f4 <_sbrk_r>
 800d598:	3001      	adds	r0, #1
 800d59a:	d1dd      	bne.n	800d558 <_malloc_r+0x64>
 800d59c:	e7cf      	b.n	800d53e <_malloc_r+0x4a>
 800d59e:	bf00      	nop
 800d5a0:	20000520 	.word	0x20000520
 800d5a4:	20000524 	.word	0x20000524

0800d5a8 <_realloc_r>:
 800d5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5aa:	4607      	mov	r7, r0
 800d5ac:	4614      	mov	r4, r2
 800d5ae:	460e      	mov	r6, r1
 800d5b0:	b921      	cbnz	r1, 800d5bc <_realloc_r+0x14>
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d5b8:	f7ff bf9c 	b.w	800d4f4 <_malloc_r>
 800d5bc:	b922      	cbnz	r2, 800d5c8 <_realloc_r+0x20>
 800d5be:	f7ff ff4d 	bl	800d45c <_free_r>
 800d5c2:	4625      	mov	r5, r4
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c8:	f000 f830 	bl	800d62c <_malloc_usable_size_r>
 800d5cc:	42a0      	cmp	r0, r4
 800d5ce:	d20f      	bcs.n	800d5f0 <_realloc_r+0x48>
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	f7ff ff8e 	bl	800d4f4 <_malloc_r>
 800d5d8:	4605      	mov	r5, r0
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d0f2      	beq.n	800d5c4 <_realloc_r+0x1c>
 800d5de:	4631      	mov	r1, r6
 800d5e0:	4622      	mov	r2, r4
 800d5e2:	f7ff ff13 	bl	800d40c <memcpy>
 800d5e6:	4631      	mov	r1, r6
 800d5e8:	4638      	mov	r0, r7
 800d5ea:	f7ff ff37 	bl	800d45c <_free_r>
 800d5ee:	e7e9      	b.n	800d5c4 <_realloc_r+0x1c>
 800d5f0:	4635      	mov	r5, r6
 800d5f2:	e7e7      	b.n	800d5c4 <_realloc_r+0x1c>

0800d5f4 <_sbrk_r>:
 800d5f4:	b538      	push	{r3, r4, r5, lr}
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	4d05      	ldr	r5, [pc, #20]	; (800d610 <_sbrk_r+0x1c>)
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	4608      	mov	r0, r1
 800d5fe:	602b      	str	r3, [r5, #0]
 800d600:	f7f6 f9f6 	bl	80039f0 <_sbrk>
 800d604:	1c43      	adds	r3, r0, #1
 800d606:	d102      	bne.n	800d60e <_sbrk_r+0x1a>
 800d608:	682b      	ldr	r3, [r5, #0]
 800d60a:	b103      	cbz	r3, 800d60e <_sbrk_r+0x1a>
 800d60c:	6023      	str	r3, [r4, #0]
 800d60e:	bd38      	pop	{r3, r4, r5, pc}
 800d610:	20001690 	.word	0x20001690

0800d614 <__malloc_lock>:
 800d614:	4801      	ldr	r0, [pc, #4]	; (800d61c <__malloc_lock+0x8>)
 800d616:	f000 b811 	b.w	800d63c <__retarget_lock_acquire_recursive>
 800d61a:	bf00      	nop
 800d61c:	20001698 	.word	0x20001698

0800d620 <__malloc_unlock>:
 800d620:	4801      	ldr	r0, [pc, #4]	; (800d628 <__malloc_unlock+0x8>)
 800d622:	f000 b80c 	b.w	800d63e <__retarget_lock_release_recursive>
 800d626:	bf00      	nop
 800d628:	20001698 	.word	0x20001698

0800d62c <_malloc_usable_size_r>:
 800d62c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d630:	1f18      	subs	r0, r3, #4
 800d632:	2b00      	cmp	r3, #0
 800d634:	bfbc      	itt	lt
 800d636:	580b      	ldrlt	r3, [r1, r0]
 800d638:	18c0      	addlt	r0, r0, r3
 800d63a:	4770      	bx	lr

0800d63c <__retarget_lock_acquire_recursive>:
 800d63c:	4770      	bx	lr

0800d63e <__retarget_lock_release_recursive>:
 800d63e:	4770      	bx	lr

0800d640 <_init>:
 800d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d642:	bf00      	nop
 800d644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d646:	bc08      	pop	{r3}
 800d648:	469e      	mov	lr, r3
 800d64a:	4770      	bx	lr

0800d64c <_fini>:
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64e:	bf00      	nop
 800d650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d652:	bc08      	pop	{r3}
 800d654:	469e      	mov	lr, r3
 800d656:	4770      	bx	lr
