
HotIron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080096e4  080096e4  000196e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b0  080097b0  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  080097b0  080097b0  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097b0  080097b0  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097b0  080097b0  000197b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097b4  080097b4  000197b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  080097b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001304  20000198  08009950  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000149c  08009950  0002149c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a21c  00000000  00000000  000201c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399b  00000000  00000000  0003a3dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003dd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  0003f010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0a3  00000000  00000000  00040110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164a3  00000000  00000000  0005b1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f285  00000000  00000000  00071656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001008db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c54  00000000  00000000  00100930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000198 	.word	0x20000198
 8000128:	00000000 	.word	0x00000000
 800012c:	080096cc 	.word	0x080096cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000019c 	.word	0x2000019c
 8000148:	080096cc 	.word	0x080096cc

0800014c <delay_init>:
#include "main.h"

TIM_HandleTypeDef * htim;

void delay_init(TIM_HandleTypeDef * htim_i)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	htim = htim_i;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <delay_init+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htim);
 800015a:	4b04      	ldr	r3, [pc, #16]	; (800016c <delay_init+0x20>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4618      	mov	r0, r3
 8000160:	f004 fa28 	bl	80045b4 <HAL_TIM_Base_Start>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000414 	.word	0x20000414

08000170 <delay_us>:

// delays for us count
void delay_us(uint16_t us)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim,0);
 800017a:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <delay_us+0x34>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2200      	movs	r2, #0
 8000182:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(htim) < us);
 8000184:	bf00      	nop
 8000186:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <delay_us+0x34>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800018e:	b29b      	uxth	r3, r3
 8000190:	88fa      	ldrh	r2, [r7, #6]
 8000192:	429a      	cmp	r2, r3
 8000194:	d8f7      	bhi.n	8000186 <delay_us+0x16>
}
 8000196:	bf00      	nop
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000414 	.word	0x20000414

080001a8 <lcd_create>:
 */
LCD_HandleTypeDef lcd_create(
		LCD_PortType port[], LCD_PinType pin[],
		LCD_PortType rs_port, LCD_PinType rs_pin,
		LCD_PortType en_port, LCD_PinType en_pin, LCD_ModeTypeDef mode)
{
 80001a8:	b5b0      	push	{r4, r5, r7, lr}
 80001aa:	b08a      	sub	sp, #40	; 0x28
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
 80001b4:	603b      	str	r3, [r7, #0]
	LCD_HandleTypeDef lcd;

	lcd.mode = mode;
 80001b6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80001ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80001be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80001c2:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80001c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001c6:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80001c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80001ca:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	613b      	str	r3, [r7, #16]

	delay_us(20000); // Display needs about 10ms to start, so you should provide delay
 80001d8:	f644 6020 	movw	r0, #20000	; 0x4e20
 80001dc:	f7ff ffc8 	bl	8000170 <delay_us>

	lcd_init(&lcd);
 80001e0:	f107 0310 	add.w	r3, r7, #16
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f80f 	bl	8000208 <lcd_init>

	return lcd;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	461d      	mov	r5, r3
 80001ee:	f107 0410 	add.w	r4, r7, #16
 80001f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001fa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001fe:	68f8      	ldr	r0, [r7, #12]
 8000200:	3728      	adds	r7, #40	; 0x28
 8000202:	46bd      	mov	sp, r7
 8000204:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000208 <lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void lcd_init(LCD_HandleTypeDef * lcd)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	7d9b      	ldrb	r3, [r3, #22]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d10f      	bne.n	8000238 <lcd_init+0x30>
	{
			lcd_write_command(lcd, 0x33);
 8000218:	2133      	movs	r1, #51	; 0x33
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f000 f8d4 	bl	80003c8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000220:	2132      	movs	r1, #50	; 0x32
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f8d0 	bl	80003c8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000228:	2128      	movs	r1, #40	; 0x28
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f8cc 	bl	80003c8 <lcd_write_command>
			lcd_8line_mode = false;
 8000230:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <lcd_init+0x60>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	e006      	b.n	8000246 <lcd_init+0x3e>
	}
	else
	{
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000238:	2138      	movs	r1, #56	; 0x38
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f000 f8c4 	bl	80003c8 <lcd_write_command>
		lcd_8line_mode = true;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <lcd_init+0x60>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
	}


	lcd_clear(lcd);											// Clear screen
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f000 f88c 	bl	8000364 <lcd_clear>
	lcd_mode(lcd, LCD_ENABLE, CURSOR_DISABLE, NO_BLINK);
 800024c:	2300      	movs	r3, #0
 800024e:	2200      	movs	r2, #0
 8000250:	2101      	movs	r1, #1
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 f80a 	bl	800026c <lcd_mode>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000258:	2106      	movs	r1, #6
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	f000 f8b4 	bl	80003c8 <lcd_write_command>
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000000 	.word	0x20000000

0800026c <lcd_mode>:

/**
 * Set display & cursor mode
 */
void lcd_mode(LCD_HandleTypeDef * lcd, LCD_ONOFF state, LCD_CURSOR cursor, LCD_BLINK blink)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	4608      	mov	r0, r1
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	4603      	mov	r3, r0
 800027c:	70fb      	strb	r3, [r7, #3]
 800027e:	460b      	mov	r3, r1
 8000280:	70bb      	strb	r3, [r7, #2]
 8000282:	4613      	mov	r3, r2
 8000284:	707b      	strb	r3, [r7, #1]
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL |
								 (state ?OPT_D:0) |
 8000286:	78fb      	ldrb	r3, [r7, #3]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <lcd_mode+0x24>
 800028c:	220c      	movs	r2, #12
 800028e:	e000      	b.n	8000292 <lcd_mode+0x26>
 8000290:	2208      	movs	r2, #8
 8000292:	78bb      	ldrb	r3, [r7, #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <lcd_mode+0x30>
 8000298:	2302      	movs	r3, #2
 800029a:	e000      	b.n	800029e <lcd_mode+0x32>
 800029c:	2300      	movs	r3, #0
 800029e:	4313      	orrs	r3, r2
 80002a0:	b25a      	sxtb	r2, r3
								 (cursor?OPT_C:0) |
								 (blink ?OPT_B:0));
 80002a2:	787b      	ldrb	r3, [r7, #1]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	bf14      	ite	ne
 80002a8:	2301      	movne	r3, #1
 80002aa:	2300      	moveq	r3, #0
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	b25b      	sxtb	r3, r3
								 (cursor?OPT_C:0) |
 80002b0:	4313      	orrs	r3, r2
 80002b2:	b25b      	sxtb	r3, r3
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL |
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4619      	mov	r1, r3
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f885 	bl	80003c8 <lcd_write_command>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <lcd_out>:

/**
 * Write a string on the current position
 */
void lcd_out(LCD_HandleTypeDef * lcd, uint8_t * arr, uint8_t length)
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b086      	sub	sp, #24
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	60f8      	str	r0, [r7, #12]
 80002ce:	60b9      	str	r1, [r7, #8]
 80002d0:	4613      	mov	r3, r2
 80002d2:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < length; i++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e00a      	b.n	80002f0 <lcd_out+0x2a>
	{
		lcd_write_data(lcd, arr[i]);
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	4413      	add	r3, r2
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	4619      	mov	r1, r3
 80002e4:	68f8      	ldr	r0, [r7, #12]
 80002e6:	f000 f8a9 	bl	800043c <lcd_write_data>
	for (int i = 0; i < length; i++)
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	3301      	adds	r3, #1
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	697a      	ldr	r2, [r7, #20]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	dbf0      	blt.n	80002da <lcd_out+0x14>
	}
}
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <lcd_string>:

/**
 * Write a string on the current position
 */
void lcd_string(LCD_HandleTypeDef * lcd, char * string)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b082      	sub	sp, #8
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	6039      	str	r1, [r7, #0]
	while (*string)
 800030c:	e007      	b.n	800031e <lcd_string+0x1c>
	{
		lcd_write_data(lcd, (uint8_t)*(string++));
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	1c5a      	adds	r2, r3, #1
 8000312:	603a      	str	r2, [r7, #0]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4619      	mov	r1, r3
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 f88f 	bl	800043c <lcd_write_data>
	while (*string)
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d1f3      	bne.n	800030e <lcd_string+0xc>
	}
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <lcd_set_xy>:

/**
 * Set the cursor position
 */
void lcd_set_xy(LCD_HandleTypeDef * lcd, uint8_t x, uint8_t y)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
 800033c:	4613      	mov	r3, r2
 800033e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[y] + x);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[y] + x);
 8000340:	78bb      	ldrb	r3, [r7, #2]
 8000342:	4a07      	ldr	r2, [pc, #28]	; (8000360 <lcd_set_xy+0x30>)
 8000344:	5cd2      	ldrb	r2, [r2, r3]
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	4413      	add	r3, r2
 800034a:	b2db      	uxtb	r3, r3
 800034c:	3b80      	subs	r3, #128	; 0x80
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4619      	mov	r1, r3
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 f838 	bl	80003c8 <lcd_write_command>
	#endif
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800979c 	.word	0x0800979c

08000364 <lcd_clear>:

/**
 * Clear the screen
 */
void lcd_clear(LCD_HandleTypeDef * lcd) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800036c:	2101      	movs	r1, #1
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f000 f82a 	bl	80003c8 <lcd_write_command>
	delay_us(maxi_delay);
 8000374:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000378:	f7ff fefa 	bl	8000170 <delay_us>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <lcd_define_chars>:
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
}

// load all 8 chars
void lcd_define_chars(LCD_HandleTypeDef * lcd, uint8_t bitmap[]){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
	lcd_write_command(lcd, SETCGRAM_ADDR);
 800038e:	2140      	movs	r1, #64	; 0x40
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f000 f819 	bl	80003c8 <lcd_write_command>
	for(uint8_t i=0;i<64;++i){
 8000396:	2300      	movs	r3, #0
 8000398:	73fb      	strb	r3, [r7, #15]
 800039a:	e00a      	b.n	80003b2 <lcd_define_chars+0x2e>
		lcd_write_data(lcd, bitmap[i]);
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	683a      	ldr	r2, [r7, #0]
 80003a0:	4413      	add	r3, r2
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	4619      	mov	r1, r3
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f000 f848 	bl	800043c <lcd_write_data>
	for(uint8_t i=0;i<64;++i){
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	3301      	adds	r3, #1
 80003b0:	73fb      	strb	r3, [r7, #15]
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	2b3f      	cmp	r3, #63	; 0x3f
 80003b6:	d9f1      	bls.n	800039c <lcd_define_chars+0x18>
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f000 f804 	bl	80003c8 <lcd_write_command>
}
 80003c0:	bf00      	nop
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(LCD_HandleTypeDef * lcd, uint8_t command)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6898      	ldr	r0, [r3, #8]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	899b      	ldrh	r3, [r3, #12]
 80003dc:	2200      	movs	r2, #0
 80003de:	4619      	mov	r1, r3
 80003e0:	f001 fad3 	bl	800198a <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	7d9b      	ldrb	r3, [r3, #22]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d118      	bne.n	800041e <lcd_write_command+0x56>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80003ec:	78fb      	ldrb	r3, [r7, #3]
 80003ee:	091b      	lsrs	r3, r3, #4
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	2204      	movs	r2, #4
 80003f4:	4619      	mov	r1, r3
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f000 f85a 	bl	80004b0 <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <lcd_write_command+0x70>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d002      	beq.n	800040a <lcd_write_command+0x42>
 8000404:	202a      	movs	r0, #42	; 0x2a
 8000406:	f7ff feb3 	bl	8000170 <delay_us>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	f003 030f 	and.w	r3, r3, #15
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2204      	movs	r2, #4
 8000414:	4619      	mov	r1, r3
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f000 f84a 	bl	80004b0 <lcd_write>
 800041c:	e005      	b.n	800042a <lcd_write_command+0x62>
	}
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
 800041e:	78fb      	ldrb	r3, [r7, #3]
 8000420:	2208      	movs	r2, #8
 8000422:	4619      	mov	r1, r3
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f000 f843 	bl	80004b0 <lcd_write>
	}
	delay_us(mini_delay);
 800042a:	202a      	movs	r0, #42	; 0x2a
 800042c:	f7ff fea0 	bl	8000170 <delay_us>
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000000 	.word	0x20000000

0800043c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(LCD_HandleTypeDef * lcd, uint8_t data)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6898      	ldr	r0, [r3, #8]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	899b      	ldrh	r3, [r3, #12]
 8000450:	2201      	movs	r2, #1
 8000452:	4619      	mov	r1, r3
 8000454:	f001 fa99 	bl	800198a <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	7d9b      	ldrb	r3, [r3, #22]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d118      	bne.n	8000492 <lcd_write_data+0x56>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	091b      	lsrs	r3, r3, #4
 8000464:	b2db      	uxtb	r3, r3
 8000466:	2204      	movs	r2, #4
 8000468:	4619      	mov	r1, r3
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f000 f820 	bl	80004b0 <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <lcd_write_data+0x70>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d002      	beq.n	800047e <lcd_write_data+0x42>
 8000478:	202a      	movs	r0, #42	; 0x2a
 800047a:	f7ff fe79 	bl	8000170 <delay_us>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800047e:	78fb      	ldrb	r3, [r7, #3]
 8000480:	f003 030f 	and.w	r3, r3, #15
 8000484:	b2db      	uxtb	r3, r3
 8000486:	2204      	movs	r2, #4
 8000488:	4619      	mov	r1, r3
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f000 f810 	bl	80004b0 <lcd_write>
 8000490:	e005      	b.n	800049e <lcd_write_data+0x62>
	}
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	2208      	movs	r2, #8
 8000496:	4619      	mov	r1, r3
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f000 f809 	bl	80004b0 <lcd_write>
	}
	delay_us(mini_delay);
 800049e:	202a      	movs	r0, #42	; 0x2a
 80004a0:	f7ff fe66 	bl	8000170 <delay_us>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000000 	.word	0x20000000

080004b0 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(LCD_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
 80004bc:	4613      	mov	r3, r2
 80004be:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]
 80004c4:	e019      	b.n	80004fa <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	4413      	add	r3, r2
 80004d0:	6818      	ldr	r0, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	4413      	add	r3, r2
 80004dc:	8819      	ldrh	r1, [r3, #0]
 80004de:	78fa      	ldrb	r2, [r7, #3]
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	fa42 f303 	asr.w	r3, r2, r3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	f001 fa4b 	bl	800198a <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	3301      	adds	r3, #1
 80004f8:	73fb      	strb	r3, [r7, #15]
 80004fa:	7bfa      	ldrb	r2, [r7, #15]
 80004fc:	78bb      	ldrb	r3, [r7, #2]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d3e1      	bcc.n	80004c6 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6918      	ldr	r0, [r3, #16]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	8a9b      	ldrh	r3, [r3, #20]
 800050a:	2201      	movs	r2, #1
 800050c:	4619      	mov	r1, r3
 800050e:	f001 fa3c 	bl	800198a <HAL_GPIO_WritePin>
	DELAY_US(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff fe2c 	bl	8000170 <delay_us>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6918      	ldr	r0, [r3, #16]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	8a9b      	ldrh	r3, [r3, #20]
 8000520:	2200      	movs	r2, #0
 8000522:	4619      	mov	r1, r3
 8000524:	f001 fa31 	bl	800198a <HAL_GPIO_WritePin>
	DELAY_US(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff fe21 	bl	8000170 <delay_us>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <init_lcd>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void init_lcd(void)
{
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b09a      	sub	sp, #104	; 0x68
 800053c:	af04      	add	r7, sp, #16
	  lcd = lcd_create(ports, pins,
 800053e:	4c25      	ldr	r4, [pc, #148]	; (80005d4 <init_lcd+0x9c>)
 8000540:	4638      	mov	r0, r7
 8000542:	2300      	movs	r3, #0
 8000544:	9303      	str	r3, [sp, #12]
 8000546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054a:	9302      	str	r3, [sp, #8]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <init_lcd+0xa0>)
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <init_lcd+0xa0>)
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <init_lcd+0xa4>)
 800055a:	4921      	ldr	r1, [pc, #132]	; (80005e0 <init_lcd+0xa8>)
 800055c:	f7ff fe24 	bl	80001a8 <lcd_create>
 8000560:	4625      	mov	r5, r4
 8000562:	463c      	mov	r4, r7
 8000564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000568:	e894 0003 	ldmia.w	r4, {r0, r1}
 800056c:	e885 0003 	stmia.w	r5, {r0, r1}
						hd_E_GPIO_Port, hd_E_Pin,
						LCD_4_BIT_MODE);

	  /* load symbols */

	  uint8_t symbols [] = {
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <init_lcd+0xac>)
 8000572:	f107 0418 	add.w	r4, r7, #24
 8000576:	461d      	mov	r5, r3
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//		  	  	  	  	0x0, 0xe, 0x11, 0x15, 0x11, 0xe, 0x0, 0x0, // OFF
	//		  	  	  	  	0x0, 0x4, 0x15, 0x15, 0x11, 0xe, 0x0, 0x0, // ON
	//						0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x15, 0x0,   // ellips
	//						0x0, 0x0, 0xa, 0x1f, 0xe, 0x4, 0x0, 0x0, // heart
	  };
	  lcd_define_chars(&lcd, symbols);
 800058c:	f107 0318 	add.w	r3, r7, #24
 8000590:	4619      	mov	r1, r3
 8000592:	4810      	ldr	r0, [pc, #64]	; (80005d4 <init_lcd+0x9c>)
 8000594:	f7ff fef6 	bl	8000384 <lcd_define_chars>
	  lcd_set_xy(&lcd, 0, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <init_lcd+0x9c>)
 800059e:	f7ff fec7 	bl	8000330 <lcd_set_xy>
	  lcd_string(&lcd, "made with \7 by");
 80005a2:	4911      	ldr	r1, [pc, #68]	; (80005e8 <init_lcd+0xb0>)
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <init_lcd+0x9c>)
 80005a6:	f7ff feac 	bl	8000302 <lcd_string>
	  lcd_set_xy(&lcd, 0, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2100      	movs	r1, #0
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <init_lcd+0x9c>)
 80005b0:	f7ff febe 	bl	8000330 <lcd_set_xy>
	  lcd_string(&lcd, "Maksim Jeskevic");
 80005b4:	490d      	ldr	r1, [pc, #52]	; (80005ec <init_lcd+0xb4>)
 80005b6:	4807      	ldr	r0, [pc, #28]	; (80005d4 <init_lcd+0x9c>)
 80005b8:	f7ff fea3 	bl	8000302 <lcd_string>
	  HAL_Delay(3000);
 80005bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005c0:	f000 ff16 	bl	80013f0 <HAL_Delay>
	  lcd_clear(&lcd);
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <init_lcd+0x9c>)
 80005c6:	f7ff fecd 	bl	8000364 <lcd_clear>
		  for (uint16_t j = i*32+16; j < i*32+32; j++)
			  lcd_write_data(&lcd, (uint8_t)j);
		  HAL_Delay(2000);
	  }
	  */
}
 80005ca:	bf00      	nop
 80005cc:	3758      	adds	r7, #88	; 0x58
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bdb0      	pop	{r4, r5, r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000418 	.word	0x20000418
 80005d8:	40010c00 	.word	0x40010c00
 80005dc:	20000014 	.word	0x20000014
 80005e0:	20000004 	.word	0x20000004
 80005e4:	08009704 	.word	0x08009704
 80005e8:	080096e4 	.word	0x080096e4
 80005ec:	080096f4 	.word	0x080096f4

080005f0 <do_encoder>:

void do_encoder(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 1)
 80005f4:	f000 fef2 	bl	80013dc <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <do_encoder+0x28>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d007      	beq.n	8000612 <do_encoder+0x22>
		return;
	process_encoder();
 8000602:	f000 fccb 	bl	8000f9c <process_encoder>
	last_time = HAL_GetTick();
 8000606:	f000 fee9 	bl	80013dc <HAL_GetTick>
 800060a:	4603      	mov	r3, r0
 800060c:	4a02      	ldr	r2, [pc, #8]	; (8000618 <do_encoder+0x28>)
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	e000      	b.n	8000614 <do_encoder+0x24>
		return;
 8000612:	bf00      	nop
}
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200001c8 	.word	0x200001c8

0800061c <do_button>:

void do_button(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	const uint32_t time_for_long_press = 1000;
 8000622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000626:	607b      	str	r3, [r7, #4]
	static uint32_t last_time = 0;
	static bool last_button = false;
	static uint32_t but_time = 0;
	if (HAL_GetTick() - last_time < 20)
 8000628:	f000 fed8 	bl	80013dc <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <do_button+0x90>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	2b13      	cmp	r3, #19
 8000636:	d935      	bls.n	80006a4 <do_button+0x88>
		return;
	button.pressed = !HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin);
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	481d      	ldr	r0, [pc, #116]	; (80006b0 <do_button+0x94>)
 800063c:	f001 f98e 	bl	800195c <HAL_GPIO_ReadPin>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	bf0c      	ite	eq
 8000646:	2301      	moveq	r3, #1
 8000648:	2300      	movne	r3, #0
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <do_button+0x98>)
 800064e:	701a      	strb	r2, [r3, #0]
	if (button.pressed)
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <do_button+0x98>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d018      	beq.n	800068a <do_button+0x6e>
	{
		if (!last_button)
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <do_button+0x9c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f083 0301 	eor.w	r3, r3, #1
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d004      	beq.n	8000670 <do_button+0x54>
			but_time = HAL_GetTick();
 8000666:	f000 feb9 	bl	80013dc <HAL_GetTick>
 800066a:	4603      	mov	r3, r0
 800066c:	4a13      	ldr	r2, [pc, #76]	; (80006bc <do_button+0xa0>)
 800066e:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - but_time > time_for_long_press)
 8000670:	f000 feb4 	bl	80013dc <HAL_GetTick>
 8000674:	4602      	mov	r2, r0
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <do_button+0xa0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	429a      	cmp	r2, r3
 8000680:	d206      	bcs.n	8000690 <do_button+0x74>
			button.long_press = true;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <do_button+0x98>)
 8000684:	2201      	movs	r2, #1
 8000686:	705a      	strb	r2, [r3, #1]
 8000688:	e002      	b.n	8000690 <do_button+0x74>
	}
	else
		button.long_press = false;
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <do_button+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	705a      	strb	r2, [r3, #1]
	last_button = button.pressed;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <do_button+0x98>)
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <do_button+0x9c>)
 8000696:	701a      	strb	r2, [r3, #0]
	last_time = HAL_GetTick();
 8000698:	f000 fea0 	bl	80013dc <HAL_GetTick>
 800069c:	4603      	mov	r3, r0
 800069e:	4a03      	ldr	r2, [pc, #12]	; (80006ac <do_button+0x90>)
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	e000      	b.n	80006a6 <do_button+0x8a>
		return;
 80006a4:	bf00      	nop
}
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200001cc 	.word	0x200001cc
 80006b0:	40010c00 	.word	0x40010c00
 80006b4:	200001c4 	.word	0x200001c4
 80006b8:	200001d0 	.word	0x200001d0
 80006bc:	200001d4 	.word	0x200001d4

080006c0 <do_blink>:

void do_blink(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 500)
 80006c4:	f000 fe8a 	bl	80013dc <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <do_blink+0x30>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006d4:	d30a      	bcc.n	80006ec <do_blink+0x2c>
		return;
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <do_blink+0x34>)
 80006dc:	f001 f96d 	bl	80019ba <HAL_GPIO_TogglePin>
	last_time = HAL_GetTick();
 80006e0:	f000 fe7c 	bl	80013dc <HAL_GetTick>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a02      	ldr	r2, [pc, #8]	; (80006f0 <do_blink+0x30>)
 80006e8:	6013      	str	r3, [r2, #0]
 80006ea:	e000      	b.n	80006ee <do_blink+0x2e>
		return;
 80006ec:	bf00      	nop
}
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200001d8 	.word	0x200001d8
 80006f4:	40011000 	.word	0x40011000

080006f8 <do_max6675>:

void do_max6675(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 500)
 80006fe:	f000 fe6d 	bl	80013dc <HAL_GetTick>
 8000702:	4602      	mov	r2, r0
 8000704:	4b49      	ldr	r3, [pc, #292]	; (800082c <do_max6675+0x134>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800070e:	f0c0 8089 	bcc.w	8000824 <do_max6675+0x12c>
		return;
	last_time = HAL_GetTick();
 8000712:	f000 fe63 	bl	80013dc <HAL_GetTick>
 8000716:	4603      	mov	r3, r0
 8000718:	4a44      	ldr	r2, [pc, #272]	; (800082c <do_max6675+0x134>)
 800071a:	6013      	str	r3, [r2, #0]

	uint16_t data;
	HAL_SPI_Receive(&hspi1, (uint8_t*)(&data), 1, 100);
 800071c:	1cb9      	adds	r1, r7, #2
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	2201      	movs	r2, #1
 8000722:	4843      	ldr	r0, [pc, #268]	; (8000830 <do_max6675+0x138>)
 8000724:	f003 fb4a 	bl	8003dbc <HAL_SPI_Receive>
	MAX6675.data_valid = !(data & 0b110);
 8000728:	887b      	ldrh	r3, [r7, #2]
 800072a:	f003 0306 	and.w	r3, r3, #6
 800072e:	2b00      	cmp	r3, #0
 8000730:	bf0c      	ite	eq
 8000732:	2301      	moveq	r3, #1
 8000734:	2300      	movne	r3, #0
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <do_max6675+0x13c>)
 800073a:	709a      	strb	r2, [r3, #2]
	MAX6675.temperature = data >> 3;
 800073c:	887b      	ldrh	r3, [r7, #2]
 800073e:	08db      	lsrs	r3, r3, #3
 8000740:	b29a      	uxth	r2, r3
 8000742:	4b3c      	ldr	r3, [pc, #240]	; (8000834 <do_max6675+0x13c>)
 8000744:	801a      	strh	r2, [r3, #0]

	if (MAX6675.data_valid)
 8000746:	4b3b      	ldr	r3, [pc, #236]	; (8000834 <do_max6675+0x13c>)
 8000748:	789b      	ldrb	r3, [r3, #2]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d05a      	beq.n	8000804 <do_max6675+0x10c>
	{
		uint32_t digit = 25*(MAX6675.temperature&0b11);
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <do_max6675+0x13c>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	f003 0203 	and.w	r2, r3, #3
 8000756:	4613      	mov	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	009a      	lsls	r2, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	60fb      	str	r3, [r7, #12]
		digit += (MAX6675.temperature>>2)*1000;
 8000762:	4b34      	ldr	r3, [pc, #208]	; (8000834 <do_max6675+0x13c>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	089b      	lsrs	r3, r3, #2
 8000768:	b29b      	uxth	r3, r3
 800076a:	461a      	mov	r2, r3
 800076c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000770:	fb03 f302 	mul.w	r3, r3, r2
 8000774:	461a      	mov	r2, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	4413      	add	r3, r2
 800077a:	60fb      	str	r3, [r7, #12]
		int8_t i = 6;
 800077c:	2306      	movs	r3, #6
 800077e:	72fb      	strb	r3, [r7, #11]
		while (digit)
 8000780:	e01b      	b.n	80007ba <do_max6675+0xc2>
		{
			MAX6675.ascii[i--] = '0' + digit%10;
 8000782:	68f9      	ldr	r1, [r7, #12]
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <do_max6675+0x140>)
 8000786:	fba3 2301 	umull	r2, r3, r3, r1
 800078a:	08da      	lsrs	r2, r3, #3
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	1aca      	subs	r2, r1, r3
 8000796:	b2d3      	uxtb	r3, r2
 8000798:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800079c:	b2ca      	uxtb	r2, r1
 800079e:	3a01      	subs	r2, #1
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	72fa      	strb	r2, [r7, #11]
 80007a4:	3330      	adds	r3, #48	; 0x30
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <do_max6675+0x13c>)
 80007aa:	440b      	add	r3, r1
 80007ac:	70da      	strb	r2, [r3, #3]
			digit /= 10;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4a21      	ldr	r2, [pc, #132]	; (8000838 <do_max6675+0x140>)
 80007b2:	fba2 2303 	umull	r2, r3, r2, r3
 80007b6:	08db      	lsrs	r3, r3, #3
 80007b8:	60fb      	str	r3, [r7, #12]
		while (digit)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1e0      	bne.n	8000782 <do_max6675+0x8a>
		}
		while (i >= 0)
 80007c0:	e018      	b.n	80007f4 <do_max6675+0xfc>
		{
			if (i > 2)
 80007c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	dd0a      	ble.n	80007e0 <do_max6675+0xe8>
				MAX6675.ascii[i--] = '0';
 80007ca:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80007ce:	b2d3      	uxtb	r3, r2
 80007d0:	3b01      	subs	r3, #1
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	72fb      	strb	r3, [r7, #11]
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <do_max6675+0x13c>)
 80007d8:	4413      	add	r3, r2
 80007da:	2230      	movs	r2, #48	; 0x30
 80007dc:	70da      	strb	r2, [r3, #3]
 80007de:	e009      	b.n	80007f4 <do_max6675+0xfc>
			else
				MAX6675.ascii[i--] = ' ';
 80007e0:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80007e4:	b2d3      	uxtb	r3, r2
 80007e6:	3b01      	subs	r3, #1
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	72fb      	strb	r3, [r7, #11]
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <do_max6675+0x13c>)
 80007ee:	4413      	add	r3, r2
 80007f0:	2220      	movs	r2, #32
 80007f2:	70da      	strb	r2, [r3, #3]
		while (i >= 0)
 80007f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dae2      	bge.n	80007c2 <do_max6675+0xca>
		}
		MAX6675.ascii[4] = '.';
 80007fc:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <do_max6675+0x13c>)
 80007fe:	222e      	movs	r2, #46	; 0x2e
 8000800:	71da      	strb	r2, [r3, #7]
 8000802:	e010      	b.n	8000826 <do_max6675+0x12e>
	}
	else
	{
		for (int i = 0; i < sizeof(MAX6675); i ++)
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	e008      	b.n	800081c <do_max6675+0x124>
			MAX6675.ascii[i] = 'x';
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <do_max6675+0x13c>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	3303      	adds	r3, #3
 8000812:	2278      	movs	r2, #120	; 0x78
 8000814:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(MAX6675); i ++)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3301      	adds	r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b09      	cmp	r3, #9
 8000820:	d9f3      	bls.n	800080a <do_max6675+0x112>
 8000822:	e000      	b.n	8000826 <do_max6675+0x12e>
		return;
 8000824:	bf00      	nop
	}

}
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200001dc 	.word	0x200001dc
 8000830:	20000478 	.word	0x20000478
 8000834:	200001b4 	.word	0x200001b4
 8000838:	cccccccd 	.word	0xcccccccd

0800083c <do_pwm>:

void do_pwm(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	static uint16_t last_encoder = 0;
	static volatile int16_t diff = 0;

	// Check button
	static uint8_t state = 0;
	switch (state) {
 8000840:	4b38      	ldr	r3, [pc, #224]	; (8000924 <do_pwm+0xe8>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d002      	beq.n	800084e <do_pwm+0x12>
 8000848:	2b01      	cmp	r3, #1
 800084a:	d01a      	beq.n	8000882 <do_pwm+0x46>
	case 1: // wait button release
		if (!button.pressed)
			state = 0;
		break;
	default:
		break;
 800084c:	e027      	b.n	800089e <do_pwm+0x62>
		if (pwm_value == 0)
 800084e:	4b36      	ldr	r3, [pc, #216]	; (8000928 <do_pwm+0xec>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d10a      	bne.n	800086c <do_pwm+0x30>
			if (button.long_press)
 8000856:	4b35      	ldr	r3, [pc, #212]	; (800092c <do_pwm+0xf0>)
 8000858:	785b      	ldrb	r3, [r3, #1]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d01c      	beq.n	8000898 <do_pwm+0x5c>
				diff = 100 << 1; // full power
 800085e:	4b34      	ldr	r3, [pc, #208]	; (8000930 <do_pwm+0xf4>)
 8000860:	22c8      	movs	r2, #200	; 0xc8
 8000862:	801a      	strh	r2, [r3, #0]
				state = 1;
 8000864:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <do_pwm+0xe8>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
		break;
 800086a:	e015      	b.n	8000898 <do_pwm+0x5c>
		else if (button.pressed)
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <do_pwm+0xf0>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d011      	beq.n	8000898 <do_pwm+0x5c>
			diff = 0; // zero power
 8000874:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <do_pwm+0xf4>)
 8000876:	2200      	movs	r2, #0
 8000878:	801a      	strh	r2, [r3, #0]
			state = 1;
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <do_pwm+0xe8>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
		break;
 8000880:	e00a      	b.n	8000898 <do_pwm+0x5c>
		if (!button.pressed)
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <do_pwm+0xf0>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	f083 0301 	eor.w	r3, r3, #1
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d005      	beq.n	800089c <do_pwm+0x60>
			state = 0;
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <do_pwm+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
		break;
 8000896:	e001      	b.n	800089c <do_pwm+0x60>
		break;
 8000898:	bf00      	nop
 800089a:	e000      	b.n	800089e <do_pwm+0x62>
		break;
 800089c:	bf00      	nop
	}

	if (MAX6675.temperature > (300<<2)) // hardcoded protect
 800089e:	4b25      	ldr	r3, [pc, #148]	; (8000934 <do_pwm+0xf8>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80008a6:	d903      	bls.n	80008b0 <do_pwm+0x74>
		diff = 0;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <do_pwm+0xf4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	801a      	strh	r2, [r3, #0]
 80008ae:	e01e      	b.n	80008ee <do_pwm+0xb2>
	else
	{
		diff+=(int16_t)(encoder_value - last_encoder);
 80008b0:	4b21      	ldr	r3, [pc, #132]	; (8000938 <do_pwm+0xfc>)
 80008b2:	881a      	ldrh	r2, [r3, #0]
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <do_pwm+0x100>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <do_pwm+0xf4>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	4413      	add	r3, r2
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	b21a      	sxth	r2, r3
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <do_pwm+0xf4>)
 80008cc:	801a      	strh	r2, [r3, #0]
		if (diff < 0)
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <do_pwm+0xf4>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	da02      	bge.n	80008de <do_pwm+0xa2>
			diff = 0;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <do_pwm+0xf4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	801a      	strh	r2, [r3, #0]
		if (diff > (100<<1))
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <do_pwm+0xf4>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	2bc8      	cmp	r3, #200	; 0xc8
 80008e6:	dd02      	ble.n	80008ee <do_pwm+0xb2>
			diff = 100<<1;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <do_pwm+0xf4>)
 80008ea:	22c8      	movs	r2, #200	; 0xc8
 80008ec:	801a      	strh	r2, [r3, #0]
	}
	last_encoder = encoder_value;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <do_pwm+0xfc>)
 80008f0:	881a      	ldrh	r2, [r3, #0]
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <do_pwm+0x100>)
 80008f4:	801a      	strh	r2, [r3, #0]
	pwm_value = diff>>1; // in %
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <do_pwm+0xf4>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	105b      	asrs	r3, r3, #1
 80008fe:	b21b      	sxth	r3, r3
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <do_pwm+0xec>)
 8000904:	801a      	strh	r2, [r3, #0]
	TIM2->CCR1 = pwm_value*10;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <do_pwm+0xec>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	4613      	mov	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	461a      	mov	r2, r3
 8000916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800091a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	200001e0 	.word	0x200001e0
 8000928:	200001be 	.word	0x200001be
 800092c:	200001c4 	.word	0x200001c4
 8000930:	200001e2 	.word	0x200001e2
 8000934:	200001b4 	.word	0x200001b4
 8000938:	200001c0 	.word	0x200001c0
 800093c:	200001e4 	.word	0x200001e4

08000940 <do_usb>:

void do_usb(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 250)
 8000946:	f000 fd49 	bl	80013dc <HAL_GetTick>
 800094a:	4602      	mov	r2, r0
 800094c:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <do_usb+0xec>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	2bf9      	cmp	r3, #249	; 0xf9
 8000954:	d966      	bls.n	8000a24 <do_usb+0xe4>
		return;
	last_time = HAL_GetTick();
 8000956:	f000 fd41 	bl	80013dc <HAL_GetTick>
 800095a:	4603      	mov	r3, r0
 800095c:	4a33      	ldr	r2, [pc, #204]	; (8000a2c <do_usb+0xec>)
 800095e:	6013      	str	r3, [r2, #0]

	uint8_t buf[13];
	int i = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < sizeof(MAX6675.ascii); i++)
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
 8000968:	e00c      	b.n	8000984 <do_usb+0x44>
		buf[i] = MAX6675.ascii[i];
 800096a:	4a31      	ldr	r2, [pc, #196]	; (8000a30 <do_usb+0xf0>)
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	4413      	add	r3, r2
 8000970:	3303      	adds	r3, #3
 8000972:	7819      	ldrb	r1, [r3, #0]
 8000974:	1d3a      	adds	r2, r7, #4
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	4413      	add	r3, r2
 800097a:	460a      	mov	r2, r1
 800097c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(MAX6675.ascii); i++)
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3301      	adds	r3, #1
 8000982:	61fb      	str	r3, [r7, #28]
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	2b06      	cmp	r3, #6
 8000988:	d9ef      	bls.n	800096a <do_usb+0x2a>
	buf[i++] = ' ';
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	61fa      	str	r2, [r7, #28]
 8000990:	f107 0220 	add.w	r2, r7, #32
 8000994:	4413      	add	r3, r2
 8000996:	2220      	movs	r2, #32
 8000998:	f803 2c1c 	strb.w	r2, [r3, #-28]

	uint16_t temp = pwm_value;
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <do_usb+0xf4>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	837b      	strh	r3, [r7, #26]
	for (int j = 0; j < 3; j++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	e030      	b.n	8000a0a <do_usb+0xca>
	{
		if ((!temp) && j)
 80009a8:	8b7b      	ldrh	r3, [r7, #26]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10d      	bne.n	80009ca <do_usb+0x8a>
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00a      	beq.n	80009ca <do_usb+0x8a>
		{
			buf[i+2-j] =' ';
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	1c9a      	adds	r2, r3, #2
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	f107 0220 	add.w	r2, r7, #32
 80009c0:	4413      	add	r3, r2
 80009c2:	2220      	movs	r2, #32
 80009c4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80009c8:	e01c      	b.n	8000a04 <do_usb+0xc4>
		}
		else
		{
			buf[i+2-j] = temp % 10 + '0';
 80009ca:	8b7a      	ldrh	r2, [r7, #26]
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <do_usb+0xf8>)
 80009ce:	fba3 1302 	umull	r1, r3, r3, r2
 80009d2:	08d9      	lsrs	r1, r3, #3
 80009d4:	460b      	mov	r3, r1
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	440b      	add	r3, r1
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	b29b      	uxth	r3, r3
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	1c99      	adds	r1, r3, #2
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	1acb      	subs	r3, r1, r3
 80009ea:	3230      	adds	r2, #48	; 0x30
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	f107 0120 	add.w	r1, r7, #32
 80009f2:	440b      	add	r3, r1
 80009f4:	f803 2c1c 	strb.w	r2, [r3, #-28]
			temp /= 10;
 80009f8:	8b7b      	ldrh	r3, [r7, #26]
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <do_usb+0xf8>)
 80009fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000a00:	08db      	lsrs	r3, r3, #3
 8000a02:	837b      	strh	r3, [r7, #26]
	for (int j = 0; j < 3; j++)
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	3301      	adds	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	ddcb      	ble.n	80009a8 <do_usb+0x68>
		}
	}

	buf[11] = '\r';
 8000a10:	230d      	movs	r3, #13
 8000a12:	73fb      	strb	r3, [r7, #15]
	buf[12] = '\n';
 8000a14:	230a      	movs	r3, #10
 8000a16:	743b      	strb	r3, [r7, #16]

	CDC_Transmit_FS(buf, sizeof(buf));
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	210d      	movs	r1, #13
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f008 fa4b 	bl	8008eb8 <CDC_Transmit_FS>
 8000a22:	e000      	b.n	8000a26 <do_usb+0xe6>
		return;
 8000a24:	bf00      	nop
}
 8000a26:	3720      	adds	r7, #32
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200001e8 	.word	0x200001e8
 8000a30:	200001b4 	.word	0x200001b4
 8000a34:	200001be 	.word	0x200001be
 8000a38:	cccccccd 	.word	0xcccccccd

08000a3c <do_lcd>:

void do_lcd(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 100)
 8000a42:	f000 fccb 	bl	80013dc <HAL_GetTick>
 8000a46:	4602      	mov	r2, r0
 8000a48:	4b36      	ldr	r3, [pc, #216]	; (8000b24 <do_lcd+0xe8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b63      	cmp	r3, #99	; 0x63
 8000a50:	d963      	bls.n	8000b1a <do_lcd+0xde>
		return;
	last_time = HAL_GetTick();
 8000a52:	f000 fcc3 	bl	80013dc <HAL_GetTick>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a32      	ldr	r2, [pc, #200]	; (8000b24 <do_lcd+0xe8>)
 8000a5a:	6013      	str	r3, [r2, #0]

	// output temperature
	lcd_set_xy(&lcd, 0, 1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4831      	ldr	r0, [pc, #196]	; (8000b28 <do_lcd+0xec>)
 8000a62:	f7ff fc65 	bl	8000330 <lcd_set_xy>
	lcd_out(&lcd, MAX6675.ascii, sizeof(MAX6675.ascii));
 8000a66:	2207      	movs	r2, #7
 8000a68:	4930      	ldr	r1, [pc, #192]	; (8000b2c <do_lcd+0xf0>)
 8000a6a:	482f      	ldr	r0, [pc, #188]	; (8000b28 <do_lcd+0xec>)
 8000a6c:	f7ff fc2b 	bl	80002c6 <lcd_out>
	lcd_write_data(&lcd, 223);
 8000a70:	21df      	movs	r1, #223	; 0xdf
 8000a72:	482d      	ldr	r0, [pc, #180]	; (8000b28 <do_lcd+0xec>)
 8000a74:	f7ff fce2 	bl	800043c <lcd_write_data>

	// output temperature
	uint8_t buf[4];
	uint16_t temp = pwm_value;
 8000a78:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <do_lcd+0xf4>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 3; i++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	e02e      	b.n	8000ae2 <do_lcd+0xa6>
	{
		if ((!temp) && i)
 8000a84:	89fb      	ldrh	r3, [r7, #14]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d10c      	bne.n	8000aa4 <do_lcd+0x68>
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d009      	beq.n	8000aa4 <do_lcd+0x68>
		{
			buf[2-i] =' ';
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	f1c3 0302 	rsb	r3, r3, #2
 8000a96:	f107 0210 	add.w	r2, r7, #16
 8000a9a:	4413      	add	r3, r2
 8000a9c:	2220      	movs	r2, #32
 8000a9e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000aa2:	e01b      	b.n	8000adc <do_lcd+0xa0>
		}
		else
		{
			buf[2-i] = temp % 10 + '0';
 8000aa4:	89fa      	ldrh	r2, [r7, #14]
 8000aa6:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <do_lcd+0xf8>)
 8000aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8000aac:	08d9      	lsrs	r1, r3, #3
 8000aae:	460b      	mov	r3, r1
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	f1c3 0302 	rsb	r3, r3, #2
 8000ac2:	3230      	adds	r2, #48	; 0x30
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	f107 0110 	add.w	r1, r7, #16
 8000aca:	440b      	add	r3, r1
 8000acc:	f803 2c0c 	strb.w	r2, [r3, #-12]
			temp /= 10;
 8000ad0:	89fb      	ldrh	r3, [r7, #14]
 8000ad2:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <do_lcd+0xf8>)
 8000ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 3; i++)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	ddcd      	ble.n	8000a84 <do_lcd+0x48>
		}
	}
	buf[3] = '%';
 8000ae8:	2325      	movs	r3, #37	; 0x25
 8000aea:	71fb      	strb	r3, [r7, #7]
	lcd_set_xy(&lcd, 0, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <do_lcd+0xec>)
 8000af2:	f7ff fc1d 	bl	8000330 <lcd_set_xy>
	lcd_out(&lcd, buf, 4);
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2204      	movs	r2, #4
 8000afa:	4619      	mov	r1, r3
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <do_lcd+0xec>)
 8000afe:	f7ff fbe2 	bl	80002c6 <lcd_out>
	lcd_mode(&lcd, LCD_ENABLE, CURSOR_ENABLE, NO_BLINK);
 8000b02:	2300      	movs	r3, #0
 8000b04:	2201      	movs	r2, #1
 8000b06:	2101      	movs	r1, #1
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <do_lcd+0xec>)
 8000b0a:	f7ff fbaf 	bl	800026c <lcd_mode>
	lcd_set_xy(&lcd, 2, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2102      	movs	r1, #2
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <do_lcd+0xec>)
 8000b14:	f7ff fc0c 	bl	8000330 <lcd_set_xy>
 8000b18:	e000      	b.n	8000b1c <do_lcd+0xe0>
		return;
 8000b1a:	bf00      	nop
}
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200001ec 	.word	0x200001ec
 8000b28:	20000418 	.word	0x20000418
 8000b2c:	200001b7 	.word	0x200001b7
 8000b30:	200001be 	.word	0x200001be
 8000b34:	cccccccd 	.word	0xcccccccd

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 fbf6 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f82e 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f000 f998 	bl	8000e78 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000b48:	f008 f8f8 	bl	8008d3c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000b4c:	f000 f884 	bl	8000c58 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000b50:	f000 f8ba 	bl	8000cc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b54:	f000 f912 	bl	8000d7c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, 1);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5e:	480d      	ldr	r0, [pc, #52]	; (8000b94 <main+0x5c>)
 8000b60:	f000 ff13 	bl	800198a <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b64:	2100      	movs	r1, #0
 8000b66:	480c      	ldr	r0, [pc, #48]	; (8000b98 <main+0x60>)
 8000b68:	f003 fdc6 	bl	80046f8 <HAL_TIM_PWM_Start>
  delay_init(&htim1);
 8000b6c:	480b      	ldr	r0, [pc, #44]	; (8000b9c <main+0x64>)
 8000b6e:	f7ff faed 	bl	800014c <delay_init>
  init_lcd();
 8000b72:	f7ff fce1 	bl	8000538 <init_lcd>
#endif


  while (1)
  {
	  do_encoder();
 8000b76:	f7ff fd3b 	bl	80005f0 <do_encoder>
	  do_button();
 8000b7a:	f7ff fd4f 	bl	800061c <do_button>
	  do_blink();
 8000b7e:	f7ff fd9f 	bl	80006c0 <do_blink>
	  do_max6675();
 8000b82:	f7ff fdb9 	bl	80006f8 <do_max6675>
	  do_pwm();
 8000b86:	f7ff fe59 	bl	800083c <do_pwm>
	  do_usb();
 8000b8a:	f7ff fed9 	bl	8000940 <do_usb>
	  do_lcd();
 8000b8e:	f7ff ff55 	bl	8000a3c <do_lcd>
	  do_encoder();
 8000b92:	e7f0      	b.n	8000b76 <main+0x3e>
 8000b94:	40010800 	.word	0x40010800
 8000b98:	200004d0 	.word	0x200004d0
 8000b9c:	20000430 	.word	0x20000430

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b094      	sub	sp, #80	; 0x50
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000baa:	2228      	movs	r2, #40	; 0x28
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f008 fd84 	bl	80096bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bde:	2301      	movs	r3, #1
 8000be0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be2:	2302      	movs	r3, #2
 8000be4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000bec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 fbbe 	bl	8003378 <HAL_RCC_OscConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c02:	f000 fa53 	bl	80010ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c06:	230f      	movs	r3, #15
 8000c08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2101      	movs	r1, #1
 8000c22:	4618      	mov	r0, r3
 8000c24:	f002 fe28 	bl	8003878 <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c2e:	f000 fa3d 	bl	80010ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c32:	2310      	movs	r3, #16
 8000c34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c3a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 ff82 	bl	8003b48 <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c4a:	f000 fa2f 	bl	80010ac <Error_Handler>
  }
}
 8000c4e:	bf00      	nop
 8000c50:	3750      	adds	r7, #80	; 0x50
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c5e:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <MX_SPI1_Init+0x6c>)
 8000c60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c70:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c88:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c90:	2230      	movs	r2, #48	; 0x30
 8000c92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000ca8:	220a      	movs	r2, #10
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000cae:	f003 f801 	bl	8003cb4 <HAL_SPI_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000cb8:	f000 f9f8 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000478 	.word	0x20000478
 8000cc4:	40013000 	.word	0x40013000

08000cc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_TIM1_Init+0xa8>)
 8000ce6:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <MX_TIM1_Init+0xac>)
 8000ce8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000000-1;
 8000cea:	f002 feaf 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4a21      	ldr	r2, [pc, #132]	; (8000d78 <MX_TIM1_Init+0xb0>)
 8000cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf6:	0c9b      	lsrs	r3, r3, #18
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <MX_TIM1_Init+0xa8>)
 8000cfc:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_TIM1_Init+0xa8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_TIM1_Init+0xa8>)
 8000d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_TIM1_Init+0xa8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_TIM1_Init+0xa8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_TIM1_Init+0xa8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <MX_TIM1_Init+0xa8>)
 8000d20:	f003 fbf8 	bl	8004514 <HAL_TIM_Base_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000d2a:	f000 f9bf 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_TIM1_Init+0xa8>)
 8000d3c:	f003 fe3c 	bl	80049b8 <HAL_TIM_ConfigClockSource>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000d46:	f000 f9b1 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_TIM1_Init+0xa8>)
 8000d58:	f004 f996 	bl	8005088 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000d62:	f000 f9a3 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000430 	.word	0x20000430
 8000d74:	40012c00 	.word	0x40012c00
 8000d78:	431bde83 	.word	0x431bde83

08000d7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	; 0x38
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dac:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <MX_TIM2_Init+0xf4>)
 8000dae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000-1;
 8000db4:	f002 fe4a 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8000db8:	4603      	mov	r3, r0
 8000dba:	4a2e      	ldr	r2, [pc, #184]	; (8000e74 <MX_TIM2_Init+0xf8>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	099b      	lsrs	r3, r3, #6
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	4a2a      	ldr	r2, [pc, #168]	; (8000e70 <MX_TIM2_Init+0xf4>)
 8000dc6:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <MX_TIM2_Init+0xf4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000dce:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <MX_TIM2_Init+0xf4>)
 8000dd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <MX_TIM2_Init+0xf4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ddc:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <MX_TIM2_Init+0xf4>)
 8000dde:	2280      	movs	r2, #128	; 0x80
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000de2:	4823      	ldr	r0, [pc, #140]	; (8000e70 <MX_TIM2_Init+0xf4>)
 8000de4:	f003 fb96 	bl	8004514 <HAL_TIM_Base_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000dee:	f000 f95d 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	481c      	ldr	r0, [pc, #112]	; (8000e70 <MX_TIM2_Init+0xf4>)
 8000e00:	f003 fdda 	bl	80049b8 <HAL_TIM_ConfigClockSource>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000e0a:	f000 f94f 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e0e:	4818      	ldr	r0, [pc, #96]	; (8000e70 <MX_TIM2_Init+0xf4>)
 8000e10:	f003 fc1a 	bl	8004648 <HAL_TIM_PWM_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000e1a:	f000 f947 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e26:	f107 0320 	add.w	r3, r7, #32
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4810      	ldr	r0, [pc, #64]	; (8000e70 <MX_TIM2_Init+0xf4>)
 8000e2e:	f004 f92b 	bl	8005088 <HAL_TIMEx_MasterConfigSynchronization>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000e38:	f000 f938 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e3c:	2360      	movs	r3, #96	; 0x60
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4619      	mov	r1, r3
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <MX_TIM2_Init+0xf4>)
 8000e54:	f003 fcf2 	bl	800483c <HAL_TIM_PWM_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000e5e:	f000 f925 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e62:	4803      	ldr	r0, [pc, #12]	; (8000e70 <MX_TIM2_Init+0xf4>)
 8000e64:	f000 f9d4 	bl	8001210 <HAL_TIM_MspPostInit>

}
 8000e68:	bf00      	nop
 8000e6a:	3738      	adds	r7, #56	; 0x38
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200004d0 	.word	0x200004d0
 8000e74:	10624dd3 	.word	0x10624dd3

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8c:	4b3f      	ldr	r3, [pc, #252]	; (8000f8c <MX_GPIO_Init+0x114>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a3e      	ldr	r2, [pc, #248]	; (8000f8c <MX_GPIO_Init+0x114>)
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <MX_GPIO_Init+0x114>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea4:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <MX_GPIO_Init+0x114>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a38      	ldr	r2, [pc, #224]	; (8000f8c <MX_GPIO_Init+0x114>)
 8000eaa:	f043 0320 	orr.w	r3, r3, #32
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <MX_GPIO_Init+0x114>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0320 	and.w	r3, r3, #32
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <MX_GPIO_Init+0x114>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a32      	ldr	r2, [pc, #200]	; (8000f8c <MX_GPIO_Init+0x114>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <MX_GPIO_Init+0x114>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <MX_GPIO_Init+0x114>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a2c      	ldr	r2, [pc, #176]	; (8000f8c <MX_GPIO_Init+0x114>)
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <MX_GPIO_Init+0x114>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0308 	and.w	r3, r3, #8
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef2:	4827      	ldr	r0, [pc, #156]	; (8000f90 <MX_GPIO_Init+0x118>)
 8000ef4:	f000 fd49 	bl	800198a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000efe:	4825      	ldr	r0, [pc, #148]	; (8000f94 <MX_GPIO_Init+0x11c>)
 8000f00:	f000 fd43 	bl	800198a <HAL_GPIO_WritePin>
                          |hd_4_Pin|hd_5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f0a:	4823      	ldr	r0, [pc, #140]	; (8000f98 <MX_GPIO_Init+0x120>)
 8000f0c:	f000 fd3d 	bl	800198a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4619      	mov	r1, r3
 8000f28:	4819      	ldr	r0, [pc, #100]	; (8000f90 <MX_GPIO_Init+0x118>)
 8000f2a:	f000 fb93 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : hd_7_Pin hd_6_Pin hd_RS_Pin hd_E_Pin
                           hd_4_Pin hd_5_Pin */
  GPIO_InitStruct.Pin = hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 8000f2e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f32:	613b      	str	r3, [r7, #16]
                          |hd_4_Pin|hd_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	4813      	ldr	r0, [pc, #76]	; (8000f94 <MX_GPIO_Init+0x11c>)
 8000f48:	f000 fb84 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 8000f4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4619      	mov	r1, r3
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <MX_GPIO_Init+0x120>)
 8000f66:	f000 fb75 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : enc_s_Pin enc_a_Pin enc_b_Pin */
  GPIO_InitStruct.Pin = enc_s_Pin|enc_a_Pin|enc_b_Pin;
 8000f6a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_GPIO_Init+0x11c>)
 8000f80:	f000 fb68 	bl	8001654 <HAL_GPIO_Init>

}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40011000 	.word	0x40011000
 8000f94:	40010c00 	.word	0x40010c00
 8000f98:	40010800 	.word	0x40010800

08000f9c <process_encoder>:

/* USER CODE BEGIN 4 */
void process_encoder(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) ? 0b10 : 0
 8000fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa6:	483e      	ldr	r0, [pc, #248]	; (80010a0 <process_encoder+0x104>)
 8000fa8:	f000 fcd8 	bl	800195c <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10b      	bne.n	8000fca <process_encoder+0x2e>
		 + HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin) ? 0b01 : 0);
 8000fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb6:	483a      	ldr	r0, [pc, #232]	; (80010a0 <process_encoder+0x104>)
 8000fb8:	f000 fcd0 	bl	800195c <HAL_GPIO_ReadPin>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bf14      	ite	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	2300      	moveq	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	e000      	b.n	8000fcc <process_encoder+0x30>
	new = (HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) ? 0b10 : 0
 8000fca:	2302      	movs	r3, #2
 8000fcc:	71fb      	strb	r3, [r7, #7]
	switch (old) {
 8000fce:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <process_encoder+0x108>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d85d      	bhi.n	8001092 <process_encoder+0xf6>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <process_encoder+0x40>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08001013 	.word	0x08001013
 8000fe0:	08001039 	.word	0x08001039
 8000fe4:	08000fed 	.word	0x08000fed
 8000fe8:	0800105f 	.word	0x0800105f
		case 2: {
			if (new == 3)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d105      	bne.n	8000ffe <process_encoder+0x62>
				encoder_value++;
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <process_encoder+0x10c>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <process_encoder+0x10c>)
 8000ffc:	801a      	strh	r2, [r3, #0]
			if (new == 0)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d13f      	bne.n	8001084 <process_encoder+0xe8>
				encoder_value--;
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <process_encoder+0x10c>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	3b01      	subs	r3, #1
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <process_encoder+0x10c>)
 800100e:	801a      	strh	r2, [r3, #0]
			break;
 8001010:	e038      	b.n	8001084 <process_encoder+0xe8>
		}

		case 0: {
			if (new == 2)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d105      	bne.n	8001024 <process_encoder+0x88>
				encoder_value++;
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <process_encoder+0x10c>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <process_encoder+0x10c>)
 8001022:	801a      	strh	r2, [r3, #0]
			if (new == 1)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d12e      	bne.n	8001088 <process_encoder+0xec>
				encoder_value--;
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <process_encoder+0x10c>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	3b01      	subs	r3, #1
 8001030:	b29a      	uxth	r2, r3
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <process_encoder+0x10c>)
 8001034:	801a      	strh	r2, [r3, #0]
			break;
 8001036:	e027      	b.n	8001088 <process_encoder+0xec>
		}
		case 1: {
			if (new == 0)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d105      	bne.n	800104a <process_encoder+0xae>
				encoder_value++;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <process_encoder+0x10c>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <process_encoder+0x10c>)
 8001048:	801a      	strh	r2, [r3, #0]
			if (new == 3)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b03      	cmp	r3, #3
 800104e:	d11d      	bne.n	800108c <process_encoder+0xf0>
				encoder_value--;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <process_encoder+0x10c>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	3b01      	subs	r3, #1
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <process_encoder+0x10c>)
 800105a:	801a      	strh	r2, [r3, #0]
			break;
 800105c:	e016      	b.n	800108c <process_encoder+0xf0>
		}
		case 3: {
			if (new == 1)
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d105      	bne.n	8001070 <process_encoder+0xd4>
				encoder_value++;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <process_encoder+0x10c>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <process_encoder+0x10c>)
 800106e:	801a      	strh	r2, [r3, #0]
			if (new == 2)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d10c      	bne.n	8001090 <process_encoder+0xf4>
				encoder_value--;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <process_encoder+0x10c>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	3b01      	subs	r3, #1
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <process_encoder+0x10c>)
 8001080:	801a      	strh	r2, [r3, #0]
			break;
 8001082:	e005      	b.n	8001090 <process_encoder+0xf4>
			break;
 8001084:	bf00      	nop
 8001086:	e004      	b.n	8001092 <process_encoder+0xf6>
			break;
 8001088:	bf00      	nop
 800108a:	e002      	b.n	8001092 <process_encoder+0xf6>
			break;
 800108c:	bf00      	nop
 800108e:	e000      	b.n	8001092 <process_encoder+0xf6>
			break;
 8001090:	bf00      	nop
		}
	}
	old = new;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <process_encoder+0x108>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	7013      	strb	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	200001f0 	.word	0x200001f0
 80010a8:	200001c0 	.word	0x200001c0

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>
	...

080010b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_MspInit+0x5c>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <HAL_MspInit+0x5c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_MspInit+0x5c>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <HAL_MspInit+0x5c>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_MspInit+0x5c>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_MspInit+0x5c>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_MspInit+0x60>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_MspInit+0x60>)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d12f      	bne.n	800119c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 8001142:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800116c:	2330      	movs	r3, #48	; 0x30
 800116e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <HAL_SPI_MspInit+0x90>)
 8001180:	f000 fa68 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001184:	2340      	movs	r3, #64	; 0x40
 8001186:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118c:	2301      	movs	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <HAL_SPI_MspInit+0x90>)
 8001198:	f000 fa5c 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40013000 	.word	0x40013000
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010800 	.word	0x40010800

080011b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a12      	ldr	r2, [pc, #72]	; (8001208 <HAL_TIM_Base_MspInit+0x58>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10c      	bne.n	80011dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_TIM_Base_MspInit+0x5c>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	4a11      	ldr	r2, [pc, #68]	; (800120c <HAL_TIM_Base_MspInit+0x5c>)
 80011c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011cc:	6193      	str	r3, [r2, #24]
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_TIM_Base_MspInit+0x5c>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011da:	e010      	b.n	80011fe <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e4:	d10b      	bne.n	80011fe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_TIM_Base_MspInit+0x5c>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_TIM_Base_MspInit+0x5c>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	61d3      	str	r3, [r2, #28]
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_TIM_Base_MspInit+0x5c>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	40012c00 	.word	0x40012c00
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800122e:	d117      	bne.n	8001260 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_TIM_MspPostInit+0x58>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <HAL_TIM_MspPostInit+0x58>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_TIM_MspPostInit+0x58>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001248:	2301      	movs	r3, #1
 800124a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2302      	movs	r3, #2
 8001252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4619      	mov	r1, r3
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <HAL_TIM_MspPostInit+0x5c>)
 800125c:	f000 f9fa 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001260:	bf00      	nop
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	40010800 	.word	0x40010800

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <NMI_Handler+0x4>

08001276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <MemManage_Handler+0x4>

08001282 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <UsageFault_Handler+0x4>

0800128e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b6:	f000 f87f 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80012c6:	f000 fcc2 	bl	8001c4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200011b0 	.word	0x200011b0

080012d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012e2:	490d      	ldr	r1, [pc, #52]	; (8001318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012f8:	4c0a      	ldr	r4, [pc, #40]	; (8001324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001306:	f7ff ffe5 	bl	80012d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130a:	f008 f9b3 	bl	8009674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800130e:	f7ff fc13 	bl	8000b38 <main>
  bx lr
 8001312:	4770      	bx	lr
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 800131c:	080097b8 	.word	0x080097b8
  ldr r2, =_sbss
 8001320:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001324:	2000149c 	.word	0x2000149c

08001328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC1_2_IRQHandler>
	...

0800132c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_Init+0x28>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_Init+0x28>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133c:	2003      	movs	r0, #3
 800133e:	f000 f947 	bl	80015d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001342:	2000      	movs	r0, #0
 8001344:	f000 f808 	bl	8001358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001348:	f7ff feb6 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40022000 	.word	0x40022000

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x54>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x58>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f95f 	bl	800163a <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f000 f927 	bl	80015e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_InitTick+0x5c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000001c 	.word	0x2000001c
 80013b0:	20000024 	.word	0x20000024
 80013b4:	20000020 	.word	0x20000020

080013b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_IncTick+0x1c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_IncTick+0x20>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <HAL_IncTick+0x20>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000024 	.word	0x20000024
 80013d8:	20000518 	.word	0x20000518

080013dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b02      	ldr	r3, [pc, #8]	; (80013ec <HAL_GetTick+0x10>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	20000518 	.word	0x20000518

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff fff0 	bl	80013dc <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001416:	bf00      	nop
 8001418:	f7ff ffe0 	bl	80013dc <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000024 	.word	0x20000024

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4906      	ldr	r1, [pc, #24]	; (80014d0 <__NVIC_EnableIRQ+0x34>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	db0a      	blt.n	80014fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	490c      	ldr	r1, [pc, #48]	; (8001520 <__NVIC_SetPriority+0x4c>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	0112      	lsls	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014fc:	e00a      	b.n	8001514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4908      	ldr	r1, [pc, #32]	; (8001524 <__NVIC_SetPriority+0x50>)
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	3b04      	subs	r3, #4
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	440b      	add	r3, r1
 8001512:	761a      	strb	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f1c3 0307 	rsb	r3, r3, #7
 8001542:	2b04      	cmp	r3, #4
 8001544:	bf28      	it	cs
 8001546:	2304      	movcs	r3, #4
 8001548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3304      	adds	r3, #4
 800154e:	2b06      	cmp	r3, #6
 8001550:	d902      	bls.n	8001558 <NVIC_EncodePriority+0x30>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3b03      	subs	r3, #3
 8001556:	e000      	b.n	800155a <NVIC_EncodePriority+0x32>
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	401a      	ands	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	43d9      	mvns	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	4313      	orrs	r3, r2
         );
}
 8001582:	4618      	mov	r0, r3
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800159c:	d301      	bcc.n	80015a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159e:	2301      	movs	r3, #1
 80015a0:	e00f      	b.n	80015c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <SysTick_Config+0x40>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015aa:	210f      	movs	r1, #15
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f7ff ff90 	bl	80014d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SysTick_Config+0x40>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <SysTick_Config+0x40>)
 80015bc:	2207      	movs	r2, #7
 80015be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff2d 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f8:	f7ff ff42 	bl	8001480 <__NVIC_GetPriorityGrouping>
 80015fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff ff90 	bl	8001528 <NVIC_EncodePriority>
 8001608:	4602      	mov	r2, r0
 800160a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5f 	bl	80014d4 <__NVIC_SetPriority>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff35 	bl	800149c <__NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffa2 	bl	800158c <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b08b      	sub	sp, #44	; 0x2c
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001666:	e169      	b.n	800193c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001668:	2201      	movs	r2, #1
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	429a      	cmp	r2, r3
 8001682:	f040 8158 	bne.w	8001936 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4a9a      	ldr	r2, [pc, #616]	; (80018f4 <HAL_GPIO_Init+0x2a0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d05e      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 8001690:	4a98      	ldr	r2, [pc, #608]	; (80018f4 <HAL_GPIO_Init+0x2a0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d875      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 8001696:	4a98      	ldr	r2, [pc, #608]	; (80018f8 <HAL_GPIO_Init+0x2a4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d058      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 800169c:	4a96      	ldr	r2, [pc, #600]	; (80018f8 <HAL_GPIO_Init+0x2a4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d86f      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016a2:	4a96      	ldr	r2, [pc, #600]	; (80018fc <HAL_GPIO_Init+0x2a8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d052      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 80016a8:	4a94      	ldr	r2, [pc, #592]	; (80018fc <HAL_GPIO_Init+0x2a8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d869      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016ae:	4a94      	ldr	r2, [pc, #592]	; (8001900 <HAL_GPIO_Init+0x2ac>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d04c      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 80016b4:	4a92      	ldr	r2, [pc, #584]	; (8001900 <HAL_GPIO_Init+0x2ac>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d863      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016ba:	4a92      	ldr	r2, [pc, #584]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d046      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 80016c0:	4a90      	ldr	r2, [pc, #576]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d85d      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016c6:	2b12      	cmp	r3, #18
 80016c8:	d82a      	bhi.n	8001720 <HAL_GPIO_Init+0xcc>
 80016ca:	2b12      	cmp	r3, #18
 80016cc:	d859      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016ce:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <HAL_GPIO_Init+0x80>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	0800174f 	.word	0x0800174f
 80016d8:	08001729 	.word	0x08001729
 80016dc:	0800173b 	.word	0x0800173b
 80016e0:	0800177d 	.word	0x0800177d
 80016e4:	08001783 	.word	0x08001783
 80016e8:	08001783 	.word	0x08001783
 80016ec:	08001783 	.word	0x08001783
 80016f0:	08001783 	.word	0x08001783
 80016f4:	08001783 	.word	0x08001783
 80016f8:	08001783 	.word	0x08001783
 80016fc:	08001783 	.word	0x08001783
 8001700:	08001783 	.word	0x08001783
 8001704:	08001783 	.word	0x08001783
 8001708:	08001783 	.word	0x08001783
 800170c:	08001783 	.word	0x08001783
 8001710:	08001783 	.word	0x08001783
 8001714:	08001783 	.word	0x08001783
 8001718:	08001731 	.word	0x08001731
 800171c:	08001745 	.word	0x08001745
 8001720:	4a79      	ldr	r2, [pc, #484]	; (8001908 <HAL_GPIO_Init+0x2b4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d013      	beq.n	800174e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001726:	e02c      	b.n	8001782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	623b      	str	r3, [r7, #32]
          break;
 800172e:	e029      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	3304      	adds	r3, #4
 8001736:	623b      	str	r3, [r7, #32]
          break;
 8001738:	e024      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	3308      	adds	r3, #8
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e01f      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	330c      	adds	r3, #12
 800174a:	623b      	str	r3, [r7, #32]
          break;
 800174c:	e01a      	b.n	8001784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001756:	2304      	movs	r3, #4
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e013      	b.n	8001784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001764:	2308      	movs	r3, #8
 8001766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	611a      	str	r2, [r3, #16]
          break;
 800176e:	e009      	b.n	8001784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001770:	2308      	movs	r3, #8
 8001772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	615a      	str	r2, [r3, #20]
          break;
 800177a:	e003      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
          break;
 8001780:	e000      	b.n	8001784 <HAL_GPIO_Init+0x130>
          break;
 8001782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2bff      	cmp	r3, #255	; 0xff
 8001788:	d801      	bhi.n	800178e <HAL_GPIO_Init+0x13a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	e001      	b.n	8001792 <HAL_GPIO_Init+0x13e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3304      	adds	r3, #4
 8001792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2bff      	cmp	r3, #255	; 0xff
 8001798:	d802      	bhi.n	80017a0 <HAL_GPIO_Init+0x14c>
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	e002      	b.n	80017a6 <HAL_GPIO_Init+0x152>
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	3b08      	subs	r3, #8
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	210f      	movs	r1, #15
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	401a      	ands	r2, r3
 80017b8:	6a39      	ldr	r1, [r7, #32]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	431a      	orrs	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 80b1 	beq.w	8001936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017d4:	4b4d      	ldr	r3, [pc, #308]	; (800190c <HAL_GPIO_Init+0x2b8>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a4c      	ldr	r2, [pc, #304]	; (800190c <HAL_GPIO_Init+0x2b8>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b4a      	ldr	r3, [pc, #296]	; (800190c <HAL_GPIO_Init+0x2b8>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017ec:	4a48      	ldr	r2, [pc, #288]	; (8001910 <HAL_GPIO_Init+0x2bc>)
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	220f      	movs	r2, #15
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a40      	ldr	r2, [pc, #256]	; (8001914 <HAL_GPIO_Init+0x2c0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d013      	beq.n	8001840 <HAL_GPIO_Init+0x1ec>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a3f      	ldr	r2, [pc, #252]	; (8001918 <HAL_GPIO_Init+0x2c4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00d      	beq.n	800183c <HAL_GPIO_Init+0x1e8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a3e      	ldr	r2, [pc, #248]	; (800191c <HAL_GPIO_Init+0x2c8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d007      	beq.n	8001838 <HAL_GPIO_Init+0x1e4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a3d      	ldr	r2, [pc, #244]	; (8001920 <HAL_GPIO_Init+0x2cc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d101      	bne.n	8001834 <HAL_GPIO_Init+0x1e0>
 8001830:	2303      	movs	r3, #3
 8001832:	e006      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 8001834:	2304      	movs	r3, #4
 8001836:	e004      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 8001838:	2302      	movs	r3, #2
 800183a:	e002      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 8001840:	2300      	movs	r3, #0
 8001842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001844:	f002 0203 	and.w	r2, r2, #3
 8001848:	0092      	lsls	r2, r2, #2
 800184a:	4093      	lsls	r3, r2
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001852:	492f      	ldr	r1, [pc, #188]	; (8001910 <HAL_GPIO_Init+0x2bc>)
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3302      	adds	r3, #2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	492c      	ldr	r1, [pc, #176]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	600b      	str	r3, [r1, #0]
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	43db      	mvns	r3, r3
 8001882:	4928      	ldr	r1, [pc, #160]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 8001884:	4013      	ands	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001894:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	4922      	ldr	r1, [pc, #136]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	491e      	ldr	r1, [pc, #120]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	4918      	ldr	r1, [pc, #96]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	4914      	ldr	r1, [pc, #80]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d021      	beq.n	8001928 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60cb      	str	r3, [r1, #12]
 80018f0:	e021      	b.n	8001936 <HAL_GPIO_Init+0x2e2>
 80018f2:	bf00      	nop
 80018f4:	10320000 	.word	0x10320000
 80018f8:	10310000 	.word	0x10310000
 80018fc:	10220000 	.word	0x10220000
 8001900:	10210000 	.word	0x10210000
 8001904:	10120000 	.word	0x10120000
 8001908:	10110000 	.word	0x10110000
 800190c:	40021000 	.word	0x40021000
 8001910:	40010000 	.word	0x40010000
 8001914:	40010800 	.word	0x40010800
 8001918:	40010c00 	.word	0x40010c00
 800191c:	40011000 	.word	0x40011000
 8001920:	40011400 	.word	0x40011400
 8001924:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_GPIO_Init+0x304>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	43db      	mvns	r3, r3
 8001930:	4909      	ldr	r1, [pc, #36]	; (8001958 <HAL_GPIO_Init+0x304>)
 8001932:	4013      	ands	r3, r2
 8001934:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	3301      	adds	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	f47f ae8e 	bne.w	8001668 <HAL_GPIO_Init+0x14>
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	372c      	adds	r7, #44	; 0x2c
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e001      	b.n	800197e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	807b      	strh	r3, [r7, #2]
 8001996:	4613      	mov	r3, r2
 8001998:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800199a:	787b      	ldrb	r3, [r7, #1]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a0:	887a      	ldrh	r2, [r7, #2]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019a6:	e003      	b.n	80019b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	041a      	lsls	r2, r3, #16
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	611a      	str	r2, [r3, #16]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019cc:	887a      	ldrh	r2, [r7, #2]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4013      	ands	r3, r2
 80019d2:	041a      	lsls	r2, r3, #16
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	400b      	ands	r3, r1
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	611a      	str	r2, [r3, #16]
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ee:	b08b      	sub	sp, #44	; 0x2c
 80019f0:	af06      	add	r7, sp, #24
 80019f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0fd      	b.n	8001bfa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d106      	bne.n	8001a18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f007 fb84 	bl	8009120 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 fbb3 	bl	8005190 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	687e      	ldr	r6, [r7, #4]
 8001a32:	466d      	mov	r5, sp
 8001a34:	f106 0410 	add.w	r4, r6, #16
 8001a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	602b      	str	r3, [r5, #0]
 8001a40:	1d33      	adds	r3, r6, #4
 8001a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a44:	6838      	ldr	r0, [r7, #0]
 8001a46:	f003 fb7d 	bl	8005144 <USB_CoreInit>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0ce      	b.n	8001bfa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fbae 	bl	80051c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e04c      	b.n	8001b08 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3301      	adds	r3, #1
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	b298      	uxth	r0, r3
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3336      	adds	r3, #54	; 0x36
 8001aac:	4602      	mov	r2, r0
 8001aae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	3303      	adds	r3, #3
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3338      	adds	r3, #56	; 0x38
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	333c      	adds	r3, #60	; 0x3c
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aee:	7bfa      	ldrb	r2, [r7, #15]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	440b      	add	r3, r1
 8001afc:	3340      	adds	r3, #64	; 0x40
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	3301      	adds	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d3ad      	bcc.n	8001a6e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	e044      	b.n	8001ba2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	440b      	add	r3, r1
 8001b52:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d3b5      	bcc.n	8001b18 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	687e      	ldr	r6, [r7, #4]
 8001bb4:	466d      	mov	r5, sp
 8001bb6:	f106 0410 	add.w	r4, r6, #16
 8001bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	602b      	str	r3, [r5, #0]
 8001bc2:	1d33      	adds	r3, r6, #4
 8001bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bc6:	6838      	ldr	r0, [r7, #0]
 8001bc8:	f003 fb08 	bl	80051dc <USB_DevInit>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00d      	b.n	8001bfa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f005 fc79 	bl	80074ea <USB_DevDisconnect>

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_PCD_Start+0x16>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e016      	b.n	8001c46 <HAL_PCD_Start+0x44>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 fa9d 	bl	8005164 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f007 fcea 	bl	8009606 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f005 fc4d 	bl	80074d6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b088      	sub	sp, #32
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f005 fc4f 	bl	80074fe <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c6a:	d102      	bne.n	8001c72 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 fb61 	bl	8002334 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f005 fc41 	bl	80074fe <USB_ReadInterrupts>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c86:	d112      	bne.n	8001cae <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9a:	b292      	uxth	r2, r2
 8001c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f007 fab8 	bl	8009216 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f925 	bl	8001ef8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f005 fc23 	bl	80074fe <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cc2:	d10b      	bne.n	8001cdc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cd6:	b292      	uxth	r2, r2
 8001cd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f005 fc0c 	bl	80074fe <USB_ReadInterrupts>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf0:	d10b      	bne.n	8001d0a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d04:	b292      	uxth	r2, r2
 8001d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f005 fbf5 	bl	80074fe <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1e:	d126      	bne.n	8001d6e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0204 	bic.w	r2, r2, #4
 8001d32:	b292      	uxth	r2, r2
 8001d34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0208 	bic.w	r2, r2, #8
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f007 fa99 	bl	8009288 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f005 fbc3 	bl	80074fe <USB_ReadInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d82:	f040 8084 	bne.w	8001e8e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	77fb      	strb	r3, [r7, #31]
 8001d8a:	e011      	b.n	8001db0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	7ffb      	ldrb	r3, [r7, #31]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	441a      	add	r2, r3
 8001d98:	7ffb      	ldrb	r3, [r7, #31]
 8001d9a:	8812      	ldrh	r2, [r2, #0]
 8001d9c:	b292      	uxth	r2, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	f107 0120 	add.w	r1, r7, #32
 8001da4:	440b      	add	r3, r1
 8001da6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001daa:	7ffb      	ldrb	r3, [r7, #31]
 8001dac:	3301      	adds	r3, #1
 8001dae:	77fb      	strb	r3, [r7, #31]
 8001db0:	7ffb      	ldrb	r3, [r7, #31]
 8001db2:	2b07      	cmp	r3, #7
 8001db4:	d9ea      	bls.n	8001d8c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0201 	orr.w	r2, r2, #1
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	b292      	uxth	r2, r2
 8001de2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001de6:	bf00      	nop
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f6      	beq.n	8001de8 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0c:	b292      	uxth	r2, r2
 8001e0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	77fb      	strb	r3, [r7, #31]
 8001e16:	e010      	b.n	8001e3a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001e18:	7ffb      	ldrb	r3, [r7, #31]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	7ffa      	ldrb	r2, [r7, #31]
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	440a      	add	r2, r1
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	f107 0120 	add.w	r1, r7, #32
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001e32:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001e34:	7ffb      	ldrb	r3, [r7, #31]
 8001e36:	3301      	adds	r3, #1
 8001e38:	77fb      	strb	r3, [r7, #31]
 8001e3a:	7ffb      	ldrb	r3, [r7, #31]
 8001e3c:	2b07      	cmp	r3, #7
 8001e3e:	d9eb      	bls.n	8001e18 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0208 	orr.w	r2, r2, #8
 8001e52:	b292      	uxth	r2, r2
 8001e54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e6a:	b292      	uxth	r2, r2
 8001e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0204 	orr.w	r2, r2, #4
 8001e82:	b292      	uxth	r2, r2
 8001e84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f007 f9e3 	bl	8009254 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f005 fb33 	bl	80074fe <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea2:	d10e      	bne.n	8001ec2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f007 f99c 	bl	80091fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f005 fb19 	bl	80074fe <USB_ReadInterrupts>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eea:	b292      	uxth	r2, r2
 8001eec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_PCD_SetAddress+0x1a>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e013      	b.n	8001f3a <HAL_PCD_SetAddress+0x42>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f005 fac0 	bl	80074b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	4608      	mov	r0, r1
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4603      	mov	r3, r0
 8001f52:	70fb      	strb	r3, [r7, #3]
 8001f54:	460b      	mov	r3, r1
 8001f56:	803b      	strh	r3, [r7, #0]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	da0e      	bge.n	8001f86 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	705a      	strb	r2, [r3, #1]
 8001f84:	e00e      	b.n	8001fa4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	f003 0207 	and.w	r2, r3, #7
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fb0:	883a      	ldrh	r2, [r7, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	78ba      	ldrb	r2, [r7, #2]
 8001fba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	785b      	ldrb	r3, [r3, #1]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fce:	78bb      	ldrb	r3, [r7, #2]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d102      	bne.n	8001fda <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_PCD_EP_Open+0xa6>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e00e      	b.n	8002006 <HAL_PCD_EP_Open+0xc4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68f9      	ldr	r1, [r7, #12]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 f910 	bl	800521c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002004:	7afb      	ldrb	r3, [r7, #11]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800201a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201e:	2b00      	cmp	r3, #0
 8002020:	da0e      	bge.n	8002040 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	705a      	strb	r2, [r3, #1]
 800203e:	e00e      	b.n	800205e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 0207 	and.w	r2, r3, #7
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	b2da      	uxtb	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_PCD_EP_Close+0x6a>
 8002074:	2302      	movs	r3, #2
 8002076:	e00e      	b.n	8002096 <HAL_PCD_EP_Close+0x88>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68f9      	ldr	r1, [r7, #12]
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fc32 	bl	80058f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
 80020aa:	460b      	mov	r3, r1
 80020ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ae:	7afb      	ldrb	r3, [r7, #11]
 80020b0:	f003 0207 	and.w	r2, r3, #7
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2200      	movs	r2, #0
 80020d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2200      	movs	r2, #0
 80020dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020de:	7afb      	ldrb	r3, [r7, #11]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ea:	7afb      	ldrb	r3, [r7, #11]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6979      	ldr	r1, [r7, #20]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 fde4 	bl	8005cc8 <USB_EPStartXfer>
 8002100:	e005      	b.n	800210e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6979      	ldr	r1, [r7, #20]
 8002108:	4618      	mov	r0, r3
 800210a:	f003 fddd 	bl	8005cc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	f003 0207 	and.w	r2, r3, #7
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	460b      	mov	r3, r1
 8002154:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002156:	7afb      	ldrb	r3, [r7, #11]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4413      	add	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2200      	movs	r2, #0
 800218a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2201      	movs	r2, #1
 8002190:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002192:	7afb      	ldrb	r3, [r7, #11]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	b2da      	uxtb	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800219e:	7afb      	ldrb	r3, [r7, #11]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d106      	bne.n	80021b6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6979      	ldr	r1, [r7, #20]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f003 fd8a 	bl	8005cc8 <USB_EPStartXfer>
 80021b4:	e005      	b.n	80021c2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6979      	ldr	r1, [r7, #20]
 80021bc:	4618      	mov	r0, r3
 80021be:	f003 fd83 	bl	8005cc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	f003 0207 	and.w	r2, r3, #7
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d901      	bls.n	80021ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e04c      	b.n	8002284 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	da0e      	bge.n	8002210 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	705a      	strb	r2, [r3, #1]
 800220e:	e00c      	b.n	800222a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	b2da      	uxtb	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_PCD_EP_SetStall+0x7e>
 8002246:	2302      	movs	r3, #2
 8002248:	e01c      	b.n	8002284 <HAL_PCD_EP_SetStall+0xb8>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	4618      	mov	r0, r3
 800225a:	f005 f82c 	bl	80072b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	2b00      	cmp	r3, #0
 8002266:	d108      	bne.n	800227a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f005 f951 	bl	800751c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 020f 	and.w	r2, r3, #15
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d901      	bls.n	80022aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e040      	b.n	800232c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da0e      	bge.n	80022d0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	705a      	strb	r2, [r3, #1]
 80022ce:	e00e      	b.n	80022ee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	f003 0207 	and.w	r2, r3, #7
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_PCD_EP_ClrStall+0x82>
 800230a:	2302      	movs	r3, #2
 800230c:	e00e      	b.n	800232c <HAL_PCD_EP_ClrStall+0xa0>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68f9      	ldr	r1, [r7, #12]
 800231c:	4618      	mov	r0, r3
 800231e:	f005 f81a 	bl	8007356 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	; 0x38
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800233c:	e2ec      	b.n	8002918 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002346:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002348:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002354:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002358:	2b00      	cmp	r3, #0
 800235a:	f040 8161 	bne.w	8002620 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800235e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b00      	cmp	r3, #0
 8002366:	d152      	bne.n	800240e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002378:	81fb      	strh	r3, [r7, #14]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002388:	b29b      	uxth	r3, r3
 800238a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3328      	adds	r3, #40	; 0x28
 8002390:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	3302      	adds	r3, #2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	441a      	add	r2, r3
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023cc:	2100      	movs	r1, #0
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f006 fef9 	bl	80091c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 829b 	beq.w	8002918 <PCD_EP_ISR_Handler+0x5e4>
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 8296 	bne.w	8002918 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	b292      	uxth	r2, r2
 8002400:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800240c:	e284      	b.n	8002918 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800241e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002424:	2b00      	cmp	r3, #0
 8002426:	d034      	beq.n	8002492 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002430:	b29b      	uxth	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	3306      	adds	r3, #6
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	4413      	add	r3, r2
 8002446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002466:	b29b      	uxth	r3, r3
 8002468:	f005 f8a8 	bl	80075bc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29a      	uxth	r2, r3
 8002474:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002478:	4013      	ands	r3, r2
 800247a:	823b      	strh	r3, [r7, #16]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	8a3a      	ldrh	r2, [r7, #16]
 8002482:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002486:	b292      	uxth	r2, r2
 8002488:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f006 fe6e 	bl	800916c <HAL_PCD_SetupStageCallback>
 8002490:	e242      	b.n	8002918 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002492:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002496:	2b00      	cmp	r3, #0
 8002498:	f280 823e 	bge.w	8002918 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024a8:	4013      	ands	r3, r2
 80024aa:	83bb      	strh	r3, [r7, #28]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	8bba      	ldrh	r2, [r7, #28]
 80024b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024b6:	b292      	uxth	r2, r2
 80024b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	3306      	adds	r3, #6
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d019      	beq.n	8002522 <PCD_EP_ISR_Handler+0x1ee>
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d015      	beq.n	8002522 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	6959      	ldr	r1, [r3, #20]
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002506:	b29b      	uxth	r3, r3
 8002508:	f005 f858 	bl	80075bc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	441a      	add	r2, r3
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800251a:	2100      	movs	r1, #0
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f006 fe37 	bl	8009190 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 81f2 	bne.w	8002918 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002542:	b29b      	uxth	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4413      	add	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d112      	bne.n	8002582 <PCD_EP_ISR_Handler+0x24e>
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002566:	b29a      	uxth	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	801a      	strh	r2, [r3, #0]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b29b      	uxth	r3, r3
 8002572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800257a:	b29a      	uxth	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	801a      	strh	r2, [r3, #0]
 8002580:	e02f      	b.n	80025e2 <PCD_EP_ISR_Handler+0x2ae>
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b3e      	cmp	r3, #62	; 0x3e
 8002588:	d813      	bhi.n	80025b2 <PCD_EP_ISR_Handler+0x27e>
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <PCD_EP_ISR_Handler+0x270>
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	3301      	adds	r3, #1
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	029b      	lsls	r3, r3, #10
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	801a      	strh	r2, [r3, #0]
 80025b0:	e017      	b.n	80025e2 <PCD_EP_ISR_Handler+0x2ae>
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	633b      	str	r3, [r7, #48]	; 0x30
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d102      	bne.n	80025cc <PCD_EP_ISR_Handler+0x298>
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	3b01      	subs	r3, #1
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	029b      	lsls	r3, r3, #10
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025dc:	b29a      	uxth	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f2:	827b      	strh	r3, [r7, #18]
 80025f4:	8a7b      	ldrh	r3, [r7, #18]
 80025f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025fa:	827b      	strh	r3, [r7, #18]
 80025fc:	8a7b      	ldrh	r3, [r7, #18]
 80025fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002602:	827b      	strh	r3, [r7, #18]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	8a7b      	ldrh	r3, [r7, #18]
 800260a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800260e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261a:	b29b      	uxth	r3, r3
 800261c:	8013      	strh	r3, [r2, #0]
 800261e:	e17b      	b.n	8002918 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002632:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002636:	2b00      	cmp	r3, #0
 8002638:	f280 80ea 	bge.w	8002810 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29a      	uxth	r2, r3
 800264e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002652:	4013      	ands	r3, r2
 8002654:	853b      	strh	r3, [r7, #40]	; 0x28
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800266a:	b292      	uxth	r2, r2
 800266c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800266e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	7b1b      	ldrb	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d122      	bne.n	80026d2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002694:	b29b      	uxth	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	3306      	adds	r3, #6
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80026b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8087 	beq.w	80027cc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	6959      	ldr	r1, [r3, #20]
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	88da      	ldrh	r2, [r3, #6]
 80026ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026cc:	f004 ff76 	bl	80075bc <USB_ReadPMA>
 80026d0:	e07c      	b.n	80027cc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	78db      	ldrb	r3, [r3, #3]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d108      	bne.n	80026ec <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026dc:	461a      	mov	r2, r3
 80026de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f927 	bl	8002934 <HAL_PCD_EP_DB_Receive>
 80026e6:	4603      	mov	r3, r0
 80026e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80026ea:	e06f      	b.n	80027cc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	847b      	strh	r3, [r7, #34]	; 0x22
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	441a      	add	r2, r3
 8002716:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800271c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002724:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002728:	b29b      	uxth	r3, r3
 800272a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	b29b      	uxth	r3, r3
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d021      	beq.n	800278a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800274e:	b29b      	uxth	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	3302      	adds	r3, #2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	4413      	add	r3, r2
 8002764:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800276e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002770:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002772:	2b00      	cmp	r3, #0
 8002774:	d02a      	beq.n	80027cc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	6959      	ldr	r1, [r3, #20]
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	891a      	ldrh	r2, [r3, #8]
 8002782:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002784:	f004 ff1a 	bl	80075bc <USB_ReadPMA>
 8002788:	e020      	b.n	80027cc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	3306      	adds	r3, #6
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80027b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	6959      	ldr	r1, [r3, #20]
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	895a      	ldrh	r2, [r3, #10]
 80027c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027c8:	f004 fef8 	bl	80075bc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	69da      	ldr	r2, [r3, #28]
 80027d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027d2:	441a      	add	r2, r3
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027de:	441a      	add	r2, r3
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <PCD_EP_ISR_Handler+0x4c2>
 80027ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d206      	bcs.n	8002804 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	4619      	mov	r1, r3
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f006 fcc7 	bl	8009190 <HAL_PCD_DataOutStageCallback>
 8002802:	e005      	b.n	8002810 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800280a:	4618      	mov	r0, r3
 800280c:	f003 fa5c 	bl	8005cc8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002810:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002816:	2b00      	cmp	r3, #0
 8002818:	d07e      	beq.n	8002918 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800281a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4413      	add	r3, r2
 800282c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002848:	843b      	strh	r3, [r7, #32]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	441a      	add	r2, r3
 8002858:	8c3b      	ldrh	r3, [r7, #32]
 800285a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800285e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002862:	b29b      	uxth	r3, r3
 8002864:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	78db      	ldrb	r3, [r3, #3]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d00c      	beq.n	8002888 <PCD_EP_ISR_Handler+0x554>
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	78db      	ldrb	r3, [r3, #3]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800287a:	2b02      	cmp	r3, #2
 800287c:	d146      	bne.n	800290c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800287e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d141      	bne.n	800290c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002890:	b29b      	uxth	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	3302      	adds	r3, #2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	8bfb      	ldrh	r3, [r7, #30]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d906      	bls.n	80028ca <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	8bfb      	ldrh	r3, [r7, #30]
 80028c2:	1ad2      	subs	r2, r2, r3
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	619a      	str	r2, [r3, #24]
 80028c8:	e002      	b.n	80028d0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d106      	bne.n	80028e6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f006 fc71 	bl	80091c6 <HAL_PCD_DataInStageCallback>
 80028e4:	e018      	b.n	8002918 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	8bfb      	ldrh	r3, [r7, #30]
 80028ec:	441a      	add	r2, r3
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	69da      	ldr	r2, [r3, #28]
 80028f6:	8bfb      	ldrh	r3, [r7, #30]
 80028f8:	441a      	add	r2, r3
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002904:	4618      	mov	r0, r3
 8002906:	f003 f9df 	bl	8005cc8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800290a:	e005      	b.n	8002918 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800290c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800290e:	461a      	mov	r2, r3
 8002910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f91b 	bl	8002b4e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002920:	b29b      	uxth	r3, r3
 8002922:	b21b      	sxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	f6ff ad0a 	blt.w	800233e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3738      	adds	r7, #56	; 0x38
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d07e      	beq.n	8002a4a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002954:	b29b      	uxth	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	3302      	adds	r3, #2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	4413      	add	r3, r2
 800296a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002974:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	8b7b      	ldrh	r3, [r7, #26]
 800297c:	429a      	cmp	r2, r3
 800297e:	d306      	bcc.n	800298e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	8b7b      	ldrh	r3, [r7, #26]
 8002986:	1ad2      	subs	r2, r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	619a      	str	r2, [r3, #24]
 800298c:	e002      	b.n	8002994 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d123      	bne.n	80029e4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	833b      	strh	r3, [r7, #24]
 80029b8:	8b3b      	ldrh	r3, [r7, #24]
 80029ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029be:	833b      	strh	r3, [r7, #24]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	8b3b      	ldrh	r3, [r7, #24]
 80029d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01f      	beq.n	8002a2e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a08:	82fb      	strh	r3, [r7, #22]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	8afb      	ldrh	r3, [r7, #22]
 8002a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a2e:	8b7b      	ldrh	r3, [r7, #26]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8087 	beq.w	8002b44 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	6959      	ldr	r1, [r3, #20]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	891a      	ldrh	r2, [r3, #8]
 8002a42:	8b7b      	ldrh	r3, [r7, #26]
 8002a44:	f004 fdba 	bl	80075bc <USB_ReadPMA>
 8002a48:	e07c      	b.n	8002b44 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3306      	adds	r3, #6
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a72:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	699a      	ldr	r2, [r3, #24]
 8002a78:	8b7b      	ldrh	r3, [r7, #26]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d306      	bcc.n	8002a8c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	8b7b      	ldrh	r3, [r7, #26]
 8002a84:	1ad2      	subs	r2, r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	619a      	str	r2, [r3, #24]
 8002a8a:	e002      	b.n	8002a92 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d123      	bne.n	8002ae2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab4:	83fb      	strh	r3, [r7, #30]
 8002ab6:	8bfb      	ldrh	r3, [r7, #30]
 8002ab8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002abc:	83fb      	strh	r3, [r7, #30]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	441a      	add	r2, r3
 8002acc:	8bfb      	ldrh	r3, [r7, #30]
 8002ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d11f      	bne.n	8002b2c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	83bb      	strh	r3, [r7, #28]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	441a      	add	r2, r3
 8002b16:	8bbb      	ldrh	r3, [r7, #28]
 8002b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b2c:	8b7b      	ldrh	r3, [r7, #26]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	6959      	ldr	r1, [r3, #20]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	895a      	ldrh	r2, [r3, #10]
 8002b3e:	8b7b      	ldrh	r3, [r7, #26]
 8002b40:	f004 fd3c 	bl	80075bc <USB_ReadPMA>
    }
  }

  return count;
 8002b44:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b0a2      	sub	sp, #136	; 0x88
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 81c7 	beq.w	8002ef6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	699a      	ldr	r2, [r3, #24]
 8002b98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d907      	bls.n	8002bb0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	699a      	ldr	r2, [r3, #24]
 8002ba4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ba8:	1ad2      	subs	r2, r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	619a      	str	r2, [r3, #24]
 8002bae:	e002      	b.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 80b9 	bne.w	8002d32 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	785b      	ldrb	r3, [r3, #1]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d126      	bne.n	8002c16 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	4413      	add	r3, r2
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	011a      	lsls	r2, r3, #4
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	4413      	add	r3, r2
 8002bea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	801a      	strh	r2, [r3, #0]
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	801a      	strh	r2, [r3, #0]
 8002c14:	e01a      	b.n	8002c4c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	785b      	ldrb	r3, [r3, #1]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d116      	bne.n	8002c4c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	4413      	add	r3, r2
 8002c34:	633b      	str	r3, [r7, #48]	; 0x30
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	011a      	lsls	r2, r3, #4
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	4413      	add	r3, r2
 8002c40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c48:	2200      	movs	r2, #0
 8002c4a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	623b      	str	r3, [r7, #32]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	785b      	ldrb	r3, [r3, #1]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d126      	bne.n	8002ca8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	4413      	add	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	011a      	lsls	r2, r3, #4
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	801a      	strh	r2, [r3, #0]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	801a      	strh	r2, [r3, #0]
 8002ca6:	e017      	b.n	8002cd8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	785b      	ldrb	r3, [r3, #1]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d113      	bne.n	8002cd8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	623b      	str	r3, [r7, #32]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	011a      	lsls	r2, r3, #4
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f006 fa71 	bl	80091c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 82d4 	beq.w	8003298 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0a:	827b      	strh	r3, [r7, #18]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	441a      	add	r2, r3
 8002d1a:	8a7b      	ldrh	r3, [r7, #18]
 8002d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	8013      	strh	r3, [r2, #0]
 8002d30:	e2b2      	b.n	8003298 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d021      	beq.n	8002d80 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	441a      	add	r2, r3
 8002d68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	f040 8286 	bne.w	8003298 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d94:	441a      	add	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002da2:	441a      	add	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	6a1a      	ldr	r2, [r3, #32]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d309      	bcc.n	8002dc8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	6a1a      	ldr	r2, [r3, #32]
 8002dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc0:	1ad2      	subs	r2, r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	621a      	str	r2, [r3, #32]
 8002dc6:	e015      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d107      	bne.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002dd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dd4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002dde:	e009      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2200      	movs	r2, #0
 8002df2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	785b      	ldrb	r3, [r3, #1]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d155      	bne.n	8002ea8 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e10:	4413      	add	r3, r2
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	011a      	lsls	r2, r3, #4
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
 8002e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d112      	bne.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x302>
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e38:	801a      	strh	r2, [r3, #0]
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	e047      	b.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e52:	2b3e      	cmp	r3, #62	; 0x3e
 8002e54:	d811      	bhi.n	8002e7a <HAL_PCD_EP_DB_Transmit+0x32c>
 8002e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_PCD_EP_DB_Transmit+0x31e>
 8002e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e68:	3301      	adds	r3, #1
 8002e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	029b      	lsls	r3, r3, #10
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e76:	801a      	strh	r2, [r3, #0]
 8002e78:	e032      	b.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <HAL_PCD_EP_DB_Transmit+0x342>
 8002e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	029b      	lsls	r3, r3, #10
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea4:	801a      	strh	r2, [r3, #0]
 8002ea6:	e01b      	b.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	785b      	ldrb	r3, [r3, #1]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d117      	bne.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec4:	4413      	add	r3, r2
 8002ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	011a      	lsls	r2, r3, #4
 8002ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ede:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6959      	ldr	r1, [r3, #20]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	891a      	ldrh	r2, [r3, #8]
 8002eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	f004 fb1f 	bl	8007532 <USB_WritePMA>
 8002ef4:	e1d0      	b.n	8003298 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3306      	adds	r3, #6
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d307      	bcc.n	8002f3e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f36:	1ad2      	subs	r2, r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	619a      	str	r2, [r3, #24]
 8002f3c:	e002      	b.n	8002f44 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f040 80c4 	bne.w	80030d6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	785b      	ldrb	r3, [r3, #1]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d126      	bne.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x456>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6a:	4413      	add	r3, r2
 8002f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	011a      	lsls	r2, r3, #4
 8002f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f76:	4413      	add	r3, r2
 8002f78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f8c:	801a      	strh	r2, [r3, #0]
 8002f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fa0:	801a      	strh	r2, [r3, #0]
 8002fa2:	e01a      	b.n	8002fda <HAL_PCD_EP_DB_Transmit+0x48c>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d116      	bne.n	8002fda <HAL_PCD_EP_DB_Transmit+0x48c>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	677b      	str	r3, [r7, #116]	; 0x74
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc0:	4413      	add	r3, r2
 8002fc2:	677b      	str	r3, [r7, #116]	; 0x74
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	011a      	lsls	r2, r3, #4
 8002fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fcc:	4413      	add	r3, r2
 8002fce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fd2:	673b      	str	r3, [r7, #112]	; 0x70
 8002fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d12f      	bne.n	8003048 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003000:	4413      	add	r3, r2
 8003002:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	011a      	lsls	r2, r3, #4
 800300c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003010:	4413      	add	r3, r2
 8003012:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800301a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003026:	b29a      	uxth	r2, r3
 8003028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800302c:	801a      	strh	r2, [r3, #0]
 800302e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	b29b      	uxth	r3, r3
 8003036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800303a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800303e:	b29a      	uxth	r2, r3
 8003040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003044:	801a      	strh	r2, [r3, #0]
 8003046:	e017      	b.n	8003078 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	785b      	ldrb	r3, [r3, #1]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d113      	bne.n	8003078 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800305e:	4413      	add	r3, r2
 8003060:	67bb      	str	r3, [r7, #120]	; 0x78
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	011a      	lsls	r2, r3, #4
 8003068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800306a:	4413      	add	r3, r2
 800306c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003070:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003074:	2200      	movs	r2, #0
 8003076:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f006 f8a1 	bl	80091c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308a:	2b00      	cmp	r3, #0
 800308c:	f040 8104 	bne.w	8003298 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	441a      	add	r2, r3
 80030bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80030c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	8013      	strh	r3, [r2, #0]
 80030d4:	e0e0      	b.n	8003298 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d121      	bne.n	8003124 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	441a      	add	r2, r3
 800310c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003118:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800311c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003120:	b29b      	uxth	r3, r3
 8003122:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800312a:	2b01      	cmp	r3, #1
 800312c:	f040 80b4 	bne.w	8003298 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003138:	441a      	add	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	69da      	ldr	r2, [r3, #28]
 8003142:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003146:	441a      	add	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	429a      	cmp	r2, r3
 8003156:	d309      	bcc.n	800316c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	6a1a      	ldr	r2, [r3, #32]
 8003162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003164:	1ad2      	subs	r2, r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	621a      	str	r2, [r3, #32]
 800316a:	e015      	b.n	8003198 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003174:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003178:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003182:	e009      	b.n	8003198 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2200      	movs	r2, #0
 800318e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	667b      	str	r3, [r7, #100]	; 0x64
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	785b      	ldrb	r3, [r3, #1]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d155      	bne.n	8003252 <HAL_PCD_EP_DB_Transmit+0x704>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ba:	4413      	add	r3, r2
 80031bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	011a      	lsls	r2, r3, #4
 80031c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c6:	4413      	add	r3, r2
 80031c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80031ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d112      	bne.n	80031fa <HAL_PCD_EP_DB_Transmit+0x6ac>
 80031d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031de:	b29a      	uxth	r2, r3
 80031e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e2:	801a      	strh	r2, [r3, #0]
 80031e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031f6:	801a      	strh	r2, [r3, #0]
 80031f8:	e044      	b.n	8003284 <HAL_PCD_EP_DB_Transmit+0x736>
 80031fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031fc:	2b3e      	cmp	r3, #62	; 0x3e
 80031fe:	d811      	bhi.n	8003224 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	657b      	str	r3, [r7, #84]	; 0x54
 8003206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003212:	3301      	adds	r3, #1
 8003214:	657b      	str	r3, [r7, #84]	; 0x54
 8003216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003218:	b29b      	uxth	r3, r3
 800321a:	029b      	lsls	r3, r3, #10
 800321c:	b29a      	uxth	r2, r3
 800321e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003220:	801a      	strh	r2, [r3, #0]
 8003222:	e02f      	b.n	8003284 <HAL_PCD_EP_DB_Transmit+0x736>
 8003224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	657b      	str	r3, [r7, #84]	; 0x54
 800322a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003236:	3b01      	subs	r3, #1
 8003238:	657b      	str	r3, [r7, #84]	; 0x54
 800323a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800323c:	b29b      	uxth	r3, r3
 800323e:	029b      	lsls	r3, r3, #10
 8003240:	b29b      	uxth	r3, r3
 8003242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800324a:	b29a      	uxth	r2, r3
 800324c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800324e:	801a      	strh	r2, [r3, #0]
 8003250:	e018      	b.n	8003284 <HAL_PCD_EP_DB_Transmit+0x736>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	785b      	ldrb	r3, [r3, #1]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d114      	bne.n	8003284 <HAL_PCD_EP_DB_Transmit+0x736>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003268:	4413      	add	r3, r2
 800326a:	667b      	str	r3, [r7, #100]	; 0x64
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	011a      	lsls	r2, r3, #4
 8003272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003274:	4413      	add	r3, r2
 8003276:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800327a:	663b      	str	r3, [r7, #96]	; 0x60
 800327c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800327e:	b29a      	uxth	r2, r3
 8003280:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003282:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	6959      	ldr	r1, [r3, #20]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	895a      	ldrh	r2, [r3, #10]
 8003290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003292:	b29b      	uxth	r3, r3
 8003294:	f004 f94d 	bl	8007532 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032b2:	823b      	strh	r3, [r7, #16]
 80032b4:	8a3b      	ldrh	r3, [r7, #16]
 80032b6:	f083 0310 	eor.w	r3, r3, #16
 80032ba:	823b      	strh	r3, [r7, #16]
 80032bc:	8a3b      	ldrh	r3, [r7, #16]
 80032be:	f083 0320 	eor.w	r3, r3, #32
 80032c2:	823b      	strh	r3, [r7, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	441a      	add	r2, r3
 80032d2:	8a3b      	ldrh	r3, [r7, #16]
 80032d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3788      	adds	r7, #136	; 0x88
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b087      	sub	sp, #28
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	817b      	strh	r3, [r7, #10]
 8003300:	4613      	mov	r3, r2
 8003302:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003304:	897b      	ldrh	r3, [r7, #10]
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00b      	beq.n	8003328 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003310:	897b      	ldrh	r3, [r7, #10]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	e009      	b.n	800333c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003328:	897a      	ldrh	r2, [r7, #10]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4413      	add	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800333c:	893b      	ldrh	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d107      	bne.n	8003352 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2200      	movs	r2, #0
 8003346:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	b29a      	uxth	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	80da      	strh	r2, [r3, #6]
 8003350:	e00b      	b.n	800336a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2201      	movs	r2, #1
 8003356:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	b29a      	uxth	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	0c1b      	lsrs	r3, r3, #16
 8003364:	b29a      	uxth	r2, r3
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr
	...

08003378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e26c      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8087 	beq.w	80034a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003398:	4b92      	ldr	r3, [pc, #584]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d00c      	beq.n	80033be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033a4:	4b8f      	ldr	r3, [pc, #572]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d112      	bne.n	80033d6 <HAL_RCC_OscConfig+0x5e>
 80033b0:	4b8c      	ldr	r3, [pc, #560]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033bc:	d10b      	bne.n	80033d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033be:	4b89      	ldr	r3, [pc, #548]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d06c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x12c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d168      	bne.n	80034a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e246      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x76>
 80033e0:	4b80      	ldr	r3, [pc, #512]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a7f      	ldr	r2, [pc, #508]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e02e      	b.n	800344c <HAL_RCC_OscConfig+0xd4>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x98>
 80033f6:	4b7b      	ldr	r3, [pc, #492]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7a      	ldr	r2, [pc, #488]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b78      	ldr	r3, [pc, #480]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a77      	ldr	r2, [pc, #476]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e01d      	b.n	800344c <HAL_RCC_OscConfig+0xd4>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0xbc>
 800341a:	4b72      	ldr	r3, [pc, #456]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a71      	ldr	r2, [pc, #452]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b6f      	ldr	r3, [pc, #444]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6e      	ldr	r2, [pc, #440]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800342c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	e00b      	b.n	800344c <HAL_RCC_OscConfig+0xd4>
 8003434:	4b6b      	ldr	r3, [pc, #428]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a6a      	ldr	r2, [pc, #424]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800343a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	4b68      	ldr	r3, [pc, #416]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a67      	ldr	r2, [pc, #412]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d013      	beq.n	800347c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fd ffc2 	bl	80013dc <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7fd ffbe 	bl	80013dc <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1fa      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b5d      	ldr	r3, [pc, #372]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0xe4>
 800347a:	e014      	b.n	80034a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fd ffae 	bl	80013dc <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003484:	f7fd ffaa 	bl	80013dc <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e1e6      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003496:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x10c>
 80034a2:	e000      	b.n	80034a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d063      	beq.n	800357a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034b2:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034be:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d11c      	bne.n	8003504 <HAL_RCC_OscConfig+0x18c>
 80034ca:	4b46      	ldr	r3, [pc, #280]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d116      	bne.n	8003504 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <HAL_RCC_OscConfig+0x176>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e1ba      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ee:	4b3d      	ldr	r3, [pc, #244]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4939      	ldr	r1, [pc, #228]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003502:	e03a      	b.n	800357a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800350c:	4b36      	ldr	r3, [pc, #216]	; (80035e8 <HAL_RCC_OscConfig+0x270>)
 800350e:	2201      	movs	r2, #1
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fd ff63 	bl	80013dc <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351a:	f7fd ff5f 	bl	80013dc <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e19b      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352c:	4b2d      	ldr	r3, [pc, #180]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003538:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4927      	ldr	r1, [pc, #156]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]
 800354c:	e015      	b.n	800357a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354e:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <HAL_RCC_OscConfig+0x270>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fd ff42 	bl	80013dc <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355c:	f7fd ff3e 	bl	80013dc <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e17a      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356e:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d03a      	beq.n	80035fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d019      	beq.n	80035c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358e:	4b17      	ldr	r3, [pc, #92]	; (80035ec <HAL_RCC_OscConfig+0x274>)
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003594:	f7fd ff22 	bl	80013dc <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800359c:	f7fd ff1e 	bl	80013dc <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e15a      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035ba:	2001      	movs	r0, #1
 80035bc:	f000 faa6 	bl	8003b0c <RCC_Delay>
 80035c0:	e01c      	b.n	80035fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <HAL_RCC_OscConfig+0x274>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c8:	f7fd ff08 	bl	80013dc <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ce:	e00f      	b.n	80035f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d0:	f7fd ff04 	bl	80013dc <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d908      	bls.n	80035f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e140      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	42420000 	.word	0x42420000
 80035ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	4b9e      	ldr	r3, [pc, #632]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e9      	bne.n	80035d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a6 	beq.w	8003756 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360e:	4b97      	ldr	r3, [pc, #604]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4b94      	ldr	r3, [pc, #592]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	4a93      	ldr	r2, [pc, #588]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003624:	61d3      	str	r3, [r2, #28]
 8003626:	4b91      	ldr	r3, [pc, #580]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003632:	2301      	movs	r3, #1
 8003634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003636:	4b8e      	ldr	r3, [pc, #568]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d118      	bne.n	8003674 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003642:	4b8b      	ldr	r3, [pc, #556]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a8a      	ldr	r2, [pc, #552]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800364e:	f7fd fec5 	bl	80013dc <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003656:	f7fd fec1 	bl	80013dc <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b64      	cmp	r3, #100	; 0x64
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0fd      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	4b81      	ldr	r3, [pc, #516]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x312>
 800367c:	4b7b      	ldr	r3, [pc, #492]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4a7a      	ldr	r2, [pc, #488]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6213      	str	r3, [r2, #32]
 8003688:	e02d      	b.n	80036e6 <HAL_RCC_OscConfig+0x36e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x334>
 8003692:	4b76      	ldr	r3, [pc, #472]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4a75      	ldr	r2, [pc, #468]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6213      	str	r3, [r2, #32]
 800369e:	4b73      	ldr	r3, [pc, #460]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4a72      	ldr	r2, [pc, #456]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036a4:	f023 0304 	bic.w	r3, r3, #4
 80036a8:	6213      	str	r3, [r2, #32]
 80036aa:	e01c      	b.n	80036e6 <HAL_RCC_OscConfig+0x36e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	d10c      	bne.n	80036ce <HAL_RCC_OscConfig+0x356>
 80036b4:	4b6d      	ldr	r3, [pc, #436]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	4a6c      	ldr	r2, [pc, #432]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	6213      	str	r3, [r2, #32]
 80036c0:	4b6a      	ldr	r3, [pc, #424]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	4a69      	ldr	r2, [pc, #420]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6213      	str	r3, [r2, #32]
 80036cc:	e00b      	b.n	80036e6 <HAL_RCC_OscConfig+0x36e>
 80036ce:	4b67      	ldr	r3, [pc, #412]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4a66      	ldr	r2, [pc, #408]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6213      	str	r3, [r2, #32]
 80036da:	4b64      	ldr	r3, [pc, #400]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4a63      	ldr	r2, [pc, #396]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d015      	beq.n	800371a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7fd fe75 	bl	80013dc <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fd fe71 	bl	80013dc <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e0ab      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370c:	4b57      	ldr	r3, [pc, #348]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ee      	beq.n	80036f6 <HAL_RCC_OscConfig+0x37e>
 8003718:	e014      	b.n	8003744 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371a:	f7fd fe5f 	bl	80013dc <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003720:	e00a      	b.n	8003738 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003722:	f7fd fe5b 	bl	80013dc <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e095      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003738:	4b4c      	ldr	r3, [pc, #304]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ee      	bne.n	8003722 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d105      	bne.n	8003756 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374a:	4b48      	ldr	r3, [pc, #288]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	4a47      	ldr	r2, [pc, #284]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003754:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8081 	beq.w	8003862 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003760:	4b42      	ldr	r3, [pc, #264]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b08      	cmp	r3, #8
 800376a:	d061      	beq.n	8003830 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d146      	bne.n	8003802 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003774:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_RCC_OscConfig+0x4fc>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377a:	f7fd fe2f 	bl	80013dc <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003782:	f7fd fe2b 	bl	80013dc <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e067      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003794:	4b35      	ldr	r3, [pc, #212]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f0      	bne.n	8003782 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d108      	bne.n	80037bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037aa:	4b30      	ldr	r3, [pc, #192]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	492d      	ldr	r1, [pc, #180]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037bc:	4b2b      	ldr	r3, [pc, #172]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a19      	ldr	r1, [r3, #32]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	430b      	orrs	r3, r1
 80037ce:	4927      	ldr	r1, [pc, #156]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d4:	4b27      	ldr	r3, [pc, #156]	; (8003874 <HAL_RCC_OscConfig+0x4fc>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037da:	f7fd fdff 	bl	80013dc <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fd fdfb 	bl	80013dc <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e037      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037f4:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x46a>
 8003800:	e02f      	b.n	8003862 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_RCC_OscConfig+0x4fc>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fd fde8 	bl	80013dc <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7fd fde4 	bl	80013dc <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e020      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x498>
 800382e:	e018      	b.n	8003862 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e013      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	429a      	cmp	r2, r3
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000
 8003870:	40007000 	.word	0x40007000
 8003874:	42420060 	.word	0x42420060

08003878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0d0      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800388c:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d910      	bls.n	80038bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b67      	ldr	r3, [pc, #412]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 0207 	bic.w	r2, r3, #7
 80038a2:	4965      	ldr	r1, [pc, #404]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b63      	ldr	r3, [pc, #396]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0b8      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d4:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a58      	ldr	r2, [pc, #352]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ec:	4b53      	ldr	r3, [pc, #332]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4a52      	ldr	r2, [pc, #328]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f8:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	494d      	ldr	r1, [pc, #308]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d040      	beq.n	8003998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d115      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e07f      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003936:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e073      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003946:	4b3d      	ldr	r3, [pc, #244]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e06b      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003956:	4b39      	ldr	r3, [pc, #228]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f023 0203 	bic.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4936      	ldr	r1, [pc, #216]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003968:	f7fd fd38 	bl	80013dc <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	e00a      	b.n	8003986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003970:	f7fd fd34 	bl	80013dc <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e053      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003986:	4b2d      	ldr	r3, [pc, #180]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 020c 	and.w	r2, r3, #12
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	429a      	cmp	r2, r3
 8003996:	d1eb      	bne.n	8003970 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003998:	4b27      	ldr	r3, [pc, #156]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d210      	bcs.n	80039c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 0207 	bic.w	r2, r3, #7
 80039ae:	4922      	ldr	r1, [pc, #136]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e032      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d4:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4916      	ldr	r1, [pc, #88]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	490e      	ldr	r1, [pc, #56]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a06:	f000 f821 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	490a      	ldr	r1, [pc, #40]	; (8003a40 <HAL_RCC_ClockConfig+0x1c8>)
 8003a18:	5ccb      	ldrb	r3, [r1, r3]
 8003a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1cc>)
 8003a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_RCC_ClockConfig+0x1d0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fd fc96 	bl	8001358 <HAL_InitTick>

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40022000 	.word	0x40022000
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	080097a0 	.word	0x080097a0
 8003a44:	2000001c 	.word	0x2000001c
 8003a48:	20000020 	.word	0x20000020

08003a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a4c:	b490      	push	{r4, r7}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a52:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a54:	1d3c      	adds	r4, r7, #4
 8003a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a5c:	f240 2301 	movw	r3, #513	; 0x201
 8003a60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a76:	4b22      	ldr	r3, [pc, #136]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d002      	beq.n	8003a8c <HAL_RCC_GetSysClockFreq+0x40>
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d003      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0x46>
 8003a8a:	e02d      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a8e:	623b      	str	r3, [r7, #32]
      break;
 8003a90:	e02d      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	0c9b      	lsrs	r3, r3, #18
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003aa4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ab0:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	0c5b      	lsrs	r3, r3, #17
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003abe:	4413      	add	r3, r2
 8003ac0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ac4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	4a0e      	ldr	r2, [pc, #56]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aca:	fb02 f203 	mul.w	r2, r2, r3
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad6:	e004      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	623b      	str	r3, [r7, #32]
      break;
 8003ae6:	e002      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aea:	623b      	str	r3, [r7, #32]
      break;
 8003aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aee:	6a3b      	ldr	r3, [r7, #32]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3728      	adds	r7, #40	; 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc90      	pop	{r4, r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	08009744 	.word	0x08009744
 8003b00:	40021000 	.word	0x40021000
 8003b04:	007a1200 	.word	0x007a1200
 8003b08:	003d0900 	.word	0x003d0900

08003b0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <RCC_Delay+0x34>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <RCC_Delay+0x38>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	0a5b      	lsrs	r3, r3, #9
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b28:	bf00      	nop
  }
  while (Delay --);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1e5a      	subs	r2, r3, #1
 8003b2e:	60fa      	str	r2, [r7, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1f9      	bne.n	8003b28 <RCC_Delay+0x1c>
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	2000001c 	.word	0x2000001c
 8003b44:	10624dd3 	.word	0x10624dd3

08003b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d07d      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b64:	2300      	movs	r3, #0
 8003b66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b68:	4b4f      	ldr	r3, [pc, #316]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10d      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b74:	4b4c      	ldr	r3, [pc, #304]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	4a4b      	ldr	r2, [pc, #300]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	61d3      	str	r3, [r2, #28]
 8003b80:	4b49      	ldr	r3, [pc, #292]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	4b46      	ldr	r3, [pc, #280]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d118      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9c:	4b43      	ldr	r3, [pc, #268]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a42      	ldr	r2, [pc, #264]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba8:	f7fd fc18 	bl	80013dc <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bae:	e008      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb0:	f7fd fc14 	bl	80013dc <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	; 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e06d      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc2:	4b3a      	ldr	r3, [pc, #232]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bce:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d02e      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d027      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bec:	4b2e      	ldr	r3, [pc, #184]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bf6:	4b2e      	ldr	r3, [pc, #184]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c02:	4a29      	ldr	r2, [pc, #164]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d014      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c12:	f7fd fbe3 	bl	80013dc <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c18:	e00a      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	f7fd fbdf 	bl	80013dc <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e036      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0ee      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4917      	ldr	r1, [pc, #92]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d105      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c54:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	4a13      	ldr	r2, [pc, #76]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	490b      	ldr	r1, [pc, #44]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c8a:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	4904      	ldr	r1, [pc, #16]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40007000 	.word	0x40007000
 8003cb0:	42420440 	.word	0x42420440

08003cb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e076      	b.n	8003db4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d108      	bne.n	8003ce0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd6:	d009      	beq.n	8003cec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	61da      	str	r2, [r3, #28]
 8003cde:	e005      	b.n	8003cec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fd fa08 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	ea42 0103 	orr.w	r1, r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	0c1a      	lsrs	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f002 0204 	and.w	r2, r2, #4
 8003d92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd8:	d112      	bne.n	8003e00 <HAL_SPI_Receive+0x44>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10e      	bne.n	8003e00 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2204      	movs	r2, #4
 8003de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003dea:	88fa      	ldrh	r2, [r7, #6]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f8f1 	bl	8003fde <HAL_SPI_TransmitReceive>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	e0ea      	b.n	8003fd6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_SPI_Receive+0x52>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e0e3      	b.n	8003fd6 <HAL_SPI_Receive+0x21a>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e16:	f7fd fae1 	bl	80013dc <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d002      	beq.n	8003e2e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e2c:	e0ca      	b.n	8003fc4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_SPI_Receive+0x7e>
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e3e:	e0c1      	b.n	8003fc4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2204      	movs	r2, #4
 8003e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e86:	d10f      	bne.n	8003ea8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ea6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b40      	cmp	r3, #64	; 0x40
 8003eb4:	d007      	beq.n	8003ec6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ec4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d162      	bne.n	8003f94 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ece:	e02e      	b.n	8003f2e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d115      	bne.n	8003f0a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f103 020c 	add.w	r2, r3, #12
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	7812      	ldrb	r2, [r2, #0]
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f08:	e011      	b.n	8003f2e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f0a:	f7fd fa67 	bl	80013dc <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d803      	bhi.n	8003f22 <HAL_SPI_Receive+0x166>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d102      	bne.n	8003f28 <HAL_SPI_Receive+0x16c>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f2c:	e04a      	b.n	8003fc4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1cb      	bne.n	8003ed0 <HAL_SPI_Receive+0x114>
 8003f38:	e031      	b.n	8003f9e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d113      	bne.n	8003f70 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	b292      	uxth	r2, r2
 8003f54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	1c9a      	adds	r2, r3, #2
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f6e:	e011      	b.n	8003f94 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f70:	f7fd fa34 	bl	80013dc <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d803      	bhi.n	8003f88 <HAL_SPI_Receive+0x1cc>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f86:	d102      	bne.n	8003f8e <HAL_SPI_Receive+0x1d2>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f92:	e017      	b.n	8003fc4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1cd      	bne.n	8003f3a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	6839      	ldr	r1, [r7, #0]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fa46 	bl	8004434 <SPI_EndRxTransaction>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	75fb      	strb	r3, [r7, #23]
 8003fc0:	e000      	b.n	8003fc4 <HAL_SPI_Receive+0x208>
  }

error :
 8003fc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b08c      	sub	sp, #48	; 0x30
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fec:	2301      	movs	r3, #1
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_SPI_TransmitReceive+0x26>
 8004000:	2302      	movs	r3, #2
 8004002:	e18a      	b.n	800431a <HAL_SPI_TransmitReceive+0x33c>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800400c:	f7fd f9e6 	bl	80013dc <HAL_GetTick>
 8004010:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004022:	887b      	ldrh	r3, [r7, #2]
 8004024:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800402a:	2b01      	cmp	r3, #1
 800402c:	d00f      	beq.n	800404e <HAL_SPI_TransmitReceive+0x70>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004034:	d107      	bne.n	8004046 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <HAL_SPI_TransmitReceive+0x68>
 800403e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004042:	2b04      	cmp	r3, #4
 8004044:	d003      	beq.n	800404e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004046:	2302      	movs	r3, #2
 8004048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800404c:	e15b      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x82>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x82>
 800405a:	887b      	ldrh	r3, [r7, #2]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004066:	e14e      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b04      	cmp	r3, #4
 8004072:	d003      	beq.n	800407c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2205      	movs	r2, #5
 8004078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	887a      	ldrh	r2, [r7, #2]
 8004092:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	887a      	ldrh	r2, [r7, #2]
 800409e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	887a      	ldrh	r2, [r7, #2]
 80040a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b40      	cmp	r3, #64	; 0x40
 80040be:	d007      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d8:	d178      	bne.n	80041cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_SPI_TransmitReceive+0x10a>
 80040e2:	8b7b      	ldrh	r3, [r7, #26]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d166      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	881a      	ldrh	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	1c9a      	adds	r2, r3, #2
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800410c:	e053      	b.n	80041b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b02      	cmp	r3, #2
 800411a:	d11b      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x176>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x176>
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d113      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	881a      	ldrh	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	1c9a      	adds	r2, r3, #2
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b01      	cmp	r3, #1
 8004160:	d119      	bne.n	8004196 <HAL_SPI_TransmitReceive+0x1b8>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d014      	beq.n	8004196 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	b292      	uxth	r2, r2
 8004178:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	1c9a      	adds	r2, r3, #2
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004192:	2301      	movs	r3, #1
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004196:	f7fd f921 	bl	80013dc <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d807      	bhi.n	80041b6 <HAL_SPI_TransmitReceive+0x1d8>
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d003      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041b4:	e0a7      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1a6      	bne.n	800410e <HAL_SPI_TransmitReceive+0x130>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1a1      	bne.n	800410e <HAL_SPI_TransmitReceive+0x130>
 80041ca:	e07c      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_SPI_TransmitReceive+0x1fc>
 80041d4:	8b7b      	ldrh	r3, [r7, #26]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d16b      	bne.n	80042b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004200:	e057      	b.n	80042b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b02      	cmp	r3, #2
 800420e:	d11c      	bne.n	800424a <HAL_SPI_TransmitReceive+0x26c>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d017      	beq.n	800424a <HAL_SPI_TransmitReceive+0x26c>
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d114      	bne.n	800424a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	7812      	ldrb	r2, [r2, #0]
 800422c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d119      	bne.n	800428c <HAL_SPI_TransmitReceive+0x2ae>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d014      	beq.n	800428c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004288:	2301      	movs	r3, #1
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800428c:	f7fd f8a6 	bl	80013dc <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004298:	429a      	cmp	r2, r3
 800429a:	d803      	bhi.n	80042a4 <HAL_SPI_TransmitReceive+0x2c6>
 800429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d102      	bne.n	80042aa <HAL_SPI_TransmitReceive+0x2cc>
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042b0:	e029      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1a2      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x224>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d19d      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f904 	bl	80044d8 <SPI_EndRxTxTransaction>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d006      	beq.n	80042e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042e2:	e010      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	e000      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004304:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004316:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800431a:	4618      	mov	r0, r3
 800431c:	3730      	adds	r7, #48	; 0x30
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004334:	f7fd f852 	bl	80013dc <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	4413      	add	r3, r2
 8004342:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004344:	f7fd f84a 	bl	80013dc <HAL_GetTick>
 8004348:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800434a:	4b39      	ldr	r3, [pc, #228]	; (8004430 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	015b      	lsls	r3, r3, #5
 8004350:	0d1b      	lsrs	r3, r3, #20
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	fb02 f303 	mul.w	r3, r2, r3
 8004358:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800435a:	e054      	b.n	8004406 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d050      	beq.n	8004406 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004364:	f7fd f83a 	bl	80013dc <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	429a      	cmp	r2, r3
 8004372:	d902      	bls.n	800437a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d13d      	bne.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004388:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004392:	d111      	bne.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439c:	d004      	beq.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a6:	d107      	bne.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c0:	d10f      	bne.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e017      	b.n	8004426 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3b01      	subs	r3, #1
 8004404:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4013      	ands	r3, r2
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	bf0c      	ite	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	2300      	movne	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	429a      	cmp	r2, r3
 8004422:	d19b      	bne.n	800435c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	2000001c 	.word	0x2000001c

08004434 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004448:	d111      	bne.n	800446e <SPI_EndRxTransaction+0x3a>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004452:	d004      	beq.n	800445e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445c:	d107      	bne.n	800446e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800446c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004476:	d117      	bne.n	80044a8 <SPI_EndRxTransaction+0x74>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004480:	d112      	bne.n	80044a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2200      	movs	r2, #0
 800448a:	2101      	movs	r1, #1
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f7ff ff49 	bl	8004324 <SPI_WaitFlagStateUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01a      	beq.n	80044ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e013      	b.n	80044d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2200      	movs	r2, #0
 80044b0:	2180      	movs	r1, #128	; 0x80
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f7ff ff36 	bl	8004324 <SPI_WaitFlagStateUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	f043 0220 	orr.w	r2, r3, #32
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e000      	b.n	80044d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2200      	movs	r2, #0
 80044ec:	2180      	movs	r1, #128	; 0x80
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff ff18 	bl	8004324 <SPI_WaitFlagStateUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d007      	beq.n	800450a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fe:	f043 0220 	orr.w	r2, r3, #32
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e000      	b.n	800450c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e041      	b.n	80045aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fc fe38 	bl	80011b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f000 faf4 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d001      	beq.n	80045cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e032      	b.n	8004632 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a18      	ldr	r2, [pc, #96]	; (800463c <HAL_TIM_Base_Start+0x88>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00e      	beq.n	80045fc <HAL_TIM_Base_Start+0x48>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e6:	d009      	beq.n	80045fc <HAL_TIM_Base_Start+0x48>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a14      	ldr	r2, [pc, #80]	; (8004640 <HAL_TIM_Base_Start+0x8c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d004      	beq.n	80045fc <HAL_TIM_Base_Start+0x48>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a13      	ldr	r2, [pc, #76]	; (8004644 <HAL_TIM_Base_Start+0x90>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d111      	bne.n	8004620 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b06      	cmp	r3, #6
 800460c:	d010      	beq.n	8004630 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0201 	orr.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461e:	e007      	b.n	8004630 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800

08004648 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e041      	b.n	80046de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f839 	bl	80046e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f000 fa5a 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d109      	bne.n	800471c <HAL_TIM_PWM_Start+0x24>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b01      	cmp	r3, #1
 8004712:	bf14      	ite	ne
 8004714:	2301      	movne	r3, #1
 8004716:	2300      	moveq	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	e022      	b.n	8004762 <HAL_TIM_PWM_Start+0x6a>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b04      	cmp	r3, #4
 8004720:	d109      	bne.n	8004736 <HAL_TIM_PWM_Start+0x3e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	bf14      	ite	ne
 800472e:	2301      	movne	r3, #1
 8004730:	2300      	moveq	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	e015      	b.n	8004762 <HAL_TIM_PWM_Start+0x6a>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d109      	bne.n	8004750 <HAL_TIM_PWM_Start+0x58>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	e008      	b.n	8004762 <HAL_TIM_PWM_Start+0x6a>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e05e      	b.n	8004828 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d104      	bne.n	800477a <HAL_TIM_PWM_Start+0x82>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004778:	e013      	b.n	80047a2 <HAL_TIM_PWM_Start+0xaa>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b04      	cmp	r3, #4
 800477e:	d104      	bne.n	800478a <HAL_TIM_PWM_Start+0x92>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004788:	e00b      	b.n	80047a2 <HAL_TIM_PWM_Start+0xaa>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d104      	bne.n	800479a <HAL_TIM_PWM_Start+0xa2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004798:	e003      	b.n	80047a2 <HAL_TIM_PWM_Start+0xaa>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2201      	movs	r2, #1
 80047a8:	6839      	ldr	r1, [r7, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fc48 	bl	8005040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <HAL_TIM_PWM_Start+0x138>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d107      	bne.n	80047ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a18      	ldr	r2, [pc, #96]	; (8004830 <HAL_TIM_PWM_Start+0x138>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00e      	beq.n	80047f2 <HAL_TIM_PWM_Start+0xfa>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047dc:	d009      	beq.n	80047f2 <HAL_TIM_PWM_Start+0xfa>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a14      	ldr	r2, [pc, #80]	; (8004834 <HAL_TIM_PWM_Start+0x13c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <HAL_TIM_PWM_Start+0xfa>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a12      	ldr	r2, [pc, #72]	; (8004838 <HAL_TIM_PWM_Start+0x140>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d111      	bne.n	8004816 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b06      	cmp	r3, #6
 8004802:	d010      	beq.n	8004826 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004814:	e007      	b.n	8004826 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0201 	orr.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800

0800483c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004852:	2302      	movs	r3, #2
 8004854:	e0ac      	b.n	80049b0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b0c      	cmp	r3, #12
 8004862:	f200 809f 	bhi.w	80049a4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	080048a1 	.word	0x080048a1
 8004870:	080049a5 	.word	0x080049a5
 8004874:	080049a5 	.word	0x080049a5
 8004878:	080049a5 	.word	0x080049a5
 800487c:	080048e1 	.word	0x080048e1
 8004880:	080049a5 	.word	0x080049a5
 8004884:	080049a5 	.word	0x080049a5
 8004888:	080049a5 	.word	0x080049a5
 800488c:	08004923 	.word	0x08004923
 8004890:	080049a5 	.word	0x080049a5
 8004894:	080049a5 	.word	0x080049a5
 8004898:	080049a5 	.word	0x080049a5
 800489c:	08004963 	.word	0x08004963
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f9ac 	bl	8004c04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0208 	orr.w	r2, r2, #8
 80048ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0204 	bic.w	r2, r2, #4
 80048ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6999      	ldr	r1, [r3, #24]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	619a      	str	r2, [r3, #24]
      break;
 80048de:	e062      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 f9f2 	bl	8004cd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6999      	ldr	r1, [r3, #24]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	021a      	lsls	r2, r3, #8
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	619a      	str	r2, [r3, #24]
      break;
 8004920:	e041      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fa3b 	bl	8004da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0208 	orr.w	r2, r2, #8
 800493c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0204 	bic.w	r2, r2, #4
 800494c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69d9      	ldr	r1, [r3, #28]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	61da      	str	r2, [r3, #28]
      break;
 8004960:	e021      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fa85 	bl	8004e78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800497c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69d9      	ldr	r1, [r3, #28]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	021a      	lsls	r2, r3, #8
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	61da      	str	r2, [r3, #28]
      break;
 80049a2:	e000      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80049a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_TIM_ConfigClockSource+0x18>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e0b3      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x180>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a08:	d03e      	beq.n	8004a88 <HAL_TIM_ConfigClockSource+0xd0>
 8004a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0e:	f200 8087 	bhi.w	8004b20 <HAL_TIM_ConfigClockSource+0x168>
 8004a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a16:	f000 8085 	beq.w	8004b24 <HAL_TIM_ConfigClockSource+0x16c>
 8004a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1e:	d87f      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x168>
 8004a20:	2b70      	cmp	r3, #112	; 0x70
 8004a22:	d01a      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0xa2>
 8004a24:	2b70      	cmp	r3, #112	; 0x70
 8004a26:	d87b      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x168>
 8004a28:	2b60      	cmp	r3, #96	; 0x60
 8004a2a:	d050      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x116>
 8004a2c:	2b60      	cmp	r3, #96	; 0x60
 8004a2e:	d877      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x168>
 8004a30:	2b50      	cmp	r3, #80	; 0x50
 8004a32:	d03c      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0xf6>
 8004a34:	2b50      	cmp	r3, #80	; 0x50
 8004a36:	d873      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x168>
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d058      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x136>
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d86f      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x168>
 8004a40:	2b30      	cmp	r3, #48	; 0x30
 8004a42:	d064      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x156>
 8004a44:	2b30      	cmp	r3, #48	; 0x30
 8004a46:	d86b      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x168>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d060      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x156>
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d867      	bhi.n	8004b20 <HAL_TIM_ConfigClockSource+0x168>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d05c      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x156>
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d05a      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a58:	e062      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	6899      	ldr	r1, [r3, #8]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f000 faca 	bl	8005002 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	609a      	str	r2, [r3, #8]
      break;
 8004a86:	e04e      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	6899      	ldr	r1, [r3, #8]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f000 fab3 	bl	8005002 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aaa:	609a      	str	r2, [r3, #8]
      break;
 8004aac:	e03b      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 fa2a 	bl	8004f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2150      	movs	r1, #80	; 0x50
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fa81 	bl	8004fce <TIM_ITRx_SetConfig>
      break;
 8004acc:	e02b      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6859      	ldr	r1, [r3, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f000 fa48 	bl	8004f70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2160      	movs	r1, #96	; 0x60
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fa71 	bl	8004fce <TIM_ITRx_SetConfig>
      break;
 8004aec:	e01b      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f000 fa0a 	bl	8004f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2140      	movs	r1, #64	; 0x40
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fa61 	bl	8004fce <TIM_ITRx_SetConfig>
      break;
 8004b0c:	e00b      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f000 fa58 	bl	8004fce <TIM_ITRx_SetConfig>
        break;
 8004b1e:	e002      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b20:	bf00      	nop
 8004b22:	e000      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a29      	ldr	r2, [pc, #164]	; (8004bf8 <TIM_Base_SetConfig+0xb8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00b      	beq.n	8004b70 <TIM_Base_SetConfig+0x30>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d007      	beq.n	8004b70 <TIM_Base_SetConfig+0x30>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a26      	ldr	r2, [pc, #152]	; (8004bfc <TIM_Base_SetConfig+0xbc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d003      	beq.n	8004b70 <TIM_Base_SetConfig+0x30>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <TIM_Base_SetConfig+0xc0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d108      	bne.n	8004b82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <TIM_Base_SetConfig+0xb8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00b      	beq.n	8004ba2 <TIM_Base_SetConfig+0x62>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b90:	d007      	beq.n	8004ba2 <TIM_Base_SetConfig+0x62>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a19      	ldr	r2, [pc, #100]	; (8004bfc <TIM_Base_SetConfig+0xbc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d003      	beq.n	8004ba2 <TIM_Base_SetConfig+0x62>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a18      	ldr	r2, [pc, #96]	; (8004c00 <TIM_Base_SetConfig+0xc0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d108      	bne.n	8004bb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a07      	ldr	r2, [pc, #28]	; (8004bf8 <TIM_Base_SetConfig+0xb8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d103      	bne.n	8004be8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	615a      	str	r2, [r3, #20]
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr
 8004bf8:	40012c00 	.word	0x40012c00
 8004bfc:	40000400 	.word	0x40000400
 8004c00:	40000800 	.word	0x40000800

08004c04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	f023 0201 	bic.w	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0303 	bic.w	r3, r3, #3
 8004c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f023 0302 	bic.w	r3, r3, #2
 8004c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a1c      	ldr	r2, [pc, #112]	; (8004ccc <TIM_OC1_SetConfig+0xc8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d10c      	bne.n	8004c7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f023 0308 	bic.w	r3, r3, #8
 8004c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f023 0304 	bic.w	r3, r3, #4
 8004c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a13      	ldr	r2, [pc, #76]	; (8004ccc <TIM_OC1_SetConfig+0xc8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d111      	bne.n	8004ca6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	621a      	str	r2, [r3, #32]
}
 8004cc0:	bf00      	nop
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40012c00 	.word	0x40012c00

08004cd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	f023 0210 	bic.w	r2, r3, #16
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f023 0320 	bic.w	r3, r3, #32
 8004d1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a1d      	ldr	r2, [pc, #116]	; (8004da0 <TIM_OC2_SetConfig+0xd0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d10d      	bne.n	8004d4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a14      	ldr	r2, [pc, #80]	; (8004da0 <TIM_OC2_SetConfig+0xd0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d113      	bne.n	8004d7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	621a      	str	r2, [r3, #32]
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr
 8004da0:	40012c00 	.word	0x40012c00

08004da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <TIM_OC3_SetConfig+0xd0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d10d      	bne.n	8004e1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a14      	ldr	r2, [pc, #80]	; (8004e74 <TIM_OC3_SetConfig+0xd0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d113      	bne.n	8004e4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	621a      	str	r2, [r3, #32]
}
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40012c00 	.word	0x40012c00

08004e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	021b      	lsls	r3, r3, #8
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	031b      	lsls	r3, r3, #12
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a0f      	ldr	r2, [pc, #60]	; (8004f10 <TIM_OC4_SetConfig+0x98>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d109      	bne.n	8004eec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ede:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	019b      	lsls	r3, r3, #6
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	621a      	str	r2, [r3, #32]
}
 8004f06:	bf00      	nop
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr
 8004f10:	40012c00 	.word	0x40012c00

08004f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f023 0201 	bic.w	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f023 030a 	bic.w	r3, r3, #10
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	621a      	str	r2, [r3, #32]
}
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f023 0210 	bic.w	r2, r3, #16
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	031b      	lsls	r3, r3, #12
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	621a      	str	r2, [r3, #32]
}
 8004fc4:	bf00      	nop
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f043 0307 	orr.w	r3, r3, #7
 8004ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	609a      	str	r2, [r3, #8]
}
 8004ff8:	bf00      	nop
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr

08005002 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005002:	b480      	push	{r7}
 8005004:	b087      	sub	sp, #28
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
 800500e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800501c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	021a      	lsls	r2, r3, #8
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	431a      	orrs	r2, r3
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4313      	orrs	r3, r2
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	609a      	str	r2, [r3, #8]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	2201      	movs	r2, #1
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1a      	ldr	r2, [r3, #32]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	43db      	mvns	r3, r3
 8005062:	401a      	ands	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1a      	ldr	r2, [r3, #32]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	fa01 f303 	lsl.w	r3, r1, r3
 8005078:	431a      	orrs	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	621a      	str	r2, [r3, #32]
}
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800509c:	2302      	movs	r3, #2
 800509e:	e046      	b.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a16      	ldr	r2, [pc, #88]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00e      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ec:	d009      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a12      	ldr	r2, [pc, #72]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d004      	beq.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a10      	ldr	r2, [pc, #64]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10c      	bne.n	800511c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	4313      	orrs	r3, r2
 8005112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800

08005144 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005144:	b084      	sub	sp, #16
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	f107 0014 	add.w	r0, r7, #20
 8005152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	b004      	add	sp, #16
 8005162:	4770      	bx	lr

08005164 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005174:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005178:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	b29a      	uxth	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr

08005190 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005198:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800519c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	43db      	mvns	r3, r3
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	4013      	ands	r3, r2
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr

080051dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80051dc:	b084      	sub	sp, #16
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	f107 0014 	add.w	r0, r7, #20
 80051ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	b004      	add	sp, #16
 800521a:	4770      	bx	lr

0800521c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800521c:	b480      	push	{r7}
 800521e:	b09b      	sub	sp, #108	; 0x6c
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	78db      	ldrb	r3, [r3, #3]
 800524a:	2b03      	cmp	r3, #3
 800524c:	d81f      	bhi.n	800528e <USB_ActivateEndpoint+0x72>
 800524e:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <USB_ActivateEndpoint+0x38>)
 8005250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005254:	08005265 	.word	0x08005265
 8005258:	08005281 	.word	0x08005281
 800525c:	08005297 	.word	0x08005297
 8005260:	08005273 	.word	0x08005273
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005264:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800526c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005270:	e012      	b.n	8005298 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005272:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005276:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800527a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800527e:	e00b      	b.n	8005298 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005280:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005284:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005288:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800528c:	e004      	b.n	8005298 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005294:	e000      	b.n	8005298 <USB_ActivateEndpoint+0x7c>
      break;
 8005296:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	441a      	add	r2, r3
 80052a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80052ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	7b1b      	ldrb	r3, [r3, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f040 8149 	bne.w	800559c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 8084 	beq.w	800541c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531e:	b29b      	uxth	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	4413      	add	r3, r2
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	011a      	lsls	r2, r3, #4
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	88db      	ldrh	r3, [r3, #6]
 800533c:	085b      	lsrs	r3, r3, #1
 800533e:	b29b      	uxth	r3, r3
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	81fb      	strh	r3, [r7, #14]
 8005356:	89fb      	ldrh	r3, [r7, #14]
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01b      	beq.n	8005398 <USB_ActivateEndpoint+0x17c>
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005376:	81bb      	strh	r3, [r7, #12]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	89bb      	ldrh	r3, [r7, #12]
 8005384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005390:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005394:	b29b      	uxth	r3, r3
 8005396:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	78db      	ldrb	r3, [r3, #3]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d020      	beq.n	80053e2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b6:	813b      	strh	r3, [r7, #8]
 80053b8:	893b      	ldrh	r3, [r7, #8]
 80053ba:	f083 0320 	eor.w	r3, r3, #32
 80053be:	813b      	strh	r3, [r7, #8]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	441a      	add	r2, r3
 80053ca:	893b      	ldrh	r3, [r7, #8]
 80053cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053dc:	b29b      	uxth	r3, r3
 80053de:	8013      	strh	r3, [r2, #0]
 80053e0:	e27f      	b.n	80058e2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f8:	817b      	strh	r3, [r7, #10]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	441a      	add	r2, r3
 8005404:	897b      	ldrh	r3, [r7, #10]
 8005406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005416:	b29b      	uxth	r3, r3
 8005418:	8013      	strh	r3, [r2, #0]
 800541a:	e262      	b.n	80058e2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005426:	b29b      	uxth	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	4413      	add	r3, r2
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	011a      	lsls	r2, r3, #4
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	4413      	add	r3, r2
 800543a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800543e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	88db      	ldrh	r3, [r3, #6]
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	b29b      	uxth	r3, r3
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545a:	b29b      	uxth	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	4413      	add	r3, r2
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	011a      	lsls	r2, r3, #4
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	4413      	add	r3, r2
 800546e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005472:	623b      	str	r3, [r7, #32]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d112      	bne.n	80054a2 <USB_ActivateEndpoint+0x286>
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29b      	uxth	r3, r3
 8005482:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005486:	b29a      	uxth	r2, r3
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800549a:	b29a      	uxth	r2, r3
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	801a      	strh	r2, [r3, #0]
 80054a0:	e02f      	b.n	8005502 <USB_ActivateEndpoint+0x2e6>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b3e      	cmp	r3, #62	; 0x3e
 80054a8:	d813      	bhi.n	80054d2 <USB_ActivateEndpoint+0x2b6>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	085b      	lsrs	r3, r3, #1
 80054b0:	663b      	str	r3, [r7, #96]	; 0x60
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <USB_ActivateEndpoint+0x2a8>
 80054be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c0:	3301      	adds	r3, #1
 80054c2:	663b      	str	r3, [r7, #96]	; 0x60
 80054c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	029b      	lsls	r3, r3, #10
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	801a      	strh	r2, [r3, #0]
 80054d0:	e017      	b.n	8005502 <USB_ActivateEndpoint+0x2e6>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	663b      	str	r3, [r7, #96]	; 0x60
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <USB_ActivateEndpoint+0x2d0>
 80054e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054e8:	3b01      	subs	r3, #1
 80054ea:	663b      	str	r3, [r7, #96]	; 0x60
 80054ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	029b      	lsls	r3, r3, #10
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	83fb      	strh	r3, [r7, #30]
 8005510:	8bfb      	ldrh	r3, [r7, #30]
 8005512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01b      	beq.n	8005552 <USB_ActivateEndpoint+0x336>
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005530:	83bb      	strh	r3, [r7, #28]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	8bbb      	ldrh	r3, [r7, #28]
 800553e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005546:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800554a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800554e:	b29b      	uxth	r3, r3
 8005550:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29b      	uxth	r3, r3
 8005560:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005568:	837b      	strh	r3, [r7, #26]
 800556a:	8b7b      	ldrh	r3, [r7, #26]
 800556c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005570:	837b      	strh	r3, [r7, #26]
 8005572:	8b7b      	ldrh	r3, [r7, #26]
 8005574:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005578:	837b      	strh	r3, [r7, #26]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	441a      	add	r2, r3
 8005584:	8b7b      	ldrh	r3, [r7, #26]
 8005586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]
 800559a:	e1a2      	b.n	80058e2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	441a      	add	r2, r3
 80055c0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80055c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80055d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	65bb      	str	r3, [r7, #88]	; 0x58
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055e8:	4413      	add	r3, r2
 80055ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	011a      	lsls	r2, r3, #4
 80055f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055fa:	657b      	str	r3, [r7, #84]	; 0x54
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	891b      	ldrh	r3, [r3, #8]
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	b29b      	uxth	r3, r3
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800560a:	801a      	strh	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	653b      	str	r3, [r7, #80]	; 0x50
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005616:	b29b      	uxth	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800561c:	4413      	add	r3, r2
 800561e:	653b      	str	r3, [r7, #80]	; 0x50
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	011a      	lsls	r2, r3, #4
 8005626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005628:	4413      	add	r3, r2
 800562a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800562e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	895b      	ldrh	r3, [r3, #10]
 8005634:	085b      	lsrs	r3, r3, #1
 8005636:	b29b      	uxth	r3, r3
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	785b      	ldrb	r3, [r3, #1]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f040 8091 	bne.w	800576c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005658:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800565a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d01b      	beq.n	800569a <USB_ActivateEndpoint+0x47e>
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29b      	uxth	r3, r3
 8005670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005678:	877b      	strh	r3, [r7, #58]	; 0x3a
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	441a      	add	r2, r3
 8005684:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	873b      	strh	r3, [r7, #56]	; 0x38
 80056a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01b      	beq.n	80056ea <USB_ActivateEndpoint+0x4ce>
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	441a      	add	r2, r3
 80056d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005700:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005702:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005704:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005708:	86bb      	strh	r3, [r7, #52]	; 0x34
 800570a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800570c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005710:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	441a      	add	r2, r3
 800571c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800571e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800572e:	b29b      	uxth	r3, r3
 8005730:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29b      	uxth	r3, r3
 8005740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005748:	867b      	strh	r3, [r7, #50]	; 0x32
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	441a      	add	r2, r3
 8005754:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800575a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800575e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005766:	b29b      	uxth	r3, r3
 8005768:	8013      	strh	r3, [r2, #0]
 800576a:	e0ba      	b.n	80058e2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800577c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01d      	beq.n	80057c4 <USB_ActivateEndpoint+0x5a8>
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	441a      	add	r2, r3
 80057ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80057b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80057d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80057d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01d      	beq.n	800581c <USB_ActivateEndpoint+0x600>
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	441a      	add	r2, r3
 8005804:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005814:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005818:	b29b      	uxth	r3, r3
 800581a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	78db      	ldrb	r3, [r3, #3]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d024      	beq.n	800586e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29b      	uxth	r3, r3
 8005832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800583e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005842:	f083 0320 	eor.w	r3, r3, #32
 8005846:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	441a      	add	r2, r3
 8005854:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800585c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005868:	b29b      	uxth	r3, r3
 800586a:	8013      	strh	r3, [r2, #0]
 800586c:	e01d      	b.n	80058aa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005884:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	441a      	add	r2, r3
 8005892:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800589e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	441a      	add	r2, r3
 80058cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80058ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058de:	b29b      	uxth	r3, r3
 80058e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80058e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	376c      	adds	r7, #108	; 0x6c
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b08d      	sub	sp, #52	; 0x34
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	7b1b      	ldrb	r3, [r3, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f040 808e 	bne.w	8005a20 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d044      	beq.n	8005996 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	81bb      	strh	r3, [r7, #12]
 800591a:	89bb      	ldrh	r3, [r7, #12]
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <USB_DeactivateEndpoint+0x6c>
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	b29b      	uxth	r3, r3
 8005932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	817b      	strh	r3, [r7, #10]
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	441a      	add	r2, r3
 8005946:	897b      	ldrh	r3, [r7, #10]
 8005948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005954:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005958:	b29b      	uxth	r3, r3
 800595a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005972:	813b      	strh	r3, [r7, #8]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	441a      	add	r2, r3
 800597e:	893b      	ldrh	r3, [r7, #8]
 8005980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005990:	b29b      	uxth	r3, r3
 8005992:	8013      	strh	r3, [r2, #0]
 8005994:	e192      	b.n	8005cbc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	827b      	strh	r3, [r7, #18]
 80059a4:	8a7b      	ldrh	r3, [r7, #18]
 80059a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d01b      	beq.n	80059e6 <USB_DeactivateEndpoint+0xf6>
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c4:	823b      	strh	r3, [r7, #16]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	441a      	add	r2, r3
 80059d0:	8a3b      	ldrh	r3, [r7, #16]
 80059d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fc:	81fb      	strh	r3, [r7, #14]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	441a      	add	r2, r3
 8005a08:	89fb      	ldrh	r3, [r7, #14]
 8005a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	8013      	strh	r3, [r2, #0]
 8005a1e:	e14d      	b.n	8005cbc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	785b      	ldrb	r3, [r3, #1]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f040 80a5 	bne.w	8005b74 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	843b      	strh	r3, [r7, #32]
 8005a38:	8c3b      	ldrh	r3, [r7, #32]
 8005a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01b      	beq.n	8005a7a <USB_DeactivateEndpoint+0x18a>
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a58:	83fb      	strh	r3, [r7, #30]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	441a      	add	r2, r3
 8005a64:	8bfb      	ldrh	r3, [r7, #30]
 8005a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	83bb      	strh	r3, [r7, #28]
 8005a88:	8bbb      	ldrh	r3, [r7, #28]
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d01b      	beq.n	8005aca <USB_DeactivateEndpoint+0x1da>
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa8:	837b      	strh	r3, [r7, #26]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	441a      	add	r2, r3
 8005ab4:	8b7b      	ldrh	r3, [r7, #26]
 8005ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae0:	833b      	strh	r3, [r7, #24]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	441a      	add	r2, r3
 8005aec:	8b3b      	ldrh	r3, [r7, #24]
 8005aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b18:	82fb      	strh	r3, [r7, #22]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	441a      	add	r2, r3
 8005b24:	8afb      	ldrh	r3, [r7, #22]
 8005b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b50:	82bb      	strh	r3, [r7, #20]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	441a      	add	r2, r3
 8005b5c:	8abb      	ldrh	r3, [r7, #20]
 8005b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	8013      	strh	r3, [r2, #0]
 8005b72:	e0a3      	b.n	8005cbc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005b82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01b      	beq.n	8005bc4 <USB_DeactivateEndpoint+0x2d4>
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	441a      	add	r2, r3
 8005bae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005bd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01b      	beq.n	8005c14 <USB_DeactivateEndpoint+0x324>
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf2:	853b      	strh	r3, [r7, #40]	; 0x28
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	441a      	add	r2, r3
 8005bfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	441a      	add	r2, r3
 8005c36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	441a      	add	r2, r3
 8005c6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	441a      	add	r2, r3
 8005ca6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3734      	adds	r7, #52	; 0x34
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b0cc      	sub	sp, #304	; 0x130
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	1d3b      	adds	r3, r7, #4
 8005cd0:	6018      	str	r0, [r3, #0]
 8005cd2:	463b      	mov	r3, r7
 8005cd4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cd6:	463b      	mov	r3, r7
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	785b      	ldrb	r3, [r3, #1]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	f040 872e 	bne.w	8006b3e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	463b      	mov	r3, r7
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d905      	bls.n	8005cfe <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005cfc:	e004      	b.n	8005d08 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005cfe:	463b      	mov	r3, r7
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005d08:	463b      	mov	r3, r7
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	7b1b      	ldrb	r3, [r3, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d134      	bne.n	8005d7c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005d12:	463b      	mov	r3, r7
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6959      	ldr	r1, [r3, #20]
 8005d18:	463b      	mov	r3, r7
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	88da      	ldrh	r2, [r3, #6]
 8005d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	1d38      	adds	r0, r7, #4
 8005d26:	6800      	ldr	r0, [r0, #0]
 8005d28:	f001 fc03 	bl	8007532 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d2c:	f107 0310 	add.w	r3, r7, #16
 8005d30:	1d3a      	adds	r2, r7, #4
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	1d3b      	adds	r3, r7, #4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	4619      	mov	r1, r3
 8005d42:	f107 0310 	add.w	r3, r7, #16
 8005d46:	f107 0210 	add.w	r2, r7, #16
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	463b      	mov	r3, r7
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	011a      	lsls	r2, r3, #4
 8005d58:	f107 0310 	add.w	r3, r7, #16
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005d64:	f107 030c 	add.w	r3, r7, #12
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	f107 030c 	add.w	r3, r7, #12
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	801a      	strh	r2, [r3, #0]
 8005d78:	f000 beac 	b.w	8006ad4 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	78db      	ldrb	r3, [r3, #3]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	f040 838c 	bne.w	80064a0 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005d88:	463b      	mov	r3, r7
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6a1a      	ldr	r2, [r3, #32]
 8005d8e:	463b      	mov	r3, r7
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	f240 8330 	bls.w	80063fa <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005d9a:	1d3b      	adds	r3, r7, #4
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	463b      	mov	r3, r7
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005db8:	1d3b      	adds	r3, r7, #4
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	441a      	add	r2, r3
 8005dc6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005dde:	463b      	mov	r3, r7
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de8:	1ad2      	subs	r2, r2, r3
 8005dea:	463b      	mov	r3, r7
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005df0:	1d3b      	adds	r3, r7, #4
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	463b      	mov	r3, r7
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 819e 	beq.w	8006148 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e10:	1d3a      	adds	r2, r7, #4
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	463b      	mov	r3, r7
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d17a      	bne.n	8005f16 <USB_EPStartXfer+0x24e>
 8005e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e24:	1d3a      	adds	r2, r7, #4
 8005e26:	6812      	ldr	r2, [r2, #0]
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	1d3b      	adds	r3, r7, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	4619      	mov	r1, r3
 8005e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	440a      	add	r2, r1
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	463b      	mov	r3, r7
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	011a      	lsls	r2, r3, #4
 8005e4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4413      	add	r3, r2
 8005e54:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d11a      	bne.n	8005e9c <USB_EPStartXfer+0x1d4>
 8005e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	801a      	strh	r2, [r3, #0]
 8005e9a:	e062      	b.n	8005f62 <USB_EPStartXfer+0x29a>
 8005e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ea2:	d819      	bhi.n	8005ed8 <USB_EPStartXfer+0x210>
 8005ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea8:	085b      	lsrs	r3, r3, #1
 8005eaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d004      	beq.n	8005ec4 <USB_EPStartXfer+0x1fc>
 8005eba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ec4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	029b      	lsls	r3, r3, #10
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	801a      	strh	r2, [r3, #0]
 8005ed6:	e044      	b.n	8005f62 <USB_EPStartXfer+0x29a>
 8005ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d104      	bne.n	8005ef8 <USB_EPStartXfer+0x230>
 8005eee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ef8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	029b      	lsls	r3, r3, #10
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	801a      	strh	r2, [r3, #0]
 8005f14:	e025      	b.n	8005f62 <USB_EPStartXfer+0x29a>
 8005f16:	463b      	mov	r3, r7
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	785b      	ldrb	r3, [r3, #1]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d120      	bne.n	8005f62 <USB_EPStartXfer+0x29a>
 8005f20:	1d3b      	adds	r3, r7, #4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005f34:	6812      	ldr	r2, [r2, #0]
 8005f36:	440a      	add	r2, r1
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	011a      	lsls	r2, r3, #4
 8005f42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f62:	463b      	mov	r3, r7
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	895b      	ldrh	r3, [r3, #10]
 8005f68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6959      	ldr	r1, [r3, #20]
 8005f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f7c:	1d38      	adds	r0, r7, #4
 8005f7e:	6800      	ldr	r0, [r0, #0]
 8005f80:	f001 fad7 	bl	8007532 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f84:	463b      	mov	r3, r7
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8e:	441a      	add	r2, r3
 8005f90:	463b      	mov	r3, r7
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f96:	463b      	mov	r3, r7
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6a1a      	ldr	r2, [r3, #32]
 8005f9c:	463b      	mov	r3, r7
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d909      	bls.n	8005fba <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6a1a      	ldr	r2, [r3, #32]
 8005fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb0:	1ad2      	subs	r2, r2, r3
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	621a      	str	r2, [r3, #32]
 8005fb8:	e008      	b.n	8005fcc <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005fba:	463b      	mov	r3, r7
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fcc:	463b      	mov	r3, r7
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	785b      	ldrb	r3, [r3, #1]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d17a      	bne.n	80060cc <USB_EPStartXfer+0x404>
 8005fd6:	f107 0318 	add.w	r3, r7, #24
 8005fda:	1d3a      	adds	r2, r7, #4
 8005fdc:	6812      	ldr	r2, [r2, #0]
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	1d3b      	adds	r3, r7, #4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	4619      	mov	r1, r3
 8005fec:	f107 0318 	add.w	r3, r7, #24
 8005ff0:	f107 0218 	add.w	r2, r7, #24
 8005ff4:	6812      	ldr	r2, [r2, #0]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	011a      	lsls	r2, r3, #4
 8006002:	f107 0318 	add.w	r3, r7, #24
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4413      	add	r3, r2
 800600a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800600e:	f107 0314 	add.w	r3, r7, #20
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d11a      	bne.n	8006052 <USB_EPStartXfer+0x38a>
 800601c:	f107 0314 	add.w	r3, r7, #20
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800602a:	b29a      	uxth	r2, r3
 800602c:	f107 0314 	add.w	r3, r7, #20
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	801a      	strh	r2, [r3, #0]
 8006034:	f107 0314 	add.w	r3, r7, #20
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006046:	b29a      	uxth	r2, r3
 8006048:	f107 0314 	add.w	r3, r7, #20
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	e067      	b.n	8006122 <USB_EPStartXfer+0x45a>
 8006052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006056:	2b3e      	cmp	r3, #62	; 0x3e
 8006058:	d819      	bhi.n	800608e <USB_EPStartXfer+0x3c6>
 800605a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800605e:	085b      	lsrs	r3, r3, #1
 8006060:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d004      	beq.n	800607a <USB_EPStartXfer+0x3b2>
 8006070:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006074:	3301      	adds	r3, #1
 8006076:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800607a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800607e:	b29b      	uxth	r3, r3
 8006080:	029b      	lsls	r3, r3, #10
 8006082:	b29a      	uxth	r2, r3
 8006084:	f107 0314 	add.w	r3, r7, #20
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	801a      	strh	r2, [r3, #0]
 800608c:	e049      	b.n	8006122 <USB_EPStartXfer+0x45a>
 800608e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d104      	bne.n	80060ae <USB_EPStartXfer+0x3e6>
 80060a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80060a8:	3b01      	subs	r3, #1
 80060aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80060ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	029b      	lsls	r3, r3, #10
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	f107 0314 	add.w	r3, r7, #20
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	e02a      	b.n	8006122 <USB_EPStartXfer+0x45a>
 80060cc:	463b      	mov	r3, r7
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d125      	bne.n	8006122 <USB_EPStartXfer+0x45a>
 80060d6:	f107 0320 	add.w	r3, r7, #32
 80060da:	1d3a      	adds	r2, r7, #4
 80060dc:	6812      	ldr	r2, [r2, #0]
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	1d3b      	adds	r3, r7, #4
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	4619      	mov	r1, r3
 80060ec:	f107 0320 	add.w	r3, r7, #32
 80060f0:	f107 0220 	add.w	r2, r7, #32
 80060f4:	6812      	ldr	r2, [r2, #0]
 80060f6:	440a      	add	r2, r1
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	463b      	mov	r3, r7
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	011a      	lsls	r2, r3, #4
 8006102:	f107 0320 	add.w	r3, r7, #32
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4413      	add	r3, r2
 800610a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800610e:	f107 031c 	add.w	r3, r7, #28
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006118:	b29a      	uxth	r2, r3
 800611a:	f107 031c 	add.w	r3, r7, #28
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006122:	463b      	mov	r3, r7
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	891b      	ldrh	r3, [r3, #8]
 8006128:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800612c:	463b      	mov	r3, r7
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6959      	ldr	r1, [r3, #20]
 8006132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006136:	b29b      	uxth	r3, r3
 8006138:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800613c:	1d38      	adds	r0, r7, #4
 800613e:	6800      	ldr	r0, [r0, #0]
 8006140:	f001 f9f7 	bl	8007532 <USB_WritePMA>
 8006144:	f000 bcc6 	b.w	8006ad4 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006148:	463b      	mov	r3, r7
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	785b      	ldrb	r3, [r3, #1]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d164      	bne.n	800621c <USB_EPStartXfer+0x554>
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	64bb      	str	r3, [r7, #72]	; 0x48
 8006158:	1d3b      	adds	r3, r7, #4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006160:	b29b      	uxth	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006166:	4413      	add	r3, r2
 8006168:	64bb      	str	r3, [r7, #72]	; 0x48
 800616a:	463b      	mov	r3, r7
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	011a      	lsls	r2, r3, #4
 8006172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006174:	4413      	add	r3, r2
 8006176:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800617a:	647b      	str	r3, [r7, #68]	; 0x44
 800617c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006180:	2b00      	cmp	r3, #0
 8006182:	d112      	bne.n	80061aa <USB_EPStartXfer+0x4e2>
 8006184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800618e:	b29a      	uxth	r2, r3
 8006190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b29b      	uxth	r3, r3
 800619a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	e057      	b.n	800625a <USB_EPStartXfer+0x592>
 80061aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ae:	2b3e      	cmp	r3, #62	; 0x3e
 80061b0:	d817      	bhi.n	80061e2 <USB_EPStartXfer+0x51a>
 80061b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b6:	085b      	lsrs	r3, r3, #1
 80061b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80061bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d004      	beq.n	80061d2 <USB_EPStartXfer+0x50a>
 80061c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80061cc:	3301      	adds	r3, #1
 80061ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80061d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	029b      	lsls	r3, r3, #10
 80061da:	b29a      	uxth	r2, r3
 80061dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	e03b      	b.n	800625a <USB_EPStartXfer+0x592>
 80061e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80061ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f0:	f003 031f 	and.w	r3, r3, #31
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d104      	bne.n	8006202 <USB_EPStartXfer+0x53a>
 80061f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80061fc:	3b01      	subs	r3, #1
 80061fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006202:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006206:	b29b      	uxth	r3, r3
 8006208:	029b      	lsls	r3, r3, #10
 800620a:	b29b      	uxth	r3, r3
 800620c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006214:	b29a      	uxth	r2, r3
 8006216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006218:	801a      	strh	r2, [r3, #0]
 800621a:	e01e      	b.n	800625a <USB_EPStartXfer+0x592>
 800621c:	463b      	mov	r3, r7
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	785b      	ldrb	r3, [r3, #1]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d119      	bne.n	800625a <USB_EPStartXfer+0x592>
 8006226:	1d3b      	adds	r3, r7, #4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	653b      	str	r3, [r7, #80]	; 0x50
 800622c:	1d3b      	adds	r3, r7, #4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006234:	b29b      	uxth	r3, r3
 8006236:	461a      	mov	r2, r3
 8006238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800623a:	4413      	add	r3, r2
 800623c:	653b      	str	r3, [r7, #80]	; 0x50
 800623e:	463b      	mov	r3, r7
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	011a      	lsls	r2, r3, #4
 8006246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006248:	4413      	add	r3, r2
 800624a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800624e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006254:	b29a      	uxth	r2, r3
 8006256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006258:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	891b      	ldrh	r3, [r3, #8]
 8006260:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006264:	463b      	mov	r3, r7
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6959      	ldr	r1, [r3, #20]
 800626a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626e:	b29b      	uxth	r3, r3
 8006270:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006274:	1d38      	adds	r0, r7, #4
 8006276:	6800      	ldr	r0, [r0, #0]
 8006278:	f001 f95b 	bl	8007532 <USB_WritePMA>
            ep->xfer_buff += len;
 800627c:	463b      	mov	r3, r7
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006286:	441a      	add	r2, r3
 8006288:	463b      	mov	r3, r7
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800628e:	463b      	mov	r3, r7
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6a1a      	ldr	r2, [r3, #32]
 8006294:	463b      	mov	r3, r7
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	429a      	cmp	r2, r3
 800629c:	d909      	bls.n	80062b2 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800629e:	463b      	mov	r3, r7
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6a1a      	ldr	r2, [r3, #32]
 80062a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a8:	1ad2      	subs	r2, r2, r3
 80062aa:	463b      	mov	r3, r7
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	621a      	str	r2, [r3, #32]
 80062b0:	e008      	b.n	80062c4 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80062b2:	463b      	mov	r3, r7
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80062bc:	463b      	mov	r3, r7
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2200      	movs	r2, #0
 80062c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062c4:	1d3b      	adds	r3, r7, #4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	643b      	str	r3, [r7, #64]	; 0x40
 80062ca:	463b      	mov	r3, r7
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d164      	bne.n	800639e <USB_EPStartXfer+0x6d6>
 80062d4:	1d3b      	adds	r3, r7, #4
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80062da:	1d3b      	adds	r3, r7, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	4413      	add	r3, r2
 80062ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80062ec:	463b      	mov	r3, r7
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	011a      	lsls	r2, r3, #4
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	4413      	add	r3, r2
 80062f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062fc:	637b      	str	r3, [r7, #52]	; 0x34
 80062fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d112      	bne.n	800632c <USB_EPStartXfer+0x664>
 8006306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006310:	b29a      	uxth	r2, r3
 8006312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006324:	b29a      	uxth	r2, r3
 8006326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006328:	801a      	strh	r2, [r3, #0]
 800632a:	e054      	b.n	80063d6 <USB_EPStartXfer+0x70e>
 800632c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006330:	2b3e      	cmp	r3, #62	; 0x3e
 8006332:	d817      	bhi.n	8006364 <USB_EPStartXfer+0x69c>
 8006334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800633e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <USB_EPStartXfer+0x68c>
 800634a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800634e:	3301      	adds	r3, #1
 8006350:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006354:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006358:	b29b      	uxth	r3, r3
 800635a:	029b      	lsls	r3, r3, #10
 800635c:	b29a      	uxth	r2, r3
 800635e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	e038      	b.n	80063d6 <USB_EPStartXfer+0x70e>
 8006364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800636e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006372:	f003 031f 	and.w	r3, r3, #31
 8006376:	2b00      	cmp	r3, #0
 8006378:	d104      	bne.n	8006384 <USB_EPStartXfer+0x6bc>
 800637a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800637e:	3b01      	subs	r3, #1
 8006380:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006384:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006388:	b29b      	uxth	r3, r3
 800638a:	029b      	lsls	r3, r3, #10
 800638c:	b29b      	uxth	r3, r3
 800638e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006396:	b29a      	uxth	r2, r3
 8006398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639a:	801a      	strh	r2, [r3, #0]
 800639c:	e01b      	b.n	80063d6 <USB_EPStartXfer+0x70e>
 800639e:	463b      	mov	r3, r7
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d116      	bne.n	80063d6 <USB_EPStartXfer+0x70e>
 80063a8:	1d3b      	adds	r3, r7, #4
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	461a      	mov	r2, r3
 80063b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b6:	4413      	add	r3, r2
 80063b8:	643b      	str	r3, [r7, #64]	; 0x40
 80063ba:	463b      	mov	r3, r7
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	011a      	lsls	r2, r3, #4
 80063c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c4:	4413      	add	r3, r2
 80063c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063d6:	463b      	mov	r3, r7
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	895b      	ldrh	r3, [r3, #10]
 80063dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6959      	ldr	r1, [r3, #20]
 80063e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063f0:	1d38      	adds	r0, r7, #4
 80063f2:	6800      	ldr	r0, [r0, #0]
 80063f4:	f001 f89d 	bl	8007532 <USB_WritePMA>
 80063f8:	e36c      	b.n	8006ad4 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80063fa:	463b      	mov	r3, r7
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006404:	1d3b      	adds	r3, r7, #4
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	463b      	mov	r3, r7
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800641a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006422:	1d3b      	adds	r3, r7, #4
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	463b      	mov	r3, r7
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	441a      	add	r2, r3
 8006430:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006444:	b29b      	uxth	r3, r3
 8006446:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006448:	1d3b      	adds	r3, r7, #4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800644e:	1d3b      	adds	r3, r7, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006456:	b29b      	uxth	r3, r3
 8006458:	461a      	mov	r2, r3
 800645a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800645c:	4413      	add	r3, r2
 800645e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006460:	463b      	mov	r3, r7
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	011a      	lsls	r2, r3, #4
 8006468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800646a:	4413      	add	r3, r2
 800646c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006470:	65bb      	str	r3, [r7, #88]	; 0x58
 8006472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006476:	b29a      	uxth	r2, r3
 8006478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800647a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800647c:	463b      	mov	r3, r7
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	891b      	ldrh	r3, [r3, #8]
 8006482:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006486:	463b      	mov	r3, r7
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6959      	ldr	r1, [r3, #20]
 800648c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006490:	b29b      	uxth	r3, r3
 8006492:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006496:	1d38      	adds	r0, r7, #4
 8006498:	6800      	ldr	r0, [r0, #0]
 800649a:	f001 f84a 	bl	8007532 <USB_WritePMA>
 800649e:	e319      	b.n	8006ad4 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80064a0:	1d3b      	adds	r3, r7, #4
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	463b      	mov	r3, r7
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ba:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80064be:	1d3b      	adds	r3, r7, #4
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	463b      	mov	r3, r7
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	441a      	add	r2, r3
 80064cc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80064d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80064dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80064e4:	463b      	mov	r3, r7
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6a1a      	ldr	r2, [r3, #32]
 80064ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ee:	1ad2      	subs	r2, r2, r3
 80064f0:	463b      	mov	r3, r7
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80064f6:	1d3b      	adds	r3, r7, #4
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	463b      	mov	r3, r7
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8162 	beq.w	80067d6 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006512:	1d3b      	adds	r3, r7, #4
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800651a:	463b      	mov	r3, r7
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d164      	bne.n	80065ee <USB_EPStartXfer+0x926>
 8006524:	1d3b      	adds	r3, r7, #4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	67bb      	str	r3, [r7, #120]	; 0x78
 800652a:	1d3b      	adds	r3, r7, #4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006532:	b29b      	uxth	r3, r3
 8006534:	461a      	mov	r2, r3
 8006536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006538:	4413      	add	r3, r2
 800653a:	67bb      	str	r3, [r7, #120]	; 0x78
 800653c:	463b      	mov	r3, r7
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	011a      	lsls	r2, r3, #4
 8006544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006546:	4413      	add	r3, r2
 8006548:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800654c:	677b      	str	r3, [r7, #116]	; 0x74
 800654e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d112      	bne.n	800657c <USB_EPStartXfer+0x8b4>
 8006556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006560:	b29a      	uxth	r2, r3
 8006562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006574:	b29a      	uxth	r2, r3
 8006576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006578:	801a      	strh	r2, [r3, #0]
 800657a:	e057      	b.n	800662c <USB_EPStartXfer+0x964>
 800657c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006580:	2b3e      	cmp	r3, #62	; 0x3e
 8006582:	d817      	bhi.n	80065b4 <USB_EPStartXfer+0x8ec>
 8006584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800658e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d004      	beq.n	80065a4 <USB_EPStartXfer+0x8dc>
 800659a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800659e:	3301      	adds	r3, #1
 80065a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80065a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	029b      	lsls	r3, r3, #10
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065b0:	801a      	strh	r2, [r3, #0]
 80065b2:	e03b      	b.n	800662c <USB_EPStartXfer+0x964>
 80065b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80065be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <USB_EPStartXfer+0x90c>
 80065ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80065ce:	3b01      	subs	r3, #1
 80065d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80065d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80065d8:	b29b      	uxth	r3, r3
 80065da:	029b      	lsls	r3, r3, #10
 80065dc:	b29b      	uxth	r3, r3
 80065de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	e01e      	b.n	800662c <USB_EPStartXfer+0x964>
 80065ee:	463b      	mov	r3, r7
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	785b      	ldrb	r3, [r3, #1]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d119      	bne.n	800662c <USB_EPStartXfer+0x964>
 80065f8:	1d3b      	adds	r3, r7, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006600:	b29b      	uxth	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006608:	4413      	add	r3, r2
 800660a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800660e:	463b      	mov	r3, r7
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	011a      	lsls	r2, r3, #4
 8006616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800661a:	4413      	add	r3, r2
 800661c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006620:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006626:	b29a      	uxth	r2, r3
 8006628:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800662a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800662c:	463b      	mov	r3, r7
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	895b      	ldrh	r3, [r3, #10]
 8006632:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006636:	463b      	mov	r3, r7
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6959      	ldr	r1, [r3, #20]
 800663c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006640:	b29b      	uxth	r3, r3
 8006642:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006646:	1d38      	adds	r0, r7, #4
 8006648:	6800      	ldr	r0, [r0, #0]
 800664a:	f000 ff72 	bl	8007532 <USB_WritePMA>
          ep->xfer_buff += len;
 800664e:	463b      	mov	r3, r7
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695a      	ldr	r2, [r3, #20]
 8006654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006658:	441a      	add	r2, r3
 800665a:	463b      	mov	r3, r7
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006660:	463b      	mov	r3, r7
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6a1a      	ldr	r2, [r3, #32]
 8006666:	463b      	mov	r3, r7
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	429a      	cmp	r2, r3
 800666e:	d909      	bls.n	8006684 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8006670:	463b      	mov	r3, r7
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6a1a      	ldr	r2, [r3, #32]
 8006676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667a:	1ad2      	subs	r2, r2, r3
 800667c:	463b      	mov	r3, r7
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	621a      	str	r2, [r3, #32]
 8006682:	e008      	b.n	8006696 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8006684:	463b      	mov	r3, r7
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800668e:	463b      	mov	r3, r7
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2200      	movs	r2, #0
 8006694:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 821a 	beq.w	8006ad4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066a0:	463b      	mov	r3, r7
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d164      	bne.n	8006774 <USB_EPStartXfer+0xaac>
 80066aa:	1d3b      	adds	r3, r7, #4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80066b0:	1d3b      	adds	r3, r7, #4
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	461a      	mov	r2, r3
 80066bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066be:	4413      	add	r3, r2
 80066c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80066c2:	463b      	mov	r3, r7
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	011a      	lsls	r2, r3, #4
 80066ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066cc:	4413      	add	r3, r2
 80066ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066d2:	667b      	str	r3, [r7, #100]	; 0x64
 80066d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d112      	bne.n	8006702 <USB_EPStartXfer+0xa3a>
 80066dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	e057      	b.n	80067b2 <USB_EPStartXfer+0xaea>
 8006702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006706:	2b3e      	cmp	r3, #62	; 0x3e
 8006708:	d817      	bhi.n	800673a <USB_EPStartXfer+0xa72>
 800670a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800670e:	085b      	lsrs	r3, r3, #1
 8006710:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d004      	beq.n	800672a <USB_EPStartXfer+0xa62>
 8006720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006724:	3301      	adds	r3, #1
 8006726:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800672e:	b29b      	uxth	r3, r3
 8006730:	029b      	lsls	r3, r3, #10
 8006732:	b29a      	uxth	r2, r3
 8006734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006736:	801a      	strh	r2, [r3, #0]
 8006738:	e03b      	b.n	80067b2 <USB_EPStartXfer+0xaea>
 800673a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800673e:	095b      	lsrs	r3, r3, #5
 8006740:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <USB_EPStartXfer+0xa92>
 8006750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006754:	3b01      	subs	r3, #1
 8006756:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800675e:	b29b      	uxth	r3, r3
 8006760:	029b      	lsls	r3, r3, #10
 8006762:	b29b      	uxth	r3, r3
 8006764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676c:	b29a      	uxth	r2, r3
 800676e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	e01e      	b.n	80067b2 <USB_EPStartXfer+0xaea>
 8006774:	463b      	mov	r3, r7
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	785b      	ldrb	r3, [r3, #1]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d119      	bne.n	80067b2 <USB_EPStartXfer+0xaea>
 800677e:	1d3b      	adds	r3, r7, #4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	673b      	str	r3, [r7, #112]	; 0x70
 8006784:	1d3b      	adds	r3, r7, #4
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678c:	b29b      	uxth	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006792:	4413      	add	r3, r2
 8006794:	673b      	str	r3, [r7, #112]	; 0x70
 8006796:	463b      	mov	r3, r7
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	011a      	lsls	r2, r3, #4
 800679e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067a0:	4413      	add	r3, r2
 80067a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067b2:	463b      	mov	r3, r7
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	891b      	ldrh	r3, [r3, #8]
 80067b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067bc:	463b      	mov	r3, r7
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6959      	ldr	r1, [r3, #20]
 80067c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067cc:	1d38      	adds	r0, r7, #4
 80067ce:	6800      	ldr	r0, [r0, #0]
 80067d0:	f000 feaf 	bl	8007532 <USB_WritePMA>
 80067d4:	e17e      	b.n	8006ad4 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067d6:	463b      	mov	r3, r7
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	785b      	ldrb	r3, [r3, #1]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d16f      	bne.n	80068c0 <USB_EPStartXfer+0xbf8>
 80067e0:	1d3b      	adds	r3, r7, #4
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067e8:	1d3b      	adds	r3, r7, #4
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	461a      	mov	r2, r3
 80067f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067f8:	4413      	add	r3, r2
 80067fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067fe:	463b      	mov	r3, r7
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	011a      	lsls	r2, r3, #4
 8006806:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800680a:	4413      	add	r3, r2
 800680c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d116      	bne.n	800684a <USB_EPStartXfer+0xb82>
 800681c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006828:	b29a      	uxth	r2, r3
 800682a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800682e:	801a      	strh	r2, [r3, #0]
 8006830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800683c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006840:	b29a      	uxth	r2, r3
 8006842:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006846:	801a      	strh	r2, [r3, #0]
 8006848:	e05f      	b.n	800690a <USB_EPStartXfer+0xc42>
 800684a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800684e:	2b3e      	cmp	r3, #62	; 0x3e
 8006850:	d818      	bhi.n	8006884 <USB_EPStartXfer+0xbbc>
 8006852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006856:	085b      	lsrs	r3, r3, #1
 8006858:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800685c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <USB_EPStartXfer+0xbaa>
 8006868:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800686c:	3301      	adds	r3, #1
 800686e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006872:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006876:	b29b      	uxth	r3, r3
 8006878:	029b      	lsls	r3, r3, #10
 800687a:	b29a      	uxth	r2, r3
 800687c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006880:	801a      	strh	r2, [r3, #0]
 8006882:	e042      	b.n	800690a <USB_EPStartXfer+0xc42>
 8006884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800688e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	2b00      	cmp	r3, #0
 8006898:	d104      	bne.n	80068a4 <USB_EPStartXfer+0xbdc>
 800689a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800689e:	3b01      	subs	r3, #1
 80068a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80068a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	029b      	lsls	r3, r3, #10
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068bc:	801a      	strh	r2, [r3, #0]
 80068be:	e024      	b.n	800690a <USB_EPStartXfer+0xc42>
 80068c0:	463b      	mov	r3, r7
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d11f      	bne.n	800690a <USB_EPStartXfer+0xc42>
 80068ca:	1d3b      	adds	r3, r7, #4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068d2:	1d3b      	adds	r3, r7, #4
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068da:	b29b      	uxth	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068e2:	4413      	add	r3, r2
 80068e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068e8:	463b      	mov	r3, r7
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	011a      	lsls	r2, r3, #4
 80068f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068f4:	4413      	add	r3, r2
 80068f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006902:	b29a      	uxth	r2, r3
 8006904:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006908:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800690a:	463b      	mov	r3, r7
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	891b      	ldrh	r3, [r3, #8]
 8006910:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006914:	463b      	mov	r3, r7
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6959      	ldr	r1, [r3, #20]
 800691a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800691e:	b29b      	uxth	r3, r3
 8006920:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006924:	1d38      	adds	r0, r7, #4
 8006926:	6800      	ldr	r0, [r0, #0]
 8006928:	f000 fe03 	bl	8007532 <USB_WritePMA>
          ep->xfer_buff += len;
 800692c:	463b      	mov	r3, r7
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695a      	ldr	r2, [r3, #20]
 8006932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006936:	441a      	add	r2, r3
 8006938:	463b      	mov	r3, r7
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800693e:	463b      	mov	r3, r7
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6a1a      	ldr	r2, [r3, #32]
 8006944:	463b      	mov	r3, r7
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	429a      	cmp	r2, r3
 800694c:	d909      	bls.n	8006962 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800694e:	463b      	mov	r3, r7
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6a1a      	ldr	r2, [r3, #32]
 8006954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006958:	1ad2      	subs	r2, r2, r3
 800695a:	463b      	mov	r3, r7
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	621a      	str	r2, [r3, #32]
 8006960:	e008      	b.n	8006974 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8006962:	463b      	mov	r3, r7
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800696c:	463b      	mov	r3, r7
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2200      	movs	r2, #0
 8006972:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 80ab 	beq.w	8006ad4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800697e:	1d3b      	adds	r3, r7, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006986:	463b      	mov	r3, r7
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	785b      	ldrb	r3, [r3, #1]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d16f      	bne.n	8006a70 <USB_EPStartXfer+0xda8>
 8006990:	1d3b      	adds	r3, r7, #4
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006998:	1d3b      	adds	r3, r7, #4
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069a8:	4413      	add	r3, r2
 80069aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069ae:	463b      	mov	r3, r7
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	011a      	lsls	r2, r3, #4
 80069b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069ba:	4413      	add	r3, r2
 80069bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d116      	bne.n	80069fa <USB_EPStartXfer+0xd32>
 80069cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069d8:	b29a      	uxth	r2, r3
 80069da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069de:	801a      	strh	r2, [r3, #0]
 80069e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069f6:	801a      	strh	r2, [r3, #0]
 80069f8:	e05b      	b.n	8006ab2 <USB_EPStartXfer+0xdea>
 80069fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006a00:	d818      	bhi.n	8006a34 <USB_EPStartXfer+0xd6c>
 8006a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a06:	085b      	lsrs	r3, r3, #1
 8006a08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d004      	beq.n	8006a22 <USB_EPStartXfer+0xd5a>
 8006a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	029b      	lsls	r3, r3, #10
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	e03e      	b.n	8006ab2 <USB_EPStartXfer+0xdea>
 8006a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a38:	095b      	lsrs	r3, r3, #5
 8006a3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <USB_EPStartXfer+0xd8c>
 8006a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	029b      	lsls	r3, r3, #10
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a6c:	801a      	strh	r2, [r3, #0]
 8006a6e:	e020      	b.n	8006ab2 <USB_EPStartXfer+0xdea>
 8006a70:	463b      	mov	r3, r7
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d11b      	bne.n	8006ab2 <USB_EPStartXfer+0xdea>
 8006a7a:	1d3b      	adds	r3, r7, #4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	461a      	mov	r2, r3
 8006a86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a90:	463b      	mov	r3, r7
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	011a      	lsls	r2, r3, #4
 8006a98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ab0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ab2:	463b      	mov	r3, r7
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	895b      	ldrh	r3, [r3, #10]
 8006ab8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006abc:	463b      	mov	r3, r7
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6959      	ldr	r1, [r3, #20]
 8006ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006acc:	1d38      	adds	r0, r7, #4
 8006ace:	6800      	ldr	r0, [r0, #0]
 8006ad0:	f000 fd2f 	bl	8007532 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006ad4:	1d3b      	adds	r3, r7, #4
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	463b      	mov	r3, r7
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	f107 020a 	add.w	r2, r7, #10
 8006aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af2:	8013      	strh	r3, [r2, #0]
 8006af4:	f107 030a 	add.w	r3, r7, #10
 8006af8:	f107 020a 	add.w	r2, r7, #10
 8006afc:	8812      	ldrh	r2, [r2, #0]
 8006afe:	f082 0210 	eor.w	r2, r2, #16
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	f107 030a 	add.w	r3, r7, #10
 8006b08:	f107 020a 	add.w	r2, r7, #10
 8006b0c:	8812      	ldrh	r2, [r2, #0]
 8006b0e:	f082 0220 	eor.w	r2, r2, #32
 8006b12:	801a      	strh	r2, [r3, #0]
 8006b14:	1d3b      	adds	r3, r7, #4
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	463b      	mov	r3, r7
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	441a      	add	r2, r3
 8006b22:	f107 030a 	add.w	r3, r7, #10
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	8013      	strh	r3, [r2, #0]
 8006b3c:	e3b5      	b.n	80072aa <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006b3e:	463b      	mov	r3, r7
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	7b1b      	ldrb	r3, [r3, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f040 8090 	bne.w	8006c6a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006b4a:	463b      	mov	r3, r7
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699a      	ldr	r2, [r3, #24]
 8006b50:	463b      	mov	r3, r7
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d90e      	bls.n	8006b78 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006b5a:	463b      	mov	r3, r7
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006b64:	463b      	mov	r3, r7
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	463b      	mov	r3, r7
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	619a      	str	r2, [r3, #24]
 8006b76:	e008      	b.n	8006b8a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006b78:	463b      	mov	r3, r7
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006b82:	463b      	mov	r3, r7
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2200      	movs	r2, #0
 8006b88:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b8a:	1d3b      	adds	r3, r7, #4
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b92:	1d3b      	adds	r3, r7, #4
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ba8:	463b      	mov	r3, r7
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	011a      	lsls	r2, r3, #4
 8006bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d116      	bne.n	8006bf4 <USB_EPStartXfer+0xf2c>
 8006bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bf0:	801a      	strh	r2, [r3, #0]
 8006bf2:	e32c      	b.n	800724e <USB_EPStartXfer+0x1586>
 8006bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf8:	2b3e      	cmp	r3, #62	; 0x3e
 8006bfa:	d818      	bhi.n	8006c2e <USB_EPStartXfer+0xf66>
 8006bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c00:	085b      	lsrs	r3, r3, #1
 8006c02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <USB_EPStartXfer+0xf54>
 8006c12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c16:	3301      	adds	r3, #1
 8006c18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	029b      	lsls	r3, r3, #10
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	e30f      	b.n	800724e <USB_EPStartXfer+0x1586>
 8006c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3c:	f003 031f 	and.w	r3, r3, #31
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d104      	bne.n	8006c4e <USB_EPStartXfer+0xf86>
 8006c44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	029b      	lsls	r3, r3, #10
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	e2f1      	b.n	800724e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c6a:	463b      	mov	r3, r7
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	78db      	ldrb	r3, [r3, #3]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	f040 818f 	bne.w	8006f94 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c76:	463b      	mov	r3, r7
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d175      	bne.n	8006d6c <USB_EPStartXfer+0x10a4>
 8006c80:	1d3b      	adds	r3, r7, #4
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c88:	1d3b      	adds	r3, r7, #4
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c98:	4413      	add	r3, r2
 8006c9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c9e:	463b      	mov	r3, r7
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	011a      	lsls	r2, r3, #4
 8006ca6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006caa:	4413      	add	r3, r2
 8006cac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cb4:	463b      	mov	r3, r7
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d116      	bne.n	8006cec <USB_EPStartXfer+0x1024>
 8006cbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cd0:	801a      	strh	r2, [r3, #0]
 8006cd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ce8:	801a      	strh	r2, [r3, #0]
 8006cea:	e065      	b.n	8006db8 <USB_EPStartXfer+0x10f0>
 8006cec:	463b      	mov	r3, r7
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b3e      	cmp	r3, #62	; 0x3e
 8006cf4:	d81a      	bhi.n	8006d2c <USB_EPStartXfer+0x1064>
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	085b      	lsrs	r3, r3, #1
 8006cfe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d02:	463b      	mov	r3, r7
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d004      	beq.n	8006d1a <USB_EPStartXfer+0x1052>
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d14:	3301      	adds	r3, #1
 8006d16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	029b      	lsls	r3, r3, #10
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d28:	801a      	strh	r2, [r3, #0]
 8006d2a:	e045      	b.n	8006db8 <USB_EPStartXfer+0x10f0>
 8006d2c:	463b      	mov	r3, r7
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d38:	463b      	mov	r3, r7
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d104      	bne.n	8006d50 <USB_EPStartXfer+0x1088>
 8006d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	029b      	lsls	r3, r3, #10
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d68:	801a      	strh	r2, [r3, #0]
 8006d6a:	e025      	b.n	8006db8 <USB_EPStartXfer+0x10f0>
 8006d6c:	463b      	mov	r3, r7
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	785b      	ldrb	r3, [r3, #1]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d120      	bne.n	8006db8 <USB_EPStartXfer+0x10f0>
 8006d76:	1d3b      	adds	r3, r7, #4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d7e:	1d3b      	adds	r3, r7, #4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d8e:	4413      	add	r3, r2
 8006d90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d94:	463b      	mov	r3, r7
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	011a      	lsls	r2, r3, #4
 8006d9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006da0:	4413      	add	r3, r2
 8006da2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006da6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006daa:	463b      	mov	r3, r7
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006db6:	801a      	strh	r2, [r3, #0]
 8006db8:	1d3b      	adds	r3, r7, #4
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	785b      	ldrb	r3, [r3, #1]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d175      	bne.n	8006eb6 <USB_EPStartXfer+0x11ee>
 8006dca:	1d3b      	adds	r3, r7, #4
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dd2:	1d3b      	adds	r3, r7, #4
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	461a      	mov	r2, r3
 8006dde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006de2:	4413      	add	r3, r2
 8006de4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006de8:	463b      	mov	r3, r7
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	011a      	lsls	r2, r3, #4
 8006df0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006df4:	4413      	add	r3, r2
 8006df6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dfe:	463b      	mov	r3, r7
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d116      	bne.n	8006e36 <USB_EPStartXfer+0x116e>
 8006e08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e1a:	801a      	strh	r2, [r3, #0]
 8006e1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e32:	801a      	strh	r2, [r3, #0]
 8006e34:	e061      	b.n	8006efa <USB_EPStartXfer+0x1232>
 8006e36:	463b      	mov	r3, r7
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e3e:	d81a      	bhi.n	8006e76 <USB_EPStartXfer+0x11ae>
 8006e40:	463b      	mov	r3, r7
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e4c:	463b      	mov	r3, r7
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d004      	beq.n	8006e64 <USB_EPStartXfer+0x119c>
 8006e5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e5e:	3301      	adds	r3, #1
 8006e60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	029b      	lsls	r3, r3, #10
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	e041      	b.n	8006efa <USB_EPStartXfer+0x1232>
 8006e76:	463b      	mov	r3, r7
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	095b      	lsrs	r3, r3, #5
 8006e7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e82:	463b      	mov	r3, r7
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d104      	bne.n	8006e9a <USB_EPStartXfer+0x11d2>
 8006e90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e94:	3b01      	subs	r3, #1
 8006e96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	029b      	lsls	r3, r3, #10
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eb2:	801a      	strh	r2, [r3, #0]
 8006eb4:	e021      	b.n	8006efa <USB_EPStartXfer+0x1232>
 8006eb6:	463b      	mov	r3, r7
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	785b      	ldrb	r3, [r3, #1]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d11c      	bne.n	8006efa <USB_EPStartXfer+0x1232>
 8006ec0:	1d3b      	adds	r3, r7, #4
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ed6:	463b      	mov	r3, r7
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	011a      	lsls	r2, r3, #4
 8006ede:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006eec:	463b      	mov	r3, r7
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ef8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006efa:	463b      	mov	r3, r7
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 81a4 	beq.w	800724e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006f06:	1d3b      	adds	r3, r7, #4
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	463b      	mov	r3, r7
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f1a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d005      	beq.n	8006f32 <USB_EPStartXfer+0x126a>
 8006f26:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10d      	bne.n	8006f4e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f32:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f040 8187 	bne.w	800724e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f40:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f040 8180 	bne.w	800724e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006f4e:	1d3b      	adds	r3, r7, #4
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	463b      	mov	r3, r7
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f68:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006f6c:	1d3b      	adds	r3, r7, #4
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	463b      	mov	r3, r7
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	8013      	strh	r3, [r2, #0]
 8006f92:	e15c      	b.n	800724e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006f94:	463b      	mov	r3, r7
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	78db      	ldrb	r3, [r3, #3]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	f040 8155 	bne.w	800724a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006fa0:	463b      	mov	r3, r7
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d90e      	bls.n	8006fce <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006fb0:	463b      	mov	r3, r7
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006fba:	463b      	mov	r3, r7
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc4:	1ad2      	subs	r2, r2, r3
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	619a      	str	r2, [r3, #24]
 8006fcc:	e008      	b.n	8006fe0 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006fce:	463b      	mov	r3, r7
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006fd8:	463b      	mov	r3, r7
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006fe0:	463b      	mov	r3, r7
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d16f      	bne.n	80070ca <USB_EPStartXfer+0x1402>
 8006fea:	1d3b      	adds	r3, r7, #4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ff2:	1d3b      	adds	r3, r7, #4
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007002:	4413      	add	r3, r2
 8007004:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007008:	463b      	mov	r3, r7
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	011a      	lsls	r2, r3, #4
 8007010:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007014:	4413      	add	r3, r2
 8007016:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800701a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800701e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d116      	bne.n	8007054 <USB_EPStartXfer+0x138c>
 8007026:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007032:	b29a      	uxth	r2, r3
 8007034:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007038:	801a      	strh	r2, [r3, #0]
 800703a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	b29b      	uxth	r3, r3
 8007042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800704a:	b29a      	uxth	r2, r3
 800704c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007050:	801a      	strh	r2, [r3, #0]
 8007052:	e05f      	b.n	8007114 <USB_EPStartXfer+0x144c>
 8007054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007058:	2b3e      	cmp	r3, #62	; 0x3e
 800705a:	d818      	bhi.n	800708e <USB_EPStartXfer+0x13c6>
 800705c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d004      	beq.n	800707c <USB_EPStartXfer+0x13b4>
 8007072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007076:	3301      	adds	r3, #1
 8007078:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800707c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007080:	b29b      	uxth	r3, r3
 8007082:	029b      	lsls	r3, r3, #10
 8007084:	b29a      	uxth	r2, r3
 8007086:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800708a:	801a      	strh	r2, [r3, #0]
 800708c:	e042      	b.n	8007114 <USB_EPStartXfer+0x144c>
 800708e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <USB_EPStartXfer+0x13e6>
 80070a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070a8:	3b01      	subs	r3, #1
 80070aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	029b      	lsls	r3, r3, #10
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070c6:	801a      	strh	r2, [r3, #0]
 80070c8:	e024      	b.n	8007114 <USB_EPStartXfer+0x144c>
 80070ca:	463b      	mov	r3, r7
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d11f      	bne.n	8007114 <USB_EPStartXfer+0x144c>
 80070d4:	1d3b      	adds	r3, r7, #4
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070dc:	1d3b      	adds	r3, r7, #4
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	461a      	mov	r2, r3
 80070e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ec:	4413      	add	r3, r2
 80070ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070f2:	463b      	mov	r3, r7
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	011a      	lsls	r2, r3, #4
 80070fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070fe:	4413      	add	r3, r2
 8007100:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007104:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710c:	b29a      	uxth	r2, r3
 800710e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007112:	801a      	strh	r2, [r3, #0]
 8007114:	1d3b      	adds	r3, r7, #4
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800711c:	463b      	mov	r3, r7
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d16f      	bne.n	8007206 <USB_EPStartXfer+0x153e>
 8007126:	1d3b      	adds	r3, r7, #4
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800712e:	1d3b      	adds	r3, r7, #4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007136:	b29b      	uxth	r3, r3
 8007138:	461a      	mov	r2, r3
 800713a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800713e:	4413      	add	r3, r2
 8007140:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007144:	463b      	mov	r3, r7
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	011a      	lsls	r2, r3, #4
 800714c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007150:	4413      	add	r3, r2
 8007152:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007156:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800715a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d116      	bne.n	8007190 <USB_EPStartXfer+0x14c8>
 8007162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800716e:	b29a      	uxth	r2, r3
 8007170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007174:	801a      	strh	r2, [r3, #0]
 8007176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007186:	b29a      	uxth	r2, r3
 8007188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800718c:	801a      	strh	r2, [r3, #0]
 800718e:	e05e      	b.n	800724e <USB_EPStartXfer+0x1586>
 8007190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007194:	2b3e      	cmp	r3, #62	; 0x3e
 8007196:	d818      	bhi.n	80071ca <USB_EPStartXfer+0x1502>
 8007198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800719c:	085b      	lsrs	r3, r3, #1
 800719e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d004      	beq.n	80071b8 <USB_EPStartXfer+0x14f0>
 80071ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071b2:	3301      	adds	r3, #1
 80071b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071bc:	b29b      	uxth	r3, r3
 80071be:	029b      	lsls	r3, r3, #10
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071c6:	801a      	strh	r2, [r3, #0]
 80071c8:	e041      	b.n	800724e <USB_EPStartXfer+0x1586>
 80071ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d8:	f003 031f 	and.w	r3, r3, #31
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <USB_EPStartXfer+0x1522>
 80071e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071e4:	3b01      	subs	r3, #1
 80071e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	029b      	lsls	r3, r3, #10
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	e023      	b.n	800724e <USB_EPStartXfer+0x1586>
 8007206:	463b      	mov	r3, r7
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	785b      	ldrb	r3, [r3, #1]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d11e      	bne.n	800724e <USB_EPStartXfer+0x1586>
 8007210:	1d3b      	adds	r3, r7, #4
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007218:	b29b      	uxth	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007220:	4413      	add	r3, r2
 8007222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007226:	463b      	mov	r3, r7
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	011a      	lsls	r2, r3, #4
 800722e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007232:	4413      	add	r3, r2
 8007234:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800723c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007240:	b29a      	uxth	r2, r3
 8007242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007246:	801a      	strh	r2, [r3, #0]
 8007248:	e001      	b.n	800724e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e02e      	b.n	80072ac <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800724e:	1d3b      	adds	r3, r7, #4
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	463b      	mov	r3, r7
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	b29b      	uxth	r3, r3
 8007260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007268:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800726c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007270:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007274:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007278:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800727c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007280:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007284:	1d3b      	adds	r3, r7, #4
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	463b      	mov	r3, r7
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	441a      	add	r2, r3
 8007292:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800729a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	785b      	ldrb	r3, [r3, #1]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d020      	beq.n	800730a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072de:	81bb      	strh	r3, [r7, #12]
 80072e0:	89bb      	ldrh	r3, [r7, #12]
 80072e2:	f083 0310 	eor.w	r3, r3, #16
 80072e6:	81bb      	strh	r3, [r7, #12]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	441a      	add	r2, r3
 80072f2:	89bb      	ldrh	r3, [r7, #12]
 80072f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007304:	b29b      	uxth	r3, r3
 8007306:	8013      	strh	r3, [r2, #0]
 8007308:	e01f      	b.n	800734a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800731c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007320:	81fb      	strh	r3, [r7, #14]
 8007322:	89fb      	ldrh	r3, [r7, #14]
 8007324:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007328:	81fb      	strh	r3, [r7, #14]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	441a      	add	r2, r3
 8007334:	89fb      	ldrh	r3, [r7, #14]
 8007336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800733a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800733e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007346:	b29b      	uxth	r3, r3
 8007348:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	bc80      	pop	{r7}
 8007354:	4770      	bx	lr

08007356 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007356:	b480      	push	{r7}
 8007358:	b087      	sub	sp, #28
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	7b1b      	ldrb	r3, [r3, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f040 809d 	bne.w	80074a4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d04c      	beq.n	800740c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	823b      	strh	r3, [r7, #16]
 8007380:	8a3b      	ldrh	r3, [r7, #16]
 8007382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01b      	beq.n	80073c2 <USB_EPClearStall+0x6c>
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a0:	81fb      	strh	r3, [r7, #14]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	441a      	add	r2, r3
 80073ac:	89fb      	ldrh	r3, [r7, #14]
 80073ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073be:	b29b      	uxth	r3, r3
 80073c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	78db      	ldrb	r3, [r3, #3]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d06c      	beq.n	80074a4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e0:	81bb      	strh	r3, [r7, #12]
 80073e2:	89bb      	ldrh	r3, [r7, #12]
 80073e4:	f083 0320 	eor.w	r3, r3, #32
 80073e8:	81bb      	strh	r3, [r7, #12]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	441a      	add	r2, r3
 80073f4:	89bb      	ldrh	r3, [r7, #12]
 80073f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007406:	b29b      	uxth	r3, r3
 8007408:	8013      	strh	r3, [r2, #0]
 800740a:	e04b      	b.n	80074a4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	82fb      	strh	r3, [r7, #22]
 800741a:	8afb      	ldrh	r3, [r7, #22]
 800741c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01b      	beq.n	800745c <USB_EPClearStall+0x106>
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	82bb      	strh	r3, [r7, #20]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	441a      	add	r2, r3
 8007446:	8abb      	ldrh	r3, [r7, #20]
 8007448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800744c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007450:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007458:	b29b      	uxth	r3, r3
 800745a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	b29b      	uxth	r3, r3
 800746a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800746e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007472:	827b      	strh	r3, [r7, #18]
 8007474:	8a7b      	ldrh	r3, [r7, #18]
 8007476:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800747a:	827b      	strh	r3, [r7, #18]
 800747c:	8a7b      	ldrh	r3, [r7, #18]
 800747e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007482:	827b      	strh	r3, [r7, #18]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	441a      	add	r2, r3
 800748e:	8a7b      	ldrh	r3, [r7, #18]
 8007490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bc80      	pop	{r7}
 80074ae:	4770      	bx	lr

080074b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d103      	bne.n	80074ca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2280      	movs	r2, #128	; 0x80
 80074c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr

080074d6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr

080074ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bc80      	pop	{r7}
 80074fc:	4770      	bx	lr

080074fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800750c:	b29b      	uxth	r3, r3
 800750e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007510:	68fb      	ldr	r3, [r7, #12]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr

0800751c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr

08007532 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007532:	b480      	push	{r7}
 8007534:	b08d      	sub	sp, #52	; 0x34
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	4611      	mov	r1, r2
 800753e:	461a      	mov	r2, r3
 8007540:	460b      	mov	r3, r1
 8007542:	80fb      	strh	r3, [r7, #6]
 8007544:	4613      	mov	r3, r2
 8007546:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007548:	88bb      	ldrh	r3, [r7, #4]
 800754a:	3301      	adds	r3, #1
 800754c:	085b      	lsrs	r3, r3, #1
 800754e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007558:	88fb      	ldrh	r3, [r7, #6]
 800755a:	005a      	lsls	r2, r3, #1
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007564:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800756a:	e01e      	b.n	80075aa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	3301      	adds	r3, #1
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	021b      	lsls	r3, r3, #8
 8007580:	b29b      	uxth	r3, r3
 8007582:	461a      	mov	r2, r3
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	4313      	orrs	r3, r2
 8007588:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	b29a      	uxth	r2, r3
 800758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007590:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	3302      	adds	r3, #2
 8007596:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	3302      	adds	r3, #2
 800759c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	3301      	adds	r3, #1
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80075a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a6:	3b01      	subs	r3, #1
 80075a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1dd      	bne.n	800756c <USB_WritePMA+0x3a>
  }
}
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	3734      	adds	r7, #52	; 0x34
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr

080075bc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075bc:	b480      	push	{r7}
 80075be:	b08b      	sub	sp, #44	; 0x2c
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4611      	mov	r1, r2
 80075c8:	461a      	mov	r2, r3
 80075ca:	460b      	mov	r3, r1
 80075cc:	80fb      	strh	r3, [r7, #6]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80075d2:	88bb      	ldrh	r3, [r7, #4]
 80075d4:	085b      	lsrs	r3, r3, #1
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	005a      	lsls	r2, r3, #1
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ee:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
 80075f4:	e01b      	b.n	800762e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	3302      	adds	r3, #2
 8007602:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	b2da      	uxtb	r2, r3
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	3301      	adds	r3, #1
 8007610:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	0a1b      	lsrs	r3, r3, #8
 8007616:	b2da      	uxtb	r2, r3
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	3301      	adds	r3, #1
 8007620:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	3302      	adds	r3, #2
 8007626:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	3b01      	subs	r3, #1
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e0      	bne.n	80075f6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007634:	88bb      	ldrh	r3, [r7, #4]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d007      	beq.n	8007650 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	b2da      	uxtb	r2, r3
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	701a      	strb	r2, [r3, #0]
  }
}
 8007650:	bf00      	nop
 8007652:	372c      	adds	r7, #44	; 0x2c
 8007654:	46bd      	mov	sp, r7
 8007656:	bc80      	pop	{r7}
 8007658:	4770      	bx	lr

0800765a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b084      	sub	sp, #16
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	7c1b      	ldrb	r3, [r3, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d115      	bne.n	800769e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007676:	2202      	movs	r2, #2
 8007678:	2181      	movs	r1, #129	; 0x81
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 fe87 	bl	800938e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800768a:	2202      	movs	r2, #2
 800768c:	2101      	movs	r1, #1
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 fe7d 	bl	800938e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800769c:	e012      	b.n	80076c4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800769e:	2340      	movs	r3, #64	; 0x40
 80076a0:	2202      	movs	r2, #2
 80076a2:	2181      	movs	r1, #129	; 0x81
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 fe72 	bl	800938e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80076b0:	2340      	movs	r3, #64	; 0x40
 80076b2:	2202      	movs	r2, #2
 80076b4:	2101      	movs	r1, #1
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 fe69 	bl	800938e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80076c4:	2308      	movs	r3, #8
 80076c6:	2203      	movs	r2, #3
 80076c8:	2182      	movs	r1, #130	; 0x82
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f001 fe5f 	bl	800938e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80076d6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80076da:	f001 ff7f 	bl	80095dc <USBD_static_malloc>
 80076de:	4602      	mov	r2, r0
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
 80076f4:	e026      	b.n	8007744 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2200      	movs	r2, #0
 800770c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	7c1b      	ldrb	r3, [r3, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d109      	bne.n	8007734 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800772a:	2101      	movs	r1, #1
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 ff1f 	bl	8009570 <USBD_LL_PrepareReceive>
 8007732:	e007      	b.n	8007744 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800773a:	2340      	movs	r3, #64	; 0x40
 800773c:	2101      	movs	r1, #1
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 ff16 	bl	8009570 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007744:	7bfb      	ldrb	r3, [r7, #15]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	460b      	mov	r3, r1
 8007758:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800775e:	2181      	movs	r1, #129	; 0x81
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 fe3a 	bl	80093da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800776c:	2101      	movs	r1, #1
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 fe33 	bl	80093da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800777c:	2182      	movs	r1, #130	; 0x82
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 fe2b 	bl	80093da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00e      	beq.n	80077b2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a4:	4618      	mov	r0, r3
 80077a6:	f001 ff25 	bl	80095f4 <USBD_static_free>
    pdev->pClassData = NULL;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077cc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d039      	beq.n	800785a <USBD_CDC_Setup+0x9e>
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d17f      	bne.n	80078ea <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	88db      	ldrh	r3, [r3, #6]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d029      	beq.n	8007846 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b25b      	sxtb	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	da11      	bge.n	8007820 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007808:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	88d2      	ldrh	r2, [r2, #6]
 800780e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007810:	6939      	ldr	r1, [r7, #16]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	88db      	ldrh	r3, [r3, #6]
 8007816:	461a      	mov	r2, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 fa0a 	bl	8008c32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800781e:	e06b      	b.n	80078f8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	785a      	ldrb	r2, [r3, #1]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	88db      	ldrh	r3, [r3, #6]
 800782e:	b2da      	uxtb	r2, r3
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007836:	6939      	ldr	r1, [r7, #16]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	88db      	ldrh	r3, [r3, #6]
 800783c:	461a      	mov	r2, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 fa25 	bl	8008c8e <USBD_CtlPrepareRx>
      break;
 8007844:	e058      	b.n	80078f8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	7850      	ldrb	r0, [r2, #1]
 8007852:	2200      	movs	r2, #0
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	4798      	blx	r3
      break;
 8007858:	e04e      	b.n	80078f8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	785b      	ldrb	r3, [r3, #1]
 800785e:	2b0b      	cmp	r3, #11
 8007860:	d02e      	beq.n	80078c0 <USBD_CDC_Setup+0x104>
 8007862:	2b0b      	cmp	r3, #11
 8007864:	dc38      	bgt.n	80078d8 <USBD_CDC_Setup+0x11c>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <USBD_CDC_Setup+0xb4>
 800786a:	2b0a      	cmp	r3, #10
 800786c:	d014      	beq.n	8007898 <USBD_CDC_Setup+0xdc>
 800786e:	e033      	b.n	80078d8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007876:	2b03      	cmp	r3, #3
 8007878:	d107      	bne.n	800788a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800787a:	f107 030c 	add.w	r3, r7, #12
 800787e:	2202      	movs	r2, #2
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 f9d5 	bl	8008c32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007888:	e02e      	b.n	80078e8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 f966 	bl	8008b5e <USBD_CtlError>
            ret = USBD_FAIL;
 8007892:	2302      	movs	r3, #2
 8007894:	75fb      	strb	r3, [r7, #23]
          break;
 8007896:	e027      	b.n	80078e8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d107      	bne.n	80078b2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80078a2:	f107 030f 	add.w	r3, r7, #15
 80078a6:	2201      	movs	r2, #1
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 f9c1 	bl	8008c32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078b0:	e01a      	b.n	80078e8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f001 f952 	bl	8008b5e <USBD_CtlError>
            ret = USBD_FAIL;
 80078ba:	2302      	movs	r3, #2
 80078bc:	75fb      	strb	r3, [r7, #23]
          break;
 80078be:	e013      	b.n	80078e8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	d00d      	beq.n	80078e6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 f946 	bl	8008b5e <USBD_CtlError>
            ret = USBD_FAIL;
 80078d2:	2302      	movs	r3, #2
 80078d4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80078d6:	e006      	b.n	80078e6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f001 f93f 	bl	8008b5e <USBD_CtlError>
          ret = USBD_FAIL;
 80078e0:	2302      	movs	r3, #2
 80078e2:	75fb      	strb	r3, [r7, #23]
          break;
 80078e4:	e000      	b.n	80078e8 <USBD_CDC_Setup+0x12c>
          break;
 80078e6:	bf00      	nop
      }
      break;
 80078e8:	e006      	b.n	80078f8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 f936 	bl	8008b5e <USBD_CtlError>
      ret = USBD_FAIL;
 80078f2:	2302      	movs	r3, #2
 80078f4:	75fb      	strb	r3, [r7, #23]
      break;
 80078f6:	bf00      	nop
  }

  return ret;
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007914:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800791c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007924:	2b00      	cmp	r3, #0
 8007926:	d03a      	beq.n	800799e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007928:	78fa      	ldrb	r2, [r7, #3]
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	4613      	mov	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	440b      	add	r3, r1
 8007936:	331c      	adds	r3, #28
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d029      	beq.n	8007992 <USBD_CDC_DataIn+0x90>
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	331c      	adds	r3, #28
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	78f9      	ldrb	r1, [r7, #3]
 8007952:	68b8      	ldr	r0, [r7, #8]
 8007954:	460b      	mov	r3, r1
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	4403      	add	r3, r0
 800795e:	3338      	adds	r3, #56	; 0x38
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	fbb2 f1f3 	udiv	r1, r2, r3
 8007966:	fb03 f301 	mul.w	r3, r3, r1
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d110      	bne.n	8007992 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	440b      	add	r3, r1
 800797e:	331c      	adds	r3, #28
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007984:	78f9      	ldrb	r1, [r7, #3]
 8007986:	2300      	movs	r3, #0
 8007988:	2200      	movs	r2, #0
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 fdcd 	bl	800952a <USBD_LL_Transmit>
 8007990:	e003      	b.n	800799a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	e000      	b.n	80079a0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800799e:	2302      	movs	r3, #2
  }
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fdf8 	bl	80095b6 <USBD_LL_GetRxDataSize>
 80079c6:	4602      	mov	r2, r0
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00d      	beq.n	80079f4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80079ec:	4611      	mov	r1, r2
 80079ee:	4798      	blx	r3

    return USBD_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	e000      	b.n	80079f6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80079f4:	2302      	movs	r3, #2
  }
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d015      	beq.n	8007a44 <USBD_CDC_EP0_RxReady+0x46>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a1e:	2bff      	cmp	r3, #255	; 0xff
 8007a20:	d010      	beq.n	8007a44 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007a30:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a38:	b292      	uxth	r2, r2
 8007a3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	22ff      	movs	r2, #255	; 0xff
 8007a40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2243      	movs	r2, #67	; 0x43
 8007a5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007a5e:	4b03      	ldr	r3, [pc, #12]	; (8007a6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	200000b0 	.word	0x200000b0

08007a70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2243      	movs	r2, #67	; 0x43
 8007a7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007a7e:	4b03      	ldr	r3, [pc, #12]	; (8007a8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bc80      	pop	{r7}
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	2000006c 	.word	0x2000006c

08007a90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2243      	movs	r2, #67	; 0x43
 8007a9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007a9e:	4b03      	ldr	r3, [pc, #12]	; (8007aac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bc80      	pop	{r7}
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	200000f4 	.word	0x200000f4

08007ab0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	220a      	movs	r2, #10
 8007abc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007abe:	4b03      	ldr	r3, [pc, #12]	; (8007acc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bc80      	pop	{r7}
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	20000028 	.word	0x20000028

08007ad0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007ada:	2302      	movs	r3, #2
 8007adc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bc80      	pop	{r7}
 8007afa:	4770      	bx	lr

08007afc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b10:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b1a:	88fa      	ldrh	r2, [r7, #6]
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bc80      	pop	{r7}
 8007b2c:	4770      	bx	lr

08007b2e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b085      	sub	sp, #20
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr

08007b54 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d01c      	beq.n	8007ba8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d115      	bne.n	8007ba4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2181      	movs	r1, #129	; 0x81
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 fcc5 	bl	800952a <USBD_LL_Transmit>

      return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e002      	b.n	8007baa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e000      	b.n	8007baa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007ba8:	2302      	movs	r3, #2
  }
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d017      	beq.n	8007bfc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7c1b      	ldrb	r3, [r3, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d109      	bne.n	8007be8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bde:	2101      	movs	r1, #1
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 fcc5 	bl	8009570 <USBD_LL_PrepareReceive>
 8007be6:	e007      	b.n	8007bf8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bee:	2340      	movs	r3, #64	; 0x40
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 fcbc 	bl	8009570 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	e000      	b.n	8007bfe <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007bfc:	2302      	movs	r3, #2
  }
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	4613      	mov	r3, r2
 8007c12:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e01a      	b.n	8007c54 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	79fa      	ldrb	r2, [r7, #7]
 8007c4a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f001 fb29 	bl	80092a4 <USBD_LL_Init>

  return USBD_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d006      	beq.n	8007c7e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73fb      	strb	r3, [r7, #15]
 8007c7c:	e001      	b.n	8007c82 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr

08007c8e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fb5e 	bl	8009358 <USBD_LL_Start>

  return USBD_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bc80      	pop	{r7}
 8007cb8:	4770      	bx	lr

08007cba <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00c      	beq.n	8007cee <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	78fa      	ldrb	r2, [r7, #3]
 8007cde:	4611      	mov	r1, r2
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	4798      	blx	r3
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	78fa      	ldrb	r2, [r7, #3]
 8007d0e:	4611      	mov	r1, r2
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	4798      	blx	r3

  return USBD_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 fed8 	bl	8008ae6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d44:	461a      	mov	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d52:	f003 031f 	and.w	r3, r3, #31
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d016      	beq.n	8007d88 <USBD_LL_SetupStage+0x6a>
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d81c      	bhi.n	8007d98 <USBD_LL_SetupStage+0x7a>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <USBD_LL_SetupStage+0x4a>
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d008      	beq.n	8007d78 <USBD_LL_SetupStage+0x5a>
 8007d66:	e017      	b.n	8007d98 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f9cb 	bl	800810c <USBD_StdDevReq>
      break;
 8007d76:	e01a      	b.n	8007dae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fa2d 	bl	80081e0 <USBD_StdItfReq>
      break;
 8007d86:	e012      	b.n	8007dae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fa6d 	bl	8008270 <USBD_StdEPReq>
      break;
 8007d96:	e00a      	b.n	8007dae <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 fb36 	bl	8009418 <USBD_LL_StallEP>
      break;
 8007dac:	bf00      	nop
  }

  return USBD_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007dc6:	7afb      	ldrb	r3, [r7, #11]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d14b      	bne.n	8007e64 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007dd2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d134      	bne.n	8007e48 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d919      	bls.n	8007e1e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	68da      	ldr	r2, [r3, #12]
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	1ad2      	subs	r2, r2, r3
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d203      	bcs.n	8007e0c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	e002      	b.n	8007e12 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 ff57 	bl	8008cca <USBD_CtlContinueRx>
 8007e1c:	e038      	b.n	8007e90 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d105      	bne.n	8007e40 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 ff54 	bl	8008cee <USBD_CtlSendStatus>
 8007e46:	e023      	b.n	8007e90 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e4e:	2b05      	cmp	r3, #5
 8007e50:	d11e      	bne.n	8007e90 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f001 fadb 	bl	8009418 <USBD_LL_StallEP>
 8007e62:	e015      	b.n	8007e90 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00d      	beq.n	8007e8c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d108      	bne.n	8007e8c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	7afa      	ldrb	r2, [r7, #11]
 8007e84:	4611      	mov	r1, r2
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	4798      	blx	r3
 8007e8a:	e001      	b.n	8007e90 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e000      	b.n	8007e92 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b086      	sub	sp, #24
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	607a      	str	r2, [r7, #4]
 8007ea6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ea8:	7afb      	ldrb	r3, [r7, #11]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d17f      	bne.n	8007fae <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3314      	adds	r3, #20
 8007eb2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d15c      	bne.n	8007f78 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d915      	bls.n	8007ef6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	1ad2      	subs	r2, r2, r3
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 fec1 	bl	8008c6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ee8:	2300      	movs	r3, #0
 8007eea:	2200      	movs	r2, #0
 8007eec:	2100      	movs	r1, #0
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f001 fb3e 	bl	8009570 <USBD_LL_PrepareReceive>
 8007ef4:	e04e      	b.n	8007f94 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	6912      	ldr	r2, [r2, #16]
 8007efe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f02:	fb02 f201 	mul.w	r2, r2, r1
 8007f06:	1a9b      	subs	r3, r3, r2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d11c      	bne.n	8007f46 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d316      	bcc.n	8007f46 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	689a      	ldr	r2, [r3, #8]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d20f      	bcs.n	8007f46 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f26:	2200      	movs	r2, #0
 8007f28:	2100      	movs	r1, #0
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 fe9d 	bl	8008c6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f001 fb16 	bl	8009570 <USBD_LL_PrepareReceive>
 8007f44:	e026      	b.n	8007f94 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d105      	bne.n	8007f68 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f68:	2180      	movs	r1, #128	; 0x80
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f001 fa54 	bl	8009418 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 fecf 	bl	8008d14 <USBD_CtlReceiveStatus>
 8007f76:	e00d      	b.n	8007f94 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d004      	beq.n	8007f8c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d103      	bne.n	8007f94 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f8c:	2180      	movs	r1, #128	; 0x80
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f001 fa42 	bl	8009418 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d11d      	bne.n	8007fda <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f7ff fe81 	bl	8007ca6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007fac:	e015      	b.n	8007fda <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00d      	beq.n	8007fd6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d108      	bne.n	8007fd6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	7afa      	ldrb	r2, [r7, #11]
 8007fce:	4611      	mov	r1, r2
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	4798      	blx	r3
 8007fd4:	e001      	b.n	8007fda <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	e000      	b.n	8007fdc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fec:	2340      	movs	r3, #64	; 0x40
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f001 f9cb 	bl	800938e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2240      	movs	r2, #64	; 0x40
 8008004:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008008:	2340      	movs	r3, #64	; 0x40
 800800a:	2200      	movs	r2, #0
 800800c:	2180      	movs	r1, #128	; 0x80
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f001 f9bd 	bl	800938e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2240      	movs	r2, #64	; 0x40
 800801e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008044:	2b00      	cmp	r3, #0
 8008046:	d009      	beq.n	800805c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6852      	ldr	r2, [r2, #4]
 8008054:	b2d2      	uxtb	r2, r2
 8008056:	4611      	mov	r1, r2
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	4798      	blx	r3
  }

  return USBD_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	460b      	mov	r3, r1
 8008070:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	78fa      	ldrb	r2, [r7, #3]
 8008076:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	bc80      	pop	{r7}
 8008082:	4770      	bx	lr

08008084 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2204      	movs	r2, #4
 800809c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bc80      	pop	{r7}
 80080aa:	4770      	bx	lr

080080ac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d105      	bne.n	80080ca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr

080080d6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b082      	sub	sp, #8
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d10b      	bne.n	8008100 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d005      	beq.n	8008100 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008122:	2b40      	cmp	r3, #64	; 0x40
 8008124:	d005      	beq.n	8008132 <USBD_StdDevReq+0x26>
 8008126:	2b40      	cmp	r3, #64	; 0x40
 8008128:	d84f      	bhi.n	80081ca <USBD_StdDevReq+0xbe>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d009      	beq.n	8008142 <USBD_StdDevReq+0x36>
 800812e:	2b20      	cmp	r3, #32
 8008130:	d14b      	bne.n	80081ca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	4798      	blx	r3
      break;
 8008140:	e048      	b.n	80081d4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	785b      	ldrb	r3, [r3, #1]
 8008146:	2b09      	cmp	r3, #9
 8008148:	d839      	bhi.n	80081be <USBD_StdDevReq+0xb2>
 800814a:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <USBD_StdDevReq+0x44>)
 800814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008150:	080081a1 	.word	0x080081a1
 8008154:	080081b5 	.word	0x080081b5
 8008158:	080081bf 	.word	0x080081bf
 800815c:	080081ab 	.word	0x080081ab
 8008160:	080081bf 	.word	0x080081bf
 8008164:	08008183 	.word	0x08008183
 8008168:	08008179 	.word	0x08008179
 800816c:	080081bf 	.word	0x080081bf
 8008170:	08008197 	.word	0x08008197
 8008174:	0800818d 	.word	0x0800818d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f9dc 	bl	8008538 <USBD_GetDescriptor>
          break;
 8008180:	e022      	b.n	80081c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fb3f 	bl	8008808 <USBD_SetAddress>
          break;
 800818a:	e01d      	b.n	80081c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fb7e 	bl	8008890 <USBD_SetConfig>
          break;
 8008194:	e018      	b.n	80081c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fc07 	bl	80089ac <USBD_GetConfig>
          break;
 800819e:	e013      	b.n	80081c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fc37 	bl	8008a16 <USBD_GetStatus>
          break;
 80081a8:	e00e      	b.n	80081c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fc65 	bl	8008a7c <USBD_SetFeature>
          break;
 80081b2:	e009      	b.n	80081c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fc74 	bl	8008aa4 <USBD_ClrFeature>
          break;
 80081bc:	e004      	b.n	80081c8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fccc 	bl	8008b5e <USBD_CtlError>
          break;
 80081c6:	bf00      	nop
      }
      break;
 80081c8:	e004      	b.n	80081d4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fcc6 	bl	8008b5e <USBD_CtlError>
      break;
 80081d2:	bf00      	nop
  }

  return ret;
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop

080081e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081f6:	2b40      	cmp	r3, #64	; 0x40
 80081f8:	d005      	beq.n	8008206 <USBD_StdItfReq+0x26>
 80081fa:	2b40      	cmp	r3, #64	; 0x40
 80081fc:	d82e      	bhi.n	800825c <USBD_StdItfReq+0x7c>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <USBD_StdItfReq+0x26>
 8008202:	2b20      	cmp	r3, #32
 8008204:	d12a      	bne.n	800825c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820c:	3b01      	subs	r3, #1
 800820e:	2b02      	cmp	r3, #2
 8008210:	d81d      	bhi.n	800824e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	889b      	ldrh	r3, [r3, #4]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b01      	cmp	r3, #1
 800821a:	d813      	bhi.n	8008244 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
 800822a:	4603      	mov	r3, r0
 800822c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	88db      	ldrh	r3, [r3, #6]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d110      	bne.n	8008258 <USBD_StdItfReq+0x78>
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10d      	bne.n	8008258 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fd56 	bl	8008cee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008242:	e009      	b.n	8008258 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fc89 	bl	8008b5e <USBD_CtlError>
          break;
 800824c:	e004      	b.n	8008258 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fc84 	bl	8008b5e <USBD_CtlError>
          break;
 8008256:	e000      	b.n	800825a <USBD_StdItfReq+0x7a>
          break;
 8008258:	bf00      	nop
      }
      break;
 800825a:	e004      	b.n	8008266 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fc7d 	bl	8008b5e <USBD_CtlError>
      break;
 8008264:	bf00      	nop
  }

  return USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	889b      	ldrh	r3, [r3, #4]
 8008282:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800828c:	2b40      	cmp	r3, #64	; 0x40
 800828e:	d007      	beq.n	80082a0 <USBD_StdEPReq+0x30>
 8008290:	2b40      	cmp	r3, #64	; 0x40
 8008292:	f200 8146 	bhi.w	8008522 <USBD_StdEPReq+0x2b2>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <USBD_StdEPReq+0x40>
 800829a:	2b20      	cmp	r3, #32
 800829c:	f040 8141 	bne.w	8008522 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
      break;
 80082ae:	e13d      	b.n	800852c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082b8:	2b20      	cmp	r3, #32
 80082ba:	d10a      	bne.n	80082d2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
 80082ca:	4603      	mov	r3, r0
 80082cc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	e12d      	b.n	800852e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	785b      	ldrb	r3, [r3, #1]
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d007      	beq.n	80082ea <USBD_StdEPReq+0x7a>
 80082da:	2b03      	cmp	r3, #3
 80082dc:	f300 811b 	bgt.w	8008516 <USBD_StdEPReq+0x2a6>
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d072      	beq.n	80083ca <USBD_StdEPReq+0x15a>
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d03a      	beq.n	800835e <USBD_StdEPReq+0xee>
 80082e8:	e115      	b.n	8008516 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d002      	beq.n	80082fa <USBD_StdEPReq+0x8a>
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d015      	beq.n	8008324 <USBD_StdEPReq+0xb4>
 80082f8:	e02b      	b.n	8008352 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00c      	beq.n	800831a <USBD_StdEPReq+0xaa>
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	2b80      	cmp	r3, #128	; 0x80
 8008304:	d009      	beq.n	800831a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 f884 	bl	8009418 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008310:	2180      	movs	r1, #128	; 0x80
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 f880 	bl	8009418 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008318:	e020      	b.n	800835c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fc1e 	bl	8008b5e <USBD_CtlError>
              break;
 8008322:	e01b      	b.n	800835c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	885b      	ldrh	r3, [r3, #2]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10e      	bne.n	800834a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00b      	beq.n	800834a <USBD_StdEPReq+0xda>
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	2b80      	cmp	r3, #128	; 0x80
 8008336:	d008      	beq.n	800834a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	88db      	ldrh	r3, [r3, #6]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d104      	bne.n	800834a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 f867 	bl	8009418 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fccf 	bl	8008cee <USBD_CtlSendStatus>

              break;
 8008350:	e004      	b.n	800835c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fc02 	bl	8008b5e <USBD_CtlError>
              break;
 800835a:	bf00      	nop
          }
          break;
 800835c:	e0e0      	b.n	8008520 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008364:	2b02      	cmp	r3, #2
 8008366:	d002      	beq.n	800836e <USBD_StdEPReq+0xfe>
 8008368:	2b03      	cmp	r3, #3
 800836a:	d015      	beq.n	8008398 <USBD_StdEPReq+0x128>
 800836c:	e026      	b.n	80083bc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00c      	beq.n	800838e <USBD_StdEPReq+0x11e>
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	2b80      	cmp	r3, #128	; 0x80
 8008378:	d009      	beq.n	800838e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 f84a 	bl	8009418 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008384:	2180      	movs	r1, #128	; 0x80
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f001 f846 	bl	8009418 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800838c:	e01c      	b.n	80083c8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fbe4 	bl	8008b5e <USBD_CtlError>
              break;
 8008396:	e017      	b.n	80083c8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	885b      	ldrh	r3, [r3, #2]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d112      	bne.n	80083c6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d004      	beq.n	80083b4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 f851 	bl	8009456 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fc9a 	bl	8008cee <USBD_CtlSendStatus>
              }
              break;
 80083ba:	e004      	b.n	80083c6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fbcd 	bl	8008b5e <USBD_CtlError>
              break;
 80083c4:	e000      	b.n	80083c8 <USBD_StdEPReq+0x158>
              break;
 80083c6:	bf00      	nop
          }
          break;
 80083c8:	e0aa      	b.n	8008520 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d002      	beq.n	80083da <USBD_StdEPReq+0x16a>
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d032      	beq.n	800843e <USBD_StdEPReq+0x1ce>
 80083d8:	e097      	b.n	800850a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083da:	7bbb      	ldrb	r3, [r7, #14]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d007      	beq.n	80083f0 <USBD_StdEPReq+0x180>
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	2b80      	cmp	r3, #128	; 0x80
 80083e4:	d004      	beq.n	80083f0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fbb8 	bl	8008b5e <USBD_CtlError>
                break;
 80083ee:	e091      	b.n	8008514 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	da0b      	bge.n	8008410 <USBD_StdEPReq+0x1a0>
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	3310      	adds	r3, #16
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	4413      	add	r3, r2
 800840c:	3304      	adds	r3, #4
 800840e:	e00b      	b.n	8008428 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	4413      	add	r3, r2
 8008426:	3304      	adds	r3, #4
 8008428:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2202      	movs	r2, #2
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fbfb 	bl	8008c32 <USBD_CtlSendData>
              break;
 800843c:	e06a      	b.n	8008514 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800843e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008442:	2b00      	cmp	r3, #0
 8008444:	da11      	bge.n	800846a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	f003 020f 	and.w	r2, r3, #15
 800844c:	6879      	ldr	r1, [r7, #4]
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	440b      	add	r3, r1
 8008458:	3318      	adds	r3, #24
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d117      	bne.n	8008490 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fb7b 	bl	8008b5e <USBD_CtlError>
                  break;
 8008468:	e054      	b.n	8008514 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	f003 020f 	and.w	r2, r3, #15
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	4613      	mov	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	440b      	add	r3, r1
 800847c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d104      	bne.n	8008490 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fb68 	bl	8008b5e <USBD_CtlError>
                  break;
 800848e:	e041      	b.n	8008514 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008494:	2b00      	cmp	r3, #0
 8008496:	da0b      	bge.n	80084b0 <USBD_StdEPReq+0x240>
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800849e:	4613      	mov	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	3310      	adds	r3, #16
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	4413      	add	r3, r2
 80084ac:	3304      	adds	r3, #4
 80084ae:	e00b      	b.n	80084c8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	4413      	add	r3, r2
 80084c6:	3304      	adds	r3, #4
 80084c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <USBD_StdEPReq+0x266>
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	2b80      	cmp	r3, #128	; 0x80
 80084d4:	d103      	bne.n	80084de <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	e00e      	b.n	80084fc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 ffd6 	bl	8009494 <USBD_LL_IsStallEP>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d003      	beq.n	80084f6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2201      	movs	r2, #1
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	e002      	b.n	80084fc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2202      	movs	r2, #2
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fb95 	bl	8008c32 <USBD_CtlSendData>
              break;
 8008508:	e004      	b.n	8008514 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fb26 	bl	8008b5e <USBD_CtlError>
              break;
 8008512:	bf00      	nop
          }
          break;
 8008514:	e004      	b.n	8008520 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fb20 	bl	8008b5e <USBD_CtlError>
          break;
 800851e:	bf00      	nop
      }
      break;
 8008520:	e004      	b.n	800852c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fb1a 	bl	8008b5e <USBD_CtlError>
      break;
 800852a:	bf00      	nop
  }

  return ret;
 800852c:	7bfb      	ldrb	r3, [r7, #15]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008546:	2300      	movs	r3, #0
 8008548:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	885b      	ldrh	r3, [r3, #2]
 8008552:	0a1b      	lsrs	r3, r3, #8
 8008554:	b29b      	uxth	r3, r3
 8008556:	3b01      	subs	r3, #1
 8008558:	2b06      	cmp	r3, #6
 800855a:	f200 8128 	bhi.w	80087ae <USBD_GetDescriptor+0x276>
 800855e:	a201      	add	r2, pc, #4	; (adr r2, 8008564 <USBD_GetDescriptor+0x2c>)
 8008560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008564:	08008581 	.word	0x08008581
 8008568:	08008599 	.word	0x08008599
 800856c:	080085d9 	.word	0x080085d9
 8008570:	080087af 	.word	0x080087af
 8008574:	080087af 	.word	0x080087af
 8008578:	0800874f 	.word	0x0800874f
 800857c:	0800877b 	.word	0x0800877b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	7c12      	ldrb	r2, [r2, #16]
 800858c:	f107 0108 	add.w	r1, r7, #8
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	60f8      	str	r0, [r7, #12]
      break;
 8008596:	e112      	b.n	80087be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	7c1b      	ldrb	r3, [r3, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10d      	bne.n	80085bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a8:	f107 0208 	add.w	r2, r7, #8
 80085ac:	4610      	mov	r0, r2
 80085ae:	4798      	blx	r3
 80085b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	2202      	movs	r2, #2
 80085b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085ba:	e100      	b.n	80087be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c4:	f107 0208 	add.w	r2, r7, #8
 80085c8:	4610      	mov	r0, r2
 80085ca:	4798      	blx	r3
 80085cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3301      	adds	r3, #1
 80085d2:	2202      	movs	r2, #2
 80085d4:	701a      	strb	r2, [r3, #0]
      break;
 80085d6:	e0f2      	b.n	80087be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	885b      	ldrh	r3, [r3, #2]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b05      	cmp	r3, #5
 80085e0:	f200 80ac 	bhi.w	800873c <USBD_GetDescriptor+0x204>
 80085e4:	a201      	add	r2, pc, #4	; (adr r2, 80085ec <USBD_GetDescriptor+0xb4>)
 80085e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ea:	bf00      	nop
 80085ec:	08008605 	.word	0x08008605
 80085f0:	08008639 	.word	0x08008639
 80085f4:	0800866d 	.word	0x0800866d
 80085f8:	080086a1 	.word	0x080086a1
 80085fc:	080086d5 	.word	0x080086d5
 8008600:	08008709 	.word	0x08008709
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	7c12      	ldrb	r2, [r2, #16]
 800861c:	f107 0108 	add.w	r1, r7, #8
 8008620:	4610      	mov	r0, r2
 8008622:	4798      	blx	r3
 8008624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008626:	e091      	b.n	800874c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fa97 	bl	8008b5e <USBD_CtlError>
            err++;
 8008630:	7afb      	ldrb	r3, [r7, #11]
 8008632:	3301      	adds	r3, #1
 8008634:	72fb      	strb	r3, [r7, #11]
          break;
 8008636:	e089      	b.n	800874c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00b      	beq.n	800865c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	7c12      	ldrb	r2, [r2, #16]
 8008650:	f107 0108 	add.w	r1, r7, #8
 8008654:	4610      	mov	r0, r2
 8008656:	4798      	blx	r3
 8008658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800865a:	e077      	b.n	800874c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fa7d 	bl	8008b5e <USBD_CtlError>
            err++;
 8008664:	7afb      	ldrb	r3, [r7, #11]
 8008666:	3301      	adds	r3, #1
 8008668:	72fb      	strb	r3, [r7, #11]
          break;
 800866a:	e06f      	b.n	800874c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00b      	beq.n	8008690 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	7c12      	ldrb	r2, [r2, #16]
 8008684:	f107 0108 	add.w	r1, r7, #8
 8008688:	4610      	mov	r0, r2
 800868a:	4798      	blx	r3
 800868c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800868e:	e05d      	b.n	800874c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa63 	bl	8008b5e <USBD_CtlError>
            err++;
 8008698:	7afb      	ldrb	r3, [r7, #11]
 800869a:	3301      	adds	r3, #1
 800869c:	72fb      	strb	r3, [r7, #11]
          break;
 800869e:	e055      	b.n	800874c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00b      	beq.n	80086c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	7c12      	ldrb	r2, [r2, #16]
 80086b8:	f107 0108 	add.w	r1, r7, #8
 80086bc:	4610      	mov	r0, r2
 80086be:	4798      	blx	r3
 80086c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086c2:	e043      	b.n	800874c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fa49 	bl	8008b5e <USBD_CtlError>
            err++;
 80086cc:	7afb      	ldrb	r3, [r7, #11]
 80086ce:	3301      	adds	r3, #1
 80086d0:	72fb      	strb	r3, [r7, #11]
          break;
 80086d2:	e03b      	b.n	800874c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	7c12      	ldrb	r2, [r2, #16]
 80086ec:	f107 0108 	add.w	r1, r7, #8
 80086f0:	4610      	mov	r0, r2
 80086f2:	4798      	blx	r3
 80086f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086f6:	e029      	b.n	800874c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa2f 	bl	8008b5e <USBD_CtlError>
            err++;
 8008700:	7afb      	ldrb	r3, [r7, #11]
 8008702:	3301      	adds	r3, #1
 8008704:	72fb      	strb	r3, [r7, #11]
          break;
 8008706:	e021      	b.n	800874c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00b      	beq.n	800872c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	7c12      	ldrb	r2, [r2, #16]
 8008720:	f107 0108 	add.w	r1, r7, #8
 8008724:	4610      	mov	r0, r2
 8008726:	4798      	blx	r3
 8008728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800872a:	e00f      	b.n	800874c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa15 	bl	8008b5e <USBD_CtlError>
            err++;
 8008734:	7afb      	ldrb	r3, [r7, #11]
 8008736:	3301      	adds	r3, #1
 8008738:	72fb      	strb	r3, [r7, #11]
          break;
 800873a:	e007      	b.n	800874c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fa0d 	bl	8008b5e <USBD_CtlError>
          err++;
 8008744:	7afb      	ldrb	r3, [r7, #11]
 8008746:	3301      	adds	r3, #1
 8008748:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800874a:	e038      	b.n	80087be <USBD_GetDescriptor+0x286>
 800874c:	e037      	b.n	80087be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	7c1b      	ldrb	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d109      	bne.n	800876a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800875c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875e:	f107 0208 	add.w	r2, r7, #8
 8008762:	4610      	mov	r0, r2
 8008764:	4798      	blx	r3
 8008766:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008768:	e029      	b.n	80087be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f9f6 	bl	8008b5e <USBD_CtlError>
        err++;
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	3301      	adds	r3, #1
 8008776:	72fb      	strb	r3, [r7, #11]
      break;
 8008778:	e021      	b.n	80087be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	7c1b      	ldrb	r3, [r3, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10d      	bne.n	800879e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878a:	f107 0208 	add.w	r2, r7, #8
 800878e:	4610      	mov	r0, r2
 8008790:	4798      	blx	r3
 8008792:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3301      	adds	r3, #1
 8008798:	2207      	movs	r2, #7
 800879a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800879c:	e00f      	b.n	80087be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f9dc 	bl	8008b5e <USBD_CtlError>
        err++;
 80087a6:	7afb      	ldrb	r3, [r7, #11]
 80087a8:	3301      	adds	r3, #1
 80087aa:	72fb      	strb	r3, [r7, #11]
      break;
 80087ac:	e007      	b.n	80087be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f9d4 	bl	8008b5e <USBD_CtlError>
      err++;
 80087b6:	7afb      	ldrb	r3, [r7, #11]
 80087b8:	3301      	adds	r3, #1
 80087ba:	72fb      	strb	r3, [r7, #11]
      break;
 80087bc:	bf00      	nop
  }

  if (err != 0U)
 80087be:	7afb      	ldrb	r3, [r7, #11]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d11c      	bne.n	80087fe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80087c4:	893b      	ldrh	r3, [r7, #8]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d011      	beq.n	80087ee <USBD_GetDescriptor+0x2b6>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	88db      	ldrh	r3, [r3, #6]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00d      	beq.n	80087ee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	88da      	ldrh	r2, [r3, #6]
 80087d6:	893b      	ldrh	r3, [r7, #8]
 80087d8:	4293      	cmp	r3, r2
 80087da:	bf28      	it	cs
 80087dc:	4613      	movcs	r3, r2
 80087de:	b29b      	uxth	r3, r3
 80087e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087e2:	893b      	ldrh	r3, [r7, #8]
 80087e4:	461a      	mov	r2, r3
 80087e6:	68f9      	ldr	r1, [r7, #12]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fa22 	bl	8008c32 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	88db      	ldrh	r3, [r3, #6]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d104      	bne.n	8008800 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fa79 	bl	8008cee <USBD_CtlSendStatus>
 80087fc:	e000      	b.n	8008800 <USBD_GetDescriptor+0x2c8>
    return;
 80087fe:	bf00      	nop
    }
  }
}
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop

08008808 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	889b      	ldrh	r3, [r3, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d130      	bne.n	800887c <USBD_SetAddress+0x74>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	88db      	ldrh	r3, [r3, #6]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d12c      	bne.n	800887c <USBD_SetAddress+0x74>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	885b      	ldrh	r3, [r3, #2]
 8008826:	2b7f      	cmp	r3, #127	; 0x7f
 8008828:	d828      	bhi.n	800887c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	885b      	ldrh	r3, [r3, #2]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008834:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800883c:	2b03      	cmp	r3, #3
 800883e:	d104      	bne.n	800884a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f98b 	bl	8008b5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008848:	e01d      	b.n	8008886 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	7bfa      	ldrb	r2, [r7, #15]
 800884e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fe48 	bl	80094ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fa46 	bl	8008cee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008862:	7bfb      	ldrb	r3, [r7, #15]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d004      	beq.n	8008872 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008870:	e009      	b.n	8008886 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800887a:	e004      	b.n	8008886 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f96d 	bl	8008b5e <USBD_CtlError>
  }
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	885b      	ldrh	r3, [r3, #2]
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	4b41      	ldr	r3, [pc, #260]	; (80089a8 <USBD_SetConfig+0x118>)
 80088a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088a4:	4b40      	ldr	r3, [pc, #256]	; (80089a8 <USBD_SetConfig+0x118>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d904      	bls.n	80088b6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f955 	bl	8008b5e <USBD_CtlError>
 80088b4:	e075      	b.n	80089a2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d002      	beq.n	80088c6 <USBD_SetConfig+0x36>
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d023      	beq.n	800890c <USBD_SetConfig+0x7c>
 80088c4:	e062      	b.n	800898c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80088c6:	4b38      	ldr	r3, [pc, #224]	; (80089a8 <USBD_SetConfig+0x118>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d01a      	beq.n	8008904 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80088ce:	4b36      	ldr	r3, [pc, #216]	; (80089a8 <USBD_SetConfig+0x118>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2203      	movs	r2, #3
 80088dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80088e0:	4b31      	ldr	r3, [pc, #196]	; (80089a8 <USBD_SetConfig+0x118>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff f9e7 	bl	8007cba <USBD_SetClassConfig>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d104      	bne.n	80088fc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f932 	bl	8008b5e <USBD_CtlError>
            return;
 80088fa:	e052      	b.n	80089a2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f9f6 	bl	8008cee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008902:	e04e      	b.n	80089a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f9f2 	bl	8008cee <USBD_CtlSendStatus>
        break;
 800890a:	e04a      	b.n	80089a2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800890c:	4b26      	ldr	r3, [pc, #152]	; (80089a8 <USBD_SetConfig+0x118>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d112      	bne.n	800893a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800891c:	4b22      	ldr	r3, [pc, #136]	; (80089a8 <USBD_SetConfig+0x118>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008926:	4b20      	ldr	r3, [pc, #128]	; (80089a8 <USBD_SetConfig+0x118>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff f9e3 	bl	8007cf8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f9db 	bl	8008cee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008938:	e033      	b.n	80089a2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800893a:	4b1b      	ldr	r3, [pc, #108]	; (80089a8 <USBD_SetConfig+0x118>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	429a      	cmp	r2, r3
 8008946:	d01d      	beq.n	8008984 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff f9d1 	bl	8007cf8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008956:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <USBD_SetConfig+0x118>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008960:	4b11      	ldr	r3, [pc, #68]	; (80089a8 <USBD_SetConfig+0x118>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff f9a7 	bl	8007cba <USBD_SetClassConfig>
 800896c:	4603      	mov	r3, r0
 800896e:	2b02      	cmp	r3, #2
 8008970:	d104      	bne.n	800897c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f8f2 	bl	8008b5e <USBD_CtlError>
            return;
 800897a:	e012      	b.n	80089a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f9b6 	bl	8008cee <USBD_CtlSendStatus>
        break;
 8008982:	e00e      	b.n	80089a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f9b2 	bl	8008cee <USBD_CtlSendStatus>
        break;
 800898a:	e00a      	b.n	80089a2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f8e5 	bl	8008b5e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008994:	4b04      	ldr	r3, [pc, #16]	; (80089a8 <USBD_SetConfig+0x118>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7ff f9ac 	bl	8007cf8 <USBD_ClrClassConfig>
        break;
 80089a0:	bf00      	nop
    }
  }
}
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	200001f1 	.word	0x200001f1

080089ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	88db      	ldrh	r3, [r3, #6]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d004      	beq.n	80089c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f8cc 	bl	8008b5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089c6:	e022      	b.n	8008a0e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	dc02      	bgt.n	80089d8 <USBD_GetConfig+0x2c>
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	dc03      	bgt.n	80089de <USBD_GetConfig+0x32>
 80089d6:	e015      	b.n	8008a04 <USBD_GetConfig+0x58>
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d00b      	beq.n	80089f4 <USBD_GetConfig+0x48>
 80089dc:	e012      	b.n	8008a04 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3308      	adds	r3, #8
 80089e8:	2201      	movs	r2, #1
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f920 	bl	8008c32 <USBD_CtlSendData>
        break;
 80089f2:	e00c      	b.n	8008a0e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	3304      	adds	r3, #4
 80089f8:	2201      	movs	r2, #1
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f918 	bl	8008c32 <USBD_CtlSendData>
        break;
 8008a02:	e004      	b.n	8008a0e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f8a9 	bl	8008b5e <USBD_CtlError>
        break;
 8008a0c:	bf00      	nop
}
 8008a0e:	bf00      	nop
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a26:	3b01      	subs	r3, #1
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d81e      	bhi.n	8008a6a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	88db      	ldrh	r3, [r3, #6]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d004      	beq.n	8008a3e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f891 	bl	8008b5e <USBD_CtlError>
        break;
 8008a3c:	e01a      	b.n	8008a74 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d005      	beq.n	8008a5a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	f043 0202 	orr.w	r2, r3, #2
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	330c      	adds	r3, #12
 8008a5e:	2202      	movs	r2, #2
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f8e5 	bl	8008c32 <USBD_CtlSendData>
      break;
 8008a68:	e004      	b.n	8008a74 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f876 	bl	8008b5e <USBD_CtlError>
      break;
 8008a72:	bf00      	nop
  }
}
 8008a74:	bf00      	nop
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	885b      	ldrh	r3, [r3, #2]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d106      	bne.n	8008a9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f929 	bl	8008cee <USBD_CtlSendStatus>
  }
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d80b      	bhi.n	8008ad2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	885b      	ldrh	r3, [r3, #2]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d10c      	bne.n	8008adc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f90f 	bl	8008cee <USBD_CtlSendStatus>
      }
      break;
 8008ad0:	e004      	b.n	8008adc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f842 	bl	8008b5e <USBD_CtlError>
      break;
 8008ada:	e000      	b.n	8008ade <USBD_ClrFeature+0x3a>
      break;
 8008adc:	bf00      	nop
  }
}
 8008ade:	bf00      	nop
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	785a      	ldrb	r2, [r3, #1]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	3302      	adds	r3, #2
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	3303      	adds	r3, #3
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	021b      	lsls	r3, r3, #8
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	4413      	add	r3, r2
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	3305      	adds	r3, #5
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	021b      	lsls	r3, r3, #8
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	4413      	add	r3, r2
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	3306      	adds	r3, #6
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	3307      	adds	r3, #7
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	021b      	lsls	r3, r3, #8
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	4413      	add	r3, r2
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	80da      	strh	r2, [r3, #6]

}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bc80      	pop	{r7}
 8008b5c:	4770      	bx	lr

08008b5e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b082      	sub	sp, #8
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b68:	2180      	movs	r1, #128	; 0x80
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fc54 	bl	8009418 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008b70:	2100      	movs	r1, #0
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fc50 	bl	8009418 <USBD_LL_StallEP>
}
 8008b78:	bf00      	nop
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d032      	beq.n	8008bfc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 f834 	bl	8008c04 <USBD_GetLen>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	75fa      	strb	r2, [r7, #23]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	7812      	ldrb	r2, [r2, #0]
 8008bba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	75fa      	strb	r2, [r7, #23]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	2203      	movs	r2, #3
 8008bca:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008bcc:	e012      	b.n	8008bf4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	60fa      	str	r2, [r7, #12]
 8008bd4:	7dfa      	ldrb	r2, [r7, #23]
 8008bd6:	1c51      	adds	r1, r2, #1
 8008bd8:	75f9      	strb	r1, [r7, #23]
 8008bda:	4611      	mov	r1, r2
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	440a      	add	r2, r1
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	75fa      	strb	r2, [r7, #23]
 8008bea:	461a      	mov	r2, r3
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	4413      	add	r3, r2
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e8      	bne.n	8008bce <USBD_GetString+0x4e>
    }
  }
}
 8008bfc:	bf00      	nop
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008c10:	e005      	b.n	8008c1e <USBD_GetLen+0x1a>
  {
    len++;
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	3301      	adds	r3, #1
 8008c16:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1f5      	bne.n	8008c12 <USBD_GetLen+0xe>
  }

  return len;
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bc80      	pop	{r7}
 8008c30:	4770      	bx	lr

08008c32 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	60f8      	str	r0, [r7, #12]
 8008c3a:	60b9      	str	r1, [r7, #8]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c48:	88fa      	ldrh	r2, [r7, #6]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008c4e:	88fa      	ldrh	r2, [r7, #6]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c54:	88fb      	ldrh	r3, [r7, #6]
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	2100      	movs	r1, #0
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 fc65 	bl	800952a <USBD_LL_Transmit>

  return USBD_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	4613      	mov	r3, r2
 8008c76:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c78:	88fb      	ldrh	r3, [r7, #6]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 fc53 	bl	800952a <USBD_LL_Transmit>

  return USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2203      	movs	r2, #3
 8008ca0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ca4:	88fa      	ldrh	r2, [r7, #6]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008cac:	88fa      	ldrh	r2, [r7, #6]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cb4:	88fb      	ldrh	r3, [r7, #6]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	2100      	movs	r1, #0
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 fc58 	bl	8009570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	60f8      	str	r0, [r7, #12]
 8008cd2:	60b9      	str	r1, [r7, #8]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cd8:	88fb      	ldrh	r3, [r7, #6]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	2100      	movs	r1, #0
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 fc46 	bl	8009570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b082      	sub	sp, #8
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2204      	movs	r2, #4
 8008cfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cfe:	2300      	movs	r3, #0
 8008d00:	2200      	movs	r2, #0
 8008d02:	2100      	movs	r1, #0
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fc10 	bl	800952a <USBD_LL_Transmit>

  return USBD_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2205      	movs	r2, #5
 8008d20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d24:	2300      	movs	r3, #0
 8008d26:	2200      	movs	r2, #0
 8008d28:	2100      	movs	r1, #0
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fc20 	bl	8009570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d40:	2200      	movs	r2, #0
 8008d42:	4912      	ldr	r1, [pc, #72]	; (8008d8c <MX_USB_DEVICE_Init+0x50>)
 8008d44:	4812      	ldr	r0, [pc, #72]	; (8008d90 <MX_USB_DEVICE_Init+0x54>)
 8008d46:	f7fe ff5e 	bl	8007c06 <USBD_Init>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d50:	f7f8 f9ac 	bl	80010ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d54:	490f      	ldr	r1, [pc, #60]	; (8008d94 <MX_USB_DEVICE_Init+0x58>)
 8008d56:	480e      	ldr	r0, [pc, #56]	; (8008d90 <MX_USB_DEVICE_Init+0x54>)
 8008d58:	f7fe ff80 	bl	8007c5c <USBD_RegisterClass>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d62:	f7f8 f9a3 	bl	80010ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d66:	490c      	ldr	r1, [pc, #48]	; (8008d98 <MX_USB_DEVICE_Init+0x5c>)
 8008d68:	4809      	ldr	r0, [pc, #36]	; (8008d90 <MX_USB_DEVICE_Init+0x54>)
 8008d6a:	f7fe feb1 	bl	8007ad0 <USBD_CDC_RegisterInterface>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d74:	f7f8 f99a 	bl	80010ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d78:	4805      	ldr	r0, [pc, #20]	; (8008d90 <MX_USB_DEVICE_Init+0x54>)
 8008d7a:	f7fe ff88 	bl	8007c8e <USBD_Start>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d84:	f7f8 f992 	bl	80010ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d88:	bf00      	nop
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	20000148 	.word	0x20000148
 8008d90:	2000051c 	.word	0x2000051c
 8008d94:	20000034 	.word	0x20000034
 8008d98:	20000138 	.word	0x20000138

08008d9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008da0:	2200      	movs	r2, #0
 8008da2:	4905      	ldr	r1, [pc, #20]	; (8008db8 <CDC_Init_FS+0x1c>)
 8008da4:	4805      	ldr	r0, [pc, #20]	; (8008dbc <CDC_Init_FS+0x20>)
 8008da6:	f7fe fea9 	bl	8007afc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008daa:	4905      	ldr	r1, [pc, #20]	; (8008dc0 <CDC_Init_FS+0x24>)
 8008dac:	4803      	ldr	r0, [pc, #12]	; (8008dbc <CDC_Init_FS+0x20>)
 8008dae:	f7fe febe 	bl	8007b2e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008db2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	20000bc8 	.word	0x20000bc8
 8008dbc:	2000051c 	.word	0x2000051c
 8008dc0:	200007e0 	.word	0x200007e0

08008dc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008dc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bc80      	pop	{r7}
 8008dd0:	4770      	bx	lr
	...

08008dd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	6039      	str	r1, [r7, #0]
 8008dde:	71fb      	strb	r3, [r7, #7]
 8008de0:	4613      	mov	r3, r2
 8008de2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008de4:	79fb      	ldrb	r3, [r7, #7]
 8008de6:	2b23      	cmp	r3, #35	; 0x23
 8008de8:	d84a      	bhi.n	8008e80 <CDC_Control_FS+0xac>
 8008dea:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <CDC_Control_FS+0x1c>)
 8008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df0:	08008e81 	.word	0x08008e81
 8008df4:	08008e81 	.word	0x08008e81
 8008df8:	08008e81 	.word	0x08008e81
 8008dfc:	08008e81 	.word	0x08008e81
 8008e00:	08008e81 	.word	0x08008e81
 8008e04:	08008e81 	.word	0x08008e81
 8008e08:	08008e81 	.word	0x08008e81
 8008e0c:	08008e81 	.word	0x08008e81
 8008e10:	08008e81 	.word	0x08008e81
 8008e14:	08008e81 	.word	0x08008e81
 8008e18:	08008e81 	.word	0x08008e81
 8008e1c:	08008e81 	.word	0x08008e81
 8008e20:	08008e81 	.word	0x08008e81
 8008e24:	08008e81 	.word	0x08008e81
 8008e28:	08008e81 	.word	0x08008e81
 8008e2c:	08008e81 	.word	0x08008e81
 8008e30:	08008e81 	.word	0x08008e81
 8008e34:	08008e81 	.word	0x08008e81
 8008e38:	08008e81 	.word	0x08008e81
 8008e3c:	08008e81 	.word	0x08008e81
 8008e40:	08008e81 	.word	0x08008e81
 8008e44:	08008e81 	.word	0x08008e81
 8008e48:	08008e81 	.word	0x08008e81
 8008e4c:	08008e81 	.word	0x08008e81
 8008e50:	08008e81 	.word	0x08008e81
 8008e54:	08008e81 	.word	0x08008e81
 8008e58:	08008e81 	.word	0x08008e81
 8008e5c:	08008e81 	.word	0x08008e81
 8008e60:	08008e81 	.word	0x08008e81
 8008e64:	08008e81 	.word	0x08008e81
 8008e68:	08008e81 	.word	0x08008e81
 8008e6c:	08008e81 	.word	0x08008e81
 8008e70:	08008e81 	.word	0x08008e81
 8008e74:	08008e81 	.word	0x08008e81
 8008e78:	08008e81 	.word	0x08008e81
 8008e7c:	08008e81 	.word	0x08008e81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e80:	bf00      	nop
  }

  return (USBD_OK);
 8008e82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bc80      	pop	{r7}
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop

08008e90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	4805      	ldr	r0, [pc, #20]	; (8008eb4 <CDC_Receive_FS+0x24>)
 8008e9e:	f7fe fe46 	bl	8007b2e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ea2:	4804      	ldr	r0, [pc, #16]	; (8008eb4 <CDC_Receive_FS+0x24>)
 8008ea4:	f7fe fe85 	bl	8007bb2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ea8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	2000051c 	.word	0x2000051c

08008eb8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ec8:	4b0d      	ldr	r3, [pc, #52]	; (8008f00 <CDC_Transmit_FS+0x48>)
 8008eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ece:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e00b      	b.n	8008ef6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ede:	887b      	ldrh	r3, [r7, #2]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	4806      	ldr	r0, [pc, #24]	; (8008f00 <CDC_Transmit_FS+0x48>)
 8008ee6:	f7fe fe09 	bl	8007afc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008eea:	4805      	ldr	r0, [pc, #20]	; (8008f00 <CDC_Transmit_FS+0x48>)
 8008eec:	f7fe fe32 	bl	8007b54 <USBD_CDC_TransmitPacket>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	2000051c 	.word	0x2000051c

08008f04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	6039      	str	r1, [r7, #0]
 8008f0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2212      	movs	r2, #18
 8008f14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f16:	4b03      	ldr	r3, [pc, #12]	; (8008f24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bc80      	pop	{r7}
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	20000164 	.word	0x20000164

08008f28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	6039      	str	r1, [r7, #0]
 8008f32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2204      	movs	r2, #4
 8008f38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f3a:	4b03      	ldr	r3, [pc, #12]	; (8008f48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bc80      	pop	{r7}
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	20000178 	.word	0x20000178

08008f4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	6039      	str	r1, [r7, #0]
 8008f56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f58:	79fb      	ldrb	r3, [r7, #7]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d105      	bne.n	8008f6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	4907      	ldr	r1, [pc, #28]	; (8008f80 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f62:	4808      	ldr	r0, [pc, #32]	; (8008f84 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f64:	f7ff fe0c 	bl	8008b80 <USBD_GetString>
 8008f68:	e004      	b.n	8008f74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	4904      	ldr	r1, [pc, #16]	; (8008f80 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f6e:	4805      	ldr	r0, [pc, #20]	; (8008f84 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f70:	f7ff fe06 	bl	8008b80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f74:	4b02      	ldr	r3, [pc, #8]	; (8008f80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	20000fb0 	.word	0x20000fb0
 8008f84:	08009754 	.word	0x08009754

08008f88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	6039      	str	r1, [r7, #0]
 8008f92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	4904      	ldr	r1, [pc, #16]	; (8008fa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f98:	4804      	ldr	r0, [pc, #16]	; (8008fac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f9a:	f7ff fdf1 	bl	8008b80 <USBD_GetString>
  return USBD_StrDesc;
 8008f9e:	4b02      	ldr	r3, [pc, #8]	; (8008fa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	20000fb0 	.word	0x20000fb0
 8008fac:	0800976c 	.word	0x0800976c

08008fb0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	6039      	str	r1, [r7, #0]
 8008fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	221a      	movs	r2, #26
 8008fc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fc2:	f000 f843 	bl	800904c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008fc6:	4b02      	ldr	r3, [pc, #8]	; (8008fd0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	2000017c 	.word	0x2000017c

08008fd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	6039      	str	r1, [r7, #0]
 8008fde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d105      	bne.n	8008ff2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	4907      	ldr	r1, [pc, #28]	; (8009008 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fea:	4808      	ldr	r0, [pc, #32]	; (800900c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fec:	f7ff fdc8 	bl	8008b80 <USBD_GetString>
 8008ff0:	e004      	b.n	8008ffc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	4904      	ldr	r1, [pc, #16]	; (8009008 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ff6:	4805      	ldr	r0, [pc, #20]	; (800900c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ff8:	f7ff fdc2 	bl	8008b80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ffc:	4b02      	ldr	r3, [pc, #8]	; (8009008 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20000fb0 	.word	0x20000fb0
 800900c:	08009780 	.word	0x08009780

08009010 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	6039      	str	r1, [r7, #0]
 800901a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d105      	bne.n	800902e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	4907      	ldr	r1, [pc, #28]	; (8009044 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009026:	4808      	ldr	r0, [pc, #32]	; (8009048 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009028:	f7ff fdaa 	bl	8008b80 <USBD_GetString>
 800902c:	e004      	b.n	8009038 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	4904      	ldr	r1, [pc, #16]	; (8009044 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009032:	4805      	ldr	r0, [pc, #20]	; (8009048 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009034:	f7ff fda4 	bl	8008b80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009038:	4b02      	ldr	r3, [pc, #8]	; (8009044 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000fb0 	.word	0x20000fb0
 8009048:	0800978c 	.word	0x0800978c

0800904c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009052:	4b0f      	ldr	r3, [pc, #60]	; (8009090 <Get_SerialNum+0x44>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009058:	4b0e      	ldr	r3, [pc, #56]	; (8009094 <Get_SerialNum+0x48>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800905e:	4b0e      	ldr	r3, [pc, #56]	; (8009098 <Get_SerialNum+0x4c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4413      	add	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d009      	beq.n	8009086 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009072:	2208      	movs	r2, #8
 8009074:	4909      	ldr	r1, [pc, #36]	; (800909c <Get_SerialNum+0x50>)
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 f814 	bl	80090a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800907c:	2204      	movs	r2, #4
 800907e:	4908      	ldr	r1, [pc, #32]	; (80090a0 <Get_SerialNum+0x54>)
 8009080:	68b8      	ldr	r0, [r7, #8]
 8009082:	f000 f80f 	bl	80090a4 <IntToUnicode>
  }
}
 8009086:	bf00      	nop
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	1ffff7e8 	.word	0x1ffff7e8
 8009094:	1ffff7ec 	.word	0x1ffff7ec
 8009098:	1ffff7f0 	.word	0x1ffff7f0
 800909c:	2000017e 	.word	0x2000017e
 80090a0:	2000018e 	.word	0x2000018e

080090a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	4613      	mov	r3, r2
 80090b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090b2:	2300      	movs	r3, #0
 80090b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090b6:	2300      	movs	r3, #0
 80090b8:	75fb      	strb	r3, [r7, #23]
 80090ba:	e027      	b.n	800910c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	0f1b      	lsrs	r3, r3, #28
 80090c0:	2b09      	cmp	r3, #9
 80090c2:	d80b      	bhi.n	80090dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	0f1b      	lsrs	r3, r3, #28
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	4619      	mov	r1, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	440b      	add	r3, r1
 80090d4:	3230      	adds	r2, #48	; 0x30
 80090d6:	b2d2      	uxtb	r2, r2
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	e00a      	b.n	80090f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	0f1b      	lsrs	r3, r3, #28
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	7dfb      	ldrb	r3, [r7, #23]
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	4619      	mov	r1, r3
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	440b      	add	r3, r1
 80090ec:	3237      	adds	r2, #55	; 0x37
 80090ee:	b2d2      	uxtb	r2, r2
 80090f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	011b      	lsls	r3, r3, #4
 80090f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
 80090fa:	005b      	lsls	r3, r3, #1
 80090fc:	3301      	adds	r3, #1
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	4413      	add	r3, r2
 8009102:	2200      	movs	r2, #0
 8009104:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	3301      	adds	r3, #1
 800910a:	75fb      	strb	r3, [r7, #23]
 800910c:	7dfa      	ldrb	r2, [r7, #23]
 800910e:	79fb      	ldrb	r3, [r7, #7]
 8009110:	429a      	cmp	r2, r3
 8009112:	d3d3      	bcc.n	80090bc <IntToUnicode+0x18>
  }
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	371c      	adds	r7, #28
 800911a:	46bd      	mov	sp, r7
 800911c:	bc80      	pop	{r7}
 800911e:	4770      	bx	lr

08009120 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a0d      	ldr	r2, [pc, #52]	; (8009164 <HAL_PCD_MspInit+0x44>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d113      	bne.n	800915a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009132:	4b0d      	ldr	r3, [pc, #52]	; (8009168 <HAL_PCD_MspInit+0x48>)
 8009134:	69db      	ldr	r3, [r3, #28]
 8009136:	4a0c      	ldr	r2, [pc, #48]	; (8009168 <HAL_PCD_MspInit+0x48>)
 8009138:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800913c:	61d3      	str	r3, [r2, #28]
 800913e:	4b0a      	ldr	r3, [pc, #40]	; (8009168 <HAL_PCD_MspInit+0x48>)
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800914a:	2200      	movs	r2, #0
 800914c:	2100      	movs	r1, #0
 800914e:	2014      	movs	r0, #20
 8009150:	f7f8 fa49 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009154:	2014      	movs	r0, #20
 8009156:	f7f8 fa62 	bl	800161e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800915a:	bf00      	nop
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	40005c00 	.word	0x40005c00
 8009168:	40021000 	.word	0x40021000

0800916c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009180:	4619      	mov	r1, r3
 8009182:	4610      	mov	r0, r2
 8009184:	f7fe fdcb 	bl	8007d1e <USBD_LL_SetupStage>
}
 8009188:	bf00      	nop
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	460b      	mov	r3, r1
 800919a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80091a2:	78fa      	ldrb	r2, [r7, #3]
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	4613      	mov	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	00db      	lsls	r3, r3, #3
 80091ae:	440b      	add	r3, r1
 80091b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	78fb      	ldrb	r3, [r7, #3]
 80091b8:	4619      	mov	r1, r3
 80091ba:	f7fe fdfd 	bl	8007db8 <USBD_LL_DataOutStage>
}
 80091be:	bf00      	nop
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	460b      	mov	r3, r1
 80091d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80091d8:	78fa      	ldrb	r2, [r7, #3]
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	440b      	add	r3, r1
 80091e6:	333c      	adds	r3, #60	; 0x3c
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	78fb      	ldrb	r3, [r7, #3]
 80091ec:	4619      	mov	r1, r3
 80091ee:	f7fe fe54 	bl	8007e9a <USBD_LL_DataInStage>
}
 80091f2:	bf00      	nop
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe ff64 	bl	80080d6 <USBD_LL_SOF>
}
 800920e:	bf00      	nop
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800921e:	2301      	movs	r3, #1
 8009220:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	2b02      	cmp	r3, #2
 8009228:	d001      	beq.n	800922e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800922a:	f7f7 ff3f 	bl	80010ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009234:	7bfa      	ldrb	r2, [r7, #15]
 8009236:	4611      	mov	r1, r2
 8009238:	4618      	mov	r0, r3
 800923a:	f7fe ff14 	bl	8008066 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009244:	4618      	mov	r0, r3
 8009246:	f7fe fecd 	bl	8007fe4 <USBD_LL_Reset>
}
 800924a:	bf00      	nop
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
	...

08009254 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe ff0e 	bl	8008084 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d005      	beq.n	800927c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009270:	4b04      	ldr	r3, [pc, #16]	; (8009284 <HAL_PCD_SuspendCallback+0x30>)
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	4a03      	ldr	r2, [pc, #12]	; (8009284 <HAL_PCD_SuspendCallback+0x30>)
 8009276:	f043 0306 	orr.w	r3, r3, #6
 800927a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	e000ed00 	.word	0xe000ed00

08009288 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe ff08 	bl	80080ac <USBD_LL_Resume>
}
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80092ac:	4a28      	ldr	r2, [pc, #160]	; (8009350 <USBD_LL_Init+0xac>)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a26      	ldr	r2, [pc, #152]	; (8009350 <USBD_LL_Init+0xac>)
 80092b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80092bc:	4b24      	ldr	r3, [pc, #144]	; (8009350 <USBD_LL_Init+0xac>)
 80092be:	4a25      	ldr	r2, [pc, #148]	; (8009354 <USBD_LL_Init+0xb0>)
 80092c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80092c2:	4b23      	ldr	r3, [pc, #140]	; (8009350 <USBD_LL_Init+0xac>)
 80092c4:	2208      	movs	r2, #8
 80092c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80092c8:	4b21      	ldr	r3, [pc, #132]	; (8009350 <USBD_LL_Init+0xac>)
 80092ca:	2202      	movs	r2, #2
 80092cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80092ce:	4b20      	ldr	r3, [pc, #128]	; (8009350 <USBD_LL_Init+0xac>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80092d4:	4b1e      	ldr	r3, [pc, #120]	; (8009350 <USBD_LL_Init+0xac>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80092da:	4b1d      	ldr	r3, [pc, #116]	; (8009350 <USBD_LL_Init+0xac>)
 80092dc:	2200      	movs	r2, #0
 80092de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80092e0:	481b      	ldr	r0, [pc, #108]	; (8009350 <USBD_LL_Init+0xac>)
 80092e2:	f7f8 fb83 	bl	80019ec <HAL_PCD_Init>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80092ec:	f7f7 fede 	bl	80010ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092f6:	2318      	movs	r3, #24
 80092f8:	2200      	movs	r2, #0
 80092fa:	2100      	movs	r1, #0
 80092fc:	f7f9 fff9 	bl	80032f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009306:	2358      	movs	r3, #88	; 0x58
 8009308:	2200      	movs	r2, #0
 800930a:	2180      	movs	r1, #128	; 0x80
 800930c:	f7f9 fff1 	bl	80032f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009316:	23c0      	movs	r3, #192	; 0xc0
 8009318:	2200      	movs	r2, #0
 800931a:	2181      	movs	r1, #129	; 0x81
 800931c:	f7f9 ffe9 	bl	80032f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009326:	f44f 7388 	mov.w	r3, #272	; 0x110
 800932a:	2200      	movs	r2, #0
 800932c:	2101      	movs	r1, #1
 800932e:	f7f9 ffe0 	bl	80032f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800933c:	2200      	movs	r2, #0
 800933e:	2182      	movs	r1, #130	; 0x82
 8009340:	f7f9 ffd7 	bl	80032f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	200011b0 	.word	0x200011b0
 8009354:	40005c00 	.word	0x40005c00

08009358 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800936e:	4618      	mov	r0, r3
 8009370:	f7f8 fc47 	bl	8001c02 <HAL_PCD_Start>
 8009374:	4603      	mov	r3, r0
 8009376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f94e 	bl	800961c <USBD_Get_USB_Status>
 8009380:	4603      	mov	r3, r0
 8009382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009384:	7bbb      	ldrb	r3, [r7, #14]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	4608      	mov	r0, r1
 8009398:	4611      	mov	r1, r2
 800939a:	461a      	mov	r2, r3
 800939c:	4603      	mov	r3, r0
 800939e:	70fb      	strb	r3, [r7, #3]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70bb      	strb	r3, [r7, #2]
 80093a4:	4613      	mov	r3, r2
 80093a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093b6:	78bb      	ldrb	r3, [r7, #2]
 80093b8:	883a      	ldrh	r2, [r7, #0]
 80093ba:	78f9      	ldrb	r1, [r7, #3]
 80093bc:	f7f8 fdc1 	bl	8001f42 <HAL_PCD_EP_Open>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f928 	bl	800961c <USBD_Get_USB_Status>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	4611      	mov	r1, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7f8 fe08 	bl	800200e <HAL_PCD_EP_Close>
 80093fe:	4603      	mov	r3, r0
 8009400:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 f909 	bl	800961c <USBD_Get_USB_Status>
 800940a:	4603      	mov	r3, r0
 800940c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009432:	78fa      	ldrb	r2, [r7, #3]
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f7f8 fec8 	bl	80021cc <HAL_PCD_EP_SetStall>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	4618      	mov	r0, r3
 8009444:	f000 f8ea 	bl	800961c <USBD_Get_USB_Status>
 8009448:	4603      	mov	r3, r0
 800944a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800944c:	7bbb      	ldrb	r3, [r7, #14]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009470:	78fa      	ldrb	r2, [r7, #3]
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f7f8 ff09 	bl	800228c <HAL_PCD_EP_ClrStall>
 800947a:	4603      	mov	r3, r0
 800947c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	4618      	mov	r0, r3
 8009482:	f000 f8cb 	bl	800961c <USBD_Get_USB_Status>
 8009486:	4603      	mov	r3, r0
 8009488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800948a:	7bbb      	ldrb	r3, [r7, #14]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	da0c      	bge.n	80094ca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094b6:	68f9      	ldr	r1, [r7, #12]
 80094b8:	1c5a      	adds	r2, r3, #1
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	440b      	add	r3, r1
 80094c4:	3302      	adds	r3, #2
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	e00b      	b.n	80094e2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094ca:	78fb      	ldrb	r3, [r7, #3]
 80094cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094d0:	68f9      	ldr	r1, [r7, #12]
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	440b      	add	r3, r1
 80094dc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80094e0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bc80      	pop	{r7}
 80094ea:	4770      	bx	lr

080094ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	460b      	mov	r3, r1
 80094f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009506:	78fa      	ldrb	r2, [r7, #3]
 8009508:	4611      	mov	r1, r2
 800950a:	4618      	mov	r0, r3
 800950c:	f7f8 fcf4 	bl	8001ef8 <HAL_PCD_SetAddress>
 8009510:	4603      	mov	r3, r0
 8009512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4618      	mov	r0, r3
 8009518:	f000 f880 	bl	800961c <USBD_Get_USB_Status>
 800951c:	4603      	mov	r3, r0
 800951e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009520:	7bbb      	ldrb	r3, [r7, #14]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b086      	sub	sp, #24
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	461a      	mov	r2, r3
 8009536:	460b      	mov	r3, r1
 8009538:	72fb      	strb	r3, [r7, #11]
 800953a:	4613      	mov	r3, r2
 800953c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800954c:	893b      	ldrh	r3, [r7, #8]
 800954e:	7af9      	ldrb	r1, [r7, #11]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	f7f8 fdf8 	bl	8002146 <HAL_PCD_EP_Transmit>
 8009556:	4603      	mov	r3, r0
 8009558:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800955a:	7dfb      	ldrb	r3, [r7, #23]
 800955c:	4618      	mov	r0, r3
 800955e:	f000 f85d 	bl	800961c <USBD_Get_USB_Status>
 8009562:	4603      	mov	r3, r0
 8009564:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009566:	7dbb      	ldrb	r3, [r7, #22]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	607a      	str	r2, [r7, #4]
 800957a:	461a      	mov	r2, r3
 800957c:	460b      	mov	r3, r1
 800957e:	72fb      	strb	r3, [r7, #11]
 8009580:	4613      	mov	r3, r2
 8009582:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009592:	893b      	ldrh	r3, [r7, #8]
 8009594:	7af9      	ldrb	r1, [r7, #11]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	f7f8 fd81 	bl	800209e <HAL_PCD_EP_Receive>
 800959c:	4603      	mov	r3, r0
 800959e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 f83a 	bl	800961c <USBD_Get_USB_Status>
 80095a8:	4603      	mov	r3, r0
 80095aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b082      	sub	sp, #8
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	460b      	mov	r3, r1
 80095c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095c8:	78fa      	ldrb	r2, [r7, #3]
 80095ca:	4611      	mov	r1, r2
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7f8 fda3 	bl	8002118 <HAL_PCD_EP_GetRxCount>
 80095d2:	4603      	mov	r3, r0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095e4:	4b02      	ldr	r3, [pc, #8]	; (80095f0 <USBD_static_malloc+0x14>)
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bc80      	pop	{r7}
 80095ee:	4770      	bx	lr
 80095f0:	200001f4 	.word	0x200001f4

080095f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]

}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	bc80      	pop	{r7}
 8009604:	4770      	bx	lr

08009606 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009606:	b480      	push	{r7}
 8009608:	b083      	sub	sp, #12
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	460b      	mov	r3, r1
 8009610:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009612:	bf00      	nop
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr

0800961c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	4603      	mov	r3, r0
 8009624:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800962a:	79fb      	ldrb	r3, [r7, #7]
 800962c:	2b03      	cmp	r3, #3
 800962e:	d817      	bhi.n	8009660 <USBD_Get_USB_Status+0x44>
 8009630:	a201      	add	r2, pc, #4	; (adr r2, 8009638 <USBD_Get_USB_Status+0x1c>)
 8009632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009636:	bf00      	nop
 8009638:	08009649 	.word	0x08009649
 800963c:	0800964f 	.word	0x0800964f
 8009640:	08009655 	.word	0x08009655
 8009644:	0800965b 	.word	0x0800965b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	73fb      	strb	r3, [r7, #15]
    break;
 800964c:	e00b      	b.n	8009666 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800964e:	2302      	movs	r3, #2
 8009650:	73fb      	strb	r3, [r7, #15]
    break;
 8009652:	e008      	b.n	8009666 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009654:	2301      	movs	r3, #1
 8009656:	73fb      	strb	r3, [r7, #15]
    break;
 8009658:	e005      	b.n	8009666 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800965a:	2302      	movs	r3, #2
 800965c:	73fb      	strb	r3, [r7, #15]
    break;
 800965e:	e002      	b.n	8009666 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009660:	2302      	movs	r3, #2
 8009662:	73fb      	strb	r3, [r7, #15]
    break;
 8009664:	bf00      	nop
  }
  return usb_status;
 8009666:	7bfb      	ldrb	r3, [r7, #15]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	bc80      	pop	{r7}
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop

08009674 <__libc_init_array>:
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	2600      	movs	r6, #0
 8009678:	4d0c      	ldr	r5, [pc, #48]	; (80096ac <__libc_init_array+0x38>)
 800967a:	4c0d      	ldr	r4, [pc, #52]	; (80096b0 <__libc_init_array+0x3c>)
 800967c:	1b64      	subs	r4, r4, r5
 800967e:	10a4      	asrs	r4, r4, #2
 8009680:	42a6      	cmp	r6, r4
 8009682:	d109      	bne.n	8009698 <__libc_init_array+0x24>
 8009684:	f000 f822 	bl	80096cc <_init>
 8009688:	2600      	movs	r6, #0
 800968a:	4d0a      	ldr	r5, [pc, #40]	; (80096b4 <__libc_init_array+0x40>)
 800968c:	4c0a      	ldr	r4, [pc, #40]	; (80096b8 <__libc_init_array+0x44>)
 800968e:	1b64      	subs	r4, r4, r5
 8009690:	10a4      	asrs	r4, r4, #2
 8009692:	42a6      	cmp	r6, r4
 8009694:	d105      	bne.n	80096a2 <__libc_init_array+0x2e>
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	f855 3b04 	ldr.w	r3, [r5], #4
 800969c:	4798      	blx	r3
 800969e:	3601      	adds	r6, #1
 80096a0:	e7ee      	b.n	8009680 <__libc_init_array+0xc>
 80096a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096a6:	4798      	blx	r3
 80096a8:	3601      	adds	r6, #1
 80096aa:	e7f2      	b.n	8009692 <__libc_init_array+0x1e>
 80096ac:	080097b0 	.word	0x080097b0
 80096b0:	080097b0 	.word	0x080097b0
 80096b4:	080097b0 	.word	0x080097b0
 80096b8:	080097b4 	.word	0x080097b4

080096bc <memset>:
 80096bc:	4603      	mov	r3, r0
 80096be:	4402      	add	r2, r0
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d100      	bne.n	80096c6 <memset+0xa>
 80096c4:	4770      	bx	lr
 80096c6:	f803 1b01 	strb.w	r1, [r3], #1
 80096ca:	e7f9      	b.n	80096c0 <memset+0x4>

080096cc <_init>:
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	bf00      	nop
 80096d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d2:	bc08      	pop	{r3}
 80096d4:	469e      	mov	lr, r3
 80096d6:	4770      	bx	lr

080096d8 <_fini>:
 80096d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096da:	bf00      	nop
 80096dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096de:	bc08      	pop	{r3}
 80096e0:	469e      	mov	lr, r3
 80096e2:	4770      	bx	lr
