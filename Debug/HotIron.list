
HotIron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800862c  0800862c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800862c  0800862c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800862c  0800862c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800862c  0800862c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08008634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  2000017c  080087b0  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001398  080087b0  00021398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014267  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031fb  00000000  00000000  0003440c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  00037608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  000382c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f94  00000000  00000000  00038e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010948  00000000  00000000  00052da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087128  00000000  00000000  000636ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea814  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b8  00000000  00000000  000ea868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800859c 	.word	0x0800859c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800859c 	.word	0x0800859c

0800014c <RussianFont>:
#include "hd44780_driver.h"

int RussianFont(uint8_t RusWord){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	switch (RusWord){
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	3ba8      	subs	r3, #168	; 0xa8
 800015a:	2b57      	cmp	r3, #87	; 0x57
 800015c:	f200 817a 	bhi.w	8000454 <RussianFont+0x308>
 8000160:	a201      	add	r2, pc, #4	; (adr r2, 8000168 <RussianFont+0x1c>)
 8000162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000166:	bf00      	nop
 8000168:	080002ed 	.word	0x080002ed
 800016c:	08000455 	.word	0x08000455
 8000170:	08000455 	.word	0x08000455
 8000174:	08000455 	.word	0x08000455
 8000178:	08000455 	.word	0x08000455
 800017c:	08000455 	.word	0x08000455
 8000180:	08000455 	.word	0x08000455
 8000184:	08000455 	.word	0x08000455
 8000188:	08000455 	.word	0x08000455
 800018c:	08000455 	.word	0x08000455
 8000190:	08000455 	.word	0x08000455
 8000194:	08000455 	.word	0x08000455
 8000198:	08000455 	.word	0x08000455
 800019c:	08000455 	.word	0x08000455
 80001a0:	08000455 	.word	0x08000455
 80001a4:	08000455 	.word	0x08000455
 80001a8:	080003b3 	.word	0x080003b3
 80001ac:	08000455 	.word	0x08000455
 80001b0:	08000455 	.word	0x08000455
 80001b4:	08000455 	.word	0x08000455
 80001b8:	08000455 	.word	0x08000455
 80001bc:	08000455 	.word	0x08000455
 80001c0:	08000455 	.word	0x08000455
 80001c4:	08000455 	.word	0x08000455
 80001c8:	080002c9 	.word	0x080002c9
 80001cc:	080002cf 	.word	0x080002cf
 80001d0:	080002d5 	.word	0x080002d5
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002e1 	.word	0x080002e1
 80001dc:	080002e7 	.word	0x080002e7
 80001e0:	080002f3 	.word	0x080002f3
 80001e4:	080002f9 	.word	0x080002f9
 80001e8:	080002ff 	.word	0x080002ff
 80001ec:	08000305 	.word	0x08000305
 80001f0:	0800030b 	.word	0x0800030b
 80001f4:	08000311 	.word	0x08000311
 80001f8:	08000317 	.word	0x08000317
 80001fc:	0800031d 	.word	0x0800031d
 8000200:	08000323 	.word	0x08000323
 8000204:	08000329 	.word	0x08000329
 8000208:	0800032f 	.word	0x0800032f
 800020c:	08000335 	.word	0x08000335
 8000210:	0800033b 	.word	0x0800033b
 8000214:	08000341 	.word	0x08000341
 8000218:	08000347 	.word	0x08000347
 800021c:	0800034d 	.word	0x0800034d
 8000220:	08000353 	.word	0x08000353
 8000224:	08000359 	.word	0x08000359
 8000228:	0800035f 	.word	0x0800035f
 800022c:	08000365 	.word	0x08000365
 8000230:	0800036b 	.word	0x0800036b
 8000234:	08000371 	.word	0x08000371
 8000238:	08000377 	.word	0x08000377
 800023c:	0800037d 	.word	0x0800037d
 8000240:	08000383 	.word	0x08000383
 8000244:	08000389 	.word	0x08000389
 8000248:	0800038f 	.word	0x0800038f
 800024c:	08000395 	.word	0x08000395
 8000250:	0800039b 	.word	0x0800039b
 8000254:	080003a1 	.word	0x080003a1
 8000258:	080003a7 	.word	0x080003a7
 800025c:	080003ad 	.word	0x080003ad
 8000260:	080003b9 	.word	0x080003b9
 8000264:	080003bf 	.word	0x080003bf
 8000268:	080003c5 	.word	0x080003c5
 800026c:	080003cb 	.word	0x080003cb
 8000270:	080003d1 	.word	0x080003d1
 8000274:	080003d7 	.word	0x080003d7
 8000278:	080003dd 	.word	0x080003dd
 800027c:	080003e3 	.word	0x080003e3
 8000280:	080003e9 	.word	0x080003e9
 8000284:	080003ef 	.word	0x080003ef
 8000288:	080003f5 	.word	0x080003f5
 800028c:	080003fb 	.word	0x080003fb
 8000290:	08000401 	.word	0x08000401
 8000294:	08000407 	.word	0x08000407
 8000298:	0800040d 	.word	0x0800040d
 800029c:	08000413 	.word	0x08000413
 80002a0:	08000419 	.word	0x08000419
 80002a4:	0800041f 	.word	0x0800041f
 80002a8:	08000425 	.word	0x08000425
 80002ac:	0800042b 	.word	0x0800042b
 80002b0:	08000431 	.word	0x08000431
 80002b4:	08000437 	.word	0x08000437
 80002b8:	0800043d 	.word	0x0800043d
 80002bc:	08000443 	.word	0x08000443
 80002c0:	08000449 	.word	0x08000449
 80002c4:	0800044f 	.word	0x0800044f
		case 0xC0:		//�
			RusWord=0x41;
 80002c8:	2341      	movs	r3, #65	; 0x41
 80002ca:	71fb      	strb	r3, [r7, #7]
			break;
 80002cc:	e0c2      	b.n	8000454 <RussianFont+0x308>
		case 0xC1:		//�
			RusWord=0xA0;
 80002ce:	23a0      	movs	r3, #160	; 0xa0
 80002d0:	71fb      	strb	r3, [r7, #7]
			break;
 80002d2:	e0bf      	b.n	8000454 <RussianFont+0x308>
		case 0xC2:		//�
			RusWord=0x42;
 80002d4:	2342      	movs	r3, #66	; 0x42
 80002d6:	71fb      	strb	r3, [r7, #7]
			break;
 80002d8:	e0bc      	b.n	8000454 <RussianFont+0x308>
		case 0xC3:		//�
			RusWord=0xA1;
 80002da:	23a1      	movs	r3, #161	; 0xa1
 80002dc:	71fb      	strb	r3, [r7, #7]
			break;
 80002de:	e0b9      	b.n	8000454 <RussianFont+0x308>
		case 0xC4:		//�
			RusWord=0xE0;
 80002e0:	23e0      	movs	r3, #224	; 0xe0
 80002e2:	71fb      	strb	r3, [r7, #7]
			break;
 80002e4:	e0b6      	b.n	8000454 <RussianFont+0x308>
		case 0xC5:		//E
			RusWord=0x45;
 80002e6:	2345      	movs	r3, #69	; 0x45
 80002e8:	71fb      	strb	r3, [r7, #7]
			break;
 80002ea:	e0b3      	b.n	8000454 <RussianFont+0x308>
		case 0xA8:		//�
			RusWord=0xA2;
 80002ec:	23a2      	movs	r3, #162	; 0xa2
 80002ee:	71fb      	strb	r3, [r7, #7]
			break;
 80002f0:	e0b0      	b.n	8000454 <RussianFont+0x308>
		case 0xC6:		//�
			RusWord=0xA3;
 80002f2:	23a3      	movs	r3, #163	; 0xa3
 80002f4:	71fb      	strb	r3, [r7, #7]
			break;
 80002f6:	e0ad      	b.n	8000454 <RussianFont+0x308>
		case 0xC7:		//3
			RusWord=0xA4;
 80002f8:	23a4      	movs	r3, #164	; 0xa4
 80002fa:	71fb      	strb	r3, [r7, #7]
			break;
 80002fc:	e0aa      	b.n	8000454 <RussianFont+0x308>
		case 0xC8:		//�
			RusWord=0xA5;
 80002fe:	23a5      	movs	r3, #165	; 0xa5
 8000300:	71fb      	strb	r3, [r7, #7]
			break;
 8000302:	e0a7      	b.n	8000454 <RussianFont+0x308>
		case 0xC9:		//�
			RusWord=0xA6;
 8000304:	23a6      	movs	r3, #166	; 0xa6
 8000306:	71fb      	strb	r3, [r7, #7]
			break;
 8000308:	e0a4      	b.n	8000454 <RussianFont+0x308>
		case 0xCA:		//�
			RusWord=0x4B;
 800030a:	234b      	movs	r3, #75	; 0x4b
 800030c:	71fb      	strb	r3, [r7, #7]
			break;
 800030e:	e0a1      	b.n	8000454 <RussianFont+0x308>
		case 0xCB:		//�
			RusWord=0xA7;
 8000310:	23a7      	movs	r3, #167	; 0xa7
 8000312:	71fb      	strb	r3, [r7, #7]
			break;
 8000314:	e09e      	b.n	8000454 <RussianFont+0x308>
		case 0xCC:		//�
			RusWord=0x4D;
 8000316:	234d      	movs	r3, #77	; 0x4d
 8000318:	71fb      	strb	r3, [r7, #7]
			break;
 800031a:	e09b      	b.n	8000454 <RussianFont+0x308>
		case 0xCD:		//H
			RusWord=0x48;
 800031c:	2348      	movs	r3, #72	; 0x48
 800031e:	71fb      	strb	r3, [r7, #7]
			break;
 8000320:	e098      	b.n	8000454 <RussianFont+0x308>
		case 0xCE:		//O
			RusWord=0x4F;
 8000322:	234f      	movs	r3, #79	; 0x4f
 8000324:	71fb      	strb	r3, [r7, #7]
			break;
 8000326:	e095      	b.n	8000454 <RussianFont+0x308>
		case 0xCF:		//�
			RusWord=0xA8;
 8000328:	23a8      	movs	r3, #168	; 0xa8
 800032a:	71fb      	strb	r3, [r7, #7]
			break;
 800032c:	e092      	b.n	8000454 <RussianFont+0x308>
		case 0xD0:		//P
			RusWord=0x50;
 800032e:	2350      	movs	r3, #80	; 0x50
 8000330:	71fb      	strb	r3, [r7, #7]
			break;
 8000332:	e08f      	b.n	8000454 <RussianFont+0x308>
		case 0xD1:		//C
			RusWord=0x43;
 8000334:	2343      	movs	r3, #67	; 0x43
 8000336:	71fb      	strb	r3, [r7, #7]
			break;
 8000338:	e08c      	b.n	8000454 <RussianFont+0x308>
		case 0xD2:		//�
			RusWord=0x54;
 800033a:	2354      	movs	r3, #84	; 0x54
 800033c:	71fb      	strb	r3, [r7, #7]
			break;
 800033e:	e089      	b.n	8000454 <RussianFont+0x308>
		case 0xD3:		//�
			RusWord=0xA9;
 8000340:	23a9      	movs	r3, #169	; 0xa9
 8000342:	71fb      	strb	r3, [r7, #7]
			break;
 8000344:	e086      	b.n	8000454 <RussianFont+0x308>
		case 0xD4:		//�
			RusWord=0xAA;
 8000346:	23aa      	movs	r3, #170	; 0xaa
 8000348:	71fb      	strb	r3, [r7, #7]
			break;
 800034a:	e083      	b.n	8000454 <RussianFont+0x308>
		case 0xD5:		//X
			RusWord=0x58;
 800034c:	2358      	movs	r3, #88	; 0x58
 800034e:	71fb      	strb	r3, [r7, #7]
			break;
 8000350:	e080      	b.n	8000454 <RussianFont+0x308>
		case 0xD6:		//�
			RusWord=0xE1;
 8000352:	23e1      	movs	r3, #225	; 0xe1
 8000354:	71fb      	strb	r3, [r7, #7]
			break;
 8000356:	e07d      	b.n	8000454 <RussianFont+0x308>
		case 0xD7:		//�
			RusWord=0xAB;
 8000358:	23ab      	movs	r3, #171	; 0xab
 800035a:	71fb      	strb	r3, [r7, #7]
			break;
 800035c:	e07a      	b.n	8000454 <RussianFont+0x308>
		case 0xD8:		//�
			RusWord=0xAC;
 800035e:	23ac      	movs	r3, #172	; 0xac
 8000360:	71fb      	strb	r3, [r7, #7]
			break;
 8000362:	e077      	b.n	8000454 <RussianFont+0x308>
		case 0xD9:		//�
			RusWord=0xE2;
 8000364:	23e2      	movs	r3, #226	; 0xe2
 8000366:	71fb      	strb	r3, [r7, #7]
			break;
 8000368:	e074      	b.n	8000454 <RussianFont+0x308>
		case 0xDA:		//�
			RusWord=0xAD;
 800036a:	23ad      	movs	r3, #173	; 0xad
 800036c:	71fb      	strb	r3, [r7, #7]
			break;
 800036e:	e071      	b.n	8000454 <RussianFont+0x308>
		case 0xDB:		//�
			RusWord=0xAE;
 8000370:	23ae      	movs	r3, #174	; 0xae
 8000372:	71fb      	strb	r3, [r7, #7]
			break;
 8000374:	e06e      	b.n	8000454 <RussianFont+0x308>
		case 0xDC:		//�
			RusWord=0x62;
 8000376:	2362      	movs	r3, #98	; 0x62
 8000378:	71fb      	strb	r3, [r7, #7]
			break;
 800037a:	e06b      	b.n	8000454 <RussianFont+0x308>
		case 0xDD:		//�
			RusWord=0xAF;
 800037c:	23af      	movs	r3, #175	; 0xaf
 800037e:	71fb      	strb	r3, [r7, #7]
			break;
 8000380:	e068      	b.n	8000454 <RussianFont+0x308>
		case 0xDE:		//�
			RusWord=0xB0;
 8000382:	23b0      	movs	r3, #176	; 0xb0
 8000384:	71fb      	strb	r3, [r7, #7]
			break;
 8000386:	e065      	b.n	8000454 <RussianFont+0x308>
		case 0xDF:		//�
			RusWord=0xB1;
 8000388:	23b1      	movs	r3, #177	; 0xb1
 800038a:	71fb      	strb	r3, [r7, #7]
			break;
 800038c:	e062      	b.n	8000454 <RussianFont+0x308>

		case 0xE0:		//�
			RusWord=0x61;
 800038e:	2361      	movs	r3, #97	; 0x61
 8000390:	71fb      	strb	r3, [r7, #7]
			break;
 8000392:	e05f      	b.n	8000454 <RussianFont+0x308>
		case 0xE1:		//�
			RusWord=0xB2;
 8000394:	23b2      	movs	r3, #178	; 0xb2
 8000396:	71fb      	strb	r3, [r7, #7]
			break;
 8000398:	e05c      	b.n	8000454 <RussianFont+0x308>
		case 0xE2:		//�
			RusWord=0xB3;
 800039a:	23b3      	movs	r3, #179	; 0xb3
 800039c:	71fb      	strb	r3, [r7, #7]
			break;
 800039e:	e059      	b.n	8000454 <RussianFont+0x308>
		case 0xE3:		//�
			RusWord=0xB4;
 80003a0:	23b4      	movs	r3, #180	; 0xb4
 80003a2:	71fb      	strb	r3, [r7, #7]
			break;
 80003a4:	e056      	b.n	8000454 <RussianFont+0x308>
		case 0xE4:		//�
			RusWord=0xE3;
 80003a6:	23e3      	movs	r3, #227	; 0xe3
 80003a8:	71fb      	strb	r3, [r7, #7]
			break;
 80003aa:	e053      	b.n	8000454 <RussianFont+0x308>
		case 0xE5:		//�
			RusWord=0x65;
 80003ac:	2365      	movs	r3, #101	; 0x65
 80003ae:	71fb      	strb	r3, [r7, #7]
			break;
 80003b0:	e050      	b.n	8000454 <RussianFont+0x308>
		case 0xB8:		//�
			RusWord=0xA2;
 80003b2:	23a2      	movs	r3, #162	; 0xa2
 80003b4:	71fb      	strb	r3, [r7, #7]
			break;
 80003b6:	e04d      	b.n	8000454 <RussianFont+0x308>
		case 0xE6:		//�
			RusWord=0xB6;
 80003b8:	23b6      	movs	r3, #182	; 0xb6
 80003ba:	71fb      	strb	r3, [r7, #7]
			break;
 80003bc:	e04a      	b.n	8000454 <RussianFont+0x308>
		case 0xE7:		//�
			RusWord=0xB7;
 80003be:	23b7      	movs	r3, #183	; 0xb7
 80003c0:	71fb      	strb	r3, [r7, #7]
			break;
 80003c2:	e047      	b.n	8000454 <RussianFont+0x308>
		case 0xE8:		//�
			RusWord=0xB8;
 80003c4:	23b8      	movs	r3, #184	; 0xb8
 80003c6:	71fb      	strb	r3, [r7, #7]
			break;
 80003c8:	e044      	b.n	8000454 <RussianFont+0x308>
		case 0xE9:		//�
			RusWord=0xB9;
 80003ca:	23b9      	movs	r3, #185	; 0xb9
 80003cc:	71fb      	strb	r3, [r7, #7]
			break;
 80003ce:	e041      	b.n	8000454 <RussianFont+0x308>
		case 0xEA:		//�
			RusWord=0xBA;
 80003d0:	23ba      	movs	r3, #186	; 0xba
 80003d2:	71fb      	strb	r3, [r7, #7]
			break;
 80003d4:	e03e      	b.n	8000454 <RussianFont+0x308>
		case 0xEB:		//�
			RusWord=0xBB;
 80003d6:	23bb      	movs	r3, #187	; 0xbb
 80003d8:	71fb      	strb	r3, [r7, #7]
			break;
 80003da:	e03b      	b.n	8000454 <RussianFont+0x308>
		case 0xEC:		//�
			RusWord=0xBC;
 80003dc:	23bc      	movs	r3, #188	; 0xbc
 80003de:	71fb      	strb	r3, [r7, #7]
			break;
 80003e0:	e038      	b.n	8000454 <RussianFont+0x308>
		case 0xED:		//�
			RusWord=0xBD;
 80003e2:	23bd      	movs	r3, #189	; 0xbd
 80003e4:	71fb      	strb	r3, [r7, #7]
			break;
 80003e6:	e035      	b.n	8000454 <RussianFont+0x308>
		case 0xEE:		//o
			RusWord=0x6F;
 80003e8:	236f      	movs	r3, #111	; 0x6f
 80003ea:	71fb      	strb	r3, [r7, #7]
			break;
 80003ec:	e032      	b.n	8000454 <RussianFont+0x308>
		case 0xEF:		//�
			RusWord=0xBE;
 80003ee:	23be      	movs	r3, #190	; 0xbe
 80003f0:	71fb      	strb	r3, [r7, #7]
			break;
 80003f2:	e02f      	b.n	8000454 <RussianFont+0x308>
		case 0xF0:		//�
			RusWord=0x70;
 80003f4:	2370      	movs	r3, #112	; 0x70
 80003f6:	71fb      	strb	r3, [r7, #7]
			break;
 80003f8:	e02c      	b.n	8000454 <RussianFont+0x308>
		case 0xf1:		//c
			RusWord=0x63;
 80003fa:	2363      	movs	r3, #99	; 0x63
 80003fc:	71fb      	strb	r3, [r7, #7]
			break;
 80003fe:	e029      	b.n	8000454 <RussianFont+0x308>
		case 0xf2:		//�
			RusWord=0xBF;
 8000400:	23bf      	movs	r3, #191	; 0xbf
 8000402:	71fb      	strb	r3, [r7, #7]
			break;
 8000404:	e026      	b.n	8000454 <RussianFont+0x308>
		case 0xf3:		//�
			RusWord=0x79;
 8000406:	2379      	movs	r3, #121	; 0x79
 8000408:	71fb      	strb	r3, [r7, #7]
			break;
 800040a:	e023      	b.n	8000454 <RussianFont+0x308>
		case 0xf4:		//�
			RusWord=0xE4;
 800040c:	23e4      	movs	r3, #228	; 0xe4
 800040e:	71fb      	strb	r3, [r7, #7]
			break;
 8000410:	e020      	b.n	8000454 <RussianFont+0x308>
		case 0xf5:		//x
			RusWord=0x78;
 8000412:	2378      	movs	r3, #120	; 0x78
 8000414:	71fb      	strb	r3, [r7, #7]
			break;
 8000416:	e01d      	b.n	8000454 <RussianFont+0x308>
		case 0xf6:		//�
			RusWord=0xE5;
 8000418:	23e5      	movs	r3, #229	; 0xe5
 800041a:	71fb      	strb	r3, [r7, #7]
			break;
 800041c:	e01a      	b.n	8000454 <RussianFont+0x308>
		case 0xf7:		//�
			RusWord=0xC0;
 800041e:	23c0      	movs	r3, #192	; 0xc0
 8000420:	71fb      	strb	r3, [r7, #7]
			break;
 8000422:	e017      	b.n	8000454 <RussianFont+0x308>
		case 0xf8:		//�
			RusWord=0xC1;
 8000424:	23c1      	movs	r3, #193	; 0xc1
 8000426:	71fb      	strb	r3, [r7, #7]
			break;
 8000428:	e014      	b.n	8000454 <RussianFont+0x308>
		case 0xf9:		//�
			RusWord=0xE6;
 800042a:	23e6      	movs	r3, #230	; 0xe6
 800042c:	71fb      	strb	r3, [r7, #7]
			break;
 800042e:	e011      	b.n	8000454 <RussianFont+0x308>
		case 0xfa:		//�
			RusWord=0xC2;
 8000430:	23c2      	movs	r3, #194	; 0xc2
 8000432:	71fb      	strb	r3, [r7, #7]
			break;
 8000434:	e00e      	b.n	8000454 <RussianFont+0x308>
		case 0xfb:		//�
			RusWord=0xC3;
 8000436:	23c3      	movs	r3, #195	; 0xc3
 8000438:	71fb      	strb	r3, [r7, #7]
			break;
 800043a:	e00b      	b.n	8000454 <RussianFont+0x308>
		case 0xfc:		//�
			RusWord=0xC4;
 800043c:	23c4      	movs	r3, #196	; 0xc4
 800043e:	71fb      	strb	r3, [r7, #7]
			break;
 8000440:	e008      	b.n	8000454 <RussianFont+0x308>
		case 0xfd:		//�
			RusWord=0xC5;
 8000442:	23c5      	movs	r3, #197	; 0xc5
 8000444:	71fb      	strb	r3, [r7, #7]
			break;
 8000446:	e005      	b.n	8000454 <RussianFont+0x308>
		case 0xfe:		//�
			RusWord=0xC6;
 8000448:	23c6      	movs	r3, #198	; 0xc6
 800044a:	71fb      	strb	r3, [r7, #7]
			break;
 800044c:	e002      	b.n	8000454 <RussianFont+0x308>
		case 0xff:		//�
			RusWord=0xC7;
 800044e:	23c7      	movs	r3, #199	; 0xc7
 8000450:	71fb      	strb	r3, [r7, #7]
			break;
 8000452:	bf00      	nop
	}
	return RusWord;
 8000454:	79fb      	ldrb	r3, [r7, #7]

}
 8000456:	4618      	mov	r0, r3
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <lcd_delay>:


void lcd_delay(void) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
	const uint32_t period = HAL_RCC_GetSysClockFreq() / 10000; // 100us = 1/10000sec
 8000466:	f003 f8c7 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 800046a:	4603      	mov	r3, r0
 800046c:	4a09      	ldr	r2, [pc, #36]	; (8000494 <lcd_delay+0x34>)
 800046e:	fba2 2303 	umull	r2, r3, r2, r3
 8000472:	0b5b      	lsrs	r3, r3, #13
 8000474:	607b      	str	r3, [r7, #4]

	volatile uint32_t delay;
	for (delay = period; delay > 0; delay--);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	603b      	str	r3, [r7, #0]
 800047a:	e002      	b.n	8000482 <lcd_delay+0x22>
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	3b01      	subs	r3, #1
 8000480:	603b      	str	r3, [r7, #0]
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1f9      	bne.n	800047c <lcd_delay+0x1c>
//	volatile uint32_t tmpvar;
//	for (tmpvar=10000;tmpvar!=0;tmpvar--);	//4000
}
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	d1b71759 	.word	0xd1b71759

08000498 <lcd_init>:




void lcd_init() {
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	LCD_PORT->CRH |= LCD_PORT_CRH_S;
 800049c:	4b13      	ldr	r3, [pc, #76]	; (80004ec <lcd_init+0x54>)
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	4a12      	ldr	r2, [pc, #72]	; (80004ec <lcd_init+0x54>)
 80004a2:	f043 2311 	orr.w	r3, r3, #285217024	; 0x11001100
 80004a6:	f443 1388 	orr.w	r3, r3, #1114112	; 0x110000
 80004aa:	6053      	str	r3, [r2, #4]
	LCD_PORT->CRL |= LCD_PORT_CRL_S;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <lcd_init+0x54>)
 80004ae:	4a0f      	ldr	r2, [pc, #60]	; (80004ec <lcd_init+0x54>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	6013      	str	r3, [r2, #0]
	LCD_PORT->CRH &= ~(LCD_PORT_CRH_C);
 80004b4:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <lcd_init+0x54>)
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	4a0c      	ldr	r2, [pc, #48]	; (80004ec <lcd_init+0x54>)
 80004ba:	f023 23ee 	bic.w	r3, r3, #3993038336	; 0xee00ee00
 80004be:	f423 036e 	bic.w	r3, r3, #15597568	; 0xee0000
 80004c2:	6053      	str	r3, [r2, #4]
	LCD_PORT->CRL &= ~(LCD_PORT_CRL_C);
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <lcd_init+0x54>)
 80004c6:	4a09      	ldr	r2, [pc, #36]	; (80004ec <lcd_init+0x54>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	6013      	str	r3, [r2, #0]
	lcd_set_4bit_mode();
 80004cc:	f000 f880 	bl	80005d0 <lcd_set_4bit_mode>
	lcd_set_state(LCD_ENABLE,CURSOR_DISABLE,NO_BLINK);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2100      	movs	r1, #0
 80004d4:	2001      	movs	r0, #1
 80004d6:	f000 f84a 	bl	800056e <lcd_set_state>
	lcd_clear();
 80004da:	f000 f840 	bl	800055e <lcd_clear>
	lcd_send(0x06,COMMAND);
 80004de:	2100      	movs	r1, #0
 80004e0:	2006      	movs	r0, #6
 80004e2:	f000 f8ff 	bl	80006e4 <lcd_send>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40010c00 	.word	0x40010c00

080004f0 <lcd_set_xy>:
		lcd_send(char_data[i],DATA);
	}
	lcd_send((1<<7), COMMAND);
}

void lcd_set_xy(uint8_t x, uint8_t y)  {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	460a      	mov	r2, r1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	4613      	mov	r3, r2
 80004fe:	71bb      	strb	r3, [r7, #6]
	if (y==0) {
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d108      	bne.n	8000518 <lcd_set_xy+0x28>
		lcd_send( ((1<<7) | (x)),COMMAND);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f000 f8e7 	bl	80006e4 <lcd_send>
	} else {
		lcd_send( ((3<<6) | (x)),COMMAND);
	}
}
 8000516:	e007      	b.n	8000528 <lcd_set_xy+0x38>
		lcd_send( ((3<<6) | (x)),COMMAND);
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800051e:	b2db      	uxtb	r3, r3
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f8de 	bl	80006e4 <lcd_send>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <lcd_out>:


void lcd_out(char * txt) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	while(*txt) {
 8000538:	e008      	b.n	800054c <lcd_out+0x1c>
		lcd_send(*txt,DATA);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2101      	movs	r1, #1
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f8cf 	bl	80006e4 <lcd_send>
		txt++;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	3301      	adds	r3, #1
 800054a:	607b      	str	r3, [r7, #4]
	while(*txt) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1f2      	bne.n	800053a <lcd_out+0xa>
	}
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <lcd_clear>:

void lcd_clear(void) {
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
	lcd_send(0x01,COMMAND);
 8000562:	2100      	movs	r1, #0
 8000564:	2001      	movs	r0, #1
 8000566:	f000 f8bd 	bl	80006e4 <lcd_send>
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}

0800056e <lcd_set_state>:

void lcd_set_state(lcd_state state, cursor_state cur_state, cursor_mode cur_mode)  {
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	460b      	mov	r3, r1
 800057a:	71bb      	strb	r3, [r7, #6]
 800057c:	4613      	mov	r3, r2
 800057e:	717b      	strb	r3, [r7, #5]
	if (state==LCD_DISABLE)  {
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d104      	bne.n	8000590 <lcd_set_state+0x22>
		lcd_send(0x08,COMMAND);
 8000586:	2100      	movs	r1, #0
 8000588:	2008      	movs	r0, #8
 800058a:	f000 f8ab 	bl	80006e4 <lcd_send>
			} else {
				lcd_send(0x0F,COMMAND);
			}
		}
	}
}
 800058e:	e01b      	b.n	80005c8 <lcd_set_state+0x5a>
		if (cur_state==CURSOR_DISABLE) {
 8000590:	79bb      	ldrb	r3, [r7, #6]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d10c      	bne.n	80005b0 <lcd_set_state+0x42>
			if (cur_mode==NO_BLINK)  {
 8000596:	797b      	ldrb	r3, [r7, #5]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d104      	bne.n	80005a6 <lcd_set_state+0x38>
				lcd_send(0x0C,COMMAND);
 800059c:	2100      	movs	r1, #0
 800059e:	200c      	movs	r0, #12
 80005a0:	f000 f8a0 	bl	80006e4 <lcd_send>
}
 80005a4:	e010      	b.n	80005c8 <lcd_set_state+0x5a>
				lcd_send(0x0D,COMMAND);
 80005a6:	2100      	movs	r1, #0
 80005a8:	200d      	movs	r0, #13
 80005aa:	f000 f89b 	bl	80006e4 <lcd_send>
}
 80005ae:	e00b      	b.n	80005c8 <lcd_set_state+0x5a>
			if (cur_mode==NO_BLINK)  {
 80005b0:	797b      	ldrb	r3, [r7, #5]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d104      	bne.n	80005c0 <lcd_set_state+0x52>
				lcd_send(0x0E,COMMAND);
 80005b6:	2100      	movs	r1, #0
 80005b8:	200e      	movs	r0, #14
 80005ba:	f000 f893 	bl	80006e4 <lcd_send>
}
 80005be:	e003      	b.n	80005c8 <lcd_set_state+0x5a>
				lcd_send(0x0F,COMMAND);
 80005c0:	2100      	movs	r1, #0
 80005c2:	200f      	movs	r0, #15
 80005c4:	f000 f88e 	bl	80006e4 <lcd_send>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <lcd_set_4bit_mode>:

void lcd_set_4bit_mode(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	lcd_delay();
 80005d4:	f7ff ff44 	bl	8000460 <lcd_delay>
	lcd_delay();
 80005d8:	f7ff ff42 	bl	8000460 <lcd_delay>
	lcd_delay();
 80005dc:	f7ff ff40 	bl	8000460 <lcd_delay>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 80005e2:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 80005e6:	611a      	str	r2, [r3, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS|LCD_DB4_BS);
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 80005ea:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80005ee:	611a      	str	r2, [r3, #16]

	LCD_PORT->BSRR=LCD_EN_BS;
 80005f0:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 80005f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005f6:	611a      	str	r2, [r3, #16]
	lcd_delay();
 80005f8:	f7ff ff32 	bl	8000460 <lcd_delay>
	LCD_PORT->BSRR=LCD_EN_BC;
 80005fc:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 80005fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000602:	611a      	str	r2, [r3, #16]
	lcd_delay();
 8000604:	f7ff ff2c 	bl	8000460 <lcd_delay>
	lcd_delay();
 8000608:	f7ff ff2a 	bl	8000460 <lcd_delay>
	lcd_delay();
 800060c:	f7ff ff28 	bl	8000460 <lcd_delay>
	
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 8000612:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 8000616:	611a      	str	r2, [r3, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS|LCD_DB4_BS);
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 800061a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800061e:	611a      	str	r2, [r3, #16]

	LCD_PORT->BSRR=LCD_EN_BS;
 8000620:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 8000622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000626:	611a      	str	r2, [r3, #16]
	lcd_delay();
 8000628:	f7ff ff1a 	bl	8000460 <lcd_delay>
	LCD_PORT->BSRR=LCD_EN_BC;
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 800062e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000632:	611a      	str	r2, [r3, #16]
	lcd_delay();
 8000634:	f7ff ff14 	bl	8000460 <lcd_delay>
	lcd_delay();
 8000638:	f7ff ff12 	bl	8000460 <lcd_delay>
	
	
	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 800063e:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 8000642:	611a      	str	r2, [r3, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS|LCD_DB4_BS);
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 8000646:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800064a:	611a      	str	r2, [r3, #16]

	LCD_PORT->BSRR=LCD_EN_BS;
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 800064e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000652:	611a      	str	r2, [r3, #16]
	lcd_delay();
 8000654:	f7ff ff04 	bl	8000460 <lcd_delay>
	LCD_PORT->BSRR=LCD_EN_BC;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 800065a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800065e:	611a      	str	r2, [r3, #16]
	lcd_delay();
 8000660:	f7ff fefe 	bl	8000460 <lcd_delay>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 8000666:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 800066a:	611a      	str	r2, [r3, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 800066e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000672:	611a      	str	r2, [r3, #16]

	LCD_PORT->BSRR=LCD_EN_BS;
 8000674:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 8000676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800067a:	611a      	str	r2, [r3, #16]
	lcd_delay();
 800067c:	f7ff fef0 	bl	8000460 <lcd_delay>
	LCD_PORT->BSRR=LCD_EN_BC;
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 8000682:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000686:	611a      	str	r2, [r3, #16]
	lcd_delay();
 8000688:	f7ff feea 	bl	8000460 <lcd_delay>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 800068e:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 8000692:	611a      	str	r2, [r3, #16]
	LCD_PORT->BSRR=(LCD_DB5_BS);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 8000696:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800069a:	611a      	str	r2, [r3, #16]

	LCD_PORT->BSRR=LCD_EN_BS;
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 800069e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006a2:	611a      	str	r2, [r3, #16]
	lcd_delay();
 80006a4:	f7ff fedc 	bl	8000460 <lcd_delay>
	LCD_PORT->BSRR=LCD_EN_BC;
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 80006aa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80006ae:	611a      	str	r2, [r3, #16]
	lcd_delay();
 80006b0:	f7ff fed6 	bl	8000460 <lcd_delay>

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 80006b6:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 80006ba:	611a      	str	r2, [r3, #16]
	LCD_PORT->BSRR=(LCD_DB7_BS);
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 80006be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006c2:	611a      	str	r2, [r3, #16]

	LCD_PORT->BSRR=LCD_EN_BS;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 80006c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ca:	611a      	str	r2, [r3, #16]
	lcd_delay();
 80006cc:	f7ff fec8 	bl	8000460 <lcd_delay>
	LCD_PORT->BSRR=LCD_EN_BC;
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <lcd_set_4bit_mode+0x110>)
 80006d2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80006d6:	611a      	str	r2, [r3, #16]
	lcd_delay();
 80006d8:	f7ff fec2 	bl	8000460 <lcd_delay>

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40010c00 	.word	0x40010c00

080006e4 <lcd_send>:

void lcd_send(uint8_t byte, dat_or_comm dc)  {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]

	if(dc)
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d00a      	beq.n	8000710 <lcd_send+0x2c>
	{
		if (byte == '\r')
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b0d      	cmp	r3, #13
 80006fe:	d07f      	beq.n	8000800 <lcd_send+0x11c>
			return;
		if (byte == '\n')
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b0a      	cmp	r3, #10
 8000704:	d104      	bne.n	8000710 <lcd_send+0x2c>
		{
			lcd_set_xy(0, 1);
 8000706:	2101      	movs	r1, #1
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff fef1 	bl	80004f0 <lcd_set_xy>
			return;
 800070e:	e078      	b.n	8000802 <lcd_send+0x11e>
		}
	}

	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC | LCD_CD_BC | LCD_EN_BC);
 8000710:	4b3d      	ldr	r3, [pc, #244]	; (8000808 <lcd_send+0x124>)
 8000712:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 8000716:	611a      	str	r2, [r3, #16]

	if (dc) {
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00c      	beq.n	8000738 <lcd_send+0x54>
		LCD_PORT->BSRR=LCD_CD_BS;
 800071e:	4b3a      	ldr	r3, [pc, #232]	; (8000808 <lcd_send+0x124>)
 8000720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000724:	611a      	str	r2, [r3, #16]
		if(byte>0xA0){
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	2ba0      	cmp	r3, #160	; 0xa0
 800072a:	d905      	bls.n	8000738 <lcd_send+0x54>
			byte=RussianFont(byte);
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fd0c 	bl	800014c <RussianFont>
 8000734:	4603      	mov	r3, r0
 8000736:	71fb      	strb	r3, [r7, #7]
		}

	}

	if (byte & 0x10) {
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 0310 	and.w	r3, r3, #16
 800073e:	2b00      	cmp	r3, #0
 8000740:	d003      	beq.n	800074a <lcd_send+0x66>
		LCD_PORT->BSRR=LCD_DB4_BS;
 8000742:	4b31      	ldr	r3, [pc, #196]	; (8000808 <lcd_send+0x124>)
 8000744:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000748:	611a      	str	r2, [r3, #16]
	}
	if (byte & 0x20) {
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f003 0320 	and.w	r3, r3, #32
 8000750:	2b00      	cmp	r3, #0
 8000752:	d003      	beq.n	800075c <lcd_send+0x78>
		LCD_PORT->BSRR=LCD_DB5_BS;
 8000754:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <lcd_send+0x124>)
 8000756:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800075a:	611a      	str	r2, [r3, #16]
	}
	if (byte & 0x40) {
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000762:	2b00      	cmp	r3, #0
 8000764:	d003      	beq.n	800076e <lcd_send+0x8a>
		LCD_PORT->BSRR=LCD_DB6_BS;
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <lcd_send+0x124>)
 8000768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800076c:	611a      	str	r2, [r3, #16]
	}
	if (byte & 0x80) {
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	2b00      	cmp	r3, #0
 8000774:	da03      	bge.n	800077e <lcd_send+0x9a>
		LCD_PORT->BSRR=LCD_DB7_BS;
 8000776:	4b24      	ldr	r3, [pc, #144]	; (8000808 <lcd_send+0x124>)
 8000778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800077c:	611a      	str	r2, [r3, #16]
	}

	LCD_PORT->BSRR=LCD_EN_BS;
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <lcd_send+0x124>)
 8000780:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000784:	611a      	str	r2, [r3, #16]
	lcd_delay();
 8000786:	f7ff fe6b 	bl	8000460 <lcd_delay>
	LCD_PORT->BSRR=LCD_EN_BC;
 800078a:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <lcd_send+0x124>)
 800078c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000790:	611a      	str	r2, [r3, #16]
	lcd_delay();
 8000792:	f7ff fe65 	bl	8000460 <lcd_delay>


	LCD_PORT->BSRR=(LCD_DB7_BC | LCD_DB6_BC | LCD_DB5_BC | LCD_DB4_BC );
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <lcd_send+0x124>)
 8000798:	f04f 424c 	mov.w	r2, #3422552064	; 0xcc000000
 800079c:	611a      	str	r2, [r3, #16]

	if (byte & 0x01) {
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d003      	beq.n	80007b0 <lcd_send+0xcc>
		LCD_PORT->BSRR=LCD_DB4_BS;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <lcd_send+0x124>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
	}
	if (byte & 0x02) {
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d003      	beq.n	80007c2 <lcd_send+0xde>
		LCD_PORT->BSRR=LCD_DB5_BS;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <lcd_send+0x124>)
 80007bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007c0:	611a      	str	r2, [r3, #16]
	}
	if (byte & 0x04) {
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d003      	beq.n	80007d4 <lcd_send+0xf0>
		LCD_PORT->BSRR=LCD_DB6_BS;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <lcd_send+0x124>)
 80007ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007d2:	611a      	str	r2, [r3, #16]
	}
	if (byte & 0x08) {
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d003      	beq.n	80007e6 <lcd_send+0x102>
		LCD_PORT->BSRR=LCD_DB7_BS;
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <lcd_send+0x124>)
 80007e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e4:	611a      	str	r2, [r3, #16]
	}

	LCD_PORT->BSRR=LCD_EN_BS;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <lcd_send+0x124>)
 80007e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ec:	611a      	str	r2, [r3, #16]
	lcd_delay();
 80007ee:	f7ff fe37 	bl	8000460 <lcd_delay>
	LCD_PORT->BSRR=LCD_EN_BC;
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <lcd_send+0x124>)
 80007f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80007f8:	611a      	str	r2, [r3, #16]
	lcd_delay();
 80007fa:	f7ff fe31 	bl	8000460 <lcd_delay>
 80007fe:	e000      	b.n	8000802 <lcd_send+0x11e>
			return;
 8000800:	bf00      	nop


}
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40010c00 	.word	0x40010c00

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000812:	f000 fb85 	bl	8000f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000816:	f000 f8f9 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 f98b 	bl	8000b34 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800081e:	f007 fa1b 	bl	8007c58 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000822:	f000 f94f 	bl	8000ac4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, 1);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800082c:	4871      	ldr	r0, [pc, #452]	; (80009f4 <main+0x1e8>)
 800082e:	f000 fe82 	bl	8001536 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_time = HAL_GetTick();
 8000832:	f000 fbcd 	bl	8000fd0 <HAL_GetTick>
 8000836:	6278      	str	r0, [r7, #36]	; 0x24
  uint16_t data;

  lcd_init();
 8000838:	f7ff fe2e 	bl	8000498 <lcd_init>
  lcd_out("Just testing");
 800083c:	486e      	ldr	r0, [pc, #440]	; (80009f8 <main+0x1ec>)
 800083e:	f7ff fe77 	bl	8000530 <lcd_out>
  while (HAL_GetTick() - last_time < 3000);
 8000842:	bf00      	nop
 8000844:	f000 fbc4 	bl	8000fd0 <HAL_GetTick>
 8000848:	4602      	mov	r2, r0
 800084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000852:	4293      	cmp	r3, r2
 8000854:	d9f6      	bls.n	8000844 <main+0x38>

  while (1)
  {
//	  if (HAL_GetTick() - last_time > 1)
//	  {
		  process_encoder();
 8000856:	f000 f9ff 	bl	8000c58 <process_encoder>
//	  }
	  if (HAL_GetTick() - last_time > 500)
 800085a:	f000 fbb9 	bl	8000fd0 <HAL_GetTick>
 800085e:	4602      	mov	r2, r0
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000868:	d9f5      	bls.n	8000856 <main+0x4a>
	  {
		  last_time = HAL_GetTick();
 800086a:	f000 fbb1 	bl	8000fd0 <HAL_GetTick>
 800086e:	6278      	str	r0, [r7, #36]	; 0x24
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000874:	4861      	ldr	r0, [pc, #388]	; (80009fc <main+0x1f0>)
 8000876:	f000 fe76 	bl	8001566 <HAL_GPIO_TogglePin>
		  HAL_SPI_Receive(&hspi1, (uint8_t*)(&data), 1, 100);
 800087a:	f107 010a 	add.w	r1, r7, #10
 800087e:	2364      	movs	r3, #100	; 0x64
 8000880:	2201      	movs	r2, #1
 8000882:	485f      	ldr	r0, [pc, #380]	; (8000a00 <main+0x1f4>)
 8000884:	f003 f870 	bl	8003968 <HAL_SPI_Receive>

#define SIGNIFICANT 4
		  uint8_t buf[SIGNIFICANT + 3];
		  if (data & 0b110)
 8000888:	897b      	ldrh	r3, [r7, #10]
 800088a:	f003 0306 	and.w	r3, r3, #6
 800088e:	2b00      	cmp	r3, #0
 8000890:	d00e      	beq.n	80008b0 <main+0xa4>
		  {
			  // MAX 6675 not okay (wrong ID or TH not connected
			  for (int i = 0; i < sizeof(buf); i++)
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
 8000896:	e007      	b.n	80008a8 <main+0x9c>
				  buf[i] = 'x';
 8000898:	463a      	mov	r2, r7
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	4413      	add	r3, r2
 800089e:	2278      	movs	r2, #120	; 0x78
 80008a0:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < sizeof(buf); i++)
 80008a2:	6a3b      	ldr	r3, [r7, #32]
 80008a4:	3301      	adds	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
 80008a8:	6a3b      	ldr	r3, [r7, #32]
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d9f4      	bls.n	8000898 <main+0x8c>
 80008ae:	e050      	b.n	8000952 <main+0x146>
		  }
		  else
		  {
			  //MAX 6675 okay, prepare data
			  data >>= 3;
 80008b0:	897b      	ldrh	r3, [r7, #10]
 80008b2:	08db      	lsrs	r3, r3, #3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	817b      	strh	r3, [r7, #10]
			  uint32_t digit = 25*(data&0b11);
 80008b8:	897b      	ldrh	r3, [r7, #10]
 80008ba:	f003 0203 	and.w	r2, r3, #3
 80008be:	4613      	mov	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	009a      	lsls	r2, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	61fb      	str	r3, [r7, #28]
			  digit += (data>>2)*1000;
 80008ca:	897b      	ldrh	r3, [r7, #10]
 80008cc:	089b      	lsrs	r3, r3, #2
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	461a      	mov	r2, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	fb03 f302 	mul.w	r3, r3, r2
 80008da:	461a      	mov	r2, r3
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	4413      	add	r3, r2
 80008e0:	61fb      	str	r3, [r7, #28]
			  int8_t i = SIGNIFICANT + 2;
 80008e2:	2306      	movs	r3, #6
 80008e4:	76fb      	strb	r3, [r7, #27]
			  while (digit)
 80008e6:	e01d      	b.n	8000924 <main+0x118>
			  {
				  buf[i--] = '0' + digit%10;
 80008e8:	69f9      	ldr	r1, [r7, #28]
 80008ea:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <main+0x1f8>)
 80008ec:	fba3 2301 	umull	r2, r3, r3, r1
 80008f0:	08da      	lsrs	r2, r3, #3
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	1aca      	subs	r2, r1, r3
 80008fc:	b2d3      	uxtb	r3, r2
 80008fe:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8000902:	b2ca      	uxtb	r2, r1
 8000904:	3a01      	subs	r2, #1
 8000906:	b2d2      	uxtb	r2, r2
 8000908:	76fa      	strb	r2, [r7, #27]
 800090a:	3330      	adds	r3, #48	; 0x30
 800090c:	b2da      	uxtb	r2, r3
 800090e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000912:	440b      	add	r3, r1
 8000914:	f803 2c28 	strb.w	r2, [r3, #-40]
				  digit /= 10;
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	4a3a      	ldr	r2, [pc, #232]	; (8000a04 <main+0x1f8>)
 800091c:	fba2 2303 	umull	r2, r3, r2, r3
 8000920:	08db      	lsrs	r3, r3, #3
 8000922:	61fb      	str	r3, [r7, #28]
			  while (digit)
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1de      	bne.n	80008e8 <main+0xdc>
			  }
			  while (i > -1)
 800092a:	e00c      	b.n	8000946 <main+0x13a>
			  {
				  buf[i--] = '0';
 800092c:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8000930:	b2d3      	uxtb	r3, r2
 8000932:	3b01      	subs	r3, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	76fb      	strb	r3, [r7, #27]
 8000938:	4613      	mov	r3, r2
 800093a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800093e:	4413      	add	r3, r2
 8000940:	2230      	movs	r2, #48	; 0x30
 8000942:	f803 2c28 	strb.w	r2, [r3, #-40]
			  while (i > -1)
 8000946:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800094a:	2b00      	cmp	r3, #0
 800094c:	daee      	bge.n	800092c <main+0x120>
			  }
			  buf[SIGNIFICANT] = '.';
 800094e:	232e      	movs	r3, #46	; 0x2e
 8000950:	713b      	strb	r3, [r7, #4]
		  }
		  lcd_set_xy(0, 1);
 8000952:	2101      	movs	r1, #1
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fdcb 	bl	80004f0 <lcd_set_xy>
		  lcd_out((char *)buf);
 800095a:	463b      	mov	r3, r7
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fde7 	bl	8000530 <lcd_out>
		  lcd_send((char)223, 1);
 8000962:	2101      	movs	r1, #1
 8000964:	20df      	movs	r0, #223	; 0xdf
 8000966:	f7ff febd 	bl	80006e4 <lcd_send>
//		  CDC_Transmit_FS(buf, sizeof(buf));
//		  CDC_Transmit_FS((uint8_t *)"\r\n", 2);
		  for (int i = 0; i < sizeof(buf); i++)
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	e007      	b.n	8000980 <main+0x174>
		  {
			  buf[i] = 0;
 8000970:	463a      	mov	r2, r7
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	4413      	add	r3, r2
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < sizeof(buf); i++)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	3301      	adds	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	2b06      	cmp	r3, #6
 8000984:	d9f4      	bls.n	8000970 <main+0x164>
		  }

		  uint16_t temp = (encoder_value>>2)&0xff;
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <main+0x1fc>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	b29b      	uxth	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	827b      	strh	r3, [r7, #18]
		  for (int i = 0; i < 5; i++)
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	e01e      	b.n	80009d6 <main+0x1ca>
		  {
			  buf[4-i] = temp % 10 + '0';
 8000998:	8a7a      	ldrh	r2, [r7, #18]
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <main+0x1f8>)
 800099c:	fba3 1302 	umull	r1, r3, r3, r2
 80009a0:	08d9      	lsrs	r1, r3, #3
 80009a2:	460b      	mov	r3, r1
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	440b      	add	r3, r1
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f1c3 0304 	rsb	r3, r3, #4
 80009b6:	3230      	adds	r2, #48	; 0x30
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80009be:	440b      	add	r3, r1
 80009c0:	f803 2c28 	strb.w	r2, [r3, #-40]
			  temp /= 10;
 80009c4:	8a7b      	ldrh	r3, [r7, #18]
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <main+0x1f8>)
 80009c8:	fba2 2303 	umull	r2, r3, r2, r3
 80009cc:	08db      	lsrs	r3, r3, #3
 80009ce:	827b      	strh	r3, [r7, #18]
		  for (int i = 0; i < 5; i++)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2b04      	cmp	r3, #4
 80009da:	dddd      	ble.n	8000998 <main+0x18c>
		  }
		  buf[5] = (encoder_value >> 2)&0xff;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <main+0x1fc>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	089b      	lsrs	r3, r3, #2
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	717b      	strb	r3, [r7, #5]
		  lcd_out((char *) buf);
 80009e8:	463b      	mov	r3, r7
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fda0 	bl	8000530 <lcd_out>
		  process_encoder();
 80009f0:	e731      	b.n	8000856 <main+0x4a>
 80009f2:	bf00      	nop
 80009f4:	40010800 	.word	0x40010800
 80009f8:	080085b4 	.word	0x080085b4
 80009fc:	40011000 	.word	0x40011000
 8000a00:	200003bc 	.word	0x200003bc
 8000a04:	cccccccd 	.word	0xcccccccd
 8000a08:	20000198 	.word	0x20000198

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b094      	sub	sp, #80	; 0x50
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a16:	2228      	movs	r2, #40	; 0x28
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f007 fdb6 	bl	800858c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fa5e 	bl	8002f24 <HAL_RCC_OscConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a6e:	f000 f977 	bl	8000d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	230f      	movs	r3, #15
 8000a74:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a82:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fcc8 	bl	8003424 <HAL_RCC_ClockConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a9a:	f000 f961 	bl	8000d60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aa6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fe22 	bl	80036f4 <HAL_RCCEx_PeriphCLKConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ab6:	f000 f953 	bl	8000d60 <Error_Handler>
  }
}
 8000aba:	bf00      	nop
 8000abc:	3750      	adds	r7, #80	; 0x50
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000aca:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <MX_SPI1_Init+0x6c>)
 8000acc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000adc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ae4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000af4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000af8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000afc:	2230      	movs	r2, #48	; 0x30
 8000afe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000b14:	220a      	movs	r2, #10
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000b1a:	f002 fea1 	bl	8003860 <HAL_SPI_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000b24:	f000 f91c 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200003bc 	.word	0x200003bc
 8000b30:	40013000 	.word	0x40013000

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <MX_GPIO_Init+0x114>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a3e      	ldr	r2, [pc, #248]	; (8000c48 <MX_GPIO_Init+0x114>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <MX_GPIO_Init+0x114>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b60:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <MX_GPIO_Init+0x114>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a38      	ldr	r2, [pc, #224]	; (8000c48 <MX_GPIO_Init+0x114>)
 8000b66:	f043 0320 	orr.w	r3, r3, #32
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <MX_GPIO_Init+0x114>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0320 	and.w	r3, r3, #32
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <MX_GPIO_Init+0x114>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <MX_GPIO_Init+0x114>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <MX_GPIO_Init+0x114>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <MX_GPIO_Init+0x114>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a2c      	ldr	r2, [pc, #176]	; (8000c48 <MX_GPIO_Init+0x114>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <MX_GPIO_Init+0x114>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bae:	4827      	ldr	r0, [pc, #156]	; (8000c4c <MX_GPIO_Init+0x118>)
 8000bb0:	f000 fcc1 	bl	8001536 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000bba:	4825      	ldr	r0, [pc, #148]	; (8000c50 <MX_GPIO_Init+0x11c>)
 8000bbc:	f000 fcbb 	bl	8001536 <HAL_GPIO_WritePin>
                          |hd_4_Pin|hd_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc6:	4823      	ldr	r0, [pc, #140]	; (8000c54 <MX_GPIO_Init+0x120>)
 8000bc8:	f000 fcb5 	bl	8001536 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	4619      	mov	r1, r3
 8000be4:	4819      	ldr	r0, [pc, #100]	; (8000c4c <MX_GPIO_Init+0x118>)
 8000be6:	f000 fb0b 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : hd_7_Pin hd_6_Pin hd_RS_Pin hd_E_Pin
                           hd_4_Pin hd_5_Pin */
  GPIO_InitStruct.Pin = hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 8000bea:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000bee:	613b      	str	r3, [r7, #16]
                          |hd_4_Pin|hd_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4619      	mov	r1, r3
 8000c02:	4813      	ldr	r0, [pc, #76]	; (8000c50 <MX_GPIO_Init+0x11c>)
 8000c04:	f000 fafc 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 8000c08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <MX_GPIO_Init+0x120>)
 8000c22:	f000 faed 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : enc_s_Pin enc_a_Pin enc_b_Pin */
  GPIO_InitStruct.Pin = enc_s_Pin|enc_a_Pin|enc_b_Pin;
 8000c26:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_GPIO_Init+0x11c>)
 8000c3c:	f000 fae0 	bl	8001200 <HAL_GPIO_Init>

}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	40010c00 	.word	0x40010c00
 8000c54:	40010800 	.word	0x40010800

08000c58 <process_encoder>:

/* USER CODE BEGIN 4 */
void process_encoder(void)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000c5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c62:	483c      	ldr	r0, [pc, #240]	; (8000d54 <process_encoder+0xfc>)
 8000c64:	f000 fc50 	bl	8001508 <HAL_GPIO_ReadPin>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461c      	mov	r4, r3
		   0b10*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 8000c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c70:	4838      	ldr	r0, [pc, #224]	; (8000d54 <process_encoder+0xfc>)
 8000c72:	f000 fc49 	bl	8001508 <HAL_GPIO_ReadPin>
 8000c76:	4603      	mov	r3, r0
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4423      	add	r3, r4
 8000c7e:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000c80:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <process_encoder+0x100>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d85e      	bhi.n	8000d46 <process_encoder+0xee>
 8000c88:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <process_encoder+0x38>)
 8000c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8e:	bf00      	nop
 8000c90:	08000cc7 	.word	0x08000cc7
 8000c94:	08000ced 	.word	0x08000ced
 8000c98:	08000ca1 	.word	0x08000ca1
 8000c9c:	08000d13 	.word	0x08000d13
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d105      	bne.n	8000cb2 <process_encoder+0x5a>
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <process_encoder+0x104>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <process_encoder+0x104>)
 8000cb0:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d13f      	bne.n	8000d38 <process_encoder+0xe0>
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <process_encoder+0x104>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <process_encoder+0x104>)
 8000cc2:	801a      	strh	r2, [r3, #0]
			break;
 8000cc4:	e038      	b.n	8000d38 <process_encoder+0xe0>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d105      	bne.n	8000cd8 <process_encoder+0x80>
 8000ccc:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <process_encoder+0x104>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <process_encoder+0x104>)
 8000cd6:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d12e      	bne.n	8000d3c <process_encoder+0xe4>
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <process_encoder+0x104>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <process_encoder+0x104>)
 8000ce8:	801a      	strh	r2, [r3, #0]
			break;
 8000cea:	e027      	b.n	8000d3c <process_encoder+0xe4>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d105      	bne.n	8000cfe <process_encoder+0xa6>
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <process_encoder+0x104>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <process_encoder+0x104>)
 8000cfc:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d11d      	bne.n	8000d40 <process_encoder+0xe8>
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <process_encoder+0x104>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <process_encoder+0x104>)
 8000d0e:	801a      	strh	r2, [r3, #0]
			break;
 8000d10:	e016      	b.n	8000d40 <process_encoder+0xe8>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d105      	bne.n	8000d24 <process_encoder+0xcc>
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <process_encoder+0x104>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <process_encoder+0x104>)
 8000d22:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d10c      	bne.n	8000d44 <process_encoder+0xec>
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <process_encoder+0x104>)
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <process_encoder+0x104>)
 8000d34:	801a      	strh	r2, [r3, #0]
			break;
 8000d36:	e005      	b.n	8000d44 <process_encoder+0xec>
			break;
 8000d38:	bf00      	nop
 8000d3a:	e004      	b.n	8000d46 <process_encoder+0xee>
			break;
 8000d3c:	bf00      	nop
 8000d3e:	e002      	b.n	8000d46 <process_encoder+0xee>
			break;
 8000d40:	bf00      	nop
 8000d42:	e000      	b.n	8000d46 <process_encoder+0xee>
			break;
 8000d44:	bf00      	nop
			}
		}
	old = new;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <process_encoder+0x100>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	7013      	strb	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	40010c00 	.word	0x40010c00
 8000d58:	2000019a 	.word	0x2000019a
 8000d5c:	20000198 	.word	0x20000198

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x8>
	...

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_MspInit+0x5c>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <HAL_MspInit+0x5c>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6193      	str	r3, [r2, #24]
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_MspInit+0x5c>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_MspInit+0x5c>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_MspInit+0x5c>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	61d3      	str	r3, [r2, #28]
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_MspInit+0x5c>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_MspInit+0x60>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_MspInit+0x60>)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010000 	.word	0x40010000

08000dd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_SPI_MspInit+0x88>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d12f      	bne.n	8000e50 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <HAL_SPI_MspInit+0x8c>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <HAL_SPI_MspInit+0x8c>)
 8000df6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_SPI_MspInit+0x8c>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_SPI_MspInit+0x8c>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <HAL_SPI_MspInit+0x8c>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_SPI_MspInit+0x8c>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e20:	2330      	movs	r3, #48	; 0x30
 8000e22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4619      	mov	r1, r3
 8000e32:	480b      	ldr	r0, [pc, #44]	; (8000e60 <HAL_SPI_MspInit+0x90>)
 8000e34:	f000 f9e4 	bl	8001200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e38:	2340      	movs	r3, #64	; 0x40
 8000e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_SPI_MspInit+0x90>)
 8000e4c:	f000 f9d8 	bl	8001200 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40013000 	.word	0x40013000
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010800 	.word	0x40010800

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <NMI_Handler+0x4>

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr

08000e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr

08000ea6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eaa:	f000 f87f 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000eba:	f000 fc9e 	bl	80017fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200010ac 	.word	0x200010ac

08000ec8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ed6:	490d      	ldr	r1, [pc, #52]	; (8000f0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eec:	4c0a      	ldr	r4, [pc, #40]	; (8000f18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000efa:	f7ff ffe5 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efe:	f007 fb21 	bl	8008544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f02:	f7ff fc83 	bl	800080c <main>
  bx lr
 8000f06:	4770      	bx	lr
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f0c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000f10:	08008634 	.word	0x08008634
  ldr r2, =_sbss
 8000f14:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000f18:	20001398 	.word	0x20001398

08000f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_2_IRQHandler>
	...

08000f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_Init+0x28>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_Init+0x28>)
 8000f2a:	f043 0310 	orr.w	r3, r3, #16
 8000f2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 f923 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f808 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff ff16 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40022000 	.word	0x40022000

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x54>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x58>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f93b 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00e      	b.n	8000f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d80a      	bhi.n	8000f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f000 f903 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_InitTick+0x5c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_IncTick+0x1c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_IncTick+0x20>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a03      	ldr	r2, [pc, #12]	; (8000fcc <HAL_IncTick+0x20>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000414 	.word	0x20000414

08000fd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b02      	ldr	r3, [pc, #8]	; (8000fe0 <HAL_GetTick+0x10>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	20000414 	.word	0x20000414

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800100c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4906      	ldr	r1, [pc, #24]	; (800107c <__NVIC_EnableIRQ+0x34>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	; (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff90 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff2d 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff42 	bl	800102c <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff90 	bl	80010d4 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5f 	bl	8001080 <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff35 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffa2 	bl	8001138 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b08b      	sub	sp, #44	; 0x2c
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001212:	e169      	b.n	80014e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001214:	2201      	movs	r2, #1
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8158 	bne.w	80014e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a9a      	ldr	r2, [pc, #616]	; (80014a0 <HAL_GPIO_Init+0x2a0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d05e      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 800123c:	4a98      	ldr	r2, [pc, #608]	; (80014a0 <HAL_GPIO_Init+0x2a0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d875      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 8001242:	4a98      	ldr	r2, [pc, #608]	; (80014a4 <HAL_GPIO_Init+0x2a4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d058      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 8001248:	4a96      	ldr	r2, [pc, #600]	; (80014a4 <HAL_GPIO_Init+0x2a4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d86f      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 800124e:	4a96      	ldr	r2, [pc, #600]	; (80014a8 <HAL_GPIO_Init+0x2a8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d052      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 8001254:	4a94      	ldr	r2, [pc, #592]	; (80014a8 <HAL_GPIO_Init+0x2a8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d869      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 800125a:	4a94      	ldr	r2, [pc, #592]	; (80014ac <HAL_GPIO_Init+0x2ac>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d04c      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 8001260:	4a92      	ldr	r2, [pc, #584]	; (80014ac <HAL_GPIO_Init+0x2ac>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d863      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 8001266:	4a92      	ldr	r2, [pc, #584]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d046      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
 800126c:	4a90      	ldr	r2, [pc, #576]	; (80014b0 <HAL_GPIO_Init+0x2b0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d85d      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 8001272:	2b12      	cmp	r3, #18
 8001274:	d82a      	bhi.n	80012cc <HAL_GPIO_Init+0xcc>
 8001276:	2b12      	cmp	r3, #18
 8001278:	d859      	bhi.n	800132e <HAL_GPIO_Init+0x12e>
 800127a:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <HAL_GPIO_Init+0x80>)
 800127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001280:	080012fb 	.word	0x080012fb
 8001284:	080012d5 	.word	0x080012d5
 8001288:	080012e7 	.word	0x080012e7
 800128c:	08001329 	.word	0x08001329
 8001290:	0800132f 	.word	0x0800132f
 8001294:	0800132f 	.word	0x0800132f
 8001298:	0800132f 	.word	0x0800132f
 800129c:	0800132f 	.word	0x0800132f
 80012a0:	0800132f 	.word	0x0800132f
 80012a4:	0800132f 	.word	0x0800132f
 80012a8:	0800132f 	.word	0x0800132f
 80012ac:	0800132f 	.word	0x0800132f
 80012b0:	0800132f 	.word	0x0800132f
 80012b4:	0800132f 	.word	0x0800132f
 80012b8:	0800132f 	.word	0x0800132f
 80012bc:	0800132f 	.word	0x0800132f
 80012c0:	0800132f 	.word	0x0800132f
 80012c4:	080012dd 	.word	0x080012dd
 80012c8:	080012f1 	.word	0x080012f1
 80012cc:	4a79      	ldr	r2, [pc, #484]	; (80014b4 <HAL_GPIO_Init+0x2b4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d013      	beq.n	80012fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012d2:	e02c      	b.n	800132e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	623b      	str	r3, [r7, #32]
          break;
 80012da:	e029      	b.n	8001330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	3304      	adds	r3, #4
 80012e2:	623b      	str	r3, [r7, #32]
          break;
 80012e4:	e024      	b.n	8001330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	3308      	adds	r3, #8
 80012ec:	623b      	str	r3, [r7, #32]
          break;
 80012ee:	e01f      	b.n	8001330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	330c      	adds	r3, #12
 80012f6:	623b      	str	r3, [r7, #32]
          break;
 80012f8:	e01a      	b.n	8001330 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001302:	2304      	movs	r3, #4
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e013      	b.n	8001330 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d105      	bne.n	800131c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001310:	2308      	movs	r3, #8
 8001312:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	611a      	str	r2, [r3, #16]
          break;
 800131a:	e009      	b.n	8001330 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800131c:	2308      	movs	r3, #8
 800131e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	615a      	str	r2, [r3, #20]
          break;
 8001326:	e003      	b.n	8001330 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
          break;
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x130>
          break;
 800132e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2bff      	cmp	r3, #255	; 0xff
 8001334:	d801      	bhi.n	800133a <HAL_GPIO_Init+0x13a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	e001      	b.n	800133e <HAL_GPIO_Init+0x13e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3304      	adds	r3, #4
 800133e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2bff      	cmp	r3, #255	; 0xff
 8001344:	d802      	bhi.n	800134c <HAL_GPIO_Init+0x14c>
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	e002      	b.n	8001352 <HAL_GPIO_Init+0x152>
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	3b08      	subs	r3, #8
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	210f      	movs	r1, #15
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	401a      	ands	r2, r3
 8001364:	6a39      	ldr	r1, [r7, #32]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	431a      	orrs	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 80b1 	beq.w	80014e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001380:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <HAL_GPIO_Init+0x2b8>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001398:	4a48      	ldr	r2, [pc, #288]	; (80014bc <HAL_GPIO_Init+0x2bc>)
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	220f      	movs	r2, #15
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a40      	ldr	r2, [pc, #256]	; (80014c0 <HAL_GPIO_Init+0x2c0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d013      	beq.n	80013ec <HAL_GPIO_Init+0x1ec>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a3f      	ldr	r2, [pc, #252]	; (80014c4 <HAL_GPIO_Init+0x2c4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d00d      	beq.n	80013e8 <HAL_GPIO_Init+0x1e8>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a3e      	ldr	r2, [pc, #248]	; (80014c8 <HAL_GPIO_Init+0x2c8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d007      	beq.n	80013e4 <HAL_GPIO_Init+0x1e4>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a3d      	ldr	r2, [pc, #244]	; (80014cc <HAL_GPIO_Init+0x2cc>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d101      	bne.n	80013e0 <HAL_GPIO_Init+0x1e0>
 80013dc:	2303      	movs	r3, #3
 80013de:	e006      	b.n	80013ee <HAL_GPIO_Init+0x1ee>
 80013e0:	2304      	movs	r3, #4
 80013e2:	e004      	b.n	80013ee <HAL_GPIO_Init+0x1ee>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e002      	b.n	80013ee <HAL_GPIO_Init+0x1ee>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <HAL_GPIO_Init+0x1ee>
 80013ec:	2300      	movs	r3, #0
 80013ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f0:	f002 0203 	and.w	r2, r2, #3
 80013f4:	0092      	lsls	r2, r2, #2
 80013f6:	4093      	lsls	r3, r2
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013fe:	492f      	ldr	r1, [pc, #188]	; (80014bc <HAL_GPIO_Init+0x2bc>)
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	3302      	adds	r3, #2
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001418:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	492c      	ldr	r1, [pc, #176]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	43db      	mvns	r3, r3
 800142e:	4928      	ldr	r1, [pc, #160]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001430:	4013      	ands	r3, r2
 8001432:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001440:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4922      	ldr	r1, [pc, #136]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	43db      	mvns	r3, r3
 8001456:	491e      	ldr	r1, [pc, #120]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001458:	4013      	ands	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	4918      	ldr	r1, [pc, #96]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	608b      	str	r3, [r1, #8]
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	43db      	mvns	r3, r3
 800147e:	4914      	ldr	r1, [pc, #80]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001480:	4013      	ands	r3, r2
 8001482:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d021      	beq.n	80014d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	490e      	ldr	r1, [pc, #56]	; (80014d0 <HAL_GPIO_Init+0x2d0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	60cb      	str	r3, [r1, #12]
 800149c:	e021      	b.n	80014e2 <HAL_GPIO_Init+0x2e2>
 800149e:	bf00      	nop
 80014a0:	10320000 	.word	0x10320000
 80014a4:	10310000 	.word	0x10310000
 80014a8:	10220000 	.word	0x10220000
 80014ac:	10210000 	.word	0x10210000
 80014b0:	10120000 	.word	0x10120000
 80014b4:	10110000 	.word	0x10110000
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40010800 	.word	0x40010800
 80014c4:	40010c00 	.word	0x40010c00
 80014c8:	40011000 	.word	0x40011000
 80014cc:	40011400 	.word	0x40011400
 80014d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_GPIO_Init+0x304>)
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	43db      	mvns	r3, r3
 80014dc:	4909      	ldr	r1, [pc, #36]	; (8001504 <HAL_GPIO_Init+0x304>)
 80014de:	4013      	ands	r3, r2
 80014e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	3301      	adds	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	fa22 f303 	lsr.w	r3, r2, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f47f ae8e 	bne.w	8001214 <HAL_GPIO_Init+0x14>
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	372c      	adds	r7, #44	; 0x2c
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e001      	b.n	800152a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	807b      	strh	r3, [r7, #2]
 8001542:	4613      	mov	r3, r2
 8001544:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001546:	787b      	ldrb	r3, [r7, #1]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154c:	887a      	ldrh	r2, [r7, #2]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001552:	e003      	b.n	800155c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	041a      	lsls	r2, r3, #16
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	611a      	str	r2, [r3, #16]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001578:	887a      	ldrh	r2, [r7, #2]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4013      	ands	r3, r2
 800157e:	041a      	lsls	r2, r3, #16
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43d9      	mvns	r1, r3
 8001584:	887b      	ldrh	r3, [r7, #2]
 8001586:	400b      	ands	r3, r1
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	611a      	str	r2, [r3, #16]
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159a:	b08b      	sub	sp, #44	; 0x2c
 800159c:	af06      	add	r7, sp, #24
 800159e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0fd      	b.n	80017a6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d106      	bne.n	80015c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f006 fd16 	bl	8007ff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2203      	movs	r2, #3
 80015c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fd9b 	bl	800410c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	687e      	ldr	r6, [r7, #4]
 80015de:	466d      	mov	r5, sp
 80015e0:	f106 0410 	add.w	r4, r6, #16
 80015e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	602b      	str	r3, [r5, #0]
 80015ec:	1d33      	adds	r3, r6, #4
 80015ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f0:	6838      	ldr	r0, [r7, #0]
 80015f2:	f002 fd65 	bl	80040c0 <USB_CoreInit>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0ce      	b.n	80017a6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f002 fd96 	bl	8004140 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e04c      	b.n	80016b4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	3301      	adds	r3, #1
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	b298      	uxth	r0, r3
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	440b      	add	r3, r1
 8001656:	3336      	adds	r3, #54	; 0x36
 8001658:	4602      	mov	r2, r0
 800165a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	3303      	adds	r3, #3
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	3338      	adds	r3, #56	; 0x38
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	333c      	adds	r3, #60	; 0x3c
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	3340      	adds	r3, #64	; 0x40
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	3301      	adds	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d3ad      	bcc.n	800161a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]
 80016c2:	e044      	b.n	800174e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	440b      	add	r3, r1
 80016e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	440b      	add	r3, r1
 800172a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	440b      	add	r3, r1
 8001740:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	3301      	adds	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	d3b5      	bcc.n	80016c4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	687e      	ldr	r6, [r7, #4]
 8001760:	466d      	mov	r5, sp
 8001762:	f106 0410 	add.w	r4, r6, #16
 8001766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	602b      	str	r3, [r5, #0]
 800176e:	1d33      	adds	r3, r6, #4
 8001770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001772:	6838      	ldr	r0, [r7, #0]
 8001774:	f002 fcf0 	bl	8004158 <USB_DevInit>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2202      	movs	r2, #2
 8001782:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00d      	b.n	80017a6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f004 fe61 	bl	8006466 <USB_DevDisconnect>

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_PCD_Start+0x16>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e016      	b.n	80017f2 <HAL_PCD_Start+0x44>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fc85 	bl	80040e0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017d6:	2101      	movs	r1, #1
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f006 fe7c 	bl	80084d6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 fe35 	bl	8006452 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b088      	sub	sp, #32
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f004 fe37 	bl	800647a <USB_ReadInterrupts>
 800180c:	4603      	mov	r3, r0
 800180e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001816:	d102      	bne.n	800181e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fb61 	bl	8001ee0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f004 fe29 	bl	800647a <USB_ReadInterrupts>
 8001828:	4603      	mov	r3, r0
 800182a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001832:	d112      	bne.n	800185a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800183c:	b29a      	uxth	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001846:	b292      	uxth	r2, r2
 8001848:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f006 fc4a 	bl	80080e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001852:	2100      	movs	r1, #0
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f925 	bl	8001aa4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f004 fe0b 	bl	800647a <USB_ReadInterrupts>
 8001864:	4603      	mov	r3, r0
 8001866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800186e:	d10b      	bne.n	8001888 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001878:	b29a      	uxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001882:	b292      	uxth	r2, r2
 8001884:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f004 fdf4 	bl	800647a <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800189c:	d10b      	bne.n	80018b6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018b0:	b292      	uxth	r2, r2
 80018b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f004 fddd 	bl	800647a <USB_ReadInterrupts>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ca:	d126      	bne.n	800191a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0204 	bic.w	r2, r2, #4
 80018de:	b292      	uxth	r2, r2
 80018e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0208 	bic.w	r2, r2, #8
 80018f6:	b292      	uxth	r2, r2
 80018f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f006 fc2b 	bl	8008158 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800190a:	b29a      	uxth	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001914:	b292      	uxth	r2, r2
 8001916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fdab 	bl	800647a <USB_ReadInterrupts>
 8001924:	4603      	mov	r3, r0
 8001926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800192a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800192e:	f040 8084 	bne.w	8001a3a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001932:	2300      	movs	r3, #0
 8001934:	77fb      	strb	r3, [r7, #31]
 8001936:	e011      	b.n	800195c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	7ffb      	ldrb	r3, [r7, #31]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	441a      	add	r2, r3
 8001944:	7ffb      	ldrb	r3, [r7, #31]
 8001946:	8812      	ldrh	r2, [r2, #0]
 8001948:	b292      	uxth	r2, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	f107 0120 	add.w	r1, r7, #32
 8001950:	440b      	add	r3, r1
 8001952:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001956:	7ffb      	ldrb	r3, [r7, #31]
 8001958:	3301      	adds	r3, #1
 800195a:	77fb      	strb	r3, [r7, #31]
 800195c:	7ffb      	ldrb	r3, [r7, #31]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d9ea      	bls.n	8001938 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800196a:	b29a      	uxth	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0201 	orr.w	r2, r2, #1
 8001974:	b292      	uxth	r2, r2
 8001976:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001982:	b29a      	uxth	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0201 	bic.w	r2, r2, #1
 800198c:	b292      	uxth	r2, r2
 800198e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001992:	bf00      	nop
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800199c:	b29b      	uxth	r3, r3
 800199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f6      	beq.n	8001994 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b8:	b292      	uxth	r2, r2
 80019ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80019be:	2300      	movs	r3, #0
 80019c0:	77fb      	strb	r3, [r7, #31]
 80019c2:	e010      	b.n	80019e6 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80019c4:	7ffb      	ldrb	r3, [r7, #31]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	4611      	mov	r1, r2
 80019cc:	7ffa      	ldrb	r2, [r7, #31]
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	440a      	add	r2, r1
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	f107 0120 	add.w	r1, r7, #32
 80019d8:	440b      	add	r3, r1
 80019da:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80019de:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80019e0:	7ffb      	ldrb	r3, [r7, #31]
 80019e2:	3301      	adds	r3, #1
 80019e4:	77fb      	strb	r3, [r7, #31]
 80019e6:	7ffb      	ldrb	r3, [r7, #31]
 80019e8:	2b07      	cmp	r3, #7
 80019ea:	d9eb      	bls.n	80019c4 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0208 	orr.w	r2, r2, #8
 80019fe:	b292      	uxth	r2, r2
 8001a00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a16:	b292      	uxth	r2, r2
 8001a18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0204 	orr.w	r2, r2, #4
 8001a2e:	b292      	uxth	r2, r2
 8001a30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f006 fb75 	bl	8008124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f004 fd1b 	bl	800647a <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a4e:	d10e      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a62:	b292      	uxth	r2, r2
 8001a64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f006 fb2e 	bl	80080ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f004 fd01 	bl	800647a <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a82:	d10b      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a96:	b292      	uxth	r2, r2
 8001a98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_PCD_SetAddress+0x1a>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e013      	b.n	8001ae6 <HAL_PCD_SetAddress+0x42>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 fca8 	bl	800642c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	4608      	mov	r0, r1
 8001af8:	4611      	mov	r1, r2
 8001afa:	461a      	mov	r2, r3
 8001afc:	4603      	mov	r3, r0
 8001afe:	70fb      	strb	r3, [r7, #3]
 8001b00:	460b      	mov	r3, r1
 8001b02:	803b      	strh	r3, [r7, #0]
 8001b04:	4613      	mov	r3, r2
 8001b06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	da0e      	bge.n	8001b32 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	705a      	strb	r2, [r3, #1]
 8001b30:	e00e      	b.n	8001b50 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	f003 0207 	and.w	r2, r3, #7
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b5c:	883a      	ldrh	r2, [r7, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	78ba      	ldrb	r2, [r7, #2]
 8001b66:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	785b      	ldrb	r3, [r3, #1]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b7a:	78bb      	ldrb	r3, [r7, #2]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d102      	bne.n	8001b86 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_PCD_EP_Open+0xa6>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e00e      	b.n	8001bb2 <HAL_PCD_EP_Open+0xc4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68f9      	ldr	r1, [r7, #12]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f002 faf8 	bl	8004198 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001bb0:	7afb      	ldrb	r3, [r7, #11]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	da0e      	bge.n	8001bec <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2201      	movs	r2, #1
 8001be8:	705a      	strb	r2, [r3, #1]
 8001bea:	e00e      	b.n	8001c0a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	f003 0207 	and.w	r2, r3, #7
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_PCD_EP_Close+0x6a>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e00e      	b.n	8001c42 <HAL_PCD_EP_Close+0x88>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68f9      	ldr	r1, [r7, #12]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 fe1a 	bl	800486c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	460b      	mov	r3, r1
 8001c58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c5a:	7afb      	ldrb	r3, [r7, #11]
 8001c5c:	f003 0207 	and.w	r2, r3, #7
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2200      	movs	r2, #0
 8001c82:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2200      	movs	r2, #0
 8001c88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c8a:	7afb      	ldrb	r3, [r7, #11]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c96:	7afb      	ldrb	r3, [r7, #11]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d106      	bne.n	8001cae <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6979      	ldr	r1, [r7, #20]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 ffcc 	bl	8004c44 <USB_EPStartXfer>
 8001cac:	e005      	b.n	8001cba <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6979      	ldr	r1, [r7, #20]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f002 ffc5 	bl	8004c44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	f003 0207 	and.w	r2, r3, #7
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d02:	7afb      	ldrb	r3, [r7, #11]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4413      	add	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2200      	movs	r2, #0
 8001d36:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d4a:	7afb      	ldrb	r3, [r7, #11]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d106      	bne.n	8001d62 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6979      	ldr	r1, [r7, #20]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 ff72 	bl	8004c44 <USB_EPStartXfer>
 8001d60:	e005      	b.n	8001d6e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6979      	ldr	r1, [r7, #20]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 ff6b 	bl	8004c44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	f003 0207 	and.w	r2, r3, #7
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d901      	bls.n	8001d96 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e04c      	b.n	8001e30 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	da0e      	bge.n	8001dbc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	705a      	strb	r2, [r3, #1]
 8001dba:	e00c      	b.n	8001dd6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_PCD_EP_SetStall+0x7e>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e01c      	b.n	8001e30 <HAL_PCD_EP_SetStall+0xb8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 fa14 	bl	8006232 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d108      	bne.n	8001e26 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4610      	mov	r0, r2
 8001e22:	f004 fb39 	bl	8006498 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	f003 020f 	and.w	r2, r3, #15
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d901      	bls.n	8001e56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e040      	b.n	8001ed8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	da0e      	bge.n	8001e7c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	705a      	strb	r2, [r3, #1]
 8001e7a:	e00e      	b.n	8001e9a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 0207 	and.w	r2, r3, #7
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_PCD_EP_ClrStall+0x82>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e00e      	b.n	8001ed8 <HAL_PCD_EP_ClrStall+0xa0>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68f9      	ldr	r1, [r7, #12]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f004 fa02 	bl	80062d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08e      	sub	sp, #56	; 0x38
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ee8:	e2ec      	b.n	80024c4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ef4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001f00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f040 8161 	bne.w	80021cc <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d152      	bne.n	8001fba <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f24:	81fb      	strh	r3, [r7, #14]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	89fb      	ldrh	r3, [r7, #14]
 8001f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3328      	adds	r3, #40	; 0x28
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	3302      	adds	r3, #2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	441a      	add	r2, r3
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f78:	2100      	movs	r1, #0
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f006 f88b 	bl	8008096 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 829b 	beq.w	80024c4 <PCD_EP_ISR_Handler+0x5e4>
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 8296 	bne.w	80024c4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b292      	uxth	r2, r2
 8001fac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fb8:	e284      	b.n	80024c4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d034      	beq.n	800203e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3306      	adds	r3, #6
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002012:	b29b      	uxth	r3, r3
 8002014:	f004 fa90 	bl	8006538 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b29a      	uxth	r2, r3
 8002020:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002024:	4013      	ands	r3, r2
 8002026:	823b      	strh	r3, [r7, #16]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	8a3a      	ldrh	r2, [r7, #16]
 800202e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002032:	b292      	uxth	r2, r2
 8002034:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f006 f800 	bl	800803c <HAL_PCD_SetupStageCallback>
 800203c:	e242      	b.n	80024c4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800203e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002042:	2b00      	cmp	r3, #0
 8002044:	f280 823e 	bge.w	80024c4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b29a      	uxth	r2, r3
 8002050:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002054:	4013      	ands	r3, r2
 8002056:	83bb      	strh	r3, [r7, #28]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	8bba      	ldrh	r2, [r7, #28]
 800205e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002062:	b292      	uxth	r2, r2
 8002064:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206e:	b29b      	uxth	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	3306      	adds	r3, #6
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	4413      	add	r3, r2
 8002084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d019      	beq.n	80020ce <PCD_EP_ISR_Handler+0x1ee>
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d015      	beq.n	80020ce <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	6959      	ldr	r1, [r3, #20]
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	f004 fa40 	bl	8006538 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	441a      	add	r2, r3
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020c6:	2100      	movs	r1, #0
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f005 ffc9 	bl	8008060 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f040 81f2 	bne.w	80024c4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4413      	add	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d112      	bne.n	800212e <PCD_EP_ISR_Handler+0x24e>
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002112:	b29a      	uxth	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	801a      	strh	r2, [r3, #0]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002126:	b29a      	uxth	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	801a      	strh	r2, [r3, #0]
 800212c:	e02f      	b.n	800218e <PCD_EP_ISR_Handler+0x2ae>
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b3e      	cmp	r3, #62	; 0x3e
 8002134:	d813      	bhi.n	800215e <PCD_EP_ISR_Handler+0x27e>
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <PCD_EP_ISR_Handler+0x270>
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214c:	3301      	adds	r3, #1
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
 8002150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002152:	b29b      	uxth	r3, r3
 8002154:	029b      	lsls	r3, r3, #10
 8002156:	b29a      	uxth	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	801a      	strh	r2, [r3, #0]
 800215c:	e017      	b.n	800218e <PCD_EP_ISR_Handler+0x2ae>
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <PCD_EP_ISR_Handler+0x298>
 8002172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002174:	3b01      	subs	r3, #1
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	b29b      	uxth	r3, r3
 800217c:	029b      	lsls	r3, r3, #10
 800217e:	b29b      	uxth	r3, r3
 8002180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002188:	b29a      	uxth	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219e:	827b      	strh	r3, [r7, #18]
 80021a0:	8a7b      	ldrh	r3, [r7, #18]
 80021a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80021a6:	827b      	strh	r3, [r7, #18]
 80021a8:	8a7b      	ldrh	r3, [r7, #18]
 80021aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021ae:	827b      	strh	r3, [r7, #18]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	8a7b      	ldrh	r3, [r7, #18]
 80021b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	8013      	strh	r3, [r2, #0]
 80021ca:	e17b      	b.n	80024c4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021de:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f280 80ea 	bge.w	80023bc <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021fe:	4013      	ands	r3, r2
 8002200:	853b      	strh	r3, [r7, #40]	; 0x28
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002212:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002216:	b292      	uxth	r2, r2
 8002218:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800221a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	7b1b      	ldrb	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d122      	bne.n	800227e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	3306      	adds	r3, #6
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002260:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002262:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8087 	beq.w	8002378 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	6959      	ldr	r1, [r3, #20]
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	88da      	ldrh	r2, [r3, #6]
 8002276:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002278:	f004 f95e 	bl	8006538 <USB_ReadPMA>
 800227c:	e07c      	b.n	8002378 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	78db      	ldrb	r3, [r3, #3]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d108      	bne.n	8002298 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002286:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002288:	461a      	mov	r2, r3
 800228a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f927 	bl	80024e0 <HAL_PCD_EP_DB_Receive>
 8002292:	4603      	mov	r3, r0
 8002294:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002296:	e06f      	b.n	8002378 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	441a      	add	r2, r3
 80022c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d021      	beq.n	8002336 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	3302      	adds	r3, #2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	4413      	add	r3, r2
 8002310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800231c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800231e:	2b00      	cmp	r3, #0
 8002320:	d02a      	beq.n	8002378 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	6959      	ldr	r1, [r3, #20]
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	891a      	ldrh	r2, [r3, #8]
 800232e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002330:	f004 f902 	bl	8006538 <USB_ReadPMA>
 8002334:	e020      	b.n	8002378 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233e:	b29b      	uxth	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	3306      	adds	r3, #6
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800235e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002360:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	6959      	ldr	r1, [r3, #20]
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	895a      	ldrh	r2, [r3, #10]
 8002372:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002374:	f004 f8e0 	bl	8006538 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800237e:	441a      	add	r2, r3
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800238a:	441a      	add	r2, r3
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <PCD_EP_ISR_Handler+0x4c2>
 8002398:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d206      	bcs.n	80023b0 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f005 fe59 	bl	8008060 <HAL_PCD_DataOutStageCallback>
 80023ae:	e005      	b.n	80023bc <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 fc44 	bl	8004c44 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d07e      	beq.n	80024c4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80023c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f4:	843b      	strh	r3, [r7, #32]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	441a      	add	r2, r3
 8002404:	8c3b      	ldrh	r3, [r7, #32]
 8002406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800240a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800240e:	b29b      	uxth	r3, r3
 8002410:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	78db      	ldrb	r3, [r3, #3]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d00c      	beq.n	8002434 <PCD_EP_ISR_Handler+0x554>
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	78db      	ldrb	r3, [r3, #3]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002426:	2b02      	cmp	r3, #2
 8002428:	d146      	bne.n	80024b8 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800242a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d141      	bne.n	80024b8 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243c:	b29b      	uxth	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	3302      	adds	r3, #2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	4413      	add	r3, r2
 8002452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800245c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	8bfb      	ldrh	r3, [r7, #30]
 8002464:	429a      	cmp	r2, r3
 8002466:	d906      	bls.n	8002476 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	8bfb      	ldrh	r3, [r7, #30]
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	619a      	str	r2, [r3, #24]
 8002474:	e002      	b.n	800247c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f005 fe03 	bl	8008096 <HAL_PCD_DataInStageCallback>
 8002490:	e018      	b.n	80024c4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	8bfb      	ldrh	r3, [r7, #30]
 8002498:	441a      	add	r2, r3
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	8bfb      	ldrh	r3, [r7, #30]
 80024a4:	441a      	add	r2, r3
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 fbc7 	bl	8004c44 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80024b6:	e005      	b.n	80024c4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80024b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024ba:	461a      	mov	r2, r3
 80024bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f91b 	bl	80026fa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f6ff ad0a 	blt.w	8001eea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3738      	adds	r7, #56	; 0x38
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	4613      	mov	r3, r2
 80024ec:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d07e      	beq.n	80025f6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002500:	b29b      	uxth	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	3302      	adds	r3, #2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002520:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	8b7b      	ldrh	r3, [r7, #26]
 8002528:	429a      	cmp	r2, r3
 800252a:	d306      	bcc.n	800253a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	8b7b      	ldrh	r3, [r7, #26]
 8002532:	1ad2      	subs	r2, r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	619a      	str	r2, [r3, #24]
 8002538:	e002      	b.n	8002540 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d123      	bne.n	8002590 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800255e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002562:	833b      	strh	r3, [r7, #24]
 8002564:	8b3b      	ldrh	r3, [r7, #24]
 8002566:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800256a:	833b      	strh	r3, [r7, #24]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	441a      	add	r2, r3
 800257a:	8b3b      	ldrh	r3, [r7, #24]
 800257c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258c:	b29b      	uxth	r3, r3
 800258e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01f      	beq.n	80025da <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b4:	82fb      	strh	r3, [r7, #22]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	441a      	add	r2, r3
 80025c4:	8afb      	ldrh	r3, [r7, #22]
 80025c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025da:	8b7b      	ldrh	r3, [r7, #26]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8087 	beq.w	80026f0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	6959      	ldr	r1, [r3, #20]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	891a      	ldrh	r2, [r3, #8]
 80025ee:	8b7b      	ldrh	r3, [r7, #26]
 80025f0:	f003 ffa2 	bl	8006538 <USB_ReadPMA>
 80025f4:	e07c      	b.n	80026f0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025fe:	b29b      	uxth	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	3306      	adds	r3, #6
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800261e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	699a      	ldr	r2, [r3, #24]
 8002624:	8b7b      	ldrh	r3, [r7, #26]
 8002626:	429a      	cmp	r2, r3
 8002628:	d306      	bcc.n	8002638 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	8b7b      	ldrh	r3, [r7, #26]
 8002630:	1ad2      	subs	r2, r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	619a      	str	r2, [r3, #24]
 8002636:	e002      	b.n	800263e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2200      	movs	r2, #0
 800263c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d123      	bne.n	800268e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800265c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002660:	83fb      	strh	r3, [r7, #30]
 8002662:	8bfb      	ldrh	r3, [r7, #30]
 8002664:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002668:	83fb      	strh	r3, [r7, #30]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	441a      	add	r2, r3
 8002678:	8bfb      	ldrh	r3, [r7, #30]
 800267a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800267e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268a:	b29b      	uxth	r3, r3
 800268c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	d11f      	bne.n	80026d8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	83bb      	strh	r3, [r7, #28]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	441a      	add	r2, r3
 80026c2:	8bbb      	ldrh	r3, [r7, #28]
 80026c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026d8:	8b7b      	ldrh	r3, [r7, #26]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d008      	beq.n	80026f0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	6959      	ldr	r1, [r3, #20]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	895a      	ldrh	r2, [r3, #10]
 80026ea:	8b7b      	ldrh	r3, [r7, #26]
 80026ec:	f003 ff24 	bl	8006538 <USB_ReadPMA>
    }
  }

  return count;
 80026f0:	8b7b      	ldrh	r3, [r7, #26]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3720      	adds	r7, #32
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b0a2      	sub	sp, #136	; 0x88
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	4613      	mov	r3, r2
 8002706:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 81c7 	beq.w	8002aa2 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271c:	b29b      	uxth	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	3302      	adds	r3, #2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	4413      	add	r3, r2
 8002732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800273c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002748:	429a      	cmp	r2, r3
 800274a:	d907      	bls.n	800275c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002754:	1ad2      	subs	r2, r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	619a      	str	r2, [r3, #24]
 800275a:	e002      	b.n	8002762 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2200      	movs	r2, #0
 8002760:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 80b9 	bne.w	80028de <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	785b      	ldrb	r3, [r3, #1]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d126      	bne.n	80027c2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	62bb      	str	r3, [r7, #40]	; 0x28
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002782:	b29b      	uxth	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	4413      	add	r3, r2
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	011a      	lsls	r2, r3, #4
 8002792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002794:	4413      	add	r3, r2
 8002796:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	801a      	strh	r2, [r3, #0]
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	801a      	strh	r2, [r3, #0]
 80027c0:	e01a      	b.n	80027f8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d116      	bne.n	80027f8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	633b      	str	r3, [r7, #48]	; 0x30
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	4413      	add	r3, r2
 80027e0:	633b      	str	r3, [r7, #48]	; 0x30
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	011a      	lsls	r2, r3, #4
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	4413      	add	r3, r2
 80027ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	2200      	movs	r2, #0
 80027f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	623b      	str	r3, [r7, #32]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d126      	bne.n	8002854 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002814:	b29b      	uxth	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	4413      	add	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	011a      	lsls	r2, r3, #4
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	b29b      	uxth	r3, r3
 8002834:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002838:	b29a      	uxth	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	801a      	strh	r2, [r3, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800284c:	b29a      	uxth	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	801a      	strh	r2, [r3, #0]
 8002852:	e017      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	785b      	ldrb	r3, [r3, #1]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d113      	bne.n	8002884 <HAL_PCD_EP_DB_Transmit+0x18a>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002864:	b29b      	uxth	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	4413      	add	r3, r2
 800286c:	623b      	str	r3, [r7, #32]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	011a      	lsls	r2, r3, #4
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	4413      	add	r3, r2
 8002878:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	2200      	movs	r2, #0
 8002882:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4619      	mov	r1, r3
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f005 fc03 	bl	8008096 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 82d4 	beq.w	8002e44 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b6:	827b      	strh	r3, [r7, #18]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	441a      	add	r2, r3
 80028c6:	8a7b      	ldrh	r3, [r7, #18]
 80028c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d8:	b29b      	uxth	r3, r3
 80028da:	8013      	strh	r3, [r2, #0]
 80028dc:	e2b2      	b.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d021      	beq.n	800292c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002902:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	441a      	add	r2, r3
 8002914:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800291c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002928:	b29b      	uxth	r3, r3
 800292a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002932:	2b01      	cmp	r3, #1
 8002934:	f040 8286 	bne.w	8002e44 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002940:	441a      	add	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800294e:	441a      	add	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	6a1a      	ldr	r2, [r3, #32]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	429a      	cmp	r2, r3
 800295e:	d309      	bcc.n	8002974 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	6a1a      	ldr	r2, [r3, #32]
 800296a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800296c:	1ad2      	subs	r2, r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	621a      	str	r2, [r3, #32]
 8002972:	e015      	b.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800297c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002980:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800298a:	e009      	b.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2200      	movs	r2, #0
 800299e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	785b      	ldrb	r3, [r3, #1]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d155      	bne.n	8002a54 <HAL_PCD_EP_DB_Transmit+0x35a>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	4413      	add	r3, r2
 80029be:	63bb      	str	r3, [r7, #56]	; 0x38
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	011a      	lsls	r2, r3, #4
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	4413      	add	r3, r2
 80029ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
 80029d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d112      	bne.n	80029fc <HAL_PCD_EP_DB_Transmit+0x302>
 80029d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f8:	801a      	strh	r2, [r3, #0]
 80029fa:	e047      	b.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x392>
 80029fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029fe:	2b3e      	cmp	r3, #62	; 0x3e
 8002a00:	d811      	bhi.n	8002a26 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a14:	3301      	adds	r3, #1
 8002a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	029b      	lsls	r3, r3, #10
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	e032      	b.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x392>
 8002a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <HAL_PCD_EP_DB_Transmit+0x342>
 8002a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	029b      	lsls	r3, r3, #10
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	801a      	strh	r2, [r3, #0]
 8002a52:	e01b      	b.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x392>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	785b      	ldrb	r3, [r3, #1]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d117      	bne.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x392>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	643b      	str	r3, [r7, #64]	; 0x40
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a70:	4413      	add	r3, r2
 8002a72:	643b      	str	r3, [r7, #64]	; 0x40
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	011a      	lsls	r2, r3, #4
 8002a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	6959      	ldr	r1, [r3, #20]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	891a      	ldrh	r2, [r3, #8]
 8002a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f003 fd07 	bl	80064ae <USB_WritePMA>
 8002aa0:	e1d0      	b.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3306      	adds	r3, #6
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d307      	bcc.n	8002aea <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ae2:	1ad2      	subs	r2, r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	619a      	str	r2, [r3, #24]
 8002ae8:	e002      	b.n	8002af0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f040 80c4 	bne.w	8002c82 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d126      	bne.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x456>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b16:	4413      	add	r3, r2
 8002b18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	011a      	lsls	r2, r3, #4
 8002b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b22:	4413      	add	r3, r2
 8002b24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b28:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b38:	801a      	strh	r2, [r3, #0]
 8002b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b4c:	801a      	strh	r2, [r3, #0]
 8002b4e:	e01a      	b.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	785b      	ldrb	r3, [r3, #1]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d116      	bne.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	677b      	str	r3, [r7, #116]	; 0x74
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b6c:	4413      	add	r3, r2
 8002b6e:	677b      	str	r3, [r7, #116]	; 0x74
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	011a      	lsls	r2, r3, #4
 8002b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b78:	4413      	add	r3, r2
 8002b7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b7e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b82:	2200      	movs	r2, #0
 8002b84:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	785b      	ldrb	r3, [r3, #1]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d12f      	bne.n	8002bf4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bac:	4413      	add	r3, r2
 8002bae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	011a      	lsls	r2, r3, #4
 8002bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bd8:	801a      	strh	r2, [r3, #0]
 8002bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bf0:	801a      	strh	r2, [r3, #0]
 8002bf2:	e017      	b.n	8002c24 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	785b      	ldrb	r3, [r3, #1]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d113      	bne.n	8002c24 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c0a:	4413      	add	r3, r2
 8002c0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	011a      	lsls	r2, r3, #4
 8002c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c16:	4413      	add	r3, r2
 8002c18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c20:	2200      	movs	r2, #0
 8002c22:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f005 fa33 	bl	8008096 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 8104 	bne.w	8002e44 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	441a      	add	r2, r3
 8002c68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	8013      	strh	r3, [r2, #0]
 8002c80:	e0e0      	b.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d121      	bne.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	441a      	add	r2, r3
 8002cb8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	f040 80b4 	bne.w	8002e44 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce4:	441a      	add	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	69da      	ldr	r2, [r3, #28]
 8002cee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cf2:	441a      	add	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6a1a      	ldr	r2, [r3, #32]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d309      	bcc.n	8002d18 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	6a1a      	ldr	r2, [r3, #32]
 8002d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d10:	1ad2      	subs	r2, r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	621a      	str	r2, [r3, #32]
 8002d16:	e015      	b.n	8002d44 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d107      	bne.n	8002d30 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002d20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d2e:	e009      	b.n	8002d44 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	667b      	str	r3, [r7, #100]	; 0x64
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	785b      	ldrb	r3, [r3, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d155      	bne.n	8002dfe <HAL_PCD_EP_DB_Transmit+0x704>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d66:	4413      	add	r3, r2
 8002d68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	011a      	lsls	r2, r3, #4
 8002d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d72:	4413      	add	r3, r2
 8002d74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d78:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d112      	bne.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002d80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d8e:	801a      	strh	r2, [r3, #0]
 8002d90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002da2:	801a      	strh	r2, [r3, #0]
 8002da4:	e044      	b.n	8002e30 <HAL_PCD_EP_DB_Transmit+0x736>
 8002da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da8:	2b3e      	cmp	r3, #62	; 0x3e
 8002daa:	d811      	bhi.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	657b      	str	r3, [r7, #84]	; 0x54
 8002db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8002dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	029b      	lsls	r3, r3, #10
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dcc:	801a      	strh	r2, [r3, #0]
 8002dce:	e02f      	b.n	8002e30 <HAL_PCD_EP_DB_Transmit+0x736>
 8002dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	657b      	str	r3, [r7, #84]	; 0x54
 8002dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d102      	bne.n	8002de6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de2:	3b01      	subs	r3, #1
 8002de4:	657b      	str	r3, [r7, #84]	; 0x54
 8002de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	029b      	lsls	r3, r3, #10
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dfa:	801a      	strh	r2, [r3, #0]
 8002dfc:	e018      	b.n	8002e30 <HAL_PCD_EP_DB_Transmit+0x736>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	785b      	ldrb	r3, [r3, #1]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d114      	bne.n	8002e30 <HAL_PCD_EP_DB_Transmit+0x736>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e14:	4413      	add	r3, r2
 8002e16:	667b      	str	r3, [r7, #100]	; 0x64
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	011a      	lsls	r2, r3, #4
 8002e1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e20:	4413      	add	r3, r2
 8002e22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e26:	663b      	str	r3, [r7, #96]	; 0x60
 8002e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e2e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	6959      	ldr	r1, [r3, #20]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	895a      	ldrh	r2, [r3, #10]
 8002e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f003 fb35 	bl	80064ae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e5e:	823b      	strh	r3, [r7, #16]
 8002e60:	8a3b      	ldrh	r3, [r7, #16]
 8002e62:	f083 0310 	eor.w	r3, r3, #16
 8002e66:	823b      	strh	r3, [r7, #16]
 8002e68:	8a3b      	ldrh	r3, [r7, #16]
 8002e6a:	f083 0320 	eor.w	r3, r3, #32
 8002e6e:	823b      	strh	r3, [r7, #16]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	441a      	add	r2, r3
 8002e7e:	8a3b      	ldrh	r3, [r7, #16]
 8002e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3788      	adds	r7, #136	; 0x88
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b087      	sub	sp, #28
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	817b      	strh	r3, [r7, #10]
 8002eac:	4613      	mov	r3, r2
 8002eae:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002eb0:	897b      	ldrh	r3, [r7, #10]
 8002eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ebc:	897b      	ldrh	r3, [r7, #10]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e009      	b.n	8002ee8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ed4:	897a      	ldrh	r2, [r7, #10]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ee8:	893b      	ldrh	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d107      	bne.n	8002efe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	80da      	strh	r2, [r3, #6]
 8002efc:	e00b      	b.n	8002f16 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2201      	movs	r2, #1
 8002f02:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	0c1b      	lsrs	r3, r3, #16
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e26c      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8087 	beq.w	8003052 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f44:	4b92      	ldr	r3, [pc, #584]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 030c 	and.w	r3, r3, #12
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d00c      	beq.n	8002f6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f50:	4b8f      	ldr	r3, [pc, #572]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 030c 	and.w	r3, r3, #12
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d112      	bne.n	8002f82 <HAL_RCC_OscConfig+0x5e>
 8002f5c:	4b8c      	ldr	r3, [pc, #560]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d10b      	bne.n	8002f82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6a:	4b89      	ldr	r3, [pc, #548]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d06c      	beq.n	8003050 <HAL_RCC_OscConfig+0x12c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d168      	bne.n	8003050 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e246      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x76>
 8002f8c:	4b80      	ldr	r3, [pc, #512]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a7f      	ldr	r2, [pc, #508]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	e02e      	b.n	8002ff8 <HAL_RCC_OscConfig+0xd4>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x98>
 8002fa2:	4b7b      	ldr	r3, [pc, #492]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7a      	ldr	r2, [pc, #488]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b78      	ldr	r3, [pc, #480]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a77      	ldr	r2, [pc, #476]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e01d      	b.n	8002ff8 <HAL_RCC_OscConfig+0xd4>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xbc>
 8002fc6:	4b72      	ldr	r3, [pc, #456]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a71      	ldr	r2, [pc, #452]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b6f      	ldr	r3, [pc, #444]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a6e      	ldr	r2, [pc, #440]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e00b      	b.n	8002ff8 <HAL_RCC_OscConfig+0xd4>
 8002fe0:	4b6b      	ldr	r3, [pc, #428]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a6a      	ldr	r2, [pc, #424]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b68      	ldr	r3, [pc, #416]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a67      	ldr	r2, [pc, #412]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d013      	beq.n	8003028 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fd ffe6 	bl	8000fd0 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fd ffe2 	bl	8000fd0 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e1fa      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b5d      	ldr	r3, [pc, #372]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0xe4>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fd ffd2 	bl	8000fd0 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003030:	f7fd ffce 	bl	8000fd0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1e6      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003042:	4b53      	ldr	r3, [pc, #332]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x10c>
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d063      	beq.n	8003126 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800305e:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800306a:	4b49      	ldr	r3, [pc, #292]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b08      	cmp	r3, #8
 8003074:	d11c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x18c>
 8003076:	4b46      	ldr	r3, [pc, #280]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d116      	bne.n	80030b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003082:	4b43      	ldr	r3, [pc, #268]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_RCC_OscConfig+0x176>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d001      	beq.n	800309a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e1ba      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309a:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4939      	ldr	r1, [pc, #228]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ae:	e03a      	b.n	8003126 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b8:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fd ff87 	bl	8000fd0 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c6:	f7fd ff83 	bl	8000fd0 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e19b      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d8:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4927      	ldr	r1, [pc, #156]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]
 80030f8:	e015      	b.n	8003126 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fa:	4b26      	ldr	r3, [pc, #152]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fd ff66 	bl	8000fd0 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003108:	f7fd ff62 	bl	8000fd0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e17a      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311a:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d03a      	beq.n	80031a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d019      	beq.n	800316e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313a:	4b17      	ldr	r3, [pc, #92]	; (8003198 <HAL_RCC_OscConfig+0x274>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003140:	f7fd ff46 	bl	8000fd0 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003148:	f7fd ff42 	bl	8000fd0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e15a      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003166:	2001      	movs	r0, #1
 8003168:	f000 faa6 	bl	80036b8 <RCC_Delay>
 800316c:	e01c      	b.n	80031a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <HAL_RCC_OscConfig+0x274>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003174:	f7fd ff2c 	bl	8000fd0 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317a:	e00f      	b.n	800319c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317c:	f7fd ff28 	bl	8000fd0 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d908      	bls.n	800319c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e140      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	42420000 	.word	0x42420000
 8003198:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319c:	4b9e      	ldr	r3, [pc, #632]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1e9      	bne.n	800317c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80a6 	beq.w	8003302 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ba:	4b97      	ldr	r3, [pc, #604]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10d      	bne.n	80031e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c6:	4b94      	ldr	r3, [pc, #592]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4a93      	ldr	r2, [pc, #588]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 80031cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d0:	61d3      	str	r3, [r2, #28]
 80031d2:	4b91      	ldr	r3, [pc, #580]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	4b8e      	ldr	r3, [pc, #568]	; (800341c <HAL_RCC_OscConfig+0x4f8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d118      	bne.n	8003220 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ee:	4b8b      	ldr	r3, [pc, #556]	; (800341c <HAL_RCC_OscConfig+0x4f8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a8a      	ldr	r2, [pc, #552]	; (800341c <HAL_RCC_OscConfig+0x4f8>)
 80031f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fa:	f7fd fee9 	bl	8000fd0 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003202:	f7fd fee5 	bl	8000fd0 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b64      	cmp	r3, #100	; 0x64
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e0fd      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003214:	4b81      	ldr	r3, [pc, #516]	; (800341c <HAL_RCC_OscConfig+0x4f8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d106      	bne.n	8003236 <HAL_RCC_OscConfig+0x312>
 8003228:	4b7b      	ldr	r3, [pc, #492]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4a7a      	ldr	r2, [pc, #488]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6213      	str	r3, [r2, #32]
 8003234:	e02d      	b.n	8003292 <HAL_RCC_OscConfig+0x36e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0x334>
 800323e:	4b76      	ldr	r3, [pc, #472]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	4a75      	ldr	r2, [pc, #468]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	6213      	str	r3, [r2, #32]
 800324a:	4b73      	ldr	r3, [pc, #460]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4a72      	ldr	r2, [pc, #456]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	6213      	str	r3, [r2, #32]
 8003256:	e01c      	b.n	8003292 <HAL_RCC_OscConfig+0x36e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b05      	cmp	r3, #5
 800325e:	d10c      	bne.n	800327a <HAL_RCC_OscConfig+0x356>
 8003260:	4b6d      	ldr	r3, [pc, #436]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	4a6c      	ldr	r2, [pc, #432]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 8003266:	f043 0304 	orr.w	r3, r3, #4
 800326a:	6213      	str	r3, [r2, #32]
 800326c:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	4a69      	ldr	r2, [pc, #420]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6213      	str	r3, [r2, #32]
 8003278:	e00b      	b.n	8003292 <HAL_RCC_OscConfig+0x36e>
 800327a:	4b67      	ldr	r3, [pc, #412]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	4a66      	ldr	r2, [pc, #408]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	6213      	str	r3, [r2, #32]
 8003286:	4b64      	ldr	r3, [pc, #400]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	4a63      	ldr	r2, [pc, #396]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 800328c:	f023 0304 	bic.w	r3, r3, #4
 8003290:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d015      	beq.n	80032c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329a:	f7fd fe99 	bl	8000fd0 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	e00a      	b.n	80032b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fd fe95 	bl	8000fd0 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e0ab      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b8:	4b57      	ldr	r3, [pc, #348]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0ee      	beq.n	80032a2 <HAL_RCC_OscConfig+0x37e>
 80032c4:	e014      	b.n	80032f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c6:	f7fd fe83 	bl	8000fd0 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032cc:	e00a      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7fd fe7f 	bl	8000fd0 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e095      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e4:	4b4c      	ldr	r3, [pc, #304]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ee      	bne.n	80032ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d105      	bne.n	8003302 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f6:	4b48      	ldr	r3, [pc, #288]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4a47      	ldr	r2, [pc, #284]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 80032fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003300:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8081 	beq.w	800340e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800330c:	4b42      	ldr	r3, [pc, #264]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b08      	cmp	r3, #8
 8003316:	d061      	beq.n	80033dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d146      	bne.n	80033ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003320:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <HAL_RCC_OscConfig+0x4fc>)
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fd fe53 	bl	8000fd0 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7fd fe4f 	bl	8000fd0 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e067      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f0      	bne.n	800332e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d108      	bne.n	8003368 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003356:	4b30      	ldr	r3, [pc, #192]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	492d      	ldr	r1, [pc, #180]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003368:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a19      	ldr	r1, [r3, #32]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	430b      	orrs	r3, r1
 800337a:	4927      	ldr	r1, [pc, #156]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 800337c:	4313      	orrs	r3, r2
 800337e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003380:	4b27      	ldr	r3, [pc, #156]	; (8003420 <HAL_RCC_OscConfig+0x4fc>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7fd fe23 	bl	8000fd0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7fd fe1f 	bl	8000fd0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e037      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033a0:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x46a>
 80033ac:	e02f      	b.n	800340e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ae:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <HAL_RCC_OscConfig+0x4fc>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7fd fe0c 	bl	8000fd0 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033bc:	f7fd fe08 	bl	8000fd0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e020      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x498>
 80033da:	e018      	b.n	800340e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e013      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_OscConfig+0x4f4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d106      	bne.n	800340a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	40007000 	.word	0x40007000
 8003420:	42420060 	.word	0x42420060

08003424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0d0      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d910      	bls.n	8003468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b67      	ldr	r3, [pc, #412]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 0207 	bic.w	r2, r3, #7
 800344e:	4965      	ldr	r1, [pc, #404]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b63      	ldr	r3, [pc, #396]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0b8      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d020      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003480:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a58      	ldr	r2, [pc, #352]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800348a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003498:	4b53      	ldr	r3, [pc, #332]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4a52      	ldr	r2, [pc, #328]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a4:	4b50      	ldr	r3, [pc, #320]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	494d      	ldr	r1, [pc, #308]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d040      	beq.n	8003544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d115      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e07f      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e073      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e06b      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003502:	4b39      	ldr	r3, [pc, #228]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4936      	ldr	r1, [pc, #216]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003514:	f7fd fd5c 	bl	8000fd0 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	e00a      	b.n	8003532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fd fd58 	bl	8000fd0 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e053      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 020c 	and.w	r2, r3, #12
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	429a      	cmp	r2, r3
 8003542:	d1eb      	bne.n	800351c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003544:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d210      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 0207 	bic.w	r2, r3, #7
 800355a:	4922      	ldr	r1, [pc, #136]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e032      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4916      	ldr	r1, [pc, #88]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	490e      	ldr	r1, [pc, #56]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035b2:	f000 f821 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 80035b6:	4602      	mov	r2, r0
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	490a      	ldr	r1, [pc, #40]	; (80035ec <HAL_RCC_ClockConfig+0x1c8>)
 80035c4:	5ccb      	ldrb	r3, [r1, r3]
 80035c6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <HAL_RCC_ClockConfig+0x1cc>)
 80035cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_ClockConfig+0x1d0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd fcba 	bl	8000f4c <HAL_InitTick>

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40022000 	.word	0x40022000
 80035e8:	40021000 	.word	0x40021000
 80035ec:	0800861c 	.word	0x0800861c
 80035f0:	20000000 	.word	0x20000000
 80035f4:	20000004 	.word	0x20000004

080035f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f8:	b490      	push	{r4, r7}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035fe:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003600:	1d3c      	adds	r4, r7, #4
 8003602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003608:	f240 2301 	movw	r3, #513	; 0x201
 800360c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	2300      	movs	r3, #0
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003622:	4b22      	ldr	r3, [pc, #136]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b04      	cmp	r3, #4
 8003630:	d002      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x40>
 8003632:	2b08      	cmp	r3, #8
 8003634:	d003      	beq.n	800363e <HAL_RCC_GetSysClockFreq+0x46>
 8003636:	e02d      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003638:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800363a:	623b      	str	r3, [r7, #32]
      break;
 800363c:	e02d      	b.n	800369a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	0c9b      	lsrs	r3, r3, #18
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800364a:	4413      	add	r3, r2
 800364c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003650:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d013      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800365c:	4b13      	ldr	r3, [pc, #76]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	0c5b      	lsrs	r3, r3, #17
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800366a:	4413      	add	r3, r2
 800366c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003670:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	4a0e      	ldr	r2, [pc, #56]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003676:	fb02 f203 	mul.w	r2, r2, r3
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
 8003682:	e004      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	4a0b      	ldr	r2, [pc, #44]	; (80036b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	623b      	str	r3, [r7, #32]
      break;
 8003692:	e002      	b.n	800369a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003696:	623b      	str	r3, [r7, #32]
      break;
 8003698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800369a:	6a3b      	ldr	r3, [r7, #32]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3728      	adds	r7, #40	; 0x28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc90      	pop	{r4, r7}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	080085c4 	.word	0x080085c4
 80036ac:	40021000 	.word	0x40021000
 80036b0:	007a1200 	.word	0x007a1200
 80036b4:	003d0900 	.word	0x003d0900

080036b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <RCC_Delay+0x34>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <RCC_Delay+0x38>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	0a5b      	lsrs	r3, r3, #9
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036d4:	bf00      	nop
  }
  while (Delay --);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1e5a      	subs	r2, r3, #1
 80036da:	60fa      	str	r2, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f9      	bne.n	80036d4 <RCC_Delay+0x1c>
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr
 80036ec:	20000000 	.word	0x20000000
 80036f0:	10624dd3 	.word	0x10624dd3

080036f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d07d      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003710:	2300      	movs	r3, #0
 8003712:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003714:	4b4f      	ldr	r3, [pc, #316]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003720:	4b4c      	ldr	r3, [pc, #304]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	4a4b      	ldr	r2, [pc, #300]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372a:	61d3      	str	r3, [r2, #28]
 800372c:	4b49      	ldr	r3, [pc, #292]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003738:	2301      	movs	r3, #1
 800373a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	4b46      	ldr	r3, [pc, #280]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d118      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003748:	4b43      	ldr	r3, [pc, #268]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a42      	ldr	r2, [pc, #264]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800374e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003752:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003754:	f7fd fc3c 	bl	8000fd0 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	e008      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375c:	f7fd fc38 	bl	8000fd0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e06d      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b3a      	ldr	r3, [pc, #232]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800377a:	4b36      	ldr	r3, [pc, #216]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003782:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d02e      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d027      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003798:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037a2:	4b2e      	ldr	r3, [pc, #184]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037a8:	4b2c      	ldr	r3, [pc, #176]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ae:	4a29      	ldr	r2, [pc, #164]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d014      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7fd fc07 	bl	8000fd0 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c4:	e00a      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c6:	f7fd fc03 	bl	8000fd0 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d901      	bls.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e036      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ee      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e8:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4917      	ldr	r1, [pc, #92]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d105      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003800:	4b14      	ldr	r3, [pc, #80]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	4a13      	ldr	r2, [pc, #76]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	490b      	ldr	r1, [pc, #44]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	4313      	orrs	r3, r2
 8003828:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	4904      	ldr	r1, [pc, #16]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003844:	4313      	orrs	r3, r2
 8003846:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	40007000 	.word	0x40007000
 800385c:	42420440 	.word	0x42420440

08003860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e076      	b.n	8003960 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	d108      	bne.n	800388c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003882:	d009      	beq.n	8003898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	61da      	str	r2, [r3, #28]
 800388a:	e005      	b.n	8003898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd fa8c 	bl	8000dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	ea42 0103 	orr.w	r1, r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	0c1a      	lsrs	r2, r3, #16
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f002 0204 	and.w	r2, r2, #4
 800393e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69da      	ldr	r2, [r3, #28]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800394e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af02      	add	r7, sp, #8
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003984:	d112      	bne.n	80039ac <HAL_SPI_Receive+0x44>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10e      	bne.n	80039ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2204      	movs	r2, #4
 8003992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003996:	88fa      	ldrh	r2, [r7, #6]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f8f1 	bl	8003b8a <HAL_SPI_TransmitReceive>
 80039a8:	4603      	mov	r3, r0
 80039aa:	e0ea      	b.n	8003b82 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_SPI_Receive+0x52>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e0e3      	b.n	8003b82 <HAL_SPI_Receive+0x21a>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039c2:	f7fd fb05 	bl	8000fd0 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d002      	beq.n	80039da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
 80039d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039d8:	e0ca      	b.n	8003b70 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HAL_SPI_Receive+0x7e>
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039ea:	e0c1      	b.n	8003b70 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2204      	movs	r2, #4
 80039f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	88fa      	ldrh	r2, [r7, #6]
 8003a04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	88fa      	ldrh	r2, [r7, #6]
 8003a0a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a32:	d10f      	bne.n	8003a54 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a52:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5e:	2b40      	cmp	r3, #64	; 0x40
 8003a60:	d007      	beq.n	8003a72 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a70:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d162      	bne.n	8003b40 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a7a:	e02e      	b.n	8003ada <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d115      	bne.n	8003ab6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f103 020c 	add.w	r2, r3, #12
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	7812      	ldrb	r2, [r2, #0]
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ab4:	e011      	b.n	8003ada <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab6:	f7fd fa8b 	bl	8000fd0 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d803      	bhi.n	8003ace <HAL_SPI_Receive+0x166>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d102      	bne.n	8003ad4 <HAL_SPI_Receive+0x16c>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ad8:	e04a      	b.n	8003b70 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1cb      	bne.n	8003a7c <HAL_SPI_Receive+0x114>
 8003ae4:	e031      	b.n	8003b4a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d113      	bne.n	8003b1c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	b292      	uxth	r2, r2
 8003b00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	1c9a      	adds	r2, r3, #2
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b1a:	e011      	b.n	8003b40 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b1c:	f7fd fa58 	bl	8000fd0 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d803      	bhi.n	8003b34 <HAL_SPI_Receive+0x1cc>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d102      	bne.n	8003b3a <HAL_SPI_Receive+0x1d2>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b3e:	e017      	b.n	8003b70 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1cd      	bne.n	8003ae6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	6839      	ldr	r1, [r7, #0]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fa46 	bl	8003fe0 <SPI_EndRxTransaction>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	75fb      	strb	r3, [r7, #23]
 8003b6c:	e000      	b.n	8003b70 <HAL_SPI_Receive+0x208>
  }

error :
 8003b6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b08c      	sub	sp, #48	; 0x30
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_SPI_TransmitReceive+0x26>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e18a      	b.n	8003ec6 <HAL_SPI_TransmitReceive+0x33c>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bb8:	f7fd fa0a 	bl	8000fd0 <HAL_GetTick>
 8003bbc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bce:	887b      	ldrh	r3, [r7, #2]
 8003bd0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d00f      	beq.n	8003bfa <HAL_SPI_TransmitReceive+0x70>
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be0:	d107      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d103      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x68>
 8003bea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d003      	beq.n	8003bfa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bf8:	e15b      	b.n	8003eb2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x82>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x82>
 8003c06:	887b      	ldrh	r3, [r7, #2]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d103      	bne.n	8003c14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c12:	e14e      	b.n	8003eb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d003      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2205      	movs	r2, #5
 8003c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	887a      	ldrh	r2, [r7, #2]
 8003c3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	887a      	ldrh	r2, [r7, #2]
 8003c4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	887a      	ldrh	r2, [r7, #2]
 8003c50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d007      	beq.n	8003c7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c84:	d178      	bne.n	8003d78 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_SPI_TransmitReceive+0x10a>
 8003c8e:	8b7b      	ldrh	r3, [r7, #26]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d166      	bne.n	8003d62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	881a      	ldrh	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	1c9a      	adds	r2, r3, #2
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cb8:	e053      	b.n	8003d62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d11b      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x176>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x176>
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d113      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	1c9a      	adds	r2, r3, #2
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d119      	bne.n	8003d42 <HAL_SPI_TransmitReceive+0x1b8>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d014      	beq.n	8003d42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	b292      	uxth	r2, r2
 8003d24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	1c9a      	adds	r2, r3, #2
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d42:	f7fd f945 	bl	8000fd0 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d807      	bhi.n	8003d62 <HAL_SPI_TransmitReceive+0x1d8>
 8003d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d003      	beq.n	8003d62 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d60:	e0a7      	b.n	8003eb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1a6      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x130>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1a1      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x130>
 8003d76:	e07c      	b.n	8003e72 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_SPI_TransmitReceive+0x1fc>
 8003d80:	8b7b      	ldrh	r3, [r7, #26]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d16b      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dac:	e057      	b.n	8003e5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d11c      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x26c>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d017      	beq.n	8003df6 <HAL_SPI_TransmitReceive+0x26c>
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d114      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	7812      	ldrb	r2, [r2, #0]
 8003dd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d119      	bne.n	8003e38 <HAL_SPI_TransmitReceive+0x2ae>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d014      	beq.n	8003e38 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e34:	2301      	movs	r3, #1
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e38:	f7fd f8ca 	bl	8000fd0 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d803      	bhi.n	8003e50 <HAL_SPI_TransmitReceive+0x2c6>
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d102      	bne.n	8003e56 <HAL_SPI_TransmitReceive+0x2cc>
 8003e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e5c:	e029      	b.n	8003eb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1a2      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x224>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d19d      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f904 	bl	8004084 <SPI_EndRxTxTransaction>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d006      	beq.n	8003e90 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e8e:	e010      	b.n	8003eb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10b      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	e000      	b.n	8003eb2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003eb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3730      	adds	r7, #48	; 0x30
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ee0:	f7fd f876 	bl	8000fd0 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	4413      	add	r3, r2
 8003eee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ef0:	f7fd f86e 	bl	8000fd0 <HAL_GetTick>
 8003ef4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	015b      	lsls	r3, r3, #5
 8003efc:	0d1b      	lsrs	r3, r3, #20
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	fb02 f303 	mul.w	r3, r2, r3
 8003f04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f06:	e054      	b.n	8003fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0e:	d050      	beq.n	8003fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f10:	f7fd f85e 	bl	8000fd0 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d902      	bls.n	8003f26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d13d      	bne.n	8003fa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f3e:	d111      	bne.n	8003f64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f48:	d004      	beq.n	8003f54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f52:	d107      	bne.n	8003f64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f6c:	d10f      	bne.n	8003f8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e017      	b.n	8003fd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	bf0c      	ite	eq
 8003fc2:	2301      	moveq	r3, #1
 8003fc4:	2300      	movne	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d19b      	bne.n	8003f08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000000 	.word	0x20000000

08003fe0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ff4:	d111      	bne.n	800401a <SPI_EndRxTransaction+0x3a>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ffe:	d004      	beq.n	800400a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004008:	d107      	bne.n	800401a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004018:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004022:	d117      	bne.n	8004054 <SPI_EndRxTransaction+0x74>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402c:	d112      	bne.n	8004054 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2200      	movs	r2, #0
 8004036:	2101      	movs	r1, #1
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f7ff ff49 	bl	8003ed0 <SPI_WaitFlagStateUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01a      	beq.n	800407a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	f043 0220 	orr.w	r2, r3, #32
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e013      	b.n	800407c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2200      	movs	r2, #0
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f7ff ff36 	bl	8003ed0 <SPI_WaitFlagStateUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e000      	b.n	800407c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7ff ff18 	bl	8003ed0 <SPI_WaitFlagStateUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	f043 0220 	orr.w	r2, r3, #32
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e000      	b.n	80040b8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040c0:	b084      	sub	sp, #16
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	f107 0014 	add.w	r0, r7, #20
 80040ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	b004      	add	sp, #16
 80040de:	4770      	bx	lr

080040e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004114:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004118:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	b29b      	uxth	r3, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	b29b      	uxth	r3, r3
 800412a:	4013      	ands	r3, r2
 800412c:	b29a      	uxth	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004158:	b084      	sub	sp, #16
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	f107 0014 	add.w	r0, r7, #20
 8004166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	b004      	add	sp, #16
 8004196:	4770      	bx	lr

08004198 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004198:	b480      	push	{r7}
 800419a:	b09b      	sub	sp, #108	; 0x6c
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80041ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	78db      	ldrb	r3, [r3, #3]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d81f      	bhi.n	800420a <USB_ActivateEndpoint+0x72>
 80041ca:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <USB_ActivateEndpoint+0x38>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041e1 	.word	0x080041e1
 80041d4:	080041fd 	.word	0x080041fd
 80041d8:	08004213 	.word	0x08004213
 80041dc:	080041ef 	.word	0x080041ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80041e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041ec:	e012      	b.n	8004214 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80041ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041f2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80041f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041fa:	e00b      	b.n	8004214 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004204:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004208:	e004      	b.n	8004214 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004210:	e000      	b.n	8004214 <USB_ActivateEndpoint+0x7c>
      break;
 8004212:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29b      	uxth	r3, r3
 8004244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424c:	b29a      	uxth	r2, r3
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	b29b      	uxth	r3, r3
 8004254:	4313      	orrs	r3, r2
 8004256:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	441a      	add	r2, r3
 8004264:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800426c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004278:	b29b      	uxth	r3, r3
 800427a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	7b1b      	ldrb	r3, [r3, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f040 8149 	bne.w	8004518 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	785b      	ldrb	r3, [r3, #1]
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8084 	beq.w	8004398 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429a:	b29b      	uxth	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	4413      	add	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	011a      	lsls	r2, r3, #4
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	88db      	ldrh	r3, [r3, #6]
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	81fb      	strh	r3, [r7, #14]
 80042d2:	89fb      	ldrh	r3, [r7, #14]
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01b      	beq.n	8004314 <USB_ActivateEndpoint+0x17c>
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f2:	81bb      	strh	r3, [r7, #12]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	441a      	add	r2, r3
 80042fe:	89bb      	ldrh	r3, [r7, #12]
 8004300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004310:	b29b      	uxth	r3, r3
 8004312:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	78db      	ldrb	r3, [r3, #3]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d020      	beq.n	800435e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004332:	813b      	strh	r3, [r7, #8]
 8004334:	893b      	ldrh	r3, [r7, #8]
 8004336:	f083 0320 	eor.w	r3, r3, #32
 800433a:	813b      	strh	r3, [r7, #8]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	441a      	add	r2, r3
 8004346:	893b      	ldrh	r3, [r7, #8]
 8004348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800434c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004358:	b29b      	uxth	r3, r3
 800435a:	8013      	strh	r3, [r2, #0]
 800435c:	e27f      	b.n	800485e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004374:	817b      	strh	r3, [r7, #10]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	441a      	add	r2, r3
 8004380:	897b      	ldrh	r3, [r7, #10]
 8004382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800438a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004392:	b29b      	uxth	r3, r3
 8004394:	8013      	strh	r3, [r2, #0]
 8004396:	e262      	b.n	800485e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	4413      	add	r3, r2
 80043aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	011a      	lsls	r2, r3, #4
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	88db      	ldrh	r3, [r3, #6]
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	4413      	add	r3, r2
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	011a      	lsls	r2, r3, #4
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	4413      	add	r3, r2
 80043ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d112      	bne.n	800441e <USB_ActivateEndpoint+0x286>
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004402:	b29a      	uxth	r2, r3
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	801a      	strh	r2, [r3, #0]
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	b29b      	uxth	r3, r3
 800440e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004416:	b29a      	uxth	r2, r3
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	801a      	strh	r2, [r3, #0]
 800441c:	e02f      	b.n	800447e <USB_ActivateEndpoint+0x2e6>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b3e      	cmp	r3, #62	; 0x3e
 8004424:	d813      	bhi.n	800444e <USB_ActivateEndpoint+0x2b6>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	663b      	str	r3, [r7, #96]	; 0x60
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <USB_ActivateEndpoint+0x2a8>
 800443a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800443c:	3301      	adds	r3, #1
 800443e:	663b      	str	r3, [r7, #96]	; 0x60
 8004440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004442:	b29b      	uxth	r3, r3
 8004444:	029b      	lsls	r3, r3, #10
 8004446:	b29a      	uxth	r2, r3
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	801a      	strh	r2, [r3, #0]
 800444c:	e017      	b.n	800447e <USB_ActivateEndpoint+0x2e6>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	663b      	str	r3, [r7, #96]	; 0x60
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	2b00      	cmp	r3, #0
 8004460:	d102      	bne.n	8004468 <USB_ActivateEndpoint+0x2d0>
 8004462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004464:	3b01      	subs	r3, #1
 8004466:	663b      	str	r3, [r7, #96]	; 0x60
 8004468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800446a:	b29b      	uxth	r3, r3
 800446c:	029b      	lsls	r3, r3, #10
 800446e:	b29b      	uxth	r3, r3
 8004470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004478:	b29a      	uxth	r2, r3
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	83fb      	strh	r3, [r7, #30]
 800448c:	8bfb      	ldrh	r3, [r7, #30]
 800448e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01b      	beq.n	80044ce <USB_ActivateEndpoint+0x336>
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ac:	83bb      	strh	r3, [r7, #28]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	441a      	add	r2, r3
 80044b8:	8bbb      	ldrh	r3, [r7, #28]
 80044ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e4:	837b      	strh	r3, [r7, #26]
 80044e6:	8b7b      	ldrh	r3, [r7, #26]
 80044e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044ec:	837b      	strh	r3, [r7, #26]
 80044ee:	8b7b      	ldrh	r3, [r7, #26]
 80044f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044f4:	837b      	strh	r3, [r7, #26]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	441a      	add	r2, r3
 8004500:	8b7b      	ldrh	r3, [r7, #26]
 8004502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800450e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004512:	b29b      	uxth	r3, r3
 8004514:	8013      	strh	r3, [r2, #0]
 8004516:	e1a2      	b.n	800485e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	441a      	add	r2, r3
 800453c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004548:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800454c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004550:	b29b      	uxth	r3, r3
 8004552:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	65bb      	str	r3, [r7, #88]	; 0x58
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800455e:	b29b      	uxth	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004564:	4413      	add	r3, r2
 8004566:	65bb      	str	r3, [r7, #88]	; 0x58
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	011a      	lsls	r2, r3, #4
 800456e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004570:	4413      	add	r3, r2
 8004572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004576:	657b      	str	r3, [r7, #84]	; 0x54
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	891b      	ldrh	r3, [r3, #8]
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	b29b      	uxth	r3, r3
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004586:	801a      	strh	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	653b      	str	r3, [r7, #80]	; 0x50
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004598:	4413      	add	r3, r2
 800459a:	653b      	str	r3, [r7, #80]	; 0x50
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	011a      	lsls	r2, r3, #4
 80045a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80045aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	895b      	ldrh	r3, [r3, #10]
 80045b0:	085b      	lsrs	r3, r3, #1
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	785b      	ldrb	r3, [r3, #1]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f040 8091 	bne.w	80046e8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80045d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80045d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d01b      	beq.n	8004616 <USB_ActivateEndpoint+0x47e>
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	441a      	add	r2, r3
 8004600:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800460e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004612:	b29b      	uxth	r3, r3
 8004614:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	873b      	strh	r3, [r7, #56]	; 0x38
 8004624:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01b      	beq.n	8004666 <USB_ActivateEndpoint+0x4ce>
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004644:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	441a      	add	r2, r3
 8004650:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004662:	b29b      	uxth	r3, r3
 8004664:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800467e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004680:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004684:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004686:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004688:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800468c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	441a      	add	r2, r3
 8004698:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800469a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c4:	867b      	strh	r3, [r7, #50]	; 0x32
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	441a      	add	r2, r3
 80046d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80046d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	8013      	strh	r3, [r2, #0]
 80046e6:	e0ba      	b.n	800485e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80046f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01d      	beq.n	8004740 <USB_ActivateEndpoint+0x5a8>
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	441a      	add	r2, r3
 8004728:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800472c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004750:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01d      	beq.n	8004798 <USB_ActivateEndpoint+0x600>
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	441a      	add	r2, r3
 8004780:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800478c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004790:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004794:	b29b      	uxth	r3, r3
 8004796:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	78db      	ldrb	r3, [r3, #3]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d024      	beq.n	80047ea <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80047ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047be:	f083 0320 	eor.w	r3, r3, #32
 80047c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	441a      	add	r2, r3
 80047d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	8013      	strh	r3, [r2, #0]
 80047e8:	e01d      	b.n	8004826 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004800:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004822:	b29b      	uxth	r3, r3
 8004824:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	441a      	add	r2, r3
 8004848:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800484a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485a:	b29b      	uxth	r3, r3
 800485c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800485e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004862:	4618      	mov	r0, r3
 8004864:	376c      	adds	r7, #108	; 0x6c
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800486c:	b480      	push	{r7}
 800486e:	b08d      	sub	sp, #52	; 0x34
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	7b1b      	ldrb	r3, [r3, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 808e 	bne.w	800499c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	785b      	ldrb	r3, [r3, #1]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d044      	beq.n	8004912 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	81bb      	strh	r3, [r7, #12]
 8004896:	89bb      	ldrh	r3, [r7, #12]
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01b      	beq.n	80048d8 <USB_DeactivateEndpoint+0x6c>
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	817b      	strh	r3, [r7, #10]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	441a      	add	r2, r3
 80048c2:	897b      	ldrh	r3, [r7, #10]
 80048c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ee:	813b      	strh	r3, [r7, #8]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	441a      	add	r2, r3
 80048fa:	893b      	ldrh	r3, [r7, #8]
 80048fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490c:	b29b      	uxth	r3, r3
 800490e:	8013      	strh	r3, [r2, #0]
 8004910:	e192      	b.n	8004c38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	827b      	strh	r3, [r7, #18]
 8004920:	8a7b      	ldrh	r3, [r7, #18]
 8004922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01b      	beq.n	8004962 <USB_DeactivateEndpoint+0xf6>
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004940:	823b      	strh	r3, [r7, #16]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	8a3b      	ldrh	r3, [r7, #16]
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004978:	81fb      	strh	r3, [r7, #14]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	441a      	add	r2, r3
 8004984:	89fb      	ldrh	r3, [r7, #14]
 8004986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004996:	b29b      	uxth	r3, r3
 8004998:	8013      	strh	r3, [r2, #0]
 800499a:	e14d      	b.n	8004c38 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	785b      	ldrb	r3, [r3, #1]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f040 80a5 	bne.w	8004af0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	843b      	strh	r3, [r7, #32]
 80049b4:	8c3b      	ldrh	r3, [r7, #32]
 80049b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01b      	beq.n	80049f6 <USB_DeactivateEndpoint+0x18a>
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d4:	83fb      	strh	r3, [r7, #30]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	8bfb      	ldrh	r3, [r7, #30]
 80049e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	83bb      	strh	r3, [r7, #28]
 8004a04:	8bbb      	ldrh	r3, [r7, #28]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d01b      	beq.n	8004a46 <USB_DeactivateEndpoint+0x1da>
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a24:	837b      	strh	r3, [r7, #26]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	8b7b      	ldrh	r3, [r7, #26]
 8004a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5c:	833b      	strh	r3, [r7, #24]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	441a      	add	r2, r3
 8004a68:	8b3b      	ldrh	r3, [r7, #24]
 8004a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a94:	82fb      	strh	r3, [r7, #22]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	8afb      	ldrh	r3, [r7, #22]
 8004aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004acc:	82bb      	strh	r3, [r7, #20]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	8abb      	ldrh	r3, [r7, #20]
 8004ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	8013      	strh	r3, [r2, #0]
 8004aee:	e0a3      	b.n	8004c38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004afe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01b      	beq.n	8004b40 <USB_DeactivateEndpoint+0x2d4>
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004b4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <USB_DeactivateEndpoint+0x324>
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bde:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	441a      	add	r2, r3
 8004bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	441a      	add	r2, r3
 8004c22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3734      	adds	r7, #52	; 0x34
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b0cc      	sub	sp, #304	; 0x130
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	6018      	str	r0, [r3, #0]
 8004c4e:	463b      	mov	r3, r7
 8004c50:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c52:	463b      	mov	r3, r7
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	785b      	ldrb	r3, [r3, #1]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	f040 872e 	bne.w	8005aba <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c5e:	463b      	mov	r3, r7
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	463b      	mov	r3, r7
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d905      	bls.n	8004c7a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004c6e:	463b      	mov	r3, r7
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c78:	e004      	b.n	8004c84 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004c7a:	463b      	mov	r3, r7
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c84:	463b      	mov	r3, r7
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	7b1b      	ldrb	r3, [r3, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d134      	bne.n	8004cf8 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c8e:	463b      	mov	r3, r7
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6959      	ldr	r1, [r3, #20]
 8004c94:	463b      	mov	r3, r7
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	88da      	ldrh	r2, [r3, #6]
 8004c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	1d38      	adds	r0, r7, #4
 8004ca2:	6800      	ldr	r0, [r0, #0]
 8004ca4:	f001 fc03 	bl	80064ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ca8:	f107 0310 	add.w	r3, r7, #16
 8004cac:	1d3a      	adds	r2, r7, #4
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	1d3b      	adds	r3, r7, #4
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	f107 0310 	add.w	r3, r7, #16
 8004cc2:	f107 0210 	add.w	r2, r7, #16
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	440a      	add	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	463b      	mov	r3, r7
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	011a      	lsls	r2, r3, #4
 8004cd4:	f107 0310 	add.w	r3, r7, #16
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ce0:	f107 030c 	add.w	r3, r7, #12
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	f107 030c 	add.w	r3, r7, #12
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	f000 beac 	b.w	8005a50 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	78db      	ldrb	r3, [r3, #3]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	f040 838c 	bne.w	800541c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d04:	463b      	mov	r3, r7
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6a1a      	ldr	r2, [r3, #32]
 8004d0a:	463b      	mov	r3, r7
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	f240 8330 	bls.w	8005376 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d16:	1d3b      	adds	r3, r7, #4
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004d34:	1d3b      	adds	r3, r7, #4
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	463b      	mov	r3, r7
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d5a:	463b      	mov	r3, r7
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6a1a      	ldr	r2, [r3, #32]
 8004d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	463b      	mov	r3, r7
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d6c:	1d3b      	adds	r3, r7, #4
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	463b      	mov	r3, r7
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 819e 	beq.w	80050c4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d8c:	1d3a      	adds	r2, r7, #4
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	463b      	mov	r3, r7
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d17a      	bne.n	8004e92 <USB_EPStartXfer+0x24e>
 8004d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004da0:	1d3a      	adds	r2, r7, #4
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	4619      	mov	r1, r3
 8004db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004db6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	011a      	lsls	r2, r3, #4
 8004dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d11a      	bne.n	8004e18 <USB_EPStartXfer+0x1d4>
 8004de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	801a      	strh	r2, [r3, #0]
 8004dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	801a      	strh	r2, [r3, #0]
 8004e16:	e062      	b.n	8004ede <USB_EPStartXfer+0x29a>
 8004e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e1e:	d819      	bhi.n	8004e54 <USB_EPStartXfer+0x210>
 8004e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e24:	085b      	lsrs	r3, r3, #1
 8004e26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d004      	beq.n	8004e40 <USB_EPStartXfer+0x1fc>
 8004e36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	029b      	lsls	r3, r3, #10
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	801a      	strh	r2, [r3, #0]
 8004e52:	e044      	b.n	8004ede <USB_EPStartXfer+0x29a>
 8004e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d104      	bne.n	8004e74 <USB_EPStartXfer+0x230>
 8004e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	029b      	lsls	r3, r3, #10
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	e025      	b.n	8004ede <USB_EPStartXfer+0x29a>
 8004e92:	463b      	mov	r3, r7
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d120      	bne.n	8004ede <USB_EPStartXfer+0x29a>
 8004e9c:	1d3b      	adds	r3, r7, #4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004eac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	440a      	add	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	011a      	lsls	r2, r3, #4
 8004ebe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ede:	463b      	mov	r3, r7
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	895b      	ldrh	r3, [r3, #10]
 8004ee4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ee8:	463b      	mov	r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6959      	ldr	r1, [r3, #20]
 8004eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ef8:	1d38      	adds	r0, r7, #4
 8004efa:	6800      	ldr	r0, [r0, #0]
 8004efc:	f001 fad7 	bl	80064ae <USB_WritePMA>
            ep->xfer_buff += len;
 8004f00:	463b      	mov	r3, r7
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f0a:	441a      	add	r2, r3
 8004f0c:	463b      	mov	r3, r7
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f12:	463b      	mov	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a1a      	ldr	r2, [r3, #32]
 8004f18:	463b      	mov	r3, r7
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d909      	bls.n	8004f36 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8004f22:	463b      	mov	r3, r7
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6a1a      	ldr	r2, [r3, #32]
 8004f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f2c:	1ad2      	subs	r2, r2, r3
 8004f2e:	463b      	mov	r3, r7
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	621a      	str	r2, [r3, #32]
 8004f34:	e008      	b.n	8004f48 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f36:	463b      	mov	r3, r7
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004f40:	463b      	mov	r3, r7
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2200      	movs	r2, #0
 8004f46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f48:	463b      	mov	r3, r7
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	785b      	ldrb	r3, [r3, #1]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d17a      	bne.n	8005048 <USB_EPStartXfer+0x404>
 8004f52:	f107 0318 	add.w	r3, r7, #24
 8004f56:	1d3a      	adds	r2, r7, #4
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	1d3b      	adds	r3, r7, #4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	4619      	mov	r1, r3
 8004f68:	f107 0318 	add.w	r3, r7, #24
 8004f6c:	f107 0218 	add.w	r2, r7, #24
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	440a      	add	r2, r1
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	463b      	mov	r3, r7
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	011a      	lsls	r2, r3, #4
 8004f7e:	f107 0318 	add.w	r3, r7, #24
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4413      	add	r3, r2
 8004f86:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f8a:	f107 0314 	add.w	r3, r7, #20
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d11a      	bne.n	8004fce <USB_EPStartXfer+0x38a>
 8004f98:	f107 0314 	add.w	r3, r7, #20
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	f107 0314 	add.w	r3, r7, #20
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	f107 0314 	add.w	r3, r7, #20
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	801a      	strh	r2, [r3, #0]
 8004fcc:	e067      	b.n	800509e <USB_EPStartXfer+0x45a>
 8004fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd2:	2b3e      	cmp	r3, #62	; 0x3e
 8004fd4:	d819      	bhi.n	800500a <USB_EPStartXfer+0x3c6>
 8004fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fda:	085b      	lsrs	r3, r3, #1
 8004fdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d004      	beq.n	8004ff6 <USB_EPStartXfer+0x3b2>
 8004fec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ff6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	029b      	lsls	r3, r3, #10
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	f107 0314 	add.w	r3, r7, #20
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	801a      	strh	r2, [r3, #0]
 8005008:	e049      	b.n	800509e <USB_EPStartXfer+0x45a>
 800500a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005018:	f003 031f 	and.w	r3, r3, #31
 800501c:	2b00      	cmp	r3, #0
 800501e:	d104      	bne.n	800502a <USB_EPStartXfer+0x3e6>
 8005020:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005024:	3b01      	subs	r3, #1
 8005026:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800502a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800502e:	b29b      	uxth	r3, r3
 8005030:	029b      	lsls	r3, r3, #10
 8005032:	b29b      	uxth	r3, r3
 8005034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503c:	b29a      	uxth	r2, r3
 800503e:	f107 0314 	add.w	r3, r7, #20
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	801a      	strh	r2, [r3, #0]
 8005046:	e02a      	b.n	800509e <USB_EPStartXfer+0x45a>
 8005048:	463b      	mov	r3, r7
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	785b      	ldrb	r3, [r3, #1]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d125      	bne.n	800509e <USB_EPStartXfer+0x45a>
 8005052:	f107 0320 	add.w	r3, r7, #32
 8005056:	1d3a      	adds	r2, r7, #4
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	1d3b      	adds	r3, r7, #4
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005064:	b29b      	uxth	r3, r3
 8005066:	4619      	mov	r1, r3
 8005068:	f107 0320 	add.w	r3, r7, #32
 800506c:	f107 0220 	add.w	r2, r7, #32
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	440a      	add	r2, r1
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	463b      	mov	r3, r7
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	011a      	lsls	r2, r3, #4
 800507e:	f107 0320 	add.w	r3, r7, #32
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4413      	add	r3, r2
 8005086:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800508a:	f107 031c 	add.w	r3, r7, #28
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005094:	b29a      	uxth	r2, r3
 8005096:	f107 031c 	add.w	r3, r7, #28
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800509e:	463b      	mov	r3, r7
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	891b      	ldrh	r3, [r3, #8]
 80050a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050a8:	463b      	mov	r3, r7
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6959      	ldr	r1, [r3, #20]
 80050ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80050b8:	1d38      	adds	r0, r7, #4
 80050ba:	6800      	ldr	r0, [r0, #0]
 80050bc:	f001 f9f7 	bl	80064ae <USB_WritePMA>
 80050c0:	f000 bcc6 	b.w	8005a50 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050c4:	463b      	mov	r3, r7
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d164      	bne.n	8005198 <USB_EPStartXfer+0x554>
 80050ce:	1d3b      	adds	r3, r7, #4
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d4:	1d3b      	adds	r3, r7, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050dc:	b29b      	uxth	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e2:	4413      	add	r3, r2
 80050e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e6:	463b      	mov	r3, r7
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	011a      	lsls	r2, r3, #4
 80050ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f0:	4413      	add	r3, r2
 80050f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050f6:	647b      	str	r3, [r7, #68]	; 0x44
 80050f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d112      	bne.n	8005126 <USB_EPStartXfer+0x4e2>
 8005100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800510a:	b29a      	uxth	r2, r3
 800510c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	b29b      	uxth	r3, r3
 8005116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800511a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511e:	b29a      	uxth	r2, r3
 8005120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005122:	801a      	strh	r2, [r3, #0]
 8005124:	e057      	b.n	80051d6 <USB_EPStartXfer+0x592>
 8005126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512a:	2b3e      	cmp	r3, #62	; 0x3e
 800512c:	d817      	bhi.n	800515e <USB_EPStartXfer+0x51a>
 800512e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005132:	085b      	lsrs	r3, r3, #1
 8005134:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d004      	beq.n	800514e <USB_EPStartXfer+0x50a>
 8005144:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005148:	3301      	adds	r3, #1
 800514a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800514e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005152:	b29b      	uxth	r3, r3
 8005154:	029b      	lsls	r3, r3, #10
 8005156:	b29a      	uxth	r2, r3
 8005158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800515a:	801a      	strh	r2, [r3, #0]
 800515c:	e03b      	b.n	80051d6 <USB_EPStartXfer+0x592>
 800515e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <USB_EPStartXfer+0x53a>
 8005174:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005178:	3b01      	subs	r3, #1
 800517a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800517e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005182:	b29b      	uxth	r3, r3
 8005184:	029b      	lsls	r3, r3, #10
 8005186:	b29b      	uxth	r3, r3
 8005188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005190:	b29a      	uxth	r2, r3
 8005192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005194:	801a      	strh	r2, [r3, #0]
 8005196:	e01e      	b.n	80051d6 <USB_EPStartXfer+0x592>
 8005198:	463b      	mov	r3, r7
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	785b      	ldrb	r3, [r3, #1]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d119      	bne.n	80051d6 <USB_EPStartXfer+0x592>
 80051a2:	1d3b      	adds	r3, r7, #4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	653b      	str	r3, [r7, #80]	; 0x50
 80051a8:	1d3b      	adds	r3, r7, #4
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b6:	4413      	add	r3, r2
 80051b8:	653b      	str	r3, [r7, #80]	; 0x50
 80051ba:	463b      	mov	r3, r7
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	011a      	lsls	r2, r3, #4
 80051c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c4:	4413      	add	r3, r2
 80051c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051d6:	463b      	mov	r3, r7
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	891b      	ldrh	r3, [r3, #8]
 80051dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051e0:	463b      	mov	r3, r7
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6959      	ldr	r1, [r3, #20]
 80051e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051f0:	1d38      	adds	r0, r7, #4
 80051f2:	6800      	ldr	r0, [r0, #0]
 80051f4:	f001 f95b 	bl	80064ae <USB_WritePMA>
            ep->xfer_buff += len;
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695a      	ldr	r2, [r3, #20]
 80051fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005202:	441a      	add	r2, r3
 8005204:	463b      	mov	r3, r7
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800520a:	463b      	mov	r3, r7
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6a1a      	ldr	r2, [r3, #32]
 8005210:	463b      	mov	r3, r7
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	429a      	cmp	r2, r3
 8005218:	d909      	bls.n	800522e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800521a:	463b      	mov	r3, r7
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005224:	1ad2      	subs	r2, r2, r3
 8005226:	463b      	mov	r3, r7
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	621a      	str	r2, [r3, #32]
 800522c:	e008      	b.n	8005240 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800522e:	463b      	mov	r3, r7
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005238:	463b      	mov	r3, r7
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2200      	movs	r2, #0
 800523e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005240:	1d3b      	adds	r3, r7, #4
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	643b      	str	r3, [r7, #64]	; 0x40
 8005246:	463b      	mov	r3, r7
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	785b      	ldrb	r3, [r3, #1]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d164      	bne.n	800531a <USB_EPStartXfer+0x6d6>
 8005250:	1d3b      	adds	r3, r7, #4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	63bb      	str	r3, [r7, #56]	; 0x38
 8005256:	1d3b      	adds	r3, r7, #4
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800525e:	b29b      	uxth	r3, r3
 8005260:	461a      	mov	r2, r3
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	4413      	add	r3, r2
 8005266:	63bb      	str	r3, [r7, #56]	; 0x38
 8005268:	463b      	mov	r3, r7
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	011a      	lsls	r2, r3, #4
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	4413      	add	r3, r2
 8005274:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
 800527a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d112      	bne.n	80052a8 <USB_EPStartXfer+0x664>
 8005282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800528c:	b29a      	uxth	r2, r3
 800528e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005290:	801a      	strh	r2, [r3, #0]
 8005292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	e054      	b.n	8005352 <USB_EPStartXfer+0x70e>
 80052a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ac:	2b3e      	cmp	r3, #62	; 0x3e
 80052ae:	d817      	bhi.n	80052e0 <USB_EPStartXfer+0x69c>
 80052b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <USB_EPStartXfer+0x68c>
 80052c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052ca:	3301      	adds	r3, #1
 80052cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	029b      	lsls	r3, r3, #10
 80052d8:	b29a      	uxth	r2, r3
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	801a      	strh	r2, [r3, #0]
 80052de:	e038      	b.n	8005352 <USB_EPStartXfer+0x70e>
 80052e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ee:	f003 031f 	and.w	r3, r3, #31
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d104      	bne.n	8005300 <USB_EPStartXfer+0x6bc>
 80052f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052fa:	3b01      	subs	r3, #1
 80052fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005300:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005304:	b29b      	uxth	r3, r3
 8005306:	029b      	lsls	r3, r3, #10
 8005308:	b29b      	uxth	r3, r3
 800530a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005312:	b29a      	uxth	r2, r3
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e01b      	b.n	8005352 <USB_EPStartXfer+0x70e>
 800531a:	463b      	mov	r3, r7
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	785b      	ldrb	r3, [r3, #1]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d116      	bne.n	8005352 <USB_EPStartXfer+0x70e>
 8005324:	1d3b      	adds	r3, r7, #4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532c:	b29b      	uxth	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005332:	4413      	add	r3, r2
 8005334:	643b      	str	r3, [r7, #64]	; 0x40
 8005336:	463b      	mov	r3, r7
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	011a      	lsls	r2, r3, #4
 800533e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005340:	4413      	add	r3, r2
 8005342:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800534c:	b29a      	uxth	r2, r3
 800534e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005350:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005352:	463b      	mov	r3, r7
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	895b      	ldrh	r3, [r3, #10]
 8005358:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800535c:	463b      	mov	r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6959      	ldr	r1, [r3, #20]
 8005362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005366:	b29b      	uxth	r3, r3
 8005368:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800536c:	1d38      	adds	r0, r7, #4
 800536e:	6800      	ldr	r0, [r0, #0]
 8005370:	f001 f89d 	bl	80064ae <USB_WritePMA>
 8005374:	e36c      	b.n	8005a50 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005376:	463b      	mov	r3, r7
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005380:	1d3b      	adds	r3, r7, #4
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	463b      	mov	r3, r7
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800539e:	1d3b      	adds	r3, r7, #4
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	463b      	mov	r3, r7
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80053b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053c4:	1d3b      	adds	r3, r7, #4
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ca:	1d3b      	adds	r3, r7, #4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d8:	4413      	add	r3, r2
 80053da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053dc:	463b      	mov	r3, r7
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	011a      	lsls	r2, r3, #4
 80053e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e6:	4413      	add	r3, r2
 80053e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80053ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053f8:	463b      	mov	r3, r7
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	891b      	ldrh	r3, [r3, #8]
 80053fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005402:	463b      	mov	r3, r7
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6959      	ldr	r1, [r3, #20]
 8005408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800540c:	b29b      	uxth	r3, r3
 800540e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005412:	1d38      	adds	r0, r7, #4
 8005414:	6800      	ldr	r0, [r0, #0]
 8005416:	f001 f84a 	bl	80064ae <USB_WritePMA>
 800541a:	e319      	b.n	8005a50 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800541c:	1d3b      	adds	r3, r7, #4
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	463b      	mov	r3, r7
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	463b      	mov	r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	441a      	add	r2, r3
 8005448:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800544c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005454:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545c:	b29b      	uxth	r3, r3
 800545e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005460:	463b      	mov	r3, r7
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6a1a      	ldr	r2, [r3, #32]
 8005466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800546a:	1ad2      	subs	r2, r2, r3
 800546c:	463b      	mov	r3, r7
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005472:	1d3b      	adds	r3, r7, #4
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	463b      	mov	r3, r7
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 8162 	beq.w	8005752 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800548e:	1d3b      	adds	r3, r7, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005496:	463b      	mov	r3, r7
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d164      	bne.n	800556a <USB_EPStartXfer+0x926>
 80054a0:	1d3b      	adds	r3, r7, #4
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80054a6:	1d3b      	adds	r3, r7, #4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054b4:	4413      	add	r3, r2
 80054b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80054b8:	463b      	mov	r3, r7
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	011a      	lsls	r2, r3, #4
 80054c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c2:	4413      	add	r3, r2
 80054c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054c8:	677b      	str	r3, [r7, #116]	; 0x74
 80054ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d112      	bne.n	80054f8 <USB_EPStartXfer+0x8b4>
 80054d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054dc:	b29a      	uxth	r2, r3
 80054de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054e0:	801a      	strh	r2, [r3, #0]
 80054e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	e057      	b.n	80055a8 <USB_EPStartXfer+0x964>
 80054f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fc:	2b3e      	cmp	r3, #62	; 0x3e
 80054fe:	d817      	bhi.n	8005530 <USB_EPStartXfer+0x8ec>
 8005500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800550a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d004      	beq.n	8005520 <USB_EPStartXfer+0x8dc>
 8005516:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800551a:	3301      	adds	r3, #1
 800551c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005520:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005524:	b29b      	uxth	r3, r3
 8005526:	029b      	lsls	r3, r3, #10
 8005528:	b29a      	uxth	r2, r3
 800552a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800552c:	801a      	strh	r2, [r3, #0]
 800552e:	e03b      	b.n	80055a8 <USB_EPStartXfer+0x964>
 8005530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800553a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800553e:	f003 031f 	and.w	r3, r3, #31
 8005542:	2b00      	cmp	r3, #0
 8005544:	d104      	bne.n	8005550 <USB_EPStartXfer+0x90c>
 8005546:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800554a:	3b01      	subs	r3, #1
 800554c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005550:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005554:	b29b      	uxth	r3, r3
 8005556:	029b      	lsls	r3, r3, #10
 8005558:	b29b      	uxth	r3, r3
 800555a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800555e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005562:	b29a      	uxth	r2, r3
 8005564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005566:	801a      	strh	r2, [r3, #0]
 8005568:	e01e      	b.n	80055a8 <USB_EPStartXfer+0x964>
 800556a:	463b      	mov	r3, r7
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d119      	bne.n	80055a8 <USB_EPStartXfer+0x964>
 8005574:	1d3b      	adds	r3, r7, #4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557c:	b29b      	uxth	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005584:	4413      	add	r3, r2
 8005586:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800558a:	463b      	mov	r3, r7
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	011a      	lsls	r2, r3, #4
 8005592:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005596:	4413      	add	r3, r2
 8005598:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800559c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800559e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80055a8:	463b      	mov	r3, r7
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	895b      	ldrh	r3, [r3, #10]
 80055ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055b2:	463b      	mov	r3, r7
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6959      	ldr	r1, [r3, #20]
 80055b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055c2:	1d38      	adds	r0, r7, #4
 80055c4:	6800      	ldr	r0, [r0, #0]
 80055c6:	f000 ff72 	bl	80064ae <USB_WritePMA>
          ep->xfer_buff += len;
 80055ca:	463b      	mov	r3, r7
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695a      	ldr	r2, [r3, #20]
 80055d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d4:	441a      	add	r2, r3
 80055d6:	463b      	mov	r3, r7
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80055dc:	463b      	mov	r3, r7
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6a1a      	ldr	r2, [r3, #32]
 80055e2:	463b      	mov	r3, r7
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d909      	bls.n	8005600 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80055ec:	463b      	mov	r3, r7
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6a1a      	ldr	r2, [r3, #32]
 80055f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f6:	1ad2      	subs	r2, r2, r3
 80055f8:	463b      	mov	r3, r7
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	621a      	str	r2, [r3, #32]
 80055fe:	e008      	b.n	8005612 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005600:	463b      	mov	r3, r7
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800560a:	463b      	mov	r3, r7
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2200      	movs	r2, #0
 8005610:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 821a 	beq.w	8005a50 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800561c:	463b      	mov	r3, r7
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d164      	bne.n	80056f0 <USB_EPStartXfer+0xaac>
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	66bb      	str	r3, [r7, #104]	; 0x68
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005634:	b29b      	uxth	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800563a:	4413      	add	r3, r2
 800563c:	66bb      	str	r3, [r7, #104]	; 0x68
 800563e:	463b      	mov	r3, r7
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	011a      	lsls	r2, r3, #4
 8005646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005648:	4413      	add	r3, r2
 800564a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800564e:	667b      	str	r3, [r7, #100]	; 0x64
 8005650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d112      	bne.n	800567e <USB_EPStartXfer+0xa3a>
 8005658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005662:	b29a      	uxth	r2, r3
 8005664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005666:	801a      	strh	r2, [r3, #0]
 8005668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005676:	b29a      	uxth	r2, r3
 8005678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800567a:	801a      	strh	r2, [r3, #0]
 800567c:	e057      	b.n	800572e <USB_EPStartXfer+0xaea>
 800567e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005682:	2b3e      	cmp	r3, #62	; 0x3e
 8005684:	d817      	bhi.n	80056b6 <USB_EPStartXfer+0xa72>
 8005686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d004      	beq.n	80056a6 <USB_EPStartXfer+0xa62>
 800569c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a0:	3301      	adds	r3, #1
 80056a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80056a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	029b      	lsls	r3, r3, #10
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056b2:	801a      	strh	r2, [r3, #0]
 80056b4:	e03b      	b.n	800572e <USB_EPStartXfer+0xaea>
 80056b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80056c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d104      	bne.n	80056d6 <USB_EPStartXfer+0xa92>
 80056cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d0:	3b01      	subs	r3, #1
 80056d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056da:	b29b      	uxth	r3, r3
 80056dc:	029b      	lsls	r3, r3, #10
 80056de:	b29b      	uxth	r3, r3
 80056e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ec:	801a      	strh	r2, [r3, #0]
 80056ee:	e01e      	b.n	800572e <USB_EPStartXfer+0xaea>
 80056f0:	463b      	mov	r3, r7
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	785b      	ldrb	r3, [r3, #1]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d119      	bne.n	800572e <USB_EPStartXfer+0xaea>
 80056fa:	1d3b      	adds	r3, r7, #4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	673b      	str	r3, [r7, #112]	; 0x70
 8005700:	1d3b      	adds	r3, r7, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005708:	b29b      	uxth	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800570e:	4413      	add	r3, r2
 8005710:	673b      	str	r3, [r7, #112]	; 0x70
 8005712:	463b      	mov	r3, r7
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	011a      	lsls	r2, r3, #4
 800571a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800571c:	4413      	add	r3, r2
 800571e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005722:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005728:	b29a      	uxth	r2, r3
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800572e:	463b      	mov	r3, r7
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	891b      	ldrh	r3, [r3, #8]
 8005734:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005738:	463b      	mov	r3, r7
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6959      	ldr	r1, [r3, #20]
 800573e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005742:	b29b      	uxth	r3, r3
 8005744:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005748:	1d38      	adds	r0, r7, #4
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	f000 feaf 	bl	80064ae <USB_WritePMA>
 8005750:	e17e      	b.n	8005a50 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005752:	463b      	mov	r3, r7
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d16f      	bne.n	800583c <USB_EPStartXfer+0xbf8>
 800575c:	1d3b      	adds	r3, r7, #4
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005764:	1d3b      	adds	r3, r7, #4
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576c:	b29b      	uxth	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005774:	4413      	add	r3, r2
 8005776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800577a:	463b      	mov	r3, r7
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	011a      	lsls	r2, r3, #4
 8005782:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005786:	4413      	add	r3, r2
 8005788:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800578c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d116      	bne.n	80057c6 <USB_EPStartXfer+0xb82>
 8005798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057aa:	801a      	strh	r2, [r3, #0]
 80057ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057bc:	b29a      	uxth	r2, r3
 80057be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057c2:	801a      	strh	r2, [r3, #0]
 80057c4:	e05f      	b.n	8005886 <USB_EPStartXfer+0xc42>
 80057c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ca:	2b3e      	cmp	r3, #62	; 0x3e
 80057cc:	d818      	bhi.n	8005800 <USB_EPStartXfer+0xbbc>
 80057ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80057d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d004      	beq.n	80057ee <USB_EPStartXfer+0xbaa>
 80057e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057e8:	3301      	adds	r3, #1
 80057ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80057ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	029b      	lsls	r3, r3, #10
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057fc:	801a      	strh	r2, [r3, #0]
 80057fe:	e042      	b.n	8005886 <USB_EPStartXfer+0xc42>
 8005800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800580a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	2b00      	cmp	r3, #0
 8005814:	d104      	bne.n	8005820 <USB_EPStartXfer+0xbdc>
 8005816:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800581a:	3b01      	subs	r3, #1
 800581c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005820:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005824:	b29b      	uxth	r3, r3
 8005826:	029b      	lsls	r3, r3, #10
 8005828:	b29b      	uxth	r3, r3
 800582a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005832:	b29a      	uxth	r2, r3
 8005834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	e024      	b.n	8005886 <USB_EPStartXfer+0xc42>
 800583c:	463b      	mov	r3, r7
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d11f      	bne.n	8005886 <USB_EPStartXfer+0xc42>
 8005846:	1d3b      	adds	r3, r7, #4
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800584e:	1d3b      	adds	r3, r7, #4
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005856:	b29b      	uxth	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800585e:	4413      	add	r3, r2
 8005860:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005864:	463b      	mov	r3, r7
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	011a      	lsls	r2, r3, #4
 800586c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005870:	4413      	add	r3, r2
 8005872:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800587a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800587e:	b29a      	uxth	r2, r3
 8005880:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005884:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005886:	463b      	mov	r3, r7
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	891b      	ldrh	r3, [r3, #8]
 800588c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005890:	463b      	mov	r3, r7
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6959      	ldr	r1, [r3, #20]
 8005896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800589a:	b29b      	uxth	r3, r3
 800589c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058a0:	1d38      	adds	r0, r7, #4
 80058a2:	6800      	ldr	r0, [r0, #0]
 80058a4:	f000 fe03 	bl	80064ae <USB_WritePMA>
          ep->xfer_buff += len;
 80058a8:	463b      	mov	r3, r7
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695a      	ldr	r2, [r3, #20]
 80058ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b2:	441a      	add	r2, r3
 80058b4:	463b      	mov	r3, r7
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80058ba:	463b      	mov	r3, r7
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6a1a      	ldr	r2, [r3, #32]
 80058c0:	463b      	mov	r3, r7
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d909      	bls.n	80058de <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80058ca:	463b      	mov	r3, r7
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6a1a      	ldr	r2, [r3, #32]
 80058d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d4:	1ad2      	subs	r2, r2, r3
 80058d6:	463b      	mov	r3, r7
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	621a      	str	r2, [r3, #32]
 80058dc:	e008      	b.n	80058f0 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80058de:	463b      	mov	r3, r7
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80058e8:	463b      	mov	r3, r7
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2200      	movs	r2, #0
 80058ee:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80058f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 80ab 	beq.w	8005a50 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058fa:	1d3b      	adds	r3, r7, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005902:	463b      	mov	r3, r7
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d16f      	bne.n	80059ec <USB_EPStartXfer+0xda8>
 800590c:	1d3b      	adds	r3, r7, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005914:	1d3b      	adds	r3, r7, #4
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800591c:	b29b      	uxth	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005924:	4413      	add	r3, r2
 8005926:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800592a:	463b      	mov	r3, r7
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	011a      	lsls	r2, r3, #4
 8005932:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005936:	4413      	add	r3, r2
 8005938:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800593c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005944:	2b00      	cmp	r3, #0
 8005946:	d116      	bne.n	8005976 <USB_EPStartXfer+0xd32>
 8005948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005954:	b29a      	uxth	r2, r3
 8005956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800595a:	801a      	strh	r2, [r3, #0]
 800595c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596c:	b29a      	uxth	r2, r3
 800596e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	e05b      	b.n	8005a2e <USB_EPStartXfer+0xdea>
 8005976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800597a:	2b3e      	cmp	r3, #62	; 0x3e
 800597c:	d818      	bhi.n	80059b0 <USB_EPStartXfer+0xd6c>
 800597e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005982:	085b      	lsrs	r3, r3, #1
 8005984:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d004      	beq.n	800599e <USB_EPStartXfer+0xd5a>
 8005994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005998:	3301      	adds	r3, #1
 800599a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800599e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	029b      	lsls	r3, r3, #10
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059ac:	801a      	strh	r2, [r3, #0]
 80059ae:	e03e      	b.n	8005a2e <USB_EPStartXfer+0xdea>
 80059b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b4:	095b      	lsrs	r3, r3, #5
 80059b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d104      	bne.n	80059d0 <USB_EPStartXfer+0xd8c>
 80059c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ca:	3b01      	subs	r3, #1
 80059cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	029b      	lsls	r3, r3, #10
 80059d8:	b29b      	uxth	r3, r3
 80059da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059e8:	801a      	strh	r2, [r3, #0]
 80059ea:	e020      	b.n	8005a2e <USB_EPStartXfer+0xdea>
 80059ec:	463b      	mov	r3, r7
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d11b      	bne.n	8005a2e <USB_EPStartXfer+0xdea>
 80059f6:	1d3b      	adds	r3, r7, #4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a06:	4413      	add	r3, r2
 8005a08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	011a      	lsls	r2, r3, #4
 8005a14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a18:	4413      	add	r3, r2
 8005a1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a2e:	463b      	mov	r3, r7
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	895b      	ldrh	r3, [r3, #10]
 8005a34:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a38:	463b      	mov	r3, r7
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6959      	ldr	r1, [r3, #20]
 8005a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a48:	1d38      	adds	r0, r7, #4
 8005a4a:	6800      	ldr	r0, [r0, #0]
 8005a4c:	f000 fd2f 	bl	80064ae <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a50:	1d3b      	adds	r3, r7, #4
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	463b      	mov	r3, r7
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	f107 020a 	add.w	r2, r7, #10
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6e:	8013      	strh	r3, [r2, #0]
 8005a70:	f107 030a 	add.w	r3, r7, #10
 8005a74:	f107 020a 	add.w	r2, r7, #10
 8005a78:	8812      	ldrh	r2, [r2, #0]
 8005a7a:	f082 0210 	eor.w	r2, r2, #16
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	f107 030a 	add.w	r3, r7, #10
 8005a84:	f107 020a 	add.w	r2, r7, #10
 8005a88:	8812      	ldrh	r2, [r2, #0]
 8005a8a:	f082 0220 	eor.w	r2, r2, #32
 8005a8e:	801a      	strh	r2, [r3, #0]
 8005a90:	1d3b      	adds	r3, r7, #4
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	463b      	mov	r3, r7
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	441a      	add	r2, r3
 8005a9e:	f107 030a 	add.w	r3, r7, #10
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	8013      	strh	r3, [r2, #0]
 8005ab8:	e3b5      	b.n	8006226 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005aba:	463b      	mov	r3, r7
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	7b1b      	ldrb	r3, [r3, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f040 8090 	bne.w	8005be6 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699a      	ldr	r2, [r3, #24]
 8005acc:	463b      	mov	r3, r7
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d90e      	bls.n	8005af4 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aea:	1ad2      	subs	r2, r2, r3
 8005aec:	463b      	mov	r3, r7
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	619a      	str	r2, [r3, #24]
 8005af2:	e008      	b.n	8005b06 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005af4:	463b      	mov	r3, r7
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005afe:	463b      	mov	r3, r7
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2200      	movs	r2, #0
 8005b04:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b06:	1d3b      	adds	r3, r7, #4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b0e:	1d3b      	adds	r3, r7, #4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b1e:	4413      	add	r3, r2
 8005b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b24:	463b      	mov	r3, r7
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	011a      	lsls	r2, r3, #4
 8005b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b30:	4413      	add	r3, r2
 8005b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d116      	bne.n	8005b70 <USB_EPStartXfer+0xf2c>
 8005b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b6c:	801a      	strh	r2, [r3, #0]
 8005b6e:	e32c      	b.n	80061ca <USB_EPStartXfer+0x1586>
 8005b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b74:	2b3e      	cmp	r3, #62	; 0x3e
 8005b76:	d818      	bhi.n	8005baa <USB_EPStartXfer+0xf66>
 8005b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7c:	085b      	lsrs	r3, r3, #1
 8005b7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <USB_EPStartXfer+0xf54>
 8005b8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b92:	3301      	adds	r3, #1
 8005b94:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005b98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	029b      	lsls	r3, r3, #10
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	e30f      	b.n	80061ca <USB_EPStartXfer+0x1586>
 8005baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <USB_EPStartXfer+0xf86>
 8005bc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005bca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	e2f1      	b.n	80061ca <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005be6:	463b      	mov	r3, r7
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	78db      	ldrb	r3, [r3, #3]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	f040 818f 	bne.w	8005f10 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d175      	bne.n	8005ce8 <USB_EPStartXfer+0x10a4>
 8005bfc:	1d3b      	adds	r3, r7, #4
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c04:	1d3b      	adds	r3, r7, #4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c14:	4413      	add	r3, r2
 8005c16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	011a      	lsls	r2, r3, #4
 8005c22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c26:	4413      	add	r3, r2
 8005c28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c30:	463b      	mov	r3, r7
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d116      	bne.n	8005c68 <USB_EPStartXfer+0x1024>
 8005c3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	e065      	b.n	8005d34 <USB_EPStartXfer+0x10f0>
 8005c68:	463b      	mov	r3, r7
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c70:	d81a      	bhi.n	8005ca8 <USB_EPStartXfer+0x1064>
 8005c72:	463b      	mov	r3, r7
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	085b      	lsrs	r3, r3, #1
 8005c7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c7e:	463b      	mov	r3, r7
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <USB_EPStartXfer+0x1052>
 8005c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c90:	3301      	adds	r3, #1
 8005c92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	029b      	lsls	r3, r3, #10
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	e045      	b.n	8005d34 <USB_EPStartXfer+0x10f0>
 8005ca8:	463b      	mov	r3, r7
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 031f 	and.w	r3, r3, #31
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d104      	bne.n	8005ccc <USB_EPStartXfer+0x1088>
 8005cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	029b      	lsls	r3, r3, #10
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ce4:	801a      	strh	r2, [r3, #0]
 8005ce6:	e025      	b.n	8005d34 <USB_EPStartXfer+0x10f0>
 8005ce8:	463b      	mov	r3, r7
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d120      	bne.n	8005d34 <USB_EPStartXfer+0x10f0>
 8005cf2:	1d3b      	adds	r3, r7, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005cfa:	1d3b      	adds	r3, r7, #4
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d10:	463b      	mov	r3, r7
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	011a      	lsls	r2, r3, #4
 8005d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d26:	463b      	mov	r3, r7
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	1d3b      	adds	r3, r7, #4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d175      	bne.n	8005e32 <USB_EPStartXfer+0x11ee>
 8005d46:	1d3b      	adds	r3, r7, #4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d4e:	1d3b      	adds	r3, r7, #4
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d5e:	4413      	add	r3, r2
 8005d60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d64:	463b      	mov	r3, r7
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	011a      	lsls	r2, r3, #4
 8005d6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d70:	4413      	add	r3, r2
 8005d72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d7a:	463b      	mov	r3, r7
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d116      	bne.n	8005db2 <USB_EPStartXfer+0x116e>
 8005d84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	e061      	b.n	8005e76 <USB_EPStartXfer+0x1232>
 8005db2:	463b      	mov	r3, r7
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	2b3e      	cmp	r3, #62	; 0x3e
 8005dba:	d81a      	bhi.n	8005df2 <USB_EPStartXfer+0x11ae>
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dc8:	463b      	mov	r3, r7
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d004      	beq.n	8005de0 <USB_EPStartXfer+0x119c>
 8005dd6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005dda:	3301      	adds	r3, #1
 8005ddc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005de0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	029b      	lsls	r3, r3, #10
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	e041      	b.n	8005e76 <USB_EPStartXfer+0x1232>
 8005df2:	463b      	mov	r3, r7
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dfe:	463b      	mov	r3, r7
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f003 031f 	and.w	r3, r3, #31
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d104      	bne.n	8005e16 <USB_EPStartXfer+0x11d2>
 8005e0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e10:	3b01      	subs	r3, #1
 8005e12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	029b      	lsls	r3, r3, #10
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e2e:	801a      	strh	r2, [r3, #0]
 8005e30:	e021      	b.n	8005e76 <USB_EPStartXfer+0x1232>
 8005e32:	463b      	mov	r3, r7
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d11c      	bne.n	8005e76 <USB_EPStartXfer+0x1232>
 8005e3c:	1d3b      	adds	r3, r7, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e52:	463b      	mov	r3, r7
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	011a      	lsls	r2, r3, #4
 8005e5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e5e:	4413      	add	r3, r2
 8005e60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e68:	463b      	mov	r3, r7
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e74:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e76:	463b      	mov	r3, r7
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 81a4 	beq.w	80061ca <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e82:	1d3b      	adds	r3, r7, #4
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	463b      	mov	r3, r7
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e96:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <USB_EPStartXfer+0x126a>
 8005ea2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10d      	bne.n	8005eca <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005eae:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f040 8187 	bne.w	80061ca <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ebc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f040 8180 	bne.w	80061ca <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005eca:	1d3b      	adds	r3, r7, #4
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	463b      	mov	r3, r7
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005ee8:	1d3b      	adds	r3, r7, #4
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	463b      	mov	r3, r7
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	441a      	add	r2, r3
 8005ef6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	8013      	strh	r3, [r2, #0]
 8005f0e:	e15c      	b.n	80061ca <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f10:	463b      	mov	r3, r7
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	78db      	ldrb	r3, [r3, #3]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	f040 8155 	bne.w	80061c6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699a      	ldr	r2, [r3, #24]
 8005f22:	463b      	mov	r3, r7
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d90e      	bls.n	8005f4a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005f36:	463b      	mov	r3, r7
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699a      	ldr	r2, [r3, #24]
 8005f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f40:	1ad2      	subs	r2, r2, r3
 8005f42:	463b      	mov	r3, r7
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	619a      	str	r2, [r3, #24]
 8005f48:	e008      	b.n	8005f5c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8005f4a:	463b      	mov	r3, r7
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005f54:	463b      	mov	r3, r7
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d16f      	bne.n	8006046 <USB_EPStartXfer+0x1402>
 8005f66:	1d3b      	adds	r3, r7, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f6e:	1d3b      	adds	r3, r7, #4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f7e:	4413      	add	r3, r2
 8005f80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f84:	463b      	mov	r3, r7
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	011a      	lsls	r2, r3, #4
 8005f8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f90:	4413      	add	r3, r2
 8005f92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d116      	bne.n	8005fd0 <USB_EPStartXfer+0x138c>
 8005fa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fb4:	801a      	strh	r2, [r3, #0]
 8005fb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	e05f      	b.n	8006090 <USB_EPStartXfer+0x144c>
 8005fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fd6:	d818      	bhi.n	800600a <USB_EPStartXfer+0x13c6>
 8005fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fdc:	085b      	lsrs	r3, r3, #1
 8005fde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <USB_EPStartXfer+0x13b4>
 8005fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	029b      	lsls	r3, r3, #10
 8006000:	b29a      	uxth	r2, r3
 8006002:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	e042      	b.n	8006090 <USB_EPStartXfer+0x144c>
 800600a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006018:	f003 031f 	and.w	r3, r3, #31
 800601c:	2b00      	cmp	r3, #0
 800601e:	d104      	bne.n	800602a <USB_EPStartXfer+0x13e6>
 8006020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006024:	3b01      	subs	r3, #1
 8006026:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800602a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800602e:	b29b      	uxth	r3, r3
 8006030:	029b      	lsls	r3, r3, #10
 8006032:	b29b      	uxth	r3, r3
 8006034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603c:	b29a      	uxth	r2, r3
 800603e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006042:	801a      	strh	r2, [r3, #0]
 8006044:	e024      	b.n	8006090 <USB_EPStartXfer+0x144c>
 8006046:	463b      	mov	r3, r7
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d11f      	bne.n	8006090 <USB_EPStartXfer+0x144c>
 8006050:	1d3b      	adds	r3, r7, #4
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006058:	1d3b      	adds	r3, r7, #4
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006060:	b29b      	uxth	r3, r3
 8006062:	461a      	mov	r2, r3
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	4413      	add	r3, r2
 800606a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800606e:	463b      	mov	r3, r7
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	011a      	lsls	r2, r3, #4
 8006076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607a:	4413      	add	r3, r2
 800607c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006080:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006088:	b29a      	uxth	r2, r3
 800608a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800608e:	801a      	strh	r2, [r3, #0]
 8006090:	1d3b      	adds	r3, r7, #4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006098:	463b      	mov	r3, r7
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d16f      	bne.n	8006182 <USB_EPStartXfer+0x153e>
 80060a2:	1d3b      	adds	r3, r7, #4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060aa:	1d3b      	adds	r3, r7, #4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	461a      	mov	r2, r3
 80060b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ba:	4413      	add	r3, r2
 80060bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060c0:	463b      	mov	r3, r7
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	011a      	lsls	r2, r3, #4
 80060c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060cc:	4413      	add	r3, r2
 80060ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d116      	bne.n	800610c <USB_EPStartXfer+0x14c8>
 80060de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f0:	801a      	strh	r2, [r3, #0]
 80060f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006102:	b29a      	uxth	r2, r3
 8006104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006108:	801a      	strh	r2, [r3, #0]
 800610a:	e05e      	b.n	80061ca <USB_EPStartXfer+0x1586>
 800610c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006110:	2b3e      	cmp	r3, #62	; 0x3e
 8006112:	d818      	bhi.n	8006146 <USB_EPStartXfer+0x1502>
 8006114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006118:	085b      	lsrs	r3, r3, #1
 800611a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800611e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <USB_EPStartXfer+0x14f0>
 800612a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800612e:	3301      	adds	r3, #1
 8006130:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006134:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006138:	b29b      	uxth	r3, r3
 800613a:	029b      	lsls	r3, r3, #10
 800613c:	b29a      	uxth	r2, r3
 800613e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006142:	801a      	strh	r2, [r3, #0]
 8006144:	e041      	b.n	80061ca <USB_EPStartXfer+0x1586>
 8006146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2b00      	cmp	r3, #0
 800615a:	d104      	bne.n	8006166 <USB_EPStartXfer+0x1522>
 800615c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006160:	3b01      	subs	r3, #1
 8006162:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800616a:	b29b      	uxth	r3, r3
 800616c:	029b      	lsls	r3, r3, #10
 800616e:	b29b      	uxth	r3, r3
 8006170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006178:	b29a      	uxth	r2, r3
 800617a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e023      	b.n	80061ca <USB_EPStartXfer+0x1586>
 8006182:	463b      	mov	r3, r7
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d11e      	bne.n	80061ca <USB_EPStartXfer+0x1586>
 800618c:	1d3b      	adds	r3, r7, #4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006194:	b29b      	uxth	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619c:	4413      	add	r3, r2
 800619e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061a2:	463b      	mov	r3, r7
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	011a      	lsls	r2, r3, #4
 80061aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ae:	4413      	add	r3, r2
 80061b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061bc:	b29a      	uxth	r2, r3
 80061be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	e001      	b.n	80061ca <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e02e      	b.n	8006228 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061ca:	1d3b      	adds	r3, r7, #4
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	463b      	mov	r3, r7
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80061e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80061ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061f0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80061f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80061f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061fc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006200:	1d3b      	adds	r3, r7, #4
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	463b      	mov	r3, r7
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	441a      	add	r2, r3
 800620e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006222:	b29b      	uxth	r3, r3
 8006224:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006232:	b480      	push	{r7}
 8006234:	b085      	sub	sp, #20
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	785b      	ldrb	r3, [r3, #1]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d020      	beq.n	8006286 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800625a:	81bb      	strh	r3, [r7, #12]
 800625c:	89bb      	ldrh	r3, [r7, #12]
 800625e:	f083 0310 	eor.w	r3, r3, #16
 8006262:	81bb      	strh	r3, [r7, #12]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	441a      	add	r2, r3
 800626e:	89bb      	ldrh	r3, [r7, #12]
 8006270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006280:	b29b      	uxth	r3, r3
 8006282:	8013      	strh	r3, [r2, #0]
 8006284:	e01f      	b.n	80062c6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629c:	81fb      	strh	r3, [r7, #14]
 800629e:	89fb      	ldrh	r3, [r7, #14]
 80062a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062a4:	81fb      	strh	r3, [r7, #14]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	441a      	add	r2, r3
 80062b0:	89fb      	ldrh	r3, [r7, #14]
 80062b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr

080062d2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b087      	sub	sp, #28
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	7b1b      	ldrb	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f040 809d 	bne.w	8006420 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	785b      	ldrb	r3, [r3, #1]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d04c      	beq.n	8006388 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	823b      	strh	r3, [r7, #16]
 80062fc:	8a3b      	ldrh	r3, [r7, #16]
 80062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01b      	beq.n	800633e <USB_EPClearStall+0x6c>
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631c:	81fb      	strh	r3, [r7, #14]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	441a      	add	r2, r3
 8006328:	89fb      	ldrh	r3, [r7, #14]
 800632a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006336:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800633a:	b29b      	uxth	r3, r3
 800633c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	78db      	ldrb	r3, [r3, #3]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d06c      	beq.n	8006420 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	b29b      	uxth	r3, r3
 8006354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800635c:	81bb      	strh	r3, [r7, #12]
 800635e:	89bb      	ldrh	r3, [r7, #12]
 8006360:	f083 0320 	eor.w	r3, r3, #32
 8006364:	81bb      	strh	r3, [r7, #12]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	441a      	add	r2, r3
 8006370:	89bb      	ldrh	r3, [r7, #12]
 8006372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800637e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006382:	b29b      	uxth	r3, r3
 8006384:	8013      	strh	r3, [r2, #0]
 8006386:	e04b      	b.n	8006420 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	82fb      	strh	r3, [r7, #22]
 8006396:	8afb      	ldrh	r3, [r7, #22]
 8006398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01b      	beq.n	80063d8 <USB_EPClearStall+0x106>
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	82bb      	strh	r3, [r7, #20]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	8abb      	ldrh	r3, [r7, #20]
 80063c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ee:	827b      	strh	r3, [r7, #18]
 80063f0:	8a7b      	ldrh	r3, [r7, #18]
 80063f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063f6:	827b      	strh	r3, [r7, #18]
 80063f8:	8a7b      	ldrh	r3, [r7, #18]
 80063fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063fe:	827b      	strh	r3, [r7, #18]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	441a      	add	r2, r3
 800640a:	8a7b      	ldrh	r3, [r7, #18]
 800640c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641c:	b29b      	uxth	r3, r3
 800641e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	bc80      	pop	{r7}
 800642a:	4770      	bx	lr

0800642c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d103      	bne.n	8006446 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2280      	movs	r2, #128	; 0x80
 8006442:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr

08006452 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	bc80      	pop	{r7}
 8006464:	4770      	bx	lr

08006466 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr

0800647a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006488:	b29b      	uxth	r3, r3
 800648a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800648c:	68fb      	ldr	r3, [r7, #12]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr

08006498 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr

080064ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b08d      	sub	sp, #52	; 0x34
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	4611      	mov	r1, r2
 80064ba:	461a      	mov	r2, r3
 80064bc:	460b      	mov	r3, r1
 80064be:	80fb      	strh	r3, [r7, #6]
 80064c0:	4613      	mov	r3, r2
 80064c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80064c4:	88bb      	ldrh	r3, [r7, #4]
 80064c6:	3301      	adds	r3, #1
 80064c8:	085b      	lsrs	r3, r3, #1
 80064ca:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064d4:	88fb      	ldrh	r3, [r7, #6]
 80064d6:	005a      	lsls	r2, r3, #1
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064e6:	e01e      	b.n	8006526 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	3301      	adds	r3, #1
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	021b      	lsls	r3, r3, #8
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	461a      	mov	r2, r3
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	b29a      	uxth	r2, r3
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	3302      	adds	r3, #2
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	3302      	adds	r3, #2
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	3301      	adds	r3, #1
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006522:	3b01      	subs	r3, #1
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1dd      	bne.n	80064e8 <USB_WritePMA+0x3a>
  }
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	3734      	adds	r7, #52	; 0x34
 8006532:	46bd      	mov	sp, r7
 8006534:	bc80      	pop	{r7}
 8006536:	4770      	bx	lr

08006538 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006538:	b480      	push	{r7}
 800653a:	b08b      	sub	sp, #44	; 0x2c
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	4611      	mov	r1, r2
 8006544:	461a      	mov	r2, r3
 8006546:	460b      	mov	r3, r1
 8006548:	80fb      	strh	r3, [r7, #6]
 800654a:	4613      	mov	r3, r2
 800654c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800654e:	88bb      	ldrh	r3, [r7, #4]
 8006550:	085b      	lsrs	r3, r3, #1
 8006552:	b29b      	uxth	r3, r3
 8006554:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	005a      	lsls	r2, r3, #1
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800656a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
 8006570:	e01b      	b.n	80065aa <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	3302      	adds	r3, #2
 800657e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	3301      	adds	r3, #1
 800658c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	0a1b      	lsrs	r3, r3, #8
 8006592:	b2da      	uxtb	r2, r3
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	3301      	adds	r3, #1
 800659c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	3302      	adds	r3, #2
 80065a2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	3b01      	subs	r3, #1
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e0      	bne.n	8006572 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80065b0:	88bb      	ldrh	r3, [r7, #4]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d007      	beq.n	80065cc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	701a      	strb	r2, [r3, #0]
  }
}
 80065cc:	bf00      	nop
 80065ce:	372c      	adds	r7, #44	; 0x2c
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr

080065d6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	460b      	mov	r3, r1
 80065e0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	7c1b      	ldrb	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d115      	bne.n	800661a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065f2:	2202      	movs	r2, #2
 80065f4:	2181      	movs	r1, #129	; 0x81
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 fe31 	bl	800825e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006606:	2202      	movs	r2, #2
 8006608:	2101      	movs	r1, #1
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f001 fe27 	bl	800825e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006618:	e012      	b.n	8006640 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800661a:	2340      	movs	r3, #64	; 0x40
 800661c:	2202      	movs	r2, #2
 800661e:	2181      	movs	r1, #129	; 0x81
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fe1c 	bl	800825e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800662c:	2340      	movs	r3, #64	; 0x40
 800662e:	2202      	movs	r2, #2
 8006630:	2101      	movs	r1, #1
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 fe13 	bl	800825e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006640:	2308      	movs	r3, #8
 8006642:	2203      	movs	r2, #3
 8006644:	2182      	movs	r1, #130	; 0x82
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 fe09 	bl	800825e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006652:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006656:	f001 ff29 	bl	80084ac <USBD_static_malloc>
 800665a:	4602      	mov	r2, r0
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]
 8006670:	e026      	b.n	80066c0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006678:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	7c1b      	ldrb	r3, [r3, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d109      	bne.n	80066b0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066a6:	2101      	movs	r1, #1
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 fec9 	bl	8008440 <USBD_LL_PrepareReceive>
 80066ae:	e007      	b.n	80066c0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066b6:	2340      	movs	r3, #64	; 0x40
 80066b8:	2101      	movs	r1, #1
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 fec0 	bl	8008440 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80066da:	2181      	movs	r1, #129	; 0x81
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 fde4 	bl	80082aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80066e8:	2101      	movs	r1, #1
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 fddd 	bl	80082aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80066f8:	2182      	movs	r1, #130	; 0x82
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 fdd5 	bl	80082aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00e      	beq.n	800672e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006720:	4618      	mov	r0, r3
 8006722:	f001 fecf 	bl	80084c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800672e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006748:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800675e:	2b00      	cmp	r3, #0
 8006760:	d039      	beq.n	80067d6 <USBD_CDC_Setup+0x9e>
 8006762:	2b20      	cmp	r3, #32
 8006764:	d17f      	bne.n	8006866 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	88db      	ldrh	r3, [r3, #6]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d029      	beq.n	80067c2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	b25b      	sxtb	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	da11      	bge.n	800679c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006784:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	88d2      	ldrh	r2, [r2, #6]
 800678a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800678c:	6939      	ldr	r1, [r7, #16]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	88db      	ldrh	r3, [r3, #6]
 8006792:	461a      	mov	r2, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 f9da 	bl	8007b4e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800679a:	e06b      	b.n	8006874 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	785a      	ldrb	r2, [r3, #1]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	88db      	ldrh	r3, [r3, #6]
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80067b2:	6939      	ldr	r1, [r7, #16]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	88db      	ldrh	r3, [r3, #6]
 80067b8:	461a      	mov	r2, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 f9f5 	bl	8007baa <USBD_CtlPrepareRx>
      break;
 80067c0:	e058      	b.n	8006874 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	7850      	ldrb	r0, [r2, #1]
 80067ce:	2200      	movs	r2, #0
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	4798      	blx	r3
      break;
 80067d4:	e04e      	b.n	8006874 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	2b0b      	cmp	r3, #11
 80067dc:	d02e      	beq.n	800683c <USBD_CDC_Setup+0x104>
 80067de:	2b0b      	cmp	r3, #11
 80067e0:	dc38      	bgt.n	8006854 <USBD_CDC_Setup+0x11c>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <USBD_CDC_Setup+0xb4>
 80067e6:	2b0a      	cmp	r3, #10
 80067e8:	d014      	beq.n	8006814 <USBD_CDC_Setup+0xdc>
 80067ea:	e033      	b.n	8006854 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d107      	bne.n	8006806 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80067f6:	f107 030c 	add.w	r3, r7, #12
 80067fa:	2202      	movs	r2, #2
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 f9a5 	bl	8007b4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006804:	e02e      	b.n	8006864 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 f936 	bl	8007a7a <USBD_CtlError>
            ret = USBD_FAIL;
 800680e:	2302      	movs	r3, #2
 8006810:	75fb      	strb	r3, [r7, #23]
          break;
 8006812:	e027      	b.n	8006864 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681a:	2b03      	cmp	r3, #3
 800681c:	d107      	bne.n	800682e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800681e:	f107 030f 	add.w	r3, r7, #15
 8006822:	2201      	movs	r2, #1
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 f991 	bl	8007b4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800682c:	e01a      	b.n	8006864 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 f922 	bl	8007a7a <USBD_CtlError>
            ret = USBD_FAIL;
 8006836:	2302      	movs	r3, #2
 8006838:	75fb      	strb	r3, [r7, #23]
          break;
 800683a:	e013      	b.n	8006864 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006842:	2b03      	cmp	r3, #3
 8006844:	d00d      	beq.n	8006862 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 f916 	bl	8007a7a <USBD_CtlError>
            ret = USBD_FAIL;
 800684e:	2302      	movs	r3, #2
 8006850:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006852:	e006      	b.n	8006862 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 f90f 	bl	8007a7a <USBD_CtlError>
          ret = USBD_FAIL;
 800685c:	2302      	movs	r3, #2
 800685e:	75fb      	strb	r3, [r7, #23]
          break;
 8006860:	e000      	b.n	8006864 <USBD_CDC_Setup+0x12c>
          break;
 8006862:	bf00      	nop
      }
      break;
 8006864:	e006      	b.n	8006874 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 f906 	bl	8007a7a <USBD_CtlError>
      ret = USBD_FAIL;
 800686e:	2302      	movs	r3, #2
 8006870:	75fb      	strb	r3, [r7, #23]
      break;
 8006872:	bf00      	nop
  }

  return ret;
 8006874:	7dfb      	ldrb	r3, [r7, #23]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	460b      	mov	r3, r1
 8006888:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006890:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006898:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d03a      	beq.n	800691a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80068a4:	78fa      	ldrb	r2, [r7, #3]
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	4613      	mov	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	331c      	adds	r3, #28
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d029      	beq.n	800690e <USBD_CDC_DataIn+0x90>
 80068ba:	78fa      	ldrb	r2, [r7, #3]
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	331c      	adds	r3, #28
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	78f9      	ldrb	r1, [r7, #3]
 80068ce:	68b8      	ldr	r0, [r7, #8]
 80068d0:	460b      	mov	r3, r1
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	440b      	add	r3, r1
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	4403      	add	r3, r0
 80068da:	3338      	adds	r3, #56	; 0x38
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	fbb2 f1f3 	udiv	r1, r2, r3
 80068e2:	fb03 f301 	mul.w	r3, r3, r1
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d110      	bne.n	800690e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80068ec:	78fa      	ldrb	r2, [r7, #3]
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	331c      	adds	r3, #28
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006900:	78f9      	ldrb	r1, [r7, #3]
 8006902:	2300      	movs	r3, #0
 8006904:	2200      	movs	r2, #0
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 fd77 	bl	80083fa <USBD_LL_Transmit>
 800690c:	e003      	b.n	8006916 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	e000      	b.n	800691c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800691a:	2302      	movs	r3, #2
  }
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006936:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 fda2 	bl	8008486 <USBD_LL_GetRxDataSize>
 8006942:	4602      	mov	r2, r0
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00d      	beq.n	8006970 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006968:	4611      	mov	r1, r2
 800696a:	4798      	blx	r3

    return USBD_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	e000      	b.n	8006972 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006970:	2302      	movs	r3, #2
  }
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006988:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006990:	2b00      	cmp	r3, #0
 8006992:	d015      	beq.n	80069c0 <USBD_CDC_EP0_RxReady+0x46>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800699a:	2bff      	cmp	r3, #255	; 0xff
 800699c:	d010      	beq.n	80069c0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80069ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80069b4:	b292      	uxth	r2, r2
 80069b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	22ff      	movs	r2, #255	; 0xff
 80069bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2243      	movs	r2, #67	; 0x43
 80069d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80069da:	4b03      	ldr	r3, [pc, #12]	; (80069e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bc80      	pop	{r7}
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	20000094 	.word	0x20000094

080069ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2243      	movs	r2, #67	; 0x43
 80069f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80069fa:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20000050 	.word	0x20000050

08006a0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2243      	movs	r2, #67	; 0x43
 8006a18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006a1a:	4b03      	ldr	r3, [pc, #12]	; (8006a28 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	200000d8 	.word	0x200000d8

08006a2c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	220a      	movs	r2, #10
 8006a38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006a3a:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	2000000c 	.word	0x2000000c

08006a4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006a56:	2302      	movs	r3, #2
 8006a58:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bc80      	pop	{r7}
 8006a76:	4770      	bx	lr

08006a78 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr

08006aaa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr

08006ad0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d017      	beq.n	8006b1a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	7c1b      	ldrb	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d109      	bne.n	8006b06 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006afc:	2101      	movs	r1, #1
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 fc9e 	bl	8008440 <USBD_LL_PrepareReceive>
 8006b04:	e007      	b.n	8006b16 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b0c:	2340      	movs	r3, #64	; 0x40
 8006b0e:	2101      	movs	r1, #1
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 fc95 	bl	8008440 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e000      	b.n	8006b1c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006b1a:	2302      	movs	r3, #2
  }
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e01a      	b.n	8006b72 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	79fa      	ldrb	r2, [r7, #7]
 8006b68:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f001 fb02 	bl	8008174 <USBD_LL_Init>

  return USBD_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d006      	beq.n	8006b9c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
 8006b9a:	e001      	b.n	8006ba0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bc80      	pop	{r7}
 8006baa:	4770      	bx	lr

08006bac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 fb37 	bl	8008228 <USBD_LL_Start>

  return USBD_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr

08006bd8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006be4:	2302      	movs	r3, #2
 8006be6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00c      	beq.n	8006c0c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	78fa      	ldrb	r2, [r7, #3]
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	4798      	blx	r3
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b082      	sub	sp, #8
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	460b      	mov	r3, r1
 8006c20:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	78fa      	ldrb	r2, [r7, #3]
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	4798      	blx	r3

  return USBD_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fed7 	bl	8007a02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c62:	461a      	mov	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c70:	f003 031f 	and.w	r3, r3, #31
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d016      	beq.n	8006ca6 <USBD_LL_SetupStage+0x6a>
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d81c      	bhi.n	8006cb6 <USBD_LL_SetupStage+0x7a>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <USBD_LL_SetupStage+0x4a>
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d008      	beq.n	8006c96 <USBD_LL_SetupStage+0x5a>
 8006c84:	e017      	b.n	8006cb6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f9ca 	bl	8007028 <USBD_StdDevReq>
      break;
 8006c94:	e01a      	b.n	8006ccc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fa2c 	bl	80070fc <USBD_StdItfReq>
      break;
 8006ca4:	e012      	b.n	8006ccc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa6c 	bl	800718c <USBD_StdEPReq>
      break;
 8006cb4:	e00a      	b.n	8006ccc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006cbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 fb0f 	bl	80082e8 <USBD_LL_StallEP>
      break;
 8006cca:	bf00      	nop
  }

  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b086      	sub	sp, #24
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d14b      	bne.n	8006d82 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006cf0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d134      	bne.n	8006d66 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d919      	bls.n	8006d3c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	1ad2      	subs	r2, r2, r3
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d203      	bcs.n	8006d2a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	e002      	b.n	8006d30 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 ff56 	bl	8007be6 <USBD_CtlContinueRx>
 8006d3a:	e038      	b.n	8006dae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d105      	bne.n	8006d5e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 ff53 	bl	8007c0a <USBD_CtlSendStatus>
 8006d64:	e023      	b.n	8006dae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d6c:	2b05      	cmp	r3, #5
 8006d6e:	d11e      	bne.n	8006dae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006d78:	2100      	movs	r1, #0
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f001 fab4 	bl	80082e8 <USBD_LL_StallEP>
 8006d80:	e015      	b.n	8006dae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00d      	beq.n	8006daa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d108      	bne.n	8006daa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	7afa      	ldrb	r2, [r7, #11]
 8006da2:	4611      	mov	r1, r2
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	4798      	blx	r3
 8006da8:	e001      	b.n	8006dae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006daa:	2302      	movs	r3, #2
 8006dac:	e000      	b.n	8006db0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d17f      	bne.n	8006ecc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3314      	adds	r3, #20
 8006dd0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d15c      	bne.n	8006e96 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d915      	bls.n	8006e14 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	1ad2      	subs	r2, r2, r3
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 fec0 	bl	8007b86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e06:	2300      	movs	r3, #0
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f001 fb17 	bl	8008440 <USBD_LL_PrepareReceive>
 8006e12:	e04e      	b.n	8006eb2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	6912      	ldr	r2, [r2, #16]
 8006e1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e20:	fb02 f201 	mul.w	r2, r2, r1
 8006e24:	1a9b      	subs	r3, r3, r2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d11c      	bne.n	8006e64 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d316      	bcc.n	8006e64 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d20f      	bcs.n	8006e64 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e44:	2200      	movs	r2, #0
 8006e46:	2100      	movs	r1, #0
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 fe9c 	bl	8007b86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e56:	2300      	movs	r3, #0
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f001 faef 	bl	8008440 <USBD_LL_PrepareReceive>
 8006e62:	e026      	b.n	8006eb2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00a      	beq.n	8006e86 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d105      	bne.n	8006e86 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e86:	2180      	movs	r1, #128	; 0x80
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f001 fa2d 	bl	80082e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 fece 	bl	8007c30 <USBD_CtlReceiveStatus>
 8006e94:	e00d      	b.n	8006eb2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d004      	beq.n	8006eaa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d103      	bne.n	8006eb2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006eaa:	2180      	movs	r1, #128	; 0x80
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f001 fa1b 	bl	80082e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d11d      	bne.n	8006ef8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f7ff fe81 	bl	8006bc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006eca:	e015      	b.n	8006ef8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00d      	beq.n	8006ef4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d108      	bne.n	8006ef4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	7afa      	ldrb	r2, [r7, #11]
 8006eec:	4611      	mov	r1, r2
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	4798      	blx	r3
 8006ef2:	e001      	b.n	8006ef8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e000      	b.n	8006efa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f0a:	2340      	movs	r3, #64	; 0x40
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2100      	movs	r1, #0
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 f9a4 	bl	800825e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2240      	movs	r2, #64	; 0x40
 8006f22:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f26:	2340      	movs	r3, #64	; 0x40
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2180      	movs	r1, #128	; 0x80
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 f996 	bl	800825e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2240      	movs	r2, #64	; 0x40
 8006f3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d009      	beq.n	8006f7a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6852      	ldr	r2, [r2, #4]
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	4611      	mov	r1, r2
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
  }

  return USBD_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	78fa      	ldrb	r2, [r7, #3]
 8006f94:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr

08006fa2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2204      	movs	r2, #4
 8006fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd8:	2b04      	cmp	r3, #4
 8006fda:	d105      	bne.n	8006fe8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bc80      	pop	{r7}
 8006ff2:	4770      	bx	lr

08006ff4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007002:	2b03      	cmp	r3, #3
 8007004:	d10b      	bne.n	800701e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800703e:	2b40      	cmp	r3, #64	; 0x40
 8007040:	d005      	beq.n	800704e <USBD_StdDevReq+0x26>
 8007042:	2b40      	cmp	r3, #64	; 0x40
 8007044:	d84f      	bhi.n	80070e6 <USBD_StdDevReq+0xbe>
 8007046:	2b00      	cmp	r3, #0
 8007048:	d009      	beq.n	800705e <USBD_StdDevReq+0x36>
 800704a:	2b20      	cmp	r3, #32
 800704c:	d14b      	bne.n	80070e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	4798      	blx	r3
      break;
 800705c:	e048      	b.n	80070f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	785b      	ldrb	r3, [r3, #1]
 8007062:	2b09      	cmp	r3, #9
 8007064:	d839      	bhi.n	80070da <USBD_StdDevReq+0xb2>
 8007066:	a201      	add	r2, pc, #4	; (adr r2, 800706c <USBD_StdDevReq+0x44>)
 8007068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706c:	080070bd 	.word	0x080070bd
 8007070:	080070d1 	.word	0x080070d1
 8007074:	080070db 	.word	0x080070db
 8007078:	080070c7 	.word	0x080070c7
 800707c:	080070db 	.word	0x080070db
 8007080:	0800709f 	.word	0x0800709f
 8007084:	08007095 	.word	0x08007095
 8007088:	080070db 	.word	0x080070db
 800708c:	080070b3 	.word	0x080070b3
 8007090:	080070a9 	.word	0x080070a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f9dc 	bl	8007454 <USBD_GetDescriptor>
          break;
 800709c:	e022      	b.n	80070e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fb3f 	bl	8007724 <USBD_SetAddress>
          break;
 80070a6:	e01d      	b.n	80070e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fb7e 	bl	80077ac <USBD_SetConfig>
          break;
 80070b0:	e018      	b.n	80070e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fc07 	bl	80078c8 <USBD_GetConfig>
          break;
 80070ba:	e013      	b.n	80070e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fc37 	bl	8007932 <USBD_GetStatus>
          break;
 80070c4:	e00e      	b.n	80070e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fc65 	bl	8007998 <USBD_SetFeature>
          break;
 80070ce:	e009      	b.n	80070e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fc74 	bl	80079c0 <USBD_ClrFeature>
          break;
 80070d8:	e004      	b.n	80070e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fccc 	bl	8007a7a <USBD_CtlError>
          break;
 80070e2:	bf00      	nop
      }
      break;
 80070e4:	e004      	b.n	80070f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fcc6 	bl	8007a7a <USBD_CtlError>
      break;
 80070ee:	bf00      	nop
  }

  return ret;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop

080070fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d005      	beq.n	8007122 <USBD_StdItfReq+0x26>
 8007116:	2b40      	cmp	r3, #64	; 0x40
 8007118:	d82e      	bhi.n	8007178 <USBD_StdItfReq+0x7c>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <USBD_StdItfReq+0x26>
 800711e:	2b20      	cmp	r3, #32
 8007120:	d12a      	bne.n	8007178 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007128:	3b01      	subs	r3, #1
 800712a:	2b02      	cmp	r3, #2
 800712c:	d81d      	bhi.n	800716a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	889b      	ldrh	r3, [r3, #4]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b01      	cmp	r3, #1
 8007136:	d813      	bhi.n	8007160 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	4798      	blx	r3
 8007146:	4603      	mov	r3, r0
 8007148:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	88db      	ldrh	r3, [r3, #6]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d110      	bne.n	8007174 <USBD_StdItfReq+0x78>
 8007152:	7bfb      	ldrb	r3, [r7, #15]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10d      	bne.n	8007174 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fd56 	bl	8007c0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800715e:	e009      	b.n	8007174 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fc89 	bl	8007a7a <USBD_CtlError>
          break;
 8007168:	e004      	b.n	8007174 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fc84 	bl	8007a7a <USBD_CtlError>
          break;
 8007172:	e000      	b.n	8007176 <USBD_StdItfReq+0x7a>
          break;
 8007174:	bf00      	nop
      }
      break;
 8007176:	e004      	b.n	8007182 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fc7d 	bl	8007a7a <USBD_CtlError>
      break;
 8007180:	bf00      	nop
  }

  return USBD_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	889b      	ldrh	r3, [r3, #4]
 800719e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	d007      	beq.n	80071bc <USBD_StdEPReq+0x30>
 80071ac:	2b40      	cmp	r3, #64	; 0x40
 80071ae:	f200 8146 	bhi.w	800743e <USBD_StdEPReq+0x2b2>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <USBD_StdEPReq+0x40>
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	f040 8141 	bne.w	800743e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
      break;
 80071ca:	e13d      	b.n	8007448 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	d10a      	bne.n	80071ee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	4798      	blx	r3
 80071e6:	4603      	mov	r3, r0
 80071e8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	e12d      	b.n	800744a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	785b      	ldrb	r3, [r3, #1]
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d007      	beq.n	8007206 <USBD_StdEPReq+0x7a>
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	f300 811b 	bgt.w	8007432 <USBD_StdEPReq+0x2a6>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d072      	beq.n	80072e6 <USBD_StdEPReq+0x15a>
 8007200:	2b01      	cmp	r3, #1
 8007202:	d03a      	beq.n	800727a <USBD_StdEPReq+0xee>
 8007204:	e115      	b.n	8007432 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	2b02      	cmp	r3, #2
 800720e:	d002      	beq.n	8007216 <USBD_StdEPReq+0x8a>
 8007210:	2b03      	cmp	r3, #3
 8007212:	d015      	beq.n	8007240 <USBD_StdEPReq+0xb4>
 8007214:	e02b      	b.n	800726e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00c      	beq.n	8007236 <USBD_StdEPReq+0xaa>
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	2b80      	cmp	r3, #128	; 0x80
 8007220:	d009      	beq.n	8007236 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 f85e 	bl	80082e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800722c:	2180      	movs	r1, #128	; 0x80
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 f85a 	bl	80082e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007234:	e020      	b.n	8007278 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fc1e 	bl	8007a7a <USBD_CtlError>
              break;
 800723e:	e01b      	b.n	8007278 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	885b      	ldrh	r3, [r3, #2]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10e      	bne.n	8007266 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <USBD_StdEPReq+0xda>
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	2b80      	cmp	r3, #128	; 0x80
 8007252:	d008      	beq.n	8007266 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	88db      	ldrh	r3, [r3, #6]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d104      	bne.n	8007266 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 f841 	bl	80082e8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fccf 	bl	8007c0a <USBD_CtlSendStatus>

              break;
 800726c:	e004      	b.n	8007278 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fc02 	bl	8007a7a <USBD_CtlError>
              break;
 8007276:	bf00      	nop
          }
          break;
 8007278:	e0e0      	b.n	800743c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007280:	2b02      	cmp	r3, #2
 8007282:	d002      	beq.n	800728a <USBD_StdEPReq+0xfe>
 8007284:	2b03      	cmp	r3, #3
 8007286:	d015      	beq.n	80072b4 <USBD_StdEPReq+0x128>
 8007288:	e026      	b.n	80072d8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00c      	beq.n	80072aa <USBD_StdEPReq+0x11e>
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b80      	cmp	r3, #128	; 0x80
 8007294:	d009      	beq.n	80072aa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 f824 	bl	80082e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80072a0:	2180      	movs	r1, #128	; 0x80
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 f820 	bl	80082e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072a8:	e01c      	b.n	80072e4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fbe4 	bl	8007a7a <USBD_CtlError>
              break;
 80072b2:	e017      	b.n	80072e4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	885b      	ldrh	r3, [r3, #2]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d112      	bne.n	80072e2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072bc:	7bbb      	ldrb	r3, [r7, #14]
 80072be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80072c6:	7bbb      	ldrb	r3, [r7, #14]
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 f82b 	bl	8008326 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fc9a 	bl	8007c0a <USBD_CtlSendStatus>
              }
              break;
 80072d6:	e004      	b.n	80072e2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fbcd 	bl	8007a7a <USBD_CtlError>
              break;
 80072e0:	e000      	b.n	80072e4 <USBD_StdEPReq+0x158>
              break;
 80072e2:	bf00      	nop
          }
          break;
 80072e4:	e0aa      	b.n	800743c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d002      	beq.n	80072f6 <USBD_StdEPReq+0x16a>
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d032      	beq.n	800735a <USBD_StdEPReq+0x1ce>
 80072f4:	e097      	b.n	8007426 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d007      	beq.n	800730c <USBD_StdEPReq+0x180>
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
 80072fe:	2b80      	cmp	r3, #128	; 0x80
 8007300:	d004      	beq.n	800730c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fbb8 	bl	8007a7a <USBD_CtlError>
                break;
 800730a:	e091      	b.n	8007430 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800730c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007310:	2b00      	cmp	r3, #0
 8007312:	da0b      	bge.n	800732c <USBD_StdEPReq+0x1a0>
 8007314:	7bbb      	ldrb	r3, [r7, #14]
 8007316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	3310      	adds	r3, #16
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	4413      	add	r3, r2
 8007328:	3304      	adds	r3, #4
 800732a:	e00b      	b.n	8007344 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	4413      	add	r3, r2
 8007342:	3304      	adds	r3, #4
 8007344:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2202      	movs	r2, #2
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fbfb 	bl	8007b4e <USBD_CtlSendData>
              break;
 8007358:	e06a      	b.n	8007430 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800735a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800735e:	2b00      	cmp	r3, #0
 8007360:	da11      	bge.n	8007386 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	f003 020f 	and.w	r2, r3, #15
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	3318      	adds	r3, #24
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d117      	bne.n	80073ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fb7b 	bl	8007a7a <USBD_CtlError>
                  break;
 8007384:	e054      	b.n	8007430 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	f003 020f 	and.w	r2, r3, #15
 800738c:	6879      	ldr	r1, [r7, #4]
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	440b      	add	r3, r1
 8007398:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d104      	bne.n	80073ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fb68 	bl	8007a7a <USBD_CtlError>
                  break;
 80073aa:	e041      	b.n	8007430 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	da0b      	bge.n	80073cc <USBD_StdEPReq+0x240>
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	3310      	adds	r3, #16
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	4413      	add	r3, r2
 80073c8:	3304      	adds	r3, #4
 80073ca:	e00b      	b.n	80073e4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073d2:	4613      	mov	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	4413      	add	r3, r2
 80073e2:	3304      	adds	r3, #4
 80073e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <USBD_StdEPReq+0x266>
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
 80073ee:	2b80      	cmp	r3, #128	; 0x80
 80073f0:	d103      	bne.n	80073fa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	e00e      	b.n	8007418 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 ffb0 	bl	8008364 <USBD_LL_IsStallEP>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2201      	movs	r2, #1
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	e002      	b.n	8007418 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2202      	movs	r2, #2
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fb95 	bl	8007b4e <USBD_CtlSendData>
              break;
 8007424:	e004      	b.n	8007430 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fb26 	bl	8007a7a <USBD_CtlError>
              break;
 800742e:	bf00      	nop
          }
          break;
 8007430:	e004      	b.n	800743c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fb20 	bl	8007a7a <USBD_CtlError>
          break;
 800743a:	bf00      	nop
      }
      break;
 800743c:	e004      	b.n	8007448 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fb1a 	bl	8007a7a <USBD_CtlError>
      break;
 8007446:	bf00      	nop
  }

  return ret;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	885b      	ldrh	r3, [r3, #2]
 800746e:	0a1b      	lsrs	r3, r3, #8
 8007470:	b29b      	uxth	r3, r3
 8007472:	3b01      	subs	r3, #1
 8007474:	2b06      	cmp	r3, #6
 8007476:	f200 8128 	bhi.w	80076ca <USBD_GetDescriptor+0x276>
 800747a:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <USBD_GetDescriptor+0x2c>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	0800749d 	.word	0x0800749d
 8007484:	080074b5 	.word	0x080074b5
 8007488:	080074f5 	.word	0x080074f5
 800748c:	080076cb 	.word	0x080076cb
 8007490:	080076cb 	.word	0x080076cb
 8007494:	0800766b 	.word	0x0800766b
 8007498:	08007697 	.word	0x08007697
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	7c12      	ldrb	r2, [r2, #16]
 80074a8:	f107 0108 	add.w	r1, r7, #8
 80074ac:	4610      	mov	r0, r2
 80074ae:	4798      	blx	r3
 80074b0:	60f8      	str	r0, [r7, #12]
      break;
 80074b2:	e112      	b.n	80076da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	7c1b      	ldrb	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10d      	bne.n	80074d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c4:	f107 0208 	add.w	r2, r7, #8
 80074c8:	4610      	mov	r0, r2
 80074ca:	4798      	blx	r3
 80074cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3301      	adds	r3, #1
 80074d2:	2202      	movs	r2, #2
 80074d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074d6:	e100      	b.n	80076da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	f107 0208 	add.w	r2, r7, #8
 80074e4:	4610      	mov	r0, r2
 80074e6:	4798      	blx	r3
 80074e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3301      	adds	r3, #1
 80074ee:	2202      	movs	r2, #2
 80074f0:	701a      	strb	r2, [r3, #0]
      break;
 80074f2:	e0f2      	b.n	80076da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	885b      	ldrh	r3, [r3, #2]
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b05      	cmp	r3, #5
 80074fc:	f200 80ac 	bhi.w	8007658 <USBD_GetDescriptor+0x204>
 8007500:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <USBD_GetDescriptor+0xb4>)
 8007502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007506:	bf00      	nop
 8007508:	08007521 	.word	0x08007521
 800750c:	08007555 	.word	0x08007555
 8007510:	08007589 	.word	0x08007589
 8007514:	080075bd 	.word	0x080075bd
 8007518:	080075f1 	.word	0x080075f1
 800751c:	08007625 	.word	0x08007625
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00b      	beq.n	8007544 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	7c12      	ldrb	r2, [r2, #16]
 8007538:	f107 0108 	add.w	r1, r7, #8
 800753c:	4610      	mov	r0, r2
 800753e:	4798      	blx	r3
 8007540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007542:	e091      	b.n	8007668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fa97 	bl	8007a7a <USBD_CtlError>
            err++;
 800754c:	7afb      	ldrb	r3, [r7, #11]
 800754e:	3301      	adds	r3, #1
 8007550:	72fb      	strb	r3, [r7, #11]
          break;
 8007552:	e089      	b.n	8007668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00b      	beq.n	8007578 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	7c12      	ldrb	r2, [r2, #16]
 800756c:	f107 0108 	add.w	r1, r7, #8
 8007570:	4610      	mov	r0, r2
 8007572:	4798      	blx	r3
 8007574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007576:	e077      	b.n	8007668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fa7d 	bl	8007a7a <USBD_CtlError>
            err++;
 8007580:	7afb      	ldrb	r3, [r7, #11]
 8007582:	3301      	adds	r3, #1
 8007584:	72fb      	strb	r3, [r7, #11]
          break;
 8007586:	e06f      	b.n	8007668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00b      	beq.n	80075ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	7c12      	ldrb	r2, [r2, #16]
 80075a0:	f107 0108 	add.w	r1, r7, #8
 80075a4:	4610      	mov	r0, r2
 80075a6:	4798      	blx	r3
 80075a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075aa:	e05d      	b.n	8007668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fa63 	bl	8007a7a <USBD_CtlError>
            err++;
 80075b4:	7afb      	ldrb	r3, [r7, #11]
 80075b6:	3301      	adds	r3, #1
 80075b8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ba:	e055      	b.n	8007668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00b      	beq.n	80075e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	7c12      	ldrb	r2, [r2, #16]
 80075d4:	f107 0108 	add.w	r1, r7, #8
 80075d8:	4610      	mov	r0, r2
 80075da:	4798      	blx	r3
 80075dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075de:	e043      	b.n	8007668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fa49 	bl	8007a7a <USBD_CtlError>
            err++;
 80075e8:	7afb      	ldrb	r3, [r7, #11]
 80075ea:	3301      	adds	r3, #1
 80075ec:	72fb      	strb	r3, [r7, #11]
          break;
 80075ee:	e03b      	b.n	8007668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	7c12      	ldrb	r2, [r2, #16]
 8007608:	f107 0108 	add.w	r1, r7, #8
 800760c:	4610      	mov	r0, r2
 800760e:	4798      	blx	r3
 8007610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007612:	e029      	b.n	8007668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fa2f 	bl	8007a7a <USBD_CtlError>
            err++;
 800761c:	7afb      	ldrb	r3, [r7, #11]
 800761e:	3301      	adds	r3, #1
 8007620:	72fb      	strb	r3, [r7, #11]
          break;
 8007622:	e021      	b.n	8007668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	7c12      	ldrb	r2, [r2, #16]
 800763c:	f107 0108 	add.w	r1, r7, #8
 8007640:	4610      	mov	r0, r2
 8007642:	4798      	blx	r3
 8007644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007646:	e00f      	b.n	8007668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fa15 	bl	8007a7a <USBD_CtlError>
            err++;
 8007650:	7afb      	ldrb	r3, [r7, #11]
 8007652:	3301      	adds	r3, #1
 8007654:	72fb      	strb	r3, [r7, #11]
          break;
 8007656:	e007      	b.n	8007668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fa0d 	bl	8007a7a <USBD_CtlError>
          err++;
 8007660:	7afb      	ldrb	r3, [r7, #11]
 8007662:	3301      	adds	r3, #1
 8007664:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007666:	e038      	b.n	80076da <USBD_GetDescriptor+0x286>
 8007668:	e037      	b.n	80076da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	7c1b      	ldrb	r3, [r3, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d109      	bne.n	8007686 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767a:	f107 0208 	add.w	r2, r7, #8
 800767e:	4610      	mov	r0, r2
 8007680:	4798      	blx	r3
 8007682:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007684:	e029      	b.n	80076da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f9f6 	bl	8007a7a <USBD_CtlError>
        err++;
 800768e:	7afb      	ldrb	r3, [r7, #11]
 8007690:	3301      	adds	r3, #1
 8007692:	72fb      	strb	r3, [r7, #11]
      break;
 8007694:	e021      	b.n	80076da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	7c1b      	ldrb	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10d      	bne.n	80076ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a6:	f107 0208 	add.w	r2, r7, #8
 80076aa:	4610      	mov	r0, r2
 80076ac:	4798      	blx	r3
 80076ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	3301      	adds	r3, #1
 80076b4:	2207      	movs	r2, #7
 80076b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076b8:	e00f      	b.n	80076da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f9dc 	bl	8007a7a <USBD_CtlError>
        err++;
 80076c2:	7afb      	ldrb	r3, [r7, #11]
 80076c4:	3301      	adds	r3, #1
 80076c6:	72fb      	strb	r3, [r7, #11]
      break;
 80076c8:	e007      	b.n	80076da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f9d4 	bl	8007a7a <USBD_CtlError>
      err++;
 80076d2:	7afb      	ldrb	r3, [r7, #11]
 80076d4:	3301      	adds	r3, #1
 80076d6:	72fb      	strb	r3, [r7, #11]
      break;
 80076d8:	bf00      	nop
  }

  if (err != 0U)
 80076da:	7afb      	ldrb	r3, [r7, #11]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d11c      	bne.n	800771a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80076e0:	893b      	ldrh	r3, [r7, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d011      	beq.n	800770a <USBD_GetDescriptor+0x2b6>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	88db      	ldrh	r3, [r3, #6]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00d      	beq.n	800770a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	88da      	ldrh	r2, [r3, #6]
 80076f2:	893b      	ldrh	r3, [r7, #8]
 80076f4:	4293      	cmp	r3, r2
 80076f6:	bf28      	it	cs
 80076f8:	4613      	movcs	r3, r2
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076fe:	893b      	ldrh	r3, [r7, #8]
 8007700:	461a      	mov	r2, r3
 8007702:	68f9      	ldr	r1, [r7, #12]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fa22 	bl	8007b4e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	88db      	ldrh	r3, [r3, #6]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d104      	bne.n	800771c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa79 	bl	8007c0a <USBD_CtlSendStatus>
 8007718:	e000      	b.n	800771c <USBD_GetDescriptor+0x2c8>
    return;
 800771a:	bf00      	nop
    }
  }
}
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop

08007724 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	889b      	ldrh	r3, [r3, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d130      	bne.n	8007798 <USBD_SetAddress+0x74>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	88db      	ldrh	r3, [r3, #6]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d12c      	bne.n	8007798 <USBD_SetAddress+0x74>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	885b      	ldrh	r3, [r3, #2]
 8007742:	2b7f      	cmp	r3, #127	; 0x7f
 8007744:	d828      	bhi.n	8007798 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	885b      	ldrh	r3, [r3, #2]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007750:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007758:	2b03      	cmp	r3, #3
 800775a:	d104      	bne.n	8007766 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f98b 	bl	8007a7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007764:	e01d      	b.n	80077a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	7bfa      	ldrb	r2, [r7, #15]
 800776a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fe22 	bl	80083bc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fa46 	bl	8007c0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d004      	beq.n	800778e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778c:	e009      	b.n	80077a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007796:	e004      	b.n	80077a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f96d 	bl	8007a7a <USBD_CtlError>
  }
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	885b      	ldrh	r3, [r3, #2]
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	4b41      	ldr	r3, [pc, #260]	; (80078c4 <USBD_SetConfig+0x118>)
 80077be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077c0:	4b40      	ldr	r3, [pc, #256]	; (80078c4 <USBD_SetConfig+0x118>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d904      	bls.n	80077d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f955 	bl	8007a7a <USBD_CtlError>
 80077d0:	e075      	b.n	80078be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d002      	beq.n	80077e2 <USBD_SetConfig+0x36>
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d023      	beq.n	8007828 <USBD_SetConfig+0x7c>
 80077e0:	e062      	b.n	80078a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80077e2:	4b38      	ldr	r3, [pc, #224]	; (80078c4 <USBD_SetConfig+0x118>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01a      	beq.n	8007820 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80077ea:	4b36      	ldr	r3, [pc, #216]	; (80078c4 <USBD_SetConfig+0x118>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2203      	movs	r2, #3
 80077f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80077fc:	4b31      	ldr	r3, [pc, #196]	; (80078c4 <USBD_SetConfig+0x118>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff f9e8 	bl	8006bd8 <USBD_SetClassConfig>
 8007808:	4603      	mov	r3, r0
 800780a:	2b02      	cmp	r3, #2
 800780c:	d104      	bne.n	8007818 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f932 	bl	8007a7a <USBD_CtlError>
            return;
 8007816:	e052      	b.n	80078be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f9f6 	bl	8007c0a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800781e:	e04e      	b.n	80078be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f9f2 	bl	8007c0a <USBD_CtlSendStatus>
        break;
 8007826:	e04a      	b.n	80078be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007828:	4b26      	ldr	r3, [pc, #152]	; (80078c4 <USBD_SetConfig+0x118>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d112      	bne.n	8007856 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007838:	4b22      	ldr	r3, [pc, #136]	; (80078c4 <USBD_SetConfig+0x118>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007842:	4b20      	ldr	r3, [pc, #128]	; (80078c4 <USBD_SetConfig+0x118>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff f9e4 	bl	8006c16 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f9db 	bl	8007c0a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007854:	e033      	b.n	80078be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007856:	4b1b      	ldr	r3, [pc, #108]	; (80078c4 <USBD_SetConfig+0x118>)
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	461a      	mov	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d01d      	beq.n	80078a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	b2db      	uxtb	r3, r3
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff f9d2 	bl	8006c16 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007872:	4b14      	ldr	r3, [pc, #80]	; (80078c4 <USBD_SetConfig+0x118>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800787c:	4b11      	ldr	r3, [pc, #68]	; (80078c4 <USBD_SetConfig+0x118>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff f9a8 	bl	8006bd8 <USBD_SetClassConfig>
 8007888:	4603      	mov	r3, r0
 800788a:	2b02      	cmp	r3, #2
 800788c:	d104      	bne.n	8007898 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f8f2 	bl	8007a7a <USBD_CtlError>
            return;
 8007896:	e012      	b.n	80078be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f9b6 	bl	8007c0a <USBD_CtlSendStatus>
        break;
 800789e:	e00e      	b.n	80078be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f9b2 	bl	8007c0a <USBD_CtlSendStatus>
        break;
 80078a6:	e00a      	b.n	80078be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f8e5 	bl	8007a7a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80078b0:	4b04      	ldr	r3, [pc, #16]	; (80078c4 <USBD_SetConfig+0x118>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff f9ad 	bl	8006c16 <USBD_ClrClassConfig>
        break;
 80078bc:	bf00      	nop
    }
  }
}
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	2000019b 	.word	0x2000019b

080078c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	88db      	ldrh	r3, [r3, #6]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d004      	beq.n	80078e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f8cc 	bl	8007a7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078e2:	e022      	b.n	800792a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	dc02      	bgt.n	80078f4 <USBD_GetConfig+0x2c>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dc03      	bgt.n	80078fa <USBD_GetConfig+0x32>
 80078f2:	e015      	b.n	8007920 <USBD_GetConfig+0x58>
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d00b      	beq.n	8007910 <USBD_GetConfig+0x48>
 80078f8:	e012      	b.n	8007920 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3308      	adds	r3, #8
 8007904:	2201      	movs	r2, #1
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f920 	bl	8007b4e <USBD_CtlSendData>
        break;
 800790e:	e00c      	b.n	800792a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	3304      	adds	r3, #4
 8007914:	2201      	movs	r2, #1
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f918 	bl	8007b4e <USBD_CtlSendData>
        break;
 800791e:	e004      	b.n	800792a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f8a9 	bl	8007a7a <USBD_CtlError>
        break;
 8007928:	bf00      	nop
}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007942:	3b01      	subs	r3, #1
 8007944:	2b02      	cmp	r3, #2
 8007946:	d81e      	bhi.n	8007986 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	88db      	ldrh	r3, [r3, #6]
 800794c:	2b02      	cmp	r3, #2
 800794e:	d004      	beq.n	800795a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f891 	bl	8007a7a <USBD_CtlError>
        break;
 8007958:	e01a      	b.n	8007990 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f043 0202 	orr.w	r2, r3, #2
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	330c      	adds	r3, #12
 800797a:	2202      	movs	r2, #2
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f8e5 	bl	8007b4e <USBD_CtlSendData>
      break;
 8007984:	e004      	b.n	8007990 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f876 	bl	8007a7a <USBD_CtlError>
      break;
 800798e:	bf00      	nop
  }
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	885b      	ldrh	r3, [r3, #2]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d106      	bne.n	80079b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f929 	bl	8007c0a <USBD_CtlSendStatus>
  }
}
 80079b8:	bf00      	nop
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d0:	3b01      	subs	r3, #1
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d80b      	bhi.n	80079ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	885b      	ldrh	r3, [r3, #2]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d10c      	bne.n	80079f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f90f 	bl	8007c0a <USBD_CtlSendStatus>
      }
      break;
 80079ec:	e004      	b.n	80079f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f842 	bl	8007a7a <USBD_CtlError>
      break;
 80079f6:	e000      	b.n	80079fa <USBD_ClrFeature+0x3a>
      break;
 80079f8:	bf00      	nop
  }
}
 80079fa:	bf00      	nop
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	785a      	ldrb	r2, [r3, #1]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	3302      	adds	r3, #2
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	3303      	adds	r3, #3
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	021b      	lsls	r3, r3, #8
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	4413      	add	r3, r2
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	3305      	adds	r3, #5
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	021b      	lsls	r3, r3, #8
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	4413      	add	r3, r2
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	3306      	adds	r3, #6
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	3307      	adds	r3, #7
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	021b      	lsls	r3, r3, #8
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	4413      	add	r3, r2
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	80da      	strh	r2, [r3, #6]

}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr

08007a7a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b082      	sub	sp, #8
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007a84:	2180      	movs	r1, #128	; 0x80
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fc2e 	bl	80082e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fc2a 	bl	80082e8 <USBD_LL_StallEP>
}
 8007a94:	bf00      	nop
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d032      	beq.n	8007b18 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 f834 	bl	8007b20 <USBD_GetLen>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	3301      	adds	r3, #1
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	75fa      	strb	r2, [r7, #23]
 8007acc:	461a      	mov	r2, r3
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	7812      	ldrb	r2, [r2, #0]
 8007ad6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	75fa      	strb	r2, [r7, #23]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	2203      	movs	r2, #3
 8007ae6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007ae8:	e012      	b.n	8007b10 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	60fa      	str	r2, [r7, #12]
 8007af0:	7dfa      	ldrb	r2, [r7, #23]
 8007af2:	1c51      	adds	r1, r2, #1
 8007af4:	75f9      	strb	r1, [r7, #23]
 8007af6:	4611      	mov	r1, r2
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	440a      	add	r2, r1
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	75fa      	strb	r2, [r7, #23]
 8007b06:	461a      	mov	r2, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e8      	bne.n	8007aea <USBD_GetString+0x4e>
    }
  }
}
 8007b18:	bf00      	nop
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007b2c:	e005      	b.n	8007b3a <USBD_GetLen+0x1a>
  {
    len++;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	3301      	adds	r3, #1
 8007b32:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3301      	adds	r3, #1
 8007b38:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1f5      	bne.n	8007b2e <USBD_GetLen+0xe>
  }

  return len;
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bc80      	pop	{r7}
 8007b4c:	4770      	bx	lr

08007b4e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b084      	sub	sp, #16
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b64:	88fa      	ldrh	r2, [r7, #6]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007b6a:	88fa      	ldrh	r2, [r7, #6]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b70:	88fb      	ldrh	r3, [r7, #6]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	2100      	movs	r1, #0
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 fc3f 	bl	80083fa <USBD_LL_Transmit>

  return USBD_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	60f8      	str	r0, [r7, #12]
 8007b8e:	60b9      	str	r1, [r7, #8]
 8007b90:	4613      	mov	r3, r2
 8007b92:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b94:	88fb      	ldrh	r3, [r7, #6]
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	2100      	movs	r1, #0
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 fc2d 	bl	80083fa <USBD_LL_Transmit>

  return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b084      	sub	sp, #16
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	60f8      	str	r0, [r7, #12]
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2203      	movs	r2, #3
 8007bbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bc0:	88fa      	ldrh	r2, [r7, #6]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007bc8:	88fa      	ldrh	r2, [r7, #6]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bd0:	88fb      	ldrh	r3, [r7, #6]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 fc32 	bl	8008440 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fc20 	bl	8008440 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2204      	movs	r2, #4
 8007c16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2100      	movs	r1, #0
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fbea 	bl	80083fa <USBD_LL_Transmit>

  return USBD_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2205      	movs	r2, #5
 8007c3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c40:	2300      	movs	r3, #0
 8007c42:	2200      	movs	r2, #0
 8007c44:	2100      	movs	r1, #0
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fbfa 	bl	8008440 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	4912      	ldr	r1, [pc, #72]	; (8007ca8 <MX_USB_DEVICE_Init+0x50>)
 8007c60:	4812      	ldr	r0, [pc, #72]	; (8007cac <MX_USB_DEVICE_Init+0x54>)
 8007c62:	f7fe ff5f 	bl	8006b24 <USBD_Init>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c6c:	f7f9 f878 	bl	8000d60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c70:	490f      	ldr	r1, [pc, #60]	; (8007cb0 <MX_USB_DEVICE_Init+0x58>)
 8007c72:	480e      	ldr	r0, [pc, #56]	; (8007cac <MX_USB_DEVICE_Init+0x54>)
 8007c74:	f7fe ff81 	bl	8006b7a <USBD_RegisterClass>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c7e:	f7f9 f86f 	bl	8000d60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c82:	490c      	ldr	r1, [pc, #48]	; (8007cb4 <MX_USB_DEVICE_Init+0x5c>)
 8007c84:	4809      	ldr	r0, [pc, #36]	; (8007cac <MX_USB_DEVICE_Init+0x54>)
 8007c86:	f7fe fee1 	bl	8006a4c <USBD_CDC_RegisterInterface>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c90:	f7f9 f866 	bl	8000d60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c94:	4805      	ldr	r0, [pc, #20]	; (8007cac <MX_USB_DEVICE_Init+0x54>)
 8007c96:	f7fe ff89 	bl	8006bac <USBD_Start>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ca0:	f7f9 f85e 	bl	8000d60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ca4:	bf00      	nop
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	2000012c 	.word	0x2000012c
 8007cac:	20000418 	.word	0x20000418
 8007cb0:	20000018 	.word	0x20000018
 8007cb4:	2000011c 	.word	0x2000011c

08007cb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4905      	ldr	r1, [pc, #20]	; (8007cd4 <CDC_Init_FS+0x1c>)
 8007cc0:	4805      	ldr	r0, [pc, #20]	; (8007cd8 <CDC_Init_FS+0x20>)
 8007cc2:	f7fe fed9 	bl	8006a78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cc6:	4905      	ldr	r1, [pc, #20]	; (8007cdc <CDC_Init_FS+0x24>)
 8007cc8:	4803      	ldr	r0, [pc, #12]	; (8007cd8 <CDC_Init_FS+0x20>)
 8007cca:	f7fe feee 	bl	8006aaa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007cce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	20000ac4 	.word	0x20000ac4
 8007cd8:	20000418 	.word	0x20000418
 8007cdc:	200006dc 	.word	0x200006dc

08007ce0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ce4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr
	...

08007cf0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	6039      	str	r1, [r7, #0]
 8007cfa:	71fb      	strb	r3, [r7, #7]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d00:	79fb      	ldrb	r3, [r7, #7]
 8007d02:	2b23      	cmp	r3, #35	; 0x23
 8007d04:	d84a      	bhi.n	8007d9c <CDC_Control_FS+0xac>
 8007d06:	a201      	add	r2, pc, #4	; (adr r2, 8007d0c <CDC_Control_FS+0x1c>)
 8007d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0c:	08007d9d 	.word	0x08007d9d
 8007d10:	08007d9d 	.word	0x08007d9d
 8007d14:	08007d9d 	.word	0x08007d9d
 8007d18:	08007d9d 	.word	0x08007d9d
 8007d1c:	08007d9d 	.word	0x08007d9d
 8007d20:	08007d9d 	.word	0x08007d9d
 8007d24:	08007d9d 	.word	0x08007d9d
 8007d28:	08007d9d 	.word	0x08007d9d
 8007d2c:	08007d9d 	.word	0x08007d9d
 8007d30:	08007d9d 	.word	0x08007d9d
 8007d34:	08007d9d 	.word	0x08007d9d
 8007d38:	08007d9d 	.word	0x08007d9d
 8007d3c:	08007d9d 	.word	0x08007d9d
 8007d40:	08007d9d 	.word	0x08007d9d
 8007d44:	08007d9d 	.word	0x08007d9d
 8007d48:	08007d9d 	.word	0x08007d9d
 8007d4c:	08007d9d 	.word	0x08007d9d
 8007d50:	08007d9d 	.word	0x08007d9d
 8007d54:	08007d9d 	.word	0x08007d9d
 8007d58:	08007d9d 	.word	0x08007d9d
 8007d5c:	08007d9d 	.word	0x08007d9d
 8007d60:	08007d9d 	.word	0x08007d9d
 8007d64:	08007d9d 	.word	0x08007d9d
 8007d68:	08007d9d 	.word	0x08007d9d
 8007d6c:	08007d9d 	.word	0x08007d9d
 8007d70:	08007d9d 	.word	0x08007d9d
 8007d74:	08007d9d 	.word	0x08007d9d
 8007d78:	08007d9d 	.word	0x08007d9d
 8007d7c:	08007d9d 	.word	0x08007d9d
 8007d80:	08007d9d 	.word	0x08007d9d
 8007d84:	08007d9d 	.word	0x08007d9d
 8007d88:	08007d9d 	.word	0x08007d9d
 8007d8c:	08007d9d 	.word	0x08007d9d
 8007d90:	08007d9d 	.word	0x08007d9d
 8007d94:	08007d9d 	.word	0x08007d9d
 8007d98:	08007d9d 	.word	0x08007d9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007d9c:	bf00      	nop
  }

  return (USBD_OK);
 8007d9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop

08007dac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	4805      	ldr	r0, [pc, #20]	; (8007dd0 <CDC_Receive_FS+0x24>)
 8007dba:	f7fe fe76 	bl	8006aaa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007dbe:	4804      	ldr	r0, [pc, #16]	; (8007dd0 <CDC_Receive_FS+0x24>)
 8007dc0:	f7fe fe86 	bl	8006ad0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007dc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000418 	.word	0x20000418

08007dd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	6039      	str	r1, [r7, #0]
 8007dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2212      	movs	r2, #18
 8007de4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007de6:	4b03      	ldr	r3, [pc, #12]	; (8007df4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	20000148 	.word	0x20000148

08007df8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	6039      	str	r1, [r7, #0]
 8007e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2204      	movs	r2, #4
 8007e08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e0a:	4b03      	ldr	r3, [pc, #12]	; (8007e18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bc80      	pop	{r7}
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	2000015c 	.word	0x2000015c

08007e1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	6039      	str	r1, [r7, #0]
 8007e26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e28:	79fb      	ldrb	r3, [r7, #7]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d105      	bne.n	8007e3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	4907      	ldr	r1, [pc, #28]	; (8007e50 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e32:	4808      	ldr	r0, [pc, #32]	; (8007e54 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e34:	f7ff fe32 	bl	8007a9c <USBD_GetString>
 8007e38:	e004      	b.n	8007e44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	4904      	ldr	r1, [pc, #16]	; (8007e50 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e3e:	4805      	ldr	r0, [pc, #20]	; (8007e54 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e40:	f7ff fe2c 	bl	8007a9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e44:	4b02      	ldr	r3, [pc, #8]	; (8007e50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000eac 	.word	0x20000eac
 8007e54:	080085d4 	.word	0x080085d4

08007e58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	6039      	str	r1, [r7, #0]
 8007e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	4904      	ldr	r1, [pc, #16]	; (8007e78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e68:	4804      	ldr	r0, [pc, #16]	; (8007e7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e6a:	f7ff fe17 	bl	8007a9c <USBD_GetString>
  return USBD_StrDesc;
 8007e6e:	4b02      	ldr	r3, [pc, #8]	; (8007e78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	20000eac 	.word	0x20000eac
 8007e7c:	080085ec 	.word	0x080085ec

08007e80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	6039      	str	r1, [r7, #0]
 8007e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	221a      	movs	r2, #26
 8007e90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e92:	f000 f843 	bl	8007f1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e96:	4b02      	ldr	r3, [pc, #8]	; (8007ea0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	20000160 	.word	0x20000160

08007ea4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	6039      	str	r1, [r7, #0]
 8007eae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d105      	bne.n	8007ec2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	4907      	ldr	r1, [pc, #28]	; (8007ed8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007eba:	4808      	ldr	r0, [pc, #32]	; (8007edc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ebc:	f7ff fdee 	bl	8007a9c <USBD_GetString>
 8007ec0:	e004      	b.n	8007ecc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	4904      	ldr	r1, [pc, #16]	; (8007ed8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ec6:	4805      	ldr	r0, [pc, #20]	; (8007edc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ec8:	f7ff fde8 	bl	8007a9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ecc:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20000eac 	.word	0x20000eac
 8007edc:	08008600 	.word	0x08008600

08007ee0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	6039      	str	r1, [r7, #0]
 8007eea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d105      	bne.n	8007efe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	4907      	ldr	r1, [pc, #28]	; (8007f14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ef6:	4808      	ldr	r0, [pc, #32]	; (8007f18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ef8:	f7ff fdd0 	bl	8007a9c <USBD_GetString>
 8007efc:	e004      	b.n	8007f08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	4904      	ldr	r1, [pc, #16]	; (8007f14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f02:	4805      	ldr	r0, [pc, #20]	; (8007f18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f04:	f7ff fdca 	bl	8007a9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f08:	4b02      	ldr	r3, [pc, #8]	; (8007f14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	20000eac 	.word	0x20000eac
 8007f18:	0800860c 	.word	0x0800860c

08007f1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f22:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <Get_SerialNum+0x44>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f28:	4b0e      	ldr	r3, [pc, #56]	; (8007f64 <Get_SerialNum+0x48>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f2e:	4b0e      	ldr	r3, [pc, #56]	; (8007f68 <Get_SerialNum+0x4c>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4413      	add	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d009      	beq.n	8007f56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f42:	2208      	movs	r2, #8
 8007f44:	4909      	ldr	r1, [pc, #36]	; (8007f6c <Get_SerialNum+0x50>)
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f814 	bl	8007f74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f4c:	2204      	movs	r2, #4
 8007f4e:	4908      	ldr	r1, [pc, #32]	; (8007f70 <Get_SerialNum+0x54>)
 8007f50:	68b8      	ldr	r0, [r7, #8]
 8007f52:	f000 f80f 	bl	8007f74 <IntToUnicode>
  }
}
 8007f56:	bf00      	nop
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	1ffff7e8 	.word	0x1ffff7e8
 8007f64:	1ffff7ec 	.word	0x1ffff7ec
 8007f68:	1ffff7f0 	.word	0x1ffff7f0
 8007f6c:	20000162 	.word	0x20000162
 8007f70:	20000172 	.word	0x20000172

08007f74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f86:	2300      	movs	r3, #0
 8007f88:	75fb      	strb	r3, [r7, #23]
 8007f8a:	e027      	b.n	8007fdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	0f1b      	lsrs	r3, r3, #28
 8007f90:	2b09      	cmp	r3, #9
 8007f92:	d80b      	bhi.n	8007fac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	0f1b      	lsrs	r3, r3, #28
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	440b      	add	r3, r1
 8007fa4:	3230      	adds	r2, #48	; 0x30
 8007fa6:	b2d2      	uxtb	r2, r2
 8007fa8:	701a      	strb	r2, [r3, #0]
 8007faa:	e00a      	b.n	8007fc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	0f1b      	lsrs	r3, r3, #28
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	440b      	add	r3, r1
 8007fbc:	3237      	adds	r2, #55	; 0x37
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	3301      	adds	r3, #1
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	75fb      	strb	r3, [r7, #23]
 8007fdc:	7dfa      	ldrb	r2, [r7, #23]
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d3d3      	bcc.n	8007f8c <IntToUnicode+0x18>
  }
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
 8007fe8:	371c      	adds	r7, #28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr

08007ff0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a0d      	ldr	r2, [pc, #52]	; (8008034 <HAL_PCD_MspInit+0x44>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d113      	bne.n	800802a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008002:	4b0d      	ldr	r3, [pc, #52]	; (8008038 <HAL_PCD_MspInit+0x48>)
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	4a0c      	ldr	r2, [pc, #48]	; (8008038 <HAL_PCD_MspInit+0x48>)
 8008008:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800800c:	61d3      	str	r3, [r2, #28]
 800800e:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <HAL_PCD_MspInit+0x48>)
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800801a:	2200      	movs	r2, #0
 800801c:	2100      	movs	r1, #0
 800801e:	2014      	movs	r0, #20
 8008020:	f7f9 f8b7 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008024:	2014      	movs	r0, #20
 8008026:	f7f9 f8d0 	bl	80011ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800802a:	bf00      	nop
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	40005c00 	.word	0x40005c00
 8008038:	40021000 	.word	0x40021000

0800803c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f7fe fdf2 	bl	8006c3c <USBD_LL_SetupStage>
}
 8008058:	bf00      	nop
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008072:	78fa      	ldrb	r2, [r7, #3]
 8008074:	6879      	ldr	r1, [r7, #4]
 8008076:	4613      	mov	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	440b      	add	r3, r1
 8008080:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	78fb      	ldrb	r3, [r7, #3]
 8008088:	4619      	mov	r1, r3
 800808a:	f7fe fe24 	bl	8006cd6 <USBD_LL_DataOutStage>
}
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b082      	sub	sp, #8
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80080a8:	78fa      	ldrb	r2, [r7, #3]
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	440b      	add	r3, r1
 80080b6:	333c      	adds	r3, #60	; 0x3c
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	78fb      	ldrb	r3, [r7, #3]
 80080bc:	4619      	mov	r1, r3
 80080be:	f7fe fe7b 	bl	8006db8 <USBD_LL_DataInStage>
}
 80080c2:	bf00      	nop
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fe ff8b 	bl	8006ff4 <USBD_LL_SOF>
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080ee:	2301      	movs	r3, #1
 80080f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d001      	beq.n	80080fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80080fa:	f7f8 fe31 	bl	8000d60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008104:	7bfa      	ldrb	r2, [r7, #15]
 8008106:	4611      	mov	r1, r2
 8008108:	4618      	mov	r0, r3
 800810a:	f7fe ff3b 	bl	8006f84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe fef4 	bl	8006f02 <USBD_LL_Reset>
}
 800811a:	bf00      	nop
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008132:	4618      	mov	r0, r3
 8008134:	f7fe ff35 	bl	8006fa2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d005      	beq.n	800814c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <HAL_PCD_SuspendCallback+0x30>)
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	4a03      	ldr	r2, [pc, #12]	; (8008154 <HAL_PCD_SuspendCallback+0x30>)
 8008146:	f043 0306 	orr.w	r3, r3, #6
 800814a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	e000ed00 	.word	0xe000ed00

08008158 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe ff2f 	bl	8006fca <USBD_LL_Resume>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800817c:	4a28      	ldr	r2, [pc, #160]	; (8008220 <USBD_LL_Init+0xac>)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a26      	ldr	r2, [pc, #152]	; (8008220 <USBD_LL_Init+0xac>)
 8008188:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800818c:	4b24      	ldr	r3, [pc, #144]	; (8008220 <USBD_LL_Init+0xac>)
 800818e:	4a25      	ldr	r2, [pc, #148]	; (8008224 <USBD_LL_Init+0xb0>)
 8008190:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008192:	4b23      	ldr	r3, [pc, #140]	; (8008220 <USBD_LL_Init+0xac>)
 8008194:	2208      	movs	r2, #8
 8008196:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008198:	4b21      	ldr	r3, [pc, #132]	; (8008220 <USBD_LL_Init+0xac>)
 800819a:	2202      	movs	r2, #2
 800819c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800819e:	4b20      	ldr	r3, [pc, #128]	; (8008220 <USBD_LL_Init+0xac>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80081a4:	4b1e      	ldr	r3, [pc, #120]	; (8008220 <USBD_LL_Init+0xac>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80081aa:	4b1d      	ldr	r3, [pc, #116]	; (8008220 <USBD_LL_Init+0xac>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80081b0:	481b      	ldr	r0, [pc, #108]	; (8008220 <USBD_LL_Init+0xac>)
 80081b2:	f7f9 f9f1 	bl	8001598 <HAL_PCD_Init>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80081bc:	f7f8 fdd0 	bl	8000d60 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081c6:	2318      	movs	r3, #24
 80081c8:	2200      	movs	r2, #0
 80081ca:	2100      	movs	r1, #0
 80081cc:	f7fa fe67 	bl	8002e9e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081d6:	2358      	movs	r3, #88	; 0x58
 80081d8:	2200      	movs	r2, #0
 80081da:	2180      	movs	r1, #128	; 0x80
 80081dc:	f7fa fe5f 	bl	8002e9e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081e6:	23c0      	movs	r3, #192	; 0xc0
 80081e8:	2200      	movs	r2, #0
 80081ea:	2181      	movs	r1, #129	; 0x81
 80081ec:	f7fa fe57 	bl	8002e9e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80081fa:	2200      	movs	r2, #0
 80081fc:	2101      	movs	r1, #1
 80081fe:	f7fa fe4e 	bl	8002e9e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800820c:	2200      	movs	r2, #0
 800820e:	2182      	movs	r1, #130	; 0x82
 8008210:	f7fa fe45 	bl	8002e9e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	200010ac 	.word	0x200010ac
 8008224:	40005c00 	.word	0x40005c00

08008228 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800823e:	4618      	mov	r0, r3
 8008240:	f7f9 fab5 	bl	80017ae <HAL_PCD_Start>
 8008244:	4603      	mov	r3, r0
 8008246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	4618      	mov	r0, r3
 800824c:	f000 f94e 	bl	80084ec <USBD_Get_USB_Status>
 8008250:	4603      	mov	r3, r0
 8008252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008254:	7bbb      	ldrb	r3, [r7, #14]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	4608      	mov	r0, r1
 8008268:	4611      	mov	r1, r2
 800826a:	461a      	mov	r2, r3
 800826c:	4603      	mov	r3, r0
 800826e:	70fb      	strb	r3, [r7, #3]
 8008270:	460b      	mov	r3, r1
 8008272:	70bb      	strb	r3, [r7, #2]
 8008274:	4613      	mov	r3, r2
 8008276:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008286:	78bb      	ldrb	r3, [r7, #2]
 8008288:	883a      	ldrh	r2, [r7, #0]
 800828a:	78f9      	ldrb	r1, [r7, #3]
 800828c:	f7f9 fc2f 	bl	8001aee <HAL_PCD_EP_Open>
 8008290:	4603      	mov	r3, r0
 8008292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008294:	7bfb      	ldrb	r3, [r7, #15]
 8008296:	4618      	mov	r0, r3
 8008298:	f000 f928 	bl	80084ec <USBD_Get_USB_Status>
 800829c:	4603      	mov	r3, r0
 800829e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	4611      	mov	r1, r2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7f9 fc76 	bl	8001bba <HAL_PCD_EP_Close>
 80082ce:	4603      	mov	r3, r0
 80082d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 f909 	bl	80084ec <USBD_Get_USB_Status>
 80082da:	4603      	mov	r3, r0
 80082dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082de:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008302:	78fa      	ldrb	r2, [r7, #3]
 8008304:	4611      	mov	r1, r2
 8008306:	4618      	mov	r0, r3
 8008308:	f7f9 fd36 	bl	8001d78 <HAL_PCD_EP_SetStall>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	4618      	mov	r0, r3
 8008314:	f000 f8ea 	bl	80084ec <USBD_Get_USB_Status>
 8008318:	4603      	mov	r3, r0
 800831a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800831c:	7bbb      	ldrb	r3, [r7, #14]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008340:	78fa      	ldrb	r2, [r7, #3]
 8008342:	4611      	mov	r1, r2
 8008344:	4618      	mov	r0, r3
 8008346:	f7f9 fd77 	bl	8001e38 <HAL_PCD_EP_ClrStall>
 800834a:	4603      	mov	r3, r0
 800834c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	4618      	mov	r0, r3
 8008352:	f000 f8cb 	bl	80084ec <USBD_Get_USB_Status>
 8008356:	4603      	mov	r3, r0
 8008358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800835a:	7bbb      	ldrb	r3, [r7, #14]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008376:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800837c:	2b00      	cmp	r3, #0
 800837e:	da0c      	bge.n	800839a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008386:	68f9      	ldr	r1, [r7, #12]
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	00db      	lsls	r3, r3, #3
 8008392:	440b      	add	r3, r1
 8008394:	3302      	adds	r3, #2
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	e00b      	b.n	80083b2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083a0:	68f9      	ldr	r1, [r7, #12]
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	00db      	lsls	r3, r3, #3
 80083aa:	440b      	add	r3, r1
 80083ac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80083b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bc80      	pop	{r7}
 80083ba:	4770      	bx	lr

080083bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	4611      	mov	r1, r2
 80083da:	4618      	mov	r0, r3
 80083dc:	f7f9 fb62 	bl	8001aa4 <HAL_PCD_SetAddress>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 f880 	bl	80084ec <USBD_Get_USB_Status>
 80083ec:	4603      	mov	r3, r0
 80083ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b086      	sub	sp, #24
 80083fe:	af00      	add	r7, sp, #0
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	461a      	mov	r2, r3
 8008406:	460b      	mov	r3, r1
 8008408:	72fb      	strb	r3, [r7, #11]
 800840a:	4613      	mov	r3, r2
 800840c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800841c:	893b      	ldrh	r3, [r7, #8]
 800841e:	7af9      	ldrb	r1, [r7, #11]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	f7f9 fc66 	bl	8001cf2 <HAL_PCD_EP_Transmit>
 8008426:	4603      	mov	r3, r0
 8008428:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	4618      	mov	r0, r3
 800842e:	f000 f85d 	bl	80084ec <USBD_Get_USB_Status>
 8008432:	4603      	mov	r3, r0
 8008434:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008436:	7dbb      	ldrb	r3, [r7, #22]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	607a      	str	r2, [r7, #4]
 800844a:	461a      	mov	r2, r3
 800844c:	460b      	mov	r3, r1
 800844e:	72fb      	strb	r3, [r7, #11]
 8008450:	4613      	mov	r3, r2
 8008452:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008462:	893b      	ldrh	r3, [r7, #8]
 8008464:	7af9      	ldrb	r1, [r7, #11]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	f7f9 fbef 	bl	8001c4a <HAL_PCD_EP_Receive>
 800846c:	4603      	mov	r3, r0
 800846e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	4618      	mov	r0, r3
 8008474:	f000 f83a 	bl	80084ec <USBD_Get_USB_Status>
 8008478:	4603      	mov	r3, r0
 800847a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800847c:	7dbb      	ldrb	r3, [r7, #22]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	460b      	mov	r3, r1
 8008490:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008498:	78fa      	ldrb	r2, [r7, #3]
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f7f9 fc11 	bl	8001cc4 <HAL_PCD_EP_GetRxCount>
 80084a2:	4603      	mov	r3, r0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80084b4:	4b02      	ldr	r3, [pc, #8]	; (80084c0 <USBD_static_malloc+0x14>)
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bc80      	pop	{r7}
 80084be:	4770      	bx	lr
 80084c0:	2000019c 	.word	0x2000019c

080084c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]

}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bc80      	pop	{r7}
 80084d4:	4770      	bx	lr

080084d6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bc80      	pop	{r7}
 80084ea:	4770      	bx	lr

080084ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d817      	bhi.n	8008530 <USBD_Get_USB_Status+0x44>
 8008500:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <USBD_Get_USB_Status+0x1c>)
 8008502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008506:	bf00      	nop
 8008508:	08008519 	.word	0x08008519
 800850c:	0800851f 	.word	0x0800851f
 8008510:	08008525 	.word	0x08008525
 8008514:	0800852b 	.word	0x0800852b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
    break;
 800851c:	e00b      	b.n	8008536 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800851e:	2302      	movs	r3, #2
 8008520:	73fb      	strb	r3, [r7, #15]
    break;
 8008522:	e008      	b.n	8008536 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008524:	2301      	movs	r3, #1
 8008526:	73fb      	strb	r3, [r7, #15]
    break;
 8008528:	e005      	b.n	8008536 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800852a:	2302      	movs	r3, #2
 800852c:	73fb      	strb	r3, [r7, #15]
    break;
 800852e:	e002      	b.n	8008536 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008530:	2302      	movs	r3, #2
 8008532:	73fb      	strb	r3, [r7, #15]
    break;
 8008534:	bf00      	nop
  }
  return usb_status;
 8008536:	7bfb      	ldrb	r3, [r7, #15]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop

08008544 <__libc_init_array>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	2600      	movs	r6, #0
 8008548:	4d0c      	ldr	r5, [pc, #48]	; (800857c <__libc_init_array+0x38>)
 800854a:	4c0d      	ldr	r4, [pc, #52]	; (8008580 <__libc_init_array+0x3c>)
 800854c:	1b64      	subs	r4, r4, r5
 800854e:	10a4      	asrs	r4, r4, #2
 8008550:	42a6      	cmp	r6, r4
 8008552:	d109      	bne.n	8008568 <__libc_init_array+0x24>
 8008554:	f000 f822 	bl	800859c <_init>
 8008558:	2600      	movs	r6, #0
 800855a:	4d0a      	ldr	r5, [pc, #40]	; (8008584 <__libc_init_array+0x40>)
 800855c:	4c0a      	ldr	r4, [pc, #40]	; (8008588 <__libc_init_array+0x44>)
 800855e:	1b64      	subs	r4, r4, r5
 8008560:	10a4      	asrs	r4, r4, #2
 8008562:	42a6      	cmp	r6, r4
 8008564:	d105      	bne.n	8008572 <__libc_init_array+0x2e>
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	f855 3b04 	ldr.w	r3, [r5], #4
 800856c:	4798      	blx	r3
 800856e:	3601      	adds	r6, #1
 8008570:	e7ee      	b.n	8008550 <__libc_init_array+0xc>
 8008572:	f855 3b04 	ldr.w	r3, [r5], #4
 8008576:	4798      	blx	r3
 8008578:	3601      	adds	r6, #1
 800857a:	e7f2      	b.n	8008562 <__libc_init_array+0x1e>
 800857c:	0800862c 	.word	0x0800862c
 8008580:	0800862c 	.word	0x0800862c
 8008584:	0800862c 	.word	0x0800862c
 8008588:	08008630 	.word	0x08008630

0800858c <memset>:
 800858c:	4603      	mov	r3, r0
 800858e:	4402      	add	r2, r0
 8008590:	4293      	cmp	r3, r2
 8008592:	d100      	bne.n	8008596 <memset+0xa>
 8008594:	4770      	bx	lr
 8008596:	f803 1b01 	strb.w	r1, [r3], #1
 800859a:	e7f9      	b.n	8008590 <memset+0x4>

0800859c <_init>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	bf00      	nop
 80085a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a2:	bc08      	pop	{r3}
 80085a4:	469e      	mov	lr, r3
 80085a6:	4770      	bx	lr

080085a8 <_fini>:
 80085a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085aa:	bf00      	nop
 80085ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ae:	bc08      	pop	{r3}
 80085b0:	469e      	mov	lr, r3
 80085b2:	4770      	bx	lr
