
HotIron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d468  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800d574  0800d574  0001d574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da3c  0800da3c  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  0800da3c  0800da3c  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da3c  0800da3c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da3c  0800da3c  0001da3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da40  0800da40  0001da40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800da44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001488  20000214  0800dc58  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000169c  0800dc58  0002169c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7a8  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff2  00000000  00000000  0003c9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  000409d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  00041dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6b8  00000000  00000000  00043000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018baf  00000000  00000000  0005e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008feaa  00000000  00000000  00077267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107111  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055ec  00000000  00000000  00107164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000214 	.word	0x20000214
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d55c 	.word	0x0800d55c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000218 	.word	0x20000218
 8000148:	0800d55c 	.word	0x0800d55c

0800014c <delay_init>:
#include "main.h"

TIM_HandleTypeDef * htim;

void delay_init(TIM_HandleTypeDef * htim_i)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	htim = htim_i;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <delay_init+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htim);
 800015a:	4b04      	ldr	r3, [pc, #16]	; (800016c <delay_init+0x20>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4618      	mov	r0, r3
 8000160:	f006 fe7a 	bl	8006e58 <HAL_TIM_Base_Start>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000524 	.word	0x20000524

08000170 <delay_us>:

// delays for us count
void delay_us(uint16_t us)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim,0);
 800017a:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <delay_us+0x34>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2200      	movs	r2, #0
 8000182:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(htim) < us);
 8000184:	bf00      	nop
 8000186:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <delay_us+0x34>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800018e:	b29b      	uxth	r3, r3
 8000190:	88fa      	ldrh	r2, [r7, #6]
 8000192:	429a      	cmp	r2, r3
 8000194:	d8f7      	bhi.n	8000186 <delay_us+0x16>
}
 8000196:	bf00      	nop
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000524 	.word	0x20000524

080001a8 <lcd_create>:
 */
LCD_HandleTypeDef lcd_create(
		LCD_PortType port[], LCD_PinType pin[],
		LCD_PortType rs_port, LCD_PinType rs_pin,
		LCD_PortType en_port, LCD_PinType en_pin, LCD_ModeTypeDef mode)
{
 80001a8:	b5b0      	push	{r4, r5, r7, lr}
 80001aa:	b08a      	sub	sp, #40	; 0x28
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
 80001b4:	603b      	str	r3, [r7, #0]
	LCD_HandleTypeDef lcd;

	lcd.mode = mode;
 80001b6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80001ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80001be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80001c2:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80001c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001c6:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80001c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80001ca:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	613b      	str	r3, [r7, #16]

	delay_us(20000); // Display needs about 10ms to start, so you should provide delay
 80001d8:	f644 6020 	movw	r0, #20000	; 0x4e20
 80001dc:	f7ff ffc8 	bl	8000170 <delay_us>

	lcd_init(&lcd);
 80001e0:	f107 0310 	add.w	r3, r7, #16
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f80f 	bl	8000208 <lcd_init>

	return lcd;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	461d      	mov	r5, r3
 80001ee:	f107 0410 	add.w	r4, r7, #16
 80001f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001fa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001fe:	68f8      	ldr	r0, [r7, #12]
 8000200:	3728      	adds	r7, #40	; 0x28
 8000202:	46bd      	mov	sp, r7
 8000204:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000208 <lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void lcd_init(LCD_HandleTypeDef * lcd)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	7d9b      	ldrb	r3, [r3, #22]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d10f      	bne.n	8000238 <lcd_init+0x30>
	{
			lcd_write_command(lcd, 0x33);
 8000218:	2133      	movs	r1, #51	; 0x33
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f000 f8d4 	bl	80003c8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000220:	2132      	movs	r1, #50	; 0x32
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f8d0 	bl	80003c8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000228:	2128      	movs	r1, #40	; 0x28
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f8cc 	bl	80003c8 <lcd_write_command>
			lcd_8line_mode = false;
 8000230:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <lcd_init+0x60>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	e006      	b.n	8000246 <lcd_init+0x3e>
	}
	else
	{
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000238:	2138      	movs	r1, #56	; 0x38
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f000 f8c4 	bl	80003c8 <lcd_write_command>
		lcd_8line_mode = true;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <lcd_init+0x60>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
	}


	lcd_clear(lcd);											// Clear screen
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f000 f88c 	bl	8000364 <lcd_clear>
	lcd_mode(lcd, LCD_ENABLE, CURSOR_DISABLE, NO_BLINK);
 800024c:	2300      	movs	r3, #0
 800024e:	2200      	movs	r2, #0
 8000250:	2101      	movs	r1, #1
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 f80a 	bl	800026c <lcd_mode>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000258:	2106      	movs	r1, #6
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	f000 f8b4 	bl	80003c8 <lcd_write_command>
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000000 	.word	0x20000000

0800026c <lcd_mode>:

/**
 * Set display & cursor mode
 */
void lcd_mode(LCD_HandleTypeDef * lcd, LCD_ONOFF state, LCD_CURSOR cursor, LCD_BLINK blink)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	4608      	mov	r0, r1
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	4603      	mov	r3, r0
 800027c:	70fb      	strb	r3, [r7, #3]
 800027e:	460b      	mov	r3, r1
 8000280:	70bb      	strb	r3, [r7, #2]
 8000282:	4613      	mov	r3, r2
 8000284:	707b      	strb	r3, [r7, #1]
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL |
								 (state ?OPT_D:0) |
 8000286:	78fb      	ldrb	r3, [r7, #3]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <lcd_mode+0x24>
 800028c:	220c      	movs	r2, #12
 800028e:	e000      	b.n	8000292 <lcd_mode+0x26>
 8000290:	2208      	movs	r2, #8
 8000292:	78bb      	ldrb	r3, [r7, #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <lcd_mode+0x30>
 8000298:	2302      	movs	r3, #2
 800029a:	e000      	b.n	800029e <lcd_mode+0x32>
 800029c:	2300      	movs	r3, #0
 800029e:	4313      	orrs	r3, r2
 80002a0:	b25a      	sxtb	r2, r3
								 (cursor?OPT_C:0) |
								 (blink ?OPT_B:0));
 80002a2:	787b      	ldrb	r3, [r7, #1]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	bf14      	ite	ne
 80002a8:	2301      	movne	r3, #1
 80002aa:	2300      	moveq	r3, #0
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	b25b      	sxtb	r3, r3
								 (cursor?OPT_C:0) |
 80002b0:	4313      	orrs	r3, r2
 80002b2:	b25b      	sxtb	r3, r3
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL |
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4619      	mov	r1, r3
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f885 	bl	80003c8 <lcd_write_command>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <lcd_out>:

/**
 * Write a string on the current position
 */
void lcd_out(LCD_HandleTypeDef * lcd, uint8_t * arr, uint8_t length)
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b086      	sub	sp, #24
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	60f8      	str	r0, [r7, #12]
 80002ce:	60b9      	str	r1, [r7, #8]
 80002d0:	4613      	mov	r3, r2
 80002d2:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < length; i++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e00a      	b.n	80002f0 <lcd_out+0x2a>
	{
		lcd_write_data(lcd, arr[i]);
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	4413      	add	r3, r2
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	4619      	mov	r1, r3
 80002e4:	68f8      	ldr	r0, [r7, #12]
 80002e6:	f000 f8a9 	bl	800043c <lcd_write_data>
	for (int i = 0; i < length; i++)
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	3301      	adds	r3, #1
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	697a      	ldr	r2, [r7, #20]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	dbf0      	blt.n	80002da <lcd_out+0x14>
	}
}
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <lcd_string>:

/**
 * Write a string on the current position
 */
void lcd_string(LCD_HandleTypeDef * lcd, char * string)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b082      	sub	sp, #8
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	6039      	str	r1, [r7, #0]
	while (*string)
 800030c:	e007      	b.n	800031e <lcd_string+0x1c>
	{
		lcd_write_data(lcd, (uint8_t)*(string++));
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	1c5a      	adds	r2, r3, #1
 8000312:	603a      	str	r2, [r7, #0]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4619      	mov	r1, r3
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 f88f 	bl	800043c <lcd_write_data>
	while (*string)
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d1f3      	bne.n	800030e <lcd_string+0xc>
	}
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <lcd_set_xy>:

/**
 * Set the cursor position
 */
void lcd_set_xy(LCD_HandleTypeDef * lcd, uint8_t x, uint8_t y)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
 800033c:	4613      	mov	r3, r2
 800033e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[y] + x);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[y] + x);
 8000340:	78bb      	ldrb	r3, [r7, #2]
 8000342:	4a07      	ldr	r2, [pc, #28]	; (8000360 <lcd_set_xy+0x30>)
 8000344:	5cd2      	ldrb	r2, [r2, r3]
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	4413      	add	r3, r2
 800034a:	b2db      	uxtb	r3, r3
 800034c:	3b80      	subs	r3, #128	; 0x80
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4619      	mov	r1, r3
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 f838 	bl	80003c8 <lcd_write_command>
	#endif
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800d840 	.word	0x0800d840

08000364 <lcd_clear>:

/**
 * Clear the screen
 */
void lcd_clear(LCD_HandleTypeDef * lcd) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800036c:	2101      	movs	r1, #1
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f000 f82a 	bl	80003c8 <lcd_write_command>
	delay_us(maxi_delay);
 8000374:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000378:	f7ff fefa 	bl	8000170 <delay_us>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <lcd_define_chars>:
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
}

// load all 8 chars
void lcd_define_chars(LCD_HandleTypeDef * lcd, uint8_t bitmap[]){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
	lcd_write_command(lcd, SETCGRAM_ADDR);
 800038e:	2140      	movs	r1, #64	; 0x40
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f000 f819 	bl	80003c8 <lcd_write_command>
	for(uint8_t i=0;i<64;++i){
 8000396:	2300      	movs	r3, #0
 8000398:	73fb      	strb	r3, [r7, #15]
 800039a:	e00a      	b.n	80003b2 <lcd_define_chars+0x2e>
		lcd_write_data(lcd, bitmap[i]);
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	683a      	ldr	r2, [r7, #0]
 80003a0:	4413      	add	r3, r2
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	4619      	mov	r1, r3
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f000 f848 	bl	800043c <lcd_write_data>
	for(uint8_t i=0;i<64;++i){
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	3301      	adds	r3, #1
 80003b0:	73fb      	strb	r3, [r7, #15]
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	2b3f      	cmp	r3, #63	; 0x3f
 80003b6:	d9f1      	bls.n	800039c <lcd_define_chars+0x18>
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f000 f804 	bl	80003c8 <lcd_write_command>
}
 80003c0:	bf00      	nop
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(LCD_HandleTypeDef * lcd, uint8_t command)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6898      	ldr	r0, [r3, #8]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	899b      	ldrh	r3, [r3, #12]
 80003dc:	2200      	movs	r2, #0
 80003de:	4619      	mov	r1, r3
 80003e0:	f004 f889 	bl	80044f6 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	7d9b      	ldrb	r3, [r3, #22]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d118      	bne.n	800041e <lcd_write_command+0x56>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80003ec:	78fb      	ldrb	r3, [r7, #3]
 80003ee:	091b      	lsrs	r3, r3, #4
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	2204      	movs	r2, #4
 80003f4:	4619      	mov	r1, r3
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f000 f85a 	bl	80004b0 <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <lcd_write_command+0x70>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d002      	beq.n	800040a <lcd_write_command+0x42>
 8000404:	202a      	movs	r0, #42	; 0x2a
 8000406:	f7ff feb3 	bl	8000170 <delay_us>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	f003 030f 	and.w	r3, r3, #15
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2204      	movs	r2, #4
 8000414:	4619      	mov	r1, r3
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f000 f84a 	bl	80004b0 <lcd_write>
 800041c:	e005      	b.n	800042a <lcd_write_command+0x62>
	}
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
 800041e:	78fb      	ldrb	r3, [r7, #3]
 8000420:	2208      	movs	r2, #8
 8000422:	4619      	mov	r1, r3
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f000 f843 	bl	80004b0 <lcd_write>
	}
	delay_us(mini_delay);
 800042a:	202a      	movs	r0, #42	; 0x2a
 800042c:	f7ff fea0 	bl	8000170 <delay_us>
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000000 	.word	0x20000000

0800043c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(LCD_HandleTypeDef * lcd, uint8_t data)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6898      	ldr	r0, [r3, #8]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	899b      	ldrh	r3, [r3, #12]
 8000450:	2201      	movs	r2, #1
 8000452:	4619      	mov	r1, r3
 8000454:	f004 f84f 	bl	80044f6 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	7d9b      	ldrb	r3, [r3, #22]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d118      	bne.n	8000492 <lcd_write_data+0x56>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	091b      	lsrs	r3, r3, #4
 8000464:	b2db      	uxtb	r3, r3
 8000466:	2204      	movs	r2, #4
 8000468:	4619      	mov	r1, r3
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f000 f820 	bl	80004b0 <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <lcd_write_data+0x70>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d002      	beq.n	800047e <lcd_write_data+0x42>
 8000478:	202a      	movs	r0, #42	; 0x2a
 800047a:	f7ff fe79 	bl	8000170 <delay_us>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800047e:	78fb      	ldrb	r3, [r7, #3]
 8000480:	f003 030f 	and.w	r3, r3, #15
 8000484:	b2db      	uxtb	r3, r3
 8000486:	2204      	movs	r2, #4
 8000488:	4619      	mov	r1, r3
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f000 f810 	bl	80004b0 <lcd_write>
 8000490:	e005      	b.n	800049e <lcd_write_data+0x62>
	}
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	2208      	movs	r2, #8
 8000496:	4619      	mov	r1, r3
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f000 f809 	bl	80004b0 <lcd_write>
	}
	delay_us(mini_delay);
 800049e:	202a      	movs	r0, #42	; 0x2a
 80004a0:	f7ff fe66 	bl	8000170 <delay_us>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000000 	.word	0x20000000

080004b0 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(LCD_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
 80004bc:	4613      	mov	r3, r2
 80004be:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]
 80004c4:	e019      	b.n	80004fa <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	4413      	add	r3, r2
 80004d0:	6818      	ldr	r0, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	4413      	add	r3, r2
 80004dc:	8819      	ldrh	r1, [r3, #0]
 80004de:	78fa      	ldrb	r2, [r7, #3]
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	fa42 f303 	asr.w	r3, r2, r3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	f004 f801 	bl	80044f6 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	3301      	adds	r3, #1
 80004f8:	73fb      	strb	r3, [r7, #15]
 80004fa:	7bfa      	ldrb	r2, [r7, #15]
 80004fc:	78bb      	ldrb	r3, [r7, #2]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d3e1      	bcc.n	80004c6 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6918      	ldr	r0, [r3, #16]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	8a9b      	ldrh	r3, [r3, #20]
 800050a:	2201      	movs	r2, #1
 800050c:	4619      	mov	r1, r3
 800050e:	f003 fff2 	bl	80044f6 <HAL_GPIO_WritePin>
	DELAY_US(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff fe2c 	bl	8000170 <delay_us>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6918      	ldr	r0, [r3, #16]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	8a9b      	ldrh	r3, [r3, #20]
 8000520:	2200      	movs	r2, #0
 8000522:	4619      	mov	r1, r3
 8000524:	f003 ffe7 	bl	80044f6 <HAL_GPIO_WritePin>
	DELAY_US(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff fe21 	bl	8000170 <delay_us>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <int2string>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void int2string(uint32_t digit, uint8_t * buf, uint8_t len)
{
 8000538:	b480      	push	{r7}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	4613      	mov	r3, r2
 8000544:	71fb      	strb	r3, [r7, #7]
	for (int i = len - 1; i >= 0; i--)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	3b01      	subs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	e027      	b.n	800059e <int2string+0x66>
	{
		if (digit || (i == (len-1)))
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d104      	bne.n	800055e <int2string+0x26>
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	3b01      	subs	r3, #1
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	429a      	cmp	r2, r3
 800055c:	d117      	bne.n	800058e <int2string+0x56>
		{
			buf[i] = digit % 10 + '0';
 800055e:	68f9      	ldr	r1, [r7, #12]
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <int2string+0x78>)
 8000562:	fba3 2301 	umull	r2, r3, r3, r1
 8000566:	08da      	lsrs	r2, r3, #3
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	1aca      	subs	r2, r1, r3
 8000572:	b2d2      	uxtb	r2, r2
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	68b9      	ldr	r1, [r7, #8]
 8000578:	440b      	add	r3, r1
 800057a:	3230      	adds	r2, #48	; 0x30
 800057c:	b2d2      	uxtb	r2, r2
 800057e:	701a      	strb	r2, [r3, #0]
			digit /= 10;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <int2string+0x78>)
 8000584:	fba2 2303 	umull	r2, r3, r2, r3
 8000588:	08db      	lsrs	r3, r3, #3
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	e004      	b.n	8000598 <int2string+0x60>
		}
		else
			buf[i] = ' ';
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	4413      	add	r3, r2
 8000594:	2220      	movs	r2, #32
 8000596:	701a      	strb	r2, [r3, #0]
	for (int i = len - 1; i >= 0; i--)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3b01      	subs	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dad4      	bge.n	800054e <int2string+0x16>
	}
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	371c      	adds	r7, #28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	cccccccd 	.word	0xcccccccd

080005b4 <int2time>:
 * converts int to time string
 * @param time - time in msec
 * @param buf - provide buffer for 5 positions
 */
char * int2time(uint32_t time, uint8_t * buf)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	buf[4] = '\0';
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	3304      	adds	r3, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	if (time >= 600)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80005cc:	d31e      	bcc.n	800060c <int2time+0x58>
	{
		// display time in minutes
		buf[3] = 'm';
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	3303      	adds	r3, #3
 80005d2:	226d      	movs	r2, #109	; 0x6d
 80005d4:	701a      	strb	r2, [r3, #0]
		time /= 60;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <int2time+0xd0>)
 80005da:	fba2 2303 	umull	r2, r3, r2, r3
 80005de:	095b      	lsrs	r3, r3, #5
 80005e0:	607b      	str	r3, [r7, #4]
		if (time >= 999)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f240 32e6 	movw	r2, #998	; 0x3e6
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d909      	bls.n	8000600 <int2time+0x4c>
		{
			global_error |= errTIMEOUT;
 80005ec:	4b26      	ldr	r3, [pc, #152]	; (8000688 <int2time+0xd4>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	f043 0320 	orr.w	r3, r3, #32
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b24      	ldr	r3, [pc, #144]	; (8000688 <int2time+0xd4>)
 80005f8:	701a      	strb	r2, [r3, #0]
			time = 999;
 80005fa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80005fe:	607b      	str	r3, [r7, #4]
		}
		int2string(time, buf, 3);
 8000600:	2203      	movs	r2, #3
 8000602:	6839      	ldr	r1, [r7, #0]
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff97 	bl	8000538 <int2string>
 800060a:	e035      	b.n	8000678 <int2time+0xc4>
	} else
	{
		buf[1] = ':';
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	223a      	movs	r2, #58	; 0x3a
 8000612:	701a      	strb	r2, [r3, #0]
		buf[3] = time % 10 + '0';
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <int2time+0xd8>)
 8000618:	fba3 2301 	umull	r2, r3, r3, r1
 800061c:	08da      	lsrs	r2, r3, #3
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	1aca      	subs	r2, r1, r3
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	3303      	adds	r3, #3
 800062e:	3230      	adds	r2, #48	; 0x30
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	701a      	strb	r2, [r3, #0]
		time /= 10;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a15      	ldr	r2, [pc, #84]	; (800068c <int2time+0xd8>)
 8000638:	fba2 2303 	umull	r2, r3, r2, r3
 800063c:	08db      	lsrs	r3, r3, #3
 800063e:	607b      	str	r3, [r7, #4]
		buf[2] = time % 6 + '0';
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <int2time+0xdc>)
 8000644:	fba3 2301 	umull	r2, r3, r3, r1
 8000648:	089a      	lsrs	r2, r3, #2
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	1aca      	subs	r2, r1, r3
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	3302      	adds	r3, #2
 800065a:	3230      	adds	r2, #48	; 0x30
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	701a      	strb	r2, [r3, #0]
		time /= 6;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <int2time+0xdc>)
 8000664:	fba2 2303 	umull	r2, r3, r2, r3
 8000668:	089b      	lsrs	r3, r3, #2
 800066a:	607b      	str	r3, [r7, #4]
		buf[0] = time + '0';
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	3330      	adds	r3, #48	; 0x30
 8000672:	b2da      	uxtb	r2, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	701a      	strb	r2, [r3, #0]
	}
	return (char *)buf;
 8000678:	683b      	ldr	r3, [r7, #0]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	88888889 	.word	0x88888889
 8000688:	20000230 	.word	0x20000230
 800068c:	cccccccd 	.word	0xcccccccd
 8000690:	aaaaaaab 	.word	0xaaaaaaab

08000694 <init_lcd>:
	scDOT = 0xA5, // big dot in the middle
	scSIGMA = 0xF6, // sigma
};

void init_lcd(void)
{
 8000694:	b5b0      	push	{r4, r5, r7, lr}
 8000696:	b09a      	sub	sp, #104	; 0x68
 8000698:	af04      	add	r7, sp, #16
	  lcd = lcd_create(ports, pins,
 800069a:	4c25      	ldr	r4, [pc, #148]	; (8000730 <init_lcd+0x9c>)
 800069c:	4638      	mov	r0, r7
 800069e:	2300      	movs	r3, #0
 80006a0:	9303      	str	r3, [sp, #12]
 80006a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <init_lcd+0xa0>)
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <init_lcd+0xa0>)
 80006b4:	4a20      	ldr	r2, [pc, #128]	; (8000738 <init_lcd+0xa4>)
 80006b6:	4921      	ldr	r1, [pc, #132]	; (800073c <init_lcd+0xa8>)
 80006b8:	f7ff fd76 	bl	80001a8 <lcd_create>
 80006bc:	4625      	mov	r5, r4
 80006be:	463c      	mov	r4, r7
 80006c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006c8:	e885 0003 	stmia.w	r5, {r0, r1}
						hd_E_GPIO_Port, hd_E_Pin,
						LCD_4_BIT_MODE);

	  /* load symbols */

	  uint8_t symbols [] = {
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <init_lcd+0xac>)
 80006ce:	f107 0418 	add.w	r4, r7, #24
 80006d2:	461d      	mov	r5, r3
 80006d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			  	  	  	  	0x0, 0xe, 0x11, 0x15, 0x11, 0xe, 0x0, 0x0, // OFF
//			  	  	  	  	0x0, 0x4, 0x15, 0x15, 0x11, 0xe, 0x0, 0x0, // ON
//							0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x15, 0x0,   // ellips
//							0x0, 0x0, 0xa, 0x1f, 0xe, 0x4, 0x0, 0x0, // heart
	  };
	  lcd_define_chars(&lcd, symbols);
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4619      	mov	r1, r3
 80006ee:	4810      	ldr	r0, [pc, #64]	; (8000730 <init_lcd+0x9c>)
 80006f0:	f7ff fe48 	bl	8000384 <lcd_define_chars>
	  lcd_set_xy(&lcd, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <init_lcd+0x9c>)
 80006fa:	f7ff fe19 	bl	8000330 <lcd_set_xy>
	  lcd_string(&lcd, "Maksim Jeskevic ");
 80006fe:	4911      	ldr	r1, [pc, #68]	; (8000744 <init_lcd+0xb0>)
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <init_lcd+0x9c>)
 8000702:	f7ff fdfe 	bl	8000302 <lcd_string>
	  lcd_set_xy(&lcd, 0, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	2100      	movs	r1, #0
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <init_lcd+0x9c>)
 800070c:	f7ff fe10 	bl	8000330 <lcd_set_xy>
	  lcd_string(&lcd, "         2021 08");
 8000710:	490d      	ldr	r1, [pc, #52]	; (8000748 <init_lcd+0xb4>)
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <init_lcd+0x9c>)
 8000714:	f7ff fdf5 	bl	8000302 <lcd_string>
	  HAL_Delay(1500);
 8000718:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800071c:	f003 f9ba 	bl	8003a94 <HAL_Delay>
	  lcd_clear(&lcd);
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <init_lcd+0x9c>)
 8000722:	f7ff fe1f 	bl	8000364 <lcd_clear>
}
 8000726:	bf00      	nop
 8000728:	3758      	adds	r7, #88	; 0x58
 800072a:	46bd      	mov	sp, r7
 800072c:	bdb0      	pop	{r4, r5, r7, pc}
 800072e:	bf00      	nop
 8000730:	2000056c 	.word	0x2000056c
 8000734:	40010c00 	.word	0x40010c00
 8000738:	20000014 	.word	0x20000014
 800073c:	20000004 	.word	0x20000004
 8000740:	0800d59c 	.word	0x0800d59c
 8000744:	0800d574 	.word	0x0800d574
 8000748:	0800d588 	.word	0x0800d588

0800074c <do_button>:
/**
 * updates button state, checks if button long pressed
 * also updates encoder value register
 */
void do_button(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
	const uint32_t time_for_long_press = 700;
 8000752:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000756:	607b      	str	r3, [r7, #4]
	static uint32_t last_time = 0;
	static bool last_button = false;
	static uint32_t but_time = 0;
	if (HAL_GetTick() - last_time < 20)
 8000758:	f003 f992 	bl	8003a80 <HAL_GetTick>
 800075c:	4602      	mov	r2, r0
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <do_button+0xa4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	2b13      	cmp	r3, #19
 8000766:	d93e      	bls.n	80007e6 <do_button+0x9a>
		return;
	encoder.pressed = !HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin);
 8000768:	2108      	movs	r1, #8
 800076a:	4822      	ldr	r0, [pc, #136]	; (80007f4 <do_button+0xa8>)
 800076c:	f003 feac 	bl	80044c8 <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf0c      	ite	eq
 8000776:	2301      	moveq	r3, #1
 8000778:	2300      	movne	r3, #0
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <do_button+0xac>)
 800077e:	709a      	strb	r2, [r3, #2]
	if (encoder.pressed)
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <do_button+0xac>)
 8000782:	789b      	ldrb	r3, [r3, #2]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d018      	beq.n	80007ba <do_button+0x6e>
	{
		if (!last_button)
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <do_button+0xb0>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d004      	beq.n	80007a0 <do_button+0x54>
			but_time = HAL_GetTick();
 8000796:	f003 f973 	bl	8003a80 <HAL_GetTick>
 800079a:	4603      	mov	r3, r0
 800079c:	4a18      	ldr	r2, [pc, #96]	; (8000800 <do_button+0xb4>)
 800079e:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - but_time > time_for_long_press)
 80007a0:	f003 f96e 	bl	8003a80 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <do_button+0xb4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d206      	bcs.n	80007c0 <do_button+0x74>
			encoder.long_press = true;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <do_button+0xac>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	70da      	strb	r2, [r3, #3]
 80007b8:	e002      	b.n	80007c0 <do_button+0x74>
	}
	else
		encoder.long_press = false;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <do_button+0xac>)
 80007bc:	2200      	movs	r2, #0
 80007be:	70da      	strb	r2, [r3, #3]
	last_button = encoder.pressed;
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <do_button+0xac>)
 80007c2:	789a      	ldrb	r2, [r3, #2]
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <do_button+0xb0>)
 80007c6:	701a      	strb	r2, [r3, #0]

	/**
	 * reads register value and drops non-significant byte
	 * also inverts direction of encoder
	 */
	encoder.value = (-((int16_t)((TIM3->CNT)>>1)));
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <do_button+0xb8>)
 80007ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	425b      	negs	r3, r3
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	b21a      	sxth	r2, r3
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <do_button+0xac>)
 80007d8:	801a      	strh	r2, [r3, #0]

	last_time = HAL_GetTick();
 80007da:	f003 f951 	bl	8003a80 <HAL_GetTick>
 80007de:	4603      	mov	r3, r0
 80007e0:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <do_button+0xa4>)
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	e000      	b.n	80007e8 <do_button+0x9c>
		return;
 80007e6:	bf00      	nop
}
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000024c 	.word	0x2000024c
 80007f4:	40010c00 	.word	0x40010c00
 80007f8:	20000234 	.word	0x20000234
 80007fc:	20000250 	.word	0x20000250
 8000800:	20000254 	.word	0x20000254
 8000804:	40000400 	.word	0x40000400

08000808 <do_blink>:

void do_blink(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 500)
 800080c:	f003 f938 	bl	8003a80 <HAL_GetTick>
 8000810:	4602      	mov	r2, r0
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <do_blink+0x30>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800081c:	d30a      	bcc.n	8000834 <do_blink+0x2c>
		return;
	last_time = HAL_GetTick();
 800081e:	f003 f92f 	bl	8003a80 <HAL_GetTick>
 8000822:	4603      	mov	r3, r0
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <do_blink+0x30>)
 8000826:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <do_blink+0x34>)
 800082e:	f003 fe7a 	bl	8004526 <HAL_GPIO_TogglePin>
 8000832:	e000      	b.n	8000836 <do_blink+0x2e>
		return;
 8000834:	bf00      	nop
}
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000258 	.word	0x20000258
 800083c:	40011000 	.word	0x40011000

08000840 <get_max6675>:
/**
 * read temperature from max6675
 * and check for validity
 */
void get_max6675(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
	uint16_t data;
	HAL_SPI_ReceiveOnly(&hspi1, (uint8_t*)(&data), 1, 100);
 8000846:	1db9      	adds	r1, r7, #6
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2201      	movs	r2, #1
 800084c:	4810      	ldr	r0, [pc, #64]	; (8000890 <get_max6675+0x50>)
 800084e:	f002 fd49 	bl	80032e4 <HAL_SPI_ReceiveOnly>

	MAX6675.data_valid = !(data & 0b110);
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	f003 0306 	and.w	r3, r3, #6
 8000858:	2b00      	cmp	r3, #0
 800085a:	bf0c      	ite	eq
 800085c:	2301      	moveq	r3, #1
 800085e:	2300      	movne	r3, #0
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <get_max6675+0x54>)
 8000864:	709a      	strb	r2, [r3, #2]
	MAX6675.temperature = data >> 3;
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	08db      	lsrs	r3, r3, #3
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <get_max6675+0x54>)
 800086e:	801a      	strh	r2, [r3, #0]
	if (!(MAX6675.data_valid))
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <get_max6675+0x54>)
 8000872:	789b      	ldrb	r3, [r3, #2]
 8000874:	f083 0301 	eor.w	r3, r3, #1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <get_max6675+0x46>
		MAX6675.temperature = 0xfff;
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <get_max6675+0x54>)
 8000880:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000884:	801a      	strh	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000668 	.word	0x20000668
 8000894:	20000238 	.word	0x20000238

08000898 <ascii_max6675>:

void ascii_max6675(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
	if (MAX6675.data_valid)
 800089e:	4b39      	ldr	r3, [pc, #228]	; (8000984 <ascii_max6675+0xec>)
 80008a0:	789b      	ldrb	r3, [r3, #2]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d05a      	beq.n	800095c <ascii_max6675+0xc4>
		{
			uint32_t digit = 25*(MAX6675.temperature&0b11);
 80008a6:	4b37      	ldr	r3, [pc, #220]	; (8000984 <ascii_max6675+0xec>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	f003 0203 	and.w	r2, r3, #3
 80008ae:	4613      	mov	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	009a      	lsls	r2, r3, #2
 80008b6:	4413      	add	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
			digit += (MAX6675.temperature>>2)*1000;
 80008ba:	4b32      	ldr	r3, [pc, #200]	; (8000984 <ascii_max6675+0xec>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c8:	fb03 f302 	mul.w	r3, r3, r2
 80008cc:	461a      	mov	r2, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
			int8_t i = 6;
 80008d4:	2306      	movs	r3, #6
 80008d6:	72fb      	strb	r3, [r7, #11]
			while (digit)
 80008d8:	e01b      	b.n	8000912 <ascii_max6675+0x7a>
			{
				MAX6675.ascii[i--] = '0' + digit%10;
 80008da:	68f9      	ldr	r1, [r7, #12]
 80008dc:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <ascii_max6675+0xf0>)
 80008de:	fba3 2301 	umull	r2, r3, r3, r1
 80008e2:	08da      	lsrs	r2, r3, #3
 80008e4:	4613      	mov	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	1aca      	subs	r2, r1, r3
 80008ee:	b2d3      	uxtb	r3, r2
 80008f0:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80008f4:	b2ca      	uxtb	r2, r1
 80008f6:	3a01      	subs	r2, #1
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	72fa      	strb	r2, [r7, #11]
 80008fc:	3330      	adds	r3, #48	; 0x30
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b20      	ldr	r3, [pc, #128]	; (8000984 <ascii_max6675+0xec>)
 8000902:	440b      	add	r3, r1
 8000904:	70da      	strb	r2, [r3, #3]
				digit /= 10;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <ascii_max6675+0xf0>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	60fb      	str	r3, [r7, #12]
			while (digit)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1e0      	bne.n	80008da <ascii_max6675+0x42>
			}
			while (i >= 0)
 8000918:	e018      	b.n	800094c <ascii_max6675+0xb4>
			{
				if (i > 2)
 800091a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800091e:	2b02      	cmp	r3, #2
 8000920:	dd0a      	ble.n	8000938 <ascii_max6675+0xa0>
					MAX6675.ascii[i--] = '0';
 8000922:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000926:	b2d3      	uxtb	r3, r2
 8000928:	3b01      	subs	r3, #1
 800092a:	b2db      	uxtb	r3, r3
 800092c:	72fb      	strb	r3, [r7, #11]
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <ascii_max6675+0xec>)
 8000930:	4413      	add	r3, r2
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	70da      	strb	r2, [r3, #3]
 8000936:	e009      	b.n	800094c <ascii_max6675+0xb4>
				else
					MAX6675.ascii[i--] = ' ';
 8000938:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800093c:	b2d3      	uxtb	r3, r2
 800093e:	3b01      	subs	r3, #1
 8000940:	b2db      	uxtb	r3, r3
 8000942:	72fb      	strb	r3, [r7, #11]
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <ascii_max6675+0xec>)
 8000946:	4413      	add	r3, r2
 8000948:	2220      	movs	r2, #32
 800094a:	70da      	strb	r2, [r3, #3]
			while (i >= 0)
 800094c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000950:	2b00      	cmp	r3, #0
 8000952:	dae2      	bge.n	800091a <ascii_max6675+0x82>
			}
			MAX6675.ascii[4] = '.';
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <ascii_max6675+0xec>)
 8000956:	222e      	movs	r2, #46	; 0x2e
 8000958:	71da      	strb	r2, [r3, #7]
		else
		{
			for (int i = 0; i < sizeof(MAX6675); i ++)
				MAX6675.ascii[i] = 'x';
		}
}
 800095a:	e00e      	b.n	800097a <ascii_max6675+0xe2>
			for (int i = 0; i < sizeof(MAX6675); i ++)
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	e008      	b.n	8000974 <ascii_max6675+0xdc>
				MAX6675.ascii[i] = 'x';
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <ascii_max6675+0xec>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4413      	add	r3, r2
 8000968:	3303      	adds	r3, #3
 800096a:	2278      	movs	r2, #120	; 0x78
 800096c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(MAX6675); i ++)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3301      	adds	r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b09      	cmp	r3, #9
 8000978:	d9f3      	bls.n	8000962 <ascii_max6675+0xca>
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	20000238 	.word	0x20000238
 8000988:	cccccccd 	.word	0xcccccccd

0800098c <do_usb>:

void do_usb(void)
{
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	b0bf      	sub	sp, #252	; 0xfc
 8000990:	af08      	add	r7, sp, #32
	if (!tick)
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <do_usb+0xa0>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	f083 0301 	eor.w	r3, r3, #1
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d140      	bne.n	8000a22 <do_usb+0x96>
		return;
	tick = false; // sync with ticks
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <do_usb+0xa0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]

	uint8_t buf[200];
	uint16_t n = snprintf((char*)buf, 200,
			"Tick: %lu; PV: %u.%02u; SP: %u; PWM: %u; P: %li; I: %li; D: %li\r",
						HAL_GetTick()/1000,
 80009a6:	f003 f86b 	bl	8003a80 <HAL_GetTick>
 80009aa:	4603      	mov	r3, r0
	uint16_t n = snprintf((char*)buf, 200,
 80009ac:	4a20      	ldr	r2, [pc, #128]	; (8000a30 <do_usb+0xa4>)
 80009ae:	fba2 2303 	umull	r2, r3, r2, r3
 80009b2:	099d      	lsrs	r5, r3, #6
						MAX6675.temperature>>2,
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <do_usb+0xa8>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
	uint16_t n = snprintf((char*)buf, 200,
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	461e      	mov	r6, r3
						((MAX6675.temperature)&0b11)*25,
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <do_usb+0xa8>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	f003 0203 	and.w	r2, r3, #3
	uint16_t n = snprintf((char*)buf, 200,
 80009c6:	4613      	mov	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	009a      	lsls	r2, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <do_usb+0xac>)
 80009d2:	8812      	ldrh	r2, [r2, #0]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <do_usb+0xb0>)
 80009d8:	8812      	ldrh	r2, [r2, #0]
 80009da:	603a      	str	r2, [r7, #0]
 80009dc:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <do_usb+0xb4>)
 80009de:	6812      	ldr	r2, [r2, #0]
 80009e0:	4917      	ldr	r1, [pc, #92]	; (8000a40 <do_usb+0xb4>)
 80009e2:	6849      	ldr	r1, [r1, #4]
 80009e4:	4816      	ldr	r0, [pc, #88]	; (8000a40 <do_usb+0xb4>)
 80009e6:	6880      	ldr	r0, [r0, #8]
 80009e8:	f107 040c 	add.w	r4, r7, #12
 80009ec:	9006      	str	r0, [sp, #24]
 80009ee:	9105      	str	r1, [sp, #20]
 80009f0:	9204      	str	r2, [sp, #16]
 80009f2:	6839      	ldr	r1, [r7, #0]
 80009f4:	9103      	str	r1, [sp, #12]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	9202      	str	r2, [sp, #8]
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	9600      	str	r6, [sp, #0]
 80009fe:	462b      	mov	r3, r5
 8000a00:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <do_usb+0xb8>)
 8000a02:	21c8      	movs	r1, #200	; 0xc8
 8000a04:	4620      	mov	r0, r4
 8000a06:	f00c f95b 	bl	800ccc0 <sniprintf>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
						temperature_SP,
						pwm_value,
						PID.P,
						PID.I,
						PID.D);
	CDC_Transmit_FS(buf, n);
 8000a10:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00b fd40 	bl	800c4a0 <CDC_Transmit_FS>
 8000a20:	e000      	b.n	8000a24 <do_usb+0x98>
		return;
 8000a22:	bf00      	nop
}
 8000a24:	37dc      	adds	r7, #220	; 0xdc
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000246 	.word	0x20000246
 8000a30:	10624dd3 	.word	0x10624dd3
 8000a34:	20000238 	.word	0x20000238
 8000a38:	20000244 	.word	0x20000244
 8000a3c:	20000242 	.word	0x20000242
 8000a40:	200005cc 	.word	0x200005cc
 8000a44:	0800d5dc 	.word	0x0800d5dc

08000a48 <do_peep>:

void do_peep(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	static bool last_peep = false;

	static uint8_t peep_state = 0;

	if (peep.peep & (!last_peep))
 8000a4c:	4b64      	ldr	r3, [pc, #400]	; (8000be0 <do_peep+0x198>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b64      	ldr	r3, [pc, #400]	; (8000be4 <do_peep+0x19c>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	f083 0301 	eor.w	r3, r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00a      	beq.n	8000a78 <do_peep+0x30>
	{
		// first time
		peep_note = 0;
 8000a62:	4b61      	ldr	r3, [pc, #388]	; (8000be8 <do_peep+0x1a0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
		peep_state = 0;
 8000a68:	4b60      	ldr	r3, [pc, #384]	; (8000bec <do_peep+0x1a4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
		last_time = HAL_GetTick();
 8000a6e:	f003 f807 	bl	8003a80 <HAL_GetTick>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4a5e      	ldr	r2, [pc, #376]	; (8000bf0 <do_peep+0x1a8>)
 8000a76:	6013      	str	r3, [r2, #0]
	}

	if (peep.peep)
 8000a78:	4b59      	ldr	r3, [pc, #356]	; (8000be0 <do_peep+0x198>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f000 809e 	beq.w	8000bbe <do_peep+0x176>
	{
		switch (peep_state) {
 8000a82:	4b5a      	ldr	r3, [pc, #360]	; (8000bec <do_peep+0x1a4>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	f200 8091 	bhi.w	8000bae <do_peep+0x166>
 8000a8c:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <do_peep+0x4c>)
 8000a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a92:	bf00      	nop
 8000a94:	08000aa9 	.word	0x08000aa9
 8000a98:	08000abd 	.word	0x08000abd
 8000a9c:	08000b1d 	.word	0x08000b1d
 8000aa0:	08000b73 	.word	0x08000b73
 8000aa4:	08000b89 	.word	0x08000b89
		case 0: // init
			peep.stop = false;
 8000aa8:	4b4d      	ldr	r3, [pc, #308]	; (8000be0 <do_peep+0x198>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	705a      	strb	r2, [r3, #1]
			peep_note = 0;
 8000aae:	4b4e      	ldr	r3, [pc, #312]	; (8000be8 <do_peep+0x1a0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
			peep_state = 1;
 8000ab4:	4b4d      	ldr	r3, [pc, #308]	; (8000bec <do_peep+0x1a4>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
			break;
 8000aba:	e08b      	b.n	8000bd4 <do_peep+0x18c>
		case 1: // load note and start
			if (notes[peep_note].size) // if something to play, start PWM with DMA
 8000abc:	4b4a      	ldr	r3, [pc, #296]	; (8000be8 <do_peep+0x1a0>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4a4c      	ldr	r2, [pc, #304]	; (8000bf4 <do_peep+0x1ac>)
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	440b      	add	r3, r1
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	3304      	adds	r3, #4
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d019      	beq.n	8000b0a <do_peep+0xc2>
			{
				HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2,
 8000ad6:	4b44      	ldr	r3, [pc, #272]	; (8000be8 <do_peep+0x1a0>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4619      	mov	r1, r3
						(uint32_t *)notes[peep_note].note, notes[peep_note].size);
 8000adc:	4a45      	ldr	r2, [pc, #276]	; (8000bf4 <do_peep+0x1ac>)
 8000ade:	460b      	mov	r3, r1
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	440b      	add	r3, r1
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b3f      	ldr	r3, [pc, #252]	; (8000be8 <do_peep+0x1a0>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	4940      	ldr	r1, [pc, #256]	; (8000bf4 <do_peep+0x1ac>)
 8000af2:	4603      	mov	r3, r0
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4403      	add	r3, r0
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	440b      	add	r3, r1
 8000afc:	3304      	adds	r3, #4
 8000afe:	781b      	ldrb	r3, [r3, #0]
				HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2,
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	2104      	movs	r1, #4
 8000b04:	483c      	ldr	r0, [pc, #240]	; (8000bf8 <do_peep+0x1b0>)
 8000b06:	f006 fb95 	bl	8007234 <HAL_TIM_PWM_Start_DMA>
			}
			last_time = HAL_GetTick();
 8000b0a:	f002 ffb9 	bl	8003a80 <HAL_GetTick>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a37      	ldr	r2, [pc, #220]	; (8000bf0 <do_peep+0x1a8>)
 8000b12:	6013      	str	r3, [r2, #0]
			peep_state = 2;
 8000b14:	4b35      	ldr	r3, [pc, #212]	; (8000bec <do_peep+0x1a4>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	701a      	strb	r2, [r3, #0]
			break;
 8000b1a:	e05b      	b.n	8000bd4 <do_peep+0x18c>
		case 2: // wait note length
			if (HAL_GetTick() - last_time > notes[peep_note].time)
 8000b1c:	f002 ffb0 	bl	8003a80 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <do_peep+0x1a8>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	1ad2      	subs	r2, r2, r3
 8000b28:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <do_peep+0x1a0>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	4931      	ldr	r1, [pc, #196]	; (8000bf4 <do_peep+0x1ac>)
 8000b30:	4603      	mov	r3, r0
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4403      	add	r3, r0
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	440b      	add	r3, r1
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d945      	bls.n	8000bce <do_peep+0x186>
			{
				if (notes[peep_note].size == 0)
 8000b42:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <do_peep+0x1a0>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	4a2a      	ldr	r2, [pc, #168]	; (8000bf4 <do_peep+0x1ac>)
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	440b      	add	r3, r1
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	3304      	adds	r3, #4
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d103      	bne.n	8000b64 <do_peep+0x11c>
				{
					// we need only pause, PWM & DMA already disabled
					peep_state = 4;
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <do_peep+0x1a4>)
 8000b5e:	2204      	movs	r2, #4
 8000b60:	701a      	strb	r2, [r3, #0]
				{
					peep.stop = true;
					peep_state = 3;
				}
			}
			break;
 8000b62:	e034      	b.n	8000bce <do_peep+0x186>
					peep.stop = true;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <do_peep+0x198>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	705a      	strb	r2, [r3, #1]
					peep_state = 3;
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <do_peep+0x1a4>)
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	701a      	strb	r2, [r3, #0]
			break;
 8000b70:	e02d      	b.n	8000bce <do_peep+0x186>
		case 3: // wait PWM stop
			if (!peep.stop)
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <do_peep+0x198>)
 8000b74:	785b      	ldrb	r3, [r3, #1]
 8000b76:	f083 0301 	eor.w	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d028      	beq.n	8000bd2 <do_peep+0x18a>
				peep_state = 4;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <do_peep+0x1a4>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	701a      	strb	r2, [r3, #0]
			break;
 8000b86:	e024      	b.n	8000bd2 <do_peep+0x18a>
		case 4: // check if next note to play
			if (++peep_note < notes_size)
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <do_peep+0x1a0>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <do_peep+0x1a0>)
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <do_peep+0x1a0>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2204      	movs	r2, #4
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d203      	bcs.n	8000ba6 <do_peep+0x15e>
			{
				peep_state = 1; // play next note
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <do_peep+0x1a4>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
			else
			{
				// we are finished, start again
				peep_state = 0;
			}
			break;
 8000ba4:	e016      	b.n	8000bd4 <do_peep+0x18c>
				peep_state = 0;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <do_peep+0x1a4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
			break;
 8000bac:	e012      	b.n	8000bd4 <do_peep+0x18c>
		default:
			global_error |= errFATAL;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <do_peep+0x1b4>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <do_peep+0x1b4>)
 8000bba:	701a      	strb	r2, [r3, #0]
			break;
 8000bbc:	e00a      	b.n	8000bd4 <do_peep+0x18c>
		}
	}
	else if (last_peep)
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <do_peep+0x19c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d006      	beq.n	8000bd4 <do_peep+0x18c>
	{
		peep.stop = true;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <do_peep+0x198>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	705a      	strb	r2, [r3, #1]
 8000bcc:	e002      	b.n	8000bd4 <do_peep+0x18c>
			break;
 8000bce:	bf00      	nop
 8000bd0:	e000      	b.n	8000bd4 <do_peep+0x18c>
			break;
 8000bd2:	bf00      	nop
	}
	last_peep = peep.peep;
 8000bd4:	4b02      	ldr	r3, [pc, #8]	; (8000be0 <do_peep+0x198>)
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <do_peep+0x19c>)
 8000bda:	701a      	strb	r2, [r3, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000248 	.word	0x20000248
 8000be4:	2000025c 	.word	0x2000025c
 8000be8:	2000025d 	.word	0x2000025d
 8000bec:	2000025e 	.word	0x2000025e
 8000bf0:	20000260 	.word	0x20000260
 8000bf4:	0800d9a8 	.word	0x0800d9a8
 8000bf8:	20000584 	.word	0x20000584
 8000bfc:	20000230 	.word	0x20000230

08000c00 <lcd_mini_clear.8549>:

	/**
	 * clears left part of the display
	 */
	void lcd_mini_clear(LCD_HandleTypeDef * lcd)
	{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	f8c7 c000 	str.w	ip, [r7]
		lcd_mode(lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2101      	movs	r1, #1
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff fb2a 	bl	800026c <lcd_mode>
		lcd_set_xy(lcd, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fb87 	bl	8000330 <lcd_set_xy>
		lcd_string(lcd, "            ");
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <lcd_mini_clear.8549+0x44>)
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff fb6c 	bl	8000302 <lcd_string>
		lcd_set_xy(lcd, 0, 1);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fb7e 	bl	8000330 <lcd_set_xy>
		lcd_string(lcd, "             ");
 8000c34:	4904      	ldr	r1, [pc, #16]	; (8000c48 <lcd_mini_clear.8549+0x48>)
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fb63 	bl	8000302 <lcd_string>
	}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	0800d620 	.word	0x0800d620
 8000c48:	0800d630 	.word	0x0800d630

08000c4c <do_interface>:
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
void do_interface(void)
 8000c52:	f107 0318 	add.w	r3, r7, #24
 8000c56:	607b      	str	r3, [r7, #4]
	if (first_time)
 8000c58:	4ba0      	ldr	r3, [pc, #640]	; (8000edc <do_interface+0x290>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d023      	beq.n	8000ca8 <do_interface+0x5c>
		max_steps = sizeof(steps_default)/sizeof(steps_default[0]);
 8000c60:	4b9f      	ldr	r3, [pc, #636]	; (8000ee0 <do_interface+0x294>)
 8000c62:	2202      	movs	r2, #2
 8000c64:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < max_steps; i ++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e014      	b.n	8000c96 <do_interface+0x4a>
			steps[i].temp = steps_default[i].temp;
 8000c6c:	4a9d      	ldr	r2, [pc, #628]	; (8000ee4 <do_interface+0x298>)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000c74:	499c      	ldr	r1, [pc, #624]	; (8000ee8 <do_interface+0x29c>)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			steps[i].time = steps_default[i].time;
 8000c7c:	4a99      	ldr	r2, [pc, #612]	; (8000ee4 <do_interface+0x298>)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	4413      	add	r3, r2
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	4998      	ldr	r1, [pc, #608]	; (8000ee8 <do_interface+0x29c>)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	440b      	add	r3, r1
 8000c8e:	605a      	str	r2, [r3, #4]
		for (int i = 0; i < max_steps; i ++)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b92      	ldr	r3, [pc, #584]	; (8000ee0 <do_interface+0x294>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	dbe4      	blt.n	8000c6c <do_interface+0x20>
		first_time = false;
 8000ca2:	4b8e      	ldr	r3, [pc, #568]	; (8000edc <do_interface+0x290>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
	/**
	 * this happens every 100 ms
	 */
	static uint32_t last_time = 0;
	static bool last_button = false;
	if (HAL_GetTick() - last_time < 100)
 8000ca8:	f002 feea 	bl	8003a80 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	4b8f      	ldr	r3, [pc, #572]	; (8000eec <do_interface+0x2a0>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b63      	cmp	r3, #99	; 0x63
 8000cb6:	f240 8358 	bls.w	800136a <do_interface+0x71e>
		return;
	last_time = HAL_GetTick();
 8000cba:	f002 fee1 	bl	8003a80 <HAL_GetTick>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a8a      	ldr	r2, [pc, #552]	; (8000eec <do_interface+0x2a0>)
 8000cc2:	6013      	str	r3, [r2, #0]

	/*** Right always visible section ***/

	int32_t dT=((int32_t)temperature_SP)-((int32_t)(MAX6675.temperature>>2));
 8000cc4:	4b8a      	ldr	r3, [pc, #552]	; (8000ef0 <do_interface+0x2a4>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b8a      	ldr	r3, [pc, #552]	; (8000ef4 <do_interface+0x2a8>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	60bb      	str	r3, [r7, #8]

	lcd_set_xy(&lcd, 12, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	210c      	movs	r1, #12
 8000cda:	4887      	ldr	r0, [pc, #540]	; (8000ef8 <do_interface+0x2ac>)
 8000cdc:	f7ff fb28 	bl	8000330 <lcd_set_xy>
	if (MAX6675.data_valid)
 8000ce0:	4b84      	ldr	r3, [pc, #528]	; (8000ef4 <do_interface+0x2a8>)
 8000ce2:	789b      	ldrb	r3, [r3, #2]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00a      	beq.n	8000cfe <do_interface+0xb2>
	{
		lcd_out(&lcd, MAX6675.ascii+1, 3);
 8000ce8:	4b84      	ldr	r3, [pc, #528]	; (8000efc <do_interface+0x2b0>)
 8000cea:	2203      	movs	r2, #3
 8000cec:	4619      	mov	r1, r3
 8000cee:	4882      	ldr	r0, [pc, #520]	; (8000ef8 <do_interface+0x2ac>)
 8000cf0:	f7ff fae9 	bl	80002c6 <lcd_out>
		lcd_write_data(&lcd, scGRAD);
 8000cf4:	21df      	movs	r1, #223	; 0xdf
 8000cf6:	4880      	ldr	r0, [pc, #512]	; (8000ef8 <do_interface+0x2ac>)
 8000cf8:	f7ff fba0 	bl	800043c <lcd_write_data>
 8000cfc:	e00c      	b.n	8000d18 <do_interface+0xcc>
	}
	else
	{
		lcd_string(&lcd, "___");
 8000cfe:	4980      	ldr	r1, [pc, #512]	; (8000f00 <do_interface+0x2b4>)
 8000d00:	487d      	ldr	r0, [pc, #500]	; (8000ef8 <do_interface+0x2ac>)
 8000d02:	f7ff fafe 	bl	8000302 <lcd_string>
		temperature_SP = 0;
 8000d06:	4b7a      	ldr	r3, [pc, #488]	; (8000ef0 <do_interface+0x2a4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	801a      	strh	r2, [r3, #0]
		global_error = errMAX6675_invalid;
 8000d0c:	4b7d      	ldr	r3, [pc, #500]	; (8000f04 <do_interface+0x2b8>)
 8000d0e:	2210      	movs	r2, #16
 8000d10:	701a      	strb	r2, [r3, #0]
		ui_state = uiMALFUNCTION;
 8000d12:	4b7d      	ldr	r3, [pc, #500]	; (8000f08 <do_interface+0x2bc>)
 8000d14:	2209      	movs	r2, #9
 8000d16:	701a      	strb	r2, [r3, #0]
	}

	lcd_set_xy(&lcd, 13, 1);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	210d      	movs	r1, #13
 8000d1c:	4876      	ldr	r0, [pc, #472]	; (8000ef8 <do_interface+0x2ac>)
 8000d1e:	f7ff fb07 	bl	8000330 <lcd_set_xy>
	// first symbol
	if (encoder.pressed)
 8000d22:	4b7a      	ldr	r3, [pc, #488]	; (8000f0c <do_interface+0x2c0>)
 8000d24:	789b      	ldrb	r3, [r3, #2]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d004      	beq.n	8000d34 <do_interface+0xe8>
		lcd_write_data(&lcd, scDOT);
 8000d2a:	21a5      	movs	r1, #165	; 0xa5
 8000d2c:	4872      	ldr	r0, [pc, #456]	; (8000ef8 <do_interface+0x2ac>)
 8000d2e:	f7ff fb85 	bl	800043c <lcd_write_data>
 8000d32:	e003      	b.n	8000d3c <do_interface+0xf0>
	else
		lcd_write_data(&lcd, ' ');
 8000d34:	2120      	movs	r1, #32
 8000d36:	4870      	ldr	r0, [pc, #448]	; (8000ef8 <do_interface+0x2ac>)
 8000d38:	f7ff fb80 	bl	800043c <lcd_write_data>
	// second symbol
	if (!MAX6675.data_valid)
 8000d3c:	4b6d      	ldr	r3, [pc, #436]	; (8000ef4 <do_interface+0x2a8>)
 8000d3e:	789b      	ldrb	r3, [r3, #2]
 8000d40:	f083 0301 	eor.w	r3, r3, #1
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d004      	beq.n	8000d54 <do_interface+0x108>
		lcd_write_data(&lcd, ' ');
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	486a      	ldr	r0, [pc, #424]	; (8000ef8 <do_interface+0x2ac>)
 8000d4e:	f7ff fb75 	bl	800043c <lcd_write_data>
 8000d52:	e04e      	b.n	8000df2 <do_interface+0x1a6>
	else
	{
		if ((temperature_SP == 0) && (MAX6675.temperature < (HOT_TEMP<<2)))
 8000d54:	4b66      	ldr	r3, [pc, #408]	; (8000ef0 <do_interface+0x2a4>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d108      	bne.n	8000d6e <do_interface+0x122>
 8000d5c:	4b65      	ldr	r3, [pc, #404]	; (8000ef4 <do_interface+0x2a8>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	2b9f      	cmp	r3, #159	; 0x9f
 8000d62:	d804      	bhi.n	8000d6e <do_interface+0x122>
			lcd_write_data(&lcd, '-');
 8000d64:	212d      	movs	r1, #45	; 0x2d
 8000d66:	4864      	ldr	r0, [pc, #400]	; (8000ef8 <do_interface+0x2ac>)
 8000d68:	f7ff fb68 	bl	800043c <lcd_write_data>
 8000d6c:	e041      	b.n	8000df2 <do_interface+0x1a6>
		else if (((pwm_value + 9)/10)*3 > ticktack)
 8000d6e:	4b68      	ldr	r3, [pc, #416]	; (8000f10 <do_interface+0x2c4>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	3309      	adds	r3, #9
 8000d74:	4a67      	ldr	r2, [pc, #412]	; (8000f14 <do_interface+0x2c8>)
 8000d76:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7a:	1092      	asrs	r2, r2, #2
 8000d7c:	17db      	asrs	r3, r3, #31
 8000d7e:	1ad2      	subs	r2, r2, r3
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	4a64      	ldr	r2, [pc, #400]	; (8000f18 <do_interface+0x2cc>)
 8000d88:	7812      	ldrb	r2, [r2, #0]
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	dd10      	ble.n	8000db0 <do_interface+0x164>
		{
			if ((STEP_TEMP > dT) && (dT > -STEP_TEMP))
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	dc08      	bgt.n	8000da6 <do_interface+0x15a>
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	f113 0f04 	cmn.w	r3, #4
 8000d9a:	db04      	blt.n	8000da6 <do_interface+0x15a>
				lcd_write_data(&lcd, ccUPEQ);
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4856      	ldr	r0, [pc, #344]	; (8000ef8 <do_interface+0x2ac>)
 8000da0:	f7ff fb4c 	bl	800043c <lcd_write_data>
 8000da4:	e025      	b.n	8000df2 <do_interface+0x1a6>
			else
				lcd_write_data(&lcd, ccUP);
 8000da6:	2103      	movs	r1, #3
 8000da8:	4853      	ldr	r0, [pc, #332]	; (8000ef8 <do_interface+0x2ac>)
 8000daa:	f7ff fb47 	bl	800043c <lcd_write_data>
 8000dae:	e020      	b.n	8000df2 <do_interface+0x1a6>
		}
		else if (dT >= STEP_TEMP)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	dd04      	ble.n	8000dc0 <do_interface+0x174>
			lcd_write_data(&lcd, '^');
 8000db6:	215e      	movs	r1, #94	; 0x5e
 8000db8:	484f      	ldr	r0, [pc, #316]	; (8000ef8 <do_interface+0x2ac>)
 8000dba:	f7ff fb3f 	bl	800043c <lcd_write_data>
 8000dbe:	e018      	b.n	8000df2 <do_interface+0x1a6>
		else if ((STEP_TEMP > dT) && (dT > -STEP_TEMP))
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	dc08      	bgt.n	8000dd8 <do_interface+0x18c>
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	f113 0f04 	cmn.w	r3, #4
 8000dcc:	db04      	blt.n	8000dd8 <do_interface+0x18c>
		{
			lcd_write_data(&lcd, '=');
 8000dce:	213d      	movs	r1, #61	; 0x3d
 8000dd0:	4849      	ldr	r0, [pc, #292]	; (8000ef8 <do_interface+0x2ac>)
 8000dd2:	f7ff fb33 	bl	800043c <lcd_write_data>
 8000dd6:	e00c      	b.n	8000df2 <do_interface+0x1a6>
		}
		else if (dT <= -STEP_TEMP)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	f113 0f04 	cmn.w	r3, #4
 8000dde:	da04      	bge.n	8000dea <do_interface+0x19e>
			lcd_write_data(&lcd, ccDOWN);
 8000de0:	2101      	movs	r1, #1
 8000de2:	4845      	ldr	r0, [pc, #276]	; (8000ef8 <do_interface+0x2ac>)
 8000de4:	f7ff fb2a 	bl	800043c <lcd_write_data>
 8000de8:	e003      	b.n	8000df2 <do_interface+0x1a6>
		else
			lcd_write_data(&lcd, '?'); // should never happen
 8000dea:	213f      	movs	r1, #63	; 0x3f
 8000dec:	4842      	ldr	r0, [pc, #264]	; (8000ef8 <do_interface+0x2ac>)
 8000dee:	f7ff fb25 	bl	800043c <lcd_write_data>

	}
	// last symbol
	if ((MAX6675.temperature > (HOT_TEMP<<2)) || (!MAX6675.data_valid))
 8000df2:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <do_interface+0x2a8>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	2ba0      	cmp	r3, #160	; 0xa0
 8000df8:	d806      	bhi.n	8000e08 <do_interface+0x1bc>
 8000dfa:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <do_interface+0x2a8>)
 8000dfc:	789b      	ldrb	r3, [r3, #2]
 8000dfe:	f083 0301 	eor.w	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00d      	beq.n	8000e24 <do_interface+0x1d8>
	{
		// todo enable red leds!
		if (ticktack < 5)
 8000e08:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <do_interface+0x2cc>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d804      	bhi.n	8000e1a <do_interface+0x1ce>
			lcd_write_data(&lcd, ccHOT);
 8000e10:	2104      	movs	r1, #4
 8000e12:	4839      	ldr	r0, [pc, #228]	; (8000ef8 <do_interface+0x2ac>)
 8000e14:	f7ff fb12 	bl	800043c <lcd_write_data>
		if (ticktack < 5)
 8000e18:	e011      	b.n	8000e3e <do_interface+0x1f2>
		else
			lcd_write_data(&lcd, ccHOTmirror);
 8000e1a:	2105      	movs	r1, #5
 8000e1c:	4836      	ldr	r0, [pc, #216]	; (8000ef8 <do_interface+0x2ac>)
 8000e1e:	f7ff fb0d 	bl	800043c <lcd_write_data>
		if (ticktack < 5)
 8000e22:	e00c      	b.n	8000e3e <do_interface+0x1f2>
	}
	else
	{
		if (ticktack < 5)
 8000e24:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <do_interface+0x2cc>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d804      	bhi.n	8000e36 <do_interface+0x1ea>
			lcd_write_data(&lcd, ccDOT);
 8000e2c:	2107      	movs	r1, #7
 8000e2e:	4832      	ldr	r0, [pc, #200]	; (8000ef8 <do_interface+0x2ac>)
 8000e30:	f7ff fb04 	bl	800043c <lcd_write_data>
 8000e34:	e003      	b.n	8000e3e <do_interface+0x1f2>
		else
			lcd_write_data(&lcd, ' ');
 8000e36:	2120      	movs	r1, #32
 8000e38:	482f      	ldr	r0, [pc, #188]	; (8000ef8 <do_interface+0x2ac>)
 8000e3a:	f7ff faff 	bl	800043c <lcd_write_data>
	}
	if (++ticktack > 9)
 8000e3e:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <do_interface+0x2cc>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <do_interface+0x2cc>)
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <do_interface+0x2cc>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b09      	cmp	r3, #9
 8000e50:	d902      	bls.n	8000e58 <do_interface+0x20c>
		ticktack = 0;
 8000e52:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <do_interface+0x2cc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]

	/* Check errors --------------------------------------------*/

	if (MAX6675.temperature > ((MAX_TEMP + 2*STEP_TEMP)<<2))
 8000e58:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <do_interface+0x2a8>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8000e60:	d909      	bls.n	8000e76 <do_interface+0x22a>
	{
		temperature_SP = 0;
 8000e62:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <do_interface+0x2a4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	801a      	strh	r2, [r3, #0]
		global_error |= errTEMP_PV;
 8000e68:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <do_interface+0x2b8>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <do_interface+0x2b8>)
 8000e74:	701a      	strb	r2, [r3, #0]
	}

	if (temperature_SP > MAX_TEMP)
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <do_interface+0x2a4>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000e7e:	d909      	bls.n	8000e94 <do_interface+0x248>
	{
		temperature_SP = 0;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <do_interface+0x2a4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	801a      	strh	r2, [r3, #0]
		global_error |= errTEMP_SP;
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <do_interface+0x2b8>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <do_interface+0x2b8>)
 8000e92:	701a      	strb	r2, [r3, #0]
	static uint32_t last_SP = 0xffff; // not realistic value, to be immediately replaced
	static uint32_t time_dT = 0;
	static bool check_heater = false;
	static uint32_t heater_timeout = 20;

	if (temperature_SP != last_SP) // user changed T
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <do_interface+0x2a4>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <do_interface+0x2d0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d046      	beq.n	8000f30 <do_interface+0x2e4>
	{
		if (dT >= 20) // T diff is more than 20 grad
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	2b13      	cmp	r3, #19
 8000ea6:	dd14      	ble.n	8000ed2 <do_interface+0x286>
		{
			check_heater = true;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <do_interface+0x2d4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
			last_dT = dT; // save value
 8000eae:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <do_interface+0x2d8>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	6013      	str	r3, [r2, #0]
			time_dT = HAL_GetTick(); // start timer
 8000eb4:	f002 fde4 	bl	8003a80 <HAL_GetTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <do_interface+0x2dc>)
 8000ebc:	6013      	str	r3, [r2, #0]
			heater_timeout = 120;
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <do_interface+0x2e0>)
 8000ec0:	2278      	movs	r2, #120	; 0x78
 8000ec2:	601a      	str	r2, [r3, #0]
			if (dT >= 50)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	2b31      	cmp	r3, #49	; 0x31
 8000ec8:	dd55      	ble.n	8000f76 <do_interface+0x32a>
				heater_timeout = 20; // if diff 50 grad, react faster
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <do_interface+0x2e0>)
 8000ecc:	2214      	movs	r2, #20
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e051      	b.n	8000f76 <do_interface+0x32a>
		}
		else
			check_heater = false;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <do_interface+0x2d4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	e04d      	b.n	8000f76 <do_interface+0x32a>
 8000eda:	bf00      	nop
 8000edc:	2000001c 	.word	0x2000001c
 8000ee0:	2000001d 	.word	0x2000001d
 8000ee4:	0800d9d8 	.word	0x0800d9d8
 8000ee8:	20000264 	.word	0x20000264
 8000eec:	200002ac 	.word	0x200002ac
 8000ef0:	20000244 	.word	0x20000244
 8000ef4:	20000238 	.word	0x20000238
 8000ef8:	2000056c 	.word	0x2000056c
 8000efc:	2000023c 	.word	0x2000023c
 8000f00:	0800d640 	.word	0x0800d640
 8000f04:	20000230 	.word	0x20000230
 8000f08:	2000024a 	.word	0x2000024a
 8000f0c:	20000234 	.word	0x20000234
 8000f10:	20000242 	.word	0x20000242
 8000f14:	66666667 	.word	0x66666667
 8000f18:	20000231 	.word	0x20000231
 8000f1c:	20000020 	.word	0x20000020
 8000f20:	200002b0 	.word	0x200002b0
 8000f24:	200002b4 	.word	0x200002b4
 8000f28:	200002b8 	.word	0x200002b8
 8000f2c:	20000024 	.word	0x20000024
	}
	else if (check_heater)
 8000f30:	4bb1      	ldr	r3, [pc, #708]	; (80011f8 <do_interface+0x5ac>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d01e      	beq.n	8000f76 <do_interface+0x32a>
	{
		if (last_dT - dT > 5) // temperature changed more than 5 grad, ok!
 8000f38:	4bb0      	ldr	r3, [pc, #704]	; (80011fc <do_interface+0x5b0>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b05      	cmp	r3, #5
 8000f42:	dd03      	ble.n	8000f4c <do_interface+0x300>
			check_heater = false;
 8000f44:	4bac      	ldr	r3, [pc, #688]	; (80011f8 <do_interface+0x5ac>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e014      	b.n	8000f76 <do_interface+0x32a>
		else if (HAL_GetTick() - time_dT > heater_timeout*1024) // timeout, go in error
 8000f4c:	f002 fd98 	bl	8003a80 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	4bab      	ldr	r3, [pc, #684]	; (8001200 <do_interface+0x5b4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	1ad2      	subs	r2, r2, r3
 8000f58:	4baa      	ldr	r3, [pc, #680]	; (8001204 <do_interface+0x5b8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	029b      	lsls	r3, r3, #10
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d909      	bls.n	8000f76 <do_interface+0x32a>
		{
			check_heater = false;
 8000f62:	4ba5      	ldr	r3, [pc, #660]	; (80011f8 <do_interface+0x5ac>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
			global_error |= errHEATER;
 8000f68:	4ba7      	ldr	r3, [pc, #668]	; (8001208 <do_interface+0x5bc>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4ba5      	ldr	r3, [pc, #660]	; (8001208 <do_interface+0x5bc>)
 8000f74:	701a      	strb	r2, [r3, #0]
		}
	}
	last_SP = temperature_SP;
 8000f76:	4ba5      	ldr	r3, [pc, #660]	; (800120c <do_interface+0x5c0>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4ba4      	ldr	r3, [pc, #656]	; (8001210 <do_interface+0x5c4>)
 8000f7e:	601a      	str	r2, [r3, #0]

	/************************************/


	if (encoder.long_press)
 8000f80:	4ba4      	ldr	r3, [pc, #656]	; (8001214 <do_interface+0x5c8>)
 8000f82:	78db      	ldrb	r3, [r3, #3]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00b      	beq.n	8000fa0 <do_interface+0x354>
	{
		ui_state = uiLONG_PRESS;
 8000f88:	4ba3      	ldr	r3, [pc, #652]	; (8001218 <do_interface+0x5cc>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
		temperature_SP = 0;
 8000f8e:	4b9f      	ldr	r3, [pc, #636]	; (800120c <do_interface+0x5c0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	801a      	strh	r2, [r3, #0]
		global_error = errOK;
 8000f94:	4b9c      	ldr	r3, [pc, #624]	; (8001208 <do_interface+0x5bc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
		peep.peep = false;
 8000f9a:	4ba0      	ldr	r3, [pc, #640]	; (800121c <do_interface+0x5d0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
	}

	if (global_error)
 8000fa0:	4b99      	ldr	r3, [pc, #612]	; (8001208 <do_interface+0x5bc>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <do_interface+0x368>
	{
		ui_state = uiMALFUNCTION;
 8000fa8:	4b9b      	ldr	r3, [pc, #620]	; (8001218 <do_interface+0x5cc>)
 8000faa:	2209      	movs	r2, #9
 8000fac:	701a      	strb	r2, [r3, #0]
		peep.peep = true;
 8000fae:	4b9b      	ldr	r3, [pc, #620]	; (800121c <do_interface+0x5d0>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
	}

	switch(ui_state)
 8000fb4:	4b98      	ldr	r3, [pc, #608]	; (8001218 <do_interface+0x5cc>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b09      	cmp	r3, #9
 8000fba:	f200 81c3 	bhi.w	8001344 <do_interface+0x6f8>
 8000fbe:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <do_interface+0x378>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08000fed 	.word	0x08000fed
 8000fc8:	0800106b 	.word	0x0800106b
 8000fcc:	080010b3 	.word	0x080010b3
 8000fd0:	08001109 	.word	0x08001109
 8000fd4:	08001187 	.word	0x08001187
 8000fd8:	080011b5 	.word	0x080011b5
 8000fdc:	080011c1 	.word	0x080011c1
 8000fe0:	08001251 	.word	0x08001251
 8000fe4:	0800127d 	.word	0x0800127d
 8000fe8:	08001289 	.word	0x08001289
	{
	case uiSTART:
		lcd_set_xy(&lcd, 0, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	488b      	ldr	r0, [pc, #556]	; (8001220 <do_interface+0x5d4>)
 8000ff2:	f7ff f99d 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "Long press  ");
 8000ff6:	498b      	ldr	r1, [pc, #556]	; (8001224 <do_interface+0x5d8>)
 8000ff8:	4889      	ldr	r0, [pc, #548]	; (8001220 <do_interface+0x5d4>)
 8000ffa:	f7ff f982 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2100      	movs	r1, #0
 8001002:	4887      	ldr	r0, [pc, #540]	; (8001220 <do_interface+0x5d4>)
 8001004:	f7ff f994 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "T=0 & reset ");
 8001008:	4987      	ldr	r1, [pc, #540]	; (8001228 <do_interface+0x5dc>)
 800100a:	4885      	ldr	r0, [pc, #532]	; (8001220 <do_interface+0x5d4>)
 800100c:	f7ff f979 	bl	8000302 <lcd_string>
		lcd_write_data(&lcd, ccENTER);
 8001010:	2100      	movs	r1, #0
 8001012:	4883      	ldr	r0, [pc, #524]	; (8001220 <do_interface+0x5d4>)
 8001014:	f7ff fa12 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 12, 1);
 8001018:	2201      	movs	r2, #1
 800101a:	210c      	movs	r1, #12
 800101c:	4880      	ldr	r0, [pc, #512]	; (8001220 <do_interface+0x5d4>)
 800101e:	f7ff f987 	bl	8000330 <lcd_set_xy>
		lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001022:	4b82      	ldr	r3, [pc, #520]	; (800122c <do_interface+0x5e0>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf94      	ite	ls
 800102a:	2301      	movls	r3, #1
 800102c:	2300      	movhi	r3, #0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	2300      	movs	r3, #0
 8001034:	2101      	movs	r1, #1
 8001036:	487a      	ldr	r0, [pc, #488]	; (8001220 <do_interface+0x5d4>)
 8001038:	f7ff f918 	bl	800026c <lcd_mode>
		if (!encoder.pressed && last_button)
 800103c:	4b75      	ldr	r3, [pc, #468]	; (8001214 <do_interface+0x5c8>)
 800103e:	789b      	ldrb	r3, [r3, #2]
 8001040:	f083 0301 	eor.w	r3, r3, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8183 	beq.w	8001352 <do_interface+0x706>
 800104c:	4b78      	ldr	r3, [pc, #480]	; (8001230 <do_interface+0x5e4>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 817e 	beq.w	8001352 <do_interface+0x706>
		{
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 8001056:	2300      	movs	r3, #0
 8001058:	2200      	movs	r2, #0
 800105a:	2101      	movs	r1, #1
 800105c:	4870      	ldr	r0, [pc, #448]	; (8001220 <do_interface+0x5d4>)
 800105e:	f7ff f905 	bl	800026c <lcd_mode>
			ui_state = uiMENUenter;
 8001062:	4b6d      	ldr	r3, [pc, #436]	; (8001218 <do_interface+0x5cc>)
 8001064:	2202      	movs	r2, #2
 8001066:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001068:	e173      	b.n	8001352 <do_interface+0x706>
	case uiLONG_PRESS:
		lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 800106a:	2300      	movs	r3, #0
 800106c:	2200      	movs	r2, #0
 800106e:	2101      	movs	r1, #1
 8001070:	486b      	ldr	r0, [pc, #428]	; (8001220 <do_interface+0x5d4>)
 8001072:	f7ff f8fb 	bl	800026c <lcd_mode>
		lcd_set_xy(&lcd, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	4869      	ldr	r0, [pc, #420]	; (8001220 <do_interface+0x5d4>)
 800107c:	f7ff f958 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "T set to 0  ");
 8001080:	496c      	ldr	r1, [pc, #432]	; (8001234 <do_interface+0x5e8>)
 8001082:	4867      	ldr	r0, [pc, #412]	; (8001220 <do_interface+0x5d4>)
 8001084:	f7ff f93d 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	2100      	movs	r1, #0
 800108c:	4864      	ldr	r0, [pc, #400]	; (8001220 <do_interface+0x5d4>)
 800108e:	f7ff f94f 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "err. cleared ");
 8001092:	4969      	ldr	r1, [pc, #420]	; (8001238 <do_interface+0x5ec>)
 8001094:	4862      	ldr	r0, [pc, #392]	; (8001220 <do_interface+0x5d4>)
 8001096:	f7ff f934 	bl	8000302 <lcd_string>
		if (!encoder.pressed)
 800109a:	4b5e      	ldr	r3, [pc, #376]	; (8001214 <do_interface+0x5c8>)
 800109c:	789b      	ldrb	r3, [r3, #2]
 800109e:	f083 0301 	eor.w	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 8156 	beq.w	8001356 <do_interface+0x70a>
			ui_state = uiMENUenter;
 80010aa:	4b5b      	ldr	r3, [pc, #364]	; (8001218 <do_interface+0x5cc>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	701a      	strb	r2, [r3, #0]
		break;
 80010b0:	e151      	b.n	8001356 <do_interface+0x70a>
	case uiMENUenter:
		lcd_mini_clear(&lcd);
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	469c      	mov	ip, r3
 80010b6:	485a      	ldr	r0, [pc, #360]	; (8001220 <do_interface+0x5d4>)
 80010b8:	f7ff fda2 	bl	8000c00 <lcd_mini_clear.8549>
		lcd_set_xy(&lcd, 0, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	4857      	ldr	r0, [pc, #348]	; (8001220 <do_interface+0x5d4>)
 80010c2:	f7ff f935 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " Profile");
 80010c6:	495d      	ldr	r1, [pc, #372]	; (800123c <do_interface+0x5f0>)
 80010c8:	4855      	ldr	r0, [pc, #340]	; (8001220 <do_interface+0x5d4>)
 80010ca:	f7ff f91a 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2100      	movs	r1, #0
 80010d2:	4853      	ldr	r0, [pc, #332]	; (8001220 <do_interface+0x5d4>)
 80010d4:	f7ff f92c 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " Heatplate");
 80010d8:	4959      	ldr	r1, [pc, #356]	; (8001240 <do_interface+0x5f4>)
 80010da:	4851      	ldr	r0, [pc, #324]	; (8001220 <do_interface+0x5d4>)
 80010dc:	f7ff f911 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, (encoder.value)&0b1);
 80010e0:	4b4c      	ldr	r3, [pc, #304]	; (8001214 <do_interface+0x5c8>)
 80010e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	2100      	movs	r1, #0
 80010f2:	484b      	ldr	r0, [pc, #300]	; (8001220 <do_interface+0x5d4>)
 80010f4:	f7ff f91c 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, scAR);
 80010f8:	217e      	movs	r1, #126	; 0x7e
 80010fa:	4849      	ldr	r0, [pc, #292]	; (8001220 <do_interface+0x5d4>)
 80010fc:	f7ff f99e 	bl	800043c <lcd_write_data>
		ui_state = uiMENU;
 8001100:	4b45      	ldr	r3, [pc, #276]	; (8001218 <do_interface+0x5cc>)
 8001102:	2203      	movs	r2, #3
 8001104:	701a      	strb	r2, [r3, #0]
		break;
 8001106:	e12b      	b.n	8001360 <do_interface+0x714>
	case uiMENU:
		lcd_set_xy(&lcd, 0, (encoder.value)&0b1);
 8001108:	4b42      	ldr	r3, [pc, #264]	; (8001214 <do_interface+0x5c8>)
 800110a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	b2db      	uxtb	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	2100      	movs	r1, #0
 800111a:	4841      	ldr	r0, [pc, #260]	; (8001220 <do_interface+0x5d4>)
 800111c:	f7ff f908 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, scAR);
 8001120:	217e      	movs	r1, #126	; 0x7e
 8001122:	483f      	ldr	r0, [pc, #252]	; (8001220 <do_interface+0x5d4>)
 8001124:	f7ff f98a 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 0, 1 - ((encoder.value)&0b1));
 8001128:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <do_interface+0x5c8>)
 800112a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112e:	b29b      	uxth	r3, r3
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	bf0c      	ite	eq
 8001138:	2301      	moveq	r3, #1
 800113a:	2300      	movne	r3, #0
 800113c:	b2db      	uxtb	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	2100      	movs	r1, #0
 8001142:	4837      	ldr	r0, [pc, #220]	; (8001220 <do_interface+0x5d4>)
 8001144:	f7ff f8f4 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, ' ');
 8001148:	2120      	movs	r1, #32
 800114a:	4835      	ldr	r0, [pc, #212]	; (8001220 <do_interface+0x5d4>)
 800114c:	f7ff f976 	bl	800043c <lcd_write_data>
		if (!encoder.pressed && last_button)
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <do_interface+0x5c8>)
 8001152:	789b      	ldrb	r3, [r3, #2]
 8001154:	f083 0301 	eor.w	r3, r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 80fd 	beq.w	800135a <do_interface+0x70e>
 8001160:	4b33      	ldr	r3, [pc, #204]	; (8001230 <do_interface+0x5e4>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80f8 	beq.w	800135a <do_interface+0x70e>
		{
			ui_state = ((encoder.value)&0b1)?uiHEATPLATEenter:uiSETTINGSenter;
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <do_interface+0x5c8>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	b29b      	uxth	r3, r3
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <do_interface+0x532>
 800117a:	2204      	movs	r2, #4
 800117c:	e000      	b.n	8001180 <do_interface+0x534>
 800117e:	2206      	movs	r2, #6
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <do_interface+0x5cc>)
 8001182:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001184:	e0e9      	b.n	800135a <do_interface+0x70e>
	case uiHEATPLATEenter:
		lcd_mini_clear(&lcd);
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	469c      	mov	ip, r3
 800118a:	4825      	ldr	r0, [pc, #148]	; (8001220 <do_interface+0x5d4>)
 800118c:	f7ff fd38 	bl	8000c00 <lcd_mini_clear.8549>
		lcd_set_xy(&lcd, 0, 1);
 8001190:	2201      	movs	r2, #1
 8001192:	2100      	movs	r1, #0
 8001194:	4822      	ldr	r0, [pc, #136]	; (8001220 <do_interface+0x5d4>)
 8001196:	f7ff f8cb 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "Heatplate   ");
 800119a:	492a      	ldr	r1, [pc, #168]	; (8001244 <do_interface+0x5f8>)
 800119c:	4820      	ldr	r0, [pc, #128]	; (8001220 <do_interface+0x5d4>)
 800119e:	f7ff f8b0 	bl	8000302 <lcd_string>
		heatplate(true);
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	469c      	mov	ip, r3
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 f996 	bl	80014d8 <heatplate.8563>
		ui_state = uiHEATPLATE;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <do_interface+0x5cc>)
 80011ae:	2205      	movs	r2, #5
 80011b0:	701a      	strb	r2, [r3, #0]
		break;
 80011b2:	e0d5      	b.n	8001360 <do_interface+0x714>
	case uiHEATPLATE:
		heatplate(false);
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	469c      	mov	ip, r3
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 f98d 	bl	80014d8 <heatplate.8563>
		break;
 80011be:	e0cf      	b.n	8001360 <do_interface+0x714>
	case uiSETTINGSenter:
		lcd_set_xy(&lcd, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	4816      	ldr	r0, [pc, #88]	; (8001220 <do_interface+0x5d4>)
 80011c6:	f7ff f8b3 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " Profile    ");
 80011ca:	491f      	ldr	r1, [pc, #124]	; (8001248 <do_interface+0x5fc>)
 80011cc:	4814      	ldr	r0, [pc, #80]	; (8001220 <do_interface+0x5d4>)
 80011ce:	f7ff f898 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2100      	movs	r1, #0
 80011d6:	4812      	ldr	r0, [pc, #72]	; (8001220 <do_interface+0x5d4>)
 80011d8:	f7ff f8aa 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " settings    ");
 80011dc:	491b      	ldr	r1, [pc, #108]	; (800124c <do_interface+0x600>)
 80011de:	4810      	ldr	r0, [pc, #64]	; (8001220 <do_interface+0x5d4>)
 80011e0:	f7ff f88f 	bl	8000302 <lcd_string>
		ui_state = uiSETTINGS;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <do_interface+0x5cc>)
 80011e6:	2207      	movs	r2, #7
 80011e8:	701a      	strb	r2, [r3, #0]
		do_profile_settings(true);
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	469c      	mov	ip, r3
 80011ee:	2001      	movs	r0, #1
 80011f0:	f000 fa76 	bl	80016e0 <do_profile_settings.8570>
		break;
 80011f4:	e0b4      	b.n	8001360 <do_interface+0x714>
 80011f6:	bf00      	nop
 80011f8:	200002b0 	.word	0x200002b0
 80011fc:	200002b4 	.word	0x200002b4
 8001200:	200002b8 	.word	0x200002b8
 8001204:	20000024 	.word	0x20000024
 8001208:	20000230 	.word	0x20000230
 800120c:	20000244 	.word	0x20000244
 8001210:	20000020 	.word	0x20000020
 8001214:	20000234 	.word	0x20000234
 8001218:	2000024a 	.word	0x2000024a
 800121c:	20000248 	.word	0x20000248
 8001220:	2000056c 	.word	0x2000056c
 8001224:	0800d644 	.word	0x0800d644
 8001228:	0800d654 	.word	0x0800d654
 800122c:	20000231 	.word	0x20000231
 8001230:	200002bc 	.word	0x200002bc
 8001234:	0800d664 	.word	0x0800d664
 8001238:	0800d674 	.word	0x0800d674
 800123c:	0800d684 	.word	0x0800d684
 8001240:	0800d690 	.word	0x0800d690
 8001244:	0800d69c 	.word	0x0800d69c
 8001248:	0800d6ac 	.word	0x0800d6ac
 800124c:	0800d6bc 	.word	0x0800d6bc
	case uiSETTINGS:
		if (do_profile_settings(false))
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	469c      	mov	ip, r3
 8001254:	2000      	movs	r0, #0
 8001256:	f000 fa43 	bl	80016e0 <do_profile_settings.8570>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d07e      	beq.n	800135e <do_interface+0x712>
		{
			lcd_mini_clear(&lcd);
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	469c      	mov	ip, r3
 8001264:	4843      	ldr	r0, [pc, #268]	; (8001374 <do_interface+0x728>)
 8001266:	f7ff fccb 	bl	8000c00 <lcd_mini_clear.8549>
			ui_state = uiREFLOW;
 800126a:	4b43      	ldr	r3, [pc, #268]	; (8001378 <do_interface+0x72c>)
 800126c:	2208      	movs	r2, #8
 800126e:	701a      	strb	r2, [r3, #0]
			do_reflow(true);
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	469c      	mov	ip, r3
 8001274:	2001      	movs	r0, #1
 8001276:	f000 ff3b 	bl	80020f0 <do_reflow.8606>
		}
		break;
 800127a:	e070      	b.n	800135e <do_interface+0x712>
	case uiREFLOW:
		do_reflow(false);
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	469c      	mov	ip, r3
 8001280:	2000      	movs	r0, #0
 8001282:	f000 ff35 	bl	80020f0 <do_reflow.8606>
		break;
 8001286:	e06b      	b.n	8001360 <do_interface+0x714>
	case uiMALFUNCTION: // just check errors
		temperature_SP = 0;
 8001288:	4b3c      	ldr	r3, [pc, #240]	; (800137c <do_interface+0x730>)
 800128a:	2200      	movs	r2, #0
 800128c:	801a      	strh	r2, [r3, #0]
		lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 800128e:	2300      	movs	r3, #0
 8001290:	2200      	movs	r2, #0
 8001292:	2101      	movs	r1, #1
 8001294:	4837      	ldr	r0, [pc, #220]	; (8001374 <do_interface+0x728>)
 8001296:	f7fe ffe9 	bl	800026c <lcd_mode>
		lcd_set_xy(&lcd, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	4835      	ldr	r0, [pc, #212]	; (8001374 <do_interface+0x728>)
 80012a0:	f7ff f846 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " * Error! * ");
 80012a4:	4936      	ldr	r1, [pc, #216]	; (8001380 <do_interface+0x734>)
 80012a6:	4833      	ldr	r0, [pc, #204]	; (8001374 <do_interface+0x728>)
 80012a8:	f7ff f82b 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2100      	movs	r1, #0
 80012b0:	4830      	ldr	r0, [pc, #192]	; (8001374 <do_interface+0x728>)
 80012b2:	f7ff f83d 	bl	8000330 <lcd_set_xy>
		if (global_error & errMAX6675_invalid)
 80012b6:	4b33      	ldr	r3, [pc, #204]	; (8001384 <do_interface+0x738>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <do_interface+0x680>
			lcd_string(&lcd, "Temp. Sensor");
 80012c2:	4931      	ldr	r1, [pc, #196]	; (8001388 <do_interface+0x73c>)
 80012c4:	482b      	ldr	r0, [pc, #172]	; (8001374 <do_interface+0x728>)
 80012c6:	f7ff f81c 	bl	8000302 <lcd_string>
		else if (global_error & errTIMEOUT)
			lcd_string(&lcd, "timeout     ");
		else
			lcd_string(&lcd, "fatal error ");

		break;
 80012ca:	e049      	b.n	8001360 <do_interface+0x714>
		else if (global_error & errTEMP_SP)
 80012cc:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <do_interface+0x738>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <do_interface+0x696>
			lcd_string(&lcd, "SP too high ");
 80012d8:	492c      	ldr	r1, [pc, #176]	; (800138c <do_interface+0x740>)
 80012da:	4826      	ldr	r0, [pc, #152]	; (8001374 <do_interface+0x728>)
 80012dc:	f7ff f811 	bl	8000302 <lcd_string>
		break;
 80012e0:	e03e      	b.n	8001360 <do_interface+0x714>
		else if (global_error & errTEMP_PV)
 80012e2:	4b28      	ldr	r3, [pc, #160]	; (8001384 <do_interface+0x738>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d004      	beq.n	80012f8 <do_interface+0x6ac>
			lcd_string(&lcd, "T too high  ");
 80012ee:	4928      	ldr	r1, [pc, #160]	; (8001390 <do_interface+0x744>)
 80012f0:	4820      	ldr	r0, [pc, #128]	; (8001374 <do_interface+0x728>)
 80012f2:	f7ff f806 	bl	8000302 <lcd_string>
		break;
 80012f6:	e033      	b.n	8001360 <do_interface+0x714>
		else if (global_error & errHEATER)
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <do_interface+0x738>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d004      	beq.n	800130e <do_interface+0x6c2>
			lcd_string(&lcd, "heater power");
 8001304:	4923      	ldr	r1, [pc, #140]	; (8001394 <do_interface+0x748>)
 8001306:	481b      	ldr	r0, [pc, #108]	; (8001374 <do_interface+0x728>)
 8001308:	f7fe fffb 	bl	8000302 <lcd_string>
		break;
 800130c:	e028      	b.n	8001360 <do_interface+0x714>
		else if (global_error & errI_LIMIT)
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <do_interface+0x738>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <do_interface+0x6d8>
			lcd_string(&lcd, "heater limit");
 800131a:	491f      	ldr	r1, [pc, #124]	; (8001398 <do_interface+0x74c>)
 800131c:	4815      	ldr	r0, [pc, #84]	; (8001374 <do_interface+0x728>)
 800131e:	f7fe fff0 	bl	8000302 <lcd_string>
		break;
 8001322:	e01d      	b.n	8001360 <do_interface+0x714>
		else if (global_error & errTIMEOUT)
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <do_interface+0x738>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <do_interface+0x6ee>
			lcd_string(&lcd, "timeout     ");
 8001330:	491a      	ldr	r1, [pc, #104]	; (800139c <do_interface+0x750>)
 8001332:	4810      	ldr	r0, [pc, #64]	; (8001374 <do_interface+0x728>)
 8001334:	f7fe ffe5 	bl	8000302 <lcd_string>
		break;
 8001338:	e012      	b.n	8001360 <do_interface+0x714>
			lcd_string(&lcd, "fatal error ");
 800133a:	4919      	ldr	r1, [pc, #100]	; (80013a0 <do_interface+0x754>)
 800133c:	480d      	ldr	r0, [pc, #52]	; (8001374 <do_interface+0x728>)
 800133e:	f7fe ffe0 	bl	8000302 <lcd_string>
		break;
 8001342:	e00d      	b.n	8001360 <do_interface+0x714>
	default:
		global_error = errFATAL;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <do_interface+0x738>)
 8001346:	2240      	movs	r2, #64	; 0x40
 8001348:	701a      	strb	r2, [r3, #0]
		ui_state = uiMALFUNCTION;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <do_interface+0x72c>)
 800134c:	2209      	movs	r2, #9
 800134e:	701a      	strb	r2, [r3, #0]
		break;
 8001350:	e006      	b.n	8001360 <do_interface+0x714>
		break;
 8001352:	bf00      	nop
 8001354:	e004      	b.n	8001360 <do_interface+0x714>
		break;
 8001356:	bf00      	nop
 8001358:	e002      	b.n	8001360 <do_interface+0x714>
		break;
 800135a:	bf00      	nop
 800135c:	e000      	b.n	8001360 <do_interface+0x714>
		break;
 800135e:	bf00      	nop
	}
	last_button = encoder.pressed;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <do_interface+0x758>)
 8001362:	789a      	ldrb	r2, [r3, #2]
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <do_interface+0x75c>)
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e000      	b.n	800136c <do_interface+0x720>
		return;
 800136a:	bf00      	nop

}
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000056c 	.word	0x2000056c
 8001378:	2000024a 	.word	0x2000024a
 800137c:	20000244 	.word	0x20000244
 8001380:	0800d6cc 	.word	0x0800d6cc
 8001384:	20000230 	.word	0x20000230
 8001388:	0800d6dc 	.word	0x0800d6dc
 800138c:	0800d6ec 	.word	0x0800d6ec
 8001390:	0800d6fc 	.word	0x0800d6fc
 8001394:	0800d70c 	.word	0x0800d70c
 8001398:	0800d71c 	.word	0x0800d71c
 800139c:	0800d72c 	.word	0x0800d72c
 80013a0:	0800d73c 	.word	0x0800d73c
 80013a4:	20000234 	.word	0x20000234
 80013a8:	200002bc 	.word	0x200002bc

080013ac <change_temperature.8553>:
	{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	f8c7 c004 	str.w	ip, [r7, #4]
		if (diff == 0)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <change_temperature.8553+0x18>
			return t;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	e020      	b.n	8001406 <change_temperature.8553+0x5a>
		int32_t temp = (int32_t)t; // to avoid zero-cross
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	617b      	str	r3, [r7, #20]
		temp = (temp / STEP_TEMP) * STEP_TEMP; // round for more beauty
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	4a11      	ldr	r2, [pc, #68]	; (8001410 <change_temperature.8553+0x64>)
 80013cc:	fb82 1203 	smull	r1, r2, r2, r3
 80013d0:	1052      	asrs	r2, r2, #1
 80013d2:	17db      	asrs	r3, r3, #31
 80013d4:	1ad2      	subs	r2, r2, r3
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	617b      	str	r3, [r7, #20]
		temp += (diff)*STEP_TEMP;
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4413      	add	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
		if (temp < 0)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da01      	bge.n	80013f6 <change_temperature.8553+0x4a>
			temp = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
		if (temp > MAX_TEMP)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80013fc:	dd02      	ble.n	8001404 <change_temperature.8553+0x58>
			temp = MAX_TEMP;
 80013fe:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001402:	617b      	str	r3, [r7, #20]
		return (uint32_t)temp;
 8001404:	697b      	ldr	r3, [r7, #20]
	}
 8001406:	4618      	mov	r0, r3
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	66666667 	.word	0x66666667

08001414 <change_time.8558>:
	{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	f8c7 c004 	str.w	ip, [r7, #4]
		int32_t temp = (int32_t)t; // to avoid zero-cross
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	617b      	str	r3, [r7, #20]
		int32_t step = 5; // how much to change the time in seconds
 8001426:	2305      	movs	r3, #5
 8001428:	613b      	str	r3, [r7, #16]
		if (t < 60)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2b3b      	cmp	r3, #59	; 0x3b
 800142e:	d802      	bhi.n	8001436 <change_time.8558+0x22>
			step = 5;
 8001430:	2305      	movs	r3, #5
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	e02d      	b.n	8001492 <change_time.8558+0x7e>
		else if (t < 120)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b77      	cmp	r3, #119	; 0x77
 800143a:	d802      	bhi.n	8001442 <change_time.8558+0x2e>
			step = 10;
 800143c:	230a      	movs	r3, #10
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	e027      	b.n	8001492 <change_time.8558+0x7e>
		else if (t < 300)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001448:	d202      	bcs.n	8001450 <change_time.8558+0x3c>
			step = 20;
 800144a:	2314      	movs	r3, #20
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	e020      	b.n	8001492 <change_time.8558+0x7e>
		else if (t < 600)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001456:	d202      	bcs.n	800145e <change_time.8558+0x4a>
			step = 30;
 8001458:	231e      	movs	r3, #30
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	e019      	b.n	8001492 <change_time.8558+0x7e>
		else if (t < 1200)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001464:	d202      	bcs.n	800146c <change_time.8558+0x58>
			step = 60;
 8001466:	233c      	movs	r3, #60	; 0x3c
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	e012      	b.n	8001492 <change_time.8558+0x7e>
		else if (t < 3600)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001472:	d203      	bcs.n	800147c <change_time.8558+0x68>
			step = 300;
 8001474:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	e00a      	b.n	8001492 <change_time.8558+0x7e>
		else if (t < 7200)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8001482:	d203      	bcs.n	800148c <change_time.8558+0x78>
			step = 600;
 8001484:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	e002      	b.n	8001492 <change_time.8558+0x7e>
			step = 1800;
 800148c:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001490:	613b      	str	r3, [r7, #16]
		temp = (temp / step) * step; // round
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	fb92 f2f3 	sdiv	r2, r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	fb02 f303 	mul.w	r3, r2, r3
 80014a0:	617b      	str	r3, [r7, #20]
		temp += (diff)*step;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4413      	add	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]
		if (temp < 5)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	dc01      	bgt.n	80014ba <change_time.8558+0xa6>
			temp = 5;
 80014b6:	2305      	movs	r3, #5
 80014b8:	617b      	str	r3, [r7, #20]
		if (temp > 900*60)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 80014c0:	4293      	cmp	r3, r2
 80014c2:	dd02      	ble.n	80014ca <change_time.8558+0xb6>
			temp = 900*60;
 80014c4:	f24d 23f0 	movw	r3, #54000	; 0xd2f0
 80014c8:	617b      	str	r3, [r7, #20]
		return (uint32_t)temp;
 80014ca:	697b      	ldr	r3, [r7, #20]
	}
 80014cc:	4618      	mov	r0, r3
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
	...

080014d8 <heatplate.8563>:
	{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
 80014e2:	4662      	mov	r2, ip
 80014e4:	f8c7 c000 	str.w	ip, [r7]
		if (reset)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00a      	beq.n	8001504 <heatplate.8563+0x2c>
			last_encoder = encoder.value;
 80014ee:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <heatplate.8563+0x10c>)
 80014f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014f4:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <heatplate.8563+0x110>)
 80014f6:	801a      	strh	r2, [r3, #0]
			last_time = HAL_GetTick();
 80014f8:	f002 fac2 	bl	8003a80 <HAL_GetTick>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a3b      	ldr	r2, [pc, #236]	; (80015ec <heatplate.8563+0x114>)
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e06b      	b.n	80015dc <heatplate.8563+0x104>
		if (encoder.pressed)
 8001504:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <heatplate.8563+0x10c>)
 8001506:	789b      	ldrb	r3, [r3, #2]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <heatplate.8563+0x3a>
			temperature_SP = 0;
 800150c:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <heatplate.8563+0x118>)
 800150e:	2100      	movs	r1, #0
 8001510:	8019      	strh	r1, [r3, #0]
		temperature_SP = change_temperature(temperature_SP, encoder.value - last_encoder);
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <heatplate.8563+0x118>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <heatplate.8563+0x10c>)
 800151a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151e:	4619      	mov	r1, r3
 8001520:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <heatplate.8563+0x110>)
 8001522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001526:	1acb      	subs	r3, r1, r3
 8001528:	4694      	mov	ip, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f7ff ff3e 	bl	80013ac <change_temperature.8553>
 8001530:	4603      	mov	r3, r0
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <heatplate.8563+0x118>)
 8001536:	801a      	strh	r2, [r3, #0]
		last_encoder = encoder.value;
 8001538:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <heatplate.8563+0x10c>)
 800153a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <heatplate.8563+0x110>)
 8001540:	801a      	strh	r2, [r3, #0]
		tbuf[0] = '+';
 8001542:	232b      	movs	r3, #43	; 0x2b
 8001544:	743b      	strb	r3, [r7, #16]
		int2time((HAL_GetTick() - last_time)/1000, tbuf+1);
 8001546:	f002 fa9b 	bl	8003a80 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <heatplate.8563+0x114>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <heatplate.8563+0x11c>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	099a      	lsrs	r2, r3, #6
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	3301      	adds	r3, #1
 8001560:	4619      	mov	r1, r3
 8001562:	4610      	mov	r0, r2
 8001564:	f7ff f826 	bl	80005b4 <int2time>
		lcd_set_xy(&lcd, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	4822      	ldr	r0, [pc, #136]	; (80015f8 <heatplate.8563+0x120>)
 800156e:	f7fe fedf 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, (char*)tbuf);
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4619      	mov	r1, r3
 8001578:	481f      	ldr	r0, [pc, #124]	; (80015f8 <heatplate.8563+0x120>)
 800157a:	f7fe fec2 	bl	8000302 <lcd_string>
		int2string(temperature_SP, buf, sizeof(buf));
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <heatplate.8563+0x118>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2203      	movs	r2, #3
 800158a:	4619      	mov	r1, r3
 800158c:	f7fe ffd4 	bl	8000538 <int2string>
		lcd_set_xy(&lcd, 7, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2107      	movs	r1, #7
 8001594:	4818      	ldr	r0, [pc, #96]	; (80015f8 <heatplate.8563+0x120>)
 8001596:	f7fe fecb 	bl	8000330 <lcd_set_xy>
		lcd_out(&lcd, buf, sizeof(buf));
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	2203      	movs	r2, #3
 80015a0:	4619      	mov	r1, r3
 80015a2:	4815      	ldr	r0, [pc, #84]	; (80015f8 <heatplate.8563+0x120>)
 80015a4:	f7fe fe8f 	bl	80002c6 <lcd_out>
		lcd_write_data(&lcd, scGRAD); // grad
 80015a8:	21df      	movs	r1, #223	; 0xdf
 80015aa:	4813      	ldr	r0, [pc, #76]	; (80015f8 <heatplate.8563+0x120>)
 80015ac:	f7fe ff46 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, scAR); // arrow right
 80015b0:	217e      	movs	r1, #126	; 0x7e
 80015b2:	4811      	ldr	r0, [pc, #68]	; (80015f8 <heatplate.8563+0x120>)
 80015b4:	f7fe ff42 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 9, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2109      	movs	r1, #9
 80015bc:	480e      	ldr	r0, [pc, #56]	; (80015f8 <heatplate.8563+0x120>)
 80015be:	f7fe feb7 	bl	8000330 <lcd_set_xy>
		lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <heatplate.8563+0x124>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf94      	ite	ls
 80015ca:	2301      	movls	r3, #1
 80015cc:	2300      	movhi	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	2300      	movs	r3, #0
 80015d4:	2101      	movs	r1, #1
 80015d6:	4808      	ldr	r0, [pc, #32]	; (80015f8 <heatplate.8563+0x120>)
 80015d8:	f7fe fe48 	bl	800026c <lcd_mode>
	}
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000234 	.word	0x20000234
 80015e8:	200002be 	.word	0x200002be
 80015ec:	200002c0 	.word	0x200002c0
 80015f0:	20000244 	.word	0x20000244
 80015f4:	10624dd3 	.word	0x10624dd3
 80015f8:	2000056c 	.word	0x2000056c
 80015fc:	20000231 	.word	0x20000231

08001600 <show_step_menu.8580>:
		{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	4664      	mov	r4, ip
 8001608:	f8c7 c004 	str.w	ip, [r7, #4]
			int2time(steps[pos].time, time_buf);
 800160c:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <show_step_menu.8580+0xcc>)
 800160e:	f993 3000 	ldrsb.w	r3, [r3]
 8001612:	4a2f      	ldr	r2, [pc, #188]	; (80016d0 <show_step_menu.8580+0xd0>)
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4622      	mov	r2, r4
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ffc8 	bl	80005b4 <int2time>
			lcd_set_xy(&lcd, 5, 1);
 8001624:	2201      	movs	r2, #1
 8001626:	2105      	movs	r1, #5
 8001628:	482a      	ldr	r0, [pc, #168]	; (80016d4 <show_step_menu.8580+0xd4>)
 800162a:	f7fe fe81 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, (char*)time_buf);
 800162e:	4623      	mov	r3, r4
 8001630:	4619      	mov	r1, r3
 8001632:	4828      	ldr	r0, [pc, #160]	; (80016d4 <show_step_menu.8580+0xd4>)
 8001634:	f7fe fe65 	bl	8000302 <lcd_string>
			int2string(steps[pos].temp, buf, sizeof(buf));
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <show_step_menu.8580+0xcc>)
 800163a:	f993 3000 	ldrsb.w	r3, [r3]
 800163e:	461a      	mov	r2, r3
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <show_step_menu.8580+0xd0>)
 8001642:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001646:	4618      	mov	r0, r3
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2203      	movs	r2, #3
 800164e:	4619      	mov	r1, r3
 8001650:	f7fe ff72 	bl	8000538 <int2string>
			lcd_set_xy(&lcd, 0, 1);
 8001654:	2201      	movs	r2, #1
 8001656:	2100      	movs	r1, #0
 8001658:	481e      	ldr	r0, [pc, #120]	; (80016d4 <show_step_menu.8580+0xd4>)
 800165a:	f7fe fe69 	bl	8000330 <lcd_set_xy>
			lcd_out(&lcd, buf, sizeof(buf));
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	2203      	movs	r2, #3
 8001664:	4619      	mov	r1, r3
 8001666:	481b      	ldr	r0, [pc, #108]	; (80016d4 <show_step_menu.8580+0xd4>)
 8001668:	f7fe fe2d 	bl	80002c6 <lcd_out>
			lcd_write_data(&lcd, scGRAD); // grad
 800166c:	21df      	movs	r1, #223	; 0xdf
 800166e:	4819      	ldr	r0, [pc, #100]	; (80016d4 <show_step_menu.8580+0xd4>)
 8001670:	f7fe fee4 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, ' ');
 8001674:	2120      	movs	r1, #32
 8001676:	4817      	ldr	r0, [pc, #92]	; (80016d4 <show_step_menu.8580+0xd4>)
 8001678:	f7fe fee0 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	4814      	ldr	r0, [pc, #80]	; (80016d4 <show_step_menu.8580+0xd4>)
 8001682:	f7fe fe55 	bl	8000330 <lcd_set_xy>
			lcd_write_data(&lcd, '#');
 8001686:	2123      	movs	r1, #35	; 0x23
 8001688:	4812      	ldr	r0, [pc, #72]	; (80016d4 <show_step_menu.8580+0xd4>)
 800168a:	f7fe fed7 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, pos+'1');
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <show_step_menu.8580+0xcc>)
 8001690:	f993 3000 	ldrsb.w	r3, [r3]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	3331      	adds	r3, #49	; 0x31
 8001698:	b2db      	uxtb	r3, r3
 800169a:	4619      	mov	r1, r3
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <show_step_menu.8580+0xd4>)
 800169e:	f7fe fecd 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, '/');
 80016a2:	212f      	movs	r1, #47	; 0x2f
 80016a4:	480b      	ldr	r0, [pc, #44]	; (80016d4 <show_step_menu.8580+0xd4>)
 80016a6:	f7fe fec9 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, max_steps + '0');
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <show_step_menu.8580+0xd8>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	3330      	adds	r3, #48	; 0x30
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	4619      	mov	r1, r3
 80016b4:	4807      	ldr	r0, [pc, #28]	; (80016d4 <show_step_menu.8580+0xd4>)
 80016b6:	f7fe fec1 	bl	800043c <lcd_write_data>
			lcd_string(&lcd, " step   ");
 80016ba:	4908      	ldr	r1, [pc, #32]	; (80016dc <show_step_menu.8580+0xdc>)
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <show_step_menu.8580+0xd4>)
 80016be:	f7fe fe20 	bl	8000302 <lcd_string>
		}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd90      	pop	{r4, r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200002c6 	.word	0x200002c6
 80016d0:	20000264 	.word	0x20000264
 80016d4:	2000056c 	.word	0x2000056c
 80016d8:	2000001d 	.word	0x2000001d
 80016dc:	0800d74c 	.word	0x0800d74c

080016e0 <do_profile_settings.8570>:
	{
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	4664      	mov	r4, ip
 80016ec:	f8c7 c000 	str.w	ip, [r7]
	bool do_profile_settings(bool reset)
 80016f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f4:	613b      	str	r3, [r7, #16]
		if (reset)
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d012      	beq.n	8001722 <do_profile_settings.8570+0x42>
			last_encoder = encoder.value;
 80016fc:	4bb8      	ldr	r3, [pc, #736]	; (80019e0 <do_profile_settings.8570+0x300>)
 80016fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001702:	4bb8      	ldr	r3, [pc, #736]	; (80019e4 <do_profile_settings.8570+0x304>)
 8001704:	801a      	strh	r2, [r3, #0]
			pos = 0;
 8001706:	4bb8      	ldr	r3, [pc, #736]	; (80019e8 <do_profile_settings.8570+0x308>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
			profile_state = 0;
 800170c:	4bb7      	ldr	r3, [pc, #732]	; (80019ec <do_profile_settings.8570+0x30c>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
			last_time = HAL_GetTick();
 8001712:	f002 f9b5 	bl	8003a80 <HAL_GetTick>
 8001716:	4603      	mov	r3, r0
 8001718:	4ab5      	ldr	r2, [pc, #724]	; (80019f0 <do_profile_settings.8570+0x310>)
 800171a:	6013      	str	r3, [r2, #0]
			return false;
 800171c:	2300      	movs	r3, #0
 800171e:	f000 bccb 	b.w	80020b8 <do_profile_settings.8570+0x9d8>
		if (HAL_GetTick() - last_time < 1000)
 8001722:	f002 f9ad 	bl	8003a80 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	4bb1      	ldr	r3, [pc, #708]	; (80019f0 <do_profile_settings.8570+0x310>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001732:	d202      	bcs.n	800173a <do_profile_settings.8570+0x5a>
			return false; // delay to show intro text
 8001734:	2300      	movs	r3, #0
 8001736:	f000 bcbf 	b.w	80020b8 <do_profile_settings.8570+0x9d8>
		int32_t diff = encoder.value - last_encoder;
 800173a:	4ba9      	ldr	r3, [pc, #676]	; (80019e0 <do_profile_settings.8570+0x300>)
 800173c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001740:	461a      	mov	r2, r3
 8001742:	4ba8      	ldr	r3, [pc, #672]	; (80019e4 <do_profile_settings.8570+0x304>)
 8001744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
		last_encoder = encoder.value;
 800174c:	4ba4      	ldr	r3, [pc, #656]	; (80019e0 <do_profile_settings.8570+0x300>)
 800174e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001752:	4ba4      	ldr	r3, [pc, #656]	; (80019e4 <do_profile_settings.8570+0x304>)
 8001754:	801a      	strh	r2, [r3, #0]
		switch (profile_state)
 8001756:	4ba5      	ldr	r3, [pc, #660]	; (80019ec <do_profile_settings.8570+0x30c>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b5a      	cmp	r3, #90	; 0x5a
 800175c:	f200 849e 	bhi.w	800209c <do_profile_settings.8570+0x9bc>
 8001760:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <do_profile_settings.8570+0x88>)
 8001762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001766:	bf00      	nop
 8001768:	080018d5 	.word	0x080018d5
 800176c:	080018e3 	.word	0x080018e3
 8001770:	0800209d 	.word	0x0800209d
 8001774:	0800209d 	.word	0x0800209d
 8001778:	0800209d 	.word	0x0800209d
 800177c:	0800209d 	.word	0x0800209d
 8001780:	0800209d 	.word	0x0800209d
 8001784:	0800209d 	.word	0x0800209d
 8001788:	0800209d 	.word	0x0800209d
 800178c:	0800209d 	.word	0x0800209d
 8001790:	080019af 	.word	0x080019af
 8001794:	08001a5f 	.word	0x08001a5f
 8001798:	08001b77 	.word	0x08001b77
 800179c:	08001c9d 	.word	0x08001c9d
 80017a0:	08001d0b 	.word	0x08001d0b
 80017a4:	0800209d 	.word	0x0800209d
 80017a8:	0800209d 	.word	0x0800209d
 80017ac:	0800209d 	.word	0x0800209d
 80017b0:	0800209d 	.word	0x0800209d
 80017b4:	0800209d 	.word	0x0800209d
 80017b8:	0800209d 	.word	0x0800209d
 80017bc:	08001d79 	.word	0x08001d79
 80017c0:	08001e01 	.word	0x08001e01
 80017c4:	08001e89 	.word	0x08001e89
 80017c8:	08001f1b 	.word	0x08001f1b
 80017cc:	0800209d 	.word	0x0800209d
 80017d0:	0800209d 	.word	0x0800209d
 80017d4:	0800209d 	.word	0x0800209d
 80017d8:	0800209d 	.word	0x0800209d
 80017dc:	0800209d 	.word	0x0800209d
 80017e0:	0800209d 	.word	0x0800209d
 80017e4:	0800209d 	.word	0x0800209d
 80017e8:	0800209d 	.word	0x0800209d
 80017ec:	0800209d 	.word	0x0800209d
 80017f0:	0800209d 	.word	0x0800209d
 80017f4:	0800209d 	.word	0x0800209d
 80017f8:	0800209d 	.word	0x0800209d
 80017fc:	0800209d 	.word	0x0800209d
 8001800:	0800209d 	.word	0x0800209d
 8001804:	0800209d 	.word	0x0800209d
 8001808:	0800209d 	.word	0x0800209d
 800180c:	0800209d 	.word	0x0800209d
 8001810:	0800209d 	.word	0x0800209d
 8001814:	0800209d 	.word	0x0800209d
 8001818:	0800209d 	.word	0x0800209d
 800181c:	0800209d 	.word	0x0800209d
 8001820:	0800209d 	.word	0x0800209d
 8001824:	0800209d 	.word	0x0800209d
 8001828:	0800209d 	.word	0x0800209d
 800182c:	0800209d 	.word	0x0800209d
 8001830:	0800209d 	.word	0x0800209d
 8001834:	0800209d 	.word	0x0800209d
 8001838:	0800209d 	.word	0x0800209d
 800183c:	0800209d 	.word	0x0800209d
 8001840:	0800209d 	.word	0x0800209d
 8001844:	0800209d 	.word	0x0800209d
 8001848:	0800209d 	.word	0x0800209d
 800184c:	0800209d 	.word	0x0800209d
 8001850:	0800209d 	.word	0x0800209d
 8001854:	0800209d 	.word	0x0800209d
 8001858:	0800209d 	.word	0x0800209d
 800185c:	0800209d 	.word	0x0800209d
 8001860:	0800209d 	.word	0x0800209d
 8001864:	0800209d 	.word	0x0800209d
 8001868:	0800209d 	.word	0x0800209d
 800186c:	0800209d 	.word	0x0800209d
 8001870:	0800209d 	.word	0x0800209d
 8001874:	0800209d 	.word	0x0800209d
 8001878:	0800209d 	.word	0x0800209d
 800187c:	0800209d 	.word	0x0800209d
 8001880:	0800209d 	.word	0x0800209d
 8001884:	0800209d 	.word	0x0800209d
 8001888:	0800209d 	.word	0x0800209d
 800188c:	0800209d 	.word	0x0800209d
 8001890:	0800209d 	.word	0x0800209d
 8001894:	0800209d 	.word	0x0800209d
 8001898:	0800209d 	.word	0x0800209d
 800189c:	0800209d 	.word	0x0800209d
 80018a0:	0800209d 	.word	0x0800209d
 80018a4:	0800209d 	.word	0x0800209d
 80018a8:	0800209d 	.word	0x0800209d
 80018ac:	0800209d 	.word	0x0800209d
 80018b0:	0800209d 	.word	0x0800209d
 80018b4:	0800209d 	.word	0x0800209d
 80018b8:	0800209d 	.word	0x0800209d
 80018bc:	0800209d 	.word	0x0800209d
 80018c0:	0800209d 	.word	0x0800209d
 80018c4:	0800209d 	.word	0x0800209d
 80018c8:	0800209d 	.word	0x0800209d
 80018cc:	0800209d 	.word	0x0800209d
 80018d0:	08001fd3 	.word	0x08001fd3
			pos = 0;
 80018d4:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <do_profile_settings.8570+0x308>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
			profile_state = 90;
 80018da:	4b44      	ldr	r3, [pc, #272]	; (80019ec <do_profile_settings.8570+0x30c>)
 80018dc:	225a      	movs	r2, #90	; 0x5a
 80018de:	701a      	strb	r2, [r3, #0]
			break;
 80018e0:	e3e5      	b.n	80020ae <do_profile_settings.8570+0x9ce>
			if (diff == 0)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10e      	bne.n	8001906 <do_profile_settings.8570+0x226>
				if (last_button && (!encoder.pressed))
 80018e8:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <do_profile_settings.8570+0x314>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d023      	beq.n	8001938 <do_profile_settings.8570+0x258>
 80018f0:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <do_profile_settings.8570+0x300>)
 80018f2:	789b      	ldrb	r3, [r3, #2]
 80018f4:	f083 0301 	eor.w	r3, r3, #1
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01c      	beq.n	8001938 <do_profile_settings.8570+0x258>
					profile_state = 10;
 80018fe:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <do_profile_settings.8570+0x30c>)
 8001900:	220a      	movs	r2, #10
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e018      	b.n	8001938 <do_profile_settings.8570+0x258>
				if (diff > 0)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b00      	cmp	r3, #0
 800190a:	dd09      	ble.n	8001920 <do_profile_settings.8570+0x240>
					pos++;
 800190c:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <do_profile_settings.8570+0x308>)
 800190e:	f993 3000 	ldrsb.w	r3, [r3]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	3301      	adds	r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	b25a      	sxtb	r2, r3
 800191a:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <do_profile_settings.8570+0x308>)
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	e00b      	b.n	8001938 <do_profile_settings.8570+0x258>
				else if (diff < 0)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	da08      	bge.n	8001938 <do_profile_settings.8570+0x258>
					pos--;
 8001926:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <do_profile_settings.8570+0x308>)
 8001928:	f993 3000 	ldrsb.w	r3, [r3]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	b25a      	sxtb	r2, r3
 8001934:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <do_profile_settings.8570+0x308>)
 8001936:	701a      	strb	r2, [r3, #0]
			if ((pos < 0) || (pos >= max_steps))
 8001938:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <do_profile_settings.8570+0x308>)
 800193a:	f993 3000 	ldrsb.w	r3, [r3]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db07      	blt.n	8001952 <do_profile_settings.8570+0x272>
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <do_profile_settings.8570+0x308>)
 8001944:	f993 3000 	ldrsb.w	r3, [r3]
 8001948:	461a      	mov	r2, r3
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <do_profile_settings.8570+0x318>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	db03      	blt.n	800195a <do_profile_settings.8570+0x27a>
				profile_state = 90;
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <do_profile_settings.8570+0x30c>)
 8001954:	225a      	movs	r2, #90	; 0x5a
 8001956:	701a      	strb	r2, [r3, #0]
				break;
 8001958:	e3a9      	b.n	80020ae <do_profile_settings.8570+0x9ce>
			show_step_menu();
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	469c      	mov	ip, r3
 8001960:	f7ff fe4e 	bl	8001600 <show_step_menu.8580>
			lcd_set_xy(&lcd, 9, 1);
 8001964:	2201      	movs	r2, #1
 8001966:	2109      	movs	r1, #9
 8001968:	4824      	ldr	r0, [pc, #144]	; (80019fc <do_profile_settings.8570+0x31c>)
 800196a:	f7fe fce1 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "    ");
 800196e:	4924      	ldr	r1, [pc, #144]	; (8001a00 <do_profile_settings.8570+0x320>)
 8001970:	4822      	ldr	r0, [pc, #136]	; (80019fc <do_profile_settings.8570+0x31c>)
 8001972:	f7fe fcc6 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 11, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	210b      	movs	r1, #11
 800197a:	4820      	ldr	r0, [pc, #128]	; (80019fc <do_profile_settings.8570+0x31c>)
 800197c:	f7fe fcd8 	bl	8000330 <lcd_set_xy>
			lcd_write_data(&lcd, cc3dots);
 8001980:	2106      	movs	r1, #6
 8001982:	481e      	ldr	r0, [pc, #120]	; (80019fc <do_profile_settings.8570+0x31c>)
 8001984:	f7fe fd5a 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 11, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	210b      	movs	r1, #11
 800198c:	481b      	ldr	r0, [pc, #108]	; (80019fc <do_profile_settings.8570+0x31c>)
 800198e:	f7fe fccf 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <do_profile_settings.8570+0x324>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b04      	cmp	r3, #4
 8001998:	bf94      	ite	ls
 800199a:	2301      	movls	r3, #1
 800199c:	2300      	movhi	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	2300      	movs	r3, #0
 80019a4:	2101      	movs	r1, #1
 80019a6:	4815      	ldr	r0, [pc, #84]	; (80019fc <do_profile_settings.8570+0x31c>)
 80019a8:	f7fe fc60 	bl	800026c <lcd_mode>
			break;
 80019ac:	e37f      	b.n	80020ae <do_profile_settings.8570+0x9ce>
			if (diff == 0)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10e      	bne.n	80019d2 <do_profile_settings.8570+0x2f2>
				if (last_button && (!encoder.pressed))
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <do_profile_settings.8570+0x314>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d02b      	beq.n	8001a14 <do_profile_settings.8570+0x334>
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <do_profile_settings.8570+0x300>)
 80019be:	789b      	ldrb	r3, [r3, #2]
 80019c0:	f083 0301 	eor.w	r3, r3, #1
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d024      	beq.n	8001a14 <do_profile_settings.8570+0x334>
					profile_state = 1; // stop editing
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <do_profile_settings.8570+0x30c>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e020      	b.n	8001a14 <do_profile_settings.8570+0x334>
				if (diff > 0)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	dd17      	ble.n	8001a08 <do_profile_settings.8570+0x328>
					profile_state = 21;
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <do_profile_settings.8570+0x30c>)
 80019da:	2215      	movs	r2, #21
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	e019      	b.n	8001a14 <do_profile_settings.8570+0x334>
 80019e0:	20000234 	.word	0x20000234
 80019e4:	200002c4 	.word	0x200002c4
 80019e8:	200002c6 	.word	0x200002c6
 80019ec:	200002c7 	.word	0x200002c7
 80019f0:	200002c8 	.word	0x200002c8
 80019f4:	200002cc 	.word	0x200002cc
 80019f8:	2000001d 	.word	0x2000001d
 80019fc:	2000056c 	.word	0x2000056c
 8001a00:	0800d758 	.word	0x0800d758
 8001a04:	20000231 	.word	0x20000231
				else if (diff < 0)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da02      	bge.n	8001a14 <do_profile_settings.8570+0x334>
					profile_state = 12;
 8001a0e:	4b9a      	ldr	r3, [pc, #616]	; (8001c78 <do_profile_settings.8570+0x598>)
 8001a10:	220c      	movs	r2, #12
 8001a12:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	469c      	mov	ip, r3
 8001a1a:	f7ff fdf1 	bl	8001600 <show_step_menu.8580>
			lcd_set_xy(&lcd, 9, 1);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2109      	movs	r1, #9
 8001a22:	4896      	ldr	r0, [pc, #600]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001a24:	f7fe fc84 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001a28:	4995      	ldr	r1, [pc, #596]	; (8001c80 <do_profile_settings.8570+0x5a0>)
 8001a2a:	4894      	ldr	r0, [pc, #592]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001a2c:	f7fe fc69 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001a30:	2100      	movs	r1, #0
 8001a32:	4892      	ldr	r0, [pc, #584]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001a34:	f7fe fd02 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	210c      	movs	r1, #12
 8001a3c:	488f      	ldr	r0, [pc, #572]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001a3e:	f7fe fc77 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001a42:	4b90      	ldr	r3, [pc, #576]	; (8001c84 <do_profile_settings.8570+0x5a4>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf94      	ite	ls
 8001a4a:	2301      	movls	r3, #1
 8001a4c:	2300      	movhi	r3, #0
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	2300      	movs	r3, #0
 8001a54:	2101      	movs	r1, #1
 8001a56:	4889      	ldr	r0, [pc, #548]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001a58:	f7fe fc08 	bl	800026c <lcd_mode>
			break;
 8001a5c:	e327      	b.n	80020ae <do_profile_settings.8570+0x9ce>
			if (diff == 0)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d156      	bne.n	8001b12 <do_profile_settings.8570+0x432>
				if (last_button && (!encoder.pressed))
 8001a64:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <do_profile_settings.8570+0x5a8>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d05f      	beq.n	8001b2c <do_profile_settings.8570+0x44c>
 8001a6c:	4b87      	ldr	r3, [pc, #540]	; (8001c8c <do_profile_settings.8570+0x5ac>)
 8001a6e:	789b      	ldrb	r3, [r3, #2]
 8001a70:	f083 0301 	eor.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d058      	beq.n	8001b2c <do_profile_settings.8570+0x44c>
					if (max_steps >= 9)
 8001a7a:	4b85      	ldr	r3, [pc, #532]	; (8001c90 <do_profile_settings.8570+0x5b0>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d903      	bls.n	8001a8a <do_profile_settings.8570+0x3aa>
						profile_state = 13;
 8001a82:	4b7d      	ldr	r3, [pc, #500]	; (8001c78 <do_profile_settings.8570+0x598>)
 8001a84:	220d      	movs	r2, #13
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e050      	b.n	8001b2c <do_profile_settings.8570+0x44c>
						for (int i = 8; i > pos; i--)
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e016      	b.n	8001abe <do_profile_settings.8570+0x3de>
							steps[i].time = steps[i-1].time;
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	4a7f      	ldr	r2, [pc, #508]	; (8001c94 <do_profile_settings.8570+0x5b4>)
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4413      	add	r3, r2
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	497d      	ldr	r1, [pc, #500]	; (8001c94 <do_profile_settings.8570+0x5b4>)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	605a      	str	r2, [r3, #4]
							steps[i].temp = steps[i-1].temp;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	4a7a      	ldr	r2, [pc, #488]	; (8001c94 <do_profile_settings.8570+0x5b4>)
 8001aac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001ab0:	4978      	ldr	r1, [pc, #480]	; (8001c94 <do_profile_settings.8570+0x5b4>)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						for (int i = 8; i > pos; i--)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	4b76      	ldr	r3, [pc, #472]	; (8001c98 <do_profile_settings.8570+0x5b8>)
 8001ac0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	dce1      	bgt.n	8001a90 <do_profile_settings.8570+0x3b0>
						pos++;
 8001acc:	4b72      	ldr	r3, [pc, #456]	; (8001c98 <do_profile_settings.8570+0x5b8>)
 8001ace:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	b25a      	sxtb	r2, r3
 8001ada:	4b6f      	ldr	r3, [pc, #444]	; (8001c98 <do_profile_settings.8570+0x5b8>)
 8001adc:	701a      	strb	r2, [r3, #0]
						steps[pos].time = 60;
 8001ade:	4b6e      	ldr	r3, [pc, #440]	; (8001c98 <do_profile_settings.8570+0x5b8>)
 8001ae0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ae4:	4a6b      	ldr	r2, [pc, #428]	; (8001c94 <do_profile_settings.8570+0x5b4>)
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	223c      	movs	r2, #60	; 0x3c
 8001aec:	605a      	str	r2, [r3, #4]
						steps[pos].temp = 100;
 8001aee:	4b6a      	ldr	r3, [pc, #424]	; (8001c98 <do_profile_settings.8570+0x5b8>)
 8001af0:	f993 3000 	ldrsb.w	r3, [r3]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4b67      	ldr	r3, [pc, #412]	; (8001c94 <do_profile_settings.8570+0x5b4>)
 8001af8:	2264      	movs	r2, #100	; 0x64
 8001afa:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
						max_steps++;
 8001afe:	4b64      	ldr	r3, [pc, #400]	; (8001c90 <do_profile_settings.8570+0x5b0>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	3301      	adds	r3, #1
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b62      	ldr	r3, [pc, #392]	; (8001c90 <do_profile_settings.8570+0x5b0>)
 8001b08:	701a      	strb	r2, [r3, #0]
						profile_state = 10; // wait for confirmation
 8001b0a:	4b5b      	ldr	r3, [pc, #364]	; (8001c78 <do_profile_settings.8570+0x598>)
 8001b0c:	220a      	movs	r2, #10
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e00c      	b.n	8001b2c <do_profile_settings.8570+0x44c>
				if (diff > 0)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	dd03      	ble.n	8001b20 <do_profile_settings.8570+0x440>
					profile_state = 12;
 8001b18:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <do_profile_settings.8570+0x598>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	e005      	b.n	8001b2c <do_profile_settings.8570+0x44c>
				else if (diff < 0)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	da02      	bge.n	8001b2c <do_profile_settings.8570+0x44c>
					profile_state = 23;
 8001b26:	4b54      	ldr	r3, [pc, #336]	; (8001c78 <do_profile_settings.8570+0x598>)
 8001b28:	2217      	movs	r2, #23
 8001b2a:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	469c      	mov	ip, r3
 8001b32:	f7ff fd65 	bl	8001600 <show_step_menu.8580>
			lcd_set_xy(&lcd, 9, 1);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2109      	movs	r1, #9
 8001b3a:	4850      	ldr	r0, [pc, #320]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001b3c:	f7fe fbf8 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001b40:	494f      	ldr	r1, [pc, #316]	; (8001c80 <do_profile_settings.8570+0x5a0>)
 8001b42:	484e      	ldr	r0, [pc, #312]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001b44:	f7fe fbdd 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	484c      	ldr	r0, [pc, #304]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001b4c:	f7fe fc76 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 10, 1);
 8001b50:	2201      	movs	r2, #1
 8001b52:	210a      	movs	r1, #10
 8001b54:	4849      	ldr	r0, [pc, #292]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001b56:	f7fe fbeb 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001b5a:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <do_profile_settings.8570+0x5a4>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf94      	ite	ls
 8001b62:	2301      	movls	r3, #1
 8001b64:	2300      	movhi	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4843      	ldr	r0, [pc, #268]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001b70:	f7fe fb7c 	bl	800026c <lcd_mode>
			break;
 8001b74:	e29b      	b.n	80020ae <do_profile_settings.8570+0x9ce>
			if (diff == 0)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d14a      	bne.n	8001c12 <do_profile_settings.8570+0x532>
				if (last_button && (!encoder.pressed))
 8001b7c:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <do_profile_settings.8570+0x5a8>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d053      	beq.n	8001c2c <do_profile_settings.8570+0x54c>
 8001b84:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <do_profile_settings.8570+0x5ac>)
 8001b86:	789b      	ldrb	r3, [r3, #2]
 8001b88:	f083 0301 	eor.w	r3, r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d04c      	beq.n	8001c2c <do_profile_settings.8570+0x54c>
					if (max_steps <= 1)
 8001b92:	4b3f      	ldr	r3, [pc, #252]	; (8001c90 <do_profile_settings.8570+0x5b0>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d803      	bhi.n	8001ba2 <do_profile_settings.8570+0x4c2>
						profile_state = 14;
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <do_profile_settings.8570+0x598>)
 8001b9c:	220e      	movs	r2, #14
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	e044      	b.n	8001c2c <do_profile_settings.8570+0x54c>
						for (int i = pos; i < 8; i++)
 8001ba2:	4b3d      	ldr	r3, [pc, #244]	; (8001c98 <do_profile_settings.8570+0x5b8>)
 8001ba4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	e016      	b.n	8001bda <do_profile_settings.8570+0x4fa>
							steps[i].time = steps[i+1].time;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	4a38      	ldr	r2, [pc, #224]	; (8001c94 <do_profile_settings.8570+0x5b4>)
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4936      	ldr	r1, [pc, #216]	; (8001c94 <do_profile_settings.8570+0x5b4>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	605a      	str	r2, [r3, #4]
							steps[i].temp = steps[i+1].temp;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	4a33      	ldr	r2, [pc, #204]	; (8001c94 <do_profile_settings.8570+0x5b4>)
 8001bc8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001bcc:	4931      	ldr	r1, [pc, #196]	; (8001c94 <do_profile_settings.8570+0x5b4>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						for (int i = pos; i < 8; i++)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b07      	cmp	r3, #7
 8001bde:	dde5      	ble.n	8001bac <do_profile_settings.8570+0x4cc>
						max_steps--;
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <do_profile_settings.8570+0x5b0>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <do_profile_settings.8570+0x5b0>)
 8001bea:	701a      	strb	r2, [r3, #0]
						if (pos >= max_steps) 	// if it was last position
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <do_profile_settings.8570+0x5b8>)
 8001bee:	f993 3000 	ldrsb.w	r3, [r3]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <do_profile_settings.8570+0x5b0>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	db06      	blt.n	8001c0a <do_profile_settings.8570+0x52a>
							pos = max_steps-1; 	// move to the previous one
 8001bfc:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <do_profile_settings.8570+0x5b0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	b25a      	sxtb	r2, r3
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <do_profile_settings.8570+0x5b8>)
 8001c08:	701a      	strb	r2, [r3, #0]
						profile_state = 1; 	// show profile
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <do_profile_settings.8570+0x598>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	e00c      	b.n	8001c2c <do_profile_settings.8570+0x54c>
				if (diff > 0)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	dd03      	ble.n	8001c20 <do_profile_settings.8570+0x540>
					profile_state = 10;
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <do_profile_settings.8570+0x598>)
 8001c1a:	220a      	movs	r2, #10
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	e005      	b.n	8001c2c <do_profile_settings.8570+0x54c>
				else if (diff < 0)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	da02      	bge.n	8001c2c <do_profile_settings.8570+0x54c>
					profile_state = 11;
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <do_profile_settings.8570+0x598>)
 8001c28:	220b      	movs	r2, #11
 8001c2a:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001c2c:	f107 0308 	add.w	r3, r7, #8
 8001c30:	469c      	mov	ip, r3
 8001c32:	f7ff fce5 	bl	8001600 <show_step_menu.8580>
			lcd_set_xy(&lcd, 9, 1);
 8001c36:	2201      	movs	r2, #1
 8001c38:	2109      	movs	r1, #9
 8001c3a:	4810      	ldr	r0, [pc, #64]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001c3c:	f7fe fb78 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001c40:	490f      	ldr	r1, [pc, #60]	; (8001c80 <do_profile_settings.8570+0x5a0>)
 8001c42:	480e      	ldr	r0, [pc, #56]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001c44:	f7fe fb5d 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	480c      	ldr	r0, [pc, #48]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001c4c:	f7fe fbf6 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 11, 1);
 8001c50:	2201      	movs	r2, #1
 8001c52:	210b      	movs	r1, #11
 8001c54:	4809      	ldr	r0, [pc, #36]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001c56:	f7fe fb6b 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <do_profile_settings.8570+0x5a4>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf94      	ite	ls
 8001c62:	2301      	movls	r3, #1
 8001c64:	2300      	movhi	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	4803      	ldr	r0, [pc, #12]	; (8001c7c <do_profile_settings.8570+0x59c>)
 8001c70:	f7fe fafc 	bl	800026c <lcd_mode>
			break;
 8001c74:	e21b      	b.n	80020ae <do_profile_settings.8570+0x9ce>
 8001c76:	bf00      	nop
 8001c78:	200002c7 	.word	0x200002c7
 8001c7c:	2000056c 	.word	0x2000056c
 8001c80:	0800d760 	.word	0x0800d760
 8001c84:	20000231 	.word	0x20000231
 8001c88:	200002cc 	.word	0x200002cc
 8001c8c:	20000234 	.word	0x20000234
 8001c90:	2000001d 	.word	0x2000001d
 8001c94:	20000264 	.word	0x20000264
 8001c98:	200002c6 	.word	0x200002c6
			if (last_button && (!encoder.pressed)) // wait for confirmation
 8001c9c:	4ba8      	ldr	r3, [pc, #672]	; (8001f40 <do_profile_settings.8570+0x860>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <do_profile_settings.8570+0x5d8>
 8001ca4:	4ba7      	ldr	r3, [pc, #668]	; (8001f44 <do_profile_settings.8570+0x864>)
 8001ca6:	789b      	ldrb	r3, [r3, #2]
 8001ca8:	f083 0301 	eor.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <do_profile_settings.8570+0x5d8>
				profile_state = 10;
 8001cb2:	4ba5      	ldr	r3, [pc, #660]	; (8001f48 <do_profile_settings.8570+0x868>)
 8001cb4:	220a      	movs	r2, #10
 8001cb6:	701a      	strb	r2, [r3, #0]
			lcd_set_xy(&lcd, 0, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	48a3      	ldr	r0, [pc, #652]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001cbe:	f7fe fb37 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "Not possible");
 8001cc2:	49a3      	ldr	r1, [pc, #652]	; (8001f50 <do_profile_settings.8570+0x870>)
 8001cc4:	48a1      	ldr	r0, [pc, #644]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001cc6:	f7fe fb1c 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 0, 1);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2100      	movs	r1, #0
 8001cce:	489f      	ldr	r0, [pc, #636]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001cd0:	f7fe fb2e 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "max 9 steps ");
 8001cd4:	499f      	ldr	r1, [pc, #636]	; (8001f54 <do_profile_settings.8570+0x874>)
 8001cd6:	489d      	ldr	r0, [pc, #628]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001cd8:	f7fe fb13 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001cdc:	2100      	movs	r1, #0
 8001cde:	489b      	ldr	r0, [pc, #620]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001ce0:	f7fe fbac 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	210c      	movs	r1, #12
 8001ce8:	4898      	ldr	r0, [pc, #608]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001cea:	f7fe fb21 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001cee:	4b9a      	ldr	r3, [pc, #616]	; (8001f58 <do_profile_settings.8570+0x878>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf94      	ite	ls
 8001cf6:	2301      	movls	r3, #1
 8001cf8:	2300      	movhi	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2101      	movs	r1, #1
 8001d02:	4892      	ldr	r0, [pc, #584]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001d04:	f7fe fab2 	bl	800026c <lcd_mode>
			break;
 8001d08:	e1d1      	b.n	80020ae <do_profile_settings.8570+0x9ce>
			if (last_button && (!encoder.pressed)) // wait for confirmation
 8001d0a:	4b8d      	ldr	r3, [pc, #564]	; (8001f40 <do_profile_settings.8570+0x860>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <do_profile_settings.8570+0x646>
 8001d12:	4b8c      	ldr	r3, [pc, #560]	; (8001f44 <do_profile_settings.8570+0x864>)
 8001d14:	789b      	ldrb	r3, [r3, #2]
 8001d16:	f083 0301 	eor.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <do_profile_settings.8570+0x646>
				profile_state = 10;
 8001d20:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <do_profile_settings.8570+0x868>)
 8001d22:	220a      	movs	r2, #10
 8001d24:	701a      	strb	r2, [r3, #0]
			lcd_set_xy(&lcd, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4888      	ldr	r0, [pc, #544]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001d2c:	f7fe fb00 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "Not possible");
 8001d30:	4987      	ldr	r1, [pc, #540]	; (8001f50 <do_profile_settings.8570+0x870>)
 8001d32:	4886      	ldr	r0, [pc, #536]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001d34:	f7fe fae5 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 0, 1);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4883      	ldr	r0, [pc, #524]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001d3e:	f7fe faf7 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "min 1 step  ");
 8001d42:	4986      	ldr	r1, [pc, #536]	; (8001f5c <do_profile_settings.8570+0x87c>)
 8001d44:	4881      	ldr	r0, [pc, #516]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001d46:	f7fe fadc 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	487f      	ldr	r0, [pc, #508]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001d4e:	f7fe fb75 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 8001d52:	2201      	movs	r2, #1
 8001d54:	210c      	movs	r1, #12
 8001d56:	487d      	ldr	r0, [pc, #500]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001d58:	f7fe faea 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001d5c:	4b7e      	ldr	r3, [pc, #504]	; (8001f58 <do_profile_settings.8570+0x878>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	bf94      	ite	ls
 8001d64:	2301      	movls	r3, #1
 8001d66:	2300      	movhi	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	2101      	movs	r1, #1
 8001d70:	4876      	ldr	r0, [pc, #472]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001d72:	f7fe fa7b 	bl	800026c <lcd_mode>
			break;
 8001d76:	e19a      	b.n	80020ae <do_profile_settings.8570+0x9ce>
			if (diff == 0)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10e      	bne.n	8001d9c <do_profile_settings.8570+0x6bc>
				if (last_button && (!encoder.pressed))
 8001d7e:	4b70      	ldr	r3, [pc, #448]	; (8001f40 <do_profile_settings.8570+0x860>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d017      	beq.n	8001db6 <do_profile_settings.8570+0x6d6>
 8001d86:	4b6f      	ldr	r3, [pc, #444]	; (8001f44 <do_profile_settings.8570+0x864>)
 8001d88:	789b      	ldrb	r3, [r3, #2]
 8001d8a:	f083 0301 	eor.w	r3, r3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d010      	beq.n	8001db6 <do_profile_settings.8570+0x6d6>
					profile_state = 22; // start edit
 8001d94:	4b6c      	ldr	r3, [pc, #432]	; (8001f48 <do_profile_settings.8570+0x868>)
 8001d96:	2216      	movs	r2, #22
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	e00c      	b.n	8001db6 <do_profile_settings.8570+0x6d6>
				if (diff > 0)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	dd03      	ble.n	8001daa <do_profile_settings.8570+0x6ca>
					profile_state = 23;
 8001da2:	4b69      	ldr	r3, [pc, #420]	; (8001f48 <do_profile_settings.8570+0x868>)
 8001da4:	2217      	movs	r2, #23
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e005      	b.n	8001db6 <do_profile_settings.8570+0x6d6>
				else if (diff < 0)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	da02      	bge.n	8001db6 <do_profile_settings.8570+0x6d6>
					profile_state = 10;
 8001db0:	4b65      	ldr	r3, [pc, #404]	; (8001f48 <do_profile_settings.8570+0x868>)
 8001db2:	220a      	movs	r2, #10
 8001db4:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	469c      	mov	ip, r3
 8001dbc:	f7ff fc20 	bl	8001600 <show_step_menu.8580>
			lcd_set_xy(&lcd, 9, 1);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2109      	movs	r1, #9
 8001dc4:	4861      	ldr	r0, [pc, #388]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001dc6:	f7fe fab3 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001dca:	4965      	ldr	r1, [pc, #404]	; (8001f60 <do_profile_settings.8570+0x880>)
 8001dcc:	485f      	ldr	r0, [pc, #380]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001dce:	f7fe fa98 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	485d      	ldr	r0, [pc, #372]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001dd6:	f7fe fb31 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 2, 1);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2102      	movs	r1, #2
 8001dde:	485b      	ldr	r0, [pc, #364]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001de0:	f7fe faa6 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001de4:	4b5c      	ldr	r3, [pc, #368]	; (8001f58 <do_profile_settings.8570+0x878>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	bf94      	ite	ls
 8001dec:	2301      	movls	r3, #1
 8001dee:	2300      	movhi	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	2300      	movs	r3, #0
 8001df6:	2101      	movs	r1, #1
 8001df8:	4854      	ldr	r0, [pc, #336]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001dfa:	f7fe fa37 	bl	800026c <lcd_mode>
			break;
 8001dfe:	e156      	b.n	80020ae <do_profile_settings.8570+0x9ce>
			if (diff == 0)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10e      	bne.n	8001e24 <do_profile_settings.8570+0x744>
				if (last_button && (!encoder.pressed))
 8001e06:	4b4e      	ldr	r3, [pc, #312]	; (8001f40 <do_profile_settings.8570+0x860>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01e      	beq.n	8001e4c <do_profile_settings.8570+0x76c>
 8001e0e:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <do_profile_settings.8570+0x864>)
 8001e10:	789b      	ldrb	r3, [r3, #2]
 8001e12:	f083 0301 	eor.w	r3, r3, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d017      	beq.n	8001e4c <do_profile_settings.8570+0x76c>
					profile_state = 21; // stop editing
 8001e1c:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <do_profile_settings.8570+0x868>)
 8001e1e:	2215      	movs	r2, #21
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e013      	b.n	8001e4c <do_profile_settings.8570+0x76c>
				steps[pos].temp = change_temperature(steps[pos].temp, diff);
 8001e24:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <do_profile_settings.8570+0x884>)
 8001e26:	f993 3000 	ldrsb.w	r3, [r3]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b4e      	ldr	r3, [pc, #312]	; (8001f68 <do_profile_settings.8570+0x888>)
 8001e2e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001e32:	46a4      	mov	ip, r4
 8001e34:	6979      	ldr	r1, [r7, #20]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fab8 	bl	80013ac <change_temperature.8553>
 8001e3c:	4601      	mov	r1, r0
 8001e3e:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <do_profile_settings.8570+0x884>)
 8001e40:	f993 3000 	ldrsb.w	r3, [r3]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <do_profile_settings.8570+0x888>)
 8001e48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			show_step_menu();
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	469c      	mov	ip, r3
 8001e52:	f7ff fbd5 	bl	8001600 <show_step_menu.8580>
			lcd_set_xy(&lcd, 9, 1);
 8001e56:	2201      	movs	r2, #1
 8001e58:	2109      	movs	r1, #9
 8001e5a:	483c      	ldr	r0, [pc, #240]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001e5c:	f7fe fa68 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001e60:	493f      	ldr	r1, [pc, #252]	; (8001f60 <do_profile_settings.8570+0x880>)
 8001e62:	483a      	ldr	r0, [pc, #232]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001e64:	f7fe fa4d 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4838      	ldr	r0, [pc, #224]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001e6c:	f7fe fae6 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 2, 1);
 8001e70:	2201      	movs	r2, #1
 8001e72:	2102      	movs	r1, #2
 8001e74:	4835      	ldr	r0, [pc, #212]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001e76:	f7fe fa5b 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2101      	movs	r1, #1
 8001e80:	4832      	ldr	r0, [pc, #200]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001e82:	f7fe f9f3 	bl	800026c <lcd_mode>
			break;
 8001e86:	e112      	b.n	80020ae <do_profile_settings.8570+0x9ce>
			if (diff == 0)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10e      	bne.n	8001eac <do_profile_settings.8570+0x7cc>
				if (last_button && (!encoder.pressed))
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <do_profile_settings.8570+0x860>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d017      	beq.n	8001ec6 <do_profile_settings.8570+0x7e6>
 8001e96:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <do_profile_settings.8570+0x864>)
 8001e98:	789b      	ldrb	r3, [r3, #2]
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d010      	beq.n	8001ec6 <do_profile_settings.8570+0x7e6>
					profile_state = 24; // start edit
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <do_profile_settings.8570+0x868>)
 8001ea6:	2218      	movs	r2, #24
 8001ea8:	701a      	strb	r2, [r3, #0]
 8001eaa:	e00c      	b.n	8001ec6 <do_profile_settings.8570+0x7e6>
				if (diff > 0)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	dd03      	ble.n	8001eba <do_profile_settings.8570+0x7da>
					profile_state = 11;
 8001eb2:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <do_profile_settings.8570+0x868>)
 8001eb4:	220b      	movs	r2, #11
 8001eb6:	701a      	strb	r2, [r3, #0]
 8001eb8:	e005      	b.n	8001ec6 <do_profile_settings.8570+0x7e6>
				else if (diff < 0)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	da02      	bge.n	8001ec6 <do_profile_settings.8570+0x7e6>
					profile_state = 21;
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <do_profile_settings.8570+0x868>)
 8001ec2:	2215      	movs	r2, #21
 8001ec4:	701a      	strb	r2, [r3, #0]
			show_step_menu();
 8001ec6:	f107 0308 	add.w	r3, r7, #8
 8001eca:	469c      	mov	ip, r3
 8001ecc:	f7ff fb98 	bl	8001600 <show_step_menu.8580>
			lcd_set_xy(&lcd, 0, 1);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	481d      	ldr	r0, [pc, #116]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001ed6:	f7fe fa2b 	bl	8000330 <lcd_set_xy>
			lcd_set_xy(&lcd, 9, 1);
 8001eda:	2201      	movs	r2, #1
 8001edc:	2109      	movs	r1, #9
 8001ede:	481b      	ldr	r0, [pc, #108]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001ee0:	f7fe fa26 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001ee4:	491e      	ldr	r1, [pc, #120]	; (8001f60 <do_profile_settings.8570+0x880>)
 8001ee6:	4819      	ldr	r0, [pc, #100]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001ee8:	f7fe fa0b 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001eec:	2100      	movs	r1, #0
 8001eee:	4817      	ldr	r0, [pc, #92]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001ef0:	f7fe faa4 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 8, 1);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2108      	movs	r1, #8
 8001ef8:	4814      	ldr	r0, [pc, #80]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001efa:	f7fe fa19 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <do_profile_settings.8570+0x878>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf94      	ite	ls
 8001f06:	2301      	movls	r3, #1
 8001f08:	2300      	movhi	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2101      	movs	r1, #1
 8001f12:	480e      	ldr	r0, [pc, #56]	; (8001f4c <do_profile_settings.8570+0x86c>)
 8001f14:	f7fe f9aa 	bl	800026c <lcd_mode>
			break;
 8001f18:	e0c9      	b.n	80020ae <do_profile_settings.8570+0x9ce>
			if (diff == 0)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d125      	bne.n	8001f6c <do_profile_settings.8570+0x88c>
				if (last_button && (!encoder.pressed))
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <do_profile_settings.8570+0x860>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d036      	beq.n	8001f96 <do_profile_settings.8570+0x8b6>
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <do_profile_settings.8570+0x864>)
 8001f2a:	789b      	ldrb	r3, [r3, #2]
 8001f2c:	f083 0301 	eor.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d02f      	beq.n	8001f96 <do_profile_settings.8570+0x8b6>
					profile_state = 23; // stop editing
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <do_profile_settings.8570+0x868>)
 8001f38:	2217      	movs	r2, #23
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e02b      	b.n	8001f96 <do_profile_settings.8570+0x8b6>
 8001f3e:	bf00      	nop
 8001f40:	200002cc 	.word	0x200002cc
 8001f44:	20000234 	.word	0x20000234
 8001f48:	200002c7 	.word	0x200002c7
 8001f4c:	2000056c 	.word	0x2000056c
 8001f50:	0800d764 	.word	0x0800d764
 8001f54:	0800d774 	.word	0x0800d774
 8001f58:	20000231 	.word	0x20000231
 8001f5c:	0800d784 	.word	0x0800d784
 8001f60:	0800d760 	.word	0x0800d760
 8001f64:	200002c6 	.word	0x200002c6
 8001f68:	20000264 	.word	0x20000264
				steps[pos].time = change_time(steps[pos].time, diff);
 8001f6c:	4b54      	ldr	r3, [pc, #336]	; (80020c0 <do_profile_settings.8570+0x9e0>)
 8001f6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f72:	4a54      	ldr	r2, [pc, #336]	; (80020c4 <do_profile_settings.8570+0x9e4>)
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a51      	ldr	r2, [pc, #324]	; (80020c0 <do_profile_settings.8570+0x9e0>)
 8001f7c:	f992 2000 	ldrsb.w	r2, [r2]
 8001f80:	4615      	mov	r5, r2
 8001f82:	46a4      	mov	ip, r4
 8001f84:	6979      	ldr	r1, [r7, #20]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fa44 	bl	8001414 <change_time.8558>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	494d      	ldr	r1, [pc, #308]	; (80020c4 <do_profile_settings.8570+0x9e4>)
 8001f90:	00eb      	lsls	r3, r5, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	605a      	str	r2, [r3, #4]
			show_step_menu();
 8001f96:	f107 0308 	add.w	r3, r7, #8
 8001f9a:	469c      	mov	ip, r3
 8001f9c:	f7ff fb30 	bl	8001600 <show_step_menu.8580>
			lcd_set_xy(&lcd, 9, 1);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2109      	movs	r1, #9
 8001fa4:	4848      	ldr	r0, [pc, #288]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8001fa6:	f7fe f9c3 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001faa:	4948      	ldr	r1, [pc, #288]	; (80020cc <do_profile_settings.8570+0x9ec>)
 8001fac:	4846      	ldr	r0, [pc, #280]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8001fae:	f7fe f9a8 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4844      	ldr	r0, [pc, #272]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8001fb6:	f7fe fa41 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 8, 1);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2108      	movs	r1, #8
 8001fbe:	4842      	ldr	r0, [pc, #264]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8001fc0:	f7fe f9b6 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2101      	movs	r1, #1
 8001fca:	483f      	ldr	r0, [pc, #252]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8001fcc:	f7fe f94e 	bl	800026c <lcd_mode>
			break;
 8001fd0:	e06d      	b.n	80020ae <do_profile_settings.8570+0x9ce>
			lcd_set_xy(&lcd, 0, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	483c      	ldr	r0, [pc, #240]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8001fd8:	f7fe f9aa 	bl	8000330 <lcd_set_xy>
			lcd_write_data(&lcd, ' ');
 8001fdc:	2120      	movs	r1, #32
 8001fde:	483a      	ldr	r0, [pc, #232]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8001fe0:	f7fe fa2c 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, scSIGMA);
 8001fe4:	21f6      	movs	r1, #246	; 0xf6
 8001fe6:	4838      	ldr	r0, [pc, #224]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8001fe8:	f7fe fa28 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, ' ');
 8001fec:	2120      	movs	r1, #32
 8001fee:	4836      	ldr	r0, [pc, #216]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8001ff0:	f7fe fa24 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, max_steps + '0');
 8001ff4:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <do_profile_settings.8570+0x9f0>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	3330      	adds	r3, #48	; 0x30
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4832      	ldr	r0, [pc, #200]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8002000:	f7fe fa1c 	bl	800043c <lcd_write_data>
			lcd_string(&lcd, " steps  ");
 8002004:	4933      	ldr	r1, [pc, #204]	; (80020d4 <do_profile_settings.8570+0x9f4>)
 8002006:	4830      	ldr	r0, [pc, #192]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8002008:	f7fe f97b 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 0, 1);
 800200c:	2201      	movs	r2, #1
 800200e:	2100      	movs	r1, #0
 8002010:	482d      	ldr	r0, [pc, #180]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8002012:	f7fe f98d 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "start prof. ");
 8002016:	4930      	ldr	r1, [pc, #192]	; (80020d8 <do_profile_settings.8570+0x9f8>)
 8002018:	482b      	ldr	r0, [pc, #172]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 800201a:	f7fe f972 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 800201e:	2100      	movs	r1, #0
 8002020:	4829      	ldr	r0, [pc, #164]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8002022:	f7fe fa0b 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 8002026:	2201      	movs	r2, #1
 8002028:	210c      	movs	r1, #12
 800202a:	4827      	ldr	r0, [pc, #156]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 800202c:	f7fe f980 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8002030:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <do_profile_settings.8570+0x9fc>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b04      	cmp	r3, #4
 8002036:	bf94      	ite	ls
 8002038:	2301      	movls	r3, #1
 800203a:	2300      	movhi	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	2300      	movs	r3, #0
 8002042:	2101      	movs	r1, #1
 8002044:	4820      	ldr	r0, [pc, #128]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 8002046:	f7fe f911 	bl	800026c <lcd_mode>
			if (diff == 0)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d110      	bne.n	8002072 <do_profile_settings.8570+0x992>
				if (last_button && (!encoder.pressed))
 8002050:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <do_profile_settings.8570+0xa00>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d029      	beq.n	80020ac <do_profile_settings.8570+0x9cc>
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <do_profile_settings.8570+0xa04>)
 800205a:	789b      	ldrb	r3, [r3, #2]
 800205c:	f083 0301 	eor.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d022      	beq.n	80020ac <do_profile_settings.8570+0x9cc>
					lcd_mini_clear(&lcd);
 8002066:	46a4      	mov	ip, r4
 8002068:	4817      	ldr	r0, [pc, #92]	; (80020c8 <do_profile_settings.8570+0x9e8>)
 800206a:	f7fe fdc9 	bl	8000c00 <lcd_mini_clear.8549>
					return true;
 800206e:	2301      	movs	r3, #1
 8002070:	e022      	b.n	80020b8 <do_profile_settings.8570+0x9d8>
				if (diff > 0)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	dd03      	ble.n	8002080 <do_profile_settings.8570+0x9a0>
					pos = 0;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <do_profile_settings.8570+0x9e0>)
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	e009      	b.n	8002094 <do_profile_settings.8570+0x9b4>
				else if (diff < 0)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	da06      	bge.n	8002094 <do_profile_settings.8570+0x9b4>
					pos = max_steps - 1;
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <do_profile_settings.8570+0x9f0>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	3b01      	subs	r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	b25a      	sxtb	r2, r3
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <do_profile_settings.8570+0x9e0>)
 8002092:	701a      	strb	r2, [r3, #0]
				profile_state = 1;
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <do_profile_settings.8570+0xa08>)
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
			break;
 800209a:	e007      	b.n	80020ac <do_profile_settings.8570+0x9cc>
			global_error |= errFATAL;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <do_profile_settings.8570+0xa0c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <do_profile_settings.8570+0xa0c>)
 80020a8:	701a      	strb	r2, [r3, #0]
			break;
 80020aa:	e000      	b.n	80020ae <do_profile_settings.8570+0x9ce>
			break;
 80020ac:	bf00      	nop
		last_button = encoder.pressed;
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <do_profile_settings.8570+0xa04>)
 80020b0:	789a      	ldrb	r2, [r3, #2]
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <do_profile_settings.8570+0xa00>)
 80020b4:	701a      	strb	r2, [r3, #0]
		return false;
 80020b6:	2300      	movs	r3, #0
	}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3720      	adds	r7, #32
 80020bc:	46bd      	mov	sp, r7
 80020be:	bdb0      	pop	{r4, r5, r7, pc}
 80020c0:	200002c6 	.word	0x200002c6
 80020c4:	20000264 	.word	0x20000264
 80020c8:	2000056c 	.word	0x2000056c
 80020cc:	0800d760 	.word	0x0800d760
 80020d0:	2000001d 	.word	0x2000001d
 80020d4:	0800d794 	.word	0x0800d794
 80020d8:	0800d7a0 	.word	0x0800d7a0
 80020dc:	20000231 	.word	0x20000231
 80020e0:	200002cc 	.word	0x200002cc
 80020e4:	20000234 	.word	0x20000234
 80020e8:	200002c7 	.word	0x200002c7
 80020ec:	20000230 	.word	0x20000230

080020f0 <do_reflow.8606>:
	{
 80020f0:	b5b0      	push	{r4, r5, r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	4664      	mov	r4, ip
 80020fc:	f8c7 c000 	str.w	ip, [r7]
		if (reset)
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00e      	beq.n	8002124 <do_reflow.8606+0x34>
			last_time = HAL_GetTick();
 8002106:	f001 fcbb 	bl	8003a80 <HAL_GetTick>
 800210a:	4603      	mov	r3, r0
 800210c:	4a9f      	ldr	r2, [pc, #636]	; (800238c <do_reflow.8606+0x29c>)
 800210e:	6013      	str	r3, [r2, #0]
			peep_first_time = true;
 8002110:	4b9f      	ldr	r3, [pc, #636]	; (8002390 <do_reflow.8606+0x2a0>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
			last_button = false;
 8002116:	4b9f      	ldr	r3, [pc, #636]	; (8002394 <do_reflow.8606+0x2a4>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
			pos = 0;
 800211c:	4b9e      	ldr	r3, [pc, #632]	; (8002398 <do_reflow.8606+0x2a8>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
			return;
 8002122:	e31f      	b.n	8002764 <do_reflow.8606+0x674>
		int32_t dt = ((int32_t)(temperature_SP<<2)) -
 8002124:	4b9d      	ldr	r3, [pc, #628]	; (800239c <do_reflow.8606+0x2ac>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	009b      	lsls	r3, r3, #2
					 ((int32_t)MAX6675.temperature);
 800212a:	4a9d      	ldr	r2, [pc, #628]	; (80023a0 <do_reflow.8606+0x2b0>)
 800212c:	8812      	ldrh	r2, [r2, #0]
		int32_t dt = ((int32_t)(temperature_SP<<2)) -
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	61fb      	str	r3, [r7, #28]
		if (pos >= (2*max_steps))
 8002132:	4b99      	ldr	r3, [pc, #612]	; (8002398 <do_reflow.8606+0x2a8>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	4b9a      	ldr	r3, [pc, #616]	; (80023a4 <do_reflow.8606+0x2b4>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	429a      	cmp	r2, r3
 8002142:	db76      	blt.n	8002232 <do_reflow.8606+0x142>
			if (peep_first_time)
 8002144:	4b92      	ldr	r3, [pc, #584]	; (8002390 <do_reflow.8606+0x2a0>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <do_reflow.8606+0x68>
				peep.peep = true;
 800214c:	4b96      	ldr	r3, [pc, #600]	; (80023a8 <do_reflow.8606+0x2b8>)
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
				peep_first_time = false;
 8002152:	4b8f      	ldr	r3, [pc, #572]	; (8002390 <do_reflow.8606+0x2a0>)
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
			if (encoder.pressed)
 8002158:	4b94      	ldr	r3, [pc, #592]	; (80023ac <do_reflow.8606+0x2bc>)
 800215a:	789b      	ldrb	r3, [r3, #2]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <do_reflow.8606+0x76>
				peep.peep = false;
 8002160:	4b91      	ldr	r3, [pc, #580]	; (80023a8 <do_reflow.8606+0x2b8>)
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
			temperature_SP = 0;
 8002166:	4b8d      	ldr	r3, [pc, #564]	; (800239c <do_reflow.8606+0x2ac>)
 8002168:	2200      	movs	r2, #0
 800216a:	801a      	strh	r2, [r3, #0]
			lcd_set_xy(&lcd, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	488f      	ldr	r0, [pc, #572]	; (80023b0 <do_reflow.8606+0x2c0>)
 8002172:	f7fe f8dd 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "Cooldown    ");
 8002176:	498f      	ldr	r1, [pc, #572]	; (80023b4 <do_reflow.8606+0x2c4>)
 8002178:	488d      	ldr	r0, [pc, #564]	; (80023b0 <do_reflow.8606+0x2c0>)
 800217a:	f7fe f8c2 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 7, 1);
 800217e:	2201      	movs	r2, #1
 8002180:	2107      	movs	r1, #7
 8002182:	488b      	ldr	r0, [pc, #556]	; (80023b0 <do_reflow.8606+0x2c0>)
 8002184:	f7fe f8d4 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "+");
 8002188:	498b      	ldr	r1, [pc, #556]	; (80023b8 <do_reflow.8606+0x2c8>)
 800218a:	4889      	ldr	r0, [pc, #548]	; (80023b0 <do_reflow.8606+0x2c0>)
 800218c:	f7fe f8b9 	bl	8000302 <lcd_string>
			lcd_string(&lcd, int2time((HAL_GetTick() - last_time)/1000, time_buf));
 8002190:	f001 fc76 	bl	8003a80 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	4b7d      	ldr	r3, [pc, #500]	; (800238c <do_reflow.8606+0x29c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4a87      	ldr	r2, [pc, #540]	; (80023bc <do_reflow.8606+0x2cc>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	099b      	lsrs	r3, r3, #6
 80021a4:	f107 0210 	add.w	r2, r7, #16
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fa02 	bl	80005b4 <int2time>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4619      	mov	r1, r3
 80021b4:	487e      	ldr	r0, [pc, #504]	; (80023b0 <do_reflow.8606+0x2c0>)
 80021b6:	f7fe f8a4 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ' ');
 80021ba:	2120      	movs	r1, #32
 80021bc:	487c      	ldr	r0, [pc, #496]	; (80023b0 <do_reflow.8606+0x2c0>)
 80021be:	f7fe f93d 	bl	800043c <lcd_write_data>
			if (peep.peep)
 80021c2:	4b79      	ldr	r3, [pc, #484]	; (80023a8 <do_reflow.8606+0x2b8>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d023      	beq.n	8002212 <do_reflow.8606+0x122>
				lcd_set_xy(&lcd, 0, 1);
 80021ca:	2201      	movs	r2, #1
 80021cc:	2100      	movs	r1, #0
 80021ce:	4878      	ldr	r0, [pc, #480]	; (80023b0 <do_reflow.8606+0x2c0>)
 80021d0:	f7fe f8ae 	bl	8000330 <lcd_set_xy>
				lcd_string(&lcd, "mute");
 80021d4:	497a      	ldr	r1, [pc, #488]	; (80023c0 <do_reflow.8606+0x2d0>)
 80021d6:	4876      	ldr	r0, [pc, #472]	; (80023b0 <do_reflow.8606+0x2c0>)
 80021d8:	f7fe f893 	bl	8000302 <lcd_string>
				lcd_write_data(&lcd, ccENTER);
 80021dc:	2100      	movs	r1, #0
 80021de:	4874      	ldr	r0, [pc, #464]	; (80023b0 <do_reflow.8606+0x2c0>)
 80021e0:	f7fe f92c 	bl	800043c <lcd_write_data>
				lcd_string(&lcd, "  ");
 80021e4:	4977      	ldr	r1, [pc, #476]	; (80023c4 <do_reflow.8606+0x2d4>)
 80021e6:	4872      	ldr	r0, [pc, #456]	; (80023b0 <do_reflow.8606+0x2c0>)
 80021e8:	f7fe f88b 	bl	8000302 <lcd_string>
				lcd_set_xy(&lcd, 4, 1);
 80021ec:	2201      	movs	r2, #1
 80021ee:	2104      	movs	r1, #4
 80021f0:	486f      	ldr	r0, [pc, #444]	; (80023b0 <do_reflow.8606+0x2c0>)
 80021f2:	f7fe f89d 	bl	8000330 <lcd_set_xy>
				lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 80021f6:	4b74      	ldr	r3, [pc, #464]	; (80023c8 <do_reflow.8606+0x2d8>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	bf94      	ite	ls
 80021fe:	2301      	movls	r3, #1
 8002200:	2300      	movhi	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	2300      	movs	r3, #0
 8002208:	2101      	movs	r1, #1
 800220a:	4869      	ldr	r0, [pc, #420]	; (80023b0 <do_reflow.8606+0x2c0>)
 800220c:	f7fe f82e 	bl	800026c <lcd_mode>
			return;
 8002210:	e2a8      	b.n	8002764 <do_reflow.8606+0x674>
				lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 8002212:	2300      	movs	r3, #0
 8002214:	2200      	movs	r2, #0
 8002216:	2101      	movs	r1, #1
 8002218:	4865      	ldr	r0, [pc, #404]	; (80023b0 <do_reflow.8606+0x2c0>)
 800221a:	f7fe f827 	bl	800026c <lcd_mode>
				lcd_set_xy(&lcd, 0, 1);
 800221e:	2201      	movs	r2, #1
 8002220:	2100      	movs	r1, #0
 8002222:	4863      	ldr	r0, [pc, #396]	; (80023b0 <do_reflow.8606+0x2c0>)
 8002224:	f7fe f884 	bl	8000330 <lcd_set_xy>
				lcd_string(&lcd, "       ");
 8002228:	4968      	ldr	r1, [pc, #416]	; (80023cc <do_reflow.8606+0x2dc>)
 800222a:	4861      	ldr	r0, [pc, #388]	; (80023b0 <do_reflow.8606+0x2c0>)
 800222c:	f7fe f869 	bl	8000302 <lcd_string>
			return;
 8002230:	e298      	b.n	8002764 <do_reflow.8606+0x674>
		if (pos%2 == 0)
 8002232:	4b59      	ldr	r3, [pc, #356]	; (8002398 <do_reflow.8606+0x2a8>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d158      	bne.n	80022f4 <do_reflow.8606+0x204>
			temperature_SP = steps[pos>>1].temp;
 8002242:	4b55      	ldr	r3, [pc, #340]	; (8002398 <do_reflow.8606+0x2a8>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	4b60      	ldr	r3, [pc, #384]	; (80023d0 <do_reflow.8606+0x2e0>)
 8002250:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002254:	b29a      	uxth	r2, r3
 8002256:	4b51      	ldr	r3, [pc, #324]	; (800239c <do_reflow.8606+0x2ac>)
 8002258:	801a      	strh	r2, [r3, #0]
			time_buf[0] = '+';
 800225a:	232b      	movs	r3, #43	; 0x2b
 800225c:	743b      	strb	r3, [r7, #16]
			int2time((HAL_GetTick() - last_time)/1000, time_buf+1);
 800225e:	f001 fc0f 	bl	8003a80 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	4b49      	ldr	r3, [pc, #292]	; (800238c <do_reflow.8606+0x29c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	4a54      	ldr	r2, [pc, #336]	; (80023bc <do_reflow.8606+0x2cc>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	099a      	lsrs	r2, r3, #6
 8002272:	f107 0310 	add.w	r3, r7, #16
 8002276:	3301      	adds	r3, #1
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f7fe f99a 	bl	80005b4 <int2time>
			lcd_set_xy(&lcd, 0, 1);
 8002280:	2201      	movs	r2, #1
 8002282:	2100      	movs	r1, #0
 8002284:	484a      	ldr	r0, [pc, #296]	; (80023b0 <do_reflow.8606+0x2c0>)
 8002286:	f7fe f853 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "goto");
 800228a:	4952      	ldr	r1, [pc, #328]	; (80023d4 <do_reflow.8606+0x2e4>)
 800228c:	4848      	ldr	r0, [pc, #288]	; (80023b0 <do_reflow.8606+0x2c0>)
 800228e:	f7fe f838 	bl	8000302 <lcd_string>
			if ((dt > -(4<<2)) && (dt < (4<<2)))
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f113 0f0f 	cmn.w	r3, #15
 8002298:	db26      	blt.n	80022e8 <do_reflow.8606+0x1f8>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	2b0f      	cmp	r3, #15
 800229e:	dc23      	bgt.n	80022e8 <do_reflow.8606+0x1f8>
				if (HAL_GetTick() - check_time > 3000) // we should be at least some time in range
 80022a0:	f001 fbee 	bl	8003a80 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b4c      	ldr	r3, [pc, #304]	; (80023d8 <do_reflow.8606+0x2e8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022b0:	4293      	cmp	r3, r2
 80022b2:	f240 80bb 	bls.w	800242c <do_reflow.8606+0x33c>
					last_time = HAL_GetTick();
 80022b6:	f001 fbe3 	bl	8003a80 <HAL_GetTick>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4a33      	ldr	r2, [pc, #204]	; (800238c <do_reflow.8606+0x29c>)
 80022be:	6013      	str	r3, [r2, #0]
					pos++;
 80022c0:	4b35      	ldr	r3, [pc, #212]	; (8002398 <do_reflow.8606+0x2a8>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b33      	ldr	r3, [pc, #204]	; (8002398 <do_reflow.8606+0x2a8>)
 80022cc:	701a      	strb	r2, [r3, #0]
					temperature_SP = steps[pos>>1].temp;
 80022ce:	4b32      	ldr	r3, [pc, #200]	; (8002398 <do_reflow.8606+0x2a8>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <do_reflow.8606+0x2e0>)
 80022dc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	4b2e      	ldr	r3, [pc, #184]	; (800239c <do_reflow.8606+0x2ac>)
 80022e4:	801a      	strh	r2, [r3, #0]
				if (HAL_GetTick() - check_time > 3000) // we should be at least some time in range
 80022e6:	e0a1      	b.n	800242c <do_reflow.8606+0x33c>
				check_time = HAL_GetTick();
 80022e8:	f001 fbca 	bl	8003a80 <HAL_GetTick>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a3a      	ldr	r2, [pc, #232]	; (80023d8 <do_reflow.8606+0x2e8>)
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e09b      	b.n	800242c <do_reflow.8606+0x33c>
			temperature_SP = steps[pos>>1].temp;
 80022f4:	4b28      	ldr	r3, [pc, #160]	; (8002398 <do_reflow.8606+0x2a8>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	085b      	lsrs	r3, r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <do_reflow.8606+0x2e0>)
 8002302:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002306:	b29a      	uxth	r2, r3
 8002308:	4b24      	ldr	r3, [pc, #144]	; (800239c <do_reflow.8606+0x2ac>)
 800230a:	801a      	strh	r2, [r3, #0]
			if (HAL_GetTick() - last_time >= steps[pos>>1].time*1000)
 800230c:	f001 fbb8 	bl	8003a80 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <do_reflow.8606+0x29c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	1ad2      	subs	r2, r2, r3
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <do_reflow.8606+0x2a8>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	492b      	ldr	r1, [pc, #172]	; (80023d0 <do_reflow.8606+0x2e0>)
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	429a      	cmp	r2, r3
 8002334:	d352      	bcc.n	80023dc <do_reflow.8606+0x2ec>
				last_time = HAL_GetTick();
 8002336:	f001 fba3 	bl	8003a80 <HAL_GetTick>
 800233a:	4603      	mov	r3, r0
 800233c:	4a13      	ldr	r2, [pc, #76]	; (800238c <do_reflow.8606+0x29c>)
 800233e:	6013      	str	r3, [r2, #0]
				check_time = HAL_GetTick();
 8002340:	f001 fb9e 	bl	8003a80 <HAL_GetTick>
 8002344:	4603      	mov	r3, r0
 8002346:	4a24      	ldr	r2, [pc, #144]	; (80023d8 <do_reflow.8606+0x2e8>)
 8002348:	6013      	str	r3, [r2, #0]
				pos++;
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <do_reflow.8606+0x2a8>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	3301      	adds	r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <do_reflow.8606+0x2a8>)
 8002356:	701a      	strb	r2, [r3, #0]
				if (pos < (2*max_steps))
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <do_reflow.8606+0x2a8>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <do_reflow.8606+0x2b4>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	429a      	cmp	r2, r3
 8002368:	da0c      	bge.n	8002384 <do_reflow.8606+0x294>
					temperature_SP = steps[pos>>1].temp;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <do_reflow.8606+0x2a8>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <do_reflow.8606+0x2e0>)
 8002378:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800237c:	b29a      	uxth	r2, r3
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <do_reflow.8606+0x2ac>)
 8002380:	801a      	strh	r2, [r3, #0]
 8002382:	e053      	b.n	800242c <do_reflow.8606+0x33c>
					temperature_SP = 0;
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <do_reflow.8606+0x2ac>)
 8002386:	2200      	movs	r2, #0
 8002388:	801a      	strh	r2, [r3, #0]
 800238a:	e04f      	b.n	800242c <do_reflow.8606+0x33c>
 800238c:	200002d0 	.word	0x200002d0
 8002390:	20000028 	.word	0x20000028
 8002394:	200002d4 	.word	0x200002d4
 8002398:	200002d5 	.word	0x200002d5
 800239c:	20000244 	.word	0x20000244
 80023a0:	20000238 	.word	0x20000238
 80023a4:	2000001d 	.word	0x2000001d
 80023a8:	20000248 	.word	0x20000248
 80023ac:	20000234 	.word	0x20000234
 80023b0:	2000056c 	.word	0x2000056c
 80023b4:	0800d7b0 	.word	0x0800d7b0
 80023b8:	0800d7c0 	.word	0x0800d7c0
 80023bc:	10624dd3 	.word	0x10624dd3
 80023c0:	0800d7c4 	.word	0x0800d7c4
 80023c4:	0800d7cc 	.word	0x0800d7cc
 80023c8:	20000231 	.word	0x20000231
 80023cc:	0800d7d0 	.word	0x0800d7d0
 80023d0:	20000264 	.word	0x20000264
 80023d4:	0800d7d8 	.word	0x0800d7d8
 80023d8:	200002d8 	.word	0x200002d8
				time_buf[0] = '-';
 80023dc:	232d      	movs	r3, #45	; 0x2d
 80023de:	743b      	strb	r3, [r7, #16]
				int2time(steps[pos>>1].time - (HAL_GetTick() - last_time + 1000)/1000, time_buf+1);
 80023e0:	4b9e      	ldr	r3, [pc, #632]	; (800265c <do_reflow.8606+0x56c>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4a9d      	ldr	r2, [pc, #628]	; (8002660 <do_reflow.8606+0x570>)
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	685d      	ldr	r5, [r3, #4]
 80023f2:	f001 fb45 	bl	8003a80 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4b9a      	ldr	r3, [pc, #616]	; (8002664 <do_reflow.8606+0x574>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002402:	4a99      	ldr	r2, [pc, #612]	; (8002668 <do_reflow.8606+0x578>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	099b      	lsrs	r3, r3, #6
 800240a:	1aea      	subs	r2, r5, r3
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	3301      	adds	r3, #1
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f7fe f8cd 	bl	80005b4 <int2time>
				lcd_set_xy(&lcd, 0, 1);
 800241a:	2201      	movs	r2, #1
 800241c:	2100      	movs	r1, #0
 800241e:	4893      	ldr	r0, [pc, #588]	; (800266c <do_reflow.8606+0x57c>)
 8002420:	f7fd ff86 	bl	8000330 <lcd_set_xy>
				lcd_string(&lcd, "hold");
 8002424:	4992      	ldr	r1, [pc, #584]	; (8002670 <do_reflow.8606+0x580>)
 8002426:	4891      	ldr	r0, [pc, #580]	; (800266c <do_reflow.8606+0x57c>)
 8002428:	f7fd ff6b 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	2100      	movs	r1, #0
 8002430:	488e      	ldr	r0, [pc, #568]	; (800266c <do_reflow.8606+0x57c>)
 8002432:	f7fd ff7d 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, '#');
 8002436:	2123      	movs	r1, #35	; 0x23
 8002438:	488c      	ldr	r0, [pc, #560]	; (800266c <do_reflow.8606+0x57c>)
 800243a:	f7fd ffff 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, (pos>>1)+'1');
 800243e:	4b87      	ldr	r3, [pc, #540]	; (800265c <do_reflow.8606+0x56c>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3331      	adds	r3, #49	; 0x31
 800244a:	b2db      	uxtb	r3, r3
 800244c:	4619      	mov	r1, r3
 800244e:	4887      	ldr	r0, [pc, #540]	; (800266c <do_reflow.8606+0x57c>)
 8002450:	f7fd fff4 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, '/');
 8002454:	212f      	movs	r1, #47	; 0x2f
 8002456:	4885      	ldr	r0, [pc, #532]	; (800266c <do_reflow.8606+0x57c>)
 8002458:	f7fd fff0 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, max_steps + '0');
 800245c:	4b85      	ldr	r3, [pc, #532]	; (8002674 <do_reflow.8606+0x584>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	3330      	adds	r3, #48	; 0x30
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	4881      	ldr	r0, [pc, #516]	; (800266c <do_reflow.8606+0x57c>)
 8002468:	f7fd ffe8 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 7, 1);
 800246c:	2201      	movs	r2, #1
 800246e:	2107      	movs	r1, #7
 8002470:	487e      	ldr	r0, [pc, #504]	; (800266c <do_reflow.8606+0x57c>)
 8002472:	f7fd ff5d 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, (char*)time_buf);
 8002476:	f107 0310 	add.w	r3, r7, #16
 800247a:	4619      	mov	r1, r3
 800247c:	487b      	ldr	r0, [pc, #492]	; (800266c <do_reflow.8606+0x57c>)
 800247e:	f7fd ff40 	bl	8000302 <lcd_string>
		int2string(temperature_SP, buf, sizeof(buf));
 8002482:	4b7d      	ldr	r3, [pc, #500]	; (8002678 <do_reflow.8606+0x588>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2203      	movs	r2, #3
 800248e:	4619      	mov	r1, r3
 8002490:	f7fe f852 	bl	8000538 <int2string>
		lcd_set_xy(&lcd, 7, 0);
 8002494:	2200      	movs	r2, #0
 8002496:	2107      	movs	r1, #7
 8002498:	4874      	ldr	r0, [pc, #464]	; (800266c <do_reflow.8606+0x57c>)
 800249a:	f7fd ff49 	bl	8000330 <lcd_set_xy>
		lcd_out(&lcd, buf, sizeof(buf));
 800249e:	f107 030c 	add.w	r3, r7, #12
 80024a2:	2203      	movs	r2, #3
 80024a4:	4619      	mov	r1, r3
 80024a6:	4871      	ldr	r0, [pc, #452]	; (800266c <do_reflow.8606+0x57c>)
 80024a8:	f7fd ff0d 	bl	80002c6 <lcd_out>
		lcd_write_data(&lcd, scGRAD); // grad
 80024ac:	21df      	movs	r1, #223	; 0xdf
 80024ae:	486f      	ldr	r0, [pc, #444]	; (800266c <do_reflow.8606+0x57c>)
 80024b0:	f7fd ffc4 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, scAR); // arrow right
 80024b4:	217e      	movs	r1, #126	; 0x7e
 80024b6:	486d      	ldr	r0, [pc, #436]	; (800266c <do_reflow.8606+0x57c>)
 80024b8:	f7fd ffc0 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 9, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	2109      	movs	r1, #9
 80024c0:	486a      	ldr	r0, [pc, #424]	; (800266c <do_reflow.8606+0x57c>)
 80024c2:	f7fd ff35 	bl	8000330 <lcd_set_xy>
		if (last_pos != pos)
 80024c6:	4b6d      	ldr	r3, [pc, #436]	; (800267c <do_reflow.8606+0x58c>)
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	4b64      	ldr	r3, [pc, #400]	; (800265c <do_reflow.8606+0x56c>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d002      	beq.n	80024da <do_reflow.8606+0x3ea>
			rf_ui_state = 0;
 80024d4:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <do_reflow.8606+0x590>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
		last_pos = pos;
 80024da:	4b60      	ldr	r3, [pc, #384]	; (800265c <do_reflow.8606+0x56c>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b66      	ldr	r3, [pc, #408]	; (800267c <do_reflow.8606+0x58c>)
 80024e2:	701a      	strb	r2, [r3, #0]
		switch (rf_ui_state)
 80024e4:	4b66      	ldr	r3, [pc, #408]	; (8002680 <do_reflow.8606+0x590>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	f200 8127 	bhi.w	800273c <do_reflow.8606+0x64c>
 80024ee:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <do_reflow.8606+0x404>)
 80024f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f4:	08002509 	.word	0x08002509
 80024f8:	08002511 	.word	0x08002511
 80024fc:	0800257b 	.word	0x0800257b
 8002500:	08002603 	.word	0x08002603
 8002504:	08002695 	.word	0x08002695
			rf_ui_state = 1;
 8002508:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <do_reflow.8606+0x590>)
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
			break;
 800250e:	e120      	b.n	8002752 <do_reflow.8606+0x662>
			lcd_set_xy(&lcd, 9, 0);
 8002510:	2200      	movs	r2, #0
 8002512:	2109      	movs	r1, #9
 8002514:	4855      	ldr	r0, [pc, #340]	; (800266c <do_reflow.8606+0x57c>)
 8002516:	f7fd ff0b 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 800251a:	4b5a      	ldr	r3, [pc, #360]	; (8002684 <do_reflow.8606+0x594>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf94      	ite	ls
 8002522:	2301      	movls	r3, #1
 8002524:	2300      	movhi	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	2300      	movs	r3, #0
 800252c:	2101      	movs	r1, #1
 800252e:	484f      	ldr	r0, [pc, #316]	; (800266c <do_reflow.8606+0x57c>)
 8002530:	f7fd fe9c 	bl	800026c <lcd_mode>
			if (((encoder.value) != (last_encoder)) && (pos&0b1)) // we are on working temperature
 8002534:	4b54      	ldr	r3, [pc, #336]	; (8002688 <do_reflow.8606+0x598>)
 8002536:	f9b3 2000 	ldrsh.w	r2, [r3]
 800253a:	4b54      	ldr	r3, [pc, #336]	; (800268c <do_reflow.8606+0x59c>)
 800253c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002540:	429a      	cmp	r2, r3
 8002542:	d009      	beq.n	8002558 <do_reflow.8606+0x468>
 8002544:	4b45      	ldr	r3, [pc, #276]	; (800265c <do_reflow.8606+0x56c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <do_reflow.8606+0x468>
				rf_ui_state = 3;
 8002552:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <do_reflow.8606+0x590>)
 8002554:	2203      	movs	r2, #3
 8002556:	701a      	strb	r2, [r3, #0]
			if ((last_button) && (!encoder.pressed))
 8002558:	4b4d      	ldr	r3, [pc, #308]	; (8002690 <do_reflow.8606+0x5a0>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80f1 	beq.w	8002744 <do_reflow.8606+0x654>
 8002562:	4b49      	ldr	r3, [pc, #292]	; (8002688 <do_reflow.8606+0x598>)
 8002564:	789b      	ldrb	r3, [r3, #2]
 8002566:	f083 0301 	eor.w	r3, r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80e9 	beq.w	8002744 <do_reflow.8606+0x654>
				rf_ui_state = 2;
 8002572:	4b43      	ldr	r3, [pc, #268]	; (8002680 <do_reflow.8606+0x590>)
 8002574:	2202      	movs	r2, #2
 8002576:	701a      	strb	r2, [r3, #0]
			break;
 8002578:	e0e4      	b.n	8002744 <do_reflow.8606+0x654>
			if (encoder.value != last_encoder)
 800257a:	4b43      	ldr	r3, [pc, #268]	; (8002688 <do_reflow.8606+0x598>)
 800257c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002580:	4b42      	ldr	r3, [pc, #264]	; (800268c <do_reflow.8606+0x59c>)
 8002582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002586:	429a      	cmp	r2, r3
 8002588:	d01f      	beq.n	80025ca <do_reflow.8606+0x4da>
				steps[pos>>1].temp = change_temperature(steps[pos>>1].temp,
 800258a:	4b34      	ldr	r3, [pc, #208]	; (800265c <do_reflow.8606+0x56c>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	085b      	lsrs	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	4b32      	ldr	r3, [pc, #200]	; (8002660 <do_reflow.8606+0x570>)
 8002598:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800259c:	4618      	mov	r0, r3
											encoder.value - last_encoder);
 800259e:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <do_reflow.8606+0x598>)
 80025a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a4:	461a      	mov	r2, r3
				steps[pos>>1].temp = change_temperature(steps[pos>>1].temp,
 80025a6:	4b39      	ldr	r3, [pc, #228]	; (800268c <do_reflow.8606+0x59c>)
 80025a8:	f9b3 3000 	ldrsh.w	r3, [r3]
											encoder.value - last_encoder);
 80025ac:	1ad3      	subs	r3, r2, r3
				steps[pos>>1].temp = change_temperature(steps[pos>>1].temp,
 80025ae:	46a4      	mov	ip, r4
 80025b0:	4619      	mov	r1, r3
 80025b2:	f7fe fefb 	bl	80013ac <change_temperature.8553>
 80025b6:	4601      	mov	r1, r0
 80025b8:	4b28      	ldr	r3, [pc, #160]	; (800265c <do_reflow.8606+0x56c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b26      	ldr	r3, [pc, #152]	; (8002660 <do_reflow.8606+0x570>)
 80025c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			lcd_set_xy(&lcd, 9, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2109      	movs	r1, #9
 80025ce:	4827      	ldr	r0, [pc, #156]	; (800266c <do_reflow.8606+0x57c>)
 80025d0:	f7fd feae 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 80025d4:	2301      	movs	r3, #1
 80025d6:	2200      	movs	r2, #0
 80025d8:	2101      	movs	r1, #1
 80025da:	4824      	ldr	r0, [pc, #144]	; (800266c <do_reflow.8606+0x57c>)
 80025dc:	f7fd fe46 	bl	800026c <lcd_mode>
			if ((last_button) && (!encoder.pressed))
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <do_reflow.8606+0x5a0>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80af 	beq.w	8002748 <do_reflow.8606+0x658>
 80025ea:	4b27      	ldr	r3, [pc, #156]	; (8002688 <do_reflow.8606+0x598>)
 80025ec:	789b      	ldrb	r3, [r3, #2]
 80025ee:	f083 0301 	eor.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80a7 	beq.w	8002748 <do_reflow.8606+0x658>
				rf_ui_state = 1;
 80025fa:	4b21      	ldr	r3, [pc, #132]	; (8002680 <do_reflow.8606+0x590>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
			break;
 8002600:	e0a2      	b.n	8002748 <do_reflow.8606+0x658>
			lcd_set_xy(&lcd, 11, 1);
 8002602:	2201      	movs	r2, #1
 8002604:	210b      	movs	r1, #11
 8002606:	4819      	ldr	r0, [pc, #100]	; (800266c <do_reflow.8606+0x57c>)
 8002608:	f7fd fe92 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <do_reflow.8606+0x594>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b04      	cmp	r3, #4
 8002612:	bf94      	ite	ls
 8002614:	2301      	movls	r3, #1
 8002616:	2300      	movhi	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	2300      	movs	r3, #0
 800261e:	2101      	movs	r1, #1
 8002620:	4812      	ldr	r0, [pc, #72]	; (800266c <do_reflow.8606+0x57c>)
 8002622:	f7fd fe23 	bl	800026c <lcd_mode>
			if ((encoder.value) != (last_encoder))
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <do_reflow.8606+0x598>)
 8002628:	f9b3 2000 	ldrsh.w	r2, [r3]
 800262c:	4b17      	ldr	r3, [pc, #92]	; (800268c <do_reflow.8606+0x59c>)
 800262e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002632:	429a      	cmp	r2, r3
 8002634:	d002      	beq.n	800263c <do_reflow.8606+0x54c>
				rf_ui_state = 1;
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <do_reflow.8606+0x590>)
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]
			if ((last_button) && (!encoder.pressed))
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <do_reflow.8606+0x5a0>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 8083 	beq.w	800274c <do_reflow.8606+0x65c>
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <do_reflow.8606+0x598>)
 8002648:	789b      	ldrb	r3, [r3, #2]
 800264a:	f083 0301 	eor.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d07b      	beq.n	800274c <do_reflow.8606+0x65c>
				rf_ui_state = 4;
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <do_reflow.8606+0x590>)
 8002656:	2204      	movs	r2, #4
 8002658:	701a      	strb	r2, [r3, #0]
			break;
 800265a:	e077      	b.n	800274c <do_reflow.8606+0x65c>
 800265c:	200002d5 	.word	0x200002d5
 8002660:	20000264 	.word	0x20000264
 8002664:	200002d0 	.word	0x200002d0
 8002668:	10624dd3 	.word	0x10624dd3
 800266c:	2000056c 	.word	0x2000056c
 8002670:	0800d7e0 	.word	0x0800d7e0
 8002674:	2000001d 	.word	0x2000001d
 8002678:	20000244 	.word	0x20000244
 800267c:	200002dc 	.word	0x200002dc
 8002680:	200002dd 	.word	0x200002dd
 8002684:	20000231 	.word	0x20000231
 8002688:	20000234 	.word	0x20000234
 800268c:	200002de 	.word	0x200002de
 8002690:	200002d4 	.word	0x200002d4
			if (encoder.value != last_encoder)
 8002694:	4b35      	ldr	r3, [pc, #212]	; (800276c <do_reflow.8606+0x67c>)
 8002696:	f9b3 2000 	ldrsh.w	r2, [r3]
 800269a:	4b35      	ldr	r3, [pc, #212]	; (8002770 <do_reflow.8606+0x680>)
 800269c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d031      	beq.n	8002708 <do_reflow.8606+0x618>
				uint32_t tmp = (HAL_GetTick() - last_time)/1000;
 80026a4:	f001 f9ec 	bl	8003a80 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b32      	ldr	r3, [pc, #200]	; (8002774 <do_reflow.8606+0x684>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	4a31      	ldr	r2, [pc, #196]	; (8002778 <do_reflow.8606+0x688>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	099b      	lsrs	r3, r3, #6
 80026b8:	61bb      	str	r3, [r7, #24]
				steps[pos>>1].time = 1 + tmp + change_time(steps[pos>>1].time - tmp + 2,
 80026ba:	4b30      	ldr	r3, [pc, #192]	; (800277c <do_reflow.8606+0x68c>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4a2e      	ldr	r2, [pc, #184]	; (8002780 <do_reflow.8606+0x690>)
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	3302      	adds	r3, #2
															encoder.value - last_encoder);
 80026d2:	4a26      	ldr	r2, [pc, #152]	; (800276c <do_reflow.8606+0x67c>)
 80026d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80026d8:	4611      	mov	r1, r2
				steps[pos>>1].time = 1 + tmp + change_time(steps[pos>>1].time - tmp + 2,
 80026da:	4a25      	ldr	r2, [pc, #148]	; (8002770 <do_reflow.8606+0x680>)
 80026dc:	f9b2 2000 	ldrsh.w	r2, [r2]
															encoder.value - last_encoder);
 80026e0:	1a8a      	subs	r2, r1, r2
				steps[pos>>1].time = 1 + tmp + change_time(steps[pos>>1].time - tmp + 2,
 80026e2:	46a4      	mov	ip, r4
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fe94 	bl	8001414 <change_time.8558>
 80026ec:	4602      	mov	r2, r0
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a22      	ldr	r2, [pc, #136]	; (800277c <do_reflow.8606+0x68c>)
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	0852      	lsrs	r2, r2, #1
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	4610      	mov	r0, r2
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	491f      	ldr	r1, [pc, #124]	; (8002780 <do_reflow.8606+0x690>)
 8002702:	00c3      	lsls	r3, r0, #3
 8002704:	440b      	add	r3, r1
 8002706:	605a      	str	r2, [r3, #4]
			lcd_set_xy(&lcd, 11, 1);
 8002708:	2201      	movs	r2, #1
 800270a:	210b      	movs	r1, #11
 800270c:	481d      	ldr	r0, [pc, #116]	; (8002784 <do_reflow.8606+0x694>)
 800270e:	f7fd fe0f 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 8002712:	2301      	movs	r3, #1
 8002714:	2200      	movs	r2, #0
 8002716:	2101      	movs	r1, #1
 8002718:	481a      	ldr	r0, [pc, #104]	; (8002784 <do_reflow.8606+0x694>)
 800271a:	f7fd fda7 	bl	800026c <lcd_mode>
			if ((last_button) && (!encoder.pressed))
 800271e:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <do_reflow.8606+0x698>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d014      	beq.n	8002750 <do_reflow.8606+0x660>
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <do_reflow.8606+0x67c>)
 8002728:	789b      	ldrb	r3, [r3, #2]
 800272a:	f083 0301 	eor.w	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00d      	beq.n	8002750 <do_reflow.8606+0x660>
				rf_ui_state = 3;
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <do_reflow.8606+0x69c>)
 8002736:	2203      	movs	r2, #3
 8002738:	701a      	strb	r2, [r3, #0]
			break;
 800273a:	e009      	b.n	8002750 <do_reflow.8606+0x660>
			rf_ui_state = 0;
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <do_reflow.8606+0x69c>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
			break;
 8002742:	e006      	b.n	8002752 <do_reflow.8606+0x662>
			break;
 8002744:	bf00      	nop
 8002746:	e004      	b.n	8002752 <do_reflow.8606+0x662>
			break;
 8002748:	bf00      	nop
 800274a:	e002      	b.n	8002752 <do_reflow.8606+0x662>
			break;
 800274c:	bf00      	nop
 800274e:	e000      	b.n	8002752 <do_reflow.8606+0x662>
			break;
 8002750:	bf00      	nop
		last_encoder = encoder.value;
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <do_reflow.8606+0x67c>)
 8002754:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <do_reflow.8606+0x680>)
 800275a:	801a      	strh	r2, [r3, #0]
		last_button = encoder.pressed;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <do_reflow.8606+0x67c>)
 800275e:	789a      	ldrb	r2, [r3, #2]
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <do_reflow.8606+0x698>)
 8002762:	701a      	strb	r2, [r3, #0]
	}
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bdb0      	pop	{r4, r5, r7, pc}
 800276a:	bf00      	nop
 800276c:	20000234 	.word	0x20000234
 8002770:	200002de 	.word	0x200002de
 8002774:	200002d0 	.word	0x200002d0
 8002778:	10624dd3 	.word	0x10624dd3
 800277c:	200002d5 	.word	0x200002d5
 8002780:	20000264 	.word	0x20000264
 8002784:	2000056c 	.word	0x2000056c
 8002788:	200002d4 	.word	0x200002d4
 800278c:	200002dd 	.word	0x200002dd

08002790 <deltaT.8656>:
	static const int32_t I=0.00153*32768;
	static const int32_t D=10*32768;
	static const int32_t limit_top=25*4/0.00153; // max 25% of PWM

	int32_t deltaT(uint16_t PV)
	{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	80fb      	strh	r3, [r7, #6]
 800279a:	f8c7 c000 	str.w	ip, [r7]
#define size 4
		static int32_t arr[size];
		static bool first_time = true;
		if (first_time)
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <deltaT.8656+0x80>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d010      	beq.n	80027c8 <deltaT.8656+0x38>
		{
			first_time = false;
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <deltaT.8656+0x80>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < size; i++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e007      	b.n	80027c2 <deltaT.8656+0x32>
				arr[i] = PV;
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	4917      	ldr	r1, [pc, #92]	; (8002814 <deltaT.8656+0x84>)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 0; i < size; i++)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	3301      	adds	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	ddf4      	ble.n	80027b2 <deltaT.8656+0x22>
		}
		int32_t temp = arr[0];
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <deltaT.8656+0x84>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < size; i++)
 80027ce:	2301      	movs	r3, #1
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	e00b      	b.n	80027ec <deltaT.8656+0x5c>
			arr[i-1] = arr[i];
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	490e      	ldr	r1, [pc, #56]	; (8002814 <deltaT.8656+0x84>)
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80027e0:	490c      	ldr	r1, [pc, #48]	; (8002814 <deltaT.8656+0x84>)
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 1; i < size; i++)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	3301      	adds	r3, #1
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	ddf0      	ble.n	80027d4 <deltaT.8656+0x44>
		arr[size-1] = PV;
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	4a07      	ldr	r2, [pc, #28]	; (8002814 <deltaT.8656+0x84>)
 80027f6:	60d3      	str	r3, [r2, #12]
		return (temp - PV)/size;
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	da00      	bge.n	8002804 <deltaT.8656+0x74>
 8002802:	3303      	adds	r3, #3
 8002804:	109b      	asrs	r3, r3, #2
	}
 8002806:	4618      	mov	r0, r3
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000030 	.word	0x20000030
 8002814:	200002e4 	.word	0x200002e4

08002818 <pid>:
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	460a      	mov	r2, r1
 8002822:	80fb      	strh	r3, [r7, #6]
 8002824:	4613      	mov	r3, r2
 8002826:	80bb      	strh	r3, [r7, #4]
uint8_t pid(uint16_t PV, uint16_t SP)
 8002828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800282c:	60bb      	str	r3, [r7, #8]

	static int32_t integral = 0;
	static int32_t last_PV = -1;
	if (last_PV < 0)
 800282e:	4b58      	ldr	r3, [pc, #352]	; (8002990 <pid+0x178>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	da02      	bge.n	800283c <pid+0x24>
		last_PV = PV; // first time, init this thing to avoid jump
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	4a55      	ldr	r2, [pc, #340]	; (8002990 <pid+0x178>)
 800283a:	6013      	str	r3, [r2, #0]

	int32_t error = SP-PV;
 800283c:	88ba      	ldrh	r2, [r7, #4]
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	617b      	str	r3, [r7, #20]
	int32_t p = error * P;
 8002844:	4b53      	ldr	r3, [pc, #332]	; (8002994 <pid+0x17c>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	613b      	str	r3, [r7, #16]
	if (error > 0)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	dd10      	ble.n	8002878 <pid+0x60>
	{
		integral += error;
 8002856:	4b50      	ldr	r3, [pc, #320]	; (8002998 <pid+0x180>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	4413      	add	r3, r2
 800285e:	4a4e      	ldr	r2, [pc, #312]	; (8002998 <pid+0x180>)
 8002860:	6013      	str	r3, [r2, #0]
		if (error < 4*4) // almost here, but we need some boost
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b0f      	cmp	r3, #15
 8002866:	dc1d      	bgt.n	80028a4 <pid+0x8c>
			integral += error*8;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	00da      	lsls	r2, r3, #3
 800286c:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <pid+0x180>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4413      	add	r3, r2
 8002872:	4a49      	ldr	r2, [pc, #292]	; (8002998 <pid+0x180>)
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e015      	b.n	80028a4 <pid+0x8c>
	}
	else
	{
		integral += error/4; // cool down is slower
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	da00      	bge.n	8002880 <pid+0x68>
 800287e:	3303      	adds	r3, #3
 8002880:	109b      	asrs	r3, r3, #2
 8002882:	461a      	mov	r2, r3
 8002884:	4b44      	ldr	r3, [pc, #272]	; (8002998 <pid+0x180>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4413      	add	r3, r2
 800288a:	4a43      	ldr	r2, [pc, #268]	; (8002998 <pid+0x180>)
 800288c:	6013      	str	r3, [r2, #0]
		if (error > -4*4)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f113 0f0f 	cmn.w	r3, #15
 8002894:	db06      	blt.n	80028a4 <pid+0x8c>
			integral += error*16; // almost here, we need boost!
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	011a      	lsls	r2, r3, #4
 800289a:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <pid+0x180>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	4a3d      	ldr	r2, [pc, #244]	; (8002998 <pid+0x180>)
 80028a2:	6013      	str	r3, [r2, #0]
	}
	if (integral > limit_top)
 80028a4:	4b3c      	ldr	r3, [pc, #240]	; (8002998 <pid+0x180>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b3c      	ldr	r3, [pc, #240]	; (800299c <pid+0x184>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	dd0d      	ble.n	80028cc <pid+0xb4>
	{
		global_error |= errI_LIMIT;
 80028b0:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <pid+0x188>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	f043 0308 	orr.w	r3, r3, #8
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <pid+0x188>)
 80028bc:	701a      	strb	r2, [r3, #0]
		temperature_SP = 0;
 80028be:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <pid+0x18c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	801a      	strh	r2, [r3, #0]
		integral = limit_top;
 80028c4:	4b35      	ldr	r3, [pc, #212]	; (800299c <pid+0x184>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a33      	ldr	r2, [pc, #204]	; (8002998 <pid+0x180>)
 80028ca:	6013      	str	r3, [r2, #0]
	}
	if (integral < 0)
 80028cc:	4b32      	ldr	r3, [pc, #200]	; (8002998 <pid+0x180>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	da02      	bge.n	80028da <pid+0xc2>
		integral = 0;
 80028d4:	4b30      	ldr	r3, [pc, #192]	; (8002998 <pid+0x180>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
	int32_t i = integral * I;
 80028da:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <pid+0x180>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a32      	ldr	r2, [pc, #200]	; (80029a8 <pid+0x190>)
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	60fb      	str	r3, [r7, #12]
	/* signal is noisy, but slow, I use additional filter for D */
	//int32_t d = (last_PV - PV)*D;
	int32_t d = deltaT(PV)*D;
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	f107 0208 	add.w	r2, r7, #8
 80028ee:	4694      	mov	ip, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff4d 	bl	8002790 <deltaT.8656>
 80028f6:	4602      	mov	r2, r0
 80028f8:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <pid+0x194>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	fb03 f302 	mul.w	r3, r3, r2
 8002900:	61fb      	str	r3, [r7, #28]
	if (d > 0)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	2b00      	cmp	r3, #0
 8002906:	dd01      	ble.n	800290c <pid+0xf4>
		d = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
	last_PV = PV;
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	4a20      	ldr	r2, [pc, #128]	; (8002990 <pid+0x178>)
 8002910:	6013      	str	r3, [r2, #0]
	int32_t out = (p+i+d)/4/32768;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	441a      	add	r2, r3
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	4413      	add	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	da03      	bge.n	8002928 <pid+0x110>
 8002920:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8002924:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002928:	145b      	asrs	r3, r3, #17
 800292a:	61bb      	str	r3, [r7, #24]
	if (out > 100)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	dd01      	ble.n	8002936 <pid+0x11e>
		out = 100;
 8002932:	2364      	movs	r3, #100	; 0x64
 8002934:	61bb      	str	r3, [r7, #24]
	if (out < 0)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	da01      	bge.n	8002940 <pid+0x128>
		out = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]

	PID.P = p/4/32768;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2b00      	cmp	r3, #0
 8002944:	da03      	bge.n	800294e <pid+0x136>
 8002946:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800294a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800294e:	145b      	asrs	r3, r3, #17
 8002950:	461a      	mov	r2, r3
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <pid+0x198>)
 8002954:	601a      	str	r2, [r3, #0]
	PID.I = i/4/32768;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	da03      	bge.n	8002964 <pid+0x14c>
 800295c:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8002960:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002964:	145b      	asrs	r3, r3, #17
 8002966:	461a      	mov	r2, r3
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <pid+0x198>)
 800296a:	605a      	str	r2, [r3, #4]
	PID.D = d/4/32768;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2b00      	cmp	r3, #0
 8002970:	da03      	bge.n	800297a <pid+0x162>
 8002972:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8002976:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800297a:	145b      	asrs	r3, r3, #17
 800297c:	461a      	mov	r2, r3
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <pid+0x198>)
 8002980:	609a      	str	r2, [r3, #8]

	return out;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	b2db      	uxtb	r3, r3
}
 8002986:	4618      	mov	r0, r3
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	2000002c 	.word	0x2000002c
 8002994:	0800d9e8 	.word	0x0800d9e8
 8002998:	200002e0 	.word	0x200002e0
 800299c:	0800d9ec 	.word	0x0800d9ec
 80029a0:	20000230 	.word	0x20000230
 80029a4:	20000244 	.word	0x20000244
 80029a8:	0800d9f0 	.word	0x0800d9f0
 80029ac:	0800d9f4 	.word	0x0800d9f4
 80029b0:	200005cc 	.word	0x200005cc

080029b4 <HAL_TIM_OC_DelayElapsedCallback>:
/**
 * here happens two interrupts, at 998ms (for pid update)
 * and also at ~500ms (for second temperature update
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	get_max6675();
 80029bc:	f7fd ff40 	bl	8000840 <get_max6675>
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7f1b      	ldrb	r3, [r3, #28]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d125      	bne.n	8002a14 <HAL_TIM_OC_DelayElapsedCallback+0x60>
	{
		if (!(MAX6675.data_valid))
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 80029ca:	789b      	ldrb	r3, [r3, #2]
 80029cc:	f083 0301 	eor.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_TIM_OC_DelayElapsedCallback+0x28>
			temperature_SP = 0;
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80029d8:	2200      	movs	r2, #0
 80029da:	801a      	strh	r2, [r3, #0]
		pwm_value = pid(MAX6675.temperature, temperature_SP<<2);
 80029dc:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 80029de:	881a      	ldrh	r2, [r3, #0]
 80029e0:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	4619      	mov	r1, r3
 80029ea:	4610      	mov	r0, r2
 80029ec:	f7ff ff14 	bl	8002818 <pid>
 80029f0:	4603      	mov	r3, r0
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80029f6:	801a      	strh	r2, [r3, #0]
		uint16_t val = 10*pwm_value;
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	0092      	lsls	r2, r2, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	81fb      	strh	r3, [r7, #14]
		TIM2->CCR1 = val;
 8002a06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a0a:	89fb      	ldrh	r3, [r7, #14]
 8002a0c:	6353      	str	r3, [r2, #52]	; 0x34
		tick = true;
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
	}
	ascii_max6675();
 8002a14:	f7fd ff40 	bl	8000898 <ascii_max6675>
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000238 	.word	0x20000238
 8002a24:	20000244 	.word	0x20000244
 8002a28:	20000242 	.word	0x20000242
 8002a2c:	20000246 	.word	0x20000246

08002a30 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	if (peep.stop && (htim == &htim4))
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8002a3a:	785b      	ldrb	r3, [r3, #1]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_TIM_PWM_PulseFinishedCallback+0x26>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d106      	bne.n	8002a56 <HAL_TIM_PWM_PulseFinishedCallback+0x26>
	{
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 8002a48:	2104      	movs	r1, #4
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f004 fd8c 	bl	8007568 <HAL_TIM_PWM_Stop_DMA>
		peep.stop = false;
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	705a      	strb	r2, [r3, #1]
	}
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000248 	.word	0x20000248
 8002a64:	20000584 	.word	0x20000584

08002a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a6c:	f000 ffb0 	bl	80039d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a70:	f000 f84c 	bl	8002b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a74:	f000 fabe 	bl	8002ff4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8002a78:	f009 fc54 	bl	800c324 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002a7c:	f000 f8a2 	bl	8002bc4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002a80:	f000 f8d8 	bl	8002c34 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002a84:	f000 f930 	bl	8002ce8 <MX_TIM2_Init>
  MX_DMA_Init();
 8002a88:	f000 fa96 	bl	8002fb8 <MX_DMA_Init>
  MX_TIM4_Init();
 8002a8c:	f000 fa1e 	bl	8002ecc <MX_TIM4_Init>
  MX_TIM3_Init();
 8002a90:	f000 f9c8 	bl	8002e24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, 1); // enable USB
 8002a94:	2201      	movs	r2, #1
 8002a96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a9a:	4818      	ldr	r0, [pc, #96]	; (8002afc <main+0x94>)
 8002a9c:	f001 fd2b 	bl	80044f6 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // PWM for output
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4817      	ldr	r0, [pc, #92]	; (8002b00 <main+0x98>)
 8002aa4:	f004 fb24 	bl	80070f0 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // ENCODER
 8002aa8:	213c      	movs	r1, #60	; 0x3c
 8002aaa:	4816      	ldr	r0, [pc, #88]	; (8002b04 <main+0x9c>)
 8002aac:	f004 febc 	bl	8007828 <HAL_TIM_Encoder_Start>
  TIM2->CCR2 = 998; // timer for PID interrupt + temperature update
 8002ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ab4:	f240 32e6 	movw	r2, #998	; 0x3e6
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 499; // timer for temperature update
 8002aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002abe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ac2:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM2->DIER |= TIM_DIER_CC2IE|TIM_DIER_CC3IE; // interrupt enable
 8002ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ace:	f043 030c 	orr.w	r3, r3, #12
 8002ad2:	60d3      	str	r3, [r2, #12]
  HAL_TIM_Base_Start_IT(&htim2); // Enable Interrupts
 8002ad4:	480a      	ldr	r0, [pc, #40]	; (8002b00 <main+0x98>)
 8002ad6:	f004 fa09 	bl	8006eec <HAL_TIM_Base_Start_IT>
  delay_init(&htim1); // inits the library for us delay
 8002ada:	480b      	ldr	r0, [pc, #44]	; (8002b08 <main+0xa0>)
 8002adc:	f7fd fb36 	bl	800014c <delay_init>
  init_lcd(); // init lcd and load special symbols
 8002ae0:	f7fd fdd8 	bl	8000694 <init_lcd>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  do_button(); // update encoder status
 8002ae4:	f7fd fe32 	bl	800074c <do_button>
	  do_blink(); // led heartbeat
 8002ae8:	f7fd fe8e 	bl	8000808 <do_blink>
	  do_usb();  // output debug information
 8002aec:	f7fd ff4e 	bl	800098c <do_usb>
	  do_interface(); // here happens the magic
 8002af0:	f7fe f8ac 	bl	8000c4c <do_interface>
	  do_peep(); // peep-peep
 8002af4:	f7fd ffa8 	bl	8000a48 <do_peep>
	  do_button(); // update encoder status
 8002af8:	e7f4      	b.n	8002ae4 <main+0x7c>
 8002afa:	bf00      	nop
 8002afc:	40010800 	.word	0x40010800
 8002b00:	200006c0 	.word	0x200006c0
 8002b04:	200005d8 	.word	0x200005d8
 8002b08:	20000620 	.word	0x20000620

08002b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b094      	sub	sp, #80	; 0x50
 8002b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b16:	2228      	movs	r2, #40	; 0x28
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f00a f8c8 	bl	800ccb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b46:	2300      	movs	r3, #0
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002b58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 f9be 	bl	8005ee4 <HAL_RCC_OscConfig>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002b6e:	f000 fad9 	bl	8003124 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b72:	230f      	movs	r3, #15
 8002b74:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b76:	2302      	movs	r3, #2
 8002b78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b82:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b84:	2300      	movs	r3, #0
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f003 fc28 	bl	80063e4 <HAL_RCC_ClockConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002b9a:	f000 fac3 	bl	8003124 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002b9e:	2310      	movs	r3, #16
 8002ba0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002ba2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ba6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 fd82 	bl	80066b4 <HAL_RCCEx_PeriphCLKConfig>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002bb6:	f000 fab5 	bl	8003124 <Error_Handler>
  }
}
 8002bba:	bf00      	nop
 8002bbc:	3750      	adds	r7, #80	; 0x50
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002bc8:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <MX_SPI1_Init+0x68>)
 8002bca:	4a19      	ldr	r2, [pc, #100]	; (8002c30 <MX_SPI1_Init+0x6c>)
 8002bcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <MX_SPI1_Init+0x68>)
 8002bd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002bd6:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <MX_SPI1_Init+0x68>)
 8002bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bdc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <MX_SPI1_Init+0x68>)
 8002be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002be4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <MX_SPI1_Init+0x68>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <MX_SPI1_Init+0x68>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <MX_SPI1_Init+0x68>)
 8002bf4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002bf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <MX_SPI1_Init+0x68>)
 8002bfc:	2230      	movs	r2, #48	; 0x30
 8002bfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <MX_SPI1_Init+0x68>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <MX_SPI1_Init+0x68>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <MX_SPI1_Init+0x68>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <MX_SPI1_Init+0x68>)
 8002c14:	220a      	movs	r2, #10
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c18:	4804      	ldr	r0, [pc, #16]	; (8002c2c <MX_SPI1_Init+0x68>)
 8002c1a:	f003 fe01 	bl	8006820 <HAL_SPI_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002c24:	f000 fa7e 	bl	8003124 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000668 	.word	0x20000668
 8002c30:	40013000 	.word	0x40013000

08002c34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c48:	463b      	mov	r3, r7
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c50:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <MX_TIM1_Init+0xa8>)
 8002c52:	4a23      	ldr	r2, [pc, #140]	; (8002ce0 <MX_TIM1_Init+0xac>)
 8002c54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000000-1;
 8002c56:	f003 fcaf 	bl	80065b8 <HAL_RCC_GetSysClockFreq>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a21      	ldr	r2, [pc, #132]	; (8002ce4 <MX_TIM1_Init+0xb0>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0c9b      	lsrs	r3, r3, #18
 8002c64:	3b01      	subs	r3, #1
 8002c66:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <MX_TIM1_Init+0xa8>)
 8002c68:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <MX_TIM1_Init+0xa8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002c70:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <MX_TIM1_Init+0xa8>)
 8002c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c78:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <MX_TIM1_Init+0xa8>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <MX_TIM1_Init+0xa8>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <MX_TIM1_Init+0xa8>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c8a:	4814      	ldr	r0, [pc, #80]	; (8002cdc <MX_TIM1_Init+0xa8>)
 8002c8c:	f004 f894 	bl	8006db8 <HAL_TIM_Base_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8002c96:	f000 fa45 	bl	8003124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ca0:	f107 0308 	add.w	r3, r7, #8
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	480d      	ldr	r0, [pc, #52]	; (8002cdc <MX_TIM1_Init+0xa8>)
 8002ca8:	f005 f86a 	bl	8007d80 <HAL_TIM_ConfigClockSource>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002cb2:	f000 fa37 	bl	8003124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cbe:	463b      	mov	r3, r7
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4806      	ldr	r0, [pc, #24]	; (8002cdc <MX_TIM1_Init+0xa8>)
 8002cc4:	f005 fcc2 	bl	800864c <HAL_TIMEx_MasterConfigSynchronization>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002cce:	f000 fa29 	bl	8003124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000620 	.word	0x20000620
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	431bde83 	.word	0x431bde83

08002ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	; 0x38
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cfc:	f107 0320 	add.w	r3, r7, #32
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
 8002d14:	615a      	str	r2, [r3, #20]
 8002d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d18:	4b40      	ldr	r3, [pc, #256]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000-1;
 8002d20:	f003 fc4a 	bl	80065b8 <HAL_RCC_GetSysClockFreq>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a3e      	ldr	r2, [pc, #248]	; (8002e20 <MX_TIM2_Init+0x138>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	4a3a      	ldr	r2, [pc, #232]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002d32:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d34:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002d3a:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002d3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d42:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d48:	4b34      	ldr	r3, [pc, #208]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d4e:	4833      	ldr	r0, [pc, #204]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002d50:	f004 f832 	bl	8006db8 <HAL_TIM_Base_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002d5a:	f000 f9e3 	bl	8003124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d68:	4619      	mov	r1, r3
 8002d6a:	482c      	ldr	r0, [pc, #176]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002d6c:	f005 f808 	bl	8007d80 <HAL_TIM_ConfigClockSource>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002d76:	f000 f9d5 	bl	8003124 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d7a:	4828      	ldr	r0, [pc, #160]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002d7c:	f004 f960 	bl	8007040 <HAL_TIM_PWM_Init>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002d86:	f000 f9cd 	bl	8003124 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002d8a:	4824      	ldr	r0, [pc, #144]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002d8c:	f004 f900 	bl	8006f90 <HAL_TIM_OC_Init>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002d96:	f000 f9c5 	bl	8003124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002da2:	f107 0320 	add.w	r3, r7, #32
 8002da6:	4619      	mov	r1, r3
 8002da8:	481c      	ldr	r0, [pc, #112]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002daa:	f005 fc4f 	bl	800864c <HAL_TIMEx_MasterConfigSynchronization>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8002db4:	f000 f9b6 	bl	8003124 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002db8:	2360      	movs	r3, #96	; 0x60
 8002dba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	2200      	movs	r2, #0
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4813      	ldr	r0, [pc, #76]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002dd0:	f004 ff18 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8002dda:	f000 f9a3 	bl	8003124 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	2204      	movs	r2, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	480c      	ldr	r0, [pc, #48]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002dea:	f004 feb3 	bl	8007b54 <HAL_TIM_OC_ConfigChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8002df4:	f000 f996 	bl	8003124 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4807      	ldr	r0, [pc, #28]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002e00:	f004 fea8 	bl	8007b54 <HAL_TIM_OC_ConfigChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8002e0a:	f000 f98b 	bl	8003124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e0e:	4803      	ldr	r0, [pc, #12]	; (8002e1c <MX_TIM2_Init+0x134>)
 8002e10:	f000 fce4 	bl	80037dc <HAL_TIM_MspPostInit>

}
 8002e14:	bf00      	nop
 8002e16:	3738      	adds	r7, #56	; 0x38
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	200006c0 	.word	0x200006c0
 8002e20:	10624dd3 	.word	0x10624dd3

08002e24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08c      	sub	sp, #48	; 0x30
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e2a:	f107 030c 	add.w	r3, r7, #12
 8002e2e:	2224      	movs	r2, #36	; 0x24
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f009 ff3c 	bl	800ccb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e40:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e42:	4a21      	ldr	r2, [pc, #132]	; (8002ec8 <MX_TIM3_Init+0xa4>)
 8002e44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e46:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e52:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002e76:	230a      	movs	r3, #10
 8002e78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e82:	2300      	movs	r3, #0
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002e86:	230a      	movs	r3, #10
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002e8a:	f107 030c 	add.w	r3, r7, #12
 8002e8e:	4619      	mov	r1, r3
 8002e90:	480c      	ldr	r0, [pc, #48]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002e92:	f004 fc27 	bl	80076e4 <HAL_TIM_Encoder_Init>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002e9c:	f000 f942 	bl	8003124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <MX_TIM3_Init+0xa0>)
 8002eae:	f005 fbcd 	bl	800864c <HAL_TIMEx_MasterConfigSynchronization>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002eb8:	f000 f934 	bl	8003124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ebc:	bf00      	nop
 8002ebe:	3730      	adds	r7, #48	; 0x30
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	200005d8 	.word	0x200005d8
 8002ec8:	40000400 	.word	0x40000400

08002ecc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08e      	sub	sp, #56	; 0x38
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee0:	f107 0320 	add.w	r3, r7, #32
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
 8002ef8:	615a      	str	r2, [r3, #20]
 8002efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002efc:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <MX_TIM4_Init+0xe4>)
 8002efe:	4a2d      	ldr	r2, [pc, #180]	; (8002fb4 <MX_TIM4_Init+0xe8>)
 8002f00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002f02:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <MX_TIM4_Init+0xe4>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f08:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <MX_TIM4_Init+0xe4>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 127;
 8002f0e:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <MX_TIM4_Init+0xe4>)
 8002f10:	227f      	movs	r2, #127	; 0x7f
 8002f12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f14:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <MX_TIM4_Init+0xe4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f1a:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <MX_TIM4_Init+0xe4>)
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f20:	4823      	ldr	r0, [pc, #140]	; (8002fb0 <MX_TIM4_Init+0xe4>)
 8002f22:	f003 ff49 	bl	8006db8 <HAL_TIM_Base_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002f2c:	f000 f8fa 	bl	8003124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	481c      	ldr	r0, [pc, #112]	; (8002fb0 <MX_TIM4_Init+0xe4>)
 8002f3e:	f004 ff1f 	bl	8007d80 <HAL_TIM_ConfigClockSource>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002f48:	f000 f8ec 	bl	8003124 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f4c:	4818      	ldr	r0, [pc, #96]	; (8002fb0 <MX_TIM4_Init+0xe4>)
 8002f4e:	f004 f877 	bl	8007040 <HAL_TIM_PWM_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002f58:	f000 f8e4 	bl	8003124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f64:	f107 0320 	add.w	r3, r7, #32
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4811      	ldr	r0, [pc, #68]	; (8002fb0 <MX_TIM4_Init+0xe4>)
 8002f6c:	f005 fb6e 	bl	800864c <HAL_TIMEx_MasterConfigSynchronization>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002f76:	f000 f8d5 	bl	8003124 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f7a:	2360      	movs	r3, #96	; 0x60
 8002f7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4807      	ldr	r0, [pc, #28]	; (8002fb0 <MX_TIM4_Init+0xe4>)
 8002f92:	f004 fe37 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002f9c:	f000 f8c2 	bl	8003124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002fa0:	4803      	ldr	r0, [pc, #12]	; (8002fb0 <MX_TIM4_Init+0xe4>)
 8002fa2:	f000 fc1b 	bl	80037dc <HAL_TIM_MspPostInit>

}
 8002fa6:	bf00      	nop
 8002fa8:	3738      	adds	r7, #56	; 0x38
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000584 	.word	0x20000584
 8002fb4:	40000800 	.word	0x40000800

08002fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <MX_DMA_Init+0x38>)
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <MX_DMA_Init+0x38>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6153      	str	r3, [r2, #20]
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <MX_DMA_Init+0x38>)
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	607b      	str	r3, [r7, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2100      	movs	r1, #0
 8002fda:	200e      	movs	r0, #14
 8002fdc:	f000 fe55 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002fe0:	200e      	movs	r0, #14
 8002fe2:	f000 fe6e 	bl	8003cc2 <HAL_NVIC_EnableIRQ>

}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffa:	f107 0310 	add.w	r3, r7, #16
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003008:	4b42      	ldr	r3, [pc, #264]	; (8003114 <MX_GPIO_Init+0x120>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	4a41      	ldr	r2, [pc, #260]	; (8003114 <MX_GPIO_Init+0x120>)
 800300e:	f043 0310 	orr.w	r3, r3, #16
 8003012:	6193      	str	r3, [r2, #24]
 8003014:	4b3f      	ldr	r3, [pc, #252]	; (8003114 <MX_GPIO_Init+0x120>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003020:	4b3c      	ldr	r3, [pc, #240]	; (8003114 <MX_GPIO_Init+0x120>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	4a3b      	ldr	r2, [pc, #236]	; (8003114 <MX_GPIO_Init+0x120>)
 8003026:	f043 0320 	orr.w	r3, r3, #32
 800302a:	6193      	str	r3, [r2, #24]
 800302c:	4b39      	ldr	r3, [pc, #228]	; (8003114 <MX_GPIO_Init+0x120>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003038:	4b36      	ldr	r3, [pc, #216]	; (8003114 <MX_GPIO_Init+0x120>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	4a35      	ldr	r2, [pc, #212]	; (8003114 <MX_GPIO_Init+0x120>)
 800303e:	f043 0304 	orr.w	r3, r3, #4
 8003042:	6193      	str	r3, [r2, #24]
 8003044:	4b33      	ldr	r3, [pc, #204]	; (8003114 <MX_GPIO_Init+0x120>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003050:	4b30      	ldr	r3, [pc, #192]	; (8003114 <MX_GPIO_Init+0x120>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	4a2f      	ldr	r2, [pc, #188]	; (8003114 <MX_GPIO_Init+0x120>)
 8003056:	f043 0308 	orr.w	r3, r3, #8
 800305a:	6193      	str	r3, [r2, #24]
 800305c:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <MX_GPIO_Init+0x120>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003068:	2200      	movs	r2, #0
 800306a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800306e:	482a      	ldr	r0, [pc, #168]	; (8003118 <MX_GPIO_Init+0x124>)
 8003070:	f001 fa41 	bl	80044f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 8003074:	2201      	movs	r2, #1
 8003076:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800307a:	4828      	ldr	r0, [pc, #160]	; (800311c <MX_GPIO_Init+0x128>)
 800307c:	f001 fa3b 	bl	80044f6 <HAL_GPIO_WritePin>
                          |hd_4_Pin|hd_5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8003080:	2200      	movs	r2, #0
 8003082:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003086:	4826      	ldr	r0, [pc, #152]	; (8003120 <MX_GPIO_Init+0x12c>)
 8003088:	f001 fa35 	bl	80044f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, debug_a_Pin|debug_b_Pin, GPIO_PIN_RESET);
 800308c:	2200      	movs	r2, #0
 800308e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003092:	4822      	ldr	r0, [pc, #136]	; (800311c <MX_GPIO_Init+0x128>)
 8003094:	f001 fa2f 	bl	80044f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800309c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309e:	2301      	movs	r3, #1
 80030a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	2302      	movs	r3, #2
 80030a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80030aa:	f107 0310 	add.w	r3, r7, #16
 80030ae:	4619      	mov	r1, r3
 80030b0:	4819      	ldr	r0, [pc, #100]	; (8003118 <MX_GPIO_Init+0x124>)
 80030b2:	f001 f885 	bl	80041c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : hd_7_Pin hd_6_Pin hd_RS_Pin hd_E_Pin
                           hd_4_Pin hd_5_Pin debug_a_Pin debug_b_Pin */
  GPIO_InitStruct.Pin = hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 80030b6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80030ba:	613b      	str	r3, [r7, #16]
                          |hd_4_Pin|hd_5_Pin|debug_a_Pin|debug_b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030bc:	2301      	movs	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	2302      	movs	r3, #2
 80030c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	4619      	mov	r1, r3
 80030ce:	4813      	ldr	r0, [pc, #76]	; (800311c <MX_GPIO_Init+0x128>)
 80030d0:	f001 f876 	bl	80041c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 80030d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030da:	2301      	movs	r3, #1
 80030dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e2:	2302      	movs	r3, #2
 80030e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 80030e6:	f107 0310 	add.w	r3, r7, #16
 80030ea:	4619      	mov	r1, r3
 80030ec:	480c      	ldr	r0, [pc, #48]	; (8003120 <MX_GPIO_Init+0x12c>)
 80030ee:	f001 f867 	bl	80041c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_s_Pin */
  GPIO_InitStruct.Pin = enc_s_Pin;
 80030f2:	2308      	movs	r3, #8
 80030f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(enc_s_GPIO_Port, &GPIO_InitStruct);
 80030fe:	f107 0310 	add.w	r3, r7, #16
 8003102:	4619      	mov	r1, r3
 8003104:	4805      	ldr	r0, [pc, #20]	; (800311c <MX_GPIO_Init+0x128>)
 8003106:	f001 f85b 	bl	80041c0 <HAL_GPIO_Init>

}
 800310a:	bf00      	nop
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	40011000 	.word	0x40011000
 800311c:	40010c00 	.word	0x40010c00
 8003120:	40010800 	.word	0x40010800

08003124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003128:	b672      	cpsid	i
}
 800312a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800312c:	e7fe      	b.n	800312c <Error_Handler+0x8>
	...

08003130 <SPI_WaitFlagStateUntilTimeout>:
#include "main.h"
#include "spi_rxonly.h"

static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003140:	f000 fc9e 	bl	8003a80 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	4413      	add	r3, r2
 800314e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003150:	f000 fc96 	bl	8003a80 <HAL_GetTick>
 8003154:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003156:	4b39      	ldr	r3, [pc, #228]	; (800323c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	015b      	lsls	r3, r3, #5
 800315c:	0d1b      	lsrs	r3, r3, #20
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003166:	e054      	b.n	8003212 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d050      	beq.n	8003212 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003170:	f000 fc86 	bl	8003a80 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	429a      	cmp	r2, r3
 800317e:	d902      	bls.n	8003186 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d13d      	bne.n	8003202 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003194:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800319e:	d111      	bne.n	80031c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a8:	d004      	beq.n	80031b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b2:	d107      	bne.n	80031c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031cc:	d10f      	bne.n	80031ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e017      	b.n	8003232 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	3b01      	subs	r3, #1
 8003210:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4013      	ands	r3, r2
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	429a      	cmp	r2, r3
 8003220:	bf0c      	ite	eq
 8003222:	2301      	moveq	r3, #1
 8003224:	2300      	movne	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	429a      	cmp	r2, r3
 800322e:	d19b      	bne.n	8003168 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000034 	.word	0x20000034

08003240 <SPI_EndRxTransaction>:

static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003254:	d111      	bne.n	800327a <SPI_EndRxTransaction+0x3a>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325e:	d004      	beq.n	800326a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003268:	d107      	bne.n	800327a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003278:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003282:	d117      	bne.n	80032b4 <SPI_EndRxTransaction+0x74>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328c:	d112      	bne.n	80032b4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2200      	movs	r2, #0
 8003296:	2101      	movs	r1, #1
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff ff49 	bl	8003130 <SPI_WaitFlagStateUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01a      	beq.n	80032da <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	f043 0220 	orr.w	r2, r3, #32
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e013      	b.n	80032dc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2200      	movs	r2, #0
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f7ff ff36 	bl	8003130 <SPI_WaitFlagStateUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	f043 0220 	orr.w	r2, r3, #32
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e000      	b.n	80032dc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_SPI_ReceiveOnly>:

// HAL Receive procedure doesn't work well in RXONLY mode
// (it doesn't know when to stop), so here is quick fix
HAL_StatusTypeDef HAL_SPI_ReceiveOnly(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003300:	d112      	bne.n	8003328 <HAL_SPI_ReceiveOnly+0x44>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10e      	bne.n	8003328 <HAL_SPI_ReceiveOnly+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2204      	movs	r2, #4
 800330e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f003 fb02 	bl	8006928 <HAL_SPI_TransmitReceive>
 8003324:	4603      	mov	r3, r0
 8003326:	e110      	b.n	800354a <HAL_SPI_ReceiveOnly+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_SPI_ReceiveOnly+0x52>
 8003332:	2302      	movs	r3, #2
 8003334:	e109      	b.n	800354a <HAL_SPI_ReceiveOnly+0x266>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800333e:	f000 fb9f 	bl	8003a80 <HAL_GetTick>
 8003342:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d002      	beq.n	8003356 <HAL_SPI_ReceiveOnly+0x72>
  {
    errorcode = HAL_BUSY;
 8003350:	2302      	movs	r3, #2
 8003352:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003354:	e0f0      	b.n	8003538 <HAL_SPI_ReceiveOnly+0x254>
  }

  if ((pData == NULL) || (Size == 0U))
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <HAL_SPI_ReceiveOnly+0x7e>
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <HAL_SPI_ReceiveOnly+0x84>
  {
    errorcode = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003366:	e0e7      	b.n	8003538 <HAL_SPI_ReceiveOnly+0x254>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2204      	movs	r2, #4
 800336c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	88fa      	ldrh	r2, [r7, #6]
 8003380:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	88fa      	ldrh	r2, [r7, #6]
 8003386:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ae:	d10f      	bne.n	80033d0 <HAL_SPI_ReceiveOnly+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d007      	beq.n	80033ee <HAL_SPI_ReceiveOnly+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 8088 	bne.w	8003508 <HAL_SPI_ReceiveOnly+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033f8:	e02e      	b.n	8003458 <HAL_SPI_ReceiveOnly+0x174>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d115      	bne.n	8003434 <HAL_SPI_ReceiveOnly+0x150>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f103 020c 	add.w	r2, r3, #12
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	7812      	ldrb	r2, [r2, #0]
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003432:	e011      	b.n	8003458 <HAL_SPI_ReceiveOnly+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003434:	f000 fb24 	bl	8003a80 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d803      	bhi.n	800344c <HAL_SPI_ReceiveOnly+0x168>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	d102      	bne.n	8003452 <HAL_SPI_ReceiveOnly+0x16e>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <HAL_SPI_ReceiveOnly+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003456:	e06f      	b.n	8003538 <HAL_SPI_ReceiveOnly+0x254>
    while (hspi->RxXferCount > 0U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1cb      	bne.n	80033fa <HAL_SPI_ReceiveOnly+0x116>
 8003462:	e056      	b.n	8003512 <HAL_SPI_ReceiveOnly+0x22e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
    	// if RXONLY
    	if ((hspi->Instance->CR1 & SPI_CR1_RXONLY) == SPI_CR1_RXONLY)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003472:	d11c      	bne.n	80034ae <HAL_SPI_ReceiveOnly+0x1ca>
    	{
		  /* Check if the SPI is already enabled */
		  if (((hspi->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d115      	bne.n	80034ae <HAL_SPI_ReceiveOnly+0x1ca>
				  && (hspi->RxXferCount == 1U))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d110      	bne.n	80034ae <HAL_SPI_ReceiveOnly+0x1ca>
		  {
			  // delay for ~ 150 cycles (~ SPI clock cycle for Fclk/128
			  // (Page 718 from RM0008 Rev 21)
			  for (int i = 12; i > 0; i--);
 800348c:	230c      	movs	r3, #12
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	e002      	b.n	8003498 <HAL_SPI_ReceiveOnly+0x1b4>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	3b01      	subs	r3, #1
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	dcf9      	bgt.n	8003492 <HAL_SPI_ReceiveOnly+0x1ae>
			/* Disable SPI peripheral */
			__HAL_SPI_DISABLE(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ac:	601a      	str	r2, [r3, #0]
		  }
    	}
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d113      	bne.n	80034e4 <HAL_SPI_ReceiveOnly+0x200>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	b292      	uxth	r2, r2
 80034c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	1c9a      	adds	r2, r3, #2
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034e2:	e011      	b.n	8003508 <HAL_SPI_ReceiveOnly+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e4:	f000 facc 	bl	8003a80 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d803      	bhi.n	80034fc <HAL_SPI_ReceiveOnly+0x218>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d102      	bne.n	8003502 <HAL_SPI_ReceiveOnly+0x21e>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <HAL_SPI_ReceiveOnly+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003506:	e017      	b.n	8003538 <HAL_SPI_ReceiveOnly+0x254>
    while (hspi->RxXferCount > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1a8      	bne.n	8003464 <HAL_SPI_ReceiveOnly+0x180>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	6839      	ldr	r1, [r7, #0]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fe92 	bl	8003240 <SPI_EndRxTransaction>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_SPI_ReceiveOnly+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2220      	movs	r2, #32
 8003526:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <HAL_SPI_ReceiveOnly+0x252>
  {
    errorcode = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e000      	b.n	8003538 <HAL_SPI_ReceiveOnly+0x254>
  }

error :
 8003536:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003548:	7ffb      	ldrb	r3, [r7, #31]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_MspInit+0x5c>)
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	4a14      	ldr	r2, [pc, #80]	; (80035b0 <HAL_MspInit+0x5c>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6193      	str	r3, [r2, #24]
 8003566:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_MspInit+0x5c>)
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <HAL_MspInit+0x5c>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4a0e      	ldr	r2, [pc, #56]	; (80035b0 <HAL_MspInit+0x5c>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357c:	61d3      	str	r3, [r2, #28]
 800357e:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <HAL_MspInit+0x5c>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800358a:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <HAL_MspInit+0x60>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <HAL_MspInit+0x60>)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40010000 	.word	0x40010000

080035b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 0310 	add.w	r3, r7, #16
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <HAL_SPI_MspInit+0x88>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d12f      	bne.n	8003638 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <HAL_SPI_MspInit+0x8c>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	4a19      	ldr	r2, [pc, #100]	; (8003644 <HAL_SPI_MspInit+0x8c>)
 80035de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035e2:	6193      	str	r3, [r2, #24]
 80035e4:	4b17      	ldr	r3, [pc, #92]	; (8003644 <HAL_SPI_MspInit+0x8c>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <HAL_SPI_MspInit+0x8c>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	4a13      	ldr	r2, [pc, #76]	; (8003644 <HAL_SPI_MspInit+0x8c>)
 80035f6:	f043 0304 	orr.w	r3, r3, #4
 80035fa:	6193      	str	r3, [r2, #24]
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <HAL_SPI_MspInit+0x8c>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003608:	2330      	movs	r3, #48	; 0x30
 800360a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360c:	2302      	movs	r3, #2
 800360e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003610:	2303      	movs	r3, #3
 8003612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003614:	f107 0310 	add.w	r3, r7, #16
 8003618:	4619      	mov	r1, r3
 800361a:	480b      	ldr	r0, [pc, #44]	; (8003648 <HAL_SPI_MspInit+0x90>)
 800361c:	f000 fdd0 	bl	80041c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003620:	2340      	movs	r3, #64	; 0x40
 8003622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003628:	2301      	movs	r3, #1
 800362a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362c:	f107 0310 	add.w	r3, r7, #16
 8003630:	4619      	mov	r1, r3
 8003632:	4805      	ldr	r0, [pc, #20]	; (8003648 <HAL_SPI_MspInit+0x90>)
 8003634:	f000 fdc4 	bl	80041c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003638:	bf00      	nop
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40013000 	.word	0x40013000
 8003644:	40021000 	.word	0x40021000
 8003648:	40010800 	.word	0x40010800

0800364c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a32      	ldr	r2, [pc, #200]	; (8003724 <HAL_TIM_Base_MspInit+0xd8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10c      	bne.n	8003678 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800365e:	4b32      	ldr	r3, [pc, #200]	; (8003728 <HAL_TIM_Base_MspInit+0xdc>)
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	4a31      	ldr	r2, [pc, #196]	; (8003728 <HAL_TIM_Base_MspInit+0xdc>)
 8003664:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003668:	6193      	str	r3, [r2, #24]
 800366a:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <HAL_TIM_Base_MspInit+0xdc>)
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003676:	e051      	b.n	800371c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003680:	d114      	bne.n	80036ac <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003682:	4b29      	ldr	r3, [pc, #164]	; (8003728 <HAL_TIM_Base_MspInit+0xdc>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4a28      	ldr	r2, [pc, #160]	; (8003728 <HAL_TIM_Base_MspInit+0xdc>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	61d3      	str	r3, [r2, #28]
 800368e:	4b26      	ldr	r3, [pc, #152]	; (8003728 <HAL_TIM_Base_MspInit+0xdc>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800369a:	2200      	movs	r2, #0
 800369c:	2100      	movs	r1, #0
 800369e:	201c      	movs	r0, #28
 80036a0:	f000 faf3 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036a4:	201c      	movs	r0, #28
 80036a6:	f000 fb0c 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
}
 80036aa:	e037      	b.n	800371c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1e      	ldr	r2, [pc, #120]	; (800372c <HAL_TIM_Base_MspInit+0xe0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d132      	bne.n	800371c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036b6:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <HAL_TIM_Base_MspInit+0xdc>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <HAL_TIM_Base_MspInit+0xdc>)
 80036bc:	f043 0304 	orr.w	r3, r3, #4
 80036c0:	61d3      	str	r3, [r2, #28]
 80036c2:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_TIM_Base_MspInit+0xdc>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 80036ce:	4b18      	ldr	r3, [pc, #96]	; (8003730 <HAL_TIM_Base_MspInit+0xe4>)
 80036d0:	4a18      	ldr	r2, [pc, #96]	; (8003734 <HAL_TIM_Base_MspInit+0xe8>)
 80036d2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036d4:	4b16      	ldr	r3, [pc, #88]	; (8003730 <HAL_TIM_Base_MspInit+0xe4>)
 80036d6:	2210      	movs	r2, #16
 80036d8:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <HAL_TIM_Base_MspInit+0xe4>)
 80036dc:	2200      	movs	r2, #0
 80036de:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <HAL_TIM_Base_MspInit+0xe4>)
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <HAL_TIM_Base_MspInit+0xe4>)
 80036e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ec:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <HAL_TIM_Base_MspInit+0xe4>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 80036f4:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <HAL_TIM_Base_MspInit+0xe4>)
 80036f6:	2220      	movs	r2, #32
 80036f8:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <HAL_TIM_Base_MspInit+0xe4>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8003700:	480b      	ldr	r0, [pc, #44]	; (8003730 <HAL_TIM_Base_MspInit+0xe4>)
 8003702:	f000 faf9 	bl	8003cf8 <HAL_DMA_Init>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_TIM_Base_MspInit+0xc4>
      Error_Handler();
 800370c:	f7ff fd0a 	bl	8003124 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a07      	ldr	r2, [pc, #28]	; (8003730 <HAL_TIM_Base_MspInit+0xe4>)
 8003714:	629a      	str	r2, [r3, #40]	; 0x28
 8003716:	4a06      	ldr	r2, [pc, #24]	; (8003730 <HAL_TIM_Base_MspInit+0xe4>)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800371c:	bf00      	nop
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40021000 	.word	0x40021000
 800372c:	40000800 	.word	0x40000800
 8003730:	20000528 	.word	0x20000528
 8003734:	40020044 	.word	0x40020044

08003738 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1e      	ldr	r2, [pc, #120]	; (80037cc <HAL_TIM_Encoder_MspInit+0x94>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d135      	bne.n	80037c4 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <HAL_TIM_Encoder_MspInit+0x98>)
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <HAL_TIM_Encoder_MspInit+0x98>)
 800375e:	f043 0302 	orr.w	r3, r3, #2
 8003762:	61d3      	str	r3, [r2, #28]
 8003764:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	4a16      	ldr	r2, [pc, #88]	; (80037d0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003776:	f043 0308 	orr.w	r3, r3, #8
 800377a:	6193      	str	r3, [r2, #24]
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <HAL_TIM_Encoder_MspInit+0x98>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin;
 8003788:	2330      	movs	r3, #48	; 0x30
 800378a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003794:	f107 0314 	add.w	r3, r7, #20
 8003798:	4619      	mov	r1, r3
 800379a:	480e      	ldr	r0, [pc, #56]	; (80037d4 <HAL_TIM_Encoder_MspInit+0x9c>)
 800379c:	f000 fd10 	bl	80041c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <HAL_TIM_Encoder_MspInit+0xa0>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
 80037be:	4a06      	ldr	r2, [pc, #24]	; (80037d8 <HAL_TIM_Encoder_MspInit+0xa0>)
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80037c4:	bf00      	nop
 80037c6:	3728      	adds	r7, #40	; 0x28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40010c00 	.word	0x40010c00
 80037d8:	40010000 	.word	0x40010000

080037dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e4:	f107 0310 	add.w	r3, r7, #16
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fa:	d118      	bne.n	800382e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fc:	4b1c      	ldr	r3, [pc, #112]	; (8003870 <HAL_TIM_MspPostInit+0x94>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <HAL_TIM_MspPostInit+0x94>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	6193      	str	r3, [r2, #24]
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_TIM_MspPostInit+0x94>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003814:	2301      	movs	r3, #1
 8003816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003818:	2302      	movs	r3, #2
 800381a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381c:	2302      	movs	r3, #2
 800381e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003820:	f107 0310 	add.w	r3, r7, #16
 8003824:	4619      	mov	r1, r3
 8003826:	4813      	ldr	r0, [pc, #76]	; (8003874 <HAL_TIM_MspPostInit+0x98>)
 8003828:	f000 fcca 	bl	80041c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800382c:	e01c      	b.n	8003868 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a11      	ldr	r2, [pc, #68]	; (8003878 <HAL_TIM_MspPostInit+0x9c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d117      	bne.n	8003868 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_TIM_MspPostInit+0x94>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	4a0c      	ldr	r2, [pc, #48]	; (8003870 <HAL_TIM_MspPostInit+0x94>)
 800383e:	f043 0308 	orr.w	r3, r3, #8
 8003842:	6193      	str	r3, [r2, #24]
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <HAL_TIM_MspPostInit+0x94>)
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003854:	2302      	movs	r3, #2
 8003856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003858:	2302      	movs	r3, #2
 800385a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385c:	f107 0310 	add.w	r3, r7, #16
 8003860:	4619      	mov	r1, r3
 8003862:	4806      	ldr	r0, [pc, #24]	; (800387c <HAL_TIM_MspPostInit+0xa0>)
 8003864:	f000 fcac 	bl	80041c0 <HAL_GPIO_Init>
}
 8003868:	bf00      	nop
 800386a:	3720      	adds	r7, #32
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000
 8003874:	40010800 	.word	0x40010800
 8003878:	40000800 	.word	0x40000800
 800387c:	40010c00 	.word	0x40010c00

08003880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003884:	e7fe      	b.n	8003884 <NMI_Handler+0x4>

08003886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800388a:	e7fe      	b.n	800388a <HardFault_Handler+0x4>

0800388c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003890:	e7fe      	b.n	8003890 <MemManage_Handler+0x4>

08003892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003892:	b480      	push	{r7}
 8003894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003896:	e7fe      	b.n	8003896 <BusFault_Handler+0x4>

08003898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800389c:	e7fe      	b.n	800389c <UsageFault_Handler+0x4>

0800389e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038aa:	b480      	push	{r7}
 80038ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c6:	f000 f8c9 	bl	8003a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <DMA1_Channel4_IRQHandler+0x10>)
 80038d6:	f000 fb3f 	bl	8003f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000528 	.word	0x20000528

080038e4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80038e8:	4802      	ldr	r0, [pc, #8]	; (80038f4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80038ea:	f000 ff66 	bl	80047ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200013a0 	.word	0x200013a0

080038f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038fc:	4802      	ldr	r0, [pc, #8]	; (8003908 <TIM2_IRQHandler+0x10>)
 80038fe:	f004 f821 	bl	8007944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200006c0 	.word	0x200006c0

0800390c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003914:	4a14      	ldr	r2, [pc, #80]	; (8003968 <_sbrk+0x5c>)
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <_sbrk+0x60>)
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <_sbrk+0x64>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <_sbrk+0x64>)
 800392a:	4a12      	ldr	r2, [pc, #72]	; (8003974 <_sbrk+0x68>)
 800392c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <_sbrk+0x64>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	429a      	cmp	r2, r3
 800393a:	d207      	bcs.n	800394c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800393c:	f009 f98e 	bl	800cc5c <__errno>
 8003940:	4603      	mov	r3, r0
 8003942:	220c      	movs	r2, #12
 8003944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
 800394a:	e009      	b.n	8003960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <_sbrk+0x64>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <_sbrk+0x64>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	4a05      	ldr	r2, [pc, #20]	; (8003970 <_sbrk+0x64>)
 800395c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800395e:	68fb      	ldr	r3, [r7, #12]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20005000 	.word	0x20005000
 800396c:	00000400 	.word	0x00000400
 8003970:	200002f4 	.word	0x200002f4
 8003974:	200016a0 	.word	0x200016a0

08003978 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr

08003984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003984:	480c      	ldr	r0, [pc, #48]	; (80039b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003986:	490d      	ldr	r1, [pc, #52]	; (80039bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003988:	4a0d      	ldr	r2, [pc, #52]	; (80039c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800398a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800398c:	e002      	b.n	8003994 <LoopCopyDataInit>

0800398e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800398e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003992:	3304      	adds	r3, #4

08003994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003998:	d3f9      	bcc.n	800398e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800399c:	4c0a      	ldr	r4, [pc, #40]	; (80039c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800399e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039a0:	e001      	b.n	80039a6 <LoopFillZerobss>

080039a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039a4:	3204      	adds	r2, #4

080039a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039a8:	d3fb      	bcc.n	80039a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039aa:	f7ff ffe5 	bl	8003978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ae:	f009 f95b 	bl	800cc68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039b2:	f7ff f859 	bl	8002a68 <main>
  bx lr
 80039b6:	4770      	bx	lr
  ldr r0, =_sdata
 80039b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039bc:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80039c0:	0800da44 	.word	0x0800da44
  ldr r2, =_sbss
 80039c4:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80039c8:	2000169c 	.word	0x2000169c

080039cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039cc:	e7fe      	b.n	80039cc <ADC1_2_IRQHandler>
	...

080039d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_Init+0x28>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <HAL_Init+0x28>)
 80039da:	f043 0310 	orr.w	r3, r3, #16
 80039de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e0:	2003      	movs	r0, #3
 80039e2:	f000 f947 	bl	8003c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039e6:	2000      	movs	r0, #0
 80039e8:	f000 f808 	bl	80039fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039ec:	f7ff fdb2 	bl	8003554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40022000 	.word	0x40022000

080039fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <HAL_InitTick+0x54>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_InitTick+0x58>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f95f 	bl	8003cde <HAL_SYSTICK_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00e      	b.n	8003a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b0f      	cmp	r3, #15
 8003a2e:	d80a      	bhi.n	8003a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a30:	2200      	movs	r2, #0
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	f000 f927 	bl	8003c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a3c:	4a06      	ldr	r2, [pc, #24]	; (8003a58 <HAL_InitTick+0x5c>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000034 	.word	0x20000034
 8003a54:	2000003c 	.word	0x2000003c
 8003a58:	20000038 	.word	0x20000038

08003a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_IncTick+0x1c>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_IncTick+0x20>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	4a03      	ldr	r2, [pc, #12]	; (8003a7c <HAL_IncTick+0x20>)
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	2000003c 	.word	0x2000003c
 8003a7c:	20000708 	.word	0x20000708

08003a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return uwTick;
 8003a84:	4b02      	ldr	r3, [pc, #8]	; (8003a90 <HAL_GetTick+0x10>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	20000708 	.word	0x20000708

08003a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a9c:	f7ff fff0 	bl	8003a80 <HAL_GetTick>
 8003aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aac:	d005      	beq.n	8003aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <HAL_Delay+0x44>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003aba:	bf00      	nop
 8003abc:	f7ff ffe0 	bl	8003a80 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d8f7      	bhi.n	8003abc <HAL_Delay+0x28>
  {
  }
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	2000003c 	.word	0x2000003c

08003adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003af8:	4013      	ands	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b0e:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	60d3      	str	r3, [r2, #12]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <__NVIC_GetPriorityGrouping+0x18>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	f003 0307 	and.w	r3, r3, #7
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	db0b      	blt.n	8003b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	f003 021f 	and.w	r2, r3, #31
 8003b58:	4906      	ldr	r1, [pc, #24]	; (8003b74 <__NVIC_EnableIRQ+0x34>)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2001      	movs	r0, #1
 8003b62:	fa00 f202 	lsl.w	r2, r0, r2
 8003b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	e000e100 	.word	0xe000e100

08003b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db0a      	blt.n	8003ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	490c      	ldr	r1, [pc, #48]	; (8003bc4 <__NVIC_SetPriority+0x4c>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	0112      	lsls	r2, r2, #4
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba0:	e00a      	b.n	8003bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4908      	ldr	r1, [pc, #32]	; (8003bc8 <__NVIC_SetPriority+0x50>)
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	761a      	strb	r2, [r3, #24]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000e100 	.word	0xe000e100
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	; 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f1c3 0307 	rsb	r3, r3, #7
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	bf28      	it	cs
 8003bea:	2304      	movcs	r3, #4
 8003bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d902      	bls.n	8003bfc <NVIC_EncodePriority+0x30>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3b03      	subs	r3, #3
 8003bfa:	e000      	b.n	8003bfe <NVIC_EncodePriority+0x32>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c00:	f04f 32ff 	mov.w	r2, #4294967295
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	401a      	ands	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c14:	f04f 31ff 	mov.w	r1, #4294967295
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	43d9      	mvns	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c24:	4313      	orrs	r3, r2
         );
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3724      	adds	r7, #36	; 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c40:	d301      	bcc.n	8003c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c42:	2301      	movs	r3, #1
 8003c44:	e00f      	b.n	8003c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <SysTick_Config+0x40>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c4e:	210f      	movs	r1, #15
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	f7ff ff90 	bl	8003b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <SysTick_Config+0x40>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c5e:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <SysTick_Config+0x40>)
 8003c60:	2207      	movs	r2, #7
 8003c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	e000e010 	.word	0xe000e010

08003c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff2d 	bl	8003adc <__NVIC_SetPriorityGrouping>
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c9c:	f7ff ff42 	bl	8003b24 <__NVIC_GetPriorityGrouping>
 8003ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7ff ff90 	bl	8003bcc <NVIC_EncodePriority>
 8003cac:	4602      	mov	r2, r0
 8003cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff5f 	bl	8003b78 <__NVIC_SetPriority>
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff35 	bl	8003b40 <__NVIC_EnableIRQ>
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ffa2 	bl	8003c30 <SysTick_Config>
 8003cec:	4603      	mov	r3, r0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e043      	b.n	8003d96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <HAL_DMA_Init+0xa8>)
 8003d16:	4413      	add	r3, r2
 8003d18:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <HAL_DMA_Init+0xac>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	009a      	lsls	r2, r3, #2
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <HAL_DMA_Init+0xb0>)
 8003d2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	bffdfff8 	.word	0xbffdfff8
 8003da4:	cccccccd 	.word	0xcccccccd
 8003da8:	40020000 	.word	0x40020000

08003dac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_DMA_Start_IT+0x20>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e04a      	b.n	8003e62 <HAL_DMA_Start_IT+0xb6>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d13a      	bne.n	8003e54 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2202      	movs	r2, #2
 8003de2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f9ae 	bl	8004164 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 020e 	orr.w	r2, r2, #14
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e00f      	b.n	8003e42 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0204 	bic.w	r2, r2, #4
 8003e30:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 020a 	orr.w	r2, r2, #10
 8003e40:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0201 	orr.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e005      	b.n	8003e60 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d005      	beq.n	8003e8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2204      	movs	r2, #4
 8003e86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e051      	b.n	8003f32 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 020e 	bic.w	r2, r2, #14
 8003e9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <HAL_DMA_Abort_IT+0xd0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d029      	beq.n	8003f0c <HAL_DMA_Abort_IT+0xa0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a20      	ldr	r2, [pc, #128]	; (8003f40 <HAL_DMA_Abort_IT+0xd4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d022      	beq.n	8003f08 <HAL_DMA_Abort_IT+0x9c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <HAL_DMA_Abort_IT+0xd8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d01a      	beq.n	8003f02 <HAL_DMA_Abort_IT+0x96>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <HAL_DMA_Abort_IT+0xdc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d012      	beq.n	8003efc <HAL_DMA_Abort_IT+0x90>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <HAL_DMA_Abort_IT+0xe0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00a      	beq.n	8003ef6 <HAL_DMA_Abort_IT+0x8a>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1a      	ldr	r2, [pc, #104]	; (8003f50 <HAL_DMA_Abort_IT+0xe4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d102      	bne.n	8003ef0 <HAL_DMA_Abort_IT+0x84>
 8003eea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003eee:	e00e      	b.n	8003f0e <HAL_DMA_Abort_IT+0xa2>
 8003ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ef4:	e00b      	b.n	8003f0e <HAL_DMA_Abort_IT+0xa2>
 8003ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003efa:	e008      	b.n	8003f0e <HAL_DMA_Abort_IT+0xa2>
 8003efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f00:	e005      	b.n	8003f0e <HAL_DMA_Abort_IT+0xa2>
 8003f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f06:	e002      	b.n	8003f0e <HAL_DMA_Abort_IT+0xa2>
 8003f08:	2310      	movs	r3, #16
 8003f0a:	e000      	b.n	8003f0e <HAL_DMA_Abort_IT+0xa2>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	4a11      	ldr	r2, [pc, #68]	; (8003f54 <HAL_DMA_Abort_IT+0xe8>)
 8003f10:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
    } 
  }
  return status;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40020008 	.word	0x40020008
 8003f40:	4002001c 	.word	0x4002001c
 8003f44:	40020030 	.word	0x40020030
 8003f48:	40020044 	.word	0x40020044
 8003f4c:	40020058 	.word	0x40020058
 8003f50:	4002006c 	.word	0x4002006c
 8003f54:	40020000 	.word	0x40020000

08003f58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	2204      	movs	r2, #4
 8003f76:	409a      	lsls	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d04f      	beq.n	8004020 <HAL_DMA_IRQHandler+0xc8>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d04a      	beq.n	8004020 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d107      	bne.n	8003fa8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0204 	bic.w	r2, r2, #4
 8003fa6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a66      	ldr	r2, [pc, #408]	; (8004148 <HAL_DMA_IRQHandler+0x1f0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d029      	beq.n	8004006 <HAL_DMA_IRQHandler+0xae>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a65      	ldr	r2, [pc, #404]	; (800414c <HAL_DMA_IRQHandler+0x1f4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d022      	beq.n	8004002 <HAL_DMA_IRQHandler+0xaa>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a63      	ldr	r2, [pc, #396]	; (8004150 <HAL_DMA_IRQHandler+0x1f8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01a      	beq.n	8003ffc <HAL_DMA_IRQHandler+0xa4>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a62      	ldr	r2, [pc, #392]	; (8004154 <HAL_DMA_IRQHandler+0x1fc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d012      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x9e>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a60      	ldr	r2, [pc, #384]	; (8004158 <HAL_DMA_IRQHandler+0x200>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x98>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a5f      	ldr	r2, [pc, #380]	; (800415c <HAL_DMA_IRQHandler+0x204>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d102      	bne.n	8003fea <HAL_DMA_IRQHandler+0x92>
 8003fe4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fe8:	e00e      	b.n	8004008 <HAL_DMA_IRQHandler+0xb0>
 8003fea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003fee:	e00b      	b.n	8004008 <HAL_DMA_IRQHandler+0xb0>
 8003ff0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ff4:	e008      	b.n	8004008 <HAL_DMA_IRQHandler+0xb0>
 8003ff6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ffa:	e005      	b.n	8004008 <HAL_DMA_IRQHandler+0xb0>
 8003ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004000:	e002      	b.n	8004008 <HAL_DMA_IRQHandler+0xb0>
 8004002:	2340      	movs	r3, #64	; 0x40
 8004004:	e000      	b.n	8004008 <HAL_DMA_IRQHandler+0xb0>
 8004006:	2304      	movs	r3, #4
 8004008:	4a55      	ldr	r2, [pc, #340]	; (8004160 <HAL_DMA_IRQHandler+0x208>)
 800400a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8094 	beq.w	800413e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800401e:	e08e      	b.n	800413e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	2202      	movs	r2, #2
 8004026:	409a      	lsls	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d056      	beq.n	80040de <HAL_DMA_IRQHandler+0x186>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d051      	beq.n	80040de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 020a 	bic.w	r2, r2, #10
 8004056:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a38      	ldr	r2, [pc, #224]	; (8004148 <HAL_DMA_IRQHandler+0x1f0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d029      	beq.n	80040be <HAL_DMA_IRQHandler+0x166>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a37      	ldr	r2, [pc, #220]	; (800414c <HAL_DMA_IRQHandler+0x1f4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d022      	beq.n	80040ba <HAL_DMA_IRQHandler+0x162>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a35      	ldr	r2, [pc, #212]	; (8004150 <HAL_DMA_IRQHandler+0x1f8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01a      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x15c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a34      	ldr	r2, [pc, #208]	; (8004154 <HAL_DMA_IRQHandler+0x1fc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d012      	beq.n	80040ae <HAL_DMA_IRQHandler+0x156>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a32      	ldr	r2, [pc, #200]	; (8004158 <HAL_DMA_IRQHandler+0x200>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00a      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x150>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a31      	ldr	r2, [pc, #196]	; (800415c <HAL_DMA_IRQHandler+0x204>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d102      	bne.n	80040a2 <HAL_DMA_IRQHandler+0x14a>
 800409c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80040a0:	e00e      	b.n	80040c0 <HAL_DMA_IRQHandler+0x168>
 80040a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a6:	e00b      	b.n	80040c0 <HAL_DMA_IRQHandler+0x168>
 80040a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ac:	e008      	b.n	80040c0 <HAL_DMA_IRQHandler+0x168>
 80040ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040b2:	e005      	b.n	80040c0 <HAL_DMA_IRQHandler+0x168>
 80040b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040b8:	e002      	b.n	80040c0 <HAL_DMA_IRQHandler+0x168>
 80040ba:	2320      	movs	r3, #32
 80040bc:	e000      	b.n	80040c0 <HAL_DMA_IRQHandler+0x168>
 80040be:	2302      	movs	r3, #2
 80040c0:	4a27      	ldr	r2, [pc, #156]	; (8004160 <HAL_DMA_IRQHandler+0x208>)
 80040c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d034      	beq.n	800413e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80040dc:	e02f      	b.n	800413e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2208      	movs	r2, #8
 80040e4:	409a      	lsls	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d028      	beq.n	8004140 <HAL_DMA_IRQHandler+0x1e8>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d023      	beq.n	8004140 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 020e 	bic.w	r2, r2, #14
 8004106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	2101      	movs	r1, #1
 8004112:	fa01 f202 	lsl.w	r2, r1, r2
 8004116:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	4798      	blx	r3
    }
  }
  return;
 800413e:	bf00      	nop
 8004140:	bf00      	nop
}
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40020008 	.word	0x40020008
 800414c:	4002001c 	.word	0x4002001c
 8004150:	40020030 	.word	0x40020030
 8004154:	40020044 	.word	0x40020044
 8004158:	40020058 	.word	0x40020058
 800415c:	4002006c 	.word	0x4002006c
 8004160:	40020000 	.word	0x40020000

08004164 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	2101      	movs	r1, #1
 800417c:	fa01 f202 	lsl.w	r2, r1, r2
 8004180:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b10      	cmp	r3, #16
 8004190:	d108      	bne.n	80041a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041a2:	e007      	b.n	80041b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	60da      	str	r2, [r3, #12]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b08b      	sub	sp, #44	; 0x2c
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041ca:	2300      	movs	r3, #0
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80041ce:	2300      	movs	r3, #0
 80041d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041d2:	e169      	b.n	80044a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80041d4:	2201      	movs	r2, #1
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	f040 8158 	bne.w	80044a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4a9a      	ldr	r2, [pc, #616]	; (8004460 <HAL_GPIO_Init+0x2a0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d05e      	beq.n	80042ba <HAL_GPIO_Init+0xfa>
 80041fc:	4a98      	ldr	r2, [pc, #608]	; (8004460 <HAL_GPIO_Init+0x2a0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d875      	bhi.n	80042ee <HAL_GPIO_Init+0x12e>
 8004202:	4a98      	ldr	r2, [pc, #608]	; (8004464 <HAL_GPIO_Init+0x2a4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d058      	beq.n	80042ba <HAL_GPIO_Init+0xfa>
 8004208:	4a96      	ldr	r2, [pc, #600]	; (8004464 <HAL_GPIO_Init+0x2a4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d86f      	bhi.n	80042ee <HAL_GPIO_Init+0x12e>
 800420e:	4a96      	ldr	r2, [pc, #600]	; (8004468 <HAL_GPIO_Init+0x2a8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d052      	beq.n	80042ba <HAL_GPIO_Init+0xfa>
 8004214:	4a94      	ldr	r2, [pc, #592]	; (8004468 <HAL_GPIO_Init+0x2a8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d869      	bhi.n	80042ee <HAL_GPIO_Init+0x12e>
 800421a:	4a94      	ldr	r2, [pc, #592]	; (800446c <HAL_GPIO_Init+0x2ac>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d04c      	beq.n	80042ba <HAL_GPIO_Init+0xfa>
 8004220:	4a92      	ldr	r2, [pc, #584]	; (800446c <HAL_GPIO_Init+0x2ac>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d863      	bhi.n	80042ee <HAL_GPIO_Init+0x12e>
 8004226:	4a92      	ldr	r2, [pc, #584]	; (8004470 <HAL_GPIO_Init+0x2b0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d046      	beq.n	80042ba <HAL_GPIO_Init+0xfa>
 800422c:	4a90      	ldr	r2, [pc, #576]	; (8004470 <HAL_GPIO_Init+0x2b0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d85d      	bhi.n	80042ee <HAL_GPIO_Init+0x12e>
 8004232:	2b12      	cmp	r3, #18
 8004234:	d82a      	bhi.n	800428c <HAL_GPIO_Init+0xcc>
 8004236:	2b12      	cmp	r3, #18
 8004238:	d859      	bhi.n	80042ee <HAL_GPIO_Init+0x12e>
 800423a:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <HAL_GPIO_Init+0x80>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	080042bb 	.word	0x080042bb
 8004244:	08004295 	.word	0x08004295
 8004248:	080042a7 	.word	0x080042a7
 800424c:	080042e9 	.word	0x080042e9
 8004250:	080042ef 	.word	0x080042ef
 8004254:	080042ef 	.word	0x080042ef
 8004258:	080042ef 	.word	0x080042ef
 800425c:	080042ef 	.word	0x080042ef
 8004260:	080042ef 	.word	0x080042ef
 8004264:	080042ef 	.word	0x080042ef
 8004268:	080042ef 	.word	0x080042ef
 800426c:	080042ef 	.word	0x080042ef
 8004270:	080042ef 	.word	0x080042ef
 8004274:	080042ef 	.word	0x080042ef
 8004278:	080042ef 	.word	0x080042ef
 800427c:	080042ef 	.word	0x080042ef
 8004280:	080042ef 	.word	0x080042ef
 8004284:	0800429d 	.word	0x0800429d
 8004288:	080042b1 	.word	0x080042b1
 800428c:	4a79      	ldr	r2, [pc, #484]	; (8004474 <HAL_GPIO_Init+0x2b4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004292:	e02c      	b.n	80042ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	623b      	str	r3, [r7, #32]
          break;
 800429a:	e029      	b.n	80042f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	3304      	adds	r3, #4
 80042a2:	623b      	str	r3, [r7, #32]
          break;
 80042a4:	e024      	b.n	80042f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	3308      	adds	r3, #8
 80042ac:	623b      	str	r3, [r7, #32]
          break;
 80042ae:	e01f      	b.n	80042f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	330c      	adds	r3, #12
 80042b6:	623b      	str	r3, [r7, #32]
          break;
 80042b8:	e01a      	b.n	80042f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d102      	bne.n	80042c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80042c2:	2304      	movs	r3, #4
 80042c4:	623b      	str	r3, [r7, #32]
          break;
 80042c6:	e013      	b.n	80042f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d105      	bne.n	80042dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042d0:	2308      	movs	r3, #8
 80042d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	611a      	str	r2, [r3, #16]
          break;
 80042da:	e009      	b.n	80042f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042dc:	2308      	movs	r3, #8
 80042de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	615a      	str	r2, [r3, #20]
          break;
 80042e6:	e003      	b.n	80042f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80042e8:	2300      	movs	r3, #0
 80042ea:	623b      	str	r3, [r7, #32]
          break;
 80042ec:	e000      	b.n	80042f0 <HAL_GPIO_Init+0x130>
          break;
 80042ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2bff      	cmp	r3, #255	; 0xff
 80042f4:	d801      	bhi.n	80042fa <HAL_GPIO_Init+0x13a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	e001      	b.n	80042fe <HAL_GPIO_Init+0x13e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3304      	adds	r3, #4
 80042fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2bff      	cmp	r3, #255	; 0xff
 8004304:	d802      	bhi.n	800430c <HAL_GPIO_Init+0x14c>
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	e002      	b.n	8004312 <HAL_GPIO_Init+0x152>
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	3b08      	subs	r3, #8
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	210f      	movs	r1, #15
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	401a      	ands	r2, r3
 8004324:	6a39      	ldr	r1, [r7, #32]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	431a      	orrs	r2, r3
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80b1 	beq.w	80044a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004340:	4b4d      	ldr	r3, [pc, #308]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	4a4c      	ldr	r2, [pc, #304]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6193      	str	r3, [r2, #24]
 800434c:	4b4a      	ldr	r3, [pc, #296]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004358:	4a48      	ldr	r2, [pc, #288]	; (800447c <HAL_GPIO_Init+0x2bc>)
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	089b      	lsrs	r3, r3, #2
 800435e:	3302      	adds	r3, #2
 8004360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004364:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	220f      	movs	r2, #15
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4013      	ands	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a40      	ldr	r2, [pc, #256]	; (8004480 <HAL_GPIO_Init+0x2c0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d013      	beq.n	80043ac <HAL_GPIO_Init+0x1ec>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a3f      	ldr	r2, [pc, #252]	; (8004484 <HAL_GPIO_Init+0x2c4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00d      	beq.n	80043a8 <HAL_GPIO_Init+0x1e8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a3e      	ldr	r2, [pc, #248]	; (8004488 <HAL_GPIO_Init+0x2c8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d007      	beq.n	80043a4 <HAL_GPIO_Init+0x1e4>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a3d      	ldr	r2, [pc, #244]	; (800448c <HAL_GPIO_Init+0x2cc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d101      	bne.n	80043a0 <HAL_GPIO_Init+0x1e0>
 800439c:	2303      	movs	r3, #3
 800439e:	e006      	b.n	80043ae <HAL_GPIO_Init+0x1ee>
 80043a0:	2304      	movs	r3, #4
 80043a2:	e004      	b.n	80043ae <HAL_GPIO_Init+0x1ee>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e002      	b.n	80043ae <HAL_GPIO_Init+0x1ee>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e000      	b.n	80043ae <HAL_GPIO_Init+0x1ee>
 80043ac:	2300      	movs	r3, #0
 80043ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b0:	f002 0203 	and.w	r2, r2, #3
 80043b4:	0092      	lsls	r2, r2, #2
 80043b6:	4093      	lsls	r3, r2
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80043be:	492f      	ldr	r1, [pc, #188]	; (800447c <HAL_GPIO_Init+0x2bc>)
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	089b      	lsrs	r3, r3, #2
 80043c4:	3302      	adds	r3, #2
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d006      	beq.n	80043e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043d8:	4b2d      	ldr	r3, [pc, #180]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	492c      	ldr	r1, [pc, #176]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	600b      	str	r3, [r1, #0]
 80043e4:	e006      	b.n	80043f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043e6:	4b2a      	ldr	r3, [pc, #168]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	43db      	mvns	r3, r3
 80043ee:	4928      	ldr	r1, [pc, #160]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d006      	beq.n	800440e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004400:	4b23      	ldr	r3, [pc, #140]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	4922      	ldr	r1, [pc, #136]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	4313      	orrs	r3, r2
 800440a:	604b      	str	r3, [r1, #4]
 800440c:	e006      	b.n	800441c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800440e:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	43db      	mvns	r3, r3
 8004416:	491e      	ldr	r1, [pc, #120]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 8004418:	4013      	ands	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d006      	beq.n	8004436 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004428:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	4918      	ldr	r1, [pc, #96]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	4313      	orrs	r3, r2
 8004432:	608b      	str	r3, [r1, #8]
 8004434:	e006      	b.n	8004444 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004436:	4b16      	ldr	r3, [pc, #88]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	43db      	mvns	r3, r3
 800443e:	4914      	ldr	r1, [pc, #80]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 8004440:	4013      	ands	r3, r2
 8004442:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d021      	beq.n	8004494 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004450:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	490e      	ldr	r1, [pc, #56]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	4313      	orrs	r3, r2
 800445a:	60cb      	str	r3, [r1, #12]
 800445c:	e021      	b.n	80044a2 <HAL_GPIO_Init+0x2e2>
 800445e:	bf00      	nop
 8004460:	10320000 	.word	0x10320000
 8004464:	10310000 	.word	0x10310000
 8004468:	10220000 	.word	0x10220000
 800446c:	10210000 	.word	0x10210000
 8004470:	10120000 	.word	0x10120000
 8004474:	10110000 	.word	0x10110000
 8004478:	40021000 	.word	0x40021000
 800447c:	40010000 	.word	0x40010000
 8004480:	40010800 	.word	0x40010800
 8004484:	40010c00 	.word	0x40010c00
 8004488:	40011000 	.word	0x40011000
 800448c:	40011400 	.word	0x40011400
 8004490:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_GPIO_Init+0x304>)
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	43db      	mvns	r3, r3
 800449c:	4909      	ldr	r1, [pc, #36]	; (80044c4 <HAL_GPIO_Init+0x304>)
 800449e:	4013      	ands	r3, r2
 80044a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	3301      	adds	r3, #1
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	fa22 f303 	lsr.w	r3, r2, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f47f ae8e 	bne.w	80041d4 <HAL_GPIO_Init+0x14>
  }
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	372c      	adds	r7, #44	; 0x2c
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	40010400 	.word	0x40010400

080044c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	887b      	ldrh	r3, [r7, #2]
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
 80044e4:	e001      	b.n	80044ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr

080044f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	807b      	strh	r3, [r7, #2]
 8004502:	4613      	mov	r3, r2
 8004504:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004506:	787b      	ldrb	r3, [r7, #1]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800450c:	887a      	ldrh	r2, [r7, #2]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004512:	e003      	b.n	800451c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004514:	887b      	ldrh	r3, [r7, #2]
 8004516:	041a      	lsls	r2, r3, #16
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	611a      	str	r2, [r3, #16]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr

08004526 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004526:	b480      	push	{r7}
 8004528:	b085      	sub	sp, #20
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004538:	887a      	ldrh	r2, [r7, #2]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4013      	ands	r3, r2
 800453e:	041a      	lsls	r2, r3, #16
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	43d9      	mvns	r1, r3
 8004544:	887b      	ldrh	r3, [r7, #2]
 8004546:	400b      	ands	r3, r1
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455a:	b08b      	sub	sp, #44	; 0x2c
 800455c:	af06      	add	r7, sp, #24
 800455e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0fd      	b.n	8004766 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f008 f8c2 	bl	800c708 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2203      	movs	r2, #3
 8004588:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f004 f8f1 	bl	8008778 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	687e      	ldr	r6, [r7, #4]
 800459e:	466d      	mov	r5, sp
 80045a0:	f106 0410 	add.w	r4, r6, #16
 80045a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	602b      	str	r3, [r5, #0]
 80045ac:	1d33      	adds	r3, r6, #4
 80045ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045b0:	6838      	ldr	r0, [r7, #0]
 80045b2:	f004 f8bb 	bl	800872c <USB_CoreInit>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0ce      	b.n	8004766 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2100      	movs	r1, #0
 80045ce:	4618      	mov	r0, r3
 80045d0:	f004 f8ec 	bl	80087ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	e04c      	b.n	8004674 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	440b      	add	r3, r1
 80045ea:	3301      	adds	r3, #1
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	440b      	add	r3, r1
 8004600:	7bfa      	ldrb	r2, [r7, #15]
 8004602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004604:	7bfa      	ldrb	r2, [r7, #15]
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	b298      	uxth	r0, r3
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	440b      	add	r3, r1
 8004616:	3336      	adds	r3, #54	; 0x36
 8004618:	4602      	mov	r2, r0
 800461a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	440b      	add	r3, r1
 800462c:	3303      	adds	r3, #3
 800462e:	2200      	movs	r2, #0
 8004630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004632:	7bfa      	ldrb	r2, [r7, #15]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	440b      	add	r3, r1
 8004640:	3338      	adds	r3, #56	; 0x38
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004646:	7bfa      	ldrb	r2, [r7, #15]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	440b      	add	r3, r1
 8004654:	333c      	adds	r3, #60	; 0x3c
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800465a:	7bfa      	ldrb	r2, [r7, #15]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	440b      	add	r3, r1
 8004668:	3340      	adds	r3, #64	; 0x40
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	3301      	adds	r3, #1
 8004672:	73fb      	strb	r3, [r7, #15]
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	429a      	cmp	r2, r3
 800467c:	d3ad      	bcc.n	80045da <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]
 8004682:	e044      	b.n	800470e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	440b      	add	r3, r1
 8004692:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800469a:	7bfa      	ldrb	r2, [r7, #15]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	440b      	add	r3, r1
 80046a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046ac:	7bfa      	ldrb	r2, [r7, #15]
 80046ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046b0:	7bfa      	ldrb	r2, [r7, #15]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	440b      	add	r3, r1
 80046be:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	440b      	add	r3, r1
 80046d4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046dc:	7bfa      	ldrb	r2, [r7, #15]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	440b      	add	r3, r1
 80046ea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046f2:	7bfa      	ldrb	r2, [r7, #15]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	440b      	add	r3, r1
 8004700:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	3301      	adds	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
 800470e:	7bfa      	ldrb	r2, [r7, #15]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	d3b5      	bcc.n	8004684 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	687e      	ldr	r6, [r7, #4]
 8004720:	466d      	mov	r5, sp
 8004722:	f106 0410 	add.w	r4, r6, #16
 8004726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	602b      	str	r3, [r5, #0]
 800472e:	1d33      	adds	r3, r6, #4
 8004730:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004732:	6838      	ldr	r0, [r7, #0]
 8004734:	f004 f846 	bl	80087c4 <USB_DevInit>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2202      	movs	r2, #2
 8004742:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e00d      	b.n	8004766 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f006 f9b7 	bl	800aad2 <USB_DevDisconnect>

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800476e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_PCD_Start+0x16>
 8004780:	2302      	movs	r3, #2
 8004782:	e016      	b.n	80047b2 <HAL_PCD_Start+0x44>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f003 ffdb 	bl	800874c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004796:	2101      	movs	r1, #1
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f008 fa28 	bl	800cbee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f006 f98b 	bl	800aabe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b088      	sub	sp, #32
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f006 f98d 	bl	800aae6 <USB_ReadInterrupts>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d6:	d102      	bne.n	80047de <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fb61 	bl	8004ea0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f006 f97f 	bl	800aae6 <USB_ReadInterrupts>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f2:	d112      	bne.n	800481a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004806:	b292      	uxth	r2, r2
 8004808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f007 fff6 	bl	800c7fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004812:	2100      	movs	r1, #0
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f925 	bl	8004a64 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f006 f961 	bl	800aae6 <USB_ReadInterrupts>
 8004824:	4603      	mov	r3, r0
 8004826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800482a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800482e:	d10b      	bne.n	8004848 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004838:	b29a      	uxth	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004842:	b292      	uxth	r2, r2
 8004844:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f006 f94a 	bl	800aae6 <USB_ReadInterrupts>
 8004852:	4603      	mov	r3, r0
 8004854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485c:	d10b      	bne.n	8004876 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004866:	b29a      	uxth	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004870:	b292      	uxth	r2, r2
 8004872:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f006 f933 	bl	800aae6 <USB_ReadInterrupts>
 8004880:	4603      	mov	r3, r0
 8004882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488a:	d126      	bne.n	80048da <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004894:	b29a      	uxth	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0204 	bic.w	r2, r2, #4
 800489e:	b292      	uxth	r2, r2
 80048a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0208 	bic.w	r2, r2, #8
 80048b6:	b292      	uxth	r2, r2
 80048b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f007 ffd7 	bl	800c870 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048d4:	b292      	uxth	r2, r2
 80048d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f006 f901 	bl	800aae6 <USB_ReadInterrupts>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ee:	f040 8084 	bne.w	80049fa <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e011      	b.n	800491c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	7ffb      	ldrb	r3, [r7, #31]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	441a      	add	r2, r3
 8004904:	7ffb      	ldrb	r3, [r7, #31]
 8004906:	8812      	ldrh	r2, [r2, #0]
 8004908:	b292      	uxth	r2, r2
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	f107 0120 	add.w	r1, r7, #32
 8004910:	440b      	add	r3, r1
 8004912:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004916:	7ffb      	ldrb	r3, [r7, #31]
 8004918:	3301      	adds	r3, #1
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	7ffb      	ldrb	r3, [r7, #31]
 800491e:	2b07      	cmp	r3, #7
 8004920:	d9ea      	bls.n	80048f8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	b292      	uxth	r2, r2
 8004936:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004942:	b29a      	uxth	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0201 	bic.w	r2, r2, #1
 800494c:	b292      	uxth	r2, r2
 800494e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004952:	bf00      	nop
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800495c:	b29b      	uxth	r3, r3
 800495e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f6      	beq.n	8004954 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004978:	b292      	uxth	r2, r2
 800497a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800497e:	2300      	movs	r3, #0
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e010      	b.n	80049a6 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004984:	7ffb      	ldrb	r3, [r7, #31]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	4611      	mov	r1, r2
 800498c:	7ffa      	ldrb	r2, [r7, #31]
 800498e:	0092      	lsls	r2, r2, #2
 8004990:	440a      	add	r2, r1
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	f107 0120 	add.w	r1, r7, #32
 8004998:	440b      	add	r3, r1
 800499a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800499e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80049a0:	7ffb      	ldrb	r3, [r7, #31]
 80049a2:	3301      	adds	r3, #1
 80049a4:	77fb      	strb	r3, [r7, #31]
 80049a6:	7ffb      	ldrb	r3, [r7, #31]
 80049a8:	2b07      	cmp	r3, #7
 80049aa:	d9eb      	bls.n	8004984 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0208 	orr.w	r2, r2, #8
 80049be:	b292      	uxth	r2, r2
 80049c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049d6:	b292      	uxth	r2, r2
 80049d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0204 	orr.w	r2, r2, #4
 80049ee:	b292      	uxth	r2, r2
 80049f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f007 ff21 	bl	800c83c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f006 f871 	bl	800aae6 <USB_ReadInterrupts>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0e:	d10e      	bne.n	8004a2e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a22:	b292      	uxth	r2, r2
 8004a24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f007 feda 	bl	800c7e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f006 f857 	bl	800aae6 <USB_ReadInterrupts>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a42:	d10b      	bne.n	8004a5c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a56:	b292      	uxth	r2, r2
 8004a58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_PCD_SetAddress+0x1a>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e013      	b.n	8004aa6 <HAL_PCD_SetAddress+0x42>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f005 fffe 	bl	800aa98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	4608      	mov	r0, r1
 8004ab8:	4611      	mov	r1, r2
 8004aba:	461a      	mov	r2, r3
 8004abc:	4603      	mov	r3, r0
 8004abe:	70fb      	strb	r3, [r7, #3]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	803b      	strh	r3, [r7, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	da0e      	bge.n	8004af2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	705a      	strb	r2, [r3, #1]
 8004af0:	e00e      	b.n	8004b10 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	f003 0207 	and.w	r2, r3, #7
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	4413      	add	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b1c:	883a      	ldrh	r2, [r7, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	78ba      	ldrb	r2, [r7, #2]
 8004b26:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	785b      	ldrb	r3, [r3, #1]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b3a:	78bb      	ldrb	r3, [r7, #2]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d102      	bne.n	8004b46 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_PCD_EP_Open+0xa6>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e00e      	b.n	8004b72 <HAL_PCD_EP_Open+0xc4>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68f9      	ldr	r1, [r7, #12]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f003 fe4e 	bl	8008804 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004b70:	7afb      	ldrb	r3, [r7, #11]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	460b      	mov	r3, r1
 8004b84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da0e      	bge.n	8004bac <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	705a      	strb	r2, [r3, #1]
 8004baa:	e00e      	b.n	8004bca <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	f003 0207 	and.w	r2, r3, #7
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_PCD_EP_Close+0x6a>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e00e      	b.n	8004c02 <HAL_PCD_EP_Close+0x88>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68f9      	ldr	r1, [r7, #12]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f004 f970 	bl	8008ed8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b086      	sub	sp, #24
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	60f8      	str	r0, [r7, #12]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
 8004c16:	460b      	mov	r3, r1
 8004c18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c1a:	7afb      	ldrb	r3, [r7, #11]
 8004c1c:	f003 0207 	and.w	r2, r3, #7
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2200      	movs	r2, #0
 8004c42:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2200      	movs	r2, #0
 8004c48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c4a:	7afb      	ldrb	r3, [r7, #11]
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c56:	7afb      	ldrb	r3, [r7, #11]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d106      	bne.n	8004c6e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6979      	ldr	r1, [r7, #20]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f004 fb22 	bl	80092b0 <USB_EPStartXfer>
 8004c6c:	e005      	b.n	8004c7a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6979      	ldr	r1, [r7, #20]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f004 fb1b 	bl	80092b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	f003 0207 	and.w	r2, r3, #7
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	440b      	add	r3, r1
 8004ca2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004ca6:	681b      	ldr	r3, [r3, #0]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cc2:	7afb      	ldrb	r3, [r7, #11]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cfe:	7afb      	ldrb	r3, [r7, #11]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d0a:	7afb      	ldrb	r3, [r7, #11]
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6979      	ldr	r1, [r7, #20]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f004 fac8 	bl	80092b0 <USB_EPStartXfer>
 8004d20:	e005      	b.n	8004d2e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6979      	ldr	r1, [r7, #20]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f004 fac1 	bl	80092b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	f003 0207 	and.w	r2, r3, #7
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d901      	bls.n	8004d56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e04c      	b.n	8004df0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	da0e      	bge.n	8004d7c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4413      	add	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2201      	movs	r2, #1
 8004d78:	705a      	strb	r2, [r3, #1]
 8004d7a:	e00c      	b.n	8004d96 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_PCD_EP_SetStall+0x7e>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e01c      	b.n	8004df0 <HAL_PCD_EP_SetStall+0xb8>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f005 fd6a 	bl	800a89e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d108      	bne.n	8004de6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f005 fe8f 	bl	800ab04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	f003 020f 	and.w	r2, r3, #15
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d901      	bls.n	8004e16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e040      	b.n	8004e98 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	da0e      	bge.n	8004e3c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4413      	add	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	705a      	strb	r2, [r3, #1]
 8004e3a:	e00e      	b.n	8004e5a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	f003 0207 	and.w	r2, r3, #7
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4413      	add	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_PCD_EP_ClrStall+0x82>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e00e      	b.n	8004e98 <HAL_PCD_EP_ClrStall+0xa0>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68f9      	ldr	r1, [r7, #12]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f005 fd58 	bl	800a93e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08e      	sub	sp, #56	; 0x38
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ea8:	e2ec      	b.n	8005484 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004eb2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004eb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004ec0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f040 8161 	bne.w	800518c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004eca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d152      	bne.n	8004f7a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee4:	81fb      	strh	r3, [r7, #14]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	89fb      	ldrh	r3, [r7, #14]
 8004eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3328      	adds	r3, #40	; 0x28
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	3302      	adds	r3, #2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	695a      	ldr	r2, [r3, #20]
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	441a      	add	r2, r3
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004f38:	2100      	movs	r1, #0
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f007 fc37 	bl	800c7ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 829b 	beq.w	8005484 <PCD_EP_ISR_Handler+0x5e4>
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f040 8296 	bne.w	8005484 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	b292      	uxth	r2, r2
 8004f6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f78:	e284      	b.n	8005484 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004f8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d034      	beq.n	8004ffe <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3306      	adds	r3, #6
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	f005 fde6 	bl	800aba4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	823b      	strh	r3, [r7, #16]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	8a3a      	ldrh	r2, [r7, #16]
 8004fee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ff2:	b292      	uxth	r2, r2
 8004ff4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f007 fbac 	bl	800c754 <HAL_PCD_SetupStageCallback>
 8004ffc:	e242      	b.n	8005484 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ffe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005002:	2b00      	cmp	r3, #0
 8005004:	f280 823e 	bge.w	8005484 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29a      	uxth	r2, r3
 8005010:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005014:	4013      	ands	r3, r2
 8005016:	83bb      	strh	r3, [r7, #28]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	8bba      	ldrh	r2, [r7, #28]
 800501e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005022:	b292      	uxth	r2, r2
 8005024:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800502e:	b29b      	uxth	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	4413      	add	r3, r2
 800503a:	3306      	adds	r3, #6
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d019      	beq.n	800508e <PCD_EP_ISR_Handler+0x1ee>
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d015      	beq.n	800508e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	6959      	ldr	r1, [r3, #20]
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005072:	b29b      	uxth	r3, r3
 8005074:	f005 fd96 	bl	800aba4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	441a      	add	r2, r3
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005086:	2100      	movs	r1, #0
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f007 fb75 	bl	800c778 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800509a:	2b00      	cmp	r3, #0
 800509c:	f040 81f2 	bne.w	8005484 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	461a      	mov	r2, r3
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	4413      	add	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d112      	bne.n	80050ee <PCD_EP_ISR_Handler+0x24e>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	801a      	strh	r2, [r3, #0]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	801a      	strh	r2, [r3, #0]
 80050ec:	e02f      	b.n	800514e <PCD_EP_ISR_Handler+0x2ae>
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	2b3e      	cmp	r3, #62	; 0x3e
 80050f4:	d813      	bhi.n	800511e <PCD_EP_ISR_Handler+0x27e>
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	633b      	str	r3, [r7, #48]	; 0x30
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <PCD_EP_ISR_Handler+0x270>
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	3301      	adds	r3, #1
 800510e:	633b      	str	r3, [r7, #48]	; 0x30
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	b29b      	uxth	r3, r3
 8005114:	029b      	lsls	r3, r3, #10
 8005116:	b29a      	uxth	r2, r3
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	801a      	strh	r2, [r3, #0]
 800511c:	e017      	b.n	800514e <PCD_EP_ISR_Handler+0x2ae>
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	633b      	str	r3, [r7, #48]	; 0x30
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	2b00      	cmp	r3, #0
 8005130:	d102      	bne.n	8005138 <PCD_EP_ISR_Handler+0x298>
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	3b01      	subs	r3, #1
 8005136:	633b      	str	r3, [r7, #48]	; 0x30
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	b29b      	uxth	r3, r3
 800513c:	029b      	lsls	r3, r3, #10
 800513e:	b29b      	uxth	r3, r3
 8005140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005148:	b29a      	uxth	r2, r3
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800515a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515e:	827b      	strh	r3, [r7, #18]
 8005160:	8a7b      	ldrh	r3, [r7, #18]
 8005162:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005166:	827b      	strh	r3, [r7, #18]
 8005168:	8a7b      	ldrh	r3, [r7, #18]
 800516a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800516e:	827b      	strh	r3, [r7, #18]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	8a7b      	ldrh	r3, [r7, #18]
 8005176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800517e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005186:	b29b      	uxth	r3, r3
 8005188:	8013      	strh	r3, [r2, #0]
 800518a:	e17b      	b.n	8005484 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800519e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f280 80ea 	bge.w	800537c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80051be:	4013      	ands	r3, r2
 80051c0:	853b      	strh	r3, [r7, #40]	; 0x28
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80051d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051d6:	b292      	uxth	r2, r2
 80051d8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80051da:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	4413      	add	r3, r2
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	7b1b      	ldrb	r3, [r3, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d122      	bne.n	800523e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005200:	b29b      	uxth	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4413      	add	r3, r2
 800520c:	3306      	adds	r3, #6
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005220:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005222:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8087 	beq.w	8005338 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	6959      	ldr	r1, [r3, #20]
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	88da      	ldrh	r2, [r3, #6]
 8005236:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005238:	f005 fcb4 	bl	800aba4 <USB_ReadPMA>
 800523c:	e07c      	b.n	8005338 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	78db      	ldrb	r3, [r3, #3]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d108      	bne.n	8005258 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005246:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005248:	461a      	mov	r2, r3
 800524a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f927 	bl	80054a0 <HAL_PCD_EP_DB_Receive>
 8005252:	4603      	mov	r3, r0
 8005254:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005256:	e06f      	b.n	8005338 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	847b      	strh	r3, [r7, #34]	; 0x22
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	441a      	add	r2, r3
 8005282:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800528c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005290:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005294:	b29b      	uxth	r3, r3
 8005296:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d021      	beq.n	80052f6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4413      	add	r3, r2
 80052c6:	3302      	adds	r3, #2
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052da:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80052dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d02a      	beq.n	8005338 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	6959      	ldr	r1, [r3, #20]
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	891a      	ldrh	r2, [r3, #8]
 80052ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052f0:	f005 fc58 	bl	800aba4 <USB_ReadPMA>
 80052f4:	e020      	b.n	8005338 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fe:	b29b      	uxth	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	4413      	add	r3, r2
 800530a:	3306      	adds	r3, #6
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800531e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005320:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005322:	2b00      	cmp	r3, #0
 8005324:	d008      	beq.n	8005338 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	6959      	ldr	r1, [r3, #20]
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	895a      	ldrh	r2, [r3, #10]
 8005332:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005334:	f005 fc36 	bl	800aba4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800533e:	441a      	add	r2, r3
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	695a      	ldr	r2, [r3, #20]
 8005348:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800534a:	441a      	add	r2, r3
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <PCD_EP_ISR_Handler+0x4c2>
 8005358:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	429a      	cmp	r2, r3
 8005360:	d206      	bcs.n	8005370 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f007 fa05 	bl	800c778 <HAL_PCD_DataOutStageCallback>
 800536e:	e005      	b.n	800537c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005376:	4618      	mov	r0, r3
 8005378:	f003 ff9a 	bl	80092b0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800537c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	2b00      	cmp	r3, #0
 8005384:	d07e      	beq.n	8005484 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005386:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	4413      	add	r3, r2
 8005398:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80053b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b4:	843b      	strh	r3, [r7, #32]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	8c3b      	ldrh	r3, [r7, #32]
 80053c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	78db      	ldrb	r3, [r3, #3]
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d00c      	beq.n	80053f4 <PCD_EP_ISR_Handler+0x554>
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	78db      	ldrb	r3, [r3, #3]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d146      	bne.n	8005478 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80053ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80053ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d141      	bne.n	8005478 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	3302      	adds	r3, #2
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800541c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	8bfb      	ldrh	r3, [r7, #30]
 8005424:	429a      	cmp	r2, r3
 8005426:	d906      	bls.n	8005436 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	699a      	ldr	r2, [r3, #24]
 800542c:	8bfb      	ldrh	r3, [r7, #30]
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	619a      	str	r2, [r3, #24]
 8005434:	e002      	b.n	800543c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	2200      	movs	r2, #0
 800543a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d106      	bne.n	8005452 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f007 f9af 	bl	800c7ae <HAL_PCD_DataInStageCallback>
 8005450:	e018      	b.n	8005484 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	695a      	ldr	r2, [r3, #20]
 8005456:	8bfb      	ldrh	r3, [r7, #30]
 8005458:	441a      	add	r2, r3
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	8bfb      	ldrh	r3, [r7, #30]
 8005464:	441a      	add	r2, r3
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005470:	4618      	mov	r0, r3
 8005472:	f003 ff1d 	bl	80092b0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005476:	e005      	b.n	8005484 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005478:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800547a:	461a      	mov	r2, r3
 800547c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f91b 	bl	80056ba <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800548c:	b29b      	uxth	r3, r3
 800548e:	b21b      	sxth	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	f6ff ad0a 	blt.w	8004eaa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3738      	adds	r7, #56	; 0x38
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d07e      	beq.n	80055b6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	4413      	add	r3, r2
 80054cc:	3302      	adds	r3, #2
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	8b7b      	ldrh	r3, [r7, #26]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d306      	bcc.n	80054fa <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	699a      	ldr	r2, [r3, #24]
 80054f0:	8b7b      	ldrh	r3, [r7, #26]
 80054f2:	1ad2      	subs	r2, r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	619a      	str	r2, [r3, #24]
 80054f8:	e002      	b.n	8005500 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2200      	movs	r2, #0
 80054fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d123      	bne.n	8005550 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	461a      	mov	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800551e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005522:	833b      	strh	r3, [r7, #24]
 8005524:	8b3b      	ldrh	r3, [r7, #24]
 8005526:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800552a:	833b      	strh	r3, [r7, #24]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	441a      	add	r2, r3
 800553a:	8b3b      	ldrh	r3, [r7, #24]
 800553c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800554c:	b29b      	uxth	r3, r3
 800554e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01f      	beq.n	800559a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005574:	82fb      	strh	r3, [r7, #22]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	441a      	add	r2, r3
 8005584:	8afb      	ldrh	r3, [r7, #22]
 8005586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005592:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800559a:	8b7b      	ldrh	r3, [r7, #26]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8087 	beq.w	80056b0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	6959      	ldr	r1, [r3, #20]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	891a      	ldrh	r2, [r3, #8]
 80055ae:	8b7b      	ldrh	r3, [r7, #26]
 80055b0:	f005 faf8 	bl	800aba4 <USB_ReadPMA>
 80055b4:	e07c      	b.n	80056b0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055be:	b29b      	uxth	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4413      	add	r3, r2
 80055ca:	3306      	adds	r3, #6
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	6812      	ldr	r2, [r2, #0]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055de:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	8b7b      	ldrh	r3, [r7, #26]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d306      	bcc.n	80055f8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	8b7b      	ldrh	r3, [r7, #26]
 80055f0:	1ad2      	subs	r2, r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	619a      	str	r2, [r3, #24]
 80055f6:	e002      	b.n	80055fe <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d123      	bne.n	800564e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800561c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005620:	83fb      	strh	r3, [r7, #30]
 8005622:	8bfb      	ldrh	r3, [r7, #30]
 8005624:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005628:	83fb      	strh	r3, [r7, #30]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	441a      	add	r2, r3
 8005638:	8bfb      	ldrh	r3, [r7, #30]
 800563a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800564a:	b29b      	uxth	r3, r3
 800564c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11f      	bne.n	8005698 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005672:	83bb      	strh	r3, [r7, #28]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	441a      	add	r2, r3
 8005682:	8bbb      	ldrh	r3, [r7, #28]
 8005684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005690:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005694:	b29b      	uxth	r3, r3
 8005696:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005698:	8b7b      	ldrh	r3, [r7, #26]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6959      	ldr	r1, [r3, #20]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	895a      	ldrh	r2, [r3, #10]
 80056aa:	8b7b      	ldrh	r3, [r7, #26]
 80056ac:	f005 fa7a 	bl	800aba4 <USB_ReadPMA>
    }
  }

  return count;
 80056b0:	8b7b      	ldrh	r3, [r7, #26]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3720      	adds	r7, #32
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b0a2      	sub	sp, #136	; 0x88
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	4613      	mov	r3, r2
 80056c6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056c8:	88fb      	ldrh	r3, [r7, #6]
 80056ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 81c7 	beq.w	8005a62 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056dc:	b29b      	uxth	r3, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	4413      	add	r3, r2
 80056e8:	3302      	adds	r3, #2
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	699a      	ldr	r2, [r3, #24]
 8005704:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005708:	429a      	cmp	r2, r3
 800570a:	d907      	bls.n	800571c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	699a      	ldr	r2, [r3, #24]
 8005710:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005714:	1ad2      	subs	r2, r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	619a      	str	r2, [r3, #24]
 800571a:	e002      	b.n	8005722 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2200      	movs	r2, #0
 8005720:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f040 80b9 	bne.w	800589e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d126      	bne.n	8005782 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	62bb      	str	r3, [r7, #40]	; 0x28
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005742:	b29b      	uxth	r3, r3
 8005744:	461a      	mov	r2, r3
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	4413      	add	r3, r2
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	011a      	lsls	r2, r3, #4
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	4413      	add	r3, r2
 8005756:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005766:	b29a      	uxth	r2, r3
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	b29b      	uxth	r3, r3
 8005772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577a:	b29a      	uxth	r2, r3
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	e01a      	b.n	80057b8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	785b      	ldrb	r3, [r3, #1]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d116      	bne.n	80057b8 <HAL_PCD_EP_DB_Transmit+0xfe>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	633b      	str	r3, [r7, #48]	; 0x30
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005798:	b29b      	uxth	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	4413      	add	r3, r2
 80057a0:	633b      	str	r3, [r7, #48]	; 0x30
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	011a      	lsls	r2, r3, #4
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	4413      	add	r3, r2
 80057ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b4:	2200      	movs	r2, #0
 80057b6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	623b      	str	r3, [r7, #32]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d126      	bne.n	8005814 <HAL_PCD_EP_DB_Transmit+0x15a>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	61bb      	str	r3, [r7, #24]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	4413      	add	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	011a      	lsls	r2, r3, #4
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	4413      	add	r3, r2
 80057e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	801a      	strh	r2, [r3, #0]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580c:	b29a      	uxth	r2, r3
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	801a      	strh	r2, [r3, #0]
 8005812:	e017      	b.n	8005844 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d113      	bne.n	8005844 <HAL_PCD_EP_DB_Transmit+0x18a>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005824:	b29b      	uxth	r3, r3
 8005826:	461a      	mov	r2, r3
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	4413      	add	r3, r2
 800582c:	623b      	str	r3, [r7, #32]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	011a      	lsls	r2, r3, #4
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	4413      	add	r3, r2
 8005838:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	2200      	movs	r2, #0
 8005842:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	4619      	mov	r1, r3
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f006 ffaf 	bl	800c7ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 82d4 	beq.w	8005e04 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005876:	827b      	strh	r3, [r7, #18]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	441a      	add	r2, r3
 8005886:	8a7b      	ldrh	r3, [r7, #18]
 8005888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005898:	b29b      	uxth	r3, r3
 800589a:	8013      	strh	r3, [r2, #0]
 800589c:	e2b2      	b.n	8005e04 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d021      	beq.n	80058ec <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80058d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	f040 8286 	bne.w	8005e04 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	695a      	ldr	r2, [r3, #20]
 80058fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005900:	441a      	add	r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	69da      	ldr	r2, [r3, #28]
 800590a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800590e:	441a      	add	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6a1a      	ldr	r2, [r3, #32]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	429a      	cmp	r2, r3
 800591e:	d309      	bcc.n	8005934 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6a1a      	ldr	r2, [r3, #32]
 800592a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800592c:	1ad2      	subs	r2, r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	621a      	str	r2, [r3, #32]
 8005932:	e015      	b.n	8005960 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d107      	bne.n	800594c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800593c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005940:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800594a:	e009      	b.n	8005960 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2200      	movs	r2, #0
 800595e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	785b      	ldrb	r3, [r3, #1]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d155      	bne.n	8005a14 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	63bb      	str	r3, [r7, #56]	; 0x38
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005976:	b29b      	uxth	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	4413      	add	r3, r2
 800597e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	011a      	lsls	r2, r3, #4
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	4413      	add	r3, r2
 800598a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
 8005990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005992:	2b00      	cmp	r3, #0
 8005994:	d112      	bne.n	80059bc <HAL_PCD_EP_DB_Transmit+0x302>
 8005996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a4:	801a      	strh	r2, [r3, #0]
 80059a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b8:	801a      	strh	r2, [r3, #0]
 80059ba:	e047      	b.n	8005a4c <HAL_PCD_EP_DB_Transmit+0x392>
 80059bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059be:	2b3e      	cmp	r3, #62	; 0x3e
 80059c0:	d811      	bhi.n	80059e6 <HAL_PCD_EP_DB_Transmit+0x32c>
 80059c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_PCD_EP_DB_Transmit+0x31e>
 80059d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d4:	3301      	adds	r3, #1
 80059d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059da:	b29b      	uxth	r3, r3
 80059dc:	029b      	lsls	r3, r3, #10
 80059de:	b29a      	uxth	r2, r3
 80059e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e2:	801a      	strh	r2, [r3, #0]
 80059e4:	e032      	b.n	8005a4c <HAL_PCD_EP_DB_Transmit+0x392>
 80059e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80059ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ee:	f003 031f 	and.w	r3, r3, #31
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d102      	bne.n	80059fc <HAL_PCD_EP_DB_Transmit+0x342>
 80059f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f8:	3b01      	subs	r3, #1
 80059fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80059fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	029b      	lsls	r3, r3, #10
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a10:	801a      	strh	r2, [r3, #0]
 8005a12:	e01b      	b.n	8005a4c <HAL_PCD_EP_DB_Transmit+0x392>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d117      	bne.n	8005a4c <HAL_PCD_EP_DB_Transmit+0x392>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	643b      	str	r3, [r7, #64]	; 0x40
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a30:	4413      	add	r3, r2
 8005a32:	643b      	str	r3, [r7, #64]	; 0x40
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	011a      	lsls	r2, r3, #4
 8005a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6959      	ldr	r1, [r3, #20]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	891a      	ldrh	r2, [r3, #8]
 8005a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f005 f85d 	bl	800ab1a <USB_WritePMA>
 8005a60:	e1d0      	b.n	8005e04 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4413      	add	r3, r2
 8005a76:	3306      	adds	r3, #6
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	6812      	ldr	r2, [r2, #0]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d307      	bcc.n	8005aaa <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005aa2:	1ad2      	subs	r2, r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	619a      	str	r2, [r3, #24]
 8005aa8:	e002      	b.n	8005ab0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2200      	movs	r2, #0
 8005aae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f040 80c4 	bne.w	8005c42 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d126      	bne.n	8005b10 <HAL_PCD_EP_DB_Transmit+0x456>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad6:	4413      	add	r3, r2
 8005ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	011a      	lsls	r2, r3, #4
 8005ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ae8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005af8:	801a      	strh	r2, [r3, #0]
 8005afa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b0c:	801a      	strh	r2, [r3, #0]
 8005b0e:	e01a      	b.n	8005b46 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d116      	bne.n	8005b46 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	677b      	str	r3, [r7, #116]	; 0x74
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b2c:	4413      	add	r3, r2
 8005b2e:	677b      	str	r3, [r7, #116]	; 0x74
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	011a      	lsls	r2, r3, #4
 8005b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b38:	4413      	add	r3, r2
 8005b3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b42:	2200      	movs	r2, #0
 8005b44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d12f      	bne.n	8005bb4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	011a      	lsls	r2, r3, #4
 8005b78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b98:	801a      	strh	r2, [r3, #0]
 8005b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bb0:	801a      	strh	r2, [r3, #0]
 8005bb2:	e017      	b.n	8005be4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d113      	bne.n	8005be4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bca:	4413      	add	r3, r2
 8005bcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	011a      	lsls	r2, r3, #4
 8005bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005be0:	2200      	movs	r2, #0
 8005be2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	4619      	mov	r1, r3
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f006 fddf 	bl	800c7ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005bf0:	88fb      	ldrh	r3, [r7, #6]
 8005bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f040 8104 	bne.w	8005e04 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	441a      	add	r2, r3
 8005c28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	8013      	strh	r3, [r2, #0]
 8005c40:	e0e0      	b.n	8005e04 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d121      	bne.n	8005c90 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c66:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	441a      	add	r2, r3
 8005c78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	f040 80b4 	bne.w	8005e04 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	695a      	ldr	r2, [r3, #20]
 8005ca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ca4:	441a      	add	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	69da      	ldr	r2, [r3, #28]
 8005cae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cb2:	441a      	add	r2, r3
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6a1a      	ldr	r2, [r3, #32]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d309      	bcc.n	8005cd8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	6a1a      	ldr	r2, [r3, #32]
 8005cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd0:	1ad2      	subs	r2, r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	621a      	str	r2, [r3, #32]
 8005cd6:	e015      	b.n	8005d04 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d107      	bne.n	8005cf0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005ce0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ce4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005cee:	e009      	b.n	8005d04 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	667b      	str	r3, [r7, #100]	; 0x64
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d155      	bne.n	8005dbe <HAL_PCD_EP_DB_Transmit+0x704>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d26:	4413      	add	r3, r2
 8005d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	011a      	lsls	r2, r3, #4
 8005d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d32:	4413      	add	r3, r2
 8005d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d38:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d112      	bne.n	8005d66 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d4e:	801a      	strh	r2, [r3, #0]
 8005d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	e044      	b.n	8005df0 <HAL_PCD_EP_DB_Transmit+0x736>
 8005d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d68:	2b3e      	cmp	r3, #62	; 0x3e
 8005d6a:	d811      	bhi.n	8005d90 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6e:	085b      	lsrs	r3, r3, #1
 8005d70:	657b      	str	r3, [r7, #84]	; 0x54
 8005d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d7e:	3301      	adds	r3, #1
 8005d80:	657b      	str	r3, [r7, #84]	; 0x54
 8005d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	029b      	lsls	r3, r3, #10
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d8c:	801a      	strh	r2, [r3, #0]
 8005d8e:	e02f      	b.n	8005df0 <HAL_PCD_EP_DB_Transmit+0x736>
 8005d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d92:	095b      	lsrs	r3, r3, #5
 8005d94:	657b      	str	r3, [r7, #84]	; 0x54
 8005d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d102      	bne.n	8005da6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da2:	3b01      	subs	r3, #1
 8005da4:	657b      	str	r3, [r7, #84]	; 0x54
 8005da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	029b      	lsls	r3, r3, #10
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	e018      	b.n	8005df0 <HAL_PCD_EP_DB_Transmit+0x736>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d114      	bne.n	8005df0 <HAL_PCD_EP_DB_Transmit+0x736>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dd4:	4413      	add	r3, r2
 8005dd6:	667b      	str	r3, [r7, #100]	; 0x64
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	011a      	lsls	r2, r3, #4
 8005dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005de0:	4413      	add	r3, r2
 8005de2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005de6:	663b      	str	r3, [r7, #96]	; 0x60
 8005de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	6959      	ldr	r1, [r3, #20]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	895a      	ldrh	r2, [r3, #10]
 8005dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f004 fe8b 	bl	800ab1a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e1e:	823b      	strh	r3, [r7, #16]
 8005e20:	8a3b      	ldrh	r3, [r7, #16]
 8005e22:	f083 0310 	eor.w	r3, r3, #16
 8005e26:	823b      	strh	r3, [r7, #16]
 8005e28:	8a3b      	ldrh	r3, [r7, #16]
 8005e2a:	f083 0320 	eor.w	r3, r3, #32
 8005e2e:	823b      	strh	r3, [r7, #16]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	441a      	add	r2, r3
 8005e3e:	8a3b      	ldrh	r3, [r7, #16]
 8005e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3788      	adds	r7, #136	; 0x88
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b087      	sub	sp, #28
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	607b      	str	r3, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	817b      	strh	r3, [r7, #10]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005e70:	897b      	ldrh	r3, [r7, #10]
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00b      	beq.n	8005e94 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e7c:	897b      	ldrh	r3, [r7, #10]
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	e009      	b.n	8005ea8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e94:	897a      	ldrh	r2, [r7, #10]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005ea8:	893b      	ldrh	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d107      	bne.n	8005ebe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	80da      	strh	r2, [r3, #6]
 8005ebc:	e00b      	b.n	8005ed6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	0c1b      	lsrs	r3, r3, #16
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bc80      	pop	{r7}
 8005ee0:	4770      	bx	lr
	...

08005ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e26c      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 8087 	beq.w	8006012 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f04:	4b92      	ldr	r3, [pc, #584]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f003 030c 	and.w	r3, r3, #12
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d00c      	beq.n	8005f2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f10:	4b8f      	ldr	r3, [pc, #572]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f003 030c 	and.w	r3, r3, #12
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d112      	bne.n	8005f42 <HAL_RCC_OscConfig+0x5e>
 8005f1c:	4b8c      	ldr	r3, [pc, #560]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f28:	d10b      	bne.n	8005f42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f2a:	4b89      	ldr	r3, [pc, #548]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d06c      	beq.n	8006010 <HAL_RCC_OscConfig+0x12c>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d168      	bne.n	8006010 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e246      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f4a:	d106      	bne.n	8005f5a <HAL_RCC_OscConfig+0x76>
 8005f4c:	4b80      	ldr	r3, [pc, #512]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a7f      	ldr	r2, [pc, #508]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	e02e      	b.n	8005fb8 <HAL_RCC_OscConfig+0xd4>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10c      	bne.n	8005f7c <HAL_RCC_OscConfig+0x98>
 8005f62:	4b7b      	ldr	r3, [pc, #492]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a7a      	ldr	r2, [pc, #488]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	4b78      	ldr	r3, [pc, #480]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a77      	ldr	r2, [pc, #476]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	e01d      	b.n	8005fb8 <HAL_RCC_OscConfig+0xd4>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f84:	d10c      	bne.n	8005fa0 <HAL_RCC_OscConfig+0xbc>
 8005f86:	4b72      	ldr	r3, [pc, #456]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a71      	ldr	r2, [pc, #452]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	4b6f      	ldr	r3, [pc, #444]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a6e      	ldr	r2, [pc, #440]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	e00b      	b.n	8005fb8 <HAL_RCC_OscConfig+0xd4>
 8005fa0:	4b6b      	ldr	r3, [pc, #428]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a6a      	ldr	r2, [pc, #424]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	4b68      	ldr	r3, [pc, #416]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a67      	ldr	r2, [pc, #412]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d013      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc0:	f7fd fd5e 	bl	8003a80 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc8:	f7fd fd5a 	bl	8003a80 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b64      	cmp	r3, #100	; 0x64
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e1fa      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fda:	4b5d      	ldr	r3, [pc, #372]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0f0      	beq.n	8005fc8 <HAL_RCC_OscConfig+0xe4>
 8005fe6:	e014      	b.n	8006012 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe8:	f7fd fd4a 	bl	8003a80 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ff0:	f7fd fd46 	bl	8003a80 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b64      	cmp	r3, #100	; 0x64
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e1e6      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006002:	4b53      	ldr	r3, [pc, #332]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x10c>
 800600e:	e000      	b.n	8006012 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d063      	beq.n	80060e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800601e:	4b4c      	ldr	r3, [pc, #304]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f003 030c 	and.w	r3, r3, #12
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00b      	beq.n	8006042 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800602a:	4b49      	ldr	r3, [pc, #292]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f003 030c 	and.w	r3, r3, #12
 8006032:	2b08      	cmp	r3, #8
 8006034:	d11c      	bne.n	8006070 <HAL_RCC_OscConfig+0x18c>
 8006036:	4b46      	ldr	r3, [pc, #280]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d116      	bne.n	8006070 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006042:	4b43      	ldr	r3, [pc, #268]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <HAL_RCC_OscConfig+0x176>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d001      	beq.n	800605a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e1ba      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800605a:	4b3d      	ldr	r3, [pc, #244]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4939      	ldr	r1, [pc, #228]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 800606a:	4313      	orrs	r3, r2
 800606c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800606e:	e03a      	b.n	80060e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d020      	beq.n	80060ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006078:	4b36      	ldr	r3, [pc, #216]	; (8006154 <HAL_RCC_OscConfig+0x270>)
 800607a:	2201      	movs	r2, #1
 800607c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800607e:	f7fd fcff 	bl	8003a80 <HAL_GetTick>
 8006082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006086:	f7fd fcfb 	bl	8003a80 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e19b      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006098:	4b2d      	ldr	r3, [pc, #180]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0f0      	beq.n	8006086 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a4:	4b2a      	ldr	r3, [pc, #168]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	4927      	ldr	r1, [pc, #156]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	600b      	str	r3, [r1, #0]
 80060b8:	e015      	b.n	80060e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ba:	4b26      	ldr	r3, [pc, #152]	; (8006154 <HAL_RCC_OscConfig+0x270>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c0:	f7fd fcde 	bl	8003a80 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c8:	f7fd fcda 	bl	8003a80 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e17a      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060da:	4b1d      	ldr	r3, [pc, #116]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f0      	bne.n	80060c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d03a      	beq.n	8006168 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d019      	beq.n	800612e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060fa:	4b17      	ldr	r3, [pc, #92]	; (8006158 <HAL_RCC_OscConfig+0x274>)
 80060fc:	2201      	movs	r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006100:	f7fd fcbe 	bl	8003a80 <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006108:	f7fd fcba 	bl	8003a80 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e15a      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800611a:	4b0d      	ldr	r3, [pc, #52]	; (8006150 <HAL_RCC_OscConfig+0x26c>)
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f0      	beq.n	8006108 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006126:	2001      	movs	r0, #1
 8006128:	f000 faa6 	bl	8006678 <RCC_Delay>
 800612c:	e01c      	b.n	8006168 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800612e:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <HAL_RCC_OscConfig+0x274>)
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006134:	f7fd fca4 	bl	8003a80 <HAL_GetTick>
 8006138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800613a:	e00f      	b.n	800615c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800613c:	f7fd fca0 	bl	8003a80 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d908      	bls.n	800615c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e140      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
 800614e:	bf00      	nop
 8006150:	40021000 	.word	0x40021000
 8006154:	42420000 	.word	0x42420000
 8006158:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800615c:	4b9e      	ldr	r3, [pc, #632]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1e9      	bne.n	800613c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80a6 	beq.w	80062c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006176:	2300      	movs	r3, #0
 8006178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800617a:	4b97      	ldr	r3, [pc, #604]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10d      	bne.n	80061a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006186:	4b94      	ldr	r3, [pc, #592]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	4a93      	ldr	r2, [pc, #588]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 800618c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006190:	61d3      	str	r3, [r2, #28]
 8006192:	4b91      	ldr	r3, [pc, #580]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800619a:	60bb      	str	r3, [r7, #8]
 800619c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800619e:	2301      	movs	r3, #1
 80061a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a2:	4b8e      	ldr	r3, [pc, #568]	; (80063dc <HAL_RCC_OscConfig+0x4f8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d118      	bne.n	80061e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ae:	4b8b      	ldr	r3, [pc, #556]	; (80063dc <HAL_RCC_OscConfig+0x4f8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a8a      	ldr	r2, [pc, #552]	; (80063dc <HAL_RCC_OscConfig+0x4f8>)
 80061b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ba:	f7fd fc61 	bl	8003a80 <HAL_GetTick>
 80061be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c0:	e008      	b.n	80061d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c2:	f7fd fc5d 	bl	8003a80 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b64      	cmp	r3, #100	; 0x64
 80061ce:	d901      	bls.n	80061d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e0fd      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d4:	4b81      	ldr	r3, [pc, #516]	; (80063dc <HAL_RCC_OscConfig+0x4f8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0f0      	beq.n	80061c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d106      	bne.n	80061f6 <HAL_RCC_OscConfig+0x312>
 80061e8:	4b7b      	ldr	r3, [pc, #492]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	4a7a      	ldr	r2, [pc, #488]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	6213      	str	r3, [r2, #32]
 80061f4:	e02d      	b.n	8006252 <HAL_RCC_OscConfig+0x36e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10c      	bne.n	8006218 <HAL_RCC_OscConfig+0x334>
 80061fe:	4b76      	ldr	r3, [pc, #472]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	4a75      	ldr	r2, [pc, #468]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006204:	f023 0301 	bic.w	r3, r3, #1
 8006208:	6213      	str	r3, [r2, #32]
 800620a:	4b73      	ldr	r3, [pc, #460]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	4a72      	ldr	r2, [pc, #456]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006210:	f023 0304 	bic.w	r3, r3, #4
 8006214:	6213      	str	r3, [r2, #32]
 8006216:	e01c      	b.n	8006252 <HAL_RCC_OscConfig+0x36e>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	2b05      	cmp	r3, #5
 800621e:	d10c      	bne.n	800623a <HAL_RCC_OscConfig+0x356>
 8006220:	4b6d      	ldr	r3, [pc, #436]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	4a6c      	ldr	r2, [pc, #432]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006226:	f043 0304 	orr.w	r3, r3, #4
 800622a:	6213      	str	r3, [r2, #32]
 800622c:	4b6a      	ldr	r3, [pc, #424]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	4a69      	ldr	r2, [pc, #420]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	6213      	str	r3, [r2, #32]
 8006238:	e00b      	b.n	8006252 <HAL_RCC_OscConfig+0x36e>
 800623a:	4b67      	ldr	r3, [pc, #412]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	4a66      	ldr	r2, [pc, #408]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	6213      	str	r3, [r2, #32]
 8006246:	4b64      	ldr	r3, [pc, #400]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	4a63      	ldr	r2, [pc, #396]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 800624c:	f023 0304 	bic.w	r3, r3, #4
 8006250:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d015      	beq.n	8006286 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800625a:	f7fd fc11 	bl	8003a80 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006260:	e00a      	b.n	8006278 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006262:	f7fd fc0d 	bl	8003a80 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006270:	4293      	cmp	r3, r2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e0ab      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006278:	4b57      	ldr	r3, [pc, #348]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0ee      	beq.n	8006262 <HAL_RCC_OscConfig+0x37e>
 8006284:	e014      	b.n	80062b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006286:	f7fd fbfb 	bl	8003a80 <HAL_GetTick>
 800628a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800628c:	e00a      	b.n	80062a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800628e:	f7fd fbf7 	bl	8003a80 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	f241 3288 	movw	r2, #5000	; 0x1388
 800629c:	4293      	cmp	r3, r2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e095      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062a4:	4b4c      	ldr	r3, [pc, #304]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1ee      	bne.n	800628e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d105      	bne.n	80062c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b6:	4b48      	ldr	r3, [pc, #288]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	4a47      	ldr	r2, [pc, #284]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 80062bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 8081 	beq.w	80063ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062cc:	4b42      	ldr	r3, [pc, #264]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f003 030c 	and.w	r3, r3, #12
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d061      	beq.n	800639c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d146      	bne.n	800636e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e0:	4b3f      	ldr	r3, [pc, #252]	; (80063e0 <HAL_RCC_OscConfig+0x4fc>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e6:	f7fd fbcb 	bl	8003a80 <HAL_GetTick>
 80062ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062ec:	e008      	b.n	8006300 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ee:	f7fd fbc7 	bl	8003a80 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d901      	bls.n	8006300 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e067      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006300:	4b35      	ldr	r3, [pc, #212]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1f0      	bne.n	80062ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006314:	d108      	bne.n	8006328 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006316:	4b30      	ldr	r3, [pc, #192]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	492d      	ldr	r1, [pc, #180]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006324:	4313      	orrs	r3, r2
 8006326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006328:	4b2b      	ldr	r3, [pc, #172]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a19      	ldr	r1, [r3, #32]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	430b      	orrs	r3, r1
 800633a:	4927      	ldr	r1, [pc, #156]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 800633c:	4313      	orrs	r3, r2
 800633e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006340:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <HAL_RCC_OscConfig+0x4fc>)
 8006342:	2201      	movs	r2, #1
 8006344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006346:	f7fd fb9b 	bl	8003a80 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800634e:	f7fd fb97 	bl	8003a80 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e037      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006360:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0f0      	beq.n	800634e <HAL_RCC_OscConfig+0x46a>
 800636c:	e02f      	b.n	80063ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800636e:	4b1c      	ldr	r3, [pc, #112]	; (80063e0 <HAL_RCC_OscConfig+0x4fc>)
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006374:	f7fd fb84 	bl	8003a80 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800637c:	f7fd fb80 	bl	8003a80 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e020      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800638e:	4b12      	ldr	r3, [pc, #72]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f0      	bne.n	800637c <HAL_RCC_OscConfig+0x498>
 800639a:	e018      	b.n	80063ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e013      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063a8:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <HAL_RCC_OscConfig+0x4f4>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d106      	bne.n	80063ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d001      	beq.n	80063ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40021000 	.word	0x40021000
 80063dc:	40007000 	.word	0x40007000
 80063e0:	42420060 	.word	0x42420060

080063e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0d0      	b.n	800659a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063f8:	4b6a      	ldr	r3, [pc, #424]	; (80065a4 <HAL_RCC_ClockConfig+0x1c0>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d910      	bls.n	8006428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006406:	4b67      	ldr	r3, [pc, #412]	; (80065a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f023 0207 	bic.w	r2, r3, #7
 800640e:	4965      	ldr	r1, [pc, #404]	; (80065a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	4313      	orrs	r3, r2
 8006414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006416:	4b63      	ldr	r3, [pc, #396]	; (80065a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d001      	beq.n	8006428 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e0b8      	b.n	800659a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d020      	beq.n	8006476 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006440:	4b59      	ldr	r3, [pc, #356]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4a58      	ldr	r2, [pc, #352]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006446:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800644a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006458:	4b53      	ldr	r3, [pc, #332]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4a52      	ldr	r2, [pc, #328]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 800645e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006462:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006464:	4b50      	ldr	r3, [pc, #320]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	494d      	ldr	r1, [pc, #308]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006472:	4313      	orrs	r3, r2
 8006474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d040      	beq.n	8006504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d107      	bne.n	800649a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648a:	4b47      	ldr	r3, [pc, #284]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d115      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e07f      	b.n	800659a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d107      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a2:	4b41      	ldr	r3, [pc, #260]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e073      	b.n	800659a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b2:	4b3d      	ldr	r3, [pc, #244]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e06b      	b.n	800659a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064c2:	4b39      	ldr	r3, [pc, #228]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f023 0203 	bic.w	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4936      	ldr	r1, [pc, #216]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064d4:	f7fd fad4 	bl	8003a80 <HAL_GetTick>
 80064d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064da:	e00a      	b.n	80064f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064dc:	f7fd fad0 	bl	8003a80 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e053      	b.n	800659a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f2:	4b2d      	ldr	r3, [pc, #180]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f003 020c 	and.w	r2, r3, #12
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	429a      	cmp	r2, r3
 8006502:	d1eb      	bne.n	80064dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006504:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d210      	bcs.n	8006534 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006512:	4b24      	ldr	r3, [pc, #144]	; (80065a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f023 0207 	bic.w	r2, r3, #7
 800651a:	4922      	ldr	r1, [pc, #136]	; (80065a4 <HAL_RCC_ClockConfig+0x1c0>)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	4313      	orrs	r3, r2
 8006520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006522:	4b20      	ldr	r3, [pc, #128]	; (80065a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d001      	beq.n	8006534 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e032      	b.n	800659a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006540:	4b19      	ldr	r3, [pc, #100]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	4916      	ldr	r1, [pc, #88]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 800654e:	4313      	orrs	r3, r2
 8006550:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800655e:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	490e      	ldr	r1, [pc, #56]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 800656e:	4313      	orrs	r3, r2
 8006570:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006572:	f000 f821 	bl	80065b8 <HAL_RCC_GetSysClockFreq>
 8006576:	4602      	mov	r2, r0
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	091b      	lsrs	r3, r3, #4
 800657e:	f003 030f 	and.w	r3, r3, #15
 8006582:	490a      	ldr	r1, [pc, #40]	; (80065ac <HAL_RCC_ClockConfig+0x1c8>)
 8006584:	5ccb      	ldrb	r3, [r1, r3]
 8006586:	fa22 f303 	lsr.w	r3, r2, r3
 800658a:	4a09      	ldr	r2, [pc, #36]	; (80065b0 <HAL_RCC_ClockConfig+0x1cc>)
 800658c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <HAL_RCC_ClockConfig+0x1d0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f7fd fa32 	bl	80039fc <HAL_InitTick>

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40022000 	.word	0x40022000
 80065a8:	40021000 	.word	0x40021000
 80065ac:	0800d9f8 	.word	0x0800d9f8
 80065b0:	20000034 	.word	0x20000034
 80065b4:	20000038 	.word	0x20000038

080065b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065b8:	b490      	push	{r4, r7}
 80065ba:	b08a      	sub	sp, #40	; 0x28
 80065bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80065be:	4b2a      	ldr	r3, [pc, #168]	; (8006668 <HAL_RCC_GetSysClockFreq+0xb0>)
 80065c0:	1d3c      	adds	r4, r7, #4
 80065c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80065c8:	f240 2301 	movw	r3, #513	; 0x201
 80065cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	2300      	movs	r3, #0
 80065d4:	61bb      	str	r3, [r7, #24]
 80065d6:	2300      	movs	r3, #0
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
 80065da:	2300      	movs	r3, #0
 80065dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80065e2:	4b22      	ldr	r3, [pc, #136]	; (800666c <HAL_RCC_GetSysClockFreq+0xb4>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f003 030c 	and.w	r3, r3, #12
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d002      	beq.n	80065f8 <HAL_RCC_GetSysClockFreq+0x40>
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	d003      	beq.n	80065fe <HAL_RCC_GetSysClockFreq+0x46>
 80065f6:	e02d      	b.n	8006654 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065f8:	4b1d      	ldr	r3, [pc, #116]	; (8006670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065fa:	623b      	str	r3, [r7, #32]
      break;
 80065fc:	e02d      	b.n	800665a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	0c9b      	lsrs	r3, r3, #18
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800660a:	4413      	add	r3, r2
 800660c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006610:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d013      	beq.n	8006644 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800661c:	4b13      	ldr	r3, [pc, #76]	; (800666c <HAL_RCC_GetSysClockFreq+0xb4>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	0c5b      	lsrs	r3, r3, #17
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800662a:	4413      	add	r3, r2
 800662c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006630:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	4a0e      	ldr	r2, [pc, #56]	; (8006670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006636:	fb02 f203 	mul.w	r2, r2, r3
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
 8006642:	e004      	b.n	800664e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	4a0b      	ldr	r2, [pc, #44]	; (8006674 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006648:	fb02 f303 	mul.w	r3, r2, r3
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	623b      	str	r3, [r7, #32]
      break;
 8006652:	e002      	b.n	800665a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006654:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006656:	623b      	str	r3, [r7, #32]
      break;
 8006658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800665a:	6a3b      	ldr	r3, [r7, #32]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3728      	adds	r7, #40	; 0x28
 8006660:	46bd      	mov	sp, r7
 8006662:	bc90      	pop	{r4, r7}
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	0800d7e8 	.word	0x0800d7e8
 800666c:	40021000 	.word	0x40021000
 8006670:	007a1200 	.word	0x007a1200
 8006674:	003d0900 	.word	0x003d0900

08006678 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006680:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <RCC_Delay+0x34>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a0a      	ldr	r2, [pc, #40]	; (80066b0 <RCC_Delay+0x38>)
 8006686:	fba2 2303 	umull	r2, r3, r2, r3
 800668a:	0a5b      	lsrs	r3, r3, #9
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006694:	bf00      	nop
  }
  while (Delay --);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	1e5a      	subs	r2, r3, #1
 800669a:	60fa      	str	r2, [r7, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f9      	bne.n	8006694 <RCC_Delay+0x1c>
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr
 80066ac:	20000034 	.word	0x20000034
 80066b0:	10624dd3 	.word	0x10624dd3

080066b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	613b      	str	r3, [r7, #16]
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d07d      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80066d0:	2300      	movs	r3, #0
 80066d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066d4:	4b4f      	ldr	r3, [pc, #316]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10d      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e0:	4b4c      	ldr	r3, [pc, #304]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	4a4b      	ldr	r2, [pc, #300]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ea:	61d3      	str	r3, [r2, #28]
 80066ec:	4b49      	ldr	r3, [pc, #292]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f4:	60bb      	str	r3, [r7, #8]
 80066f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066f8:	2301      	movs	r3, #1
 80066fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066fc:	4b46      	ldr	r3, [pc, #280]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d118      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006708:	4b43      	ldr	r3, [pc, #268]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a42      	ldr	r2, [pc, #264]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800670e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006712:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006714:	f7fd f9b4 	bl	8003a80 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800671a:	e008      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800671c:	f7fd f9b0 	bl	8003a80 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b64      	cmp	r3, #100	; 0x64
 8006728:	d901      	bls.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e06d      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672e:	4b3a      	ldr	r3, [pc, #232]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0f0      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800673a:	4b36      	ldr	r3, [pc, #216]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006742:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d02e      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	429a      	cmp	r2, r3
 8006756:	d027      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006758:	4b2e      	ldr	r3, [pc, #184]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006760:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006762:	4b2e      	ldr	r3, [pc, #184]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006764:	2201      	movs	r2, #1
 8006766:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006768:	4b2c      	ldr	r3, [pc, #176]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800676e:	4a29      	ldr	r2, [pc, #164]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d014      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677e:	f7fd f97f 	bl	8003a80 <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006784:	e00a      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006786:	f7fd f97b 	bl	8003a80 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	f241 3288 	movw	r2, #5000	; 0x1388
 8006794:	4293      	cmp	r3, r2
 8006796:	d901      	bls.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e036      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800679c:	4b1d      	ldr	r3, [pc, #116]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0ee      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067a8:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4917      	ldr	r1, [pc, #92]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d105      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067c0:	4b14      	ldr	r3, [pc, #80]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	4a13      	ldr	r2, [pc, #76]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067d8:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	490b      	ldr	r1, [pc, #44]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0310 	and.w	r3, r3, #16
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	4904      	ldr	r1, [pc, #16]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006804:	4313      	orrs	r3, r2
 8006806:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40021000 	.word	0x40021000
 8006818:	40007000 	.word	0x40007000
 800681c:	42420440 	.word	0x42420440

08006820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e076      	b.n	8006920 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	2b00      	cmp	r3, #0
 8006838:	d108      	bne.n	800684c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006842:	d009      	beq.n	8006858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	61da      	str	r2, [r3, #28]
 800684a:	e005      	b.n	8006858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7fc fea0 	bl	80035b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800688e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068a0:	431a      	orrs	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068d2:	431a      	orrs	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068dc:	ea42 0103 	orr.w	r1, r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	0c1a      	lsrs	r2, r3, #16
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f002 0204 	and.w	r2, r2, #4
 80068fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69da      	ldr	r2, [r3, #28]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800690e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08c      	sub	sp, #48	; 0x30
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006936:	2301      	movs	r3, #1
 8006938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <HAL_SPI_TransmitReceive+0x26>
 800694a:	2302      	movs	r3, #2
 800694c:	e18a      	b.n	8006c64 <HAL_SPI_TransmitReceive+0x33c>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006956:	f7fd f893 	bl	8003a80 <HAL_GetTick>
 800695a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800696c:	887b      	ldrh	r3, [r7, #2]
 800696e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006970:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006974:	2b01      	cmp	r3, #1
 8006976:	d00f      	beq.n	8006998 <HAL_SPI_TransmitReceive+0x70>
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800697e:	d107      	bne.n	8006990 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d103      	bne.n	8006990 <HAL_SPI_TransmitReceive+0x68>
 8006988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800698c:	2b04      	cmp	r3, #4
 800698e:	d003      	beq.n	8006998 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006990:	2302      	movs	r3, #2
 8006992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006996:	e15b      	b.n	8006c50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <HAL_SPI_TransmitReceive+0x82>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_SPI_TransmitReceive+0x82>
 80069a4:	887b      	ldrh	r3, [r7, #2]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d103      	bne.n	80069b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80069b0:	e14e      	b.n	8006c50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d003      	beq.n	80069c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2205      	movs	r2, #5
 80069c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	887a      	ldrh	r2, [r7, #2]
 80069d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	887a      	ldrh	r2, [r7, #2]
 80069dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	887a      	ldrh	r2, [r7, #2]
 80069e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	887a      	ldrh	r2, [r7, #2]
 80069ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a06:	2b40      	cmp	r3, #64	; 0x40
 8006a08:	d007      	beq.n	8006a1a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a22:	d178      	bne.n	8006b16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <HAL_SPI_TransmitReceive+0x10a>
 8006a2c:	8b7b      	ldrh	r3, [r7, #26]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d166      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	881a      	ldrh	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	1c9a      	adds	r2, r3, #2
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a56:	e053      	b.n	8006b00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d11b      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x176>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d016      	beq.n	8006a9e <HAL_SPI_TransmitReceive+0x176>
 8006a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d113      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	881a      	ldrh	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	1c9a      	adds	r2, r3, #2
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d119      	bne.n	8006ae0 <HAL_SPI_TransmitReceive+0x1b8>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d014      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	b292      	uxth	r2, r2
 8006ac2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	1c9a      	adds	r2, r3, #2
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006adc:	2301      	movs	r3, #1
 8006ade:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ae0:	f7fc ffce 	bl	8003a80 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d807      	bhi.n	8006b00 <HAL_SPI_TransmitReceive+0x1d8>
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af6:	d003      	beq.n	8006b00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006afe:	e0a7      	b.n	8006c50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1a6      	bne.n	8006a58 <HAL_SPI_TransmitReceive+0x130>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1a1      	bne.n	8006a58 <HAL_SPI_TransmitReceive+0x130>
 8006b14:	e07c      	b.n	8006c10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <HAL_SPI_TransmitReceive+0x1fc>
 8006b1e:	8b7b      	ldrh	r3, [r7, #26]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d16b      	bne.n	8006bfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	330c      	adds	r3, #12
 8006b2e:	7812      	ldrb	r2, [r2, #0]
 8006b30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b4a:	e057      	b.n	8006bfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d11c      	bne.n	8006b94 <HAL_SPI_TransmitReceive+0x26c>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d017      	beq.n	8006b94 <HAL_SPI_TransmitReceive+0x26c>
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d114      	bne.n	8006b94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	330c      	adds	r3, #12
 8006b74:	7812      	ldrb	r2, [r2, #0]
 8006b76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d119      	bne.n	8006bd6 <HAL_SPI_TransmitReceive+0x2ae>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d014      	beq.n	8006bd6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bd6:	f7fc ff53 	bl	8003a80 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d803      	bhi.n	8006bee <HAL_SPI_TransmitReceive+0x2c6>
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bec:	d102      	bne.n	8006bf4 <HAL_SPI_TransmitReceive+0x2cc>
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d103      	bne.n	8006bfc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006bfa:	e029      	b.n	8006c50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1a2      	bne.n	8006b4c <HAL_SPI_TransmitReceive+0x224>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d19d      	bne.n	8006b4c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 f8b1 	bl	8006d7c <SPI_EndRxTxTransaction>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d006      	beq.n	8006c2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c2c:	e010      	b.n	8006c50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10b      	bne.n	8006c4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c36:	2300      	movs	r3, #0
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	617b      	str	r3, [r7, #20]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	e000      	b.n	8006c50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3730      	adds	r7, #48	; 0x30
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c7c:	f7fc ff00 	bl	8003a80 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	1a9b      	subs	r3, r3, r2
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	4413      	add	r3, r2
 8006c8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c8c:	f7fc fef8 	bl	8003a80 <HAL_GetTick>
 8006c90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c92:	4b39      	ldr	r3, [pc, #228]	; (8006d78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	015b      	lsls	r3, r3, #5
 8006c98:	0d1b      	lsrs	r3, r3, #20
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ca2:	e054      	b.n	8006d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006caa:	d050      	beq.n	8006d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cac:	f7fc fee8 	bl	8003a80 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d902      	bls.n	8006cc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d13d      	bne.n	8006d3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cda:	d111      	bne.n	8006d00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce4:	d004      	beq.n	8006cf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cee:	d107      	bne.n	8006d00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d08:	d10f      	bne.n	8006d2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e017      	b.n	8006d6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4013      	ands	r3, r2
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	bf0c      	ite	eq
 8006d5e:	2301      	moveq	r3, #1
 8006d60:	2300      	movne	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d19b      	bne.n	8006ca4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000034 	.word	0x20000034

08006d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2180      	movs	r1, #128	; 0x80
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7ff ff6a 	bl	8006c6c <SPI_WaitFlagStateUntilTimeout>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da2:	f043 0220 	orr.w	r2, r3, #32
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e000      	b.n	8006db0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e041      	b.n	8006e4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d106      	bne.n	8006de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fc fc34 	bl	800364c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4619      	mov	r1, r3
 8006df6:	4610      	mov	r0, r2
 8006df8:	f001 f984 	bl	8008104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
	...

08006e58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d001      	beq.n	8006e70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e032      	b.n	8006ed6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a18      	ldr	r2, [pc, #96]	; (8006ee0 <HAL_TIM_Base_Start+0x88>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00e      	beq.n	8006ea0 <HAL_TIM_Base_Start+0x48>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e8a:	d009      	beq.n	8006ea0 <HAL_TIM_Base_Start+0x48>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a14      	ldr	r2, [pc, #80]	; (8006ee4 <HAL_TIM_Base_Start+0x8c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d004      	beq.n	8006ea0 <HAL_TIM_Base_Start+0x48>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a13      	ldr	r2, [pc, #76]	; (8006ee8 <HAL_TIM_Base_Start+0x90>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d111      	bne.n	8006ec4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b06      	cmp	r3, #6
 8006eb0:	d010      	beq.n	8006ed4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0201 	orr.w	r2, r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ec2:	e007      	b.n	8006ed4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0201 	orr.w	r2, r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40000400 	.word	0x40000400
 8006ee8:	40000800 	.word	0x40000800

08006eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d001      	beq.n	8006f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e03a      	b.n	8006f7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a18      	ldr	r2, [pc, #96]	; (8006f84 <HAL_TIM_Base_Start_IT+0x98>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00e      	beq.n	8006f44 <HAL_TIM_Base_Start_IT+0x58>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2e:	d009      	beq.n	8006f44 <HAL_TIM_Base_Start_IT+0x58>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a14      	ldr	r2, [pc, #80]	; (8006f88 <HAL_TIM_Base_Start_IT+0x9c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d004      	beq.n	8006f44 <HAL_TIM_Base_Start_IT+0x58>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a13      	ldr	r2, [pc, #76]	; (8006f8c <HAL_TIM_Base_Start_IT+0xa0>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d111      	bne.n	8006f68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b06      	cmp	r3, #6
 8006f54:	d010      	beq.n	8006f78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f042 0201 	orr.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f66:	e007      	b.n	8006f78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0201 	orr.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bc80      	pop	{r7}
 8006f82:	4770      	bx	lr
 8006f84:	40012c00 	.word	0x40012c00
 8006f88:	40000400 	.word	0x40000400
 8006f8c:	40000800 	.word	0x40000800

08006f90 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e041      	b.n	8007026 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d106      	bne.n	8006fbc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f839 	bl	800702e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f001 f898 	bl	8008104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	bc80      	pop	{r7}
 800703e:	4770      	bx	lr

08007040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e041      	b.n	80070d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f839 	bl	80070de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f001 f840 	bl	8008104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070e6:	bf00      	nop
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr

080070f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d109      	bne.n	8007114 <HAL_TIM_PWM_Start+0x24>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b01      	cmp	r3, #1
 800710a:	bf14      	ite	ne
 800710c:	2301      	movne	r3, #1
 800710e:	2300      	moveq	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	e022      	b.n	800715a <HAL_TIM_PWM_Start+0x6a>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2b04      	cmp	r3, #4
 8007118:	d109      	bne.n	800712e <HAL_TIM_PWM_Start+0x3e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b01      	cmp	r3, #1
 8007124:	bf14      	ite	ne
 8007126:	2301      	movne	r3, #1
 8007128:	2300      	moveq	r3, #0
 800712a:	b2db      	uxtb	r3, r3
 800712c:	e015      	b.n	800715a <HAL_TIM_PWM_Start+0x6a>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b08      	cmp	r3, #8
 8007132:	d109      	bne.n	8007148 <HAL_TIM_PWM_Start+0x58>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b01      	cmp	r3, #1
 800713e:	bf14      	ite	ne
 8007140:	2301      	movne	r3, #1
 8007142:	2300      	moveq	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	e008      	b.n	800715a <HAL_TIM_PWM_Start+0x6a>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b01      	cmp	r3, #1
 8007152:	bf14      	ite	ne
 8007154:	2301      	movne	r3, #1
 8007156:	2300      	moveq	r3, #0
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e05e      	b.n	8007220 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d104      	bne.n	8007172 <HAL_TIM_PWM_Start+0x82>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007170:	e013      	b.n	800719a <HAL_TIM_PWM_Start+0xaa>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b04      	cmp	r3, #4
 8007176:	d104      	bne.n	8007182 <HAL_TIM_PWM_Start+0x92>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007180:	e00b      	b.n	800719a <HAL_TIM_PWM_Start+0xaa>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b08      	cmp	r3, #8
 8007186:	d104      	bne.n	8007192 <HAL_TIM_PWM_Start+0xa2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007190:	e003      	b.n	800719a <HAL_TIM_PWM_Start+0xaa>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2201      	movs	r2, #1
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f001 fa2e 	bl	8008604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1e      	ldr	r2, [pc, #120]	; (8007228 <HAL_TIM_PWM_Start+0x138>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d107      	bne.n	80071c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a18      	ldr	r2, [pc, #96]	; (8007228 <HAL_TIM_PWM_Start+0x138>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00e      	beq.n	80071ea <HAL_TIM_PWM_Start+0xfa>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d4:	d009      	beq.n	80071ea <HAL_TIM_PWM_Start+0xfa>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a14      	ldr	r2, [pc, #80]	; (800722c <HAL_TIM_PWM_Start+0x13c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d004      	beq.n	80071ea <HAL_TIM_PWM_Start+0xfa>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a12      	ldr	r2, [pc, #72]	; (8007230 <HAL_TIM_PWM_Start+0x140>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d111      	bne.n	800720e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b06      	cmp	r3, #6
 80071fa:	d010      	beq.n	800721e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0201 	orr.w	r2, r2, #1
 800720a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720c:	e007      	b.n	800721e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0201 	orr.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	40012c00 	.word	0x40012c00
 800722c:	40000400 	.word	0x40000400
 8007230:	40000800 	.word	0x40000800

08007234 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d109      	bne.n	800725c <HAL_TIM_PWM_Start_DMA+0x28>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	bf0c      	ite	eq
 8007254:	2301      	moveq	r3, #1
 8007256:	2300      	movne	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	e022      	b.n	80072a2 <HAL_TIM_PWM_Start_DMA+0x6e>
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2b04      	cmp	r3, #4
 8007260:	d109      	bne.n	8007276 <HAL_TIM_PWM_Start_DMA+0x42>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b02      	cmp	r3, #2
 800726c:	bf0c      	ite	eq
 800726e:	2301      	moveq	r3, #1
 8007270:	2300      	movne	r3, #0
 8007272:	b2db      	uxtb	r3, r3
 8007274:	e015      	b.n	80072a2 <HAL_TIM_PWM_Start_DMA+0x6e>
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b08      	cmp	r3, #8
 800727a:	d109      	bne.n	8007290 <HAL_TIM_PWM_Start_DMA+0x5c>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	bf0c      	ite	eq
 8007288:	2301      	moveq	r3, #1
 800728a:	2300      	movne	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	e008      	b.n	80072a2 <HAL_TIM_PWM_Start_DMA+0x6e>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b02      	cmp	r3, #2
 800729a:	bf0c      	ite	eq
 800729c:	2301      	moveq	r3, #1
 800729e:	2300      	movne	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 80072a6:	2302      	movs	r3, #2
 80072a8:	e14e      	b.n	8007548 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d109      	bne.n	80072c4 <HAL_TIM_PWM_Start_DMA+0x90>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	bf0c      	ite	eq
 80072bc:	2301      	moveq	r3, #1
 80072be:	2300      	movne	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	e022      	b.n	800730a <HAL_TIM_PWM_Start_DMA+0xd6>
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d109      	bne.n	80072de <HAL_TIM_PWM_Start_DMA+0xaa>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	bf0c      	ite	eq
 80072d6:	2301      	moveq	r3, #1
 80072d8:	2300      	movne	r3, #0
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	e015      	b.n	800730a <HAL_TIM_PWM_Start_DMA+0xd6>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d109      	bne.n	80072f8 <HAL_TIM_PWM_Start_DMA+0xc4>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	bf0c      	ite	eq
 80072f0:	2301      	moveq	r3, #1
 80072f2:	2300      	movne	r3, #0
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	e008      	b.n	800730a <HAL_TIM_PWM_Start_DMA+0xd6>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b01      	cmp	r3, #1
 8007302:	bf0c      	ite	eq
 8007304:	2301      	moveq	r3, #1
 8007306:	2300      	movne	r3, #0
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d024      	beq.n	8007358 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d104      	bne.n	800731e <HAL_TIM_PWM_Start_DMA+0xea>
 8007314:	887b      	ldrh	r3, [r7, #2]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e114      	b.n	8007548 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <HAL_TIM_PWM_Start_DMA+0xfa>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800732c:	e016      	b.n	800735c <HAL_TIM_PWM_Start_DMA+0x128>
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b04      	cmp	r3, #4
 8007332:	d104      	bne.n	800733e <HAL_TIM_PWM_Start_DMA+0x10a>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2202      	movs	r2, #2
 8007338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800733c:	e00e      	b.n	800735c <HAL_TIM_PWM_Start_DMA+0x128>
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2b08      	cmp	r3, #8
 8007342:	d104      	bne.n	800734e <HAL_TIM_PWM_Start_DMA+0x11a>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800734c:	e006      	b.n	800735c <HAL_TIM_PWM_Start_DMA+0x128>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2202      	movs	r2, #2
 8007352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007356:	e001      	b.n	800735c <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e0f5      	b.n	8007548 <HAL_TIM_PWM_Start_DMA+0x314>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b0c      	cmp	r3, #12
 8007360:	f200 80ae 	bhi.w	80074c0 <HAL_TIM_PWM_Start_DMA+0x28c>
 8007364:	a201      	add	r2, pc, #4	; (adr r2, 800736c <HAL_TIM_PWM_Start_DMA+0x138>)
 8007366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736a:	bf00      	nop
 800736c:	080073a1 	.word	0x080073a1
 8007370:	080074c1 	.word	0x080074c1
 8007374:	080074c1 	.word	0x080074c1
 8007378:	080074c1 	.word	0x080074c1
 800737c:	080073e9 	.word	0x080073e9
 8007380:	080074c1 	.word	0x080074c1
 8007384:	080074c1 	.word	0x080074c1
 8007388:	080074c1 	.word	0x080074c1
 800738c:	08007431 	.word	0x08007431
 8007390:	080074c1 	.word	0x080074c1
 8007394:	080074c1 	.word	0x080074c1
 8007398:	080074c1 	.word	0x080074c1
 800739c:	08007479 	.word	0x08007479
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	4a6a      	ldr	r2, [pc, #424]	; (8007550 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80073a6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	4a69      	ldr	r2, [pc, #420]	; (8007554 <HAL_TIM_PWM_Start_DMA+0x320>)
 80073ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	4a68      	ldr	r2, [pc, #416]	; (8007558 <HAL_TIM_PWM_Start_DMA+0x324>)
 80073b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3334      	adds	r3, #52	; 0x34
 80073c4:	461a      	mov	r2, r3
 80073c6:	887b      	ldrh	r3, [r7, #2]
 80073c8:	f7fc fcf0 	bl	8003dac <HAL_DMA_Start_IT>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e0b8      	b.n	8007548 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073e4:	60da      	str	r2, [r3, #12]
      break;
 80073e6:	e06c      	b.n	80074c2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ec:	4a58      	ldr	r2, [pc, #352]	; (8007550 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80073ee:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	4a57      	ldr	r2, [pc, #348]	; (8007554 <HAL_TIM_PWM_Start_DMA+0x320>)
 80073f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	4a56      	ldr	r2, [pc, #344]	; (8007558 <HAL_TIM_PWM_Start_DMA+0x324>)
 80073fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007404:	6879      	ldr	r1, [r7, #4]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3338      	adds	r3, #56	; 0x38
 800740c:	461a      	mov	r2, r3
 800740e:	887b      	ldrh	r3, [r7, #2]
 8007410:	f7fc fccc 	bl	8003dac <HAL_DMA_Start_IT>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e094      	b.n	8007548 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800742c:	60da      	str	r2, [r3, #12]
      break;
 800742e:	e048      	b.n	80074c2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	4a46      	ldr	r2, [pc, #280]	; (8007550 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8007436:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	4a45      	ldr	r2, [pc, #276]	; (8007554 <HAL_TIM_PWM_Start_DMA+0x320>)
 800743e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	4a44      	ldr	r2, [pc, #272]	; (8007558 <HAL_TIM_PWM_Start_DMA+0x324>)
 8007446:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800744c:	6879      	ldr	r1, [r7, #4]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	333c      	adds	r3, #60	; 0x3c
 8007454:	461a      	mov	r2, r3
 8007456:	887b      	ldrh	r3, [r7, #2]
 8007458:	f7fc fca8 	bl	8003dac <HAL_DMA_Start_IT>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e070      	b.n	8007548 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007474:	60da      	str	r2, [r3, #12]
      break;
 8007476:	e024      	b.n	80074c2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747c:	4a34      	ldr	r2, [pc, #208]	; (8007550 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800747e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007484:	4a33      	ldr	r2, [pc, #204]	; (8007554 <HAL_TIM_PWM_Start_DMA+0x320>)
 8007486:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748c:	4a32      	ldr	r2, [pc, #200]	; (8007558 <HAL_TIM_PWM_Start_DMA+0x324>)
 800748e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3340      	adds	r3, #64	; 0x40
 800749c:	461a      	mov	r2, r3
 800749e:	887b      	ldrh	r3, [r7, #2]
 80074a0:	f7fc fc84 	bl	8003dac <HAL_DMA_Start_IT>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e04c      	b.n	8007548 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074bc:	60da      	str	r2, [r3, #12]
      break;
 80074be:	e000      	b.n	80074c2 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80074c0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2201      	movs	r2, #1
 80074c8:	68b9      	ldr	r1, [r7, #8]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 f89a 	bl	8008604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a21      	ldr	r2, [pc, #132]	; (800755c <HAL_TIM_PWM_Start_DMA+0x328>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d107      	bne.n	80074ea <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a1b      	ldr	r2, [pc, #108]	; (800755c <HAL_TIM_PWM_Start_DMA+0x328>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00e      	beq.n	8007512 <HAL_TIM_PWM_Start_DMA+0x2de>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074fc:	d009      	beq.n	8007512 <HAL_TIM_PWM_Start_DMA+0x2de>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a17      	ldr	r2, [pc, #92]	; (8007560 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d004      	beq.n	8007512 <HAL_TIM_PWM_Start_DMA+0x2de>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a15      	ldr	r2, [pc, #84]	; (8007564 <HAL_TIM_PWM_Start_DMA+0x330>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d111      	bne.n	8007536 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2b06      	cmp	r3, #6
 8007522:	d010      	beq.n	8007546 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007534:	e007      	b.n	8007546 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0201 	orr.w	r2, r2, #1
 8007544:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	08007ff5 	.word	0x08007ff5
 8007554:	0800809d 	.word	0x0800809d
 8007558:	08007f63 	.word	0x08007f63
 800755c:	40012c00 	.word	0x40012c00
 8007560:	40000400 	.word	0x40000400
 8007564:	40000800 	.word	0x40000800

08007568 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b0c      	cmp	r3, #12
 8007576:	d855      	bhi.n	8007624 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8007578:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800757a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757e:	bf00      	nop
 8007580:	080075b5 	.word	0x080075b5
 8007584:	08007625 	.word	0x08007625
 8007588:	08007625 	.word	0x08007625
 800758c:	08007625 	.word	0x08007625
 8007590:	080075d1 	.word	0x080075d1
 8007594:	08007625 	.word	0x08007625
 8007598:	08007625 	.word	0x08007625
 800759c:	08007625 	.word	0x08007625
 80075a0:	080075ed 	.word	0x080075ed
 80075a4:	08007625 	.word	0x08007625
 80075a8:	08007625 	.word	0x08007625
 80075ac:	08007625 	.word	0x08007625
 80075b0:	08007609 	.word	0x08007609
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80075c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fc fc4f 	bl	8003e6c <HAL_DMA_Abort_IT>
      break;
 80075ce:	e02a      	b.n	8007626 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fc fc41 	bl	8003e6c <HAL_DMA_Abort_IT>
      break;
 80075ea:	e01c      	b.n	8007626 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	4618      	mov	r0, r3
 8007602:	f7fc fc33 	bl	8003e6c <HAL_DMA_Abort_IT>
      break;
 8007606:	e00e      	b.n	8007626 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007616:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	4618      	mov	r0, r3
 800761e:	f7fc fc25 	bl	8003e6c <HAL_DMA_Abort_IT>
      break;
 8007622:	e000      	b.n	8007626 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8007624:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2200      	movs	r2, #0
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 ffe8 	bl	8008604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a29      	ldr	r2, [pc, #164]	; (80076e0 <HAL_TIM_PWM_Stop_DMA+0x178>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d117      	bne.n	800766e <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6a1a      	ldr	r2, [r3, #32]
 8007644:	f241 1311 	movw	r3, #4369	; 0x1111
 8007648:	4013      	ands	r3, r2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10f      	bne.n	800766e <HAL_TIM_PWM_Stop_DMA+0x106>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6a1a      	ldr	r2, [r3, #32]
 8007654:	f240 4344 	movw	r3, #1092	; 0x444
 8007658:	4013      	ands	r3, r2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d107      	bne.n	800766e <HAL_TIM_PWM_Stop_DMA+0x106>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800766c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6a1a      	ldr	r2, [r3, #32]
 8007674:	f241 1311 	movw	r3, #4369	; 0x1111
 8007678:	4013      	ands	r3, r2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10f      	bne.n	800769e <HAL_TIM_PWM_Stop_DMA+0x136>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6a1a      	ldr	r2, [r3, #32]
 8007684:	f240 4344 	movw	r3, #1092	; 0x444
 8007688:	4013      	ands	r3, r2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d107      	bne.n	800769e <HAL_TIM_PWM_Stop_DMA+0x136>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0201 	bic.w	r2, r2, #1
 800769c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d104      	bne.n	80076ae <HAL_TIM_PWM_Stop_DMA+0x146>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076ac:	e013      	b.n	80076d6 <HAL_TIM_PWM_Stop_DMA+0x16e>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	d104      	bne.n	80076be <HAL_TIM_PWM_Stop_DMA+0x156>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076bc:	e00b      	b.n	80076d6 <HAL_TIM_PWM_Stop_DMA+0x16e>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d104      	bne.n	80076ce <HAL_TIM_PWM_Stop_DMA+0x166>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076cc:	e003      	b.n	80076d6 <HAL_TIM_PWM_Stop_DMA+0x16e>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	40012c00 	.word	0x40012c00

080076e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e093      	b.n	8007820 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7fc f813 	bl	8003738 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2202      	movs	r2, #2
 8007716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	6812      	ldr	r2, [r2, #0]
 8007724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007728:	f023 0307 	bic.w	r3, r3, #7
 800772c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	3304      	adds	r3, #4
 8007736:	4619      	mov	r1, r3
 8007738:	4610      	mov	r0, r2
 800773a:	f000 fce3 	bl	8008104 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007766:	f023 0303 	bic.w	r3, r3, #3
 800776a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	021b      	lsls	r3, r3, #8
 8007776:	4313      	orrs	r3, r2
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007784:	f023 030c 	bic.w	r3, r3, #12
 8007788:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	4313      	orrs	r3, r2
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	011a      	lsls	r2, r3, #4
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	031b      	lsls	r3, r3, #12
 80077b4:	4313      	orrs	r3, r2
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80077c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	4313      	orrs	r3, r2
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007838:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007840:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007848:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007850:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d110      	bne.n	800787a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d102      	bne.n	8007864 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800785e:	7b7b      	ldrb	r3, [r7, #13]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d001      	beq.n	8007868 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e069      	b.n	800793c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007878:	e031      	b.n	80078de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b04      	cmp	r3, #4
 800787e:	d110      	bne.n	80078a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d102      	bne.n	800788c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007886:	7b3b      	ldrb	r3, [r7, #12]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d001      	beq.n	8007890 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e055      	b.n	800793c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078a0:	e01d      	b.n	80078de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d108      	bne.n	80078ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d105      	bne.n	80078ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078ae:	7b7b      	ldrb	r3, [r7, #13]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d102      	bne.n	80078ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078b4:	7b3b      	ldrb	r3, [r7, #12]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d001      	beq.n	80078be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e03e      	b.n	800793c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2202      	movs	r2, #2
 80078c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2202      	movs	r2, #2
 80078d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2202      	movs	r2, #2
 80078da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <HAL_TIM_Encoder_Start+0xc4>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d008      	beq.n	80078fc <HAL_TIM_Encoder_Start+0xd4>
 80078ea:	e00f      	b.n	800790c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2201      	movs	r2, #1
 80078f2:	2100      	movs	r1, #0
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fe85 	bl	8008604 <TIM_CCxChannelCmd>
      break;
 80078fa:	e016      	b.n	800792a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2201      	movs	r2, #1
 8007902:	2104      	movs	r1, #4
 8007904:	4618      	mov	r0, r3
 8007906:	f000 fe7d 	bl	8008604 <TIM_CCxChannelCmd>
      break;
 800790a:	e00e      	b.n	800792a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2201      	movs	r2, #1
 8007912:	2100      	movs	r1, #0
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fe75 	bl	8008604 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2201      	movs	r2, #1
 8007920:	2104      	movs	r1, #4
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fe6e 	bl	8008604 <TIM_CCxChannelCmd>
      break;
 8007928:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f042 0201 	orr.w	r2, r2, #1
 8007938:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b02      	cmp	r3, #2
 8007958:	d122      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b02      	cmp	r3, #2
 8007966:	d11b      	bne.n	80079a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0202 	mvn.w	r2, #2
 8007970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fac7 	bl	8007f1a <HAL_TIM_IC_CaptureCallback>
 800798c:	e005      	b.n	800799a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fb f810 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7fb f84b 	bl	8002a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f003 0304 	and.w	r3, r3, #4
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d122      	bne.n	80079f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	d11b      	bne.n	80079f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0204 	mvn.w	r2, #4
 80079c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2202      	movs	r2, #2
 80079ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa9d 	bl	8007f1a <HAL_TIM_IC_CaptureCallback>
 80079e0:	e005      	b.n	80079ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fa ffe6 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7fb f821 	bl	8002a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0308 	and.w	r3, r3, #8
 80079fe:	2b08      	cmp	r3, #8
 8007a00:	d122      	bne.n	8007a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f003 0308 	and.w	r3, r3, #8
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d11b      	bne.n	8007a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0208 	mvn.w	r2, #8
 8007a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2204      	movs	r2, #4
 8007a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa73 	bl	8007f1a <HAL_TIM_IC_CaptureCallback>
 8007a34:	e005      	b.n	8007a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fa ffbc 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7fa fff7 	bl	8002a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f003 0310 	and.w	r3, r3, #16
 8007a52:	2b10      	cmp	r3, #16
 8007a54:	d122      	bne.n	8007a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f003 0310 	and.w	r3, r3, #16
 8007a60:	2b10      	cmp	r3, #16
 8007a62:	d11b      	bne.n	8007a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f06f 0210 	mvn.w	r2, #16
 8007a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2208      	movs	r2, #8
 8007a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fa49 	bl	8007f1a <HAL_TIM_IC_CaptureCallback>
 8007a88:	e005      	b.n	8007a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7fa ff92 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7fa ffcd 	bl	8002a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d10e      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d107      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f06f 0201 	mvn.w	r2, #1
 8007ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa20 	bl	8007f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad2:	2b80      	cmp	r3, #128	; 0x80
 8007ad4:	d10e      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae0:	2b80      	cmp	r3, #128	; 0x80
 8007ae2:	d107      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fe13 	bl	800871a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afe:	2b40      	cmp	r3, #64	; 0x40
 8007b00:	d10e      	bne.n	8007b20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0c:	2b40      	cmp	r3, #64	; 0x40
 8007b0e:	d107      	bne.n	8007b20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fa0f 	bl	8007f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f003 0320 	and.w	r3, r3, #32
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	d10e      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	f003 0320 	and.w	r3, r3, #32
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	d107      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f06f 0220 	mvn.w	r2, #32
 8007b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fdde 	bl	8008708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d101      	bne.n	8007b6e <HAL_TIM_OC_ConfigChannel+0x1a>
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	e046      	b.n	8007bfc <HAL_TIM_OC_ConfigChannel+0xa8>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b0c      	cmp	r3, #12
 8007b7a:	d839      	bhi.n	8007bf0 <HAL_TIM_OC_ConfigChannel+0x9c>
 8007b7c:	a201      	add	r2, pc, #4	; (adr r2, 8007b84 <HAL_TIM_OC_ConfigChannel+0x30>)
 8007b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b82:	bf00      	nop
 8007b84:	08007bb9 	.word	0x08007bb9
 8007b88:	08007bf1 	.word	0x08007bf1
 8007b8c:	08007bf1 	.word	0x08007bf1
 8007b90:	08007bf1 	.word	0x08007bf1
 8007b94:	08007bc7 	.word	0x08007bc7
 8007b98:	08007bf1 	.word	0x08007bf1
 8007b9c:	08007bf1 	.word	0x08007bf1
 8007ba0:	08007bf1 	.word	0x08007bf1
 8007ba4:	08007bd5 	.word	0x08007bd5
 8007ba8:	08007bf1 	.word	0x08007bf1
 8007bac:	08007bf1 	.word	0x08007bf1
 8007bb0:	08007bf1 	.word	0x08007bf1
 8007bb4:	08007be3 	.word	0x08007be3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68b9      	ldr	r1, [r7, #8]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fb02 	bl	80081c8 <TIM_OC1_SetConfig>
      break;
 8007bc4:	e015      	b.n	8007bf2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 fb61 	bl	8008294 <TIM_OC2_SetConfig>
      break;
 8007bd2:	e00e      	b.n	8007bf2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68b9      	ldr	r1, [r7, #8]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 fbc4 	bl	8008368 <TIM_OC3_SetConfig>
      break;
 8007be0:	e007      	b.n	8007bf2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fc27 	bl	800843c <TIM_OC4_SetConfig>
      break;
 8007bee:	e000      	b.n	8007bf2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8007bf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d101      	bne.n	8007c1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e0ac      	b.n	8007d78 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b0c      	cmp	r3, #12
 8007c2a:	f200 809f 	bhi.w	8007d6c <HAL_TIM_PWM_ConfigChannel+0x168>
 8007c2e:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c34:	08007c69 	.word	0x08007c69
 8007c38:	08007d6d 	.word	0x08007d6d
 8007c3c:	08007d6d 	.word	0x08007d6d
 8007c40:	08007d6d 	.word	0x08007d6d
 8007c44:	08007ca9 	.word	0x08007ca9
 8007c48:	08007d6d 	.word	0x08007d6d
 8007c4c:	08007d6d 	.word	0x08007d6d
 8007c50:	08007d6d 	.word	0x08007d6d
 8007c54:	08007ceb 	.word	0x08007ceb
 8007c58:	08007d6d 	.word	0x08007d6d
 8007c5c:	08007d6d 	.word	0x08007d6d
 8007c60:	08007d6d 	.word	0x08007d6d
 8007c64:	08007d2b 	.word	0x08007d2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68b9      	ldr	r1, [r7, #8]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 faaa 	bl	80081c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	699a      	ldr	r2, [r3, #24]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f042 0208 	orr.w	r2, r2, #8
 8007c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	699a      	ldr	r2, [r3, #24]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 0204 	bic.w	r2, r2, #4
 8007c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6999      	ldr	r1, [r3, #24]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	691a      	ldr	r2, [r3, #16]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	619a      	str	r2, [r3, #24]
      break;
 8007ca6:	e062      	b.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68b9      	ldr	r1, [r7, #8]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 faf0 	bl	8008294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	699a      	ldr	r2, [r3, #24]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699a      	ldr	r2, [r3, #24]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6999      	ldr	r1, [r3, #24]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	021a      	lsls	r2, r3, #8
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	619a      	str	r2, [r3, #24]
      break;
 8007ce8:	e041      	b.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fb39 	bl	8008368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69da      	ldr	r2, [r3, #28]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f042 0208 	orr.w	r2, r2, #8
 8007d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69da      	ldr	r2, [r3, #28]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f022 0204 	bic.w	r2, r2, #4
 8007d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69d9      	ldr	r1, [r3, #28]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	691a      	ldr	r2, [r3, #16]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	61da      	str	r2, [r3, #28]
      break;
 8007d28:	e021      	b.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 fb83 	bl	800843c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69da      	ldr	r2, [r3, #28]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69da      	ldr	r2, [r3, #28]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69d9      	ldr	r1, [r3, #28]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	021a      	lsls	r2, r3, #8
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	61da      	str	r2, [r3, #28]
      break;
 8007d6a:	e000      	b.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007d6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <HAL_TIM_ConfigClockSource+0x18>
 8007d94:	2302      	movs	r3, #2
 8007d96:	e0b3      	b.n	8007f00 <HAL_TIM_ConfigClockSource+0x180>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007db6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dd0:	d03e      	beq.n	8007e50 <HAL_TIM_ConfigClockSource+0xd0>
 8007dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dd6:	f200 8087 	bhi.w	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dde:	f000 8085 	beq.w	8007eec <HAL_TIM_ConfigClockSource+0x16c>
 8007de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de6:	d87f      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007de8:	2b70      	cmp	r3, #112	; 0x70
 8007dea:	d01a      	beq.n	8007e22 <HAL_TIM_ConfigClockSource+0xa2>
 8007dec:	2b70      	cmp	r3, #112	; 0x70
 8007dee:	d87b      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007df0:	2b60      	cmp	r3, #96	; 0x60
 8007df2:	d050      	beq.n	8007e96 <HAL_TIM_ConfigClockSource+0x116>
 8007df4:	2b60      	cmp	r3, #96	; 0x60
 8007df6:	d877      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007df8:	2b50      	cmp	r3, #80	; 0x50
 8007dfa:	d03c      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0xf6>
 8007dfc:	2b50      	cmp	r3, #80	; 0x50
 8007dfe:	d873      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007e00:	2b40      	cmp	r3, #64	; 0x40
 8007e02:	d058      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x136>
 8007e04:	2b40      	cmp	r3, #64	; 0x40
 8007e06:	d86f      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007e08:	2b30      	cmp	r3, #48	; 0x30
 8007e0a:	d064      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x156>
 8007e0c:	2b30      	cmp	r3, #48	; 0x30
 8007e0e:	d86b      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007e10:	2b20      	cmp	r3, #32
 8007e12:	d060      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x156>
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	d867      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d05c      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x156>
 8007e1c:	2b10      	cmp	r3, #16
 8007e1e:	d05a      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007e20:	e062      	b.n	8007ee8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	6899      	ldr	r1, [r3, #8]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f000 fbc8 	bl	80085c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	609a      	str	r2, [r3, #8]
      break;
 8007e4e:	e04e      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6818      	ldr	r0, [r3, #0]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	6899      	ldr	r1, [r3, #8]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f000 fbb1 	bl	80085c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e72:	609a      	str	r2, [r3, #8]
      break;
 8007e74:	e03b      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6859      	ldr	r1, [r3, #4]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	461a      	mov	r2, r3
 8007e84:	f000 fb28 	bl	80084d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2150      	movs	r1, #80	; 0x50
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fb7f 	bl	8008592 <TIM_ITRx_SetConfig>
      break;
 8007e94:	e02b      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6818      	ldr	r0, [r3, #0]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	6859      	ldr	r1, [r3, #4]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f000 fb46 	bl	8008534 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2160      	movs	r1, #96	; 0x60
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fb6f 	bl	8008592 <TIM_ITRx_SetConfig>
      break;
 8007eb4:	e01b      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	6859      	ldr	r1, [r3, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f000 fb08 	bl	80084d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2140      	movs	r1, #64	; 0x40
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 fb5f 	bl	8008592 <TIM_ITRx_SetConfig>
      break;
 8007ed4:	e00b      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f000 fb56 	bl	8008592 <TIM_ITRx_SetConfig>
        break;
 8007ee6:	e002      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ee8:	bf00      	nop
 8007eea:	e000      	b.n	8007eee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007eec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr

08007f1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bc80      	pop	{r7}
 8007f2a:	4770      	bx	lr

08007f2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr

08007f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr

08007f50 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bc80      	pop	{r7}
 8007f60:	4770      	bx	lr

08007f62 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d107      	bne.n	8007f8a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f88:	e02a      	b.n	8007fe0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d107      	bne.n	8007fa4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2202      	movs	r2, #2
 8007f98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fa2:	e01d      	b.n	8007fe0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d107      	bne.n	8007fbe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2204      	movs	r2, #4
 8007fb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fbc:	e010      	b.n	8007fe0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d107      	bne.n	8007fd8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2208      	movs	r2, #8
 8007fcc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fd6:	e003      	b.n	8007fe0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f7ff ffb5 	bl	8007f50 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	771a      	strb	r2, [r3, #28]
}
 8007fec:	bf00      	nop
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	429a      	cmp	r2, r3
 800800a:	d10b      	bne.n	8008024 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d136      	bne.n	8008088 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008022:	e031      	b.n	8008088 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	429a      	cmp	r2, r3
 800802c:	d10b      	bne.n	8008046 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2202      	movs	r2, #2
 8008032:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d125      	bne.n	8008088 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008044:	e020      	b.n	8008088 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d10b      	bne.n	8008068 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2204      	movs	r2, #4
 8008054:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d114      	bne.n	8008088 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008066:	e00f      	b.n	8008088 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	429a      	cmp	r2, r3
 8008070:	d10a      	bne.n	8008088 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2208      	movs	r2, #8
 8008076:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d103      	bne.n	8008088 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f7fa fcd1 	bl	8002a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	771a      	strb	r2, [r3, #28]
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d103      	bne.n	80080bc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	771a      	strb	r2, [r3, #28]
 80080ba:	e019      	b.n	80080f0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d103      	bne.n	80080ce <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2202      	movs	r2, #2
 80080ca:	771a      	strb	r2, [r3, #28]
 80080cc:	e010      	b.n	80080f0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d103      	bne.n	80080e0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2204      	movs	r2, #4
 80080dc:	771a      	strb	r2, [r3, #28]
 80080de:	e007      	b.n	80080f0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d102      	bne.n	80080f0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2208      	movs	r2, #8
 80080ee:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f7ff ff1b 	bl	8007f2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	771a      	strb	r2, [r3, #28]
}
 80080fc:	bf00      	nop
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a29      	ldr	r2, [pc, #164]	; (80081bc <TIM_Base_SetConfig+0xb8>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d00b      	beq.n	8008134 <TIM_Base_SetConfig+0x30>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008122:	d007      	beq.n	8008134 <TIM_Base_SetConfig+0x30>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a26      	ldr	r2, [pc, #152]	; (80081c0 <TIM_Base_SetConfig+0xbc>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d003      	beq.n	8008134 <TIM_Base_SetConfig+0x30>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a25      	ldr	r2, [pc, #148]	; (80081c4 <TIM_Base_SetConfig+0xc0>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d108      	bne.n	8008146 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	4313      	orrs	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a1c      	ldr	r2, [pc, #112]	; (80081bc <TIM_Base_SetConfig+0xb8>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00b      	beq.n	8008166 <TIM_Base_SetConfig+0x62>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008154:	d007      	beq.n	8008166 <TIM_Base_SetConfig+0x62>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a19      	ldr	r2, [pc, #100]	; (80081c0 <TIM_Base_SetConfig+0xbc>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d003      	beq.n	8008166 <TIM_Base_SetConfig+0x62>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a18      	ldr	r2, [pc, #96]	; (80081c4 <TIM_Base_SetConfig+0xc0>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d108      	bne.n	8008178 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800816c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	4313      	orrs	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a07      	ldr	r2, [pc, #28]	; (80081bc <TIM_Base_SetConfig+0xb8>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d103      	bne.n	80081ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	691a      	ldr	r2, [r3, #16]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	615a      	str	r2, [r3, #20]
}
 80081b2:	bf00      	nop
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bc80      	pop	{r7}
 80081ba:	4770      	bx	lr
 80081bc:	40012c00 	.word	0x40012c00
 80081c0:	40000400 	.word	0x40000400
 80081c4:	40000800 	.word	0x40000800

080081c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	f023 0201 	bic.w	r2, r3, #1
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f023 0303 	bic.w	r3, r3, #3
 80081fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	4313      	orrs	r3, r2
 8008208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f023 0302 	bic.w	r3, r3, #2
 8008210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	4313      	orrs	r3, r2
 800821a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a1c      	ldr	r2, [pc, #112]	; (8008290 <TIM_OC1_SetConfig+0xc8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d10c      	bne.n	800823e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f023 0308 	bic.w	r3, r3, #8
 800822a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f023 0304 	bic.w	r3, r3, #4
 800823c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a13      	ldr	r2, [pc, #76]	; (8008290 <TIM_OC1_SetConfig+0xc8>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d111      	bne.n	800826a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800824c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	4313      	orrs	r3, r2
 800825e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	621a      	str	r2, [r3, #32]
}
 8008284:	bf00      	nop
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	bc80      	pop	{r7}
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	40012c00 	.word	0x40012c00

08008294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	f023 0210 	bic.w	r2, r3, #16
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	021b      	lsls	r3, r3, #8
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f023 0320 	bic.w	r3, r3, #32
 80082de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	011b      	lsls	r3, r3, #4
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a1d      	ldr	r2, [pc, #116]	; (8008364 <TIM_OC2_SetConfig+0xd0>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d10d      	bne.n	8008310 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	011b      	lsls	r3, r3, #4
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	4313      	orrs	r3, r2
 8008306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800830e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a14      	ldr	r2, [pc, #80]	; (8008364 <TIM_OC2_SetConfig+0xd0>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d113      	bne.n	8008340 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800831e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	4313      	orrs	r3, r2
 8008332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	621a      	str	r2, [r3, #32]
}
 800835a:	bf00      	nop
 800835c:	371c      	adds	r7, #28
 800835e:	46bd      	mov	sp, r7
 8008360:	bc80      	pop	{r7}
 8008362:	4770      	bx	lr
 8008364:	40012c00 	.word	0x40012c00

08008368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0303 	bic.w	r3, r3, #3
 800839e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	021b      	lsls	r3, r3, #8
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a1d      	ldr	r2, [pc, #116]	; (8008438 <TIM_OC3_SetConfig+0xd0>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d10d      	bne.n	80083e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	021b      	lsls	r3, r3, #8
 80083d4:	697a      	ldr	r2, [r7, #20]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a14      	ldr	r2, [pc, #80]	; (8008438 <TIM_OC3_SetConfig+0xd0>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d113      	bne.n	8008412 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	4313      	orrs	r3, r2
 8008404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4313      	orrs	r3, r2
 8008410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	621a      	str	r2, [r3, #32]
}
 800842c:	bf00      	nop
 800842e:	371c      	adds	r7, #28
 8008430:	46bd      	mov	sp, r7
 8008432:	bc80      	pop	{r7}
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	40012c00 	.word	0x40012c00

0800843c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800846a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	021b      	lsls	r3, r3, #8
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	031b      	lsls	r3, r3, #12
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	4313      	orrs	r3, r2
 8008492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a0f      	ldr	r2, [pc, #60]	; (80084d4 <TIM_OC4_SetConfig+0x98>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d109      	bne.n	80084b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	019b      	lsls	r3, r3, #6
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	621a      	str	r2, [r3, #32]
}
 80084ca:	bf00      	nop
 80084cc:	371c      	adds	r7, #28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bc80      	pop	{r7}
 80084d2:	4770      	bx	lr
 80084d4:	40012c00 	.word	0x40012c00

080084d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084d8:	b480      	push	{r7}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	f023 0201 	bic.w	r2, r3, #1
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	4313      	orrs	r3, r2
 800850c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f023 030a 	bic.w	r3, r3, #10
 8008514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	4313      	orrs	r3, r2
 800851c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	621a      	str	r2, [r3, #32]
}
 800852a:	bf00      	nop
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr

08008534 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	f023 0210 	bic.w	r2, r3, #16
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800855e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	031b      	lsls	r3, r3, #12
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008570:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	4313      	orrs	r3, r2
 800857a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	621a      	str	r2, [r3, #32]
}
 8008588:	bf00      	nop
 800858a:	371c      	adds	r7, #28
 800858c:	46bd      	mov	sp, r7
 800858e:	bc80      	pop	{r7}
 8008590:	4770      	bx	lr

08008592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008592:	b480      	push	{r7}
 8008594:	b085      	sub	sp, #20
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	f043 0307 	orr.w	r3, r3, #7
 80085b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	609a      	str	r2, [r3, #8]
}
 80085bc:	bf00      	nop
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bc80      	pop	{r7}
 80085c4:	4770      	bx	lr

080085c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b087      	sub	sp, #28
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	607a      	str	r2, [r7, #4]
 80085d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	021a      	lsls	r2, r3, #8
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	431a      	orrs	r2, r3
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	609a      	str	r2, [r3, #8]
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc80      	pop	{r7}
 8008602:	4770      	bx	lr

08008604 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f003 031f 	and.w	r3, r3, #31
 8008616:	2201      	movs	r2, #1
 8008618:	fa02 f303 	lsl.w	r3, r2, r3
 800861c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a1a      	ldr	r2, [r3, #32]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	43db      	mvns	r3, r3
 8008626:	401a      	ands	r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6a1a      	ldr	r2, [r3, #32]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f003 031f 	and.w	r3, r3, #31
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	fa01 f303 	lsl.w	r3, r1, r3
 800863c:	431a      	orrs	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	621a      	str	r2, [r3, #32]
}
 8008642:	bf00      	nop
 8008644:	371c      	adds	r7, #28
 8008646:	46bd      	mov	sp, r7
 8008648:	bc80      	pop	{r7}
 800864a:	4770      	bx	lr

0800864c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800865c:	2b01      	cmp	r3, #1
 800865e:	d101      	bne.n	8008664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008660:	2302      	movs	r3, #2
 8008662:	e046      	b.n	80086f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a16      	ldr	r2, [pc, #88]	; (80086fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d00e      	beq.n	80086c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b0:	d009      	beq.n	80086c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a12      	ldr	r2, [pc, #72]	; (8008700 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d004      	beq.n	80086c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a10      	ldr	r2, [pc, #64]	; (8008704 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d10c      	bne.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr
 80086fc:	40012c00 	.word	0x40012c00
 8008700:	40000400 	.word	0x40000400
 8008704:	40000800 	.word	0x40000800

08008708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	bc80      	pop	{r7}
 8008718:	4770      	bx	lr

0800871a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008722:	bf00      	nop
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr

0800872c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800872c:	b084      	sub	sp, #16
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	f107 0014 	add.w	r0, r7, #20
 800873a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	b004      	add	sp, #16
 800874a:	4770      	bx	lr

0800874c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800875c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008760:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	b29a      	uxth	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr

08008778 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008780:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008784:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800878c:	b29a      	uxth	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	b29b      	uxth	r3, r3
 8008792:	43db      	mvns	r3, r3
 8008794:	b29b      	uxth	r3, r3
 8008796:	4013      	ands	r3, r2
 8008798:	b29a      	uxth	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	bc80      	pop	{r7}
 80087c2:	4770      	bx	lr

080087c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80087c4:	b084      	sub	sp, #16
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	f107 0014 	add.w	r0, r7, #20
 80087d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bc80      	pop	{r7}
 8008800:	b004      	add	sp, #16
 8008802:	4770      	bx	lr

08008804 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008804:	b480      	push	{r7}
 8008806:	b09b      	sub	sp, #108	; 0x6c
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	b29b      	uxth	r3, r3
 8008822:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	78db      	ldrb	r3, [r3, #3]
 8008832:	2b03      	cmp	r3, #3
 8008834:	d81f      	bhi.n	8008876 <USB_ActivateEndpoint+0x72>
 8008836:	a201      	add	r2, pc, #4	; (adr r2, 800883c <USB_ActivateEndpoint+0x38>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	0800884d 	.word	0x0800884d
 8008840:	08008869 	.word	0x08008869
 8008844:	0800887f 	.word	0x0800887f
 8008848:	0800885b 	.word	0x0800885b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800884c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008854:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008858:	e012      	b.n	8008880 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800885a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800885e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008862:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008866:	e00b      	b.n	8008880 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008868:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800886c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008870:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008874:	e004      	b.n	8008880 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800887c:	e000      	b.n	8008880 <USB_ActivateEndpoint+0x7c>
      break;
 800887e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	441a      	add	r2, r3
 800888a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800888e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800889a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889e:	b29b      	uxth	r3, r3
 80088a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	881b      	ldrh	r3, [r3, #0]
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	4313      	orrs	r3, r2
 80088c2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	441a      	add	r2, r3
 80088d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80088d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	7b1b      	ldrb	r3, [r3, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f040 8149 	bne.w	8008b84 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 8084 	beq.w	8008a04 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	617b      	str	r3, [r7, #20]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008906:	b29b      	uxth	r3, r3
 8008908:	461a      	mov	r2, r3
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	4413      	add	r3, r2
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	011a      	lsls	r2, r3, #4
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800891e:	613b      	str	r3, [r7, #16]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	88db      	ldrh	r3, [r3, #6]
 8008924:	085b      	lsrs	r3, r3, #1
 8008926:	b29b      	uxth	r3, r3
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	b29a      	uxth	r2, r3
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	81fb      	strh	r3, [r7, #14]
 800893e:	89fb      	ldrh	r3, [r7, #14]
 8008940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01b      	beq.n	8008980 <USB_ActivateEndpoint+0x17c>
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	b29b      	uxth	r3, r3
 8008956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800895a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895e:	81bb      	strh	r3, [r7, #12]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	441a      	add	r2, r3
 800896a:	89bb      	ldrh	r3, [r7, #12]
 800896c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008978:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800897c:	b29b      	uxth	r3, r3
 800897e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	78db      	ldrb	r3, [r3, #3]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d020      	beq.n	80089ca <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	b29b      	uxth	r3, r3
 8008996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800899a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800899e:	813b      	strh	r3, [r7, #8]
 80089a0:	893b      	ldrh	r3, [r7, #8]
 80089a2:	f083 0320 	eor.w	r3, r3, #32
 80089a6:	813b      	strh	r3, [r7, #8]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	441a      	add	r2, r3
 80089b2:	893b      	ldrh	r3, [r7, #8]
 80089b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	8013      	strh	r3, [r2, #0]
 80089c8:	e27f      	b.n	8008eca <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	881b      	ldrh	r3, [r3, #0]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089e0:	817b      	strh	r3, [r7, #10]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	441a      	add	r2, r3
 80089ec:	897b      	ldrh	r3, [r7, #10]
 80089ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	8013      	strh	r3, [r2, #0]
 8008a02:	e262      	b.n	8008eca <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a14:	4413      	add	r3, r2
 8008a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	011a      	lsls	r2, r3, #4
 8008a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	88db      	ldrh	r3, [r3, #6]
 8008a2c:	085b      	lsrs	r3, r3, #1
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	005b      	lsls	r3, r3, #1
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	4413      	add	r3, r2
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	011a      	lsls	r2, r3, #4
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	4413      	add	r3, r2
 8008a56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a5a:	623b      	str	r3, [r7, #32]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d112      	bne.n	8008a8a <USB_ActivateEndpoint+0x286>
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	881b      	ldrh	r3, [r3, #0]
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	801a      	strh	r2, [r3, #0]
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	801a      	strh	r2, [r3, #0]
 8008a88:	e02f      	b.n	8008aea <USB_ActivateEndpoint+0x2e6>
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	2b3e      	cmp	r3, #62	; 0x3e
 8008a90:	d813      	bhi.n	8008aba <USB_ActivateEndpoint+0x2b6>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	085b      	lsrs	r3, r3, #1
 8008a98:	663b      	str	r3, [r7, #96]	; 0x60
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <USB_ActivateEndpoint+0x2a8>
 8008aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	663b      	str	r3, [r7, #96]	; 0x60
 8008aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	029b      	lsls	r3, r3, #10
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	801a      	strh	r2, [r3, #0]
 8008ab8:	e017      	b.n	8008aea <USB_ActivateEndpoint+0x2e6>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	095b      	lsrs	r3, r3, #5
 8008ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	f003 031f 	and.w	r3, r3, #31
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d102      	bne.n	8008ad4 <USB_ActivateEndpoint+0x2d0>
 8008ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	663b      	str	r3, [r7, #96]	; 0x60
 8008ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	029b      	lsls	r3, r3, #10
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	83fb      	strh	r3, [r7, #30]
 8008af8:	8bfb      	ldrh	r3, [r7, #30]
 8008afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d01b      	beq.n	8008b3a <USB_ActivateEndpoint+0x336>
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b18:	83bb      	strh	r3, [r7, #28]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	441a      	add	r2, r3
 8008b24:	8bbb      	ldrh	r3, [r7, #28]
 8008b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b50:	837b      	strh	r3, [r7, #26]
 8008b52:	8b7b      	ldrh	r3, [r7, #26]
 8008b54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b58:	837b      	strh	r3, [r7, #26]
 8008b5a:	8b7b      	ldrh	r3, [r7, #26]
 8008b5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b60:	837b      	strh	r3, [r7, #26]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	441a      	add	r2, r3
 8008b6c:	8b7b      	ldrh	r3, [r7, #26]
 8008b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	8013      	strh	r3, [r2, #0]
 8008b82:	e1a2      	b.n	8008eca <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	441a      	add	r2, r3
 8008ba8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bd0:	4413      	add	r3, r2
 8008bd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	011a      	lsls	r2, r3, #4
 8008bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008be2:	657b      	str	r3, [r7, #84]	; 0x54
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	891b      	ldrh	r3, [r3, #8]
 8008be8:	085b      	lsrs	r3, r3, #1
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bf2:	801a      	strh	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	653b      	str	r3, [r7, #80]	; 0x50
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	461a      	mov	r2, r3
 8008c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c04:	4413      	add	r3, r2
 8008c06:	653b      	str	r3, [r7, #80]	; 0x50
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	011a      	lsls	r2, r3, #4
 8008c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	895b      	ldrh	r3, [r3, #10]
 8008c1c:	085b      	lsrs	r3, r3, #1
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c26:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	785b      	ldrb	r3, [r3, #1]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f040 8091 	bne.w	8008d54 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008c40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d01b      	beq.n	8008c82 <USB_ActivateEndpoint+0x47e>
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c60:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	441a      	add	r2, r3
 8008c6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	873b      	strh	r3, [r7, #56]	; 0x38
 8008c90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d01b      	beq.n	8008cd2 <USB_ActivateEndpoint+0x4ce>
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4413      	add	r3, r2
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	441a      	add	r2, r3
 8008cbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008cea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008cec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cf0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008cf2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008cf4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cf8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	441a      	add	r2, r3
 8008d04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d30:	867b      	strh	r3, [r7, #50]	; 0x32
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	441a      	add	r2, r3
 8008d3c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	8013      	strh	r3, [r2, #0]
 8008d52:	e0ba      	b.n	8008eca <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008d64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d01d      	beq.n	8008dac <USB_ActivateEndpoint+0x5a8>
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	441a      	add	r2, r3
 8008d94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008dbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d01d      	beq.n	8008e04 <USB_ActivateEndpoint+0x600>
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dde:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	441a      	add	r2, r3
 8008dec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	78db      	ldrb	r3, [r3, #3]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d024      	beq.n	8008e56 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008e26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008e2a:	f083 0320 	eor.w	r3, r3, #32
 8008e2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	441a      	add	r2, r3
 8008e3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	8013      	strh	r3, [r2, #0]
 8008e54:	e01d      	b.n	8008e92 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	441a      	add	r2, r3
 8008e7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	441a      	add	r2, r3
 8008eb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008eca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	376c      	adds	r7, #108	; 0x6c
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bc80      	pop	{r7}
 8008ed6:	4770      	bx	lr

08008ed8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b08d      	sub	sp, #52	; 0x34
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	7b1b      	ldrb	r3, [r3, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f040 808e 	bne.w	8009008 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	785b      	ldrb	r3, [r3, #1]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d044      	beq.n	8008f7e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	81bb      	strh	r3, [r7, #12]
 8008f02:	89bb      	ldrh	r3, [r7, #12]
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d01b      	beq.n	8008f44 <USB_DeactivateEndpoint+0x6c>
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4413      	add	r3, r2
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f22:	817b      	strh	r3, [r7, #10]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	441a      	add	r2, r3
 8008f2e:	897b      	ldrh	r3, [r7, #10]
 8008f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f5a:	813b      	strh	r3, [r7, #8]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	441a      	add	r2, r3
 8008f66:	893b      	ldrh	r3, [r7, #8]
 8008f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	8013      	strh	r3, [r2, #0]
 8008f7c:	e192      	b.n	80092a4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	827b      	strh	r3, [r7, #18]
 8008f8c:	8a7b      	ldrh	r3, [r7, #18]
 8008f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d01b      	beq.n	8008fce <USB_DeactivateEndpoint+0xf6>
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4413      	add	r3, r2
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fac:	823b      	strh	r3, [r7, #16]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	441a      	add	r2, r3
 8008fb8:	8a3b      	ldrh	r3, [r7, #16]
 8008fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	881b      	ldrh	r3, [r3, #0]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe4:	81fb      	strh	r3, [r7, #14]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	441a      	add	r2, r3
 8008ff0:	89fb      	ldrh	r3, [r7, #14]
 8008ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009002:	b29b      	uxth	r3, r3
 8009004:	8013      	strh	r3, [r2, #0]
 8009006:	e14d      	b.n	80092a4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	785b      	ldrb	r3, [r3, #1]
 800900c:	2b00      	cmp	r3, #0
 800900e:	f040 80a5 	bne.w	800915c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4413      	add	r3, r2
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	843b      	strh	r3, [r7, #32]
 8009020:	8c3b      	ldrh	r3, [r7, #32]
 8009022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d01b      	beq.n	8009062 <USB_DeactivateEndpoint+0x18a>
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	881b      	ldrh	r3, [r3, #0]
 8009036:	b29b      	uxth	r3, r3
 8009038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800903c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009040:	83fb      	strh	r3, [r7, #30]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	441a      	add	r2, r3
 800904c:	8bfb      	ldrh	r3, [r7, #30]
 800904e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800905a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800905e:	b29b      	uxth	r3, r3
 8009060:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	83bb      	strh	r3, [r7, #28]
 8009070:	8bbb      	ldrh	r3, [r7, #28]
 8009072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009076:	2b00      	cmp	r3, #0
 8009078:	d01b      	beq.n	80090b2 <USB_DeactivateEndpoint+0x1da>
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	b29b      	uxth	r3, r3
 8009088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800908c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009090:	837b      	strh	r3, [r7, #26]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	441a      	add	r2, r3
 800909c:	8b7b      	ldrh	r3, [r7, #26]
 800909e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4413      	add	r3, r2
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090c8:	833b      	strh	r3, [r7, #24]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	441a      	add	r2, r3
 80090d4:	8b3b      	ldrh	r3, [r7, #24]
 80090d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009100:	82fb      	strh	r3, [r7, #22]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	441a      	add	r2, r3
 800910c:	8afb      	ldrh	r3, [r7, #22]
 800910e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800911a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800911e:	b29b      	uxth	r3, r3
 8009120:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	b29b      	uxth	r3, r3
 8009130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009138:	82bb      	strh	r3, [r7, #20]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	441a      	add	r2, r3
 8009144:	8abb      	ldrh	r3, [r7, #20]
 8009146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800914a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800914e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009156:	b29b      	uxth	r3, r3
 8009158:	8013      	strh	r3, [r2, #0]
 800915a:	e0a3      	b.n	80092a4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800916a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800916c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01b      	beq.n	80091ac <USB_DeactivateEndpoint+0x2d4>
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	b29b      	uxth	r3, r3
 8009182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800918a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	441a      	add	r2, r3
 8009196:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800919c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80091ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80091bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01b      	beq.n	80091fc <USB_DeactivateEndpoint+0x324>
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	881b      	ldrh	r3, [r3, #0]
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091da:	853b      	strh	r3, [r7, #40]	; 0x28
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	441a      	add	r2, r3
 80091e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4413      	add	r3, r2
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	b29b      	uxth	r3, r3
 800920a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800920e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009212:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	441a      	add	r2, r3
 800921e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800922c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009230:	b29b      	uxth	r3, r3
 8009232:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	b29b      	uxth	r3, r3
 8009242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800924a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	441a      	add	r2, r3
 8009256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800925c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009268:	b29b      	uxth	r3, r3
 800926a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29b      	uxth	r3, r3
 800927a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800927e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009282:	847b      	strh	r3, [r7, #34]	; 0x22
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	441a      	add	r2, r3
 800928e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800929c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3734      	adds	r7, #52	; 0x34
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bc80      	pop	{r7}
 80092ae:	4770      	bx	lr

080092b0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b0cc      	sub	sp, #304	; 0x130
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	1d3b      	adds	r3, r7, #4
 80092b8:	6018      	str	r0, [r3, #0]
 80092ba:	463b      	mov	r3, r7
 80092bc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092be:	463b      	mov	r3, r7
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	785b      	ldrb	r3, [r3, #1]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	f040 872e 	bne.w	800a126 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80092ca:	463b      	mov	r3, r7
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	699a      	ldr	r2, [r3, #24]
 80092d0:	463b      	mov	r3, r7
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d905      	bls.n	80092e6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80092da:	463b      	mov	r3, r7
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80092e4:	e004      	b.n	80092f0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80092e6:	463b      	mov	r3, r7
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80092f0:	463b      	mov	r3, r7
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	7b1b      	ldrb	r3, [r3, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d134      	bne.n	8009364 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80092fa:	463b      	mov	r3, r7
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	6959      	ldr	r1, [r3, #20]
 8009300:	463b      	mov	r3, r7
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	88da      	ldrh	r2, [r3, #6]
 8009306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800930a:	b29b      	uxth	r3, r3
 800930c:	1d38      	adds	r0, r7, #4
 800930e:	6800      	ldr	r0, [r0, #0]
 8009310:	f001 fc03 	bl	800ab1a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009314:	f107 0310 	add.w	r3, r7, #16
 8009318:	1d3a      	adds	r2, r7, #4
 800931a:	6812      	ldr	r2, [r2, #0]
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	1d3b      	adds	r3, r7, #4
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009326:	b29b      	uxth	r3, r3
 8009328:	4619      	mov	r1, r3
 800932a:	f107 0310 	add.w	r3, r7, #16
 800932e:	f107 0210 	add.w	r2, r7, #16
 8009332:	6812      	ldr	r2, [r2, #0]
 8009334:	440a      	add	r2, r1
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	463b      	mov	r3, r7
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	011a      	lsls	r2, r3, #4
 8009340:	f107 0310 	add.w	r3, r7, #16
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4413      	add	r3, r2
 8009348:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800934c:	f107 030c 	add.w	r3, r7, #12
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009356:	b29a      	uxth	r2, r3
 8009358:	f107 030c 	add.w	r3, r7, #12
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	801a      	strh	r2, [r3, #0]
 8009360:	f000 beac 	b.w	800a0bc <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009364:	463b      	mov	r3, r7
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	78db      	ldrb	r3, [r3, #3]
 800936a:	2b02      	cmp	r3, #2
 800936c:	f040 838c 	bne.w	8009a88 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009370:	463b      	mov	r3, r7
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	6a1a      	ldr	r2, [r3, #32]
 8009376:	463b      	mov	r3, r7
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	429a      	cmp	r2, r3
 800937e:	f240 8330 	bls.w	80099e2 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009382:	1d3b      	adds	r3, r7, #4
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	463b      	mov	r3, r7
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	b29b      	uxth	r3, r3
 8009394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800939c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80093a0:	1d3b      	adds	r3, r7, #4
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	463b      	mov	r3, r7
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	441a      	add	r2, r3
 80093ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80093b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80093be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80093c6:	463b      	mov	r3, r7
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6a1a      	ldr	r2, [r3, #32]
 80093cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d0:	1ad2      	subs	r2, r2, r3
 80093d2:	463b      	mov	r3, r7
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80093d8:	1d3b      	adds	r3, r7, #4
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	463b      	mov	r3, r7
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 819e 	beq.w	8009730 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80093f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80093f8:	1d3a      	adds	r2, r7, #4
 80093fa:	6812      	ldr	r2, [r2, #0]
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	463b      	mov	r3, r7
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	785b      	ldrb	r3, [r3, #1]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d17a      	bne.n	80094fe <USB_EPStartXfer+0x24e>
 8009408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800940c:	1d3a      	adds	r2, r7, #4
 800940e:	6812      	ldr	r2, [r2, #0]
 8009410:	601a      	str	r2, [r3, #0]
 8009412:	1d3b      	adds	r3, r7, #4
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800941a:	b29b      	uxth	r3, r3
 800941c:	4619      	mov	r1, r3
 800941e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009422:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009426:	6812      	ldr	r2, [r2, #0]
 8009428:	440a      	add	r2, r1
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	463b      	mov	r3, r7
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	011a      	lsls	r2, r3, #4
 8009434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4413      	add	r3, r2
 800943c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800944a:	2b00      	cmp	r3, #0
 800944c:	d11a      	bne.n	8009484 <USB_EPStartXfer+0x1d4>
 800944e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	b29b      	uxth	r3, r3
 8009458:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800945c:	b29a      	uxth	r2, r3
 800945e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	801a      	strh	r2, [r3, #0]
 8009466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	b29b      	uxth	r3, r3
 8009470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009478:	b29a      	uxth	r2, r3
 800947a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	801a      	strh	r2, [r3, #0]
 8009482:	e062      	b.n	800954a <USB_EPStartXfer+0x29a>
 8009484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009488:	2b3e      	cmp	r3, #62	; 0x3e
 800948a:	d819      	bhi.n	80094c0 <USB_EPStartXfer+0x210>
 800948c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009490:	085b      	lsrs	r3, r3, #1
 8009492:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d004      	beq.n	80094ac <USB_EPStartXfer+0x1fc>
 80094a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094a6:	3301      	adds	r3, #1
 80094a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80094ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	029b      	lsls	r3, r3, #10
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	e044      	b.n	800954a <USB_EPStartXfer+0x29a>
 80094c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094c4:	095b      	lsrs	r3, r3, #5
 80094c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80094ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ce:	f003 031f 	and.w	r3, r3, #31
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d104      	bne.n	80094e0 <USB_EPStartXfer+0x230>
 80094d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094da:	3b01      	subs	r3, #1
 80094dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80094e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	029b      	lsls	r3, r3, #10
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	801a      	strh	r2, [r3, #0]
 80094fc:	e025      	b.n	800954a <USB_EPStartXfer+0x29a>
 80094fe:	463b      	mov	r3, r7
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	785b      	ldrb	r3, [r3, #1]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d120      	bne.n	800954a <USB_EPStartXfer+0x29a>
 8009508:	1d3b      	adds	r3, r7, #4
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009510:	b29b      	uxth	r3, r3
 8009512:	4619      	mov	r1, r3
 8009514:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009518:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800951c:	6812      	ldr	r2, [r2, #0]
 800951e:	440a      	add	r2, r1
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	463b      	mov	r3, r7
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	011a      	lsls	r2, r3, #4
 800952a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4413      	add	r3, r2
 8009532:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009540:	b29a      	uxth	r2, r3
 8009542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800954a:	463b      	mov	r3, r7
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	895b      	ldrh	r3, [r3, #10]
 8009550:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009554:	463b      	mov	r3, r7
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6959      	ldr	r1, [r3, #20]
 800955a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800955e:	b29b      	uxth	r3, r3
 8009560:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009564:	1d38      	adds	r0, r7, #4
 8009566:	6800      	ldr	r0, [r0, #0]
 8009568:	f001 fad7 	bl	800ab1a <USB_WritePMA>
            ep->xfer_buff += len;
 800956c:	463b      	mov	r3, r7
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	695a      	ldr	r2, [r3, #20]
 8009572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009576:	441a      	add	r2, r3
 8009578:	463b      	mov	r3, r7
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800957e:	463b      	mov	r3, r7
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6a1a      	ldr	r2, [r3, #32]
 8009584:	463b      	mov	r3, r7
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	429a      	cmp	r2, r3
 800958c:	d909      	bls.n	80095a2 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800958e:	463b      	mov	r3, r7
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6a1a      	ldr	r2, [r3, #32]
 8009594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009598:	1ad2      	subs	r2, r2, r3
 800959a:	463b      	mov	r3, r7
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	621a      	str	r2, [r3, #32]
 80095a0:	e008      	b.n	80095b4 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80095a2:	463b      	mov	r3, r7
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80095ac:	463b      	mov	r3, r7
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2200      	movs	r2, #0
 80095b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80095b4:	463b      	mov	r3, r7
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	785b      	ldrb	r3, [r3, #1]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d17a      	bne.n	80096b4 <USB_EPStartXfer+0x404>
 80095be:	f107 0318 	add.w	r3, r7, #24
 80095c2:	1d3a      	adds	r2, r7, #4
 80095c4:	6812      	ldr	r2, [r2, #0]
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	1d3b      	adds	r3, r7, #4
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	4619      	mov	r1, r3
 80095d4:	f107 0318 	add.w	r3, r7, #24
 80095d8:	f107 0218 	add.w	r2, r7, #24
 80095dc:	6812      	ldr	r2, [r2, #0]
 80095de:	440a      	add	r2, r1
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	463b      	mov	r3, r7
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	011a      	lsls	r2, r3, #4
 80095ea:	f107 0318 	add.w	r3, r7, #24
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4413      	add	r3, r2
 80095f2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80095f6:	f107 0314 	add.w	r3, r7, #20
 80095fa:	601a      	str	r2, [r3, #0]
 80095fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009600:	2b00      	cmp	r3, #0
 8009602:	d11a      	bne.n	800963a <USB_EPStartXfer+0x38a>
 8009604:	f107 0314 	add.w	r3, r7, #20
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	b29b      	uxth	r3, r3
 800960e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009612:	b29a      	uxth	r2, r3
 8009614:	f107 0314 	add.w	r3, r7, #20
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	801a      	strh	r2, [r3, #0]
 800961c:	f107 0314 	add.w	r3, r7, #20
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	b29b      	uxth	r3, r3
 8009626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800962a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800962e:	b29a      	uxth	r2, r3
 8009630:	f107 0314 	add.w	r3, r7, #20
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	801a      	strh	r2, [r3, #0]
 8009638:	e067      	b.n	800970a <USB_EPStartXfer+0x45a>
 800963a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800963e:	2b3e      	cmp	r3, #62	; 0x3e
 8009640:	d819      	bhi.n	8009676 <USB_EPStartXfer+0x3c6>
 8009642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009646:	085b      	lsrs	r3, r3, #1
 8009648:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800964c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	2b00      	cmp	r3, #0
 8009656:	d004      	beq.n	8009662 <USB_EPStartXfer+0x3b2>
 8009658:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800965c:	3301      	adds	r3, #1
 800965e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009662:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009666:	b29b      	uxth	r3, r3
 8009668:	029b      	lsls	r3, r3, #10
 800966a:	b29a      	uxth	r2, r3
 800966c:	f107 0314 	add.w	r3, r7, #20
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	801a      	strh	r2, [r3, #0]
 8009674:	e049      	b.n	800970a <USB_EPStartXfer+0x45a>
 8009676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800967a:	095b      	lsrs	r3, r3, #5
 800967c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009684:	f003 031f 	and.w	r3, r3, #31
 8009688:	2b00      	cmp	r3, #0
 800968a:	d104      	bne.n	8009696 <USB_EPStartXfer+0x3e6>
 800968c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009690:	3b01      	subs	r3, #1
 8009692:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009696:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800969a:	b29b      	uxth	r3, r3
 800969c:	029b      	lsls	r3, r3, #10
 800969e:	b29b      	uxth	r3, r3
 80096a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	f107 0314 	add.w	r3, r7, #20
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	801a      	strh	r2, [r3, #0]
 80096b2:	e02a      	b.n	800970a <USB_EPStartXfer+0x45a>
 80096b4:	463b      	mov	r3, r7
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	785b      	ldrb	r3, [r3, #1]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d125      	bne.n	800970a <USB_EPStartXfer+0x45a>
 80096be:	f107 0320 	add.w	r3, r7, #32
 80096c2:	1d3a      	adds	r2, r7, #4
 80096c4:	6812      	ldr	r2, [r2, #0]
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	1d3b      	adds	r3, r7, #4
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	4619      	mov	r1, r3
 80096d4:	f107 0320 	add.w	r3, r7, #32
 80096d8:	f107 0220 	add.w	r2, r7, #32
 80096dc:	6812      	ldr	r2, [r2, #0]
 80096de:	440a      	add	r2, r1
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	463b      	mov	r3, r7
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	011a      	lsls	r2, r3, #4
 80096ea:	f107 0320 	add.w	r3, r7, #32
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4413      	add	r3, r2
 80096f2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80096f6:	f107 031c 	add.w	r3, r7, #28
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009700:	b29a      	uxth	r2, r3
 8009702:	f107 031c 	add.w	r3, r7, #28
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800970a:	463b      	mov	r3, r7
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	891b      	ldrh	r3, [r3, #8]
 8009710:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009714:	463b      	mov	r3, r7
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6959      	ldr	r1, [r3, #20]
 800971a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800971e:	b29b      	uxth	r3, r3
 8009720:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009724:	1d38      	adds	r0, r7, #4
 8009726:	6800      	ldr	r0, [r0, #0]
 8009728:	f001 f9f7 	bl	800ab1a <USB_WritePMA>
 800972c:	f000 bcc6 	b.w	800a0bc <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009730:	463b      	mov	r3, r7
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	785b      	ldrb	r3, [r3, #1]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d164      	bne.n	8009804 <USB_EPStartXfer+0x554>
 800973a:	1d3b      	adds	r3, r7, #4
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009740:	1d3b      	adds	r3, r7, #4
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009748:	b29b      	uxth	r3, r3
 800974a:	461a      	mov	r2, r3
 800974c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800974e:	4413      	add	r3, r2
 8009750:	64bb      	str	r3, [r7, #72]	; 0x48
 8009752:	463b      	mov	r3, r7
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	011a      	lsls	r2, r3, #4
 800975a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800975c:	4413      	add	r3, r2
 800975e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009762:	647b      	str	r3, [r7, #68]	; 0x44
 8009764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009768:	2b00      	cmp	r3, #0
 800976a:	d112      	bne.n	8009792 <USB_EPStartXfer+0x4e2>
 800976c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800976e:	881b      	ldrh	r3, [r3, #0]
 8009770:	b29b      	uxth	r3, r3
 8009772:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009776:	b29a      	uxth	r2, r3
 8009778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800977a:	801a      	strh	r2, [r3, #0]
 800977c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	b29b      	uxth	r3, r3
 8009782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800978a:	b29a      	uxth	r2, r3
 800978c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800978e:	801a      	strh	r2, [r3, #0]
 8009790:	e057      	b.n	8009842 <USB_EPStartXfer+0x592>
 8009792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009796:	2b3e      	cmp	r3, #62	; 0x3e
 8009798:	d817      	bhi.n	80097ca <USB_EPStartXfer+0x51a>
 800979a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800979e:	085b      	lsrs	r3, r3, #1
 80097a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80097a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097a8:	f003 0301 	and.w	r3, r3, #1
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d004      	beq.n	80097ba <USB_EPStartXfer+0x50a>
 80097b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097b4:	3301      	adds	r3, #1
 80097b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80097ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097be:	b29b      	uxth	r3, r3
 80097c0:	029b      	lsls	r3, r3, #10
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c6:	801a      	strh	r2, [r3, #0]
 80097c8:	e03b      	b.n	8009842 <USB_EPStartXfer+0x592>
 80097ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ce:	095b      	lsrs	r3, r3, #5
 80097d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80097d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097d8:	f003 031f 	and.w	r3, r3, #31
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d104      	bne.n	80097ea <USB_EPStartXfer+0x53a>
 80097e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097e4:	3b01      	subs	r3, #1
 80097e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80097ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	029b      	lsls	r3, r3, #10
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009800:	801a      	strh	r2, [r3, #0]
 8009802:	e01e      	b.n	8009842 <USB_EPStartXfer+0x592>
 8009804:	463b      	mov	r3, r7
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	785b      	ldrb	r3, [r3, #1]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d119      	bne.n	8009842 <USB_EPStartXfer+0x592>
 800980e:	1d3b      	adds	r3, r7, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	653b      	str	r3, [r7, #80]	; 0x50
 8009814:	1d3b      	adds	r3, r7, #4
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800981c:	b29b      	uxth	r3, r3
 800981e:	461a      	mov	r2, r3
 8009820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009822:	4413      	add	r3, r2
 8009824:	653b      	str	r3, [r7, #80]	; 0x50
 8009826:	463b      	mov	r3, r7
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	011a      	lsls	r2, r3, #4
 800982e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009830:	4413      	add	r3, r2
 8009832:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800983c:	b29a      	uxth	r2, r3
 800983e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009840:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009842:	463b      	mov	r3, r7
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	891b      	ldrh	r3, [r3, #8]
 8009848:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800984c:	463b      	mov	r3, r7
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6959      	ldr	r1, [r3, #20]
 8009852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009856:	b29b      	uxth	r3, r3
 8009858:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800985c:	1d38      	adds	r0, r7, #4
 800985e:	6800      	ldr	r0, [r0, #0]
 8009860:	f001 f95b 	bl	800ab1a <USB_WritePMA>
            ep->xfer_buff += len;
 8009864:	463b      	mov	r3, r7
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	695a      	ldr	r2, [r3, #20]
 800986a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800986e:	441a      	add	r2, r3
 8009870:	463b      	mov	r3, r7
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009876:	463b      	mov	r3, r7
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6a1a      	ldr	r2, [r3, #32]
 800987c:	463b      	mov	r3, r7
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	429a      	cmp	r2, r3
 8009884:	d909      	bls.n	800989a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8009886:	463b      	mov	r3, r7
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6a1a      	ldr	r2, [r3, #32]
 800988c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009890:	1ad2      	subs	r2, r2, r3
 8009892:	463b      	mov	r3, r7
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	621a      	str	r2, [r3, #32]
 8009898:	e008      	b.n	80098ac <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800989a:	463b      	mov	r3, r7
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80098a4:	463b      	mov	r3, r7
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2200      	movs	r2, #0
 80098aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098ac:	1d3b      	adds	r3, r7, #4
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	643b      	str	r3, [r7, #64]	; 0x40
 80098b2:	463b      	mov	r3, r7
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	785b      	ldrb	r3, [r3, #1]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d164      	bne.n	8009986 <USB_EPStartXfer+0x6d6>
 80098bc:	1d3b      	adds	r3, r7, #4
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80098c2:	1d3b      	adds	r3, r7, #4
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	461a      	mov	r2, r3
 80098ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d0:	4413      	add	r3, r2
 80098d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80098d4:	463b      	mov	r3, r7
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	011a      	lsls	r2, r3, #4
 80098dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098de:	4413      	add	r3, r2
 80098e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098e4:	637b      	str	r3, [r7, #52]	; 0x34
 80098e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d112      	bne.n	8009914 <USB_EPStartXfer+0x664>
 80098ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fc:	801a      	strh	r2, [r3, #0]
 80098fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	b29b      	uxth	r3, r3
 8009904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800990c:	b29a      	uxth	r2, r3
 800990e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009910:	801a      	strh	r2, [r3, #0]
 8009912:	e054      	b.n	80099be <USB_EPStartXfer+0x70e>
 8009914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009918:	2b3e      	cmp	r3, #62	; 0x3e
 800991a:	d817      	bhi.n	800994c <USB_EPStartXfer+0x69c>
 800991c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009920:	085b      	lsrs	r3, r3, #1
 8009922:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d004      	beq.n	800993c <USB_EPStartXfer+0x68c>
 8009932:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009936:	3301      	adds	r3, #1
 8009938:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800993c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009940:	b29b      	uxth	r3, r3
 8009942:	029b      	lsls	r3, r3, #10
 8009944:	b29a      	uxth	r2, r3
 8009946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009948:	801a      	strh	r2, [r3, #0]
 800994a:	e038      	b.n	80099be <USB_EPStartXfer+0x70e>
 800994c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009950:	095b      	lsrs	r3, r3, #5
 8009952:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800995a:	f003 031f 	and.w	r3, r3, #31
 800995e:	2b00      	cmp	r3, #0
 8009960:	d104      	bne.n	800996c <USB_EPStartXfer+0x6bc>
 8009962:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009966:	3b01      	subs	r3, #1
 8009968:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800996c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009970:	b29b      	uxth	r3, r3
 8009972:	029b      	lsls	r3, r3, #10
 8009974:	b29b      	uxth	r3, r3
 8009976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800997a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800997e:	b29a      	uxth	r2, r3
 8009980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009982:	801a      	strh	r2, [r3, #0]
 8009984:	e01b      	b.n	80099be <USB_EPStartXfer+0x70e>
 8009986:	463b      	mov	r3, r7
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	785b      	ldrb	r3, [r3, #1]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d116      	bne.n	80099be <USB_EPStartXfer+0x70e>
 8009990:	1d3b      	adds	r3, r7, #4
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009998:	b29b      	uxth	r3, r3
 800999a:	461a      	mov	r2, r3
 800999c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800999e:	4413      	add	r3, r2
 80099a0:	643b      	str	r3, [r7, #64]	; 0x40
 80099a2:	463b      	mov	r3, r7
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	011a      	lsls	r2, r3, #4
 80099aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099ac:	4413      	add	r3, r2
 80099ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80099be:	463b      	mov	r3, r7
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	895b      	ldrh	r3, [r3, #10]
 80099c4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099c8:	463b      	mov	r3, r7
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6959      	ldr	r1, [r3, #20]
 80099ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80099d8:	1d38      	adds	r0, r7, #4
 80099da:	6800      	ldr	r0, [r0, #0]
 80099dc:	f001 f89d 	bl	800ab1a <USB_WritePMA>
 80099e0:	e36c      	b.n	800a0bc <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80099e2:	463b      	mov	r3, r7
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6a1b      	ldr	r3, [r3, #32]
 80099e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80099ec:	1d3b      	adds	r3, r7, #4
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	463b      	mov	r3, r7
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a06:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009a0a:	1d3b      	adds	r3, r7, #4
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	463b      	mov	r3, r7
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	441a      	add	r2, r3
 8009a18:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009a30:	1d3b      	adds	r3, r7, #4
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a36:	1d3b      	adds	r3, r7, #4
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	461a      	mov	r2, r3
 8009a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a44:	4413      	add	r3, r2
 8009a46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a48:	463b      	mov	r3, r7
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	011a      	lsls	r2, r3, #4
 8009a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a52:	4413      	add	r3, r2
 8009a54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a58:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009a64:	463b      	mov	r3, r7
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	891b      	ldrh	r3, [r3, #8]
 8009a6a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a6e:	463b      	mov	r3, r7
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6959      	ldr	r1, [r3, #20]
 8009a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a7e:	1d38      	adds	r0, r7, #4
 8009a80:	6800      	ldr	r0, [r0, #0]
 8009a82:	f001 f84a 	bl	800ab1a <USB_WritePMA>
 8009a86:	e319      	b.n	800a0bc <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009a88:	1d3b      	adds	r3, r7, #4
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	463b      	mov	r3, r7
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aa2:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009aa6:	1d3b      	adds	r3, r7, #4
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	463b      	mov	r3, r7
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	441a      	add	r2, r3
 8009ab4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ac0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009acc:	463b      	mov	r3, r7
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6a1a      	ldr	r2, [r3, #32]
 8009ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ad6:	1ad2      	subs	r2, r2, r3
 8009ad8:	463b      	mov	r3, r7
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009ade:	1d3b      	adds	r3, r7, #4
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	463b      	mov	r3, r7
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 8162 	beq.w	8009dbe <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009afa:	1d3b      	adds	r3, r7, #4
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b02:	463b      	mov	r3, r7
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	785b      	ldrb	r3, [r3, #1]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d164      	bne.n	8009bd6 <USB_EPStartXfer+0x926>
 8009b0c:	1d3b      	adds	r3, r7, #4
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b12:	1d3b      	adds	r3, r7, #4
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b20:	4413      	add	r3, r2
 8009b22:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b24:	463b      	mov	r3, r7
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	011a      	lsls	r2, r3, #4
 8009b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b2e:	4413      	add	r3, r2
 8009b30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b34:	677b      	str	r3, [r7, #116]	; 0x74
 8009b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d112      	bne.n	8009b64 <USB_EPStartXfer+0x8b4>
 8009b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b40:	881b      	ldrh	r3, [r3, #0]
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b4c:	801a      	strh	r2, [r3, #0]
 8009b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b60:	801a      	strh	r2, [r3, #0]
 8009b62:	e057      	b.n	8009c14 <USB_EPStartXfer+0x964>
 8009b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b68:	2b3e      	cmp	r3, #62	; 0x3e
 8009b6a:	d817      	bhi.n	8009b9c <USB_EPStartXfer+0x8ec>
 8009b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b70:	085b      	lsrs	r3, r3, #1
 8009b72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d004      	beq.n	8009b8c <USB_EPStartXfer+0x8dc>
 8009b82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009b86:	3301      	adds	r3, #1
 8009b88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009b8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	029b      	lsls	r3, r3, #10
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b98:	801a      	strh	r2, [r3, #0]
 8009b9a:	e03b      	b.n	8009c14 <USB_EPStartXfer+0x964>
 8009b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ba0:	095b      	lsrs	r3, r3, #5
 8009ba2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009baa:	f003 031f 	and.w	r3, r3, #31
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d104      	bne.n	8009bbc <USB_EPStartXfer+0x90c>
 8009bb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009bbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	029b      	lsls	r3, r3, #10
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bd2:	801a      	strh	r2, [r3, #0]
 8009bd4:	e01e      	b.n	8009c14 <USB_EPStartXfer+0x964>
 8009bd6:	463b      	mov	r3, r7
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	785b      	ldrb	r3, [r3, #1]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d119      	bne.n	8009c14 <USB_EPStartXfer+0x964>
 8009be0:	1d3b      	adds	r3, r7, #4
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	461a      	mov	r2, r3
 8009bec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bf6:	463b      	mov	r3, r7
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	011a      	lsls	r2, r3, #4
 8009bfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c02:	4413      	add	r3, r2
 8009c04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009c14:	463b      	mov	r3, r7
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	895b      	ldrh	r3, [r3, #10]
 8009c1a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c1e:	463b      	mov	r3, r7
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6959      	ldr	r1, [r3, #20]
 8009c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009c2e:	1d38      	adds	r0, r7, #4
 8009c30:	6800      	ldr	r0, [r0, #0]
 8009c32:	f000 ff72 	bl	800ab1a <USB_WritePMA>
          ep->xfer_buff += len;
 8009c36:	463b      	mov	r3, r7
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	695a      	ldr	r2, [r3, #20]
 8009c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c40:	441a      	add	r2, r3
 8009c42:	463b      	mov	r3, r7
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009c48:	463b      	mov	r3, r7
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6a1a      	ldr	r2, [r3, #32]
 8009c4e:	463b      	mov	r3, r7
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d909      	bls.n	8009c6c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8009c58:	463b      	mov	r3, r7
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6a1a      	ldr	r2, [r3, #32]
 8009c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c62:	1ad2      	subs	r2, r2, r3
 8009c64:	463b      	mov	r3, r7
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	621a      	str	r2, [r3, #32]
 8009c6a:	e008      	b.n	8009c7e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8009c6c:	463b      	mov	r3, r7
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009c76:	463b      	mov	r3, r7
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f000 821a 	beq.w	800a0bc <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c88:	463b      	mov	r3, r7
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	785b      	ldrb	r3, [r3, #1]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d164      	bne.n	8009d5c <USB_EPStartXfer+0xaac>
 8009c92:	1d3b      	adds	r3, r7, #4
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c98:	1d3b      	adds	r3, r7, #4
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ca6:	4413      	add	r3, r2
 8009ca8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009caa:	463b      	mov	r3, r7
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	011a      	lsls	r2, r3, #4
 8009cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009cba:	667b      	str	r3, [r7, #100]	; 0x64
 8009cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d112      	bne.n	8009cea <USB_EPStartXfer+0xa3a>
 8009cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cd2:	801a      	strh	r2, [r3, #0]
 8009cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cd6:	881b      	ldrh	r3, [r3, #0]
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ce6:	801a      	strh	r2, [r3, #0]
 8009ce8:	e057      	b.n	8009d9a <USB_EPStartXfer+0xaea>
 8009cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cee:	2b3e      	cmp	r3, #62	; 0x3e
 8009cf0:	d817      	bhi.n	8009d22 <USB_EPStartXfer+0xa72>
 8009cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cf6:	085b      	lsrs	r3, r3, #1
 8009cf8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d004      	beq.n	8009d12 <USB_EPStartXfer+0xa62>
 8009d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	029b      	lsls	r3, r3, #10
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d1e:	801a      	strh	r2, [r3, #0]
 8009d20:	e03b      	b.n	8009d9a <USB_EPStartXfer+0xaea>
 8009d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d26:	095b      	lsrs	r3, r3, #5
 8009d28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d30:	f003 031f 	and.w	r3, r3, #31
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d104      	bne.n	8009d42 <USB_EPStartXfer+0xa92>
 8009d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	029b      	lsls	r3, r3, #10
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d58:	801a      	strh	r2, [r3, #0]
 8009d5a:	e01e      	b.n	8009d9a <USB_EPStartXfer+0xaea>
 8009d5c:	463b      	mov	r3, r7
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	785b      	ldrb	r3, [r3, #1]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d119      	bne.n	8009d9a <USB_EPStartXfer+0xaea>
 8009d66:	1d3b      	adds	r3, r7, #4
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	673b      	str	r3, [r7, #112]	; 0x70
 8009d6c:	1d3b      	adds	r3, r7, #4
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	461a      	mov	r2, r3
 8009d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d7a:	4413      	add	r3, r2
 8009d7c:	673b      	str	r3, [r7, #112]	; 0x70
 8009d7e:	463b      	mov	r3, r7
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	011a      	lsls	r2, r3, #4
 8009d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d88:	4413      	add	r3, r2
 8009d8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d9a:	463b      	mov	r3, r7
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	891b      	ldrh	r3, [r3, #8]
 8009da0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009da4:	463b      	mov	r3, r7
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6959      	ldr	r1, [r3, #20]
 8009daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009db4:	1d38      	adds	r0, r7, #4
 8009db6:	6800      	ldr	r0, [r0, #0]
 8009db8:	f000 feaf 	bl	800ab1a <USB_WritePMA>
 8009dbc:	e17e      	b.n	800a0bc <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009dbe:	463b      	mov	r3, r7
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	785b      	ldrb	r3, [r3, #1]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d16f      	bne.n	8009ea8 <USB_EPStartXfer+0xbf8>
 8009dc8:	1d3b      	adds	r3, r7, #4
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009dd0:	1d3b      	adds	r3, r7, #4
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	461a      	mov	r2, r3
 8009ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009de0:	4413      	add	r3, r2
 8009de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009de6:	463b      	mov	r3, r7
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	011a      	lsls	r2, r3, #4
 8009dee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009df2:	4413      	add	r3, r2
 8009df4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d116      	bne.n	8009e32 <USB_EPStartXfer+0xb82>
 8009e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e16:	801a      	strh	r2, [r3, #0]
 8009e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e2e:	801a      	strh	r2, [r3, #0]
 8009e30:	e05f      	b.n	8009ef2 <USB_EPStartXfer+0xc42>
 8009e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e36:	2b3e      	cmp	r3, #62	; 0x3e
 8009e38:	d818      	bhi.n	8009e6c <USB_EPStartXfer+0xbbc>
 8009e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e3e:	085b      	lsrs	r3, r3, #1
 8009e40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d004      	beq.n	8009e5a <USB_EPStartXfer+0xbaa>
 8009e50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009e54:	3301      	adds	r3, #1
 8009e56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009e5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	029b      	lsls	r3, r3, #10
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e68:	801a      	strh	r2, [r3, #0]
 8009e6a:	e042      	b.n	8009ef2 <USB_EPStartXfer+0xc42>
 8009e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e70:	095b      	lsrs	r3, r3, #5
 8009e72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e7a:	f003 031f 	and.w	r3, r3, #31
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d104      	bne.n	8009e8c <USB_EPStartXfer+0xbdc>
 8009e82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009e86:	3b01      	subs	r3, #1
 8009e88:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009e8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	029b      	lsls	r3, r3, #10
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ea4:	801a      	strh	r2, [r3, #0]
 8009ea6:	e024      	b.n	8009ef2 <USB_EPStartXfer+0xc42>
 8009ea8:	463b      	mov	r3, r7
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	785b      	ldrb	r3, [r3, #1]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d11f      	bne.n	8009ef2 <USB_EPStartXfer+0xc42>
 8009eb2:	1d3b      	adds	r3, r7, #4
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009eba:	1d3b      	adds	r3, r7, #4
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009eca:	4413      	add	r3, r2
 8009ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009ed0:	463b      	mov	r3, r7
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	011a      	lsls	r2, r3, #4
 8009ed8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009edc:	4413      	add	r3, r2
 8009ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ef0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009ef2:	463b      	mov	r3, r7
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	891b      	ldrh	r3, [r3, #8]
 8009ef8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009efc:	463b      	mov	r3, r7
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	6959      	ldr	r1, [r3, #20]
 8009f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009f0c:	1d38      	adds	r0, r7, #4
 8009f0e:	6800      	ldr	r0, [r0, #0]
 8009f10:	f000 fe03 	bl	800ab1a <USB_WritePMA>
          ep->xfer_buff += len;
 8009f14:	463b      	mov	r3, r7
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	695a      	ldr	r2, [r3, #20]
 8009f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f1e:	441a      	add	r2, r3
 8009f20:	463b      	mov	r3, r7
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009f26:	463b      	mov	r3, r7
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6a1a      	ldr	r2, [r3, #32]
 8009f2c:	463b      	mov	r3, r7
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d909      	bls.n	8009f4a <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8009f36:	463b      	mov	r3, r7
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6a1a      	ldr	r2, [r3, #32]
 8009f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f40:	1ad2      	subs	r2, r2, r3
 8009f42:	463b      	mov	r3, r7
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	621a      	str	r2, [r3, #32]
 8009f48:	e008      	b.n	8009f5c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8009f4a:	463b      	mov	r3, r7
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	6a1b      	ldr	r3, [r3, #32]
 8009f50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009f54:	463b      	mov	r3, r7
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 80ab 	beq.w	800a0bc <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f66:	1d3b      	adds	r3, r7, #4
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f6e:	463b      	mov	r3, r7
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	785b      	ldrb	r3, [r3, #1]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d16f      	bne.n	800a058 <USB_EPStartXfer+0xda8>
 8009f78:	1d3b      	adds	r3, r7, #4
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f80:	1d3b      	adds	r3, r7, #4
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f90:	4413      	add	r3, r2
 8009f92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f96:	463b      	mov	r3, r7
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	011a      	lsls	r2, r3, #4
 8009f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d116      	bne.n	8009fe2 <USB_EPStartXfer+0xd32>
 8009fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fb8:	881b      	ldrh	r3, [r3, #0]
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fc6:	801a      	strh	r2, [r3, #0]
 8009fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fcc:	881b      	ldrh	r3, [r3, #0]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fde:	801a      	strh	r2, [r3, #0]
 8009fe0:	e05b      	b.n	800a09a <USB_EPStartXfer+0xdea>
 8009fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8009fe8:	d818      	bhi.n	800a01c <USB_EPStartXfer+0xd6c>
 8009fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fee:	085b      	lsrs	r3, r3, #1
 8009ff0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d004      	beq.n	800a00a <USB_EPStartXfer+0xd5a>
 800a000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a004:	3301      	adds	r3, #1
 800a006:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a00a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a00e:	b29b      	uxth	r3, r3
 800a010:	029b      	lsls	r3, r3, #10
 800a012:	b29a      	uxth	r2, r3
 800a014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a018:	801a      	strh	r2, [r3, #0]
 800a01a:	e03e      	b.n	800a09a <USB_EPStartXfer+0xdea>
 800a01c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a020:	095b      	lsrs	r3, r3, #5
 800a022:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a02a:	f003 031f 	and.w	r3, r3, #31
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d104      	bne.n	800a03c <USB_EPStartXfer+0xd8c>
 800a032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a036:	3b01      	subs	r3, #1
 800a038:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a03c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a040:	b29b      	uxth	r3, r3
 800a042:	029b      	lsls	r3, r3, #10
 800a044:	b29b      	uxth	r3, r3
 800a046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a04a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a04e:	b29a      	uxth	r2, r3
 800a050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a054:	801a      	strh	r2, [r3, #0]
 800a056:	e020      	b.n	800a09a <USB_EPStartXfer+0xdea>
 800a058:	463b      	mov	r3, r7
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	785b      	ldrb	r3, [r3, #1]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d11b      	bne.n	800a09a <USB_EPStartXfer+0xdea>
 800a062:	1d3b      	adds	r3, r7, #4
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	461a      	mov	r2, r3
 800a06e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a072:	4413      	add	r3, r2
 800a074:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a078:	463b      	mov	r3, r7
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	011a      	lsls	r2, r3, #4
 800a080:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a084:	4413      	add	r3, r2
 800a086:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a08a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a08e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a092:	b29a      	uxth	r2, r3
 800a094:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a098:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a09a:	463b      	mov	r3, r7
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	895b      	ldrh	r3, [r3, #10]
 800a0a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0a4:	463b      	mov	r3, r7
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6959      	ldr	r1, [r3, #20]
 800a0aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a0b4:	1d38      	adds	r0, r7, #4
 800a0b6:	6800      	ldr	r0, [r0, #0]
 800a0b8:	f000 fd2f 	bl	800ab1a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a0bc:	1d3b      	adds	r3, r7, #4
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	463b      	mov	r3, r7
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	f107 020a 	add.w	r2, r7, #10
 800a0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0da:	8013      	strh	r3, [r2, #0]
 800a0dc:	f107 030a 	add.w	r3, r7, #10
 800a0e0:	f107 020a 	add.w	r2, r7, #10
 800a0e4:	8812      	ldrh	r2, [r2, #0]
 800a0e6:	f082 0210 	eor.w	r2, r2, #16
 800a0ea:	801a      	strh	r2, [r3, #0]
 800a0ec:	f107 030a 	add.w	r3, r7, #10
 800a0f0:	f107 020a 	add.w	r2, r7, #10
 800a0f4:	8812      	ldrh	r2, [r2, #0]
 800a0f6:	f082 0220 	eor.w	r2, r2, #32
 800a0fa:	801a      	strh	r2, [r3, #0]
 800a0fc:	1d3b      	adds	r3, r7, #4
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	463b      	mov	r3, r7
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	441a      	add	r2, r3
 800a10a:	f107 030a 	add.w	r3, r7, #10
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a120:	b29b      	uxth	r3, r3
 800a122:	8013      	strh	r3, [r2, #0]
 800a124:	e3b5      	b.n	800a892 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a126:	463b      	mov	r3, r7
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	7b1b      	ldrb	r3, [r3, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f040 8090 	bne.w	800a252 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a132:	463b      	mov	r3, r7
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	699a      	ldr	r2, [r3, #24]
 800a138:	463b      	mov	r3, r7
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d90e      	bls.n	800a160 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800a142:	463b      	mov	r3, r7
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800a14c:	463b      	mov	r3, r7
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	699a      	ldr	r2, [r3, #24]
 800a152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a156:	1ad2      	subs	r2, r2, r3
 800a158:	463b      	mov	r3, r7
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	619a      	str	r2, [r3, #24]
 800a15e:	e008      	b.n	800a172 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800a160:	463b      	mov	r3, r7
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800a16a:	463b      	mov	r3, r7
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2200      	movs	r2, #0
 800a170:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a172:	1d3b      	adds	r3, r7, #4
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a17a:	1d3b      	adds	r3, r7, #4
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a182:	b29b      	uxth	r3, r3
 800a184:	461a      	mov	r2, r3
 800a186:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a18a:	4413      	add	r3, r2
 800a18c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a190:	463b      	mov	r3, r7
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	011a      	lsls	r2, r3, #4
 800a198:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a19c:	4413      	add	r3, r2
 800a19e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a1a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a1a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d116      	bne.n	800a1dc <USB_EPStartXfer+0xf2c>
 800a1ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1c0:	801a      	strh	r2, [r3, #0]
 800a1c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1d8:	801a      	strh	r2, [r3, #0]
 800a1da:	e32c      	b.n	800a836 <USB_EPStartXfer+0x1586>
 800a1dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1e0:	2b3e      	cmp	r3, #62	; 0x3e
 800a1e2:	d818      	bhi.n	800a216 <USB_EPStartXfer+0xf66>
 800a1e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1e8:	085b      	lsrs	r3, r3, #1
 800a1ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a1ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1f2:	f003 0301 	and.w	r3, r3, #1
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d004      	beq.n	800a204 <USB_EPStartXfer+0xf54>
 800a1fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1fe:	3301      	adds	r3, #1
 800a200:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a204:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a208:	b29b      	uxth	r3, r3
 800a20a:	029b      	lsls	r3, r3, #10
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a212:	801a      	strh	r2, [r3, #0]
 800a214:	e30f      	b.n	800a836 <USB_EPStartXfer+0x1586>
 800a216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a21a:	095b      	lsrs	r3, r3, #5
 800a21c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a224:	f003 031f 	and.w	r3, r3, #31
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d104      	bne.n	800a236 <USB_EPStartXfer+0xf86>
 800a22c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a230:	3b01      	subs	r3, #1
 800a232:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a236:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	029b      	lsls	r3, r3, #10
 800a23e:	b29b      	uxth	r3, r3
 800a240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a248:	b29a      	uxth	r2, r3
 800a24a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a24e:	801a      	strh	r2, [r3, #0]
 800a250:	e2f1      	b.n	800a836 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a252:	463b      	mov	r3, r7
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	78db      	ldrb	r3, [r3, #3]
 800a258:	2b02      	cmp	r3, #2
 800a25a:	f040 818f 	bne.w	800a57c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a25e:	463b      	mov	r3, r7
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	785b      	ldrb	r3, [r3, #1]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d175      	bne.n	800a354 <USB_EPStartXfer+0x10a4>
 800a268:	1d3b      	adds	r3, r7, #4
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a270:	1d3b      	adds	r3, r7, #4
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a278:	b29b      	uxth	r3, r3
 800a27a:	461a      	mov	r2, r3
 800a27c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a280:	4413      	add	r3, r2
 800a282:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a286:	463b      	mov	r3, r7
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	011a      	lsls	r2, r3, #4
 800a28e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a292:	4413      	add	r3, r2
 800a294:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a298:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a29c:	463b      	mov	r3, r7
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d116      	bne.n	800a2d4 <USB_EPStartXfer+0x1024>
 800a2a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2b8:	801a      	strh	r2, [r3, #0]
 800a2ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2d0:	801a      	strh	r2, [r3, #0]
 800a2d2:	e065      	b.n	800a3a0 <USB_EPStartXfer+0x10f0>
 800a2d4:	463b      	mov	r3, r7
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	2b3e      	cmp	r3, #62	; 0x3e
 800a2dc:	d81a      	bhi.n	800a314 <USB_EPStartXfer+0x1064>
 800a2de:	463b      	mov	r3, r7
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	085b      	lsrs	r3, r3, #1
 800a2e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a2ea:	463b      	mov	r3, r7
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d004      	beq.n	800a302 <USB_EPStartXfer+0x1052>
 800a2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a306:	b29b      	uxth	r3, r3
 800a308:	029b      	lsls	r3, r3, #10
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a310:	801a      	strh	r2, [r3, #0]
 800a312:	e045      	b.n	800a3a0 <USB_EPStartXfer+0x10f0>
 800a314:	463b      	mov	r3, r7
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	095b      	lsrs	r3, r3, #5
 800a31c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a320:	463b      	mov	r3, r7
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	f003 031f 	and.w	r3, r3, #31
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d104      	bne.n	800a338 <USB_EPStartXfer+0x1088>
 800a32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a332:	3b01      	subs	r3, #1
 800a334:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	029b      	lsls	r3, r3, #10
 800a340:	b29b      	uxth	r3, r3
 800a342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a350:	801a      	strh	r2, [r3, #0]
 800a352:	e025      	b.n	800a3a0 <USB_EPStartXfer+0x10f0>
 800a354:	463b      	mov	r3, r7
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	785b      	ldrb	r3, [r3, #1]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d120      	bne.n	800a3a0 <USB_EPStartXfer+0x10f0>
 800a35e:	1d3b      	adds	r3, r7, #4
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a366:	1d3b      	adds	r3, r7, #4
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a36e:	b29b      	uxth	r3, r3
 800a370:	461a      	mov	r2, r3
 800a372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a376:	4413      	add	r3, r2
 800a378:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a37c:	463b      	mov	r3, r7
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	011a      	lsls	r2, r3, #4
 800a384:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a388:	4413      	add	r3, r2
 800a38a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a38e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a392:	463b      	mov	r3, r7
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	b29a      	uxth	r2, r3
 800a39a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a39e:	801a      	strh	r2, [r3, #0]
 800a3a0:	1d3b      	adds	r3, r7, #4
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3a8:	463b      	mov	r3, r7
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	785b      	ldrb	r3, [r3, #1]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d175      	bne.n	800a49e <USB_EPStartXfer+0x11ee>
 800a3b2:	1d3b      	adds	r3, r7, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a3ba:	1d3b      	adds	r3, r7, #4
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a3d0:	463b      	mov	r3, r7
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	011a      	lsls	r2, r3, #4
 800a3d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a3dc:	4413      	add	r3, r2
 800a3de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a3e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a3e6:	463b      	mov	r3, r7
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d116      	bne.n	800a41e <USB_EPStartXfer+0x116e>
 800a3f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a402:	801a      	strh	r2, [r3, #0]
 800a404:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a414:	b29a      	uxth	r2, r3
 800a416:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a41a:	801a      	strh	r2, [r3, #0]
 800a41c:	e061      	b.n	800a4e2 <USB_EPStartXfer+0x1232>
 800a41e:	463b      	mov	r3, r7
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	2b3e      	cmp	r3, #62	; 0x3e
 800a426:	d81a      	bhi.n	800a45e <USB_EPStartXfer+0x11ae>
 800a428:	463b      	mov	r3, r7
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	085b      	lsrs	r3, r3, #1
 800a430:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a434:	463b      	mov	r3, r7
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d004      	beq.n	800a44c <USB_EPStartXfer+0x119c>
 800a442:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a446:	3301      	adds	r3, #1
 800a448:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a44c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a450:	b29b      	uxth	r3, r3
 800a452:	029b      	lsls	r3, r3, #10
 800a454:	b29a      	uxth	r2, r3
 800a456:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a45a:	801a      	strh	r2, [r3, #0]
 800a45c:	e041      	b.n	800a4e2 <USB_EPStartXfer+0x1232>
 800a45e:	463b      	mov	r3, r7
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	095b      	lsrs	r3, r3, #5
 800a466:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a46a:	463b      	mov	r3, r7
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	f003 031f 	and.w	r3, r3, #31
 800a474:	2b00      	cmp	r3, #0
 800a476:	d104      	bne.n	800a482 <USB_EPStartXfer+0x11d2>
 800a478:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a47c:	3b01      	subs	r3, #1
 800a47e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a482:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a486:	b29b      	uxth	r3, r3
 800a488:	029b      	lsls	r3, r3, #10
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a494:	b29a      	uxth	r2, r3
 800a496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a49a:	801a      	strh	r2, [r3, #0]
 800a49c:	e021      	b.n	800a4e2 <USB_EPStartXfer+0x1232>
 800a49e:	463b      	mov	r3, r7
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	785b      	ldrb	r3, [r3, #1]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d11c      	bne.n	800a4e2 <USB_EPStartXfer+0x1232>
 800a4a8:	1d3b      	adds	r3, r7, #4
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a4b8:	4413      	add	r3, r2
 800a4ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4be:	463b      	mov	r3, r7
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	011a      	lsls	r2, r3, #4
 800a4c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a4e2:	463b      	mov	r3, r7
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	69db      	ldr	r3, [r3, #28]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f000 81a4 	beq.w	800a836 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a4ee:	1d3b      	adds	r3, r7, #4
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	463b      	mov	r3, r7
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	881b      	ldrh	r3, [r3, #0]
 800a4fe:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a502:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d005      	beq.n	800a51a <USB_EPStartXfer+0x126a>
 800a50e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10d      	bne.n	800a536 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a51a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a51e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a522:	2b00      	cmp	r3, #0
 800a524:	f040 8187 	bne.w	800a836 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a528:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a530:	2b00      	cmp	r3, #0
 800a532:	f040 8180 	bne.w	800a836 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a536:	1d3b      	adds	r3, r7, #4
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	463b      	mov	r3, r7
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	b29b      	uxth	r3, r3
 800a548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a54c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a550:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a554:	1d3b      	adds	r3, r7, #4
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	463b      	mov	r3, r7
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	441a      	add	r2, r3
 800a562:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a56a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a56e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a572:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a576:	b29b      	uxth	r3, r3
 800a578:	8013      	strh	r3, [r2, #0]
 800a57a:	e15c      	b.n	800a836 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a57c:	463b      	mov	r3, r7
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	78db      	ldrb	r3, [r3, #3]
 800a582:	2b01      	cmp	r3, #1
 800a584:	f040 8155 	bne.w	800a832 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a588:	463b      	mov	r3, r7
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	699a      	ldr	r2, [r3, #24]
 800a58e:	463b      	mov	r3, r7
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	429a      	cmp	r2, r3
 800a596:	d90e      	bls.n	800a5b6 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800a598:	463b      	mov	r3, r7
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a5a2:	463b      	mov	r3, r7
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	699a      	ldr	r2, [r3, #24]
 800a5a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5ac:	1ad2      	subs	r2, r2, r3
 800a5ae:	463b      	mov	r3, r7
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	619a      	str	r2, [r3, #24]
 800a5b4:	e008      	b.n	800a5c8 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800a5b6:	463b      	mov	r3, r7
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a5c0:	463b      	mov	r3, r7
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a5c8:	463b      	mov	r3, r7
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	785b      	ldrb	r3, [r3, #1]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d16f      	bne.n	800a6b2 <USB_EPStartXfer+0x1402>
 800a5d2:	1d3b      	adds	r3, r7, #4
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a5da:	1d3b      	adds	r3, r7, #4
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a5ea:	4413      	add	r3, r2
 800a5ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a5f0:	463b      	mov	r3, r7
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	011a      	lsls	r2, r3, #4
 800a5f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a602:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d116      	bne.n	800a63c <USB_EPStartXfer+0x138c>
 800a60e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	b29b      	uxth	r3, r3
 800a616:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a620:	801a      	strh	r2, [r3, #0]
 800a622:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a62e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a632:	b29a      	uxth	r2, r3
 800a634:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a638:	801a      	strh	r2, [r3, #0]
 800a63a:	e05f      	b.n	800a6fc <USB_EPStartXfer+0x144c>
 800a63c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a640:	2b3e      	cmp	r3, #62	; 0x3e
 800a642:	d818      	bhi.n	800a676 <USB_EPStartXfer+0x13c6>
 800a644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a648:	085b      	lsrs	r3, r3, #1
 800a64a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a64e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b00      	cmp	r3, #0
 800a658:	d004      	beq.n	800a664 <USB_EPStartXfer+0x13b4>
 800a65a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a65e:	3301      	adds	r3, #1
 800a660:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a668:	b29b      	uxth	r3, r3
 800a66a:	029b      	lsls	r3, r3, #10
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a672:	801a      	strh	r2, [r3, #0]
 800a674:	e042      	b.n	800a6fc <USB_EPStartXfer+0x144c>
 800a676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a67a:	095b      	lsrs	r3, r3, #5
 800a67c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a684:	f003 031f 	and.w	r3, r3, #31
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d104      	bne.n	800a696 <USB_EPStartXfer+0x13e6>
 800a68c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a690:	3b01      	subs	r3, #1
 800a692:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	029b      	lsls	r3, r3, #10
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6ae:	801a      	strh	r2, [r3, #0]
 800a6b0:	e024      	b.n	800a6fc <USB_EPStartXfer+0x144c>
 800a6b2:	463b      	mov	r3, r7
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	785b      	ldrb	r3, [r3, #1]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d11f      	bne.n	800a6fc <USB_EPStartXfer+0x144c>
 800a6bc:	1d3b      	adds	r3, r7, #4
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a6c4:	1d3b      	adds	r3, r7, #4
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a6da:	463b      	mov	r3, r7
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	011a      	lsls	r2, r3, #4
 800a6e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a6ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a6f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a6fa:	801a      	strh	r2, [r3, #0]
 800a6fc:	1d3b      	adds	r3, r7, #4
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a704:	463b      	mov	r3, r7
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	785b      	ldrb	r3, [r3, #1]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d16f      	bne.n	800a7ee <USB_EPStartXfer+0x153e>
 800a70e:	1d3b      	adds	r3, r7, #4
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a716:	1d3b      	adds	r3, r7, #4
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a71e:	b29b      	uxth	r3, r3
 800a720:	461a      	mov	r2, r3
 800a722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a726:	4413      	add	r3, r2
 800a728:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a72c:	463b      	mov	r3, r7
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	011a      	lsls	r2, r3, #4
 800a734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a738:	4413      	add	r3, r2
 800a73a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a73e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a746:	2b00      	cmp	r3, #0
 800a748:	d116      	bne.n	800a778 <USB_EPStartXfer+0x14c8>
 800a74a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	b29b      	uxth	r3, r3
 800a752:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a756:	b29a      	uxth	r2, r3
 800a758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a75c:	801a      	strh	r2, [r3, #0]
 800a75e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a762:	881b      	ldrh	r3, [r3, #0]
 800a764:	b29b      	uxth	r3, r3
 800a766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a76a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a76e:	b29a      	uxth	r2, r3
 800a770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a774:	801a      	strh	r2, [r3, #0]
 800a776:	e05e      	b.n	800a836 <USB_EPStartXfer+0x1586>
 800a778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a77c:	2b3e      	cmp	r3, #62	; 0x3e
 800a77e:	d818      	bhi.n	800a7b2 <USB_EPStartXfer+0x1502>
 800a780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a784:	085b      	lsrs	r3, r3, #1
 800a786:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a78a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	2b00      	cmp	r3, #0
 800a794:	d004      	beq.n	800a7a0 <USB_EPStartXfer+0x14f0>
 800a796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a79a:	3301      	adds	r3, #1
 800a79c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	029b      	lsls	r3, r3, #10
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7ae:	801a      	strh	r2, [r3, #0]
 800a7b0:	e041      	b.n	800a836 <USB_EPStartXfer+0x1586>
 800a7b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7b6:	095b      	lsrs	r3, r3, #5
 800a7b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7c0:	f003 031f 	and.w	r3, r3, #31
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d104      	bne.n	800a7d2 <USB_EPStartXfer+0x1522>
 800a7c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	029b      	lsls	r3, r3, #10
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7ea:	801a      	strh	r2, [r3, #0]
 800a7ec:	e023      	b.n	800a836 <USB_EPStartXfer+0x1586>
 800a7ee:	463b      	mov	r3, r7
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	785b      	ldrb	r3, [r3, #1]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d11e      	bne.n	800a836 <USB_EPStartXfer+0x1586>
 800a7f8:	1d3b      	adds	r3, r7, #4
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a800:	b29b      	uxth	r3, r3
 800a802:	461a      	mov	r2, r3
 800a804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a808:	4413      	add	r3, r2
 800a80a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a80e:	463b      	mov	r3, r7
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	011a      	lsls	r2, r3, #4
 800a816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a81a:	4413      	add	r3, r2
 800a81c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a828:	b29a      	uxth	r2, r3
 800a82a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a82e:	801a      	strh	r2, [r3, #0]
 800a830:	e001      	b.n	800a836 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	e02e      	b.n	800a894 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a836:	1d3b      	adds	r3, r7, #4
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	463b      	mov	r3, r7
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4413      	add	r3, r2
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	b29b      	uxth	r3, r3
 800a848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a84c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a850:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a854:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a858:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a85c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a860:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a864:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a868:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a86c:	1d3b      	adds	r3, r7, #4
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	463b      	mov	r3, r7
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	441a      	add	r2, r3
 800a87a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a87e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a88a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a88e:	b29b      	uxth	r3, r3
 800a890:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b085      	sub	sp, #20
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	785b      	ldrb	r3, [r3, #1]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d020      	beq.n	800a8f2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	881b      	ldrh	r3, [r3, #0]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8c6:	81bb      	strh	r3, [r7, #12]
 800a8c8:	89bb      	ldrh	r3, [r7, #12]
 800a8ca:	f083 0310 	eor.w	r3, r3, #16
 800a8ce:	81bb      	strh	r3, [r7, #12]
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	441a      	add	r2, r3
 800a8da:	89bb      	ldrh	r3, [r7, #12]
 800a8dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	8013      	strh	r3, [r2, #0]
 800a8f0:	e01f      	b.n	800a932 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a908:	81fb      	strh	r3, [r7, #14]
 800a90a:	89fb      	ldrh	r3, [r7, #14]
 800a90c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a910:	81fb      	strh	r3, [r7, #14]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	441a      	add	r2, r3
 800a91c:	89fb      	ldrh	r3, [r7, #14]
 800a91e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a92a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a92e:	b29b      	uxth	r3, r3
 800a930:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	bc80      	pop	{r7}
 800a93c:	4770      	bx	lr

0800a93e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a93e:	b480      	push	{r7}
 800a940:	b087      	sub	sp, #28
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
 800a946:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	7b1b      	ldrb	r3, [r3, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f040 809d 	bne.w	800aa8c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	785b      	ldrb	r3, [r3, #1]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d04c      	beq.n	800a9f4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	823b      	strh	r3, [r7, #16]
 800a968:	8a3b      	ldrh	r3, [r7, #16]
 800a96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d01b      	beq.n	800a9aa <USB_EPClearStall+0x6c>
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4413      	add	r3, r2
 800a97c:	881b      	ldrh	r3, [r3, #0]
 800a97e:	b29b      	uxth	r3, r3
 800a980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a988:	81fb      	strh	r3, [r7, #14]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	441a      	add	r2, r3
 800a994:	89fb      	ldrh	r3, [r7, #14]
 800a996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a99a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a99e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	78db      	ldrb	r3, [r3, #3]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d06c      	beq.n	800aa8c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4413      	add	r3, r2
 800a9bc:	881b      	ldrh	r3, [r3, #0]
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9c8:	81bb      	strh	r3, [r7, #12]
 800a9ca:	89bb      	ldrh	r3, [r7, #12]
 800a9cc:	f083 0320 	eor.w	r3, r3, #32
 800a9d0:	81bb      	strh	r3, [r7, #12]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	441a      	add	r2, r3
 800a9dc:	89bb      	ldrh	r3, [r7, #12]
 800a9de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	8013      	strh	r3, [r2, #0]
 800a9f2:	e04b      	b.n	800aa8c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4413      	add	r3, r2
 800a9fe:	881b      	ldrh	r3, [r3, #0]
 800aa00:	82fb      	strh	r3, [r7, #22]
 800aa02:	8afb      	ldrh	r3, [r7, #22]
 800aa04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d01b      	beq.n	800aa44 <USB_EPClearStall+0x106>
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	881b      	ldrh	r3, [r3, #0]
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa22:	82bb      	strh	r3, [r7, #20]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	441a      	add	r2, r3
 800aa2e:	8abb      	ldrh	r3, [r7, #20]
 800aa30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	4413      	add	r3, r2
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa5a:	827b      	strh	r3, [r7, #18]
 800aa5c:	8a7b      	ldrh	r3, [r7, #18]
 800aa5e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa62:	827b      	strh	r3, [r7, #18]
 800aa64:	8a7b      	ldrh	r3, [r7, #18]
 800aa66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aa6a:	827b      	strh	r3, [r7, #18]
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	441a      	add	r2, r3
 800aa76:	8a7b      	ldrh	r3, [r7, #18]
 800aa78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	371c      	adds	r7, #28
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bc80      	pop	{r7}
 800aa96:	4770      	bx	lr

0800aa98 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800aaa4:	78fb      	ldrb	r3, [r7, #3]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d103      	bne.n	800aab2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2280      	movs	r2, #128	; 0x80
 800aaae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bc80      	pop	{r7}
 800aabc:	4770      	bx	lr

0800aabe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800aabe:	b480      	push	{r7}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	bc80      	pop	{r7}
 800aad0:	4770      	bx	lr

0800aad2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b083      	sub	sp, #12
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bc80      	pop	{r7}
 800aae4:	4770      	bx	lr

0800aae6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b085      	sub	sp, #20
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bc80      	pop	{r7}
 800ab02:	4770      	bx	lr

0800ab04 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bc80      	pop	{r7}
 800ab18:	4770      	bx	lr

0800ab1a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b08d      	sub	sp, #52	; 0x34
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	60f8      	str	r0, [r7, #12]
 800ab22:	60b9      	str	r1, [r7, #8]
 800ab24:	4611      	mov	r1, r2
 800ab26:	461a      	mov	r2, r3
 800ab28:	460b      	mov	r3, r1
 800ab2a:	80fb      	strh	r3, [r7, #6]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ab30:	88bb      	ldrh	r3, [r7, #4]
 800ab32:	3301      	adds	r3, #1
 800ab34:	085b      	lsrs	r3, r3, #1
 800ab36:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ab40:	88fb      	ldrh	r3, [r7, #6]
 800ab42:	005a      	lsls	r2, r3, #1
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab4c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab52:	e01e      	b.n	800ab92 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	021b      	lsls	r3, r3, #8
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab78:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	3302      	adds	r3, #2
 800ab7e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800ab80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab82:	3302      	adds	r3, #2
 800ab84:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab88:	3301      	adds	r3, #1
 800ab8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800ab8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1dd      	bne.n	800ab54 <USB_WritePMA+0x3a>
  }
}
 800ab98:	bf00      	nop
 800ab9a:	bf00      	nop
 800ab9c:	3734      	adds	r7, #52	; 0x34
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bc80      	pop	{r7}
 800aba2:	4770      	bx	lr

0800aba4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b08b      	sub	sp, #44	; 0x2c
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	4611      	mov	r1, r2
 800abb0:	461a      	mov	r2, r3
 800abb2:	460b      	mov	r3, r1
 800abb4:	80fb      	strh	r3, [r7, #6]
 800abb6:	4613      	mov	r3, r2
 800abb8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800abba:	88bb      	ldrh	r3, [r7, #4]
 800abbc:	085b      	lsrs	r3, r3, #1
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800abca:	88fb      	ldrh	r3, [r7, #6]
 800abcc:	005a      	lsls	r2, r3, #1
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	4413      	add	r3, r2
 800abd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abd6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	627b      	str	r3, [r7, #36]	; 0x24
 800abdc:	e01b      	b.n	800ac16 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800abde:	6a3b      	ldr	r3, [r7, #32]
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	3302      	adds	r3, #2
 800abea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	3301      	adds	r3, #1
 800abf8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	0a1b      	lsrs	r3, r3, #8
 800abfe:	b2da      	uxtb	r2, r3
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	3301      	adds	r3, #1
 800ac08:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	3302      	adds	r3, #2
 800ac0e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800ac10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac12:	3b01      	subs	r3, #1
 800ac14:	627b      	str	r3, [r7, #36]	; 0x24
 800ac16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1e0      	bne.n	800abde <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800ac1c:	88bb      	ldrh	r3, [r7, #4]
 800ac1e:	f003 0301 	and.w	r3, r3, #1
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d007      	beq.n	800ac38 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	881b      	ldrh	r3, [r3, #0]
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	701a      	strb	r2, [r3, #0]
  }
}
 800ac38:	bf00      	nop
 800ac3a:	372c      	adds	r7, #44	; 0x2c
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bc80      	pop	{r7}
 800ac40:	4770      	bx	lr

0800ac42 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	7c1b      	ldrb	r3, [r3, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d115      	bne.n	800ac86 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac5e:	2202      	movs	r2, #2
 800ac60:	2181      	movs	r1, #129	; 0x81
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f001 fe87 	bl	800c976 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac72:	2202      	movs	r2, #2
 800ac74:	2101      	movs	r1, #1
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f001 fe7d 	bl	800c976 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ac84:	e012      	b.n	800acac <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac86:	2340      	movs	r3, #64	; 0x40
 800ac88:	2202      	movs	r2, #2
 800ac8a:	2181      	movs	r1, #129	; 0x81
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f001 fe72 	bl	800c976 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac98:	2340      	movs	r3, #64	; 0x40
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f001 fe69 	bl	800c976 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800acac:	2308      	movs	r3, #8
 800acae:	2203      	movs	r2, #3
 800acb0:	2182      	movs	r1, #130	; 0x82
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 fe5f 	bl	800c976 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800acbe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800acc2:	f001 ff7f 	bl	800cbc4 <USBD_static_malloc>
 800acc6:	4602      	mov	r2, r0
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d102      	bne.n	800acde <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800acd8:	2301      	movs	r3, #1
 800acda:	73fb      	strb	r3, [r7, #15]
 800acdc:	e026      	b.n	800ad2c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ace4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	7c1b      	ldrb	r3, [r3, #16]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d109      	bne.n	800ad1c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad12:	2101      	movs	r1, #1
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f001 ff1f 	bl	800cb58 <USBD_LL_PrepareReceive>
 800ad1a:	e007      	b.n	800ad2c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad22:	2340      	movs	r3, #64	; 0x40
 800ad24:	2101      	movs	r1, #1
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f001 ff16 	bl	800cb58 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b084      	sub	sp, #16
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	460b      	mov	r3, r1
 800ad40:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ad42:	2300      	movs	r3, #0
 800ad44:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ad46:	2181      	movs	r1, #129	; 0x81
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f001 fe3a 	bl	800c9c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ad54:	2101      	movs	r1, #1
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f001 fe33 	bl	800c9c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ad64:	2182      	movs	r1, #130	; 0x82
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f001 fe2b 	bl	800c9c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00e      	beq.n	800ad9a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f001 ff25 	bl	800cbdc <USBD_static_free>
    pdev->pClassData = NULL;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800adb6:	2300      	movs	r3, #0
 800adb8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800adba:	2300      	movs	r3, #0
 800adbc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d039      	beq.n	800ae42 <USBD_CDC_Setup+0x9e>
 800adce:	2b20      	cmp	r3, #32
 800add0:	d17f      	bne.n	800aed2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	88db      	ldrh	r3, [r3, #6]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d029      	beq.n	800ae2e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	b25b      	sxtb	r3, r3
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	da11      	bge.n	800ae08 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800adf0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	88d2      	ldrh	r2, [r2, #6]
 800adf6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800adf8:	6939      	ldr	r1, [r7, #16]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	88db      	ldrh	r3, [r3, #6]
 800adfe:	461a      	mov	r2, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f001 fa0a 	bl	800c21a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800ae06:	e06b      	b.n	800aee0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	785a      	ldrb	r2, [r3, #1]
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	88db      	ldrh	r3, [r3, #6]
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ae1e:	6939      	ldr	r1, [r7, #16]
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	88db      	ldrh	r3, [r3, #6]
 800ae24:	461a      	mov	r2, r3
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f001 fa25 	bl	800c276 <USBD_CtlPrepareRx>
      break;
 800ae2c:	e058      	b.n	800aee0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	7850      	ldrb	r0, [r2, #1]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	4798      	blx	r3
      break;
 800ae40:	e04e      	b.n	800aee0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	785b      	ldrb	r3, [r3, #1]
 800ae46:	2b0b      	cmp	r3, #11
 800ae48:	d02e      	beq.n	800aea8 <USBD_CDC_Setup+0x104>
 800ae4a:	2b0b      	cmp	r3, #11
 800ae4c:	dc38      	bgt.n	800aec0 <USBD_CDC_Setup+0x11c>
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d002      	beq.n	800ae58 <USBD_CDC_Setup+0xb4>
 800ae52:	2b0a      	cmp	r3, #10
 800ae54:	d014      	beq.n	800ae80 <USBD_CDC_Setup+0xdc>
 800ae56:	e033      	b.n	800aec0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae5e:	2b03      	cmp	r3, #3
 800ae60:	d107      	bne.n	800ae72 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ae62:	f107 030c 	add.w	r3, r7, #12
 800ae66:	2202      	movs	r2, #2
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f001 f9d5 	bl	800c21a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae70:	e02e      	b.n	800aed0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f001 f966 	bl	800c146 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	75fb      	strb	r3, [r7, #23]
          break;
 800ae7e:	e027      	b.n	800aed0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d107      	bne.n	800ae9a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae8a:	f107 030f 	add.w	r3, r7, #15
 800ae8e:	2201      	movs	r2, #1
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f001 f9c1 	bl	800c21a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae98:	e01a      	b.n	800aed0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f001 f952 	bl	800c146 <USBD_CtlError>
            ret = USBD_FAIL;
 800aea2:	2302      	movs	r3, #2
 800aea4:	75fb      	strb	r3, [r7, #23]
          break;
 800aea6:	e013      	b.n	800aed0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeae:	2b03      	cmp	r3, #3
 800aeb0:	d00d      	beq.n	800aece <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f001 f946 	bl	800c146 <USBD_CtlError>
            ret = USBD_FAIL;
 800aeba:	2302      	movs	r3, #2
 800aebc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aebe:	e006      	b.n	800aece <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f001 f93f 	bl	800c146 <USBD_CtlError>
          ret = USBD_FAIL;
 800aec8:	2302      	movs	r3, #2
 800aeca:	75fb      	strb	r3, [r7, #23]
          break;
 800aecc:	e000      	b.n	800aed0 <USBD_CDC_Setup+0x12c>
          break;
 800aece:	bf00      	nop
      }
      break;
 800aed0:	e006      	b.n	800aee0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f001 f936 	bl	800c146 <USBD_CtlError>
      ret = USBD_FAIL;
 800aeda:	2302      	movs	r3, #2
 800aedc:	75fb      	strb	r3, [r7, #23]
      break;
 800aede:	bf00      	nop
  }

  return ret;
 800aee0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	460b      	mov	r3, r1
 800aef4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aefc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af04:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d03a      	beq.n	800af86 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800af10:	78fa      	ldrb	r2, [r7, #3]
 800af12:	6879      	ldr	r1, [r7, #4]
 800af14:	4613      	mov	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	440b      	add	r3, r1
 800af1e:	331c      	adds	r3, #28
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d029      	beq.n	800af7a <USBD_CDC_DataIn+0x90>
 800af26:	78fa      	ldrb	r2, [r7, #3]
 800af28:	6879      	ldr	r1, [r7, #4]
 800af2a:	4613      	mov	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	440b      	add	r3, r1
 800af34:	331c      	adds	r3, #28
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	78f9      	ldrb	r1, [r7, #3]
 800af3a:	68b8      	ldr	r0, [r7, #8]
 800af3c:	460b      	mov	r3, r1
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	440b      	add	r3, r1
 800af42:	00db      	lsls	r3, r3, #3
 800af44:	4403      	add	r3, r0
 800af46:	3338      	adds	r3, #56	; 0x38
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	fbb2 f1f3 	udiv	r1, r2, r3
 800af4e:	fb03 f301 	mul.w	r3, r3, r1
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	2b00      	cmp	r3, #0
 800af56:	d110      	bne.n	800af7a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800af58:	78fa      	ldrb	r2, [r7, #3]
 800af5a:	6879      	ldr	r1, [r7, #4]
 800af5c:	4613      	mov	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4413      	add	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	440b      	add	r3, r1
 800af66:	331c      	adds	r3, #28
 800af68:	2200      	movs	r2, #0
 800af6a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af6c:	78f9      	ldrb	r1, [r7, #3]
 800af6e:	2300      	movs	r3, #0
 800af70:	2200      	movs	r2, #0
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f001 fdcd 	bl	800cb12 <USBD_LL_Transmit>
 800af78:	e003      	b.n	800af82 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800af82:	2300      	movs	r3, #0
 800af84:	e000      	b.n	800af88 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800af86:	2302      	movs	r3, #2
  }
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	460b      	mov	r3, r1
 800af9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800afa4:	78fb      	ldrb	r3, [r7, #3]
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f001 fdf8 	bl	800cb9e <USBD_LL_GetRxDataSize>
 800afae:	4602      	mov	r2, r0
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00d      	beq.n	800afdc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800afd4:	4611      	mov	r1, r2
 800afd6:	4798      	blx	r3

    return USBD_OK;
 800afd8:	2300      	movs	r3, #0
 800afda:	e000      	b.n	800afde <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800afdc:	2302      	movs	r3, #2
  }
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b084      	sub	sp, #16
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aff4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800affc:	2b00      	cmp	r3, #0
 800affe:	d015      	beq.n	800b02c <USBD_CDC_EP0_RxReady+0x46>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b006:	2bff      	cmp	r3, #255	; 0xff
 800b008:	d010      	beq.n	800b02c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b018:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b020:	b292      	uxth	r2, r2
 800b022:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	22ff      	movs	r2, #255	; 0xff
 800b028:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2243      	movs	r2, #67	; 0x43
 800b044:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b046:	4b03      	ldr	r3, [pc, #12]	; (800b054 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bc80      	pop	{r7}
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	200000c8 	.word	0x200000c8

0800b058 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2243      	movs	r2, #67	; 0x43
 800b064:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b066:	4b03      	ldr	r3, [pc, #12]	; (800b074 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b068:	4618      	mov	r0, r3
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bc80      	pop	{r7}
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	20000084 	.word	0x20000084

0800b078 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2243      	movs	r2, #67	; 0x43
 800b084:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b086:	4b03      	ldr	r3, [pc, #12]	; (800b094 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b088:	4618      	mov	r0, r3
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bc80      	pop	{r7}
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	2000010c 	.word	0x2000010c

0800b098 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	220a      	movs	r2, #10
 800b0a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b0a6:	4b03      	ldr	r3, [pc, #12]	; (800b0b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bc80      	pop	{r7}
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	20000040 	.word	0x20000040

0800b0b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d005      	beq.n	800b0d8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bc80      	pop	{r7}
 800b0e2:	4770      	bx	lr

0800b0e4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b087      	sub	sp, #28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b102:	88fa      	ldrh	r2, [r7, #6]
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	371c      	adds	r7, #28
 800b110:	46bd      	mov	sp, r7
 800b112:	bc80      	pop	{r7}
 800b114:	4770      	bx	lr

0800b116 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b116:	b480      	push	{r7}
 800b118:	b085      	sub	sp, #20
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
 800b11e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b126:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	bc80      	pop	{r7}
 800b13a:	4770      	bx	lr

0800b13c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b14a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b152:	2b00      	cmp	r3, #0
 800b154:	d01c      	beq.n	800b190 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d115      	bne.n	800b18c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2201      	movs	r2, #1
 800b164:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b17e:	b29b      	uxth	r3, r3
 800b180:	2181      	movs	r1, #129	; 0x81
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f001 fcc5 	bl	800cb12 <USBD_LL_Transmit>

      return USBD_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	e002      	b.n	800b192 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e000      	b.n	800b192 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b190:	2302      	movs	r3, #2
  }
}
 800b192:	4618      	mov	r0, r3
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d017      	beq.n	800b1e4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	7c1b      	ldrb	r3, [r3, #16]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d109      	bne.n	800b1d0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 fcc5 	bl	800cb58 <USBD_LL_PrepareReceive>
 800b1ce:	e007      	b.n	800b1e0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1d6:	2340      	movs	r3, #64	; 0x40
 800b1d8:	2101      	movs	r1, #1
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f001 fcbc 	bl	800cb58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	e000      	b.n	800b1e6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b1e4:	2302      	movs	r3, #2
  }
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b084      	sub	sp, #16
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	60f8      	str	r0, [r7, #12]
 800b1f6:	60b9      	str	r1, [r7, #8]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d101      	bne.n	800b206 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b202:	2302      	movs	r3, #2
 800b204:	e01a      	b.n	800b23c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d003      	beq.n	800b226 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2201      	movs	r2, #1
 800b22a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	79fa      	ldrb	r2, [r7, #7]
 800b232:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f001 fb29 	bl	800c88c <USBD_LL_Init>

  return USBD_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b24e:	2300      	movs	r3, #0
 800b250:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d006      	beq.n	800b266 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b260:	2300      	movs	r3, #0
 800b262:	73fb      	strb	r3, [r7, #15]
 800b264:	e001      	b.n	800b26a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b266:	2302      	movs	r3, #2
 800b268:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	bc80      	pop	{r7}
 800b274:	4770      	bx	lr

0800b276 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b082      	sub	sp, #8
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f001 fb5e 	bl	800c940 <USBD_LL_Start>

  return USBD_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b28e:	b480      	push	{r7}
 800b290:	b083      	sub	sp, #12
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bc80      	pop	{r7}
 800b2a0:	4770      	bx	lr

0800b2a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00c      	beq.n	800b2d6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	78fa      	ldrb	r2, [r7, #3]
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	4798      	blx	r3
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	78fa      	ldrb	r2, [r7, #3]
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	4798      	blx	r3

  return USBD_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3708      	adds	r7, #8
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b082      	sub	sp, #8
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	4618      	mov	r0, r3
 800b31a:	f000 fed8 	bl	800c0ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b32c:	461a      	mov	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b33a:	f003 031f 	and.w	r3, r3, #31
 800b33e:	2b02      	cmp	r3, #2
 800b340:	d016      	beq.n	800b370 <USBD_LL_SetupStage+0x6a>
 800b342:	2b02      	cmp	r3, #2
 800b344:	d81c      	bhi.n	800b380 <USBD_LL_SetupStage+0x7a>
 800b346:	2b00      	cmp	r3, #0
 800b348:	d002      	beq.n	800b350 <USBD_LL_SetupStage+0x4a>
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d008      	beq.n	800b360 <USBD_LL_SetupStage+0x5a>
 800b34e:	e017      	b.n	800b380 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f9cb 	bl	800b6f4 <USBD_StdDevReq>
      break;
 800b35e:	e01a      	b.n	800b396 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b366:	4619      	mov	r1, r3
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 fa2d 	bl	800b7c8 <USBD_StdItfReq>
      break;
 800b36e:	e012      	b.n	800b396 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b376:	4619      	mov	r1, r3
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 fa6d 	bl	800b858 <USBD_StdEPReq>
      break;
 800b37e:	e00a      	b.n	800b396 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b386:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	4619      	mov	r1, r3
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f001 fb36 	bl	800ca00 <USBD_LL_StallEP>
      break;
 800b394:	bf00      	nop
  }

  return USBD_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	607a      	str	r2, [r7, #4]
 800b3ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b3ae:	7afb      	ldrb	r3, [r7, #11]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d14b      	bne.n	800b44c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b3ba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3c2:	2b03      	cmp	r3, #3
 800b3c4:	d134      	bne.n	800b430 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	68da      	ldr	r2, [r3, #12]
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d919      	bls.n	800b406 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	68da      	ldr	r2, [r3, #12]
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	1ad2      	subs	r2, r2, r3
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	68da      	ldr	r2, [r3, #12]
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d203      	bcs.n	800b3f4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	e002      	b.n	800b3fa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	6879      	ldr	r1, [r7, #4]
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	f000 ff57 	bl	800c2b2 <USBD_CtlContinueRx>
 800b404:	e038      	b.n	800b478 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00a      	beq.n	800b428 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b418:	2b03      	cmp	r3, #3
 800b41a:	d105      	bne.n	800b428 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f000 ff54 	bl	800c2d6 <USBD_CtlSendStatus>
 800b42e:	e023      	b.n	800b478 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b436:	2b05      	cmp	r3, #5
 800b438:	d11e      	bne.n	800b478 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b442:	2100      	movs	r1, #0
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f001 fadb 	bl	800ca00 <USBD_LL_StallEP>
 800b44a:	e015      	b.n	800b478 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00d      	beq.n	800b474 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d108      	bne.n	800b474 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b468:	699b      	ldr	r3, [r3, #24]
 800b46a:	7afa      	ldrb	r2, [r7, #11]
 800b46c:	4611      	mov	r1, r2
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	4798      	blx	r3
 800b472:	e001      	b.n	800b478 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b474:	2302      	movs	r3, #2
 800b476:	e000      	b.n	800b47a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3718      	adds	r7, #24
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b482:	b580      	push	{r7, lr}
 800b484:	b086      	sub	sp, #24
 800b486:	af00      	add	r7, sp, #0
 800b488:	60f8      	str	r0, [r7, #12]
 800b48a:	460b      	mov	r3, r1
 800b48c:	607a      	str	r2, [r7, #4]
 800b48e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b490:	7afb      	ldrb	r3, [r7, #11]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d17f      	bne.n	800b596 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3314      	adds	r3, #20
 800b49a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d15c      	bne.n	800b560 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	68da      	ldr	r2, [r3, #12]
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d915      	bls.n	800b4de <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	68da      	ldr	r2, [r3, #12]
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	1ad2      	subs	r2, r2, r3
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	6879      	ldr	r1, [r7, #4]
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f000 fec1 	bl	800c252 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f001 fb3e 	bl	800cb58 <USBD_LL_PrepareReceive>
 800b4dc:	e04e      	b.n	800b57c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	6912      	ldr	r2, [r2, #16]
 800b4e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4ea:	fb02 f201 	mul.w	r2, r2, r1
 800b4ee:	1a9b      	subs	r3, r3, r2
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d11c      	bne.n	800b52e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	689a      	ldr	r2, [r3, #8]
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d316      	bcc.n	800b52e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	689a      	ldr	r2, [r3, #8]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d20f      	bcs.n	800b52e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b50e:	2200      	movs	r2, #0
 800b510:	2100      	movs	r1, #0
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f000 fe9d 	bl	800c252 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b520:	2300      	movs	r3, #0
 800b522:	2200      	movs	r2, #0
 800b524:	2100      	movs	r1, #0
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f001 fb16 	bl	800cb58 <USBD_LL_PrepareReceive>
 800b52c:	e026      	b.n	800b57c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00a      	beq.n	800b550 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b540:	2b03      	cmp	r3, #3
 800b542:	d105      	bne.n	800b550 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b550:	2180      	movs	r1, #128	; 0x80
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f001 fa54 	bl	800ca00 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	f000 fecf 	bl	800c2fc <USBD_CtlReceiveStatus>
 800b55e:	e00d      	b.n	800b57c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b566:	2b04      	cmp	r3, #4
 800b568:	d004      	beq.n	800b574 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b570:	2b00      	cmp	r3, #0
 800b572:	d103      	bne.n	800b57c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b574:	2180      	movs	r1, #128	; 0x80
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f001 fa42 	bl	800ca00 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b582:	2b01      	cmp	r3, #1
 800b584:	d11d      	bne.n	800b5c2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f7ff fe81 	bl	800b28e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b594:	e015      	b.n	800b5c2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b59c:	695b      	ldr	r3, [r3, #20]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00d      	beq.n	800b5be <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b5a8:	2b03      	cmp	r3, #3
 800b5aa:	d108      	bne.n	800b5be <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5b2:	695b      	ldr	r3, [r3, #20]
 800b5b4:	7afa      	ldrb	r2, [r7, #11]
 800b5b6:	4611      	mov	r1, r2
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	4798      	blx	r3
 800b5bc:	e001      	b.n	800b5c2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b5be:	2302      	movs	r3, #2
 800b5c0:	e000      	b.n	800b5c4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3718      	adds	r7, #24
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5d4:	2340      	movs	r3, #64	; 0x40
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2100      	movs	r1, #0
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f001 f9cb 	bl	800c976 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2240      	movs	r2, #64	; 0x40
 800b5ec:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5f0:	2340      	movs	r3, #64	; 0x40
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2180      	movs	r1, #128	; 0x80
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f001 f9bd 	bl	800c976 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2240      	movs	r2, #64	; 0x40
 800b606:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d009      	beq.n	800b644 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	6852      	ldr	r2, [r2, #4]
 800b63c:	b2d2      	uxtb	r2, r2
 800b63e:	4611      	mov	r1, r2
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	4798      	blx	r3
  }

  return USBD_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b64e:	b480      	push	{r7}
 800b650:	b083      	sub	sp, #12
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	460b      	mov	r3, r1
 800b658:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	78fa      	ldrb	r2, [r7, #3]
 800b65e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	bc80      	pop	{r7}
 800b66a:	4770      	bx	lr

0800b66c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2204      	movs	r2, #4
 800b684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	bc80      	pop	{r7}
 800b692:	4770      	bx	lr

0800b694 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6a2:	2b04      	cmp	r3, #4
 800b6a4:	d105      	bne.n	800b6b2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bc80      	pop	{r7}
 800b6bc:	4770      	bx	lr

0800b6be <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b082      	sub	sp, #8
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6cc:	2b03      	cmp	r3, #3
 800b6ce:	d10b      	bne.n	800b6e8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6d6:	69db      	ldr	r3, [r3, #28]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d005      	beq.n	800b6e8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6e2:	69db      	ldr	r3, [r3, #28]
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b70a:	2b40      	cmp	r3, #64	; 0x40
 800b70c:	d005      	beq.n	800b71a <USBD_StdDevReq+0x26>
 800b70e:	2b40      	cmp	r3, #64	; 0x40
 800b710:	d84f      	bhi.n	800b7b2 <USBD_StdDevReq+0xbe>
 800b712:	2b00      	cmp	r3, #0
 800b714:	d009      	beq.n	800b72a <USBD_StdDevReq+0x36>
 800b716:	2b20      	cmp	r3, #32
 800b718:	d14b      	bne.n	800b7b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	6839      	ldr	r1, [r7, #0]
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	4798      	blx	r3
      break;
 800b728:	e048      	b.n	800b7bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	785b      	ldrb	r3, [r3, #1]
 800b72e:	2b09      	cmp	r3, #9
 800b730:	d839      	bhi.n	800b7a6 <USBD_StdDevReq+0xb2>
 800b732:	a201      	add	r2, pc, #4	; (adr r2, 800b738 <USBD_StdDevReq+0x44>)
 800b734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b738:	0800b789 	.word	0x0800b789
 800b73c:	0800b79d 	.word	0x0800b79d
 800b740:	0800b7a7 	.word	0x0800b7a7
 800b744:	0800b793 	.word	0x0800b793
 800b748:	0800b7a7 	.word	0x0800b7a7
 800b74c:	0800b76b 	.word	0x0800b76b
 800b750:	0800b761 	.word	0x0800b761
 800b754:	0800b7a7 	.word	0x0800b7a7
 800b758:	0800b77f 	.word	0x0800b77f
 800b75c:	0800b775 	.word	0x0800b775
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f9dc 	bl	800bb20 <USBD_GetDescriptor>
          break;
 800b768:	e022      	b.n	800b7b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fb3f 	bl	800bdf0 <USBD_SetAddress>
          break;
 800b772:	e01d      	b.n	800b7b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b774:	6839      	ldr	r1, [r7, #0]
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 fb7e 	bl	800be78 <USBD_SetConfig>
          break;
 800b77c:	e018      	b.n	800b7b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fc07 	bl	800bf94 <USBD_GetConfig>
          break;
 800b786:	e013      	b.n	800b7b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b788:	6839      	ldr	r1, [r7, #0]
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 fc37 	bl	800bffe <USBD_GetStatus>
          break;
 800b790:	e00e      	b.n	800b7b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fc65 	bl	800c064 <USBD_SetFeature>
          break;
 800b79a:	e009      	b.n	800b7b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b79c:	6839      	ldr	r1, [r7, #0]
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 fc74 	bl	800c08c <USBD_ClrFeature>
          break;
 800b7a4:	e004      	b.n	800b7b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fccc 	bl	800c146 <USBD_CtlError>
          break;
 800b7ae:	bf00      	nop
      }
      break;
 800b7b0:	e004      	b.n	800b7bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fcc6 	bl	800c146 <USBD_CtlError>
      break;
 800b7ba:	bf00      	nop
  }

  return ret;
 800b7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop

0800b7c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7de:	2b40      	cmp	r3, #64	; 0x40
 800b7e0:	d005      	beq.n	800b7ee <USBD_StdItfReq+0x26>
 800b7e2:	2b40      	cmp	r3, #64	; 0x40
 800b7e4:	d82e      	bhi.n	800b844 <USBD_StdItfReq+0x7c>
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <USBD_StdItfReq+0x26>
 800b7ea:	2b20      	cmp	r3, #32
 800b7ec:	d12a      	bne.n	800b844 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d81d      	bhi.n	800b836 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	889b      	ldrh	r3, [r3, #4]
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	2b01      	cmp	r3, #1
 800b802:	d813      	bhi.n	800b82c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	6839      	ldr	r1, [r7, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	4798      	blx	r3
 800b812:	4603      	mov	r3, r0
 800b814:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	88db      	ldrh	r3, [r3, #6]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d110      	bne.n	800b840 <USBD_StdItfReq+0x78>
 800b81e:	7bfb      	ldrb	r3, [r7, #15]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10d      	bne.n	800b840 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fd56 	bl	800c2d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b82a:	e009      	b.n	800b840 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fc89 	bl	800c146 <USBD_CtlError>
          break;
 800b834:	e004      	b.n	800b840 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b836:	6839      	ldr	r1, [r7, #0]
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 fc84 	bl	800c146 <USBD_CtlError>
          break;
 800b83e:	e000      	b.n	800b842 <USBD_StdItfReq+0x7a>
          break;
 800b840:	bf00      	nop
      }
      break;
 800b842:	e004      	b.n	800b84e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b844:	6839      	ldr	r1, [r7, #0]
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 fc7d 	bl	800c146 <USBD_CtlError>
      break;
 800b84c:	bf00      	nop
  }

  return USBD_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	889b      	ldrh	r3, [r3, #4]
 800b86a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b874:	2b40      	cmp	r3, #64	; 0x40
 800b876:	d007      	beq.n	800b888 <USBD_StdEPReq+0x30>
 800b878:	2b40      	cmp	r3, #64	; 0x40
 800b87a:	f200 8146 	bhi.w	800bb0a <USBD_StdEPReq+0x2b2>
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00a      	beq.n	800b898 <USBD_StdEPReq+0x40>
 800b882:	2b20      	cmp	r3, #32
 800b884:	f040 8141 	bne.w	800bb0a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	6839      	ldr	r1, [r7, #0]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	4798      	blx	r3
      break;
 800b896:	e13d      	b.n	800bb14 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8a0:	2b20      	cmp	r3, #32
 800b8a2:	d10a      	bne.n	800b8ba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	6839      	ldr	r1, [r7, #0]
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	4798      	blx	r3
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
 800b8b8:	e12d      	b.n	800bb16 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	785b      	ldrb	r3, [r3, #1]
 800b8be:	2b03      	cmp	r3, #3
 800b8c0:	d007      	beq.n	800b8d2 <USBD_StdEPReq+0x7a>
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	f300 811b 	bgt.w	800bafe <USBD_StdEPReq+0x2a6>
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d072      	beq.n	800b9b2 <USBD_StdEPReq+0x15a>
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d03a      	beq.n	800b946 <USBD_StdEPReq+0xee>
 800b8d0:	e115      	b.n	800bafe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d002      	beq.n	800b8e2 <USBD_StdEPReq+0x8a>
 800b8dc:	2b03      	cmp	r3, #3
 800b8de:	d015      	beq.n	800b90c <USBD_StdEPReq+0xb4>
 800b8e0:	e02b      	b.n	800b93a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8e2:	7bbb      	ldrb	r3, [r7, #14]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00c      	beq.n	800b902 <USBD_StdEPReq+0xaa>
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ea:	2b80      	cmp	r3, #128	; 0x80
 800b8ec:	d009      	beq.n	800b902 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b8ee:	7bbb      	ldrb	r3, [r7, #14]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f001 f884 	bl	800ca00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b8f8:	2180      	movs	r1, #128	; 0x80
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f001 f880 	bl	800ca00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b900:	e020      	b.n	800b944 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fc1e 	bl	800c146 <USBD_CtlError>
              break;
 800b90a:	e01b      	b.n	800b944 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	885b      	ldrh	r3, [r3, #2]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10e      	bne.n	800b932 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b914:	7bbb      	ldrb	r3, [r7, #14]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00b      	beq.n	800b932 <USBD_StdEPReq+0xda>
 800b91a:	7bbb      	ldrb	r3, [r7, #14]
 800b91c:	2b80      	cmp	r3, #128	; 0x80
 800b91e:	d008      	beq.n	800b932 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	88db      	ldrh	r3, [r3, #6]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d104      	bne.n	800b932 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b928:	7bbb      	ldrb	r3, [r7, #14]
 800b92a:	4619      	mov	r1, r3
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f001 f867 	bl	800ca00 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fccf 	bl	800c2d6 <USBD_CtlSendStatus>

              break;
 800b938:	e004      	b.n	800b944 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fc02 	bl	800c146 <USBD_CtlError>
              break;
 800b942:	bf00      	nop
          }
          break;
 800b944:	e0e0      	b.n	800bb08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d002      	beq.n	800b956 <USBD_StdEPReq+0xfe>
 800b950:	2b03      	cmp	r3, #3
 800b952:	d015      	beq.n	800b980 <USBD_StdEPReq+0x128>
 800b954:	e026      	b.n	800b9a4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b956:	7bbb      	ldrb	r3, [r7, #14]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00c      	beq.n	800b976 <USBD_StdEPReq+0x11e>
 800b95c:	7bbb      	ldrb	r3, [r7, #14]
 800b95e:	2b80      	cmp	r3, #128	; 0x80
 800b960:	d009      	beq.n	800b976 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b962:	7bbb      	ldrb	r3, [r7, #14]
 800b964:	4619      	mov	r1, r3
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f001 f84a 	bl	800ca00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b96c:	2180      	movs	r1, #128	; 0x80
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f001 f846 	bl	800ca00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b974:	e01c      	b.n	800b9b0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b976:	6839      	ldr	r1, [r7, #0]
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 fbe4 	bl	800c146 <USBD_CtlError>
              break;
 800b97e:	e017      	b.n	800b9b0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	885b      	ldrh	r3, [r3, #2]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d112      	bne.n	800b9ae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b988:	7bbb      	ldrb	r3, [r7, #14]
 800b98a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d004      	beq.n	800b99c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	4619      	mov	r1, r3
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f001 f851 	bl	800ca3e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fc9a 	bl	800c2d6 <USBD_CtlSendStatus>
              }
              break;
 800b9a2:	e004      	b.n	800b9ae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b9a4:	6839      	ldr	r1, [r7, #0]
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fbcd 	bl	800c146 <USBD_CtlError>
              break;
 800b9ac:	e000      	b.n	800b9b0 <USBD_StdEPReq+0x158>
              break;
 800b9ae:	bf00      	nop
          }
          break;
 800b9b0:	e0aa      	b.n	800bb08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d002      	beq.n	800b9c2 <USBD_StdEPReq+0x16a>
 800b9bc:	2b03      	cmp	r3, #3
 800b9be:	d032      	beq.n	800ba26 <USBD_StdEPReq+0x1ce>
 800b9c0:	e097      	b.n	800baf2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9c2:	7bbb      	ldrb	r3, [r7, #14]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d007      	beq.n	800b9d8 <USBD_StdEPReq+0x180>
 800b9c8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ca:	2b80      	cmp	r3, #128	; 0x80
 800b9cc:	d004      	beq.n	800b9d8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fbb8 	bl	800c146 <USBD_CtlError>
                break;
 800b9d6:	e091      	b.n	800bafc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	da0b      	bge.n	800b9f8 <USBD_StdEPReq+0x1a0>
 800b9e0:	7bbb      	ldrb	r3, [r7, #14]
 800b9e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	3310      	adds	r3, #16
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	e00b      	b.n	800ba10 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9f8:	7bbb      	ldrb	r3, [r7, #14]
 800b9fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9fe:	4613      	mov	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	4413      	add	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	3304      	adds	r3, #4
 800ba10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2200      	movs	r2, #0
 800ba16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fbfb 	bl	800c21a <USBD_CtlSendData>
              break;
 800ba24:	e06a      	b.n	800bafc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	da11      	bge.n	800ba52 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba2e:	7bbb      	ldrb	r3, [r7, #14]
 800ba30:	f003 020f 	and.w	r2, r3, #15
 800ba34:	6879      	ldr	r1, [r7, #4]
 800ba36:	4613      	mov	r3, r2
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4413      	add	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	440b      	add	r3, r1
 800ba40:	3318      	adds	r3, #24
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d117      	bne.n	800ba78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ba48:	6839      	ldr	r1, [r7, #0]
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fb7b 	bl	800c146 <USBD_CtlError>
                  break;
 800ba50:	e054      	b.n	800bafc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba52:	7bbb      	ldrb	r3, [r7, #14]
 800ba54:	f003 020f 	and.w	r2, r3, #15
 800ba58:	6879      	ldr	r1, [r7, #4]
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	440b      	add	r3, r1
 800ba64:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d104      	bne.n	800ba78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fb68 	bl	800c146 <USBD_CtlError>
                  break;
 800ba76:	e041      	b.n	800bafc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	da0b      	bge.n	800ba98 <USBD_StdEPReq+0x240>
 800ba80:	7bbb      	ldrb	r3, [r7, #14]
 800ba82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba86:	4613      	mov	r3, r2
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	4413      	add	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	3310      	adds	r3, #16
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	4413      	add	r3, r2
 800ba94:	3304      	adds	r3, #4
 800ba96:	e00b      	b.n	800bab0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
 800ba9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba9e:	4613      	mov	r3, r2
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	4413      	add	r3, r2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	4413      	add	r3, r2
 800baae:	3304      	adds	r3, #4
 800bab0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <USBD_StdEPReq+0x266>
 800bab8:	7bbb      	ldrb	r3, [r7, #14]
 800baba:	2b80      	cmp	r3, #128	; 0x80
 800babc:	d103      	bne.n	800bac6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2200      	movs	r2, #0
 800bac2:	601a      	str	r2, [r3, #0]
 800bac4:	e00e      	b.n	800bae4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bac6:	7bbb      	ldrb	r3, [r7, #14]
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 ffd6 	bl	800ca7c <USBD_LL_IsStallEP>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d003      	beq.n	800bade <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	2201      	movs	r2, #1
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	e002      	b.n	800bae4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	2200      	movs	r2, #0
 800bae2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	2202      	movs	r2, #2
 800bae8:	4619      	mov	r1, r3
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fb95 	bl	800c21a <USBD_CtlSendData>
              break;
 800baf0:	e004      	b.n	800bafc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800baf2:	6839      	ldr	r1, [r7, #0]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fb26 	bl	800c146 <USBD_CtlError>
              break;
 800bafa:	bf00      	nop
          }
          break;
 800bafc:	e004      	b.n	800bb08 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bafe:	6839      	ldr	r1, [r7, #0]
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 fb20 	bl	800c146 <USBD_CtlError>
          break;
 800bb06:	bf00      	nop
      }
      break;
 800bb08:	e004      	b.n	800bb14 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fb1a 	bl	800c146 <USBD_CtlError>
      break;
 800bb12:	bf00      	nop
  }

  return ret;
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
	...

0800bb20 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb32:	2300      	movs	r3, #0
 800bb34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	885b      	ldrh	r3, [r3, #2]
 800bb3a:	0a1b      	lsrs	r3, r3, #8
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	2b06      	cmp	r3, #6
 800bb42:	f200 8128 	bhi.w	800bd96 <USBD_GetDescriptor+0x276>
 800bb46:	a201      	add	r2, pc, #4	; (adr r2, 800bb4c <USBD_GetDescriptor+0x2c>)
 800bb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb4c:	0800bb69 	.word	0x0800bb69
 800bb50:	0800bb81 	.word	0x0800bb81
 800bb54:	0800bbc1 	.word	0x0800bbc1
 800bb58:	0800bd97 	.word	0x0800bd97
 800bb5c:	0800bd97 	.word	0x0800bd97
 800bb60:	0800bd37 	.word	0x0800bd37
 800bb64:	0800bd63 	.word	0x0800bd63
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	7c12      	ldrb	r2, [r2, #16]
 800bb74:	f107 0108 	add.w	r1, r7, #8
 800bb78:	4610      	mov	r0, r2
 800bb7a:	4798      	blx	r3
 800bb7c:	60f8      	str	r0, [r7, #12]
      break;
 800bb7e:	e112      	b.n	800bda6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	7c1b      	ldrb	r3, [r3, #16]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10d      	bne.n	800bba4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb90:	f107 0208 	add.w	r2, r7, #8
 800bb94:	4610      	mov	r0, r2
 800bb96:	4798      	blx	r3
 800bb98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	2202      	movs	r2, #2
 800bba0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bba2:	e100      	b.n	800bda6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbac:	f107 0208 	add.w	r2, r7, #8
 800bbb0:	4610      	mov	r0, r2
 800bbb2:	4798      	blx	r3
 800bbb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	2202      	movs	r2, #2
 800bbbc:	701a      	strb	r2, [r3, #0]
      break;
 800bbbe:	e0f2      	b.n	800bda6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	885b      	ldrh	r3, [r3, #2]
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b05      	cmp	r3, #5
 800bbc8:	f200 80ac 	bhi.w	800bd24 <USBD_GetDescriptor+0x204>
 800bbcc:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <USBD_GetDescriptor+0xb4>)
 800bbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd2:	bf00      	nop
 800bbd4:	0800bbed 	.word	0x0800bbed
 800bbd8:	0800bc21 	.word	0x0800bc21
 800bbdc:	0800bc55 	.word	0x0800bc55
 800bbe0:	0800bc89 	.word	0x0800bc89
 800bbe4:	0800bcbd 	.word	0x0800bcbd
 800bbe8:	0800bcf1 	.word	0x0800bcf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00b      	beq.n	800bc10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	7c12      	ldrb	r2, [r2, #16]
 800bc04:	f107 0108 	add.w	r1, r7, #8
 800bc08:	4610      	mov	r0, r2
 800bc0a:	4798      	blx	r3
 800bc0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc0e:	e091      	b.n	800bd34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc10:	6839      	ldr	r1, [r7, #0]
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 fa97 	bl	800c146 <USBD_CtlError>
            err++;
 800bc18:	7afb      	ldrb	r3, [r7, #11]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc1e:	e089      	b.n	800bd34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00b      	beq.n	800bc44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	7c12      	ldrb	r2, [r2, #16]
 800bc38:	f107 0108 	add.w	r1, r7, #8
 800bc3c:	4610      	mov	r0, r2
 800bc3e:	4798      	blx	r3
 800bc40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc42:	e077      	b.n	800bd34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc44:	6839      	ldr	r1, [r7, #0]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 fa7d 	bl	800c146 <USBD_CtlError>
            err++;
 800bc4c:	7afb      	ldrb	r3, [r7, #11]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	72fb      	strb	r3, [r7, #11]
          break;
 800bc52:	e06f      	b.n	800bd34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00b      	beq.n	800bc78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	7c12      	ldrb	r2, [r2, #16]
 800bc6c:	f107 0108 	add.w	r1, r7, #8
 800bc70:	4610      	mov	r0, r2
 800bc72:	4798      	blx	r3
 800bc74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc76:	e05d      	b.n	800bd34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc78:	6839      	ldr	r1, [r7, #0]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 fa63 	bl	800c146 <USBD_CtlError>
            err++;
 800bc80:	7afb      	ldrb	r3, [r7, #11]
 800bc82:	3301      	adds	r3, #1
 800bc84:	72fb      	strb	r3, [r7, #11]
          break;
 800bc86:	e055      	b.n	800bd34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00b      	beq.n	800bcac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	7c12      	ldrb	r2, [r2, #16]
 800bca0:	f107 0108 	add.w	r1, r7, #8
 800bca4:	4610      	mov	r0, r2
 800bca6:	4798      	blx	r3
 800bca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcaa:	e043      	b.n	800bd34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fa49 	bl	800c146 <USBD_CtlError>
            err++;
 800bcb4:	7afb      	ldrb	r3, [r7, #11]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	72fb      	strb	r3, [r7, #11]
          break;
 800bcba:	e03b      	b.n	800bd34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00b      	beq.n	800bce0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcce:	695b      	ldr	r3, [r3, #20]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	7c12      	ldrb	r2, [r2, #16]
 800bcd4:	f107 0108 	add.w	r1, r7, #8
 800bcd8:	4610      	mov	r0, r2
 800bcda:	4798      	blx	r3
 800bcdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcde:	e029      	b.n	800bd34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fa2f 	bl	800c146 <USBD_CtlError>
            err++;
 800bce8:	7afb      	ldrb	r3, [r7, #11]
 800bcea:	3301      	adds	r3, #1
 800bcec:	72fb      	strb	r3, [r7, #11]
          break;
 800bcee:	e021      	b.n	800bd34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00b      	beq.n	800bd14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	7c12      	ldrb	r2, [r2, #16]
 800bd08:	f107 0108 	add.w	r1, r7, #8
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	4798      	blx	r3
 800bd10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd12:	e00f      	b.n	800bd34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd14:	6839      	ldr	r1, [r7, #0]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fa15 	bl	800c146 <USBD_CtlError>
            err++;
 800bd1c:	7afb      	ldrb	r3, [r7, #11]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	72fb      	strb	r3, [r7, #11]
          break;
 800bd22:	e007      	b.n	800bd34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bd24:	6839      	ldr	r1, [r7, #0]
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 fa0d 	bl	800c146 <USBD_CtlError>
          err++;
 800bd2c:	7afb      	ldrb	r3, [r7, #11]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bd32:	e038      	b.n	800bda6 <USBD_GetDescriptor+0x286>
 800bd34:	e037      	b.n	800bda6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	7c1b      	ldrb	r3, [r3, #16]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d109      	bne.n	800bd52 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd46:	f107 0208 	add.w	r2, r7, #8
 800bd4a:	4610      	mov	r0, r2
 800bd4c:	4798      	blx	r3
 800bd4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd50:	e029      	b.n	800bda6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd52:	6839      	ldr	r1, [r7, #0]
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f9f6 	bl	800c146 <USBD_CtlError>
        err++;
 800bd5a:	7afb      	ldrb	r3, [r7, #11]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd60:	e021      	b.n	800bda6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	7c1b      	ldrb	r3, [r3, #16]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10d      	bne.n	800bd86 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd72:	f107 0208 	add.w	r2, r7, #8
 800bd76:	4610      	mov	r0, r2
 800bd78:	4798      	blx	r3
 800bd7a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	2207      	movs	r2, #7
 800bd82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd84:	e00f      	b.n	800bda6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd86:	6839      	ldr	r1, [r7, #0]
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 f9dc 	bl	800c146 <USBD_CtlError>
        err++;
 800bd8e:	7afb      	ldrb	r3, [r7, #11]
 800bd90:	3301      	adds	r3, #1
 800bd92:	72fb      	strb	r3, [r7, #11]
      break;
 800bd94:	e007      	b.n	800bda6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 f9d4 	bl	800c146 <USBD_CtlError>
      err++;
 800bd9e:	7afb      	ldrb	r3, [r7, #11]
 800bda0:	3301      	adds	r3, #1
 800bda2:	72fb      	strb	r3, [r7, #11]
      break;
 800bda4:	bf00      	nop
  }

  if (err != 0U)
 800bda6:	7afb      	ldrb	r3, [r7, #11]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d11c      	bne.n	800bde6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bdac:	893b      	ldrh	r3, [r7, #8]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d011      	beq.n	800bdd6 <USBD_GetDescriptor+0x2b6>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	88db      	ldrh	r3, [r3, #6]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00d      	beq.n	800bdd6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	88da      	ldrh	r2, [r3, #6]
 800bdbe:	893b      	ldrh	r3, [r7, #8]
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	bf28      	it	cs
 800bdc4:	4613      	movcs	r3, r2
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bdca:	893b      	ldrh	r3, [r7, #8]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	68f9      	ldr	r1, [r7, #12]
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fa22 	bl	800c21a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	88db      	ldrh	r3, [r3, #6]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d104      	bne.n	800bde8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fa79 	bl	800c2d6 <USBD_CtlSendStatus>
 800bde4:	e000      	b.n	800bde8 <USBD_GetDescriptor+0x2c8>
    return;
 800bde6:	bf00      	nop
    }
  }
}
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop

0800bdf0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	889b      	ldrh	r3, [r3, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d130      	bne.n	800be64 <USBD_SetAddress+0x74>
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	88db      	ldrh	r3, [r3, #6]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d12c      	bne.n	800be64 <USBD_SetAddress+0x74>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	885b      	ldrh	r3, [r3, #2]
 800be0e:	2b7f      	cmp	r3, #127	; 0x7f
 800be10:	d828      	bhi.n	800be64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	885b      	ldrh	r3, [r3, #2]
 800be16:	b2db      	uxtb	r3, r3
 800be18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be24:	2b03      	cmp	r3, #3
 800be26:	d104      	bne.n	800be32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f98b 	bl	800c146 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be30:	e01d      	b.n	800be6e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	7bfa      	ldrb	r2, [r7, #15]
 800be36:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fe48 	bl	800cad4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fa46 	bl	800c2d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d004      	beq.n	800be5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2202      	movs	r2, #2
 800be54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be58:	e009      	b.n	800be6e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2201      	movs	r2, #1
 800be5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be62:	e004      	b.n	800be6e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f96d 	bl	800c146 <USBD_CtlError>
  }
}
 800be6c:	bf00      	nop
 800be6e:	bf00      	nop
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
	...

0800be78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	885b      	ldrh	r3, [r3, #2]
 800be86:	b2da      	uxtb	r2, r3
 800be88:	4b41      	ldr	r3, [pc, #260]	; (800bf90 <USBD_SetConfig+0x118>)
 800be8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be8c:	4b40      	ldr	r3, [pc, #256]	; (800bf90 <USBD_SetConfig+0x118>)
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	2b01      	cmp	r3, #1
 800be92:	d904      	bls.n	800be9e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f955 	bl	800c146 <USBD_CtlError>
 800be9c:	e075      	b.n	800bf8a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d002      	beq.n	800beae <USBD_SetConfig+0x36>
 800bea8:	2b03      	cmp	r3, #3
 800beaa:	d023      	beq.n	800bef4 <USBD_SetConfig+0x7c>
 800beac:	e062      	b.n	800bf74 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800beae:	4b38      	ldr	r3, [pc, #224]	; (800bf90 <USBD_SetConfig+0x118>)
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d01a      	beq.n	800beec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800beb6:	4b36      	ldr	r3, [pc, #216]	; (800bf90 <USBD_SetConfig+0x118>)
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	461a      	mov	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2203      	movs	r2, #3
 800bec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bec8:	4b31      	ldr	r3, [pc, #196]	; (800bf90 <USBD_SetConfig+0x118>)
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7ff f9e7 	bl	800b2a2 <USBD_SetClassConfig>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d104      	bne.n	800bee4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 f932 	bl	800c146 <USBD_CtlError>
            return;
 800bee2:	e052      	b.n	800bf8a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f9f6 	bl	800c2d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800beea:	e04e      	b.n	800bf8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 f9f2 	bl	800c2d6 <USBD_CtlSendStatus>
        break;
 800bef2:	e04a      	b.n	800bf8a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bef4:	4b26      	ldr	r3, [pc, #152]	; (800bf90 <USBD_SetConfig+0x118>)
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d112      	bne.n	800bf22 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2202      	movs	r2, #2
 800bf00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bf04:	4b22      	ldr	r3, [pc, #136]	; (800bf90 <USBD_SetConfig+0x118>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	461a      	mov	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bf0e:	4b20      	ldr	r3, [pc, #128]	; (800bf90 <USBD_SetConfig+0x118>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff f9e3 	bl	800b2e0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f9db 	bl	800c2d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bf20:	e033      	b.n	800bf8a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bf22:	4b1b      	ldr	r3, [pc, #108]	; (800bf90 <USBD_SetConfig+0x118>)
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d01d      	beq.n	800bf6c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	4619      	mov	r1, r3
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7ff f9d1 	bl	800b2e0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bf3e:	4b14      	ldr	r3, [pc, #80]	; (800bf90 <USBD_SetConfig+0x118>)
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	461a      	mov	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bf48:	4b11      	ldr	r3, [pc, #68]	; (800bf90 <USBD_SetConfig+0x118>)
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7ff f9a7 	bl	800b2a2 <USBD_SetClassConfig>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d104      	bne.n	800bf64 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 f8f2 	bl	800c146 <USBD_CtlError>
            return;
 800bf62:	e012      	b.n	800bf8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 f9b6 	bl	800c2d6 <USBD_CtlSendStatus>
        break;
 800bf6a:	e00e      	b.n	800bf8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 f9b2 	bl	800c2d6 <USBD_CtlSendStatus>
        break;
 800bf72:	e00a      	b.n	800bf8a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bf74:	6839      	ldr	r1, [r7, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f8e5 	bl	800c146 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bf7c:	4b04      	ldr	r3, [pc, #16]	; (800bf90 <USBD_SetConfig+0x118>)
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	4619      	mov	r1, r3
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff f9ac 	bl	800b2e0 <USBD_ClrClassConfig>
        break;
 800bf88:	bf00      	nop
    }
  }
}
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	200002f8 	.word	0x200002f8

0800bf94 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	88db      	ldrh	r3, [r3, #6]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d004      	beq.n	800bfb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 f8cc 	bl	800c146 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bfae:	e022      	b.n	800bff6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	dc02      	bgt.n	800bfc0 <USBD_GetConfig+0x2c>
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	dc03      	bgt.n	800bfc6 <USBD_GetConfig+0x32>
 800bfbe:	e015      	b.n	800bfec <USBD_GetConfig+0x58>
 800bfc0:	2b03      	cmp	r3, #3
 800bfc2:	d00b      	beq.n	800bfdc <USBD_GetConfig+0x48>
 800bfc4:	e012      	b.n	800bfec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	3308      	adds	r3, #8
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 f920 	bl	800c21a <USBD_CtlSendData>
        break;
 800bfda:	e00c      	b.n	800bff6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	3304      	adds	r3, #4
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f918 	bl	800c21a <USBD_CtlSendData>
        break;
 800bfea:	e004      	b.n	800bff6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f8a9 	bl	800c146 <USBD_CtlError>
        break;
 800bff4:	bf00      	nop
}
 800bff6:	bf00      	nop
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b082      	sub	sp, #8
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c00e:	3b01      	subs	r3, #1
 800c010:	2b02      	cmp	r3, #2
 800c012:	d81e      	bhi.n	800c052 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	88db      	ldrh	r3, [r3, #6]
 800c018:	2b02      	cmp	r3, #2
 800c01a:	d004      	beq.n	800c026 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f891 	bl	800c146 <USBD_CtlError>
        break;
 800c024:	e01a      	b.n	800c05c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2201      	movs	r2, #1
 800c02a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c032:	2b00      	cmp	r3, #0
 800c034:	d005      	beq.n	800c042 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	f043 0202 	orr.w	r2, r3, #2
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	330c      	adds	r3, #12
 800c046:	2202      	movs	r2, #2
 800c048:	4619      	mov	r1, r3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f8e5 	bl	800c21a <USBD_CtlSendData>
      break;
 800c050:	e004      	b.n	800c05c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 f876 	bl	800c146 <USBD_CtlError>
      break;
 800c05a:	bf00      	nop
  }
}
 800c05c:	bf00      	nop
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	885b      	ldrh	r3, [r3, #2]
 800c072:	2b01      	cmp	r3, #1
 800c074:	d106      	bne.n	800c084 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2201      	movs	r2, #1
 800c07a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f929 	bl	800c2d6 <USBD_CtlSendStatus>
  }
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c09c:	3b01      	subs	r3, #1
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	d80b      	bhi.n	800c0ba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	885b      	ldrh	r3, [r3, #2]
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d10c      	bne.n	800c0c4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f90f 	bl	800c2d6 <USBD_CtlSendStatus>
      }
      break;
 800c0b8:	e004      	b.n	800c0c4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 f842 	bl	800c146 <USBD_CtlError>
      break;
 800c0c2:	e000      	b.n	800c0c6 <USBD_ClrFeature+0x3a>
      break;
 800c0c4:	bf00      	nop
  }
}
 800c0c6:	bf00      	nop
 800c0c8:	3708      	adds	r7, #8
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b083      	sub	sp, #12
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	781a      	ldrb	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	785a      	ldrb	r2, [r3, #1]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	3302      	adds	r3, #2
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	3303      	adds	r3, #3
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	021b      	lsls	r3, r3, #8
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	4413      	add	r3, r2
 800c0fe:	b29a      	uxth	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	3304      	adds	r3, #4
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	b29a      	uxth	r2, r3
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	3305      	adds	r3, #5
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	b29b      	uxth	r3, r3
 800c114:	021b      	lsls	r3, r3, #8
 800c116:	b29b      	uxth	r3, r3
 800c118:	4413      	add	r3, r2
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	3306      	adds	r3, #6
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	b29a      	uxth	r2, r3
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	3307      	adds	r3, #7
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	b29b      	uxth	r3, r3
 800c130:	021b      	lsls	r3, r3, #8
 800c132:	b29b      	uxth	r3, r3
 800c134:	4413      	add	r3, r2
 800c136:	b29a      	uxth	r2, r3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	80da      	strh	r2, [r3, #6]

}
 800c13c:	bf00      	nop
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	bc80      	pop	{r7}
 800c144:	4770      	bx	lr

0800c146 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b082      	sub	sp, #8
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
 800c14e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c150:	2180      	movs	r1, #128	; 0x80
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 fc54 	bl	800ca00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c158:	2100      	movs	r1, #0
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fc50 	bl	800ca00 <USBD_LL_StallEP>
}
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c174:	2300      	movs	r3, #0
 800c176:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d032      	beq.n	800c1e4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f000 f834 	bl	800c1ec <USBD_GetLen>
 800c184:	4603      	mov	r3, r0
 800c186:	3301      	adds	r3, #1
 800c188:	b29b      	uxth	r3, r3
 800c18a:	005b      	lsls	r3, r3, #1
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c192:	7dfb      	ldrb	r3, [r7, #23]
 800c194:	1c5a      	adds	r2, r3, #1
 800c196:	75fa      	strb	r2, [r7, #23]
 800c198:	461a      	mov	r2, r3
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	4413      	add	r3, r2
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	7812      	ldrb	r2, [r2, #0]
 800c1a2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c1a4:	7dfb      	ldrb	r3, [r7, #23]
 800c1a6:	1c5a      	adds	r2, r3, #1
 800c1a8:	75fa      	strb	r2, [r7, #23]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	2203      	movs	r2, #3
 800c1b2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c1b4:	e012      	b.n	800c1dc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	1c5a      	adds	r2, r3, #1
 800c1ba:	60fa      	str	r2, [r7, #12]
 800c1bc:	7dfa      	ldrb	r2, [r7, #23]
 800c1be:	1c51      	adds	r1, r2, #1
 800c1c0:	75f9      	strb	r1, [r7, #23]
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	440a      	add	r2, r1
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c1cc:	7dfb      	ldrb	r3, [r7, #23]
 800c1ce:	1c5a      	adds	r2, r3, #1
 800c1d0:	75fa      	strb	r2, [r7, #23]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	2200      	movs	r2, #0
 800c1da:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1e8      	bne.n	800c1b6 <USBD_GetString+0x4e>
    }
  }
}
 800c1e4:	bf00      	nop
 800c1e6:	3718      	adds	r7, #24
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c1f8:	e005      	b.n	800c206 <USBD_GetLen+0x1a>
  {
    len++;
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	3301      	adds	r3, #1
 800c204:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1f5      	bne.n	800c1fa <USBD_GetLen+0xe>
  }

  return len;
 800c20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	bc80      	pop	{r7}
 800c218:	4770      	bx	lr

0800c21a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c21a:	b580      	push	{r7, lr}
 800c21c:	b084      	sub	sp, #16
 800c21e:	af00      	add	r7, sp, #0
 800c220:	60f8      	str	r0, [r7, #12]
 800c222:	60b9      	str	r1, [r7, #8]
 800c224:	4613      	mov	r3, r2
 800c226:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2202      	movs	r2, #2
 800c22c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c230:	88fa      	ldrh	r2, [r7, #6]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c236:	88fa      	ldrh	r2, [r7, #6]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c23c:	88fb      	ldrh	r3, [r7, #6]
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	2100      	movs	r1, #0
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f000 fc65 	bl	800cb12 <USBD_LL_Transmit>

  return USBD_OK;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b084      	sub	sp, #16
 800c256:	af00      	add	r7, sp, #0
 800c258:	60f8      	str	r0, [r7, #12]
 800c25a:	60b9      	str	r1, [r7, #8]
 800c25c:	4613      	mov	r3, r2
 800c25e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c260:	88fb      	ldrh	r3, [r7, #6]
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	2100      	movs	r1, #0
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f000 fc53 	bl	800cb12 <USBD_LL_Transmit>

  return USBD_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b084      	sub	sp, #16
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	60f8      	str	r0, [r7, #12]
 800c27e:	60b9      	str	r1, [r7, #8]
 800c280:	4613      	mov	r3, r2
 800c282:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2203      	movs	r2, #3
 800c288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c28c:	88fa      	ldrh	r2, [r7, #6]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c294:	88fa      	ldrh	r2, [r7, #6]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c29c:	88fb      	ldrh	r3, [r7, #6]
 800c29e:	68ba      	ldr	r2, [r7, #8]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f000 fc58 	bl	800cb58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b084      	sub	sp, #16
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	60f8      	str	r0, [r7, #12]
 800c2ba:	60b9      	str	r1, [r7, #8]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2c0:	88fb      	ldrh	r3, [r7, #6]
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f000 fc46 	bl	800cb58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b082      	sub	sp, #8
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2204      	movs	r2, #4
 800c2e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 fc10 	bl	800cb12 <USBD_LL_Transmit>

  return USBD_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2205      	movs	r2, #5
 800c308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c30c:	2300      	movs	r3, #0
 800c30e:	2200      	movs	r2, #0
 800c310:	2100      	movs	r1, #0
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fc20 	bl	800cb58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
	...

0800c324 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c328:	2200      	movs	r2, #0
 800c32a:	4912      	ldr	r1, [pc, #72]	; (800c374 <MX_USB_DEVICE_Init+0x50>)
 800c32c:	4812      	ldr	r0, [pc, #72]	; (800c378 <MX_USB_DEVICE_Init+0x54>)
 800c32e:	f7fe ff5e 	bl	800b1ee <USBD_Init>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d001      	beq.n	800c33c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c338:	f7f6 fef4 	bl	8003124 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c33c:	490f      	ldr	r1, [pc, #60]	; (800c37c <MX_USB_DEVICE_Init+0x58>)
 800c33e:	480e      	ldr	r0, [pc, #56]	; (800c378 <MX_USB_DEVICE_Init+0x54>)
 800c340:	f7fe ff80 	bl	800b244 <USBD_RegisterClass>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d001      	beq.n	800c34e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c34a:	f7f6 feeb 	bl	8003124 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c34e:	490c      	ldr	r1, [pc, #48]	; (800c380 <MX_USB_DEVICE_Init+0x5c>)
 800c350:	4809      	ldr	r0, [pc, #36]	; (800c378 <MX_USB_DEVICE_Init+0x54>)
 800c352:	f7fe feb1 	bl	800b0b8 <USBD_CDC_RegisterInterface>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d001      	beq.n	800c360 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c35c:	f7f6 fee2 	bl	8003124 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c360:	4805      	ldr	r0, [pc, #20]	; (800c378 <MX_USB_DEVICE_Init+0x54>)
 800c362:	f7fe ff88 	bl	800b276 <USBD_Start>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c36c:	f7f6 feda 	bl	8003124 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c370:	bf00      	nop
 800c372:	bd80      	pop	{r7, pc}
 800c374:	20000160 	.word	0x20000160
 800c378:	2000070c 	.word	0x2000070c
 800c37c:	2000004c 	.word	0x2000004c
 800c380:	20000150 	.word	0x20000150

0800c384 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c388:	2200      	movs	r2, #0
 800c38a:	4905      	ldr	r1, [pc, #20]	; (800c3a0 <CDC_Init_FS+0x1c>)
 800c38c:	4805      	ldr	r0, [pc, #20]	; (800c3a4 <CDC_Init_FS+0x20>)
 800c38e:	f7fe fea9 	bl	800b0e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c392:	4905      	ldr	r1, [pc, #20]	; (800c3a8 <CDC_Init_FS+0x24>)
 800c394:	4803      	ldr	r0, [pc, #12]	; (800c3a4 <CDC_Init_FS+0x20>)
 800c396:	f7fe febe 	bl	800b116 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c39a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	20000db8 	.word	0x20000db8
 800c3a4:	2000070c 	.word	0x2000070c
 800c3a8:	200009d0 	.word	0x200009d0

0800c3ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c3b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bc80      	pop	{r7}
 800c3b8:	4770      	bx	lr
	...

0800c3bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	6039      	str	r1, [r7, #0]
 800c3c6:	71fb      	strb	r3, [r7, #7]
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c3cc:	79fb      	ldrb	r3, [r7, #7]
 800c3ce:	2b23      	cmp	r3, #35	; 0x23
 800c3d0:	d84a      	bhi.n	800c468 <CDC_Control_FS+0xac>
 800c3d2:	a201      	add	r2, pc, #4	; (adr r2, 800c3d8 <CDC_Control_FS+0x1c>)
 800c3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d8:	0800c469 	.word	0x0800c469
 800c3dc:	0800c469 	.word	0x0800c469
 800c3e0:	0800c469 	.word	0x0800c469
 800c3e4:	0800c469 	.word	0x0800c469
 800c3e8:	0800c469 	.word	0x0800c469
 800c3ec:	0800c469 	.word	0x0800c469
 800c3f0:	0800c469 	.word	0x0800c469
 800c3f4:	0800c469 	.word	0x0800c469
 800c3f8:	0800c469 	.word	0x0800c469
 800c3fc:	0800c469 	.word	0x0800c469
 800c400:	0800c469 	.word	0x0800c469
 800c404:	0800c469 	.word	0x0800c469
 800c408:	0800c469 	.word	0x0800c469
 800c40c:	0800c469 	.word	0x0800c469
 800c410:	0800c469 	.word	0x0800c469
 800c414:	0800c469 	.word	0x0800c469
 800c418:	0800c469 	.word	0x0800c469
 800c41c:	0800c469 	.word	0x0800c469
 800c420:	0800c469 	.word	0x0800c469
 800c424:	0800c469 	.word	0x0800c469
 800c428:	0800c469 	.word	0x0800c469
 800c42c:	0800c469 	.word	0x0800c469
 800c430:	0800c469 	.word	0x0800c469
 800c434:	0800c469 	.word	0x0800c469
 800c438:	0800c469 	.word	0x0800c469
 800c43c:	0800c469 	.word	0x0800c469
 800c440:	0800c469 	.word	0x0800c469
 800c444:	0800c469 	.word	0x0800c469
 800c448:	0800c469 	.word	0x0800c469
 800c44c:	0800c469 	.word	0x0800c469
 800c450:	0800c469 	.word	0x0800c469
 800c454:	0800c469 	.word	0x0800c469
 800c458:	0800c469 	.word	0x0800c469
 800c45c:	0800c469 	.word	0x0800c469
 800c460:	0800c469 	.word	0x0800c469
 800c464:	0800c469 	.word	0x0800c469
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c468:	bf00      	nop
  }

  return (USBD_OK);
 800c46a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	bc80      	pop	{r7}
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop

0800c478 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c482:	6879      	ldr	r1, [r7, #4]
 800c484:	4805      	ldr	r0, [pc, #20]	; (800c49c <CDC_Receive_FS+0x24>)
 800c486:	f7fe fe46 	bl	800b116 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c48a:	4804      	ldr	r0, [pc, #16]	; (800c49c <CDC_Receive_FS+0x24>)
 800c48c:	f7fe fe85 	bl	800b19a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c490:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c492:	4618      	mov	r0, r3
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	2000070c 	.word	0x2000070c

0800c4a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c4b0:	4b0d      	ldr	r3, [pc, #52]	; (800c4e8 <CDC_Transmit_FS+0x48>)
 800c4b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e00b      	b.n	800c4de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c4c6:	887b      	ldrh	r3, [r7, #2]
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	6879      	ldr	r1, [r7, #4]
 800c4cc:	4806      	ldr	r0, [pc, #24]	; (800c4e8 <CDC_Transmit_FS+0x48>)
 800c4ce:	f7fe fe09 	bl	800b0e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c4d2:	4805      	ldr	r0, [pc, #20]	; (800c4e8 <CDC_Transmit_FS+0x48>)
 800c4d4:	f7fe fe32 	bl	800b13c <USBD_CDC_TransmitPacket>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3710      	adds	r7, #16
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	2000070c 	.word	0x2000070c

0800c4ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	6039      	str	r1, [r7, #0]
 800c4f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	2212      	movs	r2, #18
 800c4fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c4fe:	4b03      	ldr	r3, [pc, #12]	; (800c50c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c500:	4618      	mov	r0, r3
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	bc80      	pop	{r7}
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	2000017c 	.word	0x2000017c

0800c510 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	4603      	mov	r3, r0
 800c518:	6039      	str	r1, [r7, #0]
 800c51a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	2204      	movs	r2, #4
 800c520:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c522:	4b03      	ldr	r3, [pc, #12]	; (800c530 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c524:	4618      	mov	r0, r3
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	bc80      	pop	{r7}
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	20000190 	.word	0x20000190

0800c534 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	4603      	mov	r3, r0
 800c53c:	6039      	str	r1, [r7, #0]
 800c53e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c540:	79fb      	ldrb	r3, [r7, #7]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d105      	bne.n	800c552 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c546:	683a      	ldr	r2, [r7, #0]
 800c548:	4907      	ldr	r1, [pc, #28]	; (800c568 <USBD_FS_ProductStrDescriptor+0x34>)
 800c54a:	4808      	ldr	r0, [pc, #32]	; (800c56c <USBD_FS_ProductStrDescriptor+0x38>)
 800c54c:	f7ff fe0c 	bl	800c168 <USBD_GetString>
 800c550:	e004      	b.n	800c55c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c552:	683a      	ldr	r2, [r7, #0]
 800c554:	4904      	ldr	r1, [pc, #16]	; (800c568 <USBD_FS_ProductStrDescriptor+0x34>)
 800c556:	4805      	ldr	r0, [pc, #20]	; (800c56c <USBD_FS_ProductStrDescriptor+0x38>)
 800c558:	f7ff fe06 	bl	800c168 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c55c:	4b02      	ldr	r3, [pc, #8]	; (800c568 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3708      	adds	r7, #8
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	200011a0 	.word	0x200011a0
 800c56c:	0800d7f8 	.word	0x0800d7f8

0800c570 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	4603      	mov	r3, r0
 800c578:	6039      	str	r1, [r7, #0]
 800c57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	4904      	ldr	r1, [pc, #16]	; (800c590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c580:	4804      	ldr	r0, [pc, #16]	; (800c594 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c582:	f7ff fdf1 	bl	800c168 <USBD_GetString>
  return USBD_StrDesc;
 800c586:	4b02      	ldr	r3, [pc, #8]	; (800c590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	200011a0 	.word	0x200011a0
 800c594:	0800d810 	.word	0x0800d810

0800c598 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	6039      	str	r1, [r7, #0]
 800c5a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	221a      	movs	r2, #26
 800c5a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c5aa:	f000 f843 	bl	800c634 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c5ae:	4b02      	ldr	r3, [pc, #8]	; (800c5b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	20000194 	.word	0x20000194

0800c5bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	6039      	str	r1, [r7, #0]
 800c5c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c5c8:	79fb      	ldrb	r3, [r7, #7]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d105      	bne.n	800c5da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5ce:	683a      	ldr	r2, [r7, #0]
 800c5d0:	4907      	ldr	r1, [pc, #28]	; (800c5f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5d2:	4808      	ldr	r0, [pc, #32]	; (800c5f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5d4:	f7ff fdc8 	bl	800c168 <USBD_GetString>
 800c5d8:	e004      	b.n	800c5e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	4904      	ldr	r1, [pc, #16]	; (800c5f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5de:	4805      	ldr	r0, [pc, #20]	; (800c5f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5e0:	f7ff fdc2 	bl	800c168 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5e4:	4b02      	ldr	r3, [pc, #8]	; (800c5f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	200011a0 	.word	0x200011a0
 800c5f4:	0800d824 	.word	0x0800d824

0800c5f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	4603      	mov	r3, r0
 800c600:	6039      	str	r1, [r7, #0]
 800c602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c604:	79fb      	ldrb	r3, [r7, #7]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d105      	bne.n	800c616 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	4907      	ldr	r1, [pc, #28]	; (800c62c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c60e:	4808      	ldr	r0, [pc, #32]	; (800c630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c610:	f7ff fdaa 	bl	800c168 <USBD_GetString>
 800c614:	e004      	b.n	800c620 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c616:	683a      	ldr	r2, [r7, #0]
 800c618:	4904      	ldr	r1, [pc, #16]	; (800c62c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c61a:	4805      	ldr	r0, [pc, #20]	; (800c630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c61c:	f7ff fda4 	bl	800c168 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c620:	4b02      	ldr	r3, [pc, #8]	; (800c62c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c622:	4618      	mov	r0, r3
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	200011a0 	.word	0x200011a0
 800c630:	0800d830 	.word	0x0800d830

0800c634 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c63a:	4b0f      	ldr	r3, [pc, #60]	; (800c678 <Get_SerialNum+0x44>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c640:	4b0e      	ldr	r3, [pc, #56]	; (800c67c <Get_SerialNum+0x48>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c646:	4b0e      	ldr	r3, [pc, #56]	; (800c680 <Get_SerialNum+0x4c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4413      	add	r3, r2
 800c652:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d009      	beq.n	800c66e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c65a:	2208      	movs	r2, #8
 800c65c:	4909      	ldr	r1, [pc, #36]	; (800c684 <Get_SerialNum+0x50>)
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f000 f814 	bl	800c68c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c664:	2204      	movs	r2, #4
 800c666:	4908      	ldr	r1, [pc, #32]	; (800c688 <Get_SerialNum+0x54>)
 800c668:	68b8      	ldr	r0, [r7, #8]
 800c66a:	f000 f80f 	bl	800c68c <IntToUnicode>
  }
}
 800c66e:	bf00      	nop
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	1ffff7e8 	.word	0x1ffff7e8
 800c67c:	1ffff7ec 	.word	0x1ffff7ec
 800c680:	1ffff7f0 	.word	0x1ffff7f0
 800c684:	20000196 	.word	0x20000196
 800c688:	200001a6 	.word	0x200001a6

0800c68c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b087      	sub	sp, #28
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	4613      	mov	r3, r2
 800c698:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c69e:	2300      	movs	r3, #0
 800c6a0:	75fb      	strb	r3, [r7, #23]
 800c6a2:	e027      	b.n	800c6f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	0f1b      	lsrs	r3, r3, #28
 800c6a8:	2b09      	cmp	r3, #9
 800c6aa:	d80b      	bhi.n	800c6c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	0f1b      	lsrs	r3, r3, #28
 800c6b0:	b2da      	uxtb	r2, r3
 800c6b2:	7dfb      	ldrb	r3, [r7, #23]
 800c6b4:	005b      	lsls	r3, r3, #1
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	440b      	add	r3, r1
 800c6bc:	3230      	adds	r2, #48	; 0x30
 800c6be:	b2d2      	uxtb	r2, r2
 800c6c0:	701a      	strb	r2, [r3, #0]
 800c6c2:	e00a      	b.n	800c6da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	0f1b      	lsrs	r3, r3, #28
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	7dfb      	ldrb	r3, [r7, #23]
 800c6cc:	005b      	lsls	r3, r3, #1
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	440b      	add	r3, r1
 800c6d4:	3237      	adds	r2, #55	; 0x37
 800c6d6:	b2d2      	uxtb	r2, r2
 800c6d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	011b      	lsls	r3, r3, #4
 800c6de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c6e0:	7dfb      	ldrb	r3, [r7, #23]
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	68ba      	ldr	r2, [r7, #8]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c6ee:	7dfb      	ldrb	r3, [r7, #23]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	75fb      	strb	r3, [r7, #23]
 800c6f4:	7dfa      	ldrb	r2, [r7, #23]
 800c6f6:	79fb      	ldrb	r3, [r7, #7]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d3d3      	bcc.n	800c6a4 <IntToUnicode+0x18>
  }
}
 800c6fc:	bf00      	nop
 800c6fe:	bf00      	nop
 800c700:	371c      	adds	r7, #28
 800c702:	46bd      	mov	sp, r7
 800c704:	bc80      	pop	{r7}
 800c706:	4770      	bx	lr

0800c708 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a0d      	ldr	r2, [pc, #52]	; (800c74c <HAL_PCD_MspInit+0x44>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d113      	bne.n	800c742 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c71a:	4b0d      	ldr	r3, [pc, #52]	; (800c750 <HAL_PCD_MspInit+0x48>)
 800c71c:	69db      	ldr	r3, [r3, #28]
 800c71e:	4a0c      	ldr	r2, [pc, #48]	; (800c750 <HAL_PCD_MspInit+0x48>)
 800c720:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c724:	61d3      	str	r3, [r2, #28]
 800c726:	4b0a      	ldr	r3, [pc, #40]	; (800c750 <HAL_PCD_MspInit+0x48>)
 800c728:	69db      	ldr	r3, [r3, #28]
 800c72a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c72e:	60fb      	str	r3, [r7, #12]
 800c730:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c732:	2200      	movs	r2, #0
 800c734:	2100      	movs	r1, #0
 800c736:	2014      	movs	r0, #20
 800c738:	f7f7 faa7 	bl	8003c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c73c:	2014      	movs	r0, #20
 800c73e:	f7f7 fac0 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c742:	bf00      	nop
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	40005c00 	.word	0x40005c00
 800c750:	40021000 	.word	0x40021000

0800c754 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c768:	4619      	mov	r1, r3
 800c76a:	4610      	mov	r0, r2
 800c76c:	f7fe fdcb 	bl	800b306 <USBD_LL_SetupStage>
}
 800c770:	bf00      	nop
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c78a:	78fa      	ldrb	r2, [r7, #3]
 800c78c:	6879      	ldr	r1, [r7, #4]
 800c78e:	4613      	mov	r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	00db      	lsls	r3, r3, #3
 800c796:	440b      	add	r3, r1
 800c798:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	78fb      	ldrb	r3, [r7, #3]
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	f7fe fdfd 	bl	800b3a0 <USBD_LL_DataOutStage>
}
 800c7a6:	bf00      	nop
 800c7a8:	3708      	adds	r7, #8
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}

0800c7ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b082      	sub	sp, #8
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c7c0:	78fa      	ldrb	r2, [r7, #3]
 800c7c2:	6879      	ldr	r1, [r7, #4]
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4413      	add	r3, r2
 800c7ca:	00db      	lsls	r3, r3, #3
 800c7cc:	440b      	add	r3, r1
 800c7ce:	333c      	adds	r3, #60	; 0x3c
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	78fb      	ldrb	r3, [r7, #3]
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	f7fe fe54 	bl	800b482 <USBD_LL_DataInStage>
}
 800c7da:	bf00      	nop
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b082      	sub	sp, #8
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fe ff64 	bl	800b6be <USBD_LL_SOF>
}
 800c7f6:	bf00      	nop
 800c7f8:	3708      	adds	r7, #8
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b084      	sub	sp, #16
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c806:	2301      	movs	r3, #1
 800c808:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d001      	beq.n	800c816 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c812:	f7f6 fc87 	bl	8003124 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c81c:	7bfa      	ldrb	r2, [r7, #15]
 800c81e:	4611      	mov	r1, r2
 800c820:	4618      	mov	r0, r3
 800c822:	f7fe ff14 	bl	800b64e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7fe fecd 	bl	800b5cc <USBD_LL_Reset>
}
 800c832:	bf00      	nop
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
	...

0800c83c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7fe ff0e 	bl	800b66c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	699b      	ldr	r3, [r3, #24]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d005      	beq.n	800c864 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c858:	4b04      	ldr	r3, [pc, #16]	; (800c86c <HAL_PCD_SuspendCallback+0x30>)
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	4a03      	ldr	r2, [pc, #12]	; (800c86c <HAL_PCD_SuspendCallback+0x30>)
 800c85e:	f043 0306 	orr.w	r3, r3, #6
 800c862:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c864:	bf00      	nop
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	e000ed00 	.word	0xe000ed00

0800c870 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fe ff08 	bl	800b694 <USBD_LL_Resume>
}
 800c884:	bf00      	nop
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c894:	4a28      	ldr	r2, [pc, #160]	; (800c938 <USBD_LL_Init+0xac>)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	4a26      	ldr	r2, [pc, #152]	; (800c938 <USBD_LL_Init+0xac>)
 800c8a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c8a4:	4b24      	ldr	r3, [pc, #144]	; (800c938 <USBD_LL_Init+0xac>)
 800c8a6:	4a25      	ldr	r2, [pc, #148]	; (800c93c <USBD_LL_Init+0xb0>)
 800c8a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c8aa:	4b23      	ldr	r3, [pc, #140]	; (800c938 <USBD_LL_Init+0xac>)
 800c8ac:	2208      	movs	r2, #8
 800c8ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c8b0:	4b21      	ldr	r3, [pc, #132]	; (800c938 <USBD_LL_Init+0xac>)
 800c8b2:	2202      	movs	r2, #2
 800c8b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c8b6:	4b20      	ldr	r3, [pc, #128]	; (800c938 <USBD_LL_Init+0xac>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c8bc:	4b1e      	ldr	r3, [pc, #120]	; (800c938 <USBD_LL_Init+0xac>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c8c2:	4b1d      	ldr	r3, [pc, #116]	; (800c938 <USBD_LL_Init+0xac>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c8c8:	481b      	ldr	r0, [pc, #108]	; (800c938 <USBD_LL_Init+0xac>)
 800c8ca:	f7f7 fe45 	bl	8004558 <HAL_PCD_Init>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d001      	beq.n	800c8d8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c8d4:	f7f6 fc26 	bl	8003124 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c8de:	2318      	movs	r3, #24
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	2100      	movs	r1, #0
 800c8e4:	f7f9 fabb 	bl	8005e5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c8ee:	2358      	movs	r3, #88	; 0x58
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	2180      	movs	r1, #128	; 0x80
 800c8f4:	f7f9 fab3 	bl	8005e5e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c8fe:	23c0      	movs	r3, #192	; 0xc0
 800c900:	2200      	movs	r2, #0
 800c902:	2181      	movs	r1, #129	; 0x81
 800c904:	f7f9 faab 	bl	8005e5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c90e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c912:	2200      	movs	r2, #0
 800c914:	2101      	movs	r1, #1
 800c916:	f7f9 faa2 	bl	8005e5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c920:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c924:	2200      	movs	r2, #0
 800c926:	2182      	movs	r1, #130	; 0x82
 800c928:	f7f9 fa99 	bl	8005e5e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	200013a0 	.word	0x200013a0
 800c93c:	40005c00 	.word	0x40005c00

0800c940 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c948:	2300      	movs	r3, #0
 800c94a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c94c:	2300      	movs	r3, #0
 800c94e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c956:	4618      	mov	r0, r3
 800c958:	f7f7 ff09 	bl	800476e <HAL_PCD_Start>
 800c95c:	4603      	mov	r3, r0
 800c95e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c960:	7bfb      	ldrb	r3, [r7, #15]
 800c962:	4618      	mov	r0, r3
 800c964:	f000 f94e 	bl	800cc04 <USBD_Get_USB_Status>
 800c968:	4603      	mov	r3, r0
 800c96a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c96c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b084      	sub	sp, #16
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	4608      	mov	r0, r1
 800c980:	4611      	mov	r1, r2
 800c982:	461a      	mov	r2, r3
 800c984:	4603      	mov	r3, r0
 800c986:	70fb      	strb	r3, [r7, #3]
 800c988:	460b      	mov	r3, r1
 800c98a:	70bb      	strb	r3, [r7, #2]
 800c98c:	4613      	mov	r3, r2
 800c98e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c990:	2300      	movs	r3, #0
 800c992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c994:	2300      	movs	r3, #0
 800c996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c99e:	78bb      	ldrb	r3, [r7, #2]
 800c9a0:	883a      	ldrh	r2, [r7, #0]
 800c9a2:	78f9      	ldrb	r1, [r7, #3]
 800c9a4:	f7f8 f883 	bl	8004aae <HAL_PCD_EP_Open>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9ac:	7bfb      	ldrb	r3, [r7, #15]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 f928 	bl	800cc04 <USBD_Get_USB_Status>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b084      	sub	sp, #16
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9dc:	78fa      	ldrb	r2, [r7, #3]
 800c9de:	4611      	mov	r1, r2
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7f8 f8ca 	bl	8004b7a <HAL_PCD_EP_Close>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9ea:	7bfb      	ldrb	r3, [r7, #15]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 f909 	bl	800cc04 <USBD_Get_USB_Status>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	460b      	mov	r3, r1
 800ca0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca10:	2300      	movs	r3, #0
 800ca12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca1a:	78fa      	ldrb	r2, [r7, #3]
 800ca1c:	4611      	mov	r1, r2
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7f8 f98a 	bl	8004d38 <HAL_PCD_EP_SetStall>
 800ca24:	4603      	mov	r3, r0
 800ca26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca28:	7bfb      	ldrb	r3, [r7, #15]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f000 f8ea 	bl	800cc04 <USBD_Get_USB_Status>
 800ca30:	4603      	mov	r3, r0
 800ca32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b084      	sub	sp, #16
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	460b      	mov	r3, r1
 800ca48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca58:	78fa      	ldrb	r2, [r7, #3]
 800ca5a:	4611      	mov	r1, r2
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7f8 f9cb 	bl	8004df8 <HAL_PCD_EP_ClrStall>
 800ca62:	4603      	mov	r3, r0
 800ca64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f000 f8cb 	bl	800cc04 <USBD_Get_USB_Status>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	460b      	mov	r3, r1
 800ca86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ca90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	da0c      	bge.n	800cab2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ca98:	78fb      	ldrb	r3, [r7, #3]
 800ca9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca9e:	68f9      	ldr	r1, [r7, #12]
 800caa0:	1c5a      	adds	r2, r3, #1
 800caa2:	4613      	mov	r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4413      	add	r3, r2
 800caa8:	00db      	lsls	r3, r3, #3
 800caaa:	440b      	add	r3, r1
 800caac:	3302      	adds	r3, #2
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	e00b      	b.n	800caca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cab2:	78fb      	ldrb	r3, [r7, #3]
 800cab4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cab8:	68f9      	ldr	r1, [r7, #12]
 800caba:	4613      	mov	r3, r2
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	4413      	add	r3, r2
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	440b      	add	r3, r1
 800cac4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cac8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3714      	adds	r7, #20
 800cace:	46bd      	mov	sp, r7
 800cad0:	bc80      	pop	{r7}
 800cad2:	4770      	bx	lr

0800cad4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	460b      	mov	r3, r1
 800cade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cae0:	2300      	movs	r3, #0
 800cae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cae4:	2300      	movs	r3, #0
 800cae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800caee:	78fa      	ldrb	r2, [r7, #3]
 800caf0:	4611      	mov	r1, r2
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7f7 ffb6 	bl	8004a64 <HAL_PCD_SetAddress>
 800caf8:	4603      	mov	r3, r0
 800cafa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cafc:	7bfb      	ldrb	r3, [r7, #15]
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 f880 	bl	800cc04 <USBD_Get_USB_Status>
 800cb04:	4603      	mov	r3, r0
 800cb06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb08:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b086      	sub	sp, #24
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	60f8      	str	r0, [r7, #12]
 800cb1a:	607a      	str	r2, [r7, #4]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	460b      	mov	r3, r1
 800cb20:	72fb      	strb	r3, [r7, #11]
 800cb22:	4613      	mov	r3, r2
 800cb24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cb34:	893b      	ldrh	r3, [r7, #8]
 800cb36:	7af9      	ldrb	r1, [r7, #11]
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	f7f8 f8ba 	bl	8004cb2 <HAL_PCD_EP_Transmit>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb42:	7dfb      	ldrb	r3, [r7, #23]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f000 f85d 	bl	800cc04 <USBD_Get_USB_Status>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb4e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3718      	adds	r7, #24
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	607a      	str	r2, [r7, #4]
 800cb62:	461a      	mov	r2, r3
 800cb64:	460b      	mov	r3, r1
 800cb66:	72fb      	strb	r3, [r7, #11]
 800cb68:	4613      	mov	r3, r2
 800cb6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cb7a:	893b      	ldrh	r3, [r7, #8]
 800cb7c:	7af9      	ldrb	r1, [r7, #11]
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	f7f8 f843 	bl	8004c0a <HAL_PCD_EP_Receive>
 800cb84:	4603      	mov	r3, r0
 800cb86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb88:	7dfb      	ldrb	r3, [r7, #23]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f000 f83a 	bl	800cc04 <USBD_Get_USB_Status>
 800cb90:	4603      	mov	r3, r0
 800cb92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb94:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3718      	adds	r7, #24
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b082      	sub	sp, #8
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
 800cba6:	460b      	mov	r3, r1
 800cba8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbb0:	78fa      	ldrb	r2, [r7, #3]
 800cbb2:	4611      	mov	r1, r2
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7f8 f865 	bl	8004c84 <HAL_PCD_EP_GetRxCount>
 800cbba:	4603      	mov	r3, r0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cbcc:	4b02      	ldr	r3, [pc, #8]	; (800cbd8 <USBD_static_malloc+0x14>)
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	370c      	adds	r7, #12
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bc80      	pop	{r7}
 800cbd6:	4770      	bx	lr
 800cbd8:	200002fc 	.word	0x200002fc

0800cbdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]

}
 800cbe4:	bf00      	nop
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bc80      	pop	{r7}
 800cbec:	4770      	bx	lr

0800cbee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbee:	b480      	push	{r7}
 800cbf0:	b083      	sub	sp, #12
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cbfa:	bf00      	nop
 800cbfc:	370c      	adds	r7, #12
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bc80      	pop	{r7}
 800cc02:	4770      	bx	lr

0800cc04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc12:	79fb      	ldrb	r3, [r7, #7]
 800cc14:	2b03      	cmp	r3, #3
 800cc16:	d817      	bhi.n	800cc48 <USBD_Get_USB_Status+0x44>
 800cc18:	a201      	add	r2, pc, #4	; (adr r2, 800cc20 <USBD_Get_USB_Status+0x1c>)
 800cc1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc1e:	bf00      	nop
 800cc20:	0800cc31 	.word	0x0800cc31
 800cc24:	0800cc37 	.word	0x0800cc37
 800cc28:	0800cc3d 	.word	0x0800cc3d
 800cc2c:	0800cc43 	.word	0x0800cc43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cc30:	2300      	movs	r3, #0
 800cc32:	73fb      	strb	r3, [r7, #15]
    break;
 800cc34:	e00b      	b.n	800cc4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc36:	2302      	movs	r3, #2
 800cc38:	73fb      	strb	r3, [r7, #15]
    break;
 800cc3a:	e008      	b.n	800cc4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc40:	e005      	b.n	800cc4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc42:	2302      	movs	r3, #2
 800cc44:	73fb      	strb	r3, [r7, #15]
    break;
 800cc46:	e002      	b.n	800cc4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cc48:	2302      	movs	r3, #2
 800cc4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cc4c:	bf00      	nop
  }
  return usb_status;
 800cc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3714      	adds	r7, #20
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bc80      	pop	{r7}
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop

0800cc5c <__errno>:
 800cc5c:	4b01      	ldr	r3, [pc, #4]	; (800cc64 <__errno+0x8>)
 800cc5e:	6818      	ldr	r0, [r3, #0]
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	200001b0 	.word	0x200001b0

0800cc68 <__libc_init_array>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	2600      	movs	r6, #0
 800cc6c:	4d0c      	ldr	r5, [pc, #48]	; (800cca0 <__libc_init_array+0x38>)
 800cc6e:	4c0d      	ldr	r4, [pc, #52]	; (800cca4 <__libc_init_array+0x3c>)
 800cc70:	1b64      	subs	r4, r4, r5
 800cc72:	10a4      	asrs	r4, r4, #2
 800cc74:	42a6      	cmp	r6, r4
 800cc76:	d109      	bne.n	800cc8c <__libc_init_array+0x24>
 800cc78:	f000 fc70 	bl	800d55c <_init>
 800cc7c:	2600      	movs	r6, #0
 800cc7e:	4d0a      	ldr	r5, [pc, #40]	; (800cca8 <__libc_init_array+0x40>)
 800cc80:	4c0a      	ldr	r4, [pc, #40]	; (800ccac <__libc_init_array+0x44>)
 800cc82:	1b64      	subs	r4, r4, r5
 800cc84:	10a4      	asrs	r4, r4, #2
 800cc86:	42a6      	cmp	r6, r4
 800cc88:	d105      	bne.n	800cc96 <__libc_init_array+0x2e>
 800cc8a:	bd70      	pop	{r4, r5, r6, pc}
 800cc8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc90:	4798      	blx	r3
 800cc92:	3601      	adds	r6, #1
 800cc94:	e7ee      	b.n	800cc74 <__libc_init_array+0xc>
 800cc96:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc9a:	4798      	blx	r3
 800cc9c:	3601      	adds	r6, #1
 800cc9e:	e7f2      	b.n	800cc86 <__libc_init_array+0x1e>
 800cca0:	0800da3c 	.word	0x0800da3c
 800cca4:	0800da3c 	.word	0x0800da3c
 800cca8:	0800da3c 	.word	0x0800da3c
 800ccac:	0800da40 	.word	0x0800da40

0800ccb0 <memset>:
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	4402      	add	r2, r0
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d100      	bne.n	800ccba <memset+0xa>
 800ccb8:	4770      	bx	lr
 800ccba:	f803 1b01 	strb.w	r1, [r3], #1
 800ccbe:	e7f9      	b.n	800ccb4 <memset+0x4>

0800ccc0 <sniprintf>:
 800ccc0:	b40c      	push	{r2, r3}
 800ccc2:	b530      	push	{r4, r5, lr}
 800ccc4:	4b17      	ldr	r3, [pc, #92]	; (800cd24 <sniprintf+0x64>)
 800ccc6:	1e0c      	subs	r4, r1, #0
 800ccc8:	681d      	ldr	r5, [r3, #0]
 800ccca:	b09d      	sub	sp, #116	; 0x74
 800cccc:	da08      	bge.n	800cce0 <sniprintf+0x20>
 800ccce:	238b      	movs	r3, #139	; 0x8b
 800ccd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd4:	602b      	str	r3, [r5, #0]
 800ccd6:	b01d      	add	sp, #116	; 0x74
 800ccd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccdc:	b002      	add	sp, #8
 800ccde:	4770      	bx	lr
 800cce0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cce4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cce8:	bf0c      	ite	eq
 800ccea:	4623      	moveq	r3, r4
 800ccec:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ccf0:	9304      	str	r3, [sp, #16]
 800ccf2:	9307      	str	r3, [sp, #28]
 800ccf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ccf8:	9002      	str	r0, [sp, #8]
 800ccfa:	9006      	str	r0, [sp, #24]
 800ccfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cd00:	4628      	mov	r0, r5
 800cd02:	ab21      	add	r3, sp, #132	; 0x84
 800cd04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cd06:	a902      	add	r1, sp, #8
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	f000 f869 	bl	800cde0 <_svfiprintf_r>
 800cd0e:	1c43      	adds	r3, r0, #1
 800cd10:	bfbc      	itt	lt
 800cd12:	238b      	movlt	r3, #139	; 0x8b
 800cd14:	602b      	strlt	r3, [r5, #0]
 800cd16:	2c00      	cmp	r4, #0
 800cd18:	d0dd      	beq.n	800ccd6 <sniprintf+0x16>
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	9b02      	ldr	r3, [sp, #8]
 800cd1e:	701a      	strb	r2, [r3, #0]
 800cd20:	e7d9      	b.n	800ccd6 <sniprintf+0x16>
 800cd22:	bf00      	nop
 800cd24:	200001b0 	.word	0x200001b0

0800cd28 <__ssputs_r>:
 800cd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd2c:	688e      	ldr	r6, [r1, #8]
 800cd2e:	4682      	mov	sl, r0
 800cd30:	429e      	cmp	r6, r3
 800cd32:	460c      	mov	r4, r1
 800cd34:	4690      	mov	r8, r2
 800cd36:	461f      	mov	r7, r3
 800cd38:	d838      	bhi.n	800cdac <__ssputs_r+0x84>
 800cd3a:	898a      	ldrh	r2, [r1, #12]
 800cd3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd40:	d032      	beq.n	800cda8 <__ssputs_r+0x80>
 800cd42:	6825      	ldr	r5, [r4, #0]
 800cd44:	6909      	ldr	r1, [r1, #16]
 800cd46:	3301      	adds	r3, #1
 800cd48:	eba5 0901 	sub.w	r9, r5, r1
 800cd4c:	6965      	ldr	r5, [r4, #20]
 800cd4e:	444b      	add	r3, r9
 800cd50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd58:	106d      	asrs	r5, r5, #1
 800cd5a:	429d      	cmp	r5, r3
 800cd5c:	bf38      	it	cc
 800cd5e:	461d      	movcc	r5, r3
 800cd60:	0553      	lsls	r3, r2, #21
 800cd62:	d531      	bpl.n	800cdc8 <__ssputs_r+0xa0>
 800cd64:	4629      	mov	r1, r5
 800cd66:	f000 fb53 	bl	800d410 <_malloc_r>
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	b950      	cbnz	r0, 800cd84 <__ssputs_r+0x5c>
 800cd6e:	230c      	movs	r3, #12
 800cd70:	f04f 30ff 	mov.w	r0, #4294967295
 800cd74:	f8ca 3000 	str.w	r3, [sl]
 800cd78:	89a3      	ldrh	r3, [r4, #12]
 800cd7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd7e:	81a3      	strh	r3, [r4, #12]
 800cd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd84:	464a      	mov	r2, r9
 800cd86:	6921      	ldr	r1, [r4, #16]
 800cd88:	f000 face 	bl	800d328 <memcpy>
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd96:	81a3      	strh	r3, [r4, #12]
 800cd98:	6126      	str	r6, [r4, #16]
 800cd9a:	444e      	add	r6, r9
 800cd9c:	6026      	str	r6, [r4, #0]
 800cd9e:	463e      	mov	r6, r7
 800cda0:	6165      	str	r5, [r4, #20]
 800cda2:	eba5 0509 	sub.w	r5, r5, r9
 800cda6:	60a5      	str	r5, [r4, #8]
 800cda8:	42be      	cmp	r6, r7
 800cdaa:	d900      	bls.n	800cdae <__ssputs_r+0x86>
 800cdac:	463e      	mov	r6, r7
 800cdae:	4632      	mov	r2, r6
 800cdb0:	4641      	mov	r1, r8
 800cdb2:	6820      	ldr	r0, [r4, #0]
 800cdb4:	f000 fac6 	bl	800d344 <memmove>
 800cdb8:	68a3      	ldr	r3, [r4, #8]
 800cdba:	6822      	ldr	r2, [r4, #0]
 800cdbc:	1b9b      	subs	r3, r3, r6
 800cdbe:	4432      	add	r2, r6
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	60a3      	str	r3, [r4, #8]
 800cdc4:	6022      	str	r2, [r4, #0]
 800cdc6:	e7db      	b.n	800cd80 <__ssputs_r+0x58>
 800cdc8:	462a      	mov	r2, r5
 800cdca:	f000 fb7b 	bl	800d4c4 <_realloc_r>
 800cdce:	4606      	mov	r6, r0
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	d1e1      	bne.n	800cd98 <__ssputs_r+0x70>
 800cdd4:	4650      	mov	r0, sl
 800cdd6:	6921      	ldr	r1, [r4, #16]
 800cdd8:	f000 face 	bl	800d378 <_free_r>
 800cddc:	e7c7      	b.n	800cd6e <__ssputs_r+0x46>
	...

0800cde0 <_svfiprintf_r>:
 800cde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	4698      	mov	r8, r3
 800cde6:	898b      	ldrh	r3, [r1, #12]
 800cde8:	4607      	mov	r7, r0
 800cdea:	061b      	lsls	r3, r3, #24
 800cdec:	460d      	mov	r5, r1
 800cdee:	4614      	mov	r4, r2
 800cdf0:	b09d      	sub	sp, #116	; 0x74
 800cdf2:	d50e      	bpl.n	800ce12 <_svfiprintf_r+0x32>
 800cdf4:	690b      	ldr	r3, [r1, #16]
 800cdf6:	b963      	cbnz	r3, 800ce12 <_svfiprintf_r+0x32>
 800cdf8:	2140      	movs	r1, #64	; 0x40
 800cdfa:	f000 fb09 	bl	800d410 <_malloc_r>
 800cdfe:	6028      	str	r0, [r5, #0]
 800ce00:	6128      	str	r0, [r5, #16]
 800ce02:	b920      	cbnz	r0, 800ce0e <_svfiprintf_r+0x2e>
 800ce04:	230c      	movs	r3, #12
 800ce06:	603b      	str	r3, [r7, #0]
 800ce08:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0c:	e0d1      	b.n	800cfb2 <_svfiprintf_r+0x1d2>
 800ce0e:	2340      	movs	r3, #64	; 0x40
 800ce10:	616b      	str	r3, [r5, #20]
 800ce12:	2300      	movs	r3, #0
 800ce14:	9309      	str	r3, [sp, #36]	; 0x24
 800ce16:	2320      	movs	r3, #32
 800ce18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce1c:	2330      	movs	r3, #48	; 0x30
 800ce1e:	f04f 0901 	mov.w	r9, #1
 800ce22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cfcc <_svfiprintf_r+0x1ec>
 800ce2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce2e:	4623      	mov	r3, r4
 800ce30:	469a      	mov	sl, r3
 800ce32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce36:	b10a      	cbz	r2, 800ce3c <_svfiprintf_r+0x5c>
 800ce38:	2a25      	cmp	r2, #37	; 0x25
 800ce3a:	d1f9      	bne.n	800ce30 <_svfiprintf_r+0x50>
 800ce3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ce40:	d00b      	beq.n	800ce5a <_svfiprintf_r+0x7a>
 800ce42:	465b      	mov	r3, fp
 800ce44:	4622      	mov	r2, r4
 800ce46:	4629      	mov	r1, r5
 800ce48:	4638      	mov	r0, r7
 800ce4a:	f7ff ff6d 	bl	800cd28 <__ssputs_r>
 800ce4e:	3001      	adds	r0, #1
 800ce50:	f000 80aa 	beq.w	800cfa8 <_svfiprintf_r+0x1c8>
 800ce54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce56:	445a      	add	r2, fp
 800ce58:	9209      	str	r2, [sp, #36]	; 0x24
 800ce5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f000 80a2 	beq.w	800cfa8 <_svfiprintf_r+0x1c8>
 800ce64:	2300      	movs	r3, #0
 800ce66:	f04f 32ff 	mov.w	r2, #4294967295
 800ce6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce6e:	f10a 0a01 	add.w	sl, sl, #1
 800ce72:	9304      	str	r3, [sp, #16]
 800ce74:	9307      	str	r3, [sp, #28]
 800ce76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce7a:	931a      	str	r3, [sp, #104]	; 0x68
 800ce7c:	4654      	mov	r4, sl
 800ce7e:	2205      	movs	r2, #5
 800ce80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce84:	4851      	ldr	r0, [pc, #324]	; (800cfcc <_svfiprintf_r+0x1ec>)
 800ce86:	f000 fa41 	bl	800d30c <memchr>
 800ce8a:	9a04      	ldr	r2, [sp, #16]
 800ce8c:	b9d8      	cbnz	r0, 800cec6 <_svfiprintf_r+0xe6>
 800ce8e:	06d0      	lsls	r0, r2, #27
 800ce90:	bf44      	itt	mi
 800ce92:	2320      	movmi	r3, #32
 800ce94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce98:	0711      	lsls	r1, r2, #28
 800ce9a:	bf44      	itt	mi
 800ce9c:	232b      	movmi	r3, #43	; 0x2b
 800ce9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cea2:	f89a 3000 	ldrb.w	r3, [sl]
 800cea6:	2b2a      	cmp	r3, #42	; 0x2a
 800cea8:	d015      	beq.n	800ced6 <_svfiprintf_r+0xf6>
 800ceaa:	4654      	mov	r4, sl
 800ceac:	2000      	movs	r0, #0
 800ceae:	f04f 0c0a 	mov.w	ip, #10
 800ceb2:	9a07      	ldr	r2, [sp, #28]
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceba:	3b30      	subs	r3, #48	; 0x30
 800cebc:	2b09      	cmp	r3, #9
 800cebe:	d94e      	bls.n	800cf5e <_svfiprintf_r+0x17e>
 800cec0:	b1b0      	cbz	r0, 800cef0 <_svfiprintf_r+0x110>
 800cec2:	9207      	str	r2, [sp, #28]
 800cec4:	e014      	b.n	800cef0 <_svfiprintf_r+0x110>
 800cec6:	eba0 0308 	sub.w	r3, r0, r8
 800ceca:	fa09 f303 	lsl.w	r3, r9, r3
 800cece:	4313      	orrs	r3, r2
 800ced0:	46a2      	mov	sl, r4
 800ced2:	9304      	str	r3, [sp, #16]
 800ced4:	e7d2      	b.n	800ce7c <_svfiprintf_r+0x9c>
 800ced6:	9b03      	ldr	r3, [sp, #12]
 800ced8:	1d19      	adds	r1, r3, #4
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	9103      	str	r1, [sp, #12]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	bfbb      	ittet	lt
 800cee2:	425b      	neglt	r3, r3
 800cee4:	f042 0202 	orrlt.w	r2, r2, #2
 800cee8:	9307      	strge	r3, [sp, #28]
 800ceea:	9307      	strlt	r3, [sp, #28]
 800ceec:	bfb8      	it	lt
 800ceee:	9204      	strlt	r2, [sp, #16]
 800cef0:	7823      	ldrb	r3, [r4, #0]
 800cef2:	2b2e      	cmp	r3, #46	; 0x2e
 800cef4:	d10c      	bne.n	800cf10 <_svfiprintf_r+0x130>
 800cef6:	7863      	ldrb	r3, [r4, #1]
 800cef8:	2b2a      	cmp	r3, #42	; 0x2a
 800cefa:	d135      	bne.n	800cf68 <_svfiprintf_r+0x188>
 800cefc:	9b03      	ldr	r3, [sp, #12]
 800cefe:	3402      	adds	r4, #2
 800cf00:	1d1a      	adds	r2, r3, #4
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	9203      	str	r2, [sp, #12]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	bfb8      	it	lt
 800cf0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf0e:	9305      	str	r3, [sp, #20]
 800cf10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cfdc <_svfiprintf_r+0x1fc>
 800cf14:	2203      	movs	r2, #3
 800cf16:	4650      	mov	r0, sl
 800cf18:	7821      	ldrb	r1, [r4, #0]
 800cf1a:	f000 f9f7 	bl	800d30c <memchr>
 800cf1e:	b140      	cbz	r0, 800cf32 <_svfiprintf_r+0x152>
 800cf20:	2340      	movs	r3, #64	; 0x40
 800cf22:	eba0 000a 	sub.w	r0, r0, sl
 800cf26:	fa03 f000 	lsl.w	r0, r3, r0
 800cf2a:	9b04      	ldr	r3, [sp, #16]
 800cf2c:	3401      	adds	r4, #1
 800cf2e:	4303      	orrs	r3, r0
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf36:	2206      	movs	r2, #6
 800cf38:	4825      	ldr	r0, [pc, #148]	; (800cfd0 <_svfiprintf_r+0x1f0>)
 800cf3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf3e:	f000 f9e5 	bl	800d30c <memchr>
 800cf42:	2800      	cmp	r0, #0
 800cf44:	d038      	beq.n	800cfb8 <_svfiprintf_r+0x1d8>
 800cf46:	4b23      	ldr	r3, [pc, #140]	; (800cfd4 <_svfiprintf_r+0x1f4>)
 800cf48:	bb1b      	cbnz	r3, 800cf92 <_svfiprintf_r+0x1b2>
 800cf4a:	9b03      	ldr	r3, [sp, #12]
 800cf4c:	3307      	adds	r3, #7
 800cf4e:	f023 0307 	bic.w	r3, r3, #7
 800cf52:	3308      	adds	r3, #8
 800cf54:	9303      	str	r3, [sp, #12]
 800cf56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf58:	4433      	add	r3, r6
 800cf5a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf5c:	e767      	b.n	800ce2e <_svfiprintf_r+0x4e>
 800cf5e:	460c      	mov	r4, r1
 800cf60:	2001      	movs	r0, #1
 800cf62:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf66:	e7a5      	b.n	800ceb4 <_svfiprintf_r+0xd4>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	f04f 0c0a 	mov.w	ip, #10
 800cf6e:	4619      	mov	r1, r3
 800cf70:	3401      	adds	r4, #1
 800cf72:	9305      	str	r3, [sp, #20]
 800cf74:	4620      	mov	r0, r4
 800cf76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf7a:	3a30      	subs	r2, #48	; 0x30
 800cf7c:	2a09      	cmp	r2, #9
 800cf7e:	d903      	bls.n	800cf88 <_svfiprintf_r+0x1a8>
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d0c5      	beq.n	800cf10 <_svfiprintf_r+0x130>
 800cf84:	9105      	str	r1, [sp, #20]
 800cf86:	e7c3      	b.n	800cf10 <_svfiprintf_r+0x130>
 800cf88:	4604      	mov	r4, r0
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf90:	e7f0      	b.n	800cf74 <_svfiprintf_r+0x194>
 800cf92:	ab03      	add	r3, sp, #12
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	462a      	mov	r2, r5
 800cf98:	4638      	mov	r0, r7
 800cf9a:	4b0f      	ldr	r3, [pc, #60]	; (800cfd8 <_svfiprintf_r+0x1f8>)
 800cf9c:	a904      	add	r1, sp, #16
 800cf9e:	f3af 8000 	nop.w
 800cfa2:	1c42      	adds	r2, r0, #1
 800cfa4:	4606      	mov	r6, r0
 800cfa6:	d1d6      	bne.n	800cf56 <_svfiprintf_r+0x176>
 800cfa8:	89ab      	ldrh	r3, [r5, #12]
 800cfaa:	065b      	lsls	r3, r3, #25
 800cfac:	f53f af2c 	bmi.w	800ce08 <_svfiprintf_r+0x28>
 800cfb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfb2:	b01d      	add	sp, #116	; 0x74
 800cfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb8:	ab03      	add	r3, sp, #12
 800cfba:	9300      	str	r3, [sp, #0]
 800cfbc:	462a      	mov	r2, r5
 800cfbe:	4638      	mov	r0, r7
 800cfc0:	4b05      	ldr	r3, [pc, #20]	; (800cfd8 <_svfiprintf_r+0x1f8>)
 800cfc2:	a904      	add	r1, sp, #16
 800cfc4:	f000 f87c 	bl	800d0c0 <_printf_i>
 800cfc8:	e7eb      	b.n	800cfa2 <_svfiprintf_r+0x1c2>
 800cfca:	bf00      	nop
 800cfcc:	0800da08 	.word	0x0800da08
 800cfd0:	0800da12 	.word	0x0800da12
 800cfd4:	00000000 	.word	0x00000000
 800cfd8:	0800cd29 	.word	0x0800cd29
 800cfdc:	0800da0e 	.word	0x0800da0e

0800cfe0 <_printf_common>:
 800cfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe4:	4616      	mov	r6, r2
 800cfe6:	4699      	mov	r9, r3
 800cfe8:	688a      	ldr	r2, [r1, #8]
 800cfea:	690b      	ldr	r3, [r1, #16]
 800cfec:	4607      	mov	r7, r0
 800cfee:	4293      	cmp	r3, r2
 800cff0:	bfb8      	it	lt
 800cff2:	4613      	movlt	r3, r2
 800cff4:	6033      	str	r3, [r6, #0]
 800cff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cffa:	460c      	mov	r4, r1
 800cffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d000:	b10a      	cbz	r2, 800d006 <_printf_common+0x26>
 800d002:	3301      	adds	r3, #1
 800d004:	6033      	str	r3, [r6, #0]
 800d006:	6823      	ldr	r3, [r4, #0]
 800d008:	0699      	lsls	r1, r3, #26
 800d00a:	bf42      	ittt	mi
 800d00c:	6833      	ldrmi	r3, [r6, #0]
 800d00e:	3302      	addmi	r3, #2
 800d010:	6033      	strmi	r3, [r6, #0]
 800d012:	6825      	ldr	r5, [r4, #0]
 800d014:	f015 0506 	ands.w	r5, r5, #6
 800d018:	d106      	bne.n	800d028 <_printf_common+0x48>
 800d01a:	f104 0a19 	add.w	sl, r4, #25
 800d01e:	68e3      	ldr	r3, [r4, #12]
 800d020:	6832      	ldr	r2, [r6, #0]
 800d022:	1a9b      	subs	r3, r3, r2
 800d024:	42ab      	cmp	r3, r5
 800d026:	dc28      	bgt.n	800d07a <_printf_common+0x9a>
 800d028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d02c:	1e13      	subs	r3, r2, #0
 800d02e:	6822      	ldr	r2, [r4, #0]
 800d030:	bf18      	it	ne
 800d032:	2301      	movne	r3, #1
 800d034:	0692      	lsls	r2, r2, #26
 800d036:	d42d      	bmi.n	800d094 <_printf_common+0xb4>
 800d038:	4649      	mov	r1, r9
 800d03a:	4638      	mov	r0, r7
 800d03c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d040:	47c0      	blx	r8
 800d042:	3001      	adds	r0, #1
 800d044:	d020      	beq.n	800d088 <_printf_common+0xa8>
 800d046:	6823      	ldr	r3, [r4, #0]
 800d048:	68e5      	ldr	r5, [r4, #12]
 800d04a:	f003 0306 	and.w	r3, r3, #6
 800d04e:	2b04      	cmp	r3, #4
 800d050:	bf18      	it	ne
 800d052:	2500      	movne	r5, #0
 800d054:	6832      	ldr	r2, [r6, #0]
 800d056:	f04f 0600 	mov.w	r6, #0
 800d05a:	68a3      	ldr	r3, [r4, #8]
 800d05c:	bf08      	it	eq
 800d05e:	1aad      	subeq	r5, r5, r2
 800d060:	6922      	ldr	r2, [r4, #16]
 800d062:	bf08      	it	eq
 800d064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d068:	4293      	cmp	r3, r2
 800d06a:	bfc4      	itt	gt
 800d06c:	1a9b      	subgt	r3, r3, r2
 800d06e:	18ed      	addgt	r5, r5, r3
 800d070:	341a      	adds	r4, #26
 800d072:	42b5      	cmp	r5, r6
 800d074:	d11a      	bne.n	800d0ac <_printf_common+0xcc>
 800d076:	2000      	movs	r0, #0
 800d078:	e008      	b.n	800d08c <_printf_common+0xac>
 800d07a:	2301      	movs	r3, #1
 800d07c:	4652      	mov	r2, sl
 800d07e:	4649      	mov	r1, r9
 800d080:	4638      	mov	r0, r7
 800d082:	47c0      	blx	r8
 800d084:	3001      	adds	r0, #1
 800d086:	d103      	bne.n	800d090 <_printf_common+0xb0>
 800d088:	f04f 30ff 	mov.w	r0, #4294967295
 800d08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d090:	3501      	adds	r5, #1
 800d092:	e7c4      	b.n	800d01e <_printf_common+0x3e>
 800d094:	2030      	movs	r0, #48	; 0x30
 800d096:	18e1      	adds	r1, r4, r3
 800d098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d09c:	1c5a      	adds	r2, r3, #1
 800d09e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0a2:	4422      	add	r2, r4
 800d0a4:	3302      	adds	r3, #2
 800d0a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0aa:	e7c5      	b.n	800d038 <_printf_common+0x58>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	4622      	mov	r2, r4
 800d0b0:	4649      	mov	r1, r9
 800d0b2:	4638      	mov	r0, r7
 800d0b4:	47c0      	blx	r8
 800d0b6:	3001      	adds	r0, #1
 800d0b8:	d0e6      	beq.n	800d088 <_printf_common+0xa8>
 800d0ba:	3601      	adds	r6, #1
 800d0bc:	e7d9      	b.n	800d072 <_printf_common+0x92>
	...

0800d0c0 <_printf_i>:
 800d0c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c4:	460c      	mov	r4, r1
 800d0c6:	7e27      	ldrb	r7, [r4, #24]
 800d0c8:	4691      	mov	r9, r2
 800d0ca:	2f78      	cmp	r7, #120	; 0x78
 800d0cc:	4680      	mov	r8, r0
 800d0ce:	469a      	mov	sl, r3
 800d0d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d0d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0d6:	d807      	bhi.n	800d0e8 <_printf_i+0x28>
 800d0d8:	2f62      	cmp	r7, #98	; 0x62
 800d0da:	d80a      	bhi.n	800d0f2 <_printf_i+0x32>
 800d0dc:	2f00      	cmp	r7, #0
 800d0de:	f000 80d9 	beq.w	800d294 <_printf_i+0x1d4>
 800d0e2:	2f58      	cmp	r7, #88	; 0x58
 800d0e4:	f000 80a4 	beq.w	800d230 <_printf_i+0x170>
 800d0e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d0ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0f0:	e03a      	b.n	800d168 <_printf_i+0xa8>
 800d0f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0f6:	2b15      	cmp	r3, #21
 800d0f8:	d8f6      	bhi.n	800d0e8 <_printf_i+0x28>
 800d0fa:	a001      	add	r0, pc, #4	; (adr r0, 800d100 <_printf_i+0x40>)
 800d0fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d100:	0800d159 	.word	0x0800d159
 800d104:	0800d16d 	.word	0x0800d16d
 800d108:	0800d0e9 	.word	0x0800d0e9
 800d10c:	0800d0e9 	.word	0x0800d0e9
 800d110:	0800d0e9 	.word	0x0800d0e9
 800d114:	0800d0e9 	.word	0x0800d0e9
 800d118:	0800d16d 	.word	0x0800d16d
 800d11c:	0800d0e9 	.word	0x0800d0e9
 800d120:	0800d0e9 	.word	0x0800d0e9
 800d124:	0800d0e9 	.word	0x0800d0e9
 800d128:	0800d0e9 	.word	0x0800d0e9
 800d12c:	0800d27b 	.word	0x0800d27b
 800d130:	0800d19d 	.word	0x0800d19d
 800d134:	0800d25d 	.word	0x0800d25d
 800d138:	0800d0e9 	.word	0x0800d0e9
 800d13c:	0800d0e9 	.word	0x0800d0e9
 800d140:	0800d29d 	.word	0x0800d29d
 800d144:	0800d0e9 	.word	0x0800d0e9
 800d148:	0800d19d 	.word	0x0800d19d
 800d14c:	0800d0e9 	.word	0x0800d0e9
 800d150:	0800d0e9 	.word	0x0800d0e9
 800d154:	0800d265 	.word	0x0800d265
 800d158:	680b      	ldr	r3, [r1, #0]
 800d15a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d15e:	1d1a      	adds	r2, r3, #4
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	600a      	str	r2, [r1, #0]
 800d164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d168:	2301      	movs	r3, #1
 800d16a:	e0a4      	b.n	800d2b6 <_printf_i+0x1f6>
 800d16c:	6825      	ldr	r5, [r4, #0]
 800d16e:	6808      	ldr	r0, [r1, #0]
 800d170:	062e      	lsls	r6, r5, #24
 800d172:	f100 0304 	add.w	r3, r0, #4
 800d176:	d50a      	bpl.n	800d18e <_printf_i+0xce>
 800d178:	6805      	ldr	r5, [r0, #0]
 800d17a:	600b      	str	r3, [r1, #0]
 800d17c:	2d00      	cmp	r5, #0
 800d17e:	da03      	bge.n	800d188 <_printf_i+0xc8>
 800d180:	232d      	movs	r3, #45	; 0x2d
 800d182:	426d      	negs	r5, r5
 800d184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d188:	230a      	movs	r3, #10
 800d18a:	485e      	ldr	r0, [pc, #376]	; (800d304 <_printf_i+0x244>)
 800d18c:	e019      	b.n	800d1c2 <_printf_i+0x102>
 800d18e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d192:	6805      	ldr	r5, [r0, #0]
 800d194:	600b      	str	r3, [r1, #0]
 800d196:	bf18      	it	ne
 800d198:	b22d      	sxthne	r5, r5
 800d19a:	e7ef      	b.n	800d17c <_printf_i+0xbc>
 800d19c:	680b      	ldr	r3, [r1, #0]
 800d19e:	6825      	ldr	r5, [r4, #0]
 800d1a0:	1d18      	adds	r0, r3, #4
 800d1a2:	6008      	str	r0, [r1, #0]
 800d1a4:	0628      	lsls	r0, r5, #24
 800d1a6:	d501      	bpl.n	800d1ac <_printf_i+0xec>
 800d1a8:	681d      	ldr	r5, [r3, #0]
 800d1aa:	e002      	b.n	800d1b2 <_printf_i+0xf2>
 800d1ac:	0669      	lsls	r1, r5, #25
 800d1ae:	d5fb      	bpl.n	800d1a8 <_printf_i+0xe8>
 800d1b0:	881d      	ldrh	r5, [r3, #0]
 800d1b2:	2f6f      	cmp	r7, #111	; 0x6f
 800d1b4:	bf0c      	ite	eq
 800d1b6:	2308      	moveq	r3, #8
 800d1b8:	230a      	movne	r3, #10
 800d1ba:	4852      	ldr	r0, [pc, #328]	; (800d304 <_printf_i+0x244>)
 800d1bc:	2100      	movs	r1, #0
 800d1be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1c2:	6866      	ldr	r6, [r4, #4]
 800d1c4:	2e00      	cmp	r6, #0
 800d1c6:	bfa8      	it	ge
 800d1c8:	6821      	ldrge	r1, [r4, #0]
 800d1ca:	60a6      	str	r6, [r4, #8]
 800d1cc:	bfa4      	itt	ge
 800d1ce:	f021 0104 	bicge.w	r1, r1, #4
 800d1d2:	6021      	strge	r1, [r4, #0]
 800d1d4:	b90d      	cbnz	r5, 800d1da <_printf_i+0x11a>
 800d1d6:	2e00      	cmp	r6, #0
 800d1d8:	d04d      	beq.n	800d276 <_printf_i+0x1b6>
 800d1da:	4616      	mov	r6, r2
 800d1dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1e0:	fb03 5711 	mls	r7, r3, r1, r5
 800d1e4:	5dc7      	ldrb	r7, [r0, r7]
 800d1e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1ea:	462f      	mov	r7, r5
 800d1ec:	42bb      	cmp	r3, r7
 800d1ee:	460d      	mov	r5, r1
 800d1f0:	d9f4      	bls.n	800d1dc <_printf_i+0x11c>
 800d1f2:	2b08      	cmp	r3, #8
 800d1f4:	d10b      	bne.n	800d20e <_printf_i+0x14e>
 800d1f6:	6823      	ldr	r3, [r4, #0]
 800d1f8:	07df      	lsls	r7, r3, #31
 800d1fa:	d508      	bpl.n	800d20e <_printf_i+0x14e>
 800d1fc:	6923      	ldr	r3, [r4, #16]
 800d1fe:	6861      	ldr	r1, [r4, #4]
 800d200:	4299      	cmp	r1, r3
 800d202:	bfde      	ittt	le
 800d204:	2330      	movle	r3, #48	; 0x30
 800d206:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d20a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d20e:	1b92      	subs	r2, r2, r6
 800d210:	6122      	str	r2, [r4, #16]
 800d212:	464b      	mov	r3, r9
 800d214:	4621      	mov	r1, r4
 800d216:	4640      	mov	r0, r8
 800d218:	f8cd a000 	str.w	sl, [sp]
 800d21c:	aa03      	add	r2, sp, #12
 800d21e:	f7ff fedf 	bl	800cfe0 <_printf_common>
 800d222:	3001      	adds	r0, #1
 800d224:	d14c      	bne.n	800d2c0 <_printf_i+0x200>
 800d226:	f04f 30ff 	mov.w	r0, #4294967295
 800d22a:	b004      	add	sp, #16
 800d22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d230:	4834      	ldr	r0, [pc, #208]	; (800d304 <_printf_i+0x244>)
 800d232:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d236:	680e      	ldr	r6, [r1, #0]
 800d238:	6823      	ldr	r3, [r4, #0]
 800d23a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d23e:	061f      	lsls	r7, r3, #24
 800d240:	600e      	str	r6, [r1, #0]
 800d242:	d514      	bpl.n	800d26e <_printf_i+0x1ae>
 800d244:	07d9      	lsls	r1, r3, #31
 800d246:	bf44      	itt	mi
 800d248:	f043 0320 	orrmi.w	r3, r3, #32
 800d24c:	6023      	strmi	r3, [r4, #0]
 800d24e:	b91d      	cbnz	r5, 800d258 <_printf_i+0x198>
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	f023 0320 	bic.w	r3, r3, #32
 800d256:	6023      	str	r3, [r4, #0]
 800d258:	2310      	movs	r3, #16
 800d25a:	e7af      	b.n	800d1bc <_printf_i+0xfc>
 800d25c:	6823      	ldr	r3, [r4, #0]
 800d25e:	f043 0320 	orr.w	r3, r3, #32
 800d262:	6023      	str	r3, [r4, #0]
 800d264:	2378      	movs	r3, #120	; 0x78
 800d266:	4828      	ldr	r0, [pc, #160]	; (800d308 <_printf_i+0x248>)
 800d268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d26c:	e7e3      	b.n	800d236 <_printf_i+0x176>
 800d26e:	065e      	lsls	r6, r3, #25
 800d270:	bf48      	it	mi
 800d272:	b2ad      	uxthmi	r5, r5
 800d274:	e7e6      	b.n	800d244 <_printf_i+0x184>
 800d276:	4616      	mov	r6, r2
 800d278:	e7bb      	b.n	800d1f2 <_printf_i+0x132>
 800d27a:	680b      	ldr	r3, [r1, #0]
 800d27c:	6826      	ldr	r6, [r4, #0]
 800d27e:	1d1d      	adds	r5, r3, #4
 800d280:	6960      	ldr	r0, [r4, #20]
 800d282:	600d      	str	r5, [r1, #0]
 800d284:	0635      	lsls	r5, r6, #24
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	d501      	bpl.n	800d28e <_printf_i+0x1ce>
 800d28a:	6018      	str	r0, [r3, #0]
 800d28c:	e002      	b.n	800d294 <_printf_i+0x1d4>
 800d28e:	0671      	lsls	r1, r6, #25
 800d290:	d5fb      	bpl.n	800d28a <_printf_i+0x1ca>
 800d292:	8018      	strh	r0, [r3, #0]
 800d294:	2300      	movs	r3, #0
 800d296:	4616      	mov	r6, r2
 800d298:	6123      	str	r3, [r4, #16]
 800d29a:	e7ba      	b.n	800d212 <_printf_i+0x152>
 800d29c:	680b      	ldr	r3, [r1, #0]
 800d29e:	1d1a      	adds	r2, r3, #4
 800d2a0:	600a      	str	r2, [r1, #0]
 800d2a2:	681e      	ldr	r6, [r3, #0]
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	6862      	ldr	r2, [r4, #4]
 800d2aa:	f000 f82f 	bl	800d30c <memchr>
 800d2ae:	b108      	cbz	r0, 800d2b4 <_printf_i+0x1f4>
 800d2b0:	1b80      	subs	r0, r0, r6
 800d2b2:	6060      	str	r0, [r4, #4]
 800d2b4:	6863      	ldr	r3, [r4, #4]
 800d2b6:	6123      	str	r3, [r4, #16]
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2be:	e7a8      	b.n	800d212 <_printf_i+0x152>
 800d2c0:	4632      	mov	r2, r6
 800d2c2:	4649      	mov	r1, r9
 800d2c4:	4640      	mov	r0, r8
 800d2c6:	6923      	ldr	r3, [r4, #16]
 800d2c8:	47d0      	blx	sl
 800d2ca:	3001      	adds	r0, #1
 800d2cc:	d0ab      	beq.n	800d226 <_printf_i+0x166>
 800d2ce:	6823      	ldr	r3, [r4, #0]
 800d2d0:	079b      	lsls	r3, r3, #30
 800d2d2:	d413      	bmi.n	800d2fc <_printf_i+0x23c>
 800d2d4:	68e0      	ldr	r0, [r4, #12]
 800d2d6:	9b03      	ldr	r3, [sp, #12]
 800d2d8:	4298      	cmp	r0, r3
 800d2da:	bfb8      	it	lt
 800d2dc:	4618      	movlt	r0, r3
 800d2de:	e7a4      	b.n	800d22a <_printf_i+0x16a>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	4632      	mov	r2, r6
 800d2e4:	4649      	mov	r1, r9
 800d2e6:	4640      	mov	r0, r8
 800d2e8:	47d0      	blx	sl
 800d2ea:	3001      	adds	r0, #1
 800d2ec:	d09b      	beq.n	800d226 <_printf_i+0x166>
 800d2ee:	3501      	adds	r5, #1
 800d2f0:	68e3      	ldr	r3, [r4, #12]
 800d2f2:	9903      	ldr	r1, [sp, #12]
 800d2f4:	1a5b      	subs	r3, r3, r1
 800d2f6:	42ab      	cmp	r3, r5
 800d2f8:	dcf2      	bgt.n	800d2e0 <_printf_i+0x220>
 800d2fa:	e7eb      	b.n	800d2d4 <_printf_i+0x214>
 800d2fc:	2500      	movs	r5, #0
 800d2fe:	f104 0619 	add.w	r6, r4, #25
 800d302:	e7f5      	b.n	800d2f0 <_printf_i+0x230>
 800d304:	0800da19 	.word	0x0800da19
 800d308:	0800da2a 	.word	0x0800da2a

0800d30c <memchr>:
 800d30c:	4603      	mov	r3, r0
 800d30e:	b510      	push	{r4, lr}
 800d310:	b2c9      	uxtb	r1, r1
 800d312:	4402      	add	r2, r0
 800d314:	4293      	cmp	r3, r2
 800d316:	4618      	mov	r0, r3
 800d318:	d101      	bne.n	800d31e <memchr+0x12>
 800d31a:	2000      	movs	r0, #0
 800d31c:	e003      	b.n	800d326 <memchr+0x1a>
 800d31e:	7804      	ldrb	r4, [r0, #0]
 800d320:	3301      	adds	r3, #1
 800d322:	428c      	cmp	r4, r1
 800d324:	d1f6      	bne.n	800d314 <memchr+0x8>
 800d326:	bd10      	pop	{r4, pc}

0800d328 <memcpy>:
 800d328:	440a      	add	r2, r1
 800d32a:	4291      	cmp	r1, r2
 800d32c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d330:	d100      	bne.n	800d334 <memcpy+0xc>
 800d332:	4770      	bx	lr
 800d334:	b510      	push	{r4, lr}
 800d336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d33a:	4291      	cmp	r1, r2
 800d33c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d340:	d1f9      	bne.n	800d336 <memcpy+0xe>
 800d342:	bd10      	pop	{r4, pc}

0800d344 <memmove>:
 800d344:	4288      	cmp	r0, r1
 800d346:	b510      	push	{r4, lr}
 800d348:	eb01 0402 	add.w	r4, r1, r2
 800d34c:	d902      	bls.n	800d354 <memmove+0x10>
 800d34e:	4284      	cmp	r4, r0
 800d350:	4623      	mov	r3, r4
 800d352:	d807      	bhi.n	800d364 <memmove+0x20>
 800d354:	1e43      	subs	r3, r0, #1
 800d356:	42a1      	cmp	r1, r4
 800d358:	d008      	beq.n	800d36c <memmove+0x28>
 800d35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d35e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d362:	e7f8      	b.n	800d356 <memmove+0x12>
 800d364:	4601      	mov	r1, r0
 800d366:	4402      	add	r2, r0
 800d368:	428a      	cmp	r2, r1
 800d36a:	d100      	bne.n	800d36e <memmove+0x2a>
 800d36c:	bd10      	pop	{r4, pc}
 800d36e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d376:	e7f7      	b.n	800d368 <memmove+0x24>

0800d378 <_free_r>:
 800d378:	b538      	push	{r3, r4, r5, lr}
 800d37a:	4605      	mov	r5, r0
 800d37c:	2900      	cmp	r1, #0
 800d37e:	d043      	beq.n	800d408 <_free_r+0x90>
 800d380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d384:	1f0c      	subs	r4, r1, #4
 800d386:	2b00      	cmp	r3, #0
 800d388:	bfb8      	it	lt
 800d38a:	18e4      	addlt	r4, r4, r3
 800d38c:	f000 f8d0 	bl	800d530 <__malloc_lock>
 800d390:	4a1e      	ldr	r2, [pc, #120]	; (800d40c <_free_r+0x94>)
 800d392:	6813      	ldr	r3, [r2, #0]
 800d394:	4610      	mov	r0, r2
 800d396:	b933      	cbnz	r3, 800d3a6 <_free_r+0x2e>
 800d398:	6063      	str	r3, [r4, #4]
 800d39a:	6014      	str	r4, [r2, #0]
 800d39c:	4628      	mov	r0, r5
 800d39e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3a2:	f000 b8cb 	b.w	800d53c <__malloc_unlock>
 800d3a6:	42a3      	cmp	r3, r4
 800d3a8:	d90a      	bls.n	800d3c0 <_free_r+0x48>
 800d3aa:	6821      	ldr	r1, [r4, #0]
 800d3ac:	1862      	adds	r2, r4, r1
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	bf01      	itttt	eq
 800d3b2:	681a      	ldreq	r2, [r3, #0]
 800d3b4:	685b      	ldreq	r3, [r3, #4]
 800d3b6:	1852      	addeq	r2, r2, r1
 800d3b8:	6022      	streq	r2, [r4, #0]
 800d3ba:	6063      	str	r3, [r4, #4]
 800d3bc:	6004      	str	r4, [r0, #0]
 800d3be:	e7ed      	b.n	800d39c <_free_r+0x24>
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	b10b      	cbz	r3, 800d3ca <_free_r+0x52>
 800d3c6:	42a3      	cmp	r3, r4
 800d3c8:	d9fa      	bls.n	800d3c0 <_free_r+0x48>
 800d3ca:	6811      	ldr	r1, [r2, #0]
 800d3cc:	1850      	adds	r0, r2, r1
 800d3ce:	42a0      	cmp	r0, r4
 800d3d0:	d10b      	bne.n	800d3ea <_free_r+0x72>
 800d3d2:	6820      	ldr	r0, [r4, #0]
 800d3d4:	4401      	add	r1, r0
 800d3d6:	1850      	adds	r0, r2, r1
 800d3d8:	4283      	cmp	r3, r0
 800d3da:	6011      	str	r1, [r2, #0]
 800d3dc:	d1de      	bne.n	800d39c <_free_r+0x24>
 800d3de:	6818      	ldr	r0, [r3, #0]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	4401      	add	r1, r0
 800d3e4:	6011      	str	r1, [r2, #0]
 800d3e6:	6053      	str	r3, [r2, #4]
 800d3e8:	e7d8      	b.n	800d39c <_free_r+0x24>
 800d3ea:	d902      	bls.n	800d3f2 <_free_r+0x7a>
 800d3ec:	230c      	movs	r3, #12
 800d3ee:	602b      	str	r3, [r5, #0]
 800d3f0:	e7d4      	b.n	800d39c <_free_r+0x24>
 800d3f2:	6820      	ldr	r0, [r4, #0]
 800d3f4:	1821      	adds	r1, r4, r0
 800d3f6:	428b      	cmp	r3, r1
 800d3f8:	bf01      	itttt	eq
 800d3fa:	6819      	ldreq	r1, [r3, #0]
 800d3fc:	685b      	ldreq	r3, [r3, #4]
 800d3fe:	1809      	addeq	r1, r1, r0
 800d400:	6021      	streq	r1, [r4, #0]
 800d402:	6063      	str	r3, [r4, #4]
 800d404:	6054      	str	r4, [r2, #4]
 800d406:	e7c9      	b.n	800d39c <_free_r+0x24>
 800d408:	bd38      	pop	{r3, r4, r5, pc}
 800d40a:	bf00      	nop
 800d40c:	2000051c 	.word	0x2000051c

0800d410 <_malloc_r>:
 800d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d412:	1ccd      	adds	r5, r1, #3
 800d414:	f025 0503 	bic.w	r5, r5, #3
 800d418:	3508      	adds	r5, #8
 800d41a:	2d0c      	cmp	r5, #12
 800d41c:	bf38      	it	cc
 800d41e:	250c      	movcc	r5, #12
 800d420:	2d00      	cmp	r5, #0
 800d422:	4606      	mov	r6, r0
 800d424:	db01      	blt.n	800d42a <_malloc_r+0x1a>
 800d426:	42a9      	cmp	r1, r5
 800d428:	d903      	bls.n	800d432 <_malloc_r+0x22>
 800d42a:	230c      	movs	r3, #12
 800d42c:	6033      	str	r3, [r6, #0]
 800d42e:	2000      	movs	r0, #0
 800d430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d432:	f000 f87d 	bl	800d530 <__malloc_lock>
 800d436:	4921      	ldr	r1, [pc, #132]	; (800d4bc <_malloc_r+0xac>)
 800d438:	680a      	ldr	r2, [r1, #0]
 800d43a:	4614      	mov	r4, r2
 800d43c:	b99c      	cbnz	r4, 800d466 <_malloc_r+0x56>
 800d43e:	4f20      	ldr	r7, [pc, #128]	; (800d4c0 <_malloc_r+0xb0>)
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	b923      	cbnz	r3, 800d44e <_malloc_r+0x3e>
 800d444:	4621      	mov	r1, r4
 800d446:	4630      	mov	r0, r6
 800d448:	f000 f862 	bl	800d510 <_sbrk_r>
 800d44c:	6038      	str	r0, [r7, #0]
 800d44e:	4629      	mov	r1, r5
 800d450:	4630      	mov	r0, r6
 800d452:	f000 f85d 	bl	800d510 <_sbrk_r>
 800d456:	1c43      	adds	r3, r0, #1
 800d458:	d123      	bne.n	800d4a2 <_malloc_r+0x92>
 800d45a:	230c      	movs	r3, #12
 800d45c:	4630      	mov	r0, r6
 800d45e:	6033      	str	r3, [r6, #0]
 800d460:	f000 f86c 	bl	800d53c <__malloc_unlock>
 800d464:	e7e3      	b.n	800d42e <_malloc_r+0x1e>
 800d466:	6823      	ldr	r3, [r4, #0]
 800d468:	1b5b      	subs	r3, r3, r5
 800d46a:	d417      	bmi.n	800d49c <_malloc_r+0x8c>
 800d46c:	2b0b      	cmp	r3, #11
 800d46e:	d903      	bls.n	800d478 <_malloc_r+0x68>
 800d470:	6023      	str	r3, [r4, #0]
 800d472:	441c      	add	r4, r3
 800d474:	6025      	str	r5, [r4, #0]
 800d476:	e004      	b.n	800d482 <_malloc_r+0x72>
 800d478:	6863      	ldr	r3, [r4, #4]
 800d47a:	42a2      	cmp	r2, r4
 800d47c:	bf0c      	ite	eq
 800d47e:	600b      	streq	r3, [r1, #0]
 800d480:	6053      	strne	r3, [r2, #4]
 800d482:	4630      	mov	r0, r6
 800d484:	f000 f85a 	bl	800d53c <__malloc_unlock>
 800d488:	f104 000b 	add.w	r0, r4, #11
 800d48c:	1d23      	adds	r3, r4, #4
 800d48e:	f020 0007 	bic.w	r0, r0, #7
 800d492:	1ac2      	subs	r2, r0, r3
 800d494:	d0cc      	beq.n	800d430 <_malloc_r+0x20>
 800d496:	1a1b      	subs	r3, r3, r0
 800d498:	50a3      	str	r3, [r4, r2]
 800d49a:	e7c9      	b.n	800d430 <_malloc_r+0x20>
 800d49c:	4622      	mov	r2, r4
 800d49e:	6864      	ldr	r4, [r4, #4]
 800d4a0:	e7cc      	b.n	800d43c <_malloc_r+0x2c>
 800d4a2:	1cc4      	adds	r4, r0, #3
 800d4a4:	f024 0403 	bic.w	r4, r4, #3
 800d4a8:	42a0      	cmp	r0, r4
 800d4aa:	d0e3      	beq.n	800d474 <_malloc_r+0x64>
 800d4ac:	1a21      	subs	r1, r4, r0
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	f000 f82e 	bl	800d510 <_sbrk_r>
 800d4b4:	3001      	adds	r0, #1
 800d4b6:	d1dd      	bne.n	800d474 <_malloc_r+0x64>
 800d4b8:	e7cf      	b.n	800d45a <_malloc_r+0x4a>
 800d4ba:	bf00      	nop
 800d4bc:	2000051c 	.word	0x2000051c
 800d4c0:	20000520 	.word	0x20000520

0800d4c4 <_realloc_r>:
 800d4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c6:	4607      	mov	r7, r0
 800d4c8:	4614      	mov	r4, r2
 800d4ca:	460e      	mov	r6, r1
 800d4cc:	b921      	cbnz	r1, 800d4d8 <_realloc_r+0x14>
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d4d4:	f7ff bf9c 	b.w	800d410 <_malloc_r>
 800d4d8:	b922      	cbnz	r2, 800d4e4 <_realloc_r+0x20>
 800d4da:	f7ff ff4d 	bl	800d378 <_free_r>
 800d4de:	4625      	mov	r5, r4
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4e4:	f000 f830 	bl	800d548 <_malloc_usable_size_r>
 800d4e8:	42a0      	cmp	r0, r4
 800d4ea:	d20f      	bcs.n	800d50c <_realloc_r+0x48>
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	4638      	mov	r0, r7
 800d4f0:	f7ff ff8e 	bl	800d410 <_malloc_r>
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d0f2      	beq.n	800d4e0 <_realloc_r+0x1c>
 800d4fa:	4631      	mov	r1, r6
 800d4fc:	4622      	mov	r2, r4
 800d4fe:	f7ff ff13 	bl	800d328 <memcpy>
 800d502:	4631      	mov	r1, r6
 800d504:	4638      	mov	r0, r7
 800d506:	f7ff ff37 	bl	800d378 <_free_r>
 800d50a:	e7e9      	b.n	800d4e0 <_realloc_r+0x1c>
 800d50c:	4635      	mov	r5, r6
 800d50e:	e7e7      	b.n	800d4e0 <_realloc_r+0x1c>

0800d510 <_sbrk_r>:
 800d510:	b538      	push	{r3, r4, r5, lr}
 800d512:	2300      	movs	r3, #0
 800d514:	4d05      	ldr	r5, [pc, #20]	; (800d52c <_sbrk_r+0x1c>)
 800d516:	4604      	mov	r4, r0
 800d518:	4608      	mov	r0, r1
 800d51a:	602b      	str	r3, [r5, #0]
 800d51c:	f7f6 f9f6 	bl	800390c <_sbrk>
 800d520:	1c43      	adds	r3, r0, #1
 800d522:	d102      	bne.n	800d52a <_sbrk_r+0x1a>
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	b103      	cbz	r3, 800d52a <_sbrk_r+0x1a>
 800d528:	6023      	str	r3, [r4, #0]
 800d52a:	bd38      	pop	{r3, r4, r5, pc}
 800d52c:	2000168c 	.word	0x2000168c

0800d530 <__malloc_lock>:
 800d530:	4801      	ldr	r0, [pc, #4]	; (800d538 <__malloc_lock+0x8>)
 800d532:	f000 b811 	b.w	800d558 <__retarget_lock_acquire_recursive>
 800d536:	bf00      	nop
 800d538:	20001694 	.word	0x20001694

0800d53c <__malloc_unlock>:
 800d53c:	4801      	ldr	r0, [pc, #4]	; (800d544 <__malloc_unlock+0x8>)
 800d53e:	f000 b80c 	b.w	800d55a <__retarget_lock_release_recursive>
 800d542:	bf00      	nop
 800d544:	20001694 	.word	0x20001694

0800d548 <_malloc_usable_size_r>:
 800d548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d54c:	1f18      	subs	r0, r3, #4
 800d54e:	2b00      	cmp	r3, #0
 800d550:	bfbc      	itt	lt
 800d552:	580b      	ldrlt	r3, [r1, r0]
 800d554:	18c0      	addlt	r0, r0, r3
 800d556:	4770      	bx	lr

0800d558 <__retarget_lock_acquire_recursive>:
 800d558:	4770      	bx	lr

0800d55a <__retarget_lock_release_recursive>:
 800d55a:	4770      	bx	lr

0800d55c <_init>:
 800d55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d55e:	bf00      	nop
 800d560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d562:	bc08      	pop	{r3}
 800d564:	469e      	mov	lr, r3
 800d566:	4770      	bx	lr

0800d568 <_fini>:
 800d568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d56a:	bf00      	nop
 800d56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d56e:	bc08      	pop	{r3}
 800d570:	469e      	mov	lr, r3
 800d572:	4770      	bx	lr
