
HotIron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c558  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800c664  0800c664  0001c664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c98c  0800c98c  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800c98c  0800c98c  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c98c  0800c98c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c98c  0800c98c  0001c98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c990  0800c990  0001c990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800c994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013fc  20000210  0800cba4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000160c  0800cba4  0002160c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb1a  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003da7  00000000  00000000  0003bd53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0003fb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  00040e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4df  00000000  00000000  00041fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c39  00000000  00000000  0005d4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fbf0  00000000  00000000  00075100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104cf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000533c  00000000  00000000  00104d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000210 	.word	0x20000210
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c64c 	.word	0x0800c64c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000214 	.word	0x20000214
 8000148:	0800c64c 	.word	0x0800c64c

0800014c <delay_init>:
#include "main.h"

TIM_HandleTypeDef * htim;

void delay_init(TIM_HandleTypeDef * htim_i)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	htim = htim_i;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <delay_init+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htim);
 800015a:	4b04      	ldr	r3, [pc, #16]	; (800016c <delay_init+0x20>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4618      	mov	r0, r3
 8000160:	f006 fa24 	bl	80065ac <HAL_TIM_Base_Start>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000520 	.word	0x20000520

08000170 <delay_us>:

// delays for us count
void delay_us(uint16_t us)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim,0);
 800017a:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <delay_us+0x34>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2200      	movs	r2, #0
 8000182:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(htim) < us);
 8000184:	bf00      	nop
 8000186:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <delay_us+0x34>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800018e:	b29b      	uxth	r3, r3
 8000190:	88fa      	ldrh	r2, [r7, #6]
 8000192:	429a      	cmp	r2, r3
 8000194:	d8f7      	bhi.n	8000186 <delay_us+0x16>
}
 8000196:	bf00      	nop
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000520 	.word	0x20000520

080001a8 <lcd_create>:
 */
LCD_HandleTypeDef lcd_create(
		LCD_PortType port[], LCD_PinType pin[],
		LCD_PortType rs_port, LCD_PinType rs_pin,
		LCD_PortType en_port, LCD_PinType en_pin, LCD_ModeTypeDef mode)
{
 80001a8:	b5b0      	push	{r4, r5, r7, lr}
 80001aa:	b08a      	sub	sp, #40	; 0x28
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
 80001b4:	603b      	str	r3, [r7, #0]
	LCD_HandleTypeDef lcd;

	lcd.mode = mode;
 80001b6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80001ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80001be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80001c2:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80001c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001c6:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80001c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80001ca:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	613b      	str	r3, [r7, #16]

	delay_us(20000); // Display needs about 10ms to start, so you should provide delay
 80001d8:	f644 6020 	movw	r0, #20000	; 0x4e20
 80001dc:	f7ff ffc8 	bl	8000170 <delay_us>

	lcd_init(&lcd);
 80001e0:	f107 0310 	add.w	r3, r7, #16
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f80f 	bl	8000208 <lcd_init>

	return lcd;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	461d      	mov	r5, r3
 80001ee:	f107 0410 	add.w	r4, r7, #16
 80001f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001fa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001fe:	68f8      	ldr	r0, [r7, #12]
 8000200:	3728      	adds	r7, #40	; 0x28
 8000202:	46bd      	mov	sp, r7
 8000204:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000208 <lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void lcd_init(LCD_HandleTypeDef * lcd)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	7d9b      	ldrb	r3, [r3, #22]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d10f      	bne.n	8000238 <lcd_init+0x30>
	{
			lcd_write_command(lcd, 0x33);
 8000218:	2133      	movs	r1, #51	; 0x33
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f000 f8d4 	bl	80003c8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000220:	2132      	movs	r1, #50	; 0x32
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f8d0 	bl	80003c8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000228:	2128      	movs	r1, #40	; 0x28
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f8cc 	bl	80003c8 <lcd_write_command>
			lcd_8line_mode = false;
 8000230:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <lcd_init+0x60>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	e006      	b.n	8000246 <lcd_init+0x3e>
	}
	else
	{
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000238:	2138      	movs	r1, #56	; 0x38
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f000 f8c4 	bl	80003c8 <lcd_write_command>
		lcd_8line_mode = true;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <lcd_init+0x60>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
	}


	lcd_clear(lcd);											// Clear screen
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f000 f88c 	bl	8000364 <lcd_clear>
	lcd_mode(lcd, LCD_ENABLE, CURSOR_DISABLE, NO_BLINK);
 800024c:	2300      	movs	r3, #0
 800024e:	2200      	movs	r2, #0
 8000250:	2101      	movs	r1, #1
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 f80a 	bl	800026c <lcd_mode>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000258:	2106      	movs	r1, #6
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	f000 f8b4 	bl	80003c8 <lcd_write_command>
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000000 	.word	0x20000000

0800026c <lcd_mode>:

/**
 * Set display & cursor mode
 */
void lcd_mode(LCD_HandleTypeDef * lcd, LCD_ONOFF state, LCD_CURSOR cursor, LCD_BLINK blink)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	4608      	mov	r0, r1
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	4603      	mov	r3, r0
 800027c:	70fb      	strb	r3, [r7, #3]
 800027e:	460b      	mov	r3, r1
 8000280:	70bb      	strb	r3, [r7, #2]
 8000282:	4613      	mov	r3, r2
 8000284:	707b      	strb	r3, [r7, #1]
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL |
								 (state ?OPT_D:0) |
 8000286:	78fb      	ldrb	r3, [r7, #3]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <lcd_mode+0x24>
 800028c:	220c      	movs	r2, #12
 800028e:	e000      	b.n	8000292 <lcd_mode+0x26>
 8000290:	2208      	movs	r2, #8
 8000292:	78bb      	ldrb	r3, [r7, #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <lcd_mode+0x30>
 8000298:	2302      	movs	r3, #2
 800029a:	e000      	b.n	800029e <lcd_mode+0x32>
 800029c:	2300      	movs	r3, #0
 800029e:	4313      	orrs	r3, r2
 80002a0:	b25a      	sxtb	r2, r3
								 (cursor?OPT_C:0) |
								 (blink ?OPT_B:0));
 80002a2:	787b      	ldrb	r3, [r7, #1]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	bf14      	ite	ne
 80002a8:	2301      	movne	r3, #1
 80002aa:	2300      	moveq	r3, #0
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	b25b      	sxtb	r3, r3
								 (cursor?OPT_C:0) |
 80002b0:	4313      	orrs	r3, r2
 80002b2:	b25b      	sxtb	r3, r3
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL |
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4619      	mov	r1, r3
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f885 	bl	80003c8 <lcd_write_command>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <lcd_out>:

/**
 * Write a string on the current position
 */
void lcd_out(LCD_HandleTypeDef * lcd, uint8_t * arr, uint8_t length)
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b086      	sub	sp, #24
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	60f8      	str	r0, [r7, #12]
 80002ce:	60b9      	str	r1, [r7, #8]
 80002d0:	4613      	mov	r3, r2
 80002d2:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < length; i++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e00a      	b.n	80002f0 <lcd_out+0x2a>
	{
		lcd_write_data(lcd, arr[i]);
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	4413      	add	r3, r2
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	4619      	mov	r1, r3
 80002e4:	68f8      	ldr	r0, [r7, #12]
 80002e6:	f000 f8a9 	bl	800043c <lcd_write_data>
	for (int i = 0; i < length; i++)
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	3301      	adds	r3, #1
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	697a      	ldr	r2, [r7, #20]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	dbf0      	blt.n	80002da <lcd_out+0x14>
	}
}
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <lcd_string>:

/**
 * Write a string on the current position
 */
void lcd_string(LCD_HandleTypeDef * lcd, char * string)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b082      	sub	sp, #8
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	6039      	str	r1, [r7, #0]
	while (*string)
 800030c:	e007      	b.n	800031e <lcd_string+0x1c>
	{
		lcd_write_data(lcd, (uint8_t)*(string++));
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	1c5a      	adds	r2, r3, #1
 8000312:	603a      	str	r2, [r7, #0]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4619      	mov	r1, r3
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f000 f88f 	bl	800043c <lcd_write_data>
	while (*string)
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d1f3      	bne.n	800030e <lcd_string+0xc>
	}
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <lcd_set_xy>:

/**
 * Set the cursor position
 */
void lcd_set_xy(LCD_HandleTypeDef * lcd, uint8_t x, uint8_t y)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
 800033c:	4613      	mov	r3, r2
 800033e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[y] + x);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[y] + x);
 8000340:	78bb      	ldrb	r3, [r7, #2]
 8000342:	4a07      	ldr	r2, [pc, #28]	; (8000360 <lcd_set_xy+0x30>)
 8000344:	5cd2      	ldrb	r2, [r2, r3]
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	4413      	add	r3, r2
 800034a:	b2db      	uxtb	r3, r3
 800034c:	3b80      	subs	r3, #128	; 0x80
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4619      	mov	r1, r3
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 f838 	bl	80003c8 <lcd_write_command>
	#endif
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800c920 	.word	0x0800c920

08000364 <lcd_clear>:

/**
 * Clear the screen
 */
void lcd_clear(LCD_HandleTypeDef * lcd) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800036c:	2101      	movs	r1, #1
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f000 f82a 	bl	80003c8 <lcd_write_command>
	delay_us(maxi_delay);
 8000374:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000378:	f7ff fefa 	bl	8000170 <delay_us>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <lcd_define_chars>:
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
}

// load all 8 chars
void lcd_define_chars(LCD_HandleTypeDef * lcd, uint8_t bitmap[]){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
	lcd_write_command(lcd, SETCGRAM_ADDR);
 800038e:	2140      	movs	r1, #64	; 0x40
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f000 f819 	bl	80003c8 <lcd_write_command>
	for(uint8_t i=0;i<64;++i){
 8000396:	2300      	movs	r3, #0
 8000398:	73fb      	strb	r3, [r7, #15]
 800039a:	e00a      	b.n	80003b2 <lcd_define_chars+0x2e>
		lcd_write_data(lcd, bitmap[i]);
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	683a      	ldr	r2, [r7, #0]
 80003a0:	4413      	add	r3, r2
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	4619      	mov	r1, r3
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f000 f848 	bl	800043c <lcd_write_data>
	for(uint8_t i=0;i<64;++i){
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	3301      	adds	r3, #1
 80003b0:	73fb      	strb	r3, [r7, #15]
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	2b3f      	cmp	r3, #63	; 0x3f
 80003b6:	d9f1      	bls.n	800039c <lcd_define_chars+0x18>
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f000 f804 	bl	80003c8 <lcd_write_command>
}
 80003c0:	bf00      	nop
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(LCD_HandleTypeDef * lcd, uint8_t command)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6898      	ldr	r0, [r3, #8]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	899b      	ldrh	r3, [r3, #12]
 80003dc:	2200      	movs	r2, #0
 80003de:	4619      	mov	r1, r3
 80003e0:	f003 fc33 	bl	8003c4a <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	7d9b      	ldrb	r3, [r3, #22]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d118      	bne.n	800041e <lcd_write_command+0x56>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80003ec:	78fb      	ldrb	r3, [r7, #3]
 80003ee:	091b      	lsrs	r3, r3, #4
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	2204      	movs	r2, #4
 80003f4:	4619      	mov	r1, r3
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f000 f85a 	bl	80004b0 <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <lcd_write_command+0x70>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d002      	beq.n	800040a <lcd_write_command+0x42>
 8000404:	202a      	movs	r0, #42	; 0x2a
 8000406:	f7ff feb3 	bl	8000170 <delay_us>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	f003 030f 	and.w	r3, r3, #15
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2204      	movs	r2, #4
 8000414:	4619      	mov	r1, r3
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f000 f84a 	bl	80004b0 <lcd_write>
 800041c:	e005      	b.n	800042a <lcd_write_command+0x62>
	}
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
 800041e:	78fb      	ldrb	r3, [r7, #3]
 8000420:	2208      	movs	r2, #8
 8000422:	4619      	mov	r1, r3
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f000 f843 	bl	80004b0 <lcd_write>
	}
	delay_us(mini_delay);
 800042a:	202a      	movs	r0, #42	; 0x2a
 800042c:	f7ff fea0 	bl	8000170 <delay_us>
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000000 	.word	0x20000000

0800043c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(LCD_HandleTypeDef * lcd, uint8_t data)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	6898      	ldr	r0, [r3, #8]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	899b      	ldrh	r3, [r3, #12]
 8000450:	2201      	movs	r2, #1
 8000452:	4619      	mov	r1, r3
 8000454:	f003 fbf9 	bl	8003c4a <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	7d9b      	ldrb	r3, [r3, #22]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d118      	bne.n	8000492 <lcd_write_data+0x56>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	091b      	lsrs	r3, r3, #4
 8000464:	b2db      	uxtb	r3, r3
 8000466:	2204      	movs	r2, #4
 8000468:	4619      	mov	r1, r3
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f000 f820 	bl	80004b0 <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <lcd_write_data+0x70>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d002      	beq.n	800047e <lcd_write_data+0x42>
 8000478:	202a      	movs	r0, #42	; 0x2a
 800047a:	f7ff fe79 	bl	8000170 <delay_us>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800047e:	78fb      	ldrb	r3, [r7, #3]
 8000480:	f003 030f 	and.w	r3, r3, #15
 8000484:	b2db      	uxtb	r3, r3
 8000486:	2204      	movs	r2, #4
 8000488:	4619      	mov	r1, r3
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f000 f810 	bl	80004b0 <lcd_write>
 8000490:	e005      	b.n	800049e <lcd_write_data+0x62>
	}
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	2208      	movs	r2, #8
 8000496:	4619      	mov	r1, r3
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f000 f809 	bl	80004b0 <lcd_write>
	}
	delay_us(mini_delay);
 800049e:	202a      	movs	r0, #42	; 0x2a
 80004a0:	f7ff fe66 	bl	8000170 <delay_us>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000000 	.word	0x20000000

080004b0 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(LCD_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
 80004bc:	4613      	mov	r3, r2
 80004be:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]
 80004c4:	e019      	b.n	80004fa <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	4413      	add	r3, r2
 80004d0:	6818      	ldr	r0, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	4413      	add	r3, r2
 80004dc:	8819      	ldrh	r1, [r3, #0]
 80004de:	78fa      	ldrb	r2, [r7, #3]
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	fa42 f303 	asr.w	r3, r2, r3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	f003 fbab 	bl	8003c4a <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	3301      	adds	r3, #1
 80004f8:	73fb      	strb	r3, [r7, #15]
 80004fa:	7bfa      	ldrb	r2, [r7, #15]
 80004fc:	78bb      	ldrb	r3, [r7, #2]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d3e1      	bcc.n	80004c6 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6918      	ldr	r0, [r3, #16]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	8a9b      	ldrh	r3, [r3, #20]
 800050a:	2201      	movs	r2, #1
 800050c:	4619      	mov	r1, r3
 800050e:	f003 fb9c 	bl	8003c4a <HAL_GPIO_WritePin>
	DELAY_US(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff fe2c 	bl	8000170 <delay_us>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6918      	ldr	r0, [r3, #16]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	8a9b      	ldrh	r3, [r3, #20]
 8000520:	2200      	movs	r2, #0
 8000522:	4619      	mov	r1, r3
 8000524:	f003 fb91 	bl	8003c4a <HAL_GPIO_WritePin>
	DELAY_US(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff fe21 	bl	8000170 <delay_us>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <int2string>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void int2string(uint32_t digit, uint8_t * buf, uint8_t len)
{
 8000538:	b480      	push	{r7}
 800053a:	b087      	sub	sp, #28
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	4613      	mov	r3, r2
 8000544:	71fb      	strb	r3, [r7, #7]
	for (int i = len - 1; i >= 0; i--)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	3b01      	subs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	e027      	b.n	800059e <int2string+0x66>
	{
		if (digit || (i == (len-1)))
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d104      	bne.n	800055e <int2string+0x26>
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	3b01      	subs	r3, #1
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	429a      	cmp	r2, r3
 800055c:	d117      	bne.n	800058e <int2string+0x56>
		{
			buf[i] = digit % 10 + '0';
 800055e:	68f9      	ldr	r1, [r7, #12]
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <int2string+0x78>)
 8000562:	fba3 2301 	umull	r2, r3, r3, r1
 8000566:	08da      	lsrs	r2, r3, #3
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	1aca      	subs	r2, r1, r3
 8000572:	b2d2      	uxtb	r2, r2
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	68b9      	ldr	r1, [r7, #8]
 8000578:	440b      	add	r3, r1
 800057a:	3230      	adds	r2, #48	; 0x30
 800057c:	b2d2      	uxtb	r2, r2
 800057e:	701a      	strb	r2, [r3, #0]
			digit /= 10;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <int2string+0x78>)
 8000584:	fba2 2303 	umull	r2, r3, r2, r3
 8000588:	08db      	lsrs	r3, r3, #3
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	e004      	b.n	8000598 <int2string+0x60>
		}
		else
			buf[i] = ' ';
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	4413      	add	r3, r2
 8000594:	2220      	movs	r2, #32
 8000596:	701a      	strb	r2, [r3, #0]
	for (int i = len - 1; i >= 0; i--)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3b01      	subs	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dad4      	bge.n	800054e <int2string+0x16>
	}
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	371c      	adds	r7, #28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	cccccccd 	.word	0xcccccccd

080005b4 <int2time>:
 * converts int to time string
 * @param time - time in msec
 * @param buf - provide buffer for 5 positions
 */
char * int2time(uint32_t time, uint8_t * buf)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	buf[4] = '\0';
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	3304      	adds	r3, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	if (time >= 600)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80005cc:	d31e      	bcc.n	800060c <int2time+0x58>
	{
		// display time in minutes
		buf[3] = 'm';
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	3303      	adds	r3, #3
 80005d2:	226d      	movs	r2, #109	; 0x6d
 80005d4:	701a      	strb	r2, [r3, #0]
		time /= 60;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <int2time+0xd0>)
 80005da:	fba2 2303 	umull	r2, r3, r2, r3
 80005de:	095b      	lsrs	r3, r3, #5
 80005e0:	607b      	str	r3, [r7, #4]
		if (time >= 999)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f240 32e6 	movw	r2, #998	; 0x3e6
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d909      	bls.n	8000600 <int2time+0x4c>
		{
			global_error |= errTIMEOUT;
 80005ec:	4b26      	ldr	r3, [pc, #152]	; (8000688 <int2time+0xd4>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	f043 0320 	orr.w	r3, r3, #32
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b24      	ldr	r3, [pc, #144]	; (8000688 <int2time+0xd4>)
 80005f8:	701a      	strb	r2, [r3, #0]
			time = 999;
 80005fa:	f240 33e7 	movw	r3, #999	; 0x3e7
 80005fe:	607b      	str	r3, [r7, #4]
		}
		int2string(time, buf, 3);
 8000600:	2203      	movs	r2, #3
 8000602:	6839      	ldr	r1, [r7, #0]
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff97 	bl	8000538 <int2string>
 800060a:	e035      	b.n	8000678 <int2time+0xc4>
	} else
	{
		buf[1] = ':';
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	223a      	movs	r2, #58	; 0x3a
 8000612:	701a      	strb	r2, [r3, #0]
		buf[3] = time % 10 + '0';
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <int2time+0xd8>)
 8000618:	fba3 2301 	umull	r2, r3, r3, r1
 800061c:	08da      	lsrs	r2, r3, #3
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	1aca      	subs	r2, r1, r3
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	3303      	adds	r3, #3
 800062e:	3230      	adds	r2, #48	; 0x30
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	701a      	strb	r2, [r3, #0]
		time /= 10;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a15      	ldr	r2, [pc, #84]	; (800068c <int2time+0xd8>)
 8000638:	fba2 2303 	umull	r2, r3, r2, r3
 800063c:	08db      	lsrs	r3, r3, #3
 800063e:	607b      	str	r3, [r7, #4]
		buf[2] = time % 6 + '0';
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <int2time+0xdc>)
 8000644:	fba3 2301 	umull	r2, r3, r3, r1
 8000648:	089a      	lsrs	r2, r3, #2
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	1aca      	subs	r2, r1, r3
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	3302      	adds	r3, #2
 800065a:	3230      	adds	r2, #48	; 0x30
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	701a      	strb	r2, [r3, #0]
		time /= 6;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <int2time+0xdc>)
 8000664:	fba2 2303 	umull	r2, r3, r2, r3
 8000668:	089b      	lsrs	r3, r3, #2
 800066a:	607b      	str	r3, [r7, #4]
		buf[0] = time + '0';
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	3330      	adds	r3, #48	; 0x30
 8000672:	b2da      	uxtb	r2, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	701a      	strb	r2, [r3, #0]
	}
	return (char *)buf;
 8000678:	683b      	ldr	r3, [r7, #0]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	88888889 	.word	0x88888889
 8000688:	2000022c 	.word	0x2000022c
 800068c:	cccccccd 	.word	0xcccccccd
 8000690:	aaaaaaab 	.word	0xaaaaaaab

08000694 <init_lcd>:
	scDOT = 0xA5, // big dot in the middle
	scSIGMA = 0xF6, // sigma
};

void init_lcd(void)
{
 8000694:	b5b0      	push	{r4, r5, r7, lr}
 8000696:	b09a      	sub	sp, #104	; 0x68
 8000698:	af04      	add	r7, sp, #16
	  lcd = lcd_create(ports, pins,
 800069a:	4c25      	ldr	r4, [pc, #148]	; (8000730 <init_lcd+0x9c>)
 800069c:	4638      	mov	r0, r7
 800069e:	2300      	movs	r3, #0
 80006a0:	9303      	str	r3, [sp, #12]
 80006a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <init_lcd+0xa0>)
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <init_lcd+0xa0>)
 80006b4:	4a20      	ldr	r2, [pc, #128]	; (8000738 <init_lcd+0xa4>)
 80006b6:	4921      	ldr	r1, [pc, #132]	; (800073c <init_lcd+0xa8>)
 80006b8:	f7ff fd76 	bl	80001a8 <lcd_create>
 80006bc:	4625      	mov	r5, r4
 80006be:	463c      	mov	r4, r7
 80006c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006c8:	e885 0003 	stmia.w	r5, {r0, r1}
						hd_E_GPIO_Port, hd_E_Pin,
						LCD_4_BIT_MODE);

	  /* load symbols */

	  uint8_t symbols [] = {
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <init_lcd+0xac>)
 80006ce:	f107 0418 	add.w	r4, r7, #24
 80006d2:	461d      	mov	r5, r3
 80006d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			  	  	  	  	0x0, 0xe, 0x11, 0x15, 0x11, 0xe, 0x0, 0x0, // OFF
//			  	  	  	  	0x0, 0x4, 0x15, 0x15, 0x11, 0xe, 0x0, 0x0, // ON
//							0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x15, 0x0,   // ellips
//							0x0, 0x0, 0xa, 0x1f, 0xe, 0x4, 0x0, 0x0, // heart
	  };
	  lcd_define_chars(&lcd, symbols);
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4619      	mov	r1, r3
 80006ee:	4810      	ldr	r0, [pc, #64]	; (8000730 <init_lcd+0x9c>)
 80006f0:	f7ff fe48 	bl	8000384 <lcd_define_chars>
	  lcd_set_xy(&lcd, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <init_lcd+0x9c>)
 80006fa:	f7ff fe19 	bl	8000330 <lcd_set_xy>
	  lcd_string(&lcd, "Maksim Jeskevic ");
 80006fe:	4911      	ldr	r1, [pc, #68]	; (8000744 <init_lcd+0xb0>)
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <init_lcd+0x9c>)
 8000702:	f7ff fdfe 	bl	8000302 <lcd_string>
	  lcd_set_xy(&lcd, 0, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	2100      	movs	r1, #0
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <init_lcd+0x9c>)
 800070c:	f7ff fe10 	bl	8000330 <lcd_set_xy>
	  lcd_string(&lcd, "         2021 08");
 8000710:	490d      	ldr	r1, [pc, #52]	; (8000748 <init_lcd+0xb4>)
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <init_lcd+0x9c>)
 8000714:	f7ff fdf5 	bl	8000302 <lcd_string>
	  HAL_Delay(1500);
 8000718:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800071c:	f002 ffc8 	bl	80036b0 <HAL_Delay>
	  lcd_clear(&lcd);
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <init_lcd+0x9c>)
 8000722:	f7ff fe1f 	bl	8000364 <lcd_clear>
}
 8000726:	bf00      	nop
 8000728:	3758      	adds	r7, #88	; 0x58
 800072a:	46bd      	mov	sp, r7
 800072c:	bdb0      	pop	{r4, r5, r7, pc}
 800072e:	bf00      	nop
 8000730:	20000524 	.word	0x20000524
 8000734:	40010c00 	.word	0x40010c00
 8000738:	20000014 	.word	0x20000014
 800073c:	20000004 	.word	0x20000004
 8000740:	0800c68c 	.word	0x0800c68c
 8000744:	0800c664 	.word	0x0800c664
 8000748:	0800c678 	.word	0x0800c678

0800074c <do_button>:

void do_button(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
	const uint32_t time_for_long_press = 700;
 8000752:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000756:	607b      	str	r3, [r7, #4]
	static uint32_t last_time = 0;
	static bool last_button = false;
	static uint32_t but_time = 0;
	if (HAL_GetTick() - last_time < 20)
 8000758:	f002 ffa0 	bl	800369c <HAL_GetTick>
 800075c:	4602      	mov	r2, r0
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <do_button+0x90>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	2b13      	cmp	r3, #19
 8000766:	d935      	bls.n	80007d4 <do_button+0x88>
		return;
	button.pressed = !HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin);
 8000768:	2108      	movs	r1, #8
 800076a:	481d      	ldr	r0, [pc, #116]	; (80007e0 <do_button+0x94>)
 800076c:	f003 fa56 	bl	8003c1c <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf0c      	ite	eq
 8000776:	2301      	moveq	r3, #1
 8000778:	2300      	movne	r3, #0
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <do_button+0x98>)
 800077e:	701a      	strb	r2, [r3, #0]
	if (button.pressed)
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <do_button+0x98>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d018      	beq.n	80007ba <do_button+0x6e>
	{
		if (!last_button)
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <do_button+0x9c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d004      	beq.n	80007a0 <do_button+0x54>
			but_time = HAL_GetTick();
 8000796:	f002 ff81 	bl	800369c <HAL_GetTick>
 800079a:	4603      	mov	r3, r0
 800079c:	4a13      	ldr	r2, [pc, #76]	; (80007ec <do_button+0xa0>)
 800079e:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - but_time > time_for_long_press)
 80007a0:	f002 ff7c 	bl	800369c <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <do_button+0xa0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d206      	bcs.n	80007c0 <do_button+0x74>
			button.long_press = true;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <do_button+0x98>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	705a      	strb	r2, [r3, #1]
 80007b8:	e002      	b.n	80007c0 <do_button+0x74>
	}
	else
		button.long_press = false;
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <do_button+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	705a      	strb	r2, [r3, #1]
	last_button = button.pressed;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <do_button+0x98>)
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <do_button+0x9c>)
 80007c6:	701a      	strb	r2, [r3, #0]

	last_time = HAL_GetTick();
 80007c8:	f002 ff68 	bl	800369c <HAL_GetTick>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a03      	ldr	r2, [pc, #12]	; (80007dc <do_button+0x90>)
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	e000      	b.n	80007d6 <do_button+0x8a>
		return;
 80007d4:	bf00      	nop
}
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000244 	.word	0x20000244
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	20000230 	.word	0x20000230
 80007e8:	20000248 	.word	0x20000248
 80007ec:	2000024c 	.word	0x2000024c

080007f0 <do_blink>:

void do_blink(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 500)
 80007f4:	f002 ff52 	bl	800369c <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <do_blink+0x30>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000804:	d30a      	bcc.n	800081c <do_blink+0x2c>
		return;
	last_time = HAL_GetTick();
 8000806:	f002 ff49 	bl	800369c <HAL_GetTick>
 800080a:	4603      	mov	r3, r0
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <do_blink+0x30>)
 800080e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000814:	4803      	ldr	r0, [pc, #12]	; (8000824 <do_blink+0x34>)
 8000816:	f003 fa30 	bl	8003c7a <HAL_GPIO_TogglePin>
 800081a:	e000      	b.n	800081e <do_blink+0x2e>
		return;
 800081c:	bf00      	nop
}
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000250 	.word	0x20000250
 8000824:	40011000 	.word	0x40011000

08000828 <get_max6675>:
/**
 * read temperature from max6675
 * and check for validity
 */
void get_max6675(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	uint16_t data;
	HAL_SPI_ReceiveOnly(&hspi1, (uint8_t*)(&data), 1, 100);
 800082e:	1db9      	adds	r1, r7, #6
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	2201      	movs	r2, #1
 8000834:	4810      	ldr	r0, [pc, #64]	; (8000878 <get_max6675+0x50>)
 8000836:	f002 fbcd 	bl	8002fd4 <HAL_SPI_ReceiveOnly>

	MAX6675.data_valid = !(data & 0b110);
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	f003 0306 	and.w	r3, r3, #6
 8000840:	2b00      	cmp	r3, #0
 8000842:	bf0c      	ite	eq
 8000844:	2301      	moveq	r3, #1
 8000846:	2300      	movne	r3, #0
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <get_max6675+0x54>)
 800084c:	709a      	strb	r2, [r3, #2]
	MAX6675.temperature = data >> 3;
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	08db      	lsrs	r3, r3, #3
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <get_max6675+0x54>)
 8000856:	801a      	strh	r2, [r3, #0]
	if (!(MAX6675.data_valid))
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <get_max6675+0x54>)
 800085a:	789b      	ldrb	r3, [r3, #2]
 800085c:	f083 0301 	eor.w	r3, r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d003      	beq.n	800086e <get_max6675+0x46>
		MAX6675.temperature = 0xfff;
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <get_max6675+0x54>)
 8000868:	f640 72ff 	movw	r2, #4095	; 0xfff
 800086c:	801a      	strh	r2, [r3, #0]
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200005d8 	.word	0x200005d8
 800087c:	20000234 	.word	0x20000234

08000880 <ascii_max6675>:

void ascii_max6675(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
	if (MAX6675.data_valid)
 8000886:	4b39      	ldr	r3, [pc, #228]	; (800096c <ascii_max6675+0xec>)
 8000888:	789b      	ldrb	r3, [r3, #2]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d05a      	beq.n	8000944 <ascii_max6675+0xc4>
		{
			uint32_t digit = 25*(MAX6675.temperature&0b11);
 800088e:	4b37      	ldr	r3, [pc, #220]	; (800096c <ascii_max6675+0xec>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	f003 0203 	and.w	r2, r3, #3
 8000896:	4613      	mov	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	009a      	lsls	r2, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
			digit += (MAX6675.temperature>>2)*1000;
 80008a2:	4b32      	ldr	r3, [pc, #200]	; (800096c <ascii_max6675+0xec>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b0:	fb03 f302 	mul.w	r3, r3, r2
 80008b4:	461a      	mov	r2, r3
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4413      	add	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]
			int8_t i = 6;
 80008bc:	2306      	movs	r3, #6
 80008be:	72fb      	strb	r3, [r7, #11]
			while (digit)
 80008c0:	e01b      	b.n	80008fa <ascii_max6675+0x7a>
			{
				MAX6675.ascii[i--] = '0' + digit%10;
 80008c2:	68f9      	ldr	r1, [r7, #12]
 80008c4:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <ascii_max6675+0xf0>)
 80008c6:	fba3 2301 	umull	r2, r3, r3, r1
 80008ca:	08da      	lsrs	r2, r3, #3
 80008cc:	4613      	mov	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	1aca      	subs	r2, r1, r3
 80008d6:	b2d3      	uxtb	r3, r2
 80008d8:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80008dc:	b2ca      	uxtb	r2, r1
 80008de:	3a01      	subs	r2, #1
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	72fa      	strb	r2, [r7, #11]
 80008e4:	3330      	adds	r3, #48	; 0x30
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b20      	ldr	r3, [pc, #128]	; (800096c <ascii_max6675+0xec>)
 80008ea:	440b      	add	r3, r1
 80008ec:	70da      	strb	r2, [r3, #3]
				digit /= 10;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4a1f      	ldr	r2, [pc, #124]	; (8000970 <ascii_max6675+0xf0>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	60fb      	str	r3, [r7, #12]
			while (digit)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1e0      	bne.n	80008c2 <ascii_max6675+0x42>
			}
			while (i >= 0)
 8000900:	e018      	b.n	8000934 <ascii_max6675+0xb4>
			{
				if (i > 2)
 8000902:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000906:	2b02      	cmp	r3, #2
 8000908:	dd0a      	ble.n	8000920 <ascii_max6675+0xa0>
					MAX6675.ascii[i--] = '0';
 800090a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800090e:	b2d3      	uxtb	r3, r2
 8000910:	3b01      	subs	r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	72fb      	strb	r3, [r7, #11]
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <ascii_max6675+0xec>)
 8000918:	4413      	add	r3, r2
 800091a:	2230      	movs	r2, #48	; 0x30
 800091c:	70da      	strb	r2, [r3, #3]
 800091e:	e009      	b.n	8000934 <ascii_max6675+0xb4>
				else
					MAX6675.ascii[i--] = ' ';
 8000920:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000924:	b2d3      	uxtb	r3, r2
 8000926:	3b01      	subs	r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	72fb      	strb	r3, [r7, #11]
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <ascii_max6675+0xec>)
 800092e:	4413      	add	r3, r2
 8000930:	2220      	movs	r2, #32
 8000932:	70da      	strb	r2, [r3, #3]
			while (i >= 0)
 8000934:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000938:	2b00      	cmp	r3, #0
 800093a:	dae2      	bge.n	8000902 <ascii_max6675+0x82>
			}
			MAX6675.ascii[4] = '.';
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <ascii_max6675+0xec>)
 800093e:	222e      	movs	r2, #46	; 0x2e
 8000940:	71da      	strb	r2, [r3, #7]
		else
		{
			for (int i = 0; i < sizeof(MAX6675); i ++)
				MAX6675.ascii[i] = 'x';
		}
}
 8000942:	e00e      	b.n	8000962 <ascii_max6675+0xe2>
			for (int i = 0; i < sizeof(MAX6675); i ++)
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	e008      	b.n	800095c <ascii_max6675+0xdc>
				MAX6675.ascii[i] = 'x';
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <ascii_max6675+0xec>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4413      	add	r3, r2
 8000950:	3303      	adds	r3, #3
 8000952:	2278      	movs	r2, #120	; 0x78
 8000954:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < sizeof(MAX6675); i ++)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3301      	adds	r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b09      	cmp	r3, #9
 8000960:	d9f3      	bls.n	800094a <ascii_max6675+0xca>
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	20000234 	.word	0x20000234
 8000970:	cccccccd 	.word	0xcccccccd

08000974 <do_usb>:

void do_usb(void)
{
 8000974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000976:	b0bf      	sub	sp, #252	; 0xfc
 8000978:	af08      	add	r7, sp, #32
	if (!tick)
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <do_usb+0xa0>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	f083 0301 	eor.w	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d140      	bne.n	8000a0a <do_usb+0x96>
		return;
	tick = false; // sync with ticks
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <do_usb+0xa0>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]

	uint8_t buf[200];
	uint16_t n = snprintf((char*)buf, 200,
			"Tick: %lu; PV: %u.%02u; SP: %u; PWM: %u; P: %li; I: %li; D: %li\r",
						HAL_GetTick()/1000,
 800098e:	f002 fe85 	bl	800369c <HAL_GetTick>
 8000992:	4603      	mov	r3, r0
	uint16_t n = snprintf((char*)buf, 200,
 8000994:	4a20      	ldr	r2, [pc, #128]	; (8000a18 <do_usb+0xa4>)
 8000996:	fba2 2303 	umull	r2, r3, r2, r3
 800099a:	099d      	lsrs	r5, r3, #6
						MAX6675.temperature>>2,
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <do_usb+0xa8>)
 800099e:	881b      	ldrh	r3, [r3, #0]
	uint16_t n = snprintf((char*)buf, 200,
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	461e      	mov	r6, r3
						((MAX6675.temperature)&0b11)*25,
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <do_usb+0xa8>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	f003 0203 	and.w	r2, r3, #3
	uint16_t n = snprintf((char*)buf, 200,
 80009ae:	4613      	mov	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4413      	add	r3, r2
 80009b4:	009a      	lsls	r2, r3, #2
 80009b6:	4413      	add	r3, r2
 80009b8:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <do_usb+0xac>)
 80009ba:	8812      	ldrh	r2, [r2, #0]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <do_usb+0xb0>)
 80009c0:	8812      	ldrh	r2, [r2, #0]
 80009c2:	603a      	str	r2, [r7, #0]
 80009c4:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <do_usb+0xb4>)
 80009c6:	6812      	ldr	r2, [r2, #0]
 80009c8:	4917      	ldr	r1, [pc, #92]	; (8000a28 <do_usb+0xb4>)
 80009ca:	6849      	ldr	r1, [r1, #4]
 80009cc:	4816      	ldr	r0, [pc, #88]	; (8000a28 <do_usb+0xb4>)
 80009ce:	6880      	ldr	r0, [r0, #8]
 80009d0:	f107 040c 	add.w	r4, r7, #12
 80009d4:	9006      	str	r0, [sp, #24]
 80009d6:	9105      	str	r1, [sp, #20]
 80009d8:	9204      	str	r2, [sp, #16]
 80009da:	6839      	ldr	r1, [r7, #0]
 80009dc:	9103      	str	r1, [sp, #12]
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	9202      	str	r2, [sp, #8]
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	9600      	str	r6, [sp, #0]
 80009e6:	462b      	mov	r3, r5
 80009e8:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <do_usb+0xb8>)
 80009ea:	21c8      	movs	r1, #200	; 0xc8
 80009ec:	4620      	mov	r0, r4
 80009ee:	f00b f9df 	bl	800bdb0 <sniprintf>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
						temperature_SP,
						pwm_value,
						PID.P,
						PID.I,
						PID.D);
	CDC_Transmit_FS(buf, n);
 80009f8:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f00a fdc4 	bl	800b590 <CDC_Transmit_FS>
 8000a08:	e000      	b.n	8000a0c <do_usb+0x98>
		return;
 8000a0a:	bf00      	nop
}
 8000a0c:	37dc      	adds	r7, #220	; 0xdc
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000242 	.word	0x20000242
 8000a18:	10624dd3 	.word	0x10624dd3
 8000a1c:	20000234 	.word	0x20000234
 8000a20:	20000240 	.word	0x20000240
 8000a24:	2000023e 	.word	0x2000023e
 8000a28:	2000053c 	.word	0x2000053c
 8000a2c:	0800c6cc 	.word	0x0800c6cc

08000a30 <lcd_mini_clear.8509>:

	/**
	 * clears left part of the display
	 */
	void lcd_mini_clear(LCD_HandleTypeDef * lcd)
	{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	f8c7 c000 	str.w	ip, [r7]
		lcd_mode(lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2101      	movs	r1, #1
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fc12 	bl	800026c <lcd_mode>
		lcd_set_xy(lcd, 0, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff fc6f 	bl	8000330 <lcd_set_xy>
		lcd_string(lcd, "            ");
 8000a52:	4908      	ldr	r1, [pc, #32]	; (8000a74 <lcd_mini_clear.8509+0x44>)
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff fc54 	bl	8000302 <lcd_string>
		lcd_set_xy(lcd, 0, 1);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fc66 	bl	8000330 <lcd_set_xy>
		lcd_string(lcd, "             ");
 8000a64:	4904      	ldr	r1, [pc, #16]	; (8000a78 <lcd_mini_clear.8509+0x48>)
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff fc4b 	bl	8000302 <lcd_string>
	}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	0800c710 	.word	0x0800c710
 8000a78:	0800c720 	.word	0x0800c720

08000a7c <do_interface>:
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
void do_interface(void)
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	603b      	str	r3, [r7, #0]
	if (first_time)
 8000a88:	4ba0      	ldr	r3, [pc, #640]	; (8000d0c <do_interface+0x290>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d023      	beq.n	8000ad8 <do_interface+0x5c>
		max_steps = sizeof(steps_default)/sizeof(steps_default[0]);
 8000a90:	4b9f      	ldr	r3, [pc, #636]	; (8000d10 <do_interface+0x294>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < max_steps; i ++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	e014      	b.n	8000ac6 <do_interface+0x4a>
			steps[i].temp = steps_default[i].temp;
 8000a9c:	4a9d      	ldr	r2, [pc, #628]	; (8000d14 <do_interface+0x298>)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000aa4:	499c      	ldr	r1, [pc, #624]	; (8000d18 <do_interface+0x29c>)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			steps[i].time = steps_default[i].time;
 8000aac:	4a99      	ldr	r2, [pc, #612]	; (8000d14 <do_interface+0x298>)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4998      	ldr	r1, [pc, #608]	; (8000d18 <do_interface+0x29c>)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	440b      	add	r3, r1
 8000abe:	605a      	str	r2, [r3, #4]
		for (int i = 0; i < max_steps; i ++)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b92      	ldr	r3, [pc, #584]	; (8000d10 <do_interface+0x294>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	dbe4      	blt.n	8000a9c <do_interface+0x20>
		first_time = false;
 8000ad2:	4b8e      	ldr	r3, [pc, #568]	; (8000d0c <do_interface+0x290>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
	/**
	 * this happens every 100 ms
	 */
	static uint32_t last_time = 0;
	static bool last_button = false;
	if (HAL_GetTick() - last_time < 100)
 8000ad8:	f002 fde0 	bl	800369c <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	4b8f      	ldr	r3, [pc, #572]	; (8000d1c <do_interface+0x2a0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	2b63      	cmp	r3, #99	; 0x63
 8000ae6:	f240 8348 	bls.w	800117a <do_interface+0x6fe>
		return;
	last_time = HAL_GetTick();
 8000aea:	f002 fdd7 	bl	800369c <HAL_GetTick>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a8a      	ldr	r2, [pc, #552]	; (8000d1c <do_interface+0x2a0>)
 8000af2:	6013      	str	r3, [r2, #0]

	/*** Right always visible section ***/

	int32_t dT=((int32_t)temperature_SP)-((int32_t)(MAX6675.temperature>>2));
 8000af4:	4b8a      	ldr	r3, [pc, #552]	; (8000d20 <do_interface+0x2a4>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b8a      	ldr	r3, [pc, #552]	; (8000d24 <do_interface+0x2a8>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	60bb      	str	r3, [r7, #8]

	lcd_set_xy(&lcd, 12, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	210c      	movs	r1, #12
 8000b0a:	4887      	ldr	r0, [pc, #540]	; (8000d28 <do_interface+0x2ac>)
 8000b0c:	f7ff fc10 	bl	8000330 <lcd_set_xy>
	if (MAX6675.data_valid)
 8000b10:	4b84      	ldr	r3, [pc, #528]	; (8000d24 <do_interface+0x2a8>)
 8000b12:	789b      	ldrb	r3, [r3, #2]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00a      	beq.n	8000b2e <do_interface+0xb2>
	{
		lcd_out(&lcd, MAX6675.ascii+1, 3);
 8000b18:	4b84      	ldr	r3, [pc, #528]	; (8000d2c <do_interface+0x2b0>)
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4882      	ldr	r0, [pc, #520]	; (8000d28 <do_interface+0x2ac>)
 8000b20:	f7ff fbd1 	bl	80002c6 <lcd_out>
		lcd_write_data(&lcd, scGRAD);
 8000b24:	21df      	movs	r1, #223	; 0xdf
 8000b26:	4880      	ldr	r0, [pc, #512]	; (8000d28 <do_interface+0x2ac>)
 8000b28:	f7ff fc88 	bl	800043c <lcd_write_data>
 8000b2c:	e00c      	b.n	8000b48 <do_interface+0xcc>
	}
	else
	{
		lcd_string(&lcd, "___");
 8000b2e:	4980      	ldr	r1, [pc, #512]	; (8000d30 <do_interface+0x2b4>)
 8000b30:	487d      	ldr	r0, [pc, #500]	; (8000d28 <do_interface+0x2ac>)
 8000b32:	f7ff fbe6 	bl	8000302 <lcd_string>
		temperature_SP = 0;
 8000b36:	4b7a      	ldr	r3, [pc, #488]	; (8000d20 <do_interface+0x2a4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	801a      	strh	r2, [r3, #0]
		global_error = errMAX6675_invalid;
 8000b3c:	4b7d      	ldr	r3, [pc, #500]	; (8000d34 <do_interface+0x2b8>)
 8000b3e:	2210      	movs	r2, #16
 8000b40:	701a      	strb	r2, [r3, #0]
		ui_state = uiMALFUNCTION;
 8000b42:	4b7d      	ldr	r3, [pc, #500]	; (8000d38 <do_interface+0x2bc>)
 8000b44:	2209      	movs	r2, #9
 8000b46:	701a      	strb	r2, [r3, #0]
	}

	lcd_set_xy(&lcd, 13, 1);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	210d      	movs	r1, #13
 8000b4c:	4876      	ldr	r0, [pc, #472]	; (8000d28 <do_interface+0x2ac>)
 8000b4e:	f7ff fbef 	bl	8000330 <lcd_set_xy>
	// first symbol
	if (button.pressed)
 8000b52:	4b7a      	ldr	r3, [pc, #488]	; (8000d3c <do_interface+0x2c0>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d004      	beq.n	8000b64 <do_interface+0xe8>
		lcd_write_data(&lcd, scDOT);
 8000b5a:	21a5      	movs	r1, #165	; 0xa5
 8000b5c:	4872      	ldr	r0, [pc, #456]	; (8000d28 <do_interface+0x2ac>)
 8000b5e:	f7ff fc6d 	bl	800043c <lcd_write_data>
 8000b62:	e003      	b.n	8000b6c <do_interface+0xf0>
	else
		lcd_write_data(&lcd, ' ');
 8000b64:	2120      	movs	r1, #32
 8000b66:	4870      	ldr	r0, [pc, #448]	; (8000d28 <do_interface+0x2ac>)
 8000b68:	f7ff fc68 	bl	800043c <lcd_write_data>
	// second symbol
	if (!MAX6675.data_valid)
 8000b6c:	4b6d      	ldr	r3, [pc, #436]	; (8000d24 <do_interface+0x2a8>)
 8000b6e:	789b      	ldrb	r3, [r3, #2]
 8000b70:	f083 0301 	eor.w	r3, r3, #1
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d004      	beq.n	8000b84 <do_interface+0x108>
		lcd_write_data(&lcd, ' ');
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	486a      	ldr	r0, [pc, #424]	; (8000d28 <do_interface+0x2ac>)
 8000b7e:	f7ff fc5d 	bl	800043c <lcd_write_data>
 8000b82:	e04e      	b.n	8000c22 <do_interface+0x1a6>
	else
	{
		if ((temperature_SP == 0) && (MAX6675.temperature < (HOT_TEMP<<2)))
 8000b84:	4b66      	ldr	r3, [pc, #408]	; (8000d20 <do_interface+0x2a4>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d108      	bne.n	8000b9e <do_interface+0x122>
 8000b8c:	4b65      	ldr	r3, [pc, #404]	; (8000d24 <do_interface+0x2a8>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	2b9f      	cmp	r3, #159	; 0x9f
 8000b92:	d804      	bhi.n	8000b9e <do_interface+0x122>
			lcd_write_data(&lcd, '-');
 8000b94:	212d      	movs	r1, #45	; 0x2d
 8000b96:	4864      	ldr	r0, [pc, #400]	; (8000d28 <do_interface+0x2ac>)
 8000b98:	f7ff fc50 	bl	800043c <lcd_write_data>
 8000b9c:	e041      	b.n	8000c22 <do_interface+0x1a6>
		else if (((pwm_value + 9)/10)*3 > ticktack)
 8000b9e:	4b68      	ldr	r3, [pc, #416]	; (8000d40 <do_interface+0x2c4>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	3309      	adds	r3, #9
 8000ba4:	4a67      	ldr	r2, [pc, #412]	; (8000d44 <do_interface+0x2c8>)
 8000ba6:	fb82 1203 	smull	r1, r2, r2, r3
 8000baa:	1092      	asrs	r2, r2, #2
 8000bac:	17db      	asrs	r3, r3, #31
 8000bae:	1ad2      	subs	r2, r2, r3
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4a64      	ldr	r2, [pc, #400]	; (8000d48 <do_interface+0x2cc>)
 8000bb8:	7812      	ldrb	r2, [r2, #0]
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	dd10      	ble.n	8000be0 <do_interface+0x164>
		{
			if ((STEP_TEMP > dT) && (dT > -STEP_TEMP))
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	dc08      	bgt.n	8000bd6 <do_interface+0x15a>
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	f113 0f04 	cmn.w	r3, #4
 8000bca:	db04      	blt.n	8000bd6 <do_interface+0x15a>
				lcd_write_data(&lcd, ccUPEQ);
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4856      	ldr	r0, [pc, #344]	; (8000d28 <do_interface+0x2ac>)
 8000bd0:	f7ff fc34 	bl	800043c <lcd_write_data>
 8000bd4:	e025      	b.n	8000c22 <do_interface+0x1a6>
			else
				lcd_write_data(&lcd, ccUP);
 8000bd6:	2103      	movs	r1, #3
 8000bd8:	4853      	ldr	r0, [pc, #332]	; (8000d28 <do_interface+0x2ac>)
 8000bda:	f7ff fc2f 	bl	800043c <lcd_write_data>
 8000bde:	e020      	b.n	8000c22 <do_interface+0x1a6>
		}
		else if (dT >= STEP_TEMP)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	dd04      	ble.n	8000bf0 <do_interface+0x174>
			lcd_write_data(&lcd, '^');
 8000be6:	215e      	movs	r1, #94	; 0x5e
 8000be8:	484f      	ldr	r0, [pc, #316]	; (8000d28 <do_interface+0x2ac>)
 8000bea:	f7ff fc27 	bl	800043c <lcd_write_data>
 8000bee:	e018      	b.n	8000c22 <do_interface+0x1a6>
		else if ((STEP_TEMP > dT) && (dT > -STEP_TEMP))
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	dc08      	bgt.n	8000c08 <do_interface+0x18c>
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	f113 0f04 	cmn.w	r3, #4
 8000bfc:	db04      	blt.n	8000c08 <do_interface+0x18c>
		{
			lcd_write_data(&lcd, '=');
 8000bfe:	213d      	movs	r1, #61	; 0x3d
 8000c00:	4849      	ldr	r0, [pc, #292]	; (8000d28 <do_interface+0x2ac>)
 8000c02:	f7ff fc1b 	bl	800043c <lcd_write_data>
 8000c06:	e00c      	b.n	8000c22 <do_interface+0x1a6>
		}
		else if (dT <= -STEP_TEMP)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	f113 0f04 	cmn.w	r3, #4
 8000c0e:	da04      	bge.n	8000c1a <do_interface+0x19e>
			lcd_write_data(&lcd, ccDOWN);
 8000c10:	2101      	movs	r1, #1
 8000c12:	4845      	ldr	r0, [pc, #276]	; (8000d28 <do_interface+0x2ac>)
 8000c14:	f7ff fc12 	bl	800043c <lcd_write_data>
 8000c18:	e003      	b.n	8000c22 <do_interface+0x1a6>
		else
			lcd_write_data(&lcd, '?'); // should never happen
 8000c1a:	213f      	movs	r1, #63	; 0x3f
 8000c1c:	4842      	ldr	r0, [pc, #264]	; (8000d28 <do_interface+0x2ac>)
 8000c1e:	f7ff fc0d 	bl	800043c <lcd_write_data>

	}
	// last symbol
	if ((MAX6675.temperature > (HOT_TEMP<<2)) || (!MAX6675.data_valid))
 8000c22:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <do_interface+0x2a8>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	2ba0      	cmp	r3, #160	; 0xa0
 8000c28:	d806      	bhi.n	8000c38 <do_interface+0x1bc>
 8000c2a:	4b3e      	ldr	r3, [pc, #248]	; (8000d24 <do_interface+0x2a8>)
 8000c2c:	789b      	ldrb	r3, [r3, #2]
 8000c2e:	f083 0301 	eor.w	r3, r3, #1
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00d      	beq.n	8000c54 <do_interface+0x1d8>
	{
		if (ticktack < 5)
 8000c38:	4b43      	ldr	r3, [pc, #268]	; (8000d48 <do_interface+0x2cc>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d804      	bhi.n	8000c4a <do_interface+0x1ce>
			lcd_write_data(&lcd, ccHOT);
 8000c40:	2104      	movs	r1, #4
 8000c42:	4839      	ldr	r0, [pc, #228]	; (8000d28 <do_interface+0x2ac>)
 8000c44:	f7ff fbfa 	bl	800043c <lcd_write_data>
		if (ticktack < 5)
 8000c48:	e011      	b.n	8000c6e <do_interface+0x1f2>
		else
			lcd_write_data(&lcd, ccHOTmirror);
 8000c4a:	2105      	movs	r1, #5
 8000c4c:	4836      	ldr	r0, [pc, #216]	; (8000d28 <do_interface+0x2ac>)
 8000c4e:	f7ff fbf5 	bl	800043c <lcd_write_data>
		if (ticktack < 5)
 8000c52:	e00c      	b.n	8000c6e <do_interface+0x1f2>
	}
	else
	{
		if (ticktack < 5)
 8000c54:	4b3c      	ldr	r3, [pc, #240]	; (8000d48 <do_interface+0x2cc>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d804      	bhi.n	8000c66 <do_interface+0x1ea>
			lcd_write_data(&lcd, ccDOT);
 8000c5c:	2107      	movs	r1, #7
 8000c5e:	4832      	ldr	r0, [pc, #200]	; (8000d28 <do_interface+0x2ac>)
 8000c60:	f7ff fbec 	bl	800043c <lcd_write_data>
 8000c64:	e003      	b.n	8000c6e <do_interface+0x1f2>
		else
			lcd_write_data(&lcd, ' ');
 8000c66:	2120      	movs	r1, #32
 8000c68:	482f      	ldr	r0, [pc, #188]	; (8000d28 <do_interface+0x2ac>)
 8000c6a:	f7ff fbe7 	bl	800043c <lcd_write_data>
	}
	if (++ticktack > 9)
 8000c6e:	4b36      	ldr	r3, [pc, #216]	; (8000d48 <do_interface+0x2cc>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <do_interface+0x2cc>)
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <do_interface+0x2cc>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b09      	cmp	r3, #9
 8000c80:	d902      	bls.n	8000c88 <do_interface+0x20c>
		ticktack = 0;
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <do_interface+0x2cc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]

	/* Check errors --------------------------------------------*/

	if (MAX6675.temperature > ((MAX_TEMP + 2*STEP_TEMP)<<2))
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <do_interface+0x2a8>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8000c90:	d909      	bls.n	8000ca6 <do_interface+0x22a>
	{
		temperature_SP = 0;
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <do_interface+0x2a4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	801a      	strh	r2, [r3, #0]
		global_error |= errTEMP_PV;
 8000c98:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <do_interface+0x2b8>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <do_interface+0x2b8>)
 8000ca4:	701a      	strb	r2, [r3, #0]
	}

	if (temperature_SP > MAX_TEMP)
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <do_interface+0x2a4>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000cae:	d909      	bls.n	8000cc4 <do_interface+0x248>
	{
		temperature_SP = 0;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <do_interface+0x2a4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	801a      	strh	r2, [r3, #0]
		global_error |= errTEMP_SP;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <do_interface+0x2b8>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <do_interface+0x2b8>)
 8000cc2:	701a      	strb	r2, [r3, #0]
	static uint32_t last_SP = 0xffff; // not realistic value, to be immediately replaced
	static uint32_t time_dT = 0;
	static bool check_heater = false;
	static uint32_t heater_timeout = 20;

	if (temperature_SP != last_SP) // user changed T
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <do_interface+0x2a4>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <do_interface+0x2d0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d046      	beq.n	8000d60 <do_interface+0x2e4>
	{
		if (dT >= 20) // T diff is more than 20 grad
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	2b13      	cmp	r3, #19
 8000cd6:	dd14      	ble.n	8000d02 <do_interface+0x286>
		{
			check_heater = true;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <do_interface+0x2d4>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
			last_dT = dT; // save value
 8000cde:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <do_interface+0x2d8>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	6013      	str	r3, [r2, #0]
			time_dT = HAL_GetTick(); // start timer
 8000ce4:	f002 fcda 	bl	800369c <HAL_GetTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <do_interface+0x2dc>)
 8000cec:	6013      	str	r3, [r2, #0]
			heater_timeout = 120;
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <do_interface+0x2e0>)
 8000cf0:	2278      	movs	r2, #120	; 0x78
 8000cf2:	601a      	str	r2, [r3, #0]
			if (dT >= 50)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	2b31      	cmp	r3, #49	; 0x31
 8000cf8:	dd55      	ble.n	8000da6 <do_interface+0x32a>
				heater_timeout = 20; // if diff 50 grad, react faster
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <do_interface+0x2e0>)
 8000cfc:	2214      	movs	r2, #20
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	e051      	b.n	8000da6 <do_interface+0x32a>
		}
		else
			check_heater = false;
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <do_interface+0x2d4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
 8000d08:	e04d      	b.n	8000da6 <do_interface+0x32a>
 8000d0a:	bf00      	nop
 8000d0c:	2000001c 	.word	0x2000001c
 8000d10:	2000001d 	.word	0x2000001d
 8000d14:	0800c924 	.word	0x0800c924
 8000d18:	20000254 	.word	0x20000254
 8000d1c:	2000029c 	.word	0x2000029c
 8000d20:	20000240 	.word	0x20000240
 8000d24:	20000234 	.word	0x20000234
 8000d28:	20000524 	.word	0x20000524
 8000d2c:	20000238 	.word	0x20000238
 8000d30:	0800c730 	.word	0x0800c730
 8000d34:	2000022c 	.word	0x2000022c
 8000d38:	20000243 	.word	0x20000243
 8000d3c:	20000230 	.word	0x20000230
 8000d40:	2000023e 	.word	0x2000023e
 8000d44:	66666667 	.word	0x66666667
 8000d48:	2000022d 	.word	0x2000022d
 8000d4c:	20000020 	.word	0x20000020
 8000d50:	200002a0 	.word	0x200002a0
 8000d54:	200002a4 	.word	0x200002a4
 8000d58:	200002a8 	.word	0x200002a8
 8000d5c:	20000024 	.word	0x20000024
	}
	else if (check_heater)
 8000d60:	4bb7      	ldr	r3, [pc, #732]	; (8001040 <do_interface+0x5c4>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d01e      	beq.n	8000da6 <do_interface+0x32a>
	{
		if (last_dT - dT > 5) // temperature changed more than 5 grad, ok!
 8000d68:	4bb6      	ldr	r3, [pc, #728]	; (8001044 <do_interface+0x5c8>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b05      	cmp	r3, #5
 8000d72:	dd03      	ble.n	8000d7c <do_interface+0x300>
			check_heater = false;
 8000d74:	4bb2      	ldr	r3, [pc, #712]	; (8001040 <do_interface+0x5c4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	e014      	b.n	8000da6 <do_interface+0x32a>
		else if (HAL_GetTick() - time_dT > heater_timeout*1024) // timeout, go in error
 8000d7c:	f002 fc8e 	bl	800369c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	4bb1      	ldr	r3, [pc, #708]	; (8001048 <do_interface+0x5cc>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	1ad2      	subs	r2, r2, r3
 8000d88:	4bb0      	ldr	r3, [pc, #704]	; (800104c <do_interface+0x5d0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	029b      	lsls	r3, r3, #10
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <do_interface+0x32a>
		{
			check_heater = false;
 8000d92:	4bab      	ldr	r3, [pc, #684]	; (8001040 <do_interface+0x5c4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
			global_error |= errHEATER;
 8000d98:	4bad      	ldr	r3, [pc, #692]	; (8001050 <do_interface+0x5d4>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4bab      	ldr	r3, [pc, #684]	; (8001050 <do_interface+0x5d4>)
 8000da4:	701a      	strb	r2, [r3, #0]
		}
	}
	last_SP = temperature_SP;
 8000da6:	4bab      	ldr	r3, [pc, #684]	; (8001054 <do_interface+0x5d8>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4baa      	ldr	r3, [pc, #680]	; (8001058 <do_interface+0x5dc>)
 8000dae:	601a      	str	r2, [r3, #0]

	/************************************/

	uint8_t enc_val = (encoder_value>>1)&0b1;
 8000db0:	4baa      	ldr	r3, [pc, #680]	; (800105c <do_interface+0x5e0>)
 8000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db4:	085b      	lsrs	r3, r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	71fb      	strb	r3, [r7, #7]


	if (button.long_press)
 8000dbe:	4ba8      	ldr	r3, [pc, #672]	; (8001060 <do_interface+0x5e4>)
 8000dc0:	785b      	ldrb	r3, [r3, #1]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d008      	beq.n	8000dd8 <do_interface+0x35c>
	{
		ui_state = uiLONG_PRESS;
 8000dc6:	4ba7      	ldr	r3, [pc, #668]	; (8001064 <do_interface+0x5e8>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
		temperature_SP = 0;
 8000dcc:	4ba1      	ldr	r3, [pc, #644]	; (8001054 <do_interface+0x5d8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	801a      	strh	r2, [r3, #0]
		global_error = errOK;
 8000dd2:	4b9f      	ldr	r3, [pc, #636]	; (8001050 <do_interface+0x5d4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
	}

	if (global_error)
 8000dd8:	4b9d      	ldr	r3, [pc, #628]	; (8001050 <do_interface+0x5d4>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <do_interface+0x36a>
		ui_state = uiMALFUNCTION;
 8000de0:	4ba0      	ldr	r3, [pc, #640]	; (8001064 <do_interface+0x5e8>)
 8000de2:	2209      	movs	r2, #9
 8000de4:	701a      	strb	r2, [r3, #0]

	switch(ui_state)
 8000de6:	4b9f      	ldr	r3, [pc, #636]	; (8001064 <do_interface+0x5e8>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b09      	cmp	r3, #9
 8000dec:	f200 81b2 	bhi.w	8001154 <do_interface+0x6d8>
 8000df0:	a201      	add	r2, pc, #4	; (adr r2, 8000df8 <do_interface+0x37c>)
 8000df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df6:	bf00      	nop
 8000df8:	08000e21 	.word	0x08000e21
 8000dfc:	08000e9f 	.word	0x08000e9f
 8000e00:	08000ee7 	.word	0x08000ee7
 8000e04:	08000f3d 	.word	0x08000f3d
 8000e08:	08000f97 	.word	0x08000f97
 8000e0c:	08000fc5 	.word	0x08000fc5
 8000e10:	08000fd1 	.word	0x08000fd1
 8000e14:	08001007 	.word	0x08001007
 8000e18:	08001035 	.word	0x08001035
 8000e1c:	08001099 	.word	0x08001099
	{
	case uiSTART:
		lcd_set_xy(&lcd, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	4890      	ldr	r0, [pc, #576]	; (8001068 <do_interface+0x5ec>)
 8000e26:	f7ff fa83 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "Long press  ");
 8000e2a:	4990      	ldr	r1, [pc, #576]	; (800106c <do_interface+0x5f0>)
 8000e2c:	488e      	ldr	r0, [pc, #568]	; (8001068 <do_interface+0x5ec>)
 8000e2e:	f7ff fa68 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2100      	movs	r1, #0
 8000e36:	488c      	ldr	r0, [pc, #560]	; (8001068 <do_interface+0x5ec>)
 8000e38:	f7ff fa7a 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "T=0 & reset ");
 8000e3c:	498c      	ldr	r1, [pc, #560]	; (8001070 <do_interface+0x5f4>)
 8000e3e:	488a      	ldr	r0, [pc, #552]	; (8001068 <do_interface+0x5ec>)
 8000e40:	f7ff fa5f 	bl	8000302 <lcd_string>
		lcd_write_data(&lcd, ccENTER);
 8000e44:	2100      	movs	r1, #0
 8000e46:	4888      	ldr	r0, [pc, #544]	; (8001068 <do_interface+0x5ec>)
 8000e48:	f7ff faf8 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 12, 1);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	210c      	movs	r1, #12
 8000e50:	4885      	ldr	r0, [pc, #532]	; (8001068 <do_interface+0x5ec>)
 8000e52:	f7ff fa6d 	bl	8000330 <lcd_set_xy>
		lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8000e56:	4b87      	ldr	r3, [pc, #540]	; (8001074 <do_interface+0x5f8>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf94      	ite	ls
 8000e5e:	2301      	movls	r3, #1
 8000e60:	2300      	movhi	r3, #0
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	2300      	movs	r3, #0
 8000e68:	2101      	movs	r1, #1
 8000e6a:	487f      	ldr	r0, [pc, #508]	; (8001068 <do_interface+0x5ec>)
 8000e6c:	f7ff f9fe 	bl	800026c <lcd_mode>
		if (!button.pressed && last_button)
 8000e70:	4b7b      	ldr	r3, [pc, #492]	; (8001060 <do_interface+0x5e4>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	f083 0301 	eor.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 8171 	beq.w	8001162 <do_interface+0x6e6>
 8000e80:	4b7d      	ldr	r3, [pc, #500]	; (8001078 <do_interface+0x5fc>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 816c 	beq.w	8001162 <do_interface+0x6e6>
		{
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4875      	ldr	r0, [pc, #468]	; (8001068 <do_interface+0x5ec>)
 8000e92:	f7ff f9eb 	bl	800026c <lcd_mode>
			ui_state = uiMENUenter;
 8000e96:	4b73      	ldr	r3, [pc, #460]	; (8001064 <do_interface+0x5e8>)
 8000e98:	2202      	movs	r2, #2
 8000e9a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000e9c:	e161      	b.n	8001162 <do_interface+0x6e6>
	case uiLONG_PRESS:
		lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4870      	ldr	r0, [pc, #448]	; (8001068 <do_interface+0x5ec>)
 8000ea6:	f7ff f9e1 	bl	800026c <lcd_mode>
		lcd_set_xy(&lcd, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	486e      	ldr	r0, [pc, #440]	; (8001068 <do_interface+0x5ec>)
 8000eb0:	f7ff fa3e 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "T set to 0  ");
 8000eb4:	4971      	ldr	r1, [pc, #452]	; (800107c <do_interface+0x600>)
 8000eb6:	486c      	ldr	r0, [pc, #432]	; (8001068 <do_interface+0x5ec>)
 8000eb8:	f7ff fa23 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4869      	ldr	r0, [pc, #420]	; (8001068 <do_interface+0x5ec>)
 8000ec2:	f7ff fa35 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "err. cleared ");
 8000ec6:	496e      	ldr	r1, [pc, #440]	; (8001080 <do_interface+0x604>)
 8000ec8:	4867      	ldr	r0, [pc, #412]	; (8001068 <do_interface+0x5ec>)
 8000eca:	f7ff fa1a 	bl	8000302 <lcd_string>
		if (!button.pressed)
 8000ece:	4b64      	ldr	r3, [pc, #400]	; (8001060 <do_interface+0x5e4>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	f083 0301 	eor.w	r3, r3, #1
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 8144 	beq.w	8001166 <do_interface+0x6ea>
			ui_state = uiMENUenter;
 8000ede:	4b61      	ldr	r3, [pc, #388]	; (8001064 <do_interface+0x5e8>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	701a      	strb	r2, [r3, #0]
		break;
 8000ee4:	e13f      	b.n	8001166 <do_interface+0x6ea>
	case uiMENUenter:
		lcd_mini_clear(&lcd);
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	469c      	mov	ip, r3
 8000eea:	485f      	ldr	r0, [pc, #380]	; (8001068 <do_interface+0x5ec>)
 8000eec:	f7ff fda0 	bl	8000a30 <lcd_mini_clear.8509>
		lcd_set_xy(&lcd, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	485c      	ldr	r0, [pc, #368]	; (8001068 <do_interface+0x5ec>)
 8000ef6:	f7ff fa1b 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " Profile");
 8000efa:	4962      	ldr	r1, [pc, #392]	; (8001084 <do_interface+0x608>)
 8000efc:	485a      	ldr	r0, [pc, #360]	; (8001068 <do_interface+0x5ec>)
 8000efe:	f7ff fa00 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2100      	movs	r1, #0
 8000f06:	4858      	ldr	r0, [pc, #352]	; (8001068 <do_interface+0x5ec>)
 8000f08:	f7ff fa12 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " Heatplate");
 8000f0c:	495e      	ldr	r1, [pc, #376]	; (8001088 <do_interface+0x60c>)
 8000f0e:	4856      	ldr	r0, [pc, #344]	; (8001068 <do_interface+0x5ec>)
 8000f10:	f7ff f9f7 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, (encoder_value>>1)&0b1);
 8000f14:	4b51      	ldr	r3, [pc, #324]	; (800105c <do_interface+0x5e0>)
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	085b      	lsrs	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	2100      	movs	r1, #0
 8000f26:	4850      	ldr	r0, [pc, #320]	; (8001068 <do_interface+0x5ec>)
 8000f28:	f7ff fa02 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, scAR);
 8000f2c:	217e      	movs	r1, #126	; 0x7e
 8000f2e:	484e      	ldr	r0, [pc, #312]	; (8001068 <do_interface+0x5ec>)
 8000f30:	f7ff fa84 	bl	800043c <lcd_write_data>
		ui_state = uiMENU;
 8000f34:	4b4b      	ldr	r3, [pc, #300]	; (8001064 <do_interface+0x5e8>)
 8000f36:	2203      	movs	r2, #3
 8000f38:	701a      	strb	r2, [r3, #0]
		break;
 8000f3a:	e119      	b.n	8001170 <do_interface+0x6f4>
	case uiMENU:
		lcd_set_xy(&lcd, 0, enc_val);
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2100      	movs	r1, #0
 8000f42:	4849      	ldr	r0, [pc, #292]	; (8001068 <do_interface+0x5ec>)
 8000f44:	f7ff f9f4 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, scAR);
 8000f48:	217e      	movs	r1, #126	; 0x7e
 8000f4a:	4847      	ldr	r0, [pc, #284]	; (8001068 <do_interface+0x5ec>)
 8000f4c:	f7ff fa76 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 0, 1 - enc_val);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f1c3 0301 	rsb	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4842      	ldr	r0, [pc, #264]	; (8001068 <do_interface+0x5ec>)
 8000f5e:	f7ff f9e7 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, ' ');
 8000f62:	2120      	movs	r1, #32
 8000f64:	4840      	ldr	r0, [pc, #256]	; (8001068 <do_interface+0x5ec>)
 8000f66:	f7ff fa69 	bl	800043c <lcd_write_data>
		if (!button.pressed && last_button)
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <do_interface+0x5e4>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	f083 0301 	eor.w	r3, r3, #1
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80f8 	beq.w	800116a <do_interface+0x6ee>
 8000f7a:	4b3f      	ldr	r3, [pc, #252]	; (8001078 <do_interface+0x5fc>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 80f3 	beq.w	800116a <do_interface+0x6ee>
		{
			ui_state = enc_val?uiHEATPLATEenter:uiSETTINGSenter;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <do_interface+0x512>
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	e000      	b.n	8000f90 <do_interface+0x514>
 8000f8e:	2206      	movs	r2, #6
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <do_interface+0x5e8>)
 8000f92:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f94:	e0e9      	b.n	800116a <do_interface+0x6ee>
	case uiHEATPLATEenter:
		lcd_mini_clear(&lcd);
 8000f96:	463b      	mov	r3, r7
 8000f98:	469c      	mov	ip, r3
 8000f9a:	4833      	ldr	r0, [pc, #204]	; (8001068 <do_interface+0x5ec>)
 8000f9c:	f7ff fd48 	bl	8000a30 <lcd_mini_clear.8509>
		lcd_set_xy(&lcd, 0, 1);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4830      	ldr	r0, [pc, #192]	; (8001068 <do_interface+0x5ec>)
 8000fa6:	f7ff f9c3 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, "Heatplate   ");
 8000faa:	4938      	ldr	r1, [pc, #224]	; (800108c <do_interface+0x610>)
 8000fac:	482e      	ldr	r0, [pc, #184]	; (8001068 <do_interface+0x5ec>)
 8000fae:	f7ff f9a8 	bl	8000302 <lcd_string>
		heatplate(true);
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	469c      	mov	ip, r3
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 f992 	bl	80012e0 <heatplate.8523>
		ui_state = uiHEATPLATE;
 8000fbc:	4b29      	ldr	r3, [pc, #164]	; (8001064 <do_interface+0x5e8>)
 8000fbe:	2205      	movs	r2, #5
 8000fc0:	701a      	strb	r2, [r3, #0]
		break;
 8000fc2:	e0d5      	b.n	8001170 <do_interface+0x6f4>
	case uiHEATPLATE:
		heatplate(false);
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 f989 	bl	80012e0 <heatplate.8523>
		break;
 8000fce:	e0cf      	b.n	8001170 <do_interface+0x6f4>
	case uiSETTINGSenter:
		lcd_set_xy(&lcd, 0, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4824      	ldr	r0, [pc, #144]	; (8001068 <do_interface+0x5ec>)
 8000fd6:	f7ff f9ab 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " Profile    ");
 8000fda:	492d      	ldr	r1, [pc, #180]	; (8001090 <do_interface+0x614>)
 8000fdc:	4822      	ldr	r0, [pc, #136]	; (8001068 <do_interface+0x5ec>)
 8000fde:	f7ff f990 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4820      	ldr	r0, [pc, #128]	; (8001068 <do_interface+0x5ec>)
 8000fe8:	f7ff f9a2 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " settings    ");
 8000fec:	4929      	ldr	r1, [pc, #164]	; (8001094 <do_interface+0x618>)
 8000fee:	481e      	ldr	r0, [pc, #120]	; (8001068 <do_interface+0x5ec>)
 8000ff0:	f7ff f987 	bl	8000302 <lcd_string>
		ui_state = uiSETTINGS;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <do_interface+0x5e8>)
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	701a      	strb	r2, [r3, #0]
		do_profile_settings(true);
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 fa9a 	bl	8001538 <do_profile_settings.8532>
		break;
 8001004:	e0b4      	b.n	8001170 <do_interface+0x6f4>
	case uiSETTINGS:
		if (do_profile_settings(false))
 8001006:	463b      	mov	r3, r7
 8001008:	469c      	mov	ip, r3
 800100a:	2000      	movs	r0, #0
 800100c:	f000 fa94 	bl	8001538 <do_profile_settings.8532>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 80ab 	beq.w	800116e <do_interface+0x6f2>
		{
			lcd_mini_clear(&lcd);
 8001018:	463b      	mov	r3, r7
 800101a:	469c      	mov	ip, r3
 800101c:	4812      	ldr	r0, [pc, #72]	; (8001068 <do_interface+0x5ec>)
 800101e:	f7ff fd07 	bl	8000a30 <lcd_mini_clear.8509>
			ui_state = uiREFLOW;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <do_interface+0x5e8>)
 8001024:	2208      	movs	r2, #8
 8001026:	701a      	strb	r2, [r3, #0]
			do_reflow(true);
 8001028:	463b      	mov	r3, r7
 800102a:	469c      	mov	ip, r3
 800102c:	2001      	movs	r0, #1
 800102e:	f000 ffd3 	bl	8001fd8 <do_reflow.8568>
		}
		break;
 8001032:	e09c      	b.n	800116e <do_interface+0x6f2>
	case uiREFLOW:
		do_reflow(false);
 8001034:	463b      	mov	r3, r7
 8001036:	469c      	mov	ip, r3
 8001038:	2000      	movs	r0, #0
 800103a:	f000 ffcd 	bl	8001fd8 <do_reflow.8568>
		break;
 800103e:	e097      	b.n	8001170 <do_interface+0x6f4>
 8001040:	200002a0 	.word	0x200002a0
 8001044:	200002a4 	.word	0x200002a4
 8001048:	200002a8 	.word	0x200002a8
 800104c:	20000024 	.word	0x20000024
 8001050:	2000022c 	.word	0x2000022c
 8001054:	20000240 	.word	0x20000240
 8001058:	20000020 	.word	0x20000020
 800105c:	40000400 	.word	0x40000400
 8001060:	20000230 	.word	0x20000230
 8001064:	20000243 	.word	0x20000243
 8001068:	20000524 	.word	0x20000524
 800106c:	0800c734 	.word	0x0800c734
 8001070:	0800c744 	.word	0x0800c744
 8001074:	2000022d 	.word	0x2000022d
 8001078:	200002ac 	.word	0x200002ac
 800107c:	0800c754 	.word	0x0800c754
 8001080:	0800c764 	.word	0x0800c764
 8001084:	0800c774 	.word	0x0800c774
 8001088:	0800c780 	.word	0x0800c780
 800108c:	0800c78c 	.word	0x0800c78c
 8001090:	0800c79c 	.word	0x0800c79c
 8001094:	0800c7ac 	.word	0x0800c7ac
	case uiMALFUNCTION: // just check errors
		temperature_SP = 0;
 8001098:	4b3a      	ldr	r3, [pc, #232]	; (8001184 <do_interface+0x708>)
 800109a:	2200      	movs	r2, #0
 800109c:	801a      	strh	r2, [r3, #0]
		lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 800109e:	2300      	movs	r3, #0
 80010a0:	2200      	movs	r2, #0
 80010a2:	2101      	movs	r1, #1
 80010a4:	4838      	ldr	r0, [pc, #224]	; (8001188 <do_interface+0x70c>)
 80010a6:	f7ff f8e1 	bl	800026c <lcd_mode>
		lcd_set_xy(&lcd, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	4836      	ldr	r0, [pc, #216]	; (8001188 <do_interface+0x70c>)
 80010b0:	f7ff f93e 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, " * Error! * ");
 80010b4:	4935      	ldr	r1, [pc, #212]	; (800118c <do_interface+0x710>)
 80010b6:	4834      	ldr	r0, [pc, #208]	; (8001188 <do_interface+0x70c>)
 80010b8:	f7ff f923 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	2100      	movs	r1, #0
 80010c0:	4831      	ldr	r0, [pc, #196]	; (8001188 <do_interface+0x70c>)
 80010c2:	f7ff f935 	bl	8000330 <lcd_set_xy>
		if (global_error & errMAX6675_invalid)
 80010c6:	4b32      	ldr	r3, [pc, #200]	; (8001190 <do_interface+0x714>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	f003 0310 	and.w	r3, r3, #16
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d004      	beq.n	80010dc <do_interface+0x660>
			lcd_string(&lcd, "Temp. Sensor");
 80010d2:	4930      	ldr	r1, [pc, #192]	; (8001194 <do_interface+0x718>)
 80010d4:	482c      	ldr	r0, [pc, #176]	; (8001188 <do_interface+0x70c>)
 80010d6:	f7ff f914 	bl	8000302 <lcd_string>
		else if (global_error & errTIMEOUT)
			lcd_string(&lcd, "timeout     ");
		else
			lcd_string(&lcd, "fatal error ");

		break;
 80010da:	e049      	b.n	8001170 <do_interface+0x6f4>
		else if (global_error & errTEMP_SP)
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <do_interface+0x714>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <do_interface+0x676>
			lcd_string(&lcd, "SP too high ");
 80010e8:	492b      	ldr	r1, [pc, #172]	; (8001198 <do_interface+0x71c>)
 80010ea:	4827      	ldr	r0, [pc, #156]	; (8001188 <do_interface+0x70c>)
 80010ec:	f7ff f909 	bl	8000302 <lcd_string>
		break;
 80010f0:	e03e      	b.n	8001170 <do_interface+0x6f4>
		else if (global_error & errTEMP_PV)
 80010f2:	4b27      	ldr	r3, [pc, #156]	; (8001190 <do_interface+0x714>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <do_interface+0x68c>
			lcd_string(&lcd, "T too high  ");
 80010fe:	4927      	ldr	r1, [pc, #156]	; (800119c <do_interface+0x720>)
 8001100:	4821      	ldr	r0, [pc, #132]	; (8001188 <do_interface+0x70c>)
 8001102:	f7ff f8fe 	bl	8000302 <lcd_string>
		break;
 8001106:	e033      	b.n	8001170 <do_interface+0x6f4>
		else if (global_error & errHEATER)
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <do_interface+0x714>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <do_interface+0x6a2>
			lcd_string(&lcd, "heater power");
 8001114:	4922      	ldr	r1, [pc, #136]	; (80011a0 <do_interface+0x724>)
 8001116:	481c      	ldr	r0, [pc, #112]	; (8001188 <do_interface+0x70c>)
 8001118:	f7ff f8f3 	bl	8000302 <lcd_string>
		break;
 800111c:	e028      	b.n	8001170 <do_interface+0x6f4>
		else if (global_error & errI_LIMIT)
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <do_interface+0x714>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <do_interface+0x6b8>
			lcd_string(&lcd, "heater limit");
 800112a:	491e      	ldr	r1, [pc, #120]	; (80011a4 <do_interface+0x728>)
 800112c:	4816      	ldr	r0, [pc, #88]	; (8001188 <do_interface+0x70c>)
 800112e:	f7ff f8e8 	bl	8000302 <lcd_string>
		break;
 8001132:	e01d      	b.n	8001170 <do_interface+0x6f4>
		else if (global_error & errTIMEOUT)
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <do_interface+0x714>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f003 0320 	and.w	r3, r3, #32
 800113c:	2b00      	cmp	r3, #0
 800113e:	d004      	beq.n	800114a <do_interface+0x6ce>
			lcd_string(&lcd, "timeout     ");
 8001140:	4919      	ldr	r1, [pc, #100]	; (80011a8 <do_interface+0x72c>)
 8001142:	4811      	ldr	r0, [pc, #68]	; (8001188 <do_interface+0x70c>)
 8001144:	f7ff f8dd 	bl	8000302 <lcd_string>
		break;
 8001148:	e012      	b.n	8001170 <do_interface+0x6f4>
			lcd_string(&lcd, "fatal error ");
 800114a:	4918      	ldr	r1, [pc, #96]	; (80011ac <do_interface+0x730>)
 800114c:	480e      	ldr	r0, [pc, #56]	; (8001188 <do_interface+0x70c>)
 800114e:	f7ff f8d8 	bl	8000302 <lcd_string>
		break;
 8001152:	e00d      	b.n	8001170 <do_interface+0x6f4>
	default:
		global_error = errFATAL;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <do_interface+0x714>)
 8001156:	2240      	movs	r2, #64	; 0x40
 8001158:	701a      	strb	r2, [r3, #0]
		ui_state = uiMALFUNCTION;
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <do_interface+0x734>)
 800115c:	2209      	movs	r2, #9
 800115e:	701a      	strb	r2, [r3, #0]
		break;
 8001160:	e006      	b.n	8001170 <do_interface+0x6f4>
		break;
 8001162:	bf00      	nop
 8001164:	e004      	b.n	8001170 <do_interface+0x6f4>
		break;
 8001166:	bf00      	nop
 8001168:	e002      	b.n	8001170 <do_interface+0x6f4>
		break;
 800116a:	bf00      	nop
 800116c:	e000      	b.n	8001170 <do_interface+0x6f4>
		break;
 800116e:	bf00      	nop
	}
	last_button = button.pressed;
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <do_interface+0x738>)
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <do_interface+0x73c>)
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	e000      	b.n	800117c <do_interface+0x700>
		return;
 800117a:	bf00      	nop
}
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000240 	.word	0x20000240
 8001188:	20000524 	.word	0x20000524
 800118c:	0800c7bc 	.word	0x0800c7bc
 8001190:	2000022c 	.word	0x2000022c
 8001194:	0800c7cc 	.word	0x0800c7cc
 8001198:	0800c7dc 	.word	0x0800c7dc
 800119c:	0800c7ec 	.word	0x0800c7ec
 80011a0:	0800c7fc 	.word	0x0800c7fc
 80011a4:	0800c80c 	.word	0x0800c80c
 80011a8:	0800c81c 	.word	0x0800c81c
 80011ac:	0800c82c 	.word	0x0800c82c
 80011b0:	20000243 	.word	0x20000243
 80011b4:	20000230 	.word	0x20000230
 80011b8:	200002ac 	.word	0x200002ac

080011bc <change_temperature.8513>:
	{
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	f8c7 c004 	str.w	ip, [r7, #4]
		int32_t temp = (int32_t)t; // to avoid zero-cross
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	617b      	str	r3, [r7, #20]
		temp = (temp / STEP_TEMP) * STEP_TEMP; // round for more beauty
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	4a11      	ldr	r2, [pc, #68]	; (8001218 <change_temperature.8513+0x5c>)
 80011d2:	fb82 1203 	smull	r1, r2, r2, r3
 80011d6:	1052      	asrs	r2, r2, #1
 80011d8:	17db      	asrs	r3, r3, #31
 80011da:	1ad2      	subs	r2, r2, r3
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]
		temp += (diff>>1)*STEP_TEMP;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	105a      	asrs	r2, r3, #1
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4413      	add	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]
		if (temp < 0)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	da01      	bge.n	80011fe <change_temperature.8513+0x42>
			temp = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
		if (temp > MAX_TEMP)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001204:	dd02      	ble.n	800120c <change_temperature.8513+0x50>
			temp = MAX_TEMP;
 8001206:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800120a:	617b      	str	r3, [r7, #20]
		return (uint32_t)temp;
 800120c:	697b      	ldr	r3, [r7, #20]
	}
 800120e:	4618      	mov	r0, r3
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	66666667 	.word	0x66666667

0800121c <change_time.8518>:
	{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	f8c7 c004 	str.w	ip, [r7, #4]
		int32_t temp = (int32_t)t; // to avoid zero-cross
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	617b      	str	r3, [r7, #20]
		int32_t step = 5; // how much to change the time in seconds
 800122e:	2305      	movs	r3, #5
 8001230:	613b      	str	r3, [r7, #16]
		if (t < 60)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2b3b      	cmp	r3, #59	; 0x3b
 8001236:	d802      	bhi.n	800123e <change_time.8518+0x22>
			step = 5;
 8001238:	2305      	movs	r3, #5
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	e02d      	b.n	800129a <change_time.8518+0x7e>
		else if (t < 120)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b77      	cmp	r3, #119	; 0x77
 8001242:	d802      	bhi.n	800124a <change_time.8518+0x2e>
			step = 10;
 8001244:	230a      	movs	r3, #10
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	e027      	b.n	800129a <change_time.8518+0x7e>
		else if (t < 300)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001250:	d202      	bcs.n	8001258 <change_time.8518+0x3c>
			step = 20;
 8001252:	2314      	movs	r3, #20
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	e020      	b.n	800129a <change_time.8518+0x7e>
		else if (t < 600)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800125e:	d202      	bcs.n	8001266 <change_time.8518+0x4a>
			step = 30;
 8001260:	231e      	movs	r3, #30
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	e019      	b.n	800129a <change_time.8518+0x7e>
		else if (t < 1200)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800126c:	d202      	bcs.n	8001274 <change_time.8518+0x58>
			step = 60;
 800126e:	233c      	movs	r3, #60	; 0x3c
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	e012      	b.n	800129a <change_time.8518+0x7e>
		else if (t < 3600)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800127a:	d203      	bcs.n	8001284 <change_time.8518+0x68>
			step = 300;
 800127c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	e00a      	b.n	800129a <change_time.8518+0x7e>
		else if (t < 7200)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800128a:	d203      	bcs.n	8001294 <change_time.8518+0x78>
			step = 600;
 800128c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	e002      	b.n	800129a <change_time.8518+0x7e>
			step = 1800;
 8001294:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001298:	613b      	str	r3, [r7, #16]
		temp = (temp / step) * step; // round
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	fb92 f2f3 	sdiv	r2, r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
 80012a8:	617b      	str	r3, [r7, #20]
		temp += (diff>>1)*step;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	105b      	asrs	r3, r3, #1
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	4413      	add	r3, r2
 80012b8:	617b      	str	r3, [r7, #20]
		if (temp < 5)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2b04      	cmp	r3, #4
 80012be:	dc01      	bgt.n	80012c4 <change_time.8518+0xa8>
			temp = 5;
 80012c0:	2305      	movs	r3, #5
 80012c2:	617b      	str	r3, [r7, #20]
		if (temp > 900*60)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 80012ca:	4293      	cmp	r3, r2
 80012cc:	dd02      	ble.n	80012d4 <change_time.8518+0xb8>
			temp = 900*60;
 80012ce:	f24d 23f0 	movw	r3, #54000	; 0xd2f0
 80012d2:	617b      	str	r3, [r7, #20]
		return (uint32_t)temp;
 80012d4:	697b      	ldr	r3, [r7, #20]
	}
 80012d6:	4618      	mov	r0, r3
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <heatplate.8523>:
	{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
 80012ea:	f8c7 c000 	str.w	ip, [r7]
		if (reset)
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00d      	beq.n	8001310 <heatplate.8523+0x30>
			last_encoder = encoder_value;
 80012f4:	4b4e      	ldr	r3, [pc, #312]	; (8001430 <heatplate.8523+0x150>)
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b4e      	ldr	r3, [pc, #312]	; (8001434 <heatplate.8523+0x154>)
 80012fc:	801a      	strh	r2, [r3, #0]
			diff = 0;
 80012fe:	4b4e      	ldr	r3, [pc, #312]	; (8001438 <heatplate.8523+0x158>)
 8001300:	2200      	movs	r2, #0
 8001302:	801a      	strh	r2, [r3, #0]
			last_time = HAL_GetTick();
 8001304:	f002 f9ca 	bl	800369c <HAL_GetTick>
 8001308:	4603      	mov	r3, r0
 800130a:	4a4c      	ldr	r2, [pc, #304]	; (800143c <heatplate.8523+0x15c>)
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e08b      	b.n	8001428 <heatplate.8523+0x148>
		diff-=(int16_t)(encoder_value - last_encoder);
 8001310:	4b47      	ldr	r3, [pc, #284]	; (8001430 <heatplate.8523+0x150>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	b29a      	uxth	r2, r3
 8001316:	4b47      	ldr	r3, [pc, #284]	; (8001434 <heatplate.8523+0x154>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	b29b      	uxth	r3, r3
 800131e:	b219      	sxth	r1, r3
 8001320:	4b45      	ldr	r3, [pc, #276]	; (8001438 <heatplate.8523+0x158>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b21b      	sxth	r3, r3
 8001326:	b29a      	uxth	r2, r3
 8001328:	b28b      	uxth	r3, r1
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b29b      	uxth	r3, r3
 800132e:	b21a      	sxth	r2, r3
 8001330:	4b41      	ldr	r3, [pc, #260]	; (8001438 <heatplate.8523+0x158>)
 8001332:	801a      	strh	r2, [r3, #0]
		last_encoder = encoder_value;
 8001334:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <heatplate.8523+0x150>)
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	b29a      	uxth	r2, r3
 800133a:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <heatplate.8523+0x154>)
 800133c:	801a      	strh	r2, [r3, #0]
		if (diff < 0)
 800133e:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <heatplate.8523+0x158>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	b21b      	sxth	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	da02      	bge.n	800134e <heatplate.8523+0x6e>
			diff = 0;
 8001348:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <heatplate.8523+0x158>)
 800134a:	2200      	movs	r2, #0
 800134c:	801a      	strh	r2, [r3, #0]
		if (diff > upper_limit)
 800134e:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <heatplate.8523+0x158>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	b21b      	sxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <heatplate.8523+0x160>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	dd04      	ble.n	8001368 <heatplate.8523+0x88>
			diff = upper_limit; // between 0*2 and MAX_TEMP*2
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <heatplate.8523+0x160>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	b21a      	sxth	r2, r3
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <heatplate.8523+0x158>)
 8001366:	801a      	strh	r2, [r3, #0]
		if (button.pressed)
 8001368:	4b36      	ldr	r3, [pc, #216]	; (8001444 <heatplate.8523+0x164>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <heatplate.8523+0x96>
			diff = 0;
 8001370:	4b31      	ldr	r3, [pc, #196]	; (8001438 <heatplate.8523+0x158>)
 8001372:	2200      	movs	r2, #0
 8001374:	801a      	strh	r2, [r3, #0]
		tbuf[0] = '+';
 8001376:	232b      	movs	r3, #43	; 0x2b
 8001378:	743b      	strb	r3, [r7, #16]
		int2time((HAL_GetTick() - last_time)/1000, tbuf+1);
 800137a:	f002 f98f 	bl	800369c <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	4b2e      	ldr	r3, [pc, #184]	; (800143c <heatplate.8523+0x15c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	4a30      	ldr	r2, [pc, #192]	; (8001448 <heatplate.8523+0x168>)
 8001388:	fba2 2303 	umull	r2, r3, r2, r3
 800138c:	099a      	lsrs	r2, r3, #6
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	3301      	adds	r3, #1
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f7ff f90c 	bl	80005b4 <int2time>
		lcd_set_xy(&lcd, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	482a      	ldr	r0, [pc, #168]	; (800144c <heatplate.8523+0x16c>)
 80013a2:	f7fe ffc5 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, (char*)tbuf);
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4619      	mov	r1, r3
 80013ac:	4827      	ldr	r0, [pc, #156]	; (800144c <heatplate.8523+0x16c>)
 80013ae:	f7fe ffa8 	bl	8000302 <lcd_string>
		temperature_SP = STEP_TEMP*(diff>>1);
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <heatplate.8523+0x158>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	105b      	asrs	r3, r3, #1
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	b29b      	uxth	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <heatplate.8523+0x170>)
 80013c8:	801a      	strh	r2, [r3, #0]
		int2string(temperature_SP, buf, sizeof(buf));
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <heatplate.8523+0x170>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2203      	movs	r2, #3
 80013d6:	4619      	mov	r1, r3
 80013d8:	f7ff f8ae 	bl	8000538 <int2string>
		lcd_set_xy(&lcd, 7, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2107      	movs	r1, #7
 80013e0:	481a      	ldr	r0, [pc, #104]	; (800144c <heatplate.8523+0x16c>)
 80013e2:	f7fe ffa5 	bl	8000330 <lcd_set_xy>
		lcd_out(&lcd, buf, sizeof(buf));
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	2203      	movs	r2, #3
 80013ec:	4619      	mov	r1, r3
 80013ee:	4817      	ldr	r0, [pc, #92]	; (800144c <heatplate.8523+0x16c>)
 80013f0:	f7fe ff69 	bl	80002c6 <lcd_out>
		lcd_write_data(&lcd, scGRAD); // grad
 80013f4:	21df      	movs	r1, #223	; 0xdf
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <heatplate.8523+0x16c>)
 80013f8:	f7ff f820 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, scAR); // arrow right
 80013fc:	217e      	movs	r1, #126	; 0x7e
 80013fe:	4813      	ldr	r0, [pc, #76]	; (800144c <heatplate.8523+0x16c>)
 8001400:	f7ff f81c 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 9, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2109      	movs	r1, #9
 8001408:	4810      	ldr	r0, [pc, #64]	; (800144c <heatplate.8523+0x16c>)
 800140a:	f7fe ff91 	bl	8000330 <lcd_set_xy>
		lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <heatplate.8523+0x174>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf94      	ite	ls
 8001416:	2301      	movls	r3, #1
 8001418:	2300      	movhi	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	2300      	movs	r3, #0
 8001420:	2101      	movs	r1, #1
 8001422:	480a      	ldr	r0, [pc, #40]	; (800144c <heatplate.8523+0x16c>)
 8001424:	f7fe ff22 	bl	800026c <lcd_mode>
	}
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40000400 	.word	0x40000400
 8001434:	200002ae 	.word	0x200002ae
 8001438:	200002b0 	.word	0x200002b0
 800143c:	200002b4 	.word	0x200002b4
 8001440:	0800c934 	.word	0x0800c934
 8001444:	20000230 	.word	0x20000230
 8001448:	10624dd3 	.word	0x10624dd3
 800144c:	20000524 	.word	0x20000524
 8001450:	20000240 	.word	0x20000240
 8001454:	2000022d 	.word	0x2000022d

08001458 <show_step_menu.8542>:
		{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	4664      	mov	r4, ip
 8001460:	f8c7 c004 	str.w	ip, [r7, #4]
			int2time(steps[pos].time, time_buf);
 8001464:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <show_step_menu.8542+0xcc>)
 8001466:	f993 3000 	ldrsb.w	r3, [r3]
 800146a:	4a2f      	ldr	r2, [pc, #188]	; (8001528 <show_step_menu.8542+0xd0>)
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4413      	add	r3, r2
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4622      	mov	r2, r4
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f89c 	bl	80005b4 <int2time>
			lcd_set_xy(&lcd, 5, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	2105      	movs	r1, #5
 8001480:	482a      	ldr	r0, [pc, #168]	; (800152c <show_step_menu.8542+0xd4>)
 8001482:	f7fe ff55 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, (char*)time_buf);
 8001486:	4623      	mov	r3, r4
 8001488:	4619      	mov	r1, r3
 800148a:	4828      	ldr	r0, [pc, #160]	; (800152c <show_step_menu.8542+0xd4>)
 800148c:	f7fe ff39 	bl	8000302 <lcd_string>
			int2string(steps[pos].temp, buf, sizeof(buf));
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <show_step_menu.8542+0xcc>)
 8001492:	f993 3000 	ldrsb.w	r3, [r3]
 8001496:	461a      	mov	r2, r3
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <show_step_menu.8542+0xd0>)
 800149a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800149e:	4618      	mov	r0, r3
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2203      	movs	r2, #3
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff f846 	bl	8000538 <int2string>
			lcd_set_xy(&lcd, 0, 1);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2100      	movs	r1, #0
 80014b0:	481e      	ldr	r0, [pc, #120]	; (800152c <show_step_menu.8542+0xd4>)
 80014b2:	f7fe ff3d 	bl	8000330 <lcd_set_xy>
			lcd_out(&lcd, buf, sizeof(buf));
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2203      	movs	r2, #3
 80014bc:	4619      	mov	r1, r3
 80014be:	481b      	ldr	r0, [pc, #108]	; (800152c <show_step_menu.8542+0xd4>)
 80014c0:	f7fe ff01 	bl	80002c6 <lcd_out>
			lcd_write_data(&lcd, scGRAD); // grad
 80014c4:	21df      	movs	r1, #223	; 0xdf
 80014c6:	4819      	ldr	r0, [pc, #100]	; (800152c <show_step_menu.8542+0xd4>)
 80014c8:	f7fe ffb8 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, ' ');
 80014cc:	2120      	movs	r1, #32
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <show_step_menu.8542+0xd4>)
 80014d0:	f7fe ffb4 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	4814      	ldr	r0, [pc, #80]	; (800152c <show_step_menu.8542+0xd4>)
 80014da:	f7fe ff29 	bl	8000330 <lcd_set_xy>
			lcd_write_data(&lcd, '#');
 80014de:	2123      	movs	r1, #35	; 0x23
 80014e0:	4812      	ldr	r0, [pc, #72]	; (800152c <show_step_menu.8542+0xd4>)
 80014e2:	f7fe ffab 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, pos+'1');
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <show_step_menu.8542+0xcc>)
 80014e8:	f993 3000 	ldrsb.w	r3, [r3]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	3331      	adds	r3, #49	; 0x31
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <show_step_menu.8542+0xd4>)
 80014f6:	f7fe ffa1 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, '/');
 80014fa:	212f      	movs	r1, #47	; 0x2f
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <show_step_menu.8542+0xd4>)
 80014fe:	f7fe ff9d 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, max_steps + '0');
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <show_step_menu.8542+0xd8>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	3330      	adds	r3, #48	; 0x30
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4619      	mov	r1, r3
 800150c:	4807      	ldr	r0, [pc, #28]	; (800152c <show_step_menu.8542+0xd4>)
 800150e:	f7fe ff95 	bl	800043c <lcd_write_data>
			lcd_string(&lcd, " step   ");
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <show_step_menu.8542+0xdc>)
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <show_step_menu.8542+0xd4>)
 8001516:	f7fe fef4 	bl	8000302 <lcd_string>
		}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}
 8001522:	bf00      	nop
 8001524:	200002bc 	.word	0x200002bc
 8001528:	20000254 	.word	0x20000254
 800152c:	20000524 	.word	0x20000524
 8001530:	2000001d 	.word	0x2000001d
 8001534:	0800c83c 	.word	0x0800c83c

08001538 <do_profile_settings.8532>:
	{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
 8001542:	4664      	mov	r4, ip
 8001544:	f8c7 c000 	str.w	ip, [r7]
	bool do_profile_settings(bool reset)
 8001548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800154c:	617b      	str	r3, [r7, #20]
		if (reset)
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d015      	beq.n	8001580 <do_profile_settings.8532+0x48>
			last_encoder = encoder_value;
 8001554:	4bc4      	ldr	r3, [pc, #784]	; (8001868 <do_profile_settings.8532+0x330>)
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	b29a      	uxth	r2, r3
 800155a:	4bc4      	ldr	r3, [pc, #784]	; (800186c <do_profile_settings.8532+0x334>)
 800155c:	801a      	strh	r2, [r3, #0]
			diff = 0;
 800155e:	4bc4      	ldr	r3, [pc, #784]	; (8001870 <do_profile_settings.8532+0x338>)
 8001560:	2200      	movs	r2, #0
 8001562:	801a      	strh	r2, [r3, #0]
			pos = 0;
 8001564:	4bc3      	ldr	r3, [pc, #780]	; (8001874 <do_profile_settings.8532+0x33c>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
			profile_state = 0;
 800156a:	4bc3      	ldr	r3, [pc, #780]	; (8001878 <do_profile_settings.8532+0x340>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
			last_time = HAL_GetTick();
 8001570:	f002 f894 	bl	800369c <HAL_GetTick>
 8001574:	4603      	mov	r3, r0
 8001576:	4ac1      	ldr	r2, [pc, #772]	; (800187c <do_profile_settings.8532+0x344>)
 8001578:	6013      	str	r3, [r2, #0]
			return false;
 800157a:	2300      	movs	r3, #0
 800157c:	f000 bd10 	b.w	8001fa0 <do_profile_settings.8532+0xa68>
		if (HAL_GetTick() - last_time < 1000)
 8001580:	f002 f88c 	bl	800369c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	4bbd      	ldr	r3, [pc, #756]	; (800187c <do_profile_settings.8532+0x344>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001590:	d202      	bcs.n	8001598 <do_profile_settings.8532+0x60>
			return false; // delay to show intro text
 8001592:	2300      	movs	r3, #0
 8001594:	f000 bd04 	b.w	8001fa0 <do_profile_settings.8532+0xa68>
		diff-=(int16_t)(encoder_value - last_encoder);
 8001598:	4bb3      	ldr	r3, [pc, #716]	; (8001868 <do_profile_settings.8532+0x330>)
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	b29a      	uxth	r2, r3
 800159e:	4bb3      	ldr	r3, [pc, #716]	; (800186c <do_profile_settings.8532+0x334>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	b219      	sxth	r1, r3
 80015a8:	4bb1      	ldr	r3, [pc, #708]	; (8001870 <do_profile_settings.8532+0x338>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	b28b      	uxth	r3, r1
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	4bad      	ldr	r3, [pc, #692]	; (8001870 <do_profile_settings.8532+0x338>)
 80015ba:	801a      	strh	r2, [r3, #0]
		last_encoder = encoder_value;
 80015bc:	4baa      	ldr	r3, [pc, #680]	; (8001868 <do_profile_settings.8532+0x330>)
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4baa      	ldr	r3, [pc, #680]	; (800186c <do_profile_settings.8532+0x334>)
 80015c4:	801a      	strh	r2, [r3, #0]
		switch (profile_state)
 80015c6:	4bac      	ldr	r3, [pc, #688]	; (8001878 <do_profile_settings.8532+0x340>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b5a      	cmp	r3, #90	; 0x5a
 80015cc:	f200 84da 	bhi.w	8001f84 <do_profile_settings.8532+0xa4c>
 80015d0:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <do_profile_settings.8532+0xa0>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	08001745 	.word	0x08001745
 80015dc:	08001755 	.word	0x08001755
 80015e0:	08001f85 	.word	0x08001f85
 80015e4:	08001f85 	.word	0x08001f85
 80015e8:	08001f85 	.word	0x08001f85
 80015ec:	08001f85 	.word	0x08001f85
 80015f0:	08001f85 	.word	0x08001f85
 80015f4:	08001f85 	.word	0x08001f85
 80015f8:	08001f85 	.word	0x08001f85
 80015fc:	08001f85 	.word	0x08001f85
 8001600:	0800183d 	.word	0x0800183d
 8001604:	08001913 	.word	0x08001913
 8001608:	08001a49 	.word	0x08001a49
 800160c:	08001b8f 	.word	0x08001b8f
 8001610:	08001bfd 	.word	0x08001bfd
 8001614:	08001f85 	.word	0x08001f85
 8001618:	08001f85 	.word	0x08001f85
 800161c:	08001f85 	.word	0x08001f85
 8001620:	08001f85 	.word	0x08001f85
 8001624:	08001f85 	.word	0x08001f85
 8001628:	08001f85 	.word	0x08001f85
 800162c:	08001c6b 	.word	0x08001c6b
 8001630:	08001d11 	.word	0x08001d11
 8001634:	08001d6d 	.word	0x08001d6d
 8001638:	08001e45 	.word	0x08001e45
 800163c:	08001f85 	.word	0x08001f85
 8001640:	08001f85 	.word	0x08001f85
 8001644:	08001f85 	.word	0x08001f85
 8001648:	08001f85 	.word	0x08001f85
 800164c:	08001f85 	.word	0x08001f85
 8001650:	08001f85 	.word	0x08001f85
 8001654:	08001f85 	.word	0x08001f85
 8001658:	08001f85 	.word	0x08001f85
 800165c:	08001f85 	.word	0x08001f85
 8001660:	08001f85 	.word	0x08001f85
 8001664:	08001f85 	.word	0x08001f85
 8001668:	08001f85 	.word	0x08001f85
 800166c:	08001f85 	.word	0x08001f85
 8001670:	08001f85 	.word	0x08001f85
 8001674:	08001f85 	.word	0x08001f85
 8001678:	08001f85 	.word	0x08001f85
 800167c:	08001f85 	.word	0x08001f85
 8001680:	08001f85 	.word	0x08001f85
 8001684:	08001f85 	.word	0x08001f85
 8001688:	08001f85 	.word	0x08001f85
 800168c:	08001f85 	.word	0x08001f85
 8001690:	08001f85 	.word	0x08001f85
 8001694:	08001f85 	.word	0x08001f85
 8001698:	08001f85 	.word	0x08001f85
 800169c:	08001f85 	.word	0x08001f85
 80016a0:	08001f85 	.word	0x08001f85
 80016a4:	08001f85 	.word	0x08001f85
 80016a8:	08001f85 	.word	0x08001f85
 80016ac:	08001f85 	.word	0x08001f85
 80016b0:	08001f85 	.word	0x08001f85
 80016b4:	08001f85 	.word	0x08001f85
 80016b8:	08001f85 	.word	0x08001f85
 80016bc:	08001f85 	.word	0x08001f85
 80016c0:	08001f85 	.word	0x08001f85
 80016c4:	08001f85 	.word	0x08001f85
 80016c8:	08001f85 	.word	0x08001f85
 80016cc:	08001f85 	.word	0x08001f85
 80016d0:	08001f85 	.word	0x08001f85
 80016d4:	08001f85 	.word	0x08001f85
 80016d8:	08001f85 	.word	0x08001f85
 80016dc:	08001f85 	.word	0x08001f85
 80016e0:	08001f85 	.word	0x08001f85
 80016e4:	08001f85 	.word	0x08001f85
 80016e8:	08001f85 	.word	0x08001f85
 80016ec:	08001f85 	.word	0x08001f85
 80016f0:	08001f85 	.word	0x08001f85
 80016f4:	08001f85 	.word	0x08001f85
 80016f8:	08001f85 	.word	0x08001f85
 80016fc:	08001f85 	.word	0x08001f85
 8001700:	08001f85 	.word	0x08001f85
 8001704:	08001f85 	.word	0x08001f85
 8001708:	08001f85 	.word	0x08001f85
 800170c:	08001f85 	.word	0x08001f85
 8001710:	08001f85 	.word	0x08001f85
 8001714:	08001f85 	.word	0x08001f85
 8001718:	08001f85 	.word	0x08001f85
 800171c:	08001f85 	.word	0x08001f85
 8001720:	08001f85 	.word	0x08001f85
 8001724:	08001f85 	.word	0x08001f85
 8001728:	08001f85 	.word	0x08001f85
 800172c:	08001f85 	.word	0x08001f85
 8001730:	08001f85 	.word	0x08001f85
 8001734:	08001f85 	.word	0x08001f85
 8001738:	08001f85 	.word	0x08001f85
 800173c:	08001f85 	.word	0x08001f85
 8001740:	08001ea1 	.word	0x08001ea1
			pos = 0;
 8001744:	4b4b      	ldr	r3, [pc, #300]	; (8001874 <do_profile_settings.8532+0x33c>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
			profile_state = 1;
 800174a:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <do_profile_settings.8532+0x340>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
			break;
 8001750:	f000 bc21 	b.w	8001f96 <do_profile_settings.8532+0xa5e>
			if (diff>>1 == 0)
 8001754:	4b46      	ldr	r3, [pc, #280]	; (8001870 <do_profile_settings.8532+0x338>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	b21b      	sxth	r3, r3
 800175a:	105b      	asrs	r3, r3, #1
 800175c:	b21b      	sxth	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10e      	bne.n	8001780 <do_profile_settings.8532+0x248>
				if (last_button && (!button.pressed))
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <do_profile_settings.8532+0x348>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d02e      	beq.n	80017c8 <do_profile_settings.8532+0x290>
 800176a:	4b46      	ldr	r3, [pc, #280]	; (8001884 <do_profile_settings.8532+0x34c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	f083 0301 	eor.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d027      	beq.n	80017c8 <do_profile_settings.8532+0x290>
					profile_state = 10;
 8001778:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <do_profile_settings.8532+0x340>)
 800177a:	220a      	movs	r2, #10
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	e023      	b.n	80017c8 <do_profile_settings.8532+0x290>
				if (diff > 1)
 8001780:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <do_profile_settings.8532+0x338>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	b21b      	sxth	r3, r3
 8001786:	2b01      	cmp	r3, #1
 8001788:	dd0c      	ble.n	80017a4 <do_profile_settings.8532+0x26c>
					pos++;
 800178a:	4b3a      	ldr	r3, [pc, #232]	; (8001874 <do_profile_settings.8532+0x33c>)
 800178c:	f993 3000 	ldrsb.w	r3, [r3]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	3301      	adds	r3, #1
 8001794:	b2db      	uxtb	r3, r3
 8001796:	b25a      	sxtb	r2, r3
 8001798:	4b36      	ldr	r3, [pc, #216]	; (8001874 <do_profile_settings.8532+0x33c>)
 800179a:	701a      	strb	r2, [r3, #0]
					diff = 0;
 800179c:	4b34      	ldr	r3, [pc, #208]	; (8001870 <do_profile_settings.8532+0x338>)
 800179e:	2200      	movs	r2, #0
 80017a0:	801a      	strh	r2, [r3, #0]
 80017a2:	e011      	b.n	80017c8 <do_profile_settings.8532+0x290>
				else if (diff < -1)
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <do_profile_settings.8532+0x338>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ae:	da0b      	bge.n	80017c8 <do_profile_settings.8532+0x290>
					pos--;
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <do_profile_settings.8532+0x33c>)
 80017b2:	f993 3000 	ldrsb.w	r3, [r3]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	b25a      	sxtb	r2, r3
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <do_profile_settings.8532+0x33c>)
 80017c0:	701a      	strb	r2, [r3, #0]
					diff = 0;
 80017c2:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <do_profile_settings.8532+0x338>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	801a      	strh	r2, [r3, #0]
			if ((pos < 0) || (pos >= max_steps))
 80017c8:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <do_profile_settings.8532+0x33c>)
 80017ca:	f993 3000 	ldrsb.w	r3, [r3]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db07      	blt.n	80017e2 <do_profile_settings.8532+0x2aa>
 80017d2:	4b28      	ldr	r3, [pc, #160]	; (8001874 <do_profile_settings.8532+0x33c>)
 80017d4:	f993 3000 	ldrsb.w	r3, [r3]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <do_profile_settings.8532+0x350>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	db03      	blt.n	80017ea <do_profile_settings.8532+0x2b2>
				profile_state = 90;
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <do_profile_settings.8532+0x340>)
 80017e4:	225a      	movs	r2, #90	; 0x5a
 80017e6:	701a      	strb	r2, [r3, #0]
				break;
 80017e8:	e3d5      	b.n	8001f96 <do_profile_settings.8532+0xa5e>
			show_step_menu();
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	469c      	mov	ip, r3
 80017f0:	f7ff fe32 	bl	8001458 <show_step_menu.8542>
			lcd_set_xy(&lcd, 9, 1);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2109      	movs	r1, #9
 80017f8:	4824      	ldr	r0, [pc, #144]	; (800188c <do_profile_settings.8532+0x354>)
 80017fa:	f7fe fd99 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "  ");
 80017fe:	4924      	ldr	r1, [pc, #144]	; (8001890 <do_profile_settings.8532+0x358>)
 8001800:	4822      	ldr	r0, [pc, #136]	; (800188c <do_profile_settings.8532+0x354>)
 8001802:	f7fe fd7e 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, cc3dots);
 8001806:	2106      	movs	r1, #6
 8001808:	4820      	ldr	r0, [pc, #128]	; (800188c <do_profile_settings.8532+0x354>)
 800180a:	f7fe fe17 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, ' ');
 800180e:	2120      	movs	r1, #32
 8001810:	481e      	ldr	r0, [pc, #120]	; (800188c <do_profile_settings.8532+0x354>)
 8001812:	f7fe fe13 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 11, 1);
 8001816:	2201      	movs	r2, #1
 8001818:	210b      	movs	r1, #11
 800181a:	481c      	ldr	r0, [pc, #112]	; (800188c <do_profile_settings.8532+0x354>)
 800181c:	f7fe fd88 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <do_profile_settings.8532+0x35c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b04      	cmp	r3, #4
 8001826:	bf94      	ite	ls
 8001828:	2301      	movls	r3, #1
 800182a:	2300      	movhi	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	2300      	movs	r3, #0
 8001832:	2101      	movs	r1, #1
 8001834:	4815      	ldr	r0, [pc, #84]	; (800188c <do_profile_settings.8532+0x354>)
 8001836:	f7fe fd19 	bl	800026c <lcd_mode>
			break;
 800183a:	e3ac      	b.n	8001f96 <do_profile_settings.8532+0xa5e>
			if (diff>>1 == 0)
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <do_profile_settings.8532+0x338>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	b21b      	sxth	r3, r3
 8001842:	105b      	asrs	r3, r3, #1
 8001844:	b21b      	sxth	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d126      	bne.n	8001898 <do_profile_settings.8532+0x360>
				if (last_button && (!button.pressed))
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <do_profile_settings.8532+0x348>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d03a      	beq.n	80018c8 <do_profile_settings.8532+0x390>
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <do_profile_settings.8532+0x34c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	f083 0301 	eor.w	r3, r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d033      	beq.n	80018c8 <do_profile_settings.8532+0x390>
					profile_state = 1; // stop editing
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <do_profile_settings.8532+0x340>)
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	e02f      	b.n	80018c8 <do_profile_settings.8532+0x390>
 8001868:	40000400 	.word	0x40000400
 800186c:	200002b8 	.word	0x200002b8
 8001870:	200002ba 	.word	0x200002ba
 8001874:	200002bc 	.word	0x200002bc
 8001878:	200002bd 	.word	0x200002bd
 800187c:	200002c0 	.word	0x200002c0
 8001880:	200002c4 	.word	0x200002c4
 8001884:	20000230 	.word	0x20000230
 8001888:	2000001d 	.word	0x2000001d
 800188c:	20000524 	.word	0x20000524
 8001890:	0800c848 	.word	0x0800c848
 8001894:	2000022d 	.word	0x2000022d
				if (diff > 1)
 8001898:	4b9a      	ldr	r3, [pc, #616]	; (8001b04 <do_profile_settings.8532+0x5cc>)
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	b21b      	sxth	r3, r3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	dd06      	ble.n	80018b0 <do_profile_settings.8532+0x378>
					profile_state = 21;
 80018a2:	4b99      	ldr	r3, [pc, #612]	; (8001b08 <do_profile_settings.8532+0x5d0>)
 80018a4:	2215      	movs	r2, #21
 80018a6:	701a      	strb	r2, [r3, #0]
					diff = 0;
 80018a8:	4b96      	ldr	r3, [pc, #600]	; (8001b04 <do_profile_settings.8532+0x5cc>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	801a      	strh	r2, [r3, #0]
 80018ae:	e00b      	b.n	80018c8 <do_profile_settings.8532+0x390>
				else if (diff < -1)
 80018b0:	4b94      	ldr	r3, [pc, #592]	; (8001b04 <do_profile_settings.8532+0x5cc>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ba:	da05      	bge.n	80018c8 <do_profile_settings.8532+0x390>
					profile_state = 12;
 80018bc:	4b92      	ldr	r3, [pc, #584]	; (8001b08 <do_profile_settings.8532+0x5d0>)
 80018be:	220c      	movs	r2, #12
 80018c0:	701a      	strb	r2, [r3, #0]
					diff = 0;
 80018c2:	4b90      	ldr	r3, [pc, #576]	; (8001b04 <do_profile_settings.8532+0x5cc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	801a      	strh	r2, [r3, #0]
			show_step_menu();
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	469c      	mov	ip, r3
 80018ce:	f7ff fdc3 	bl	8001458 <show_step_menu.8542>
			lcd_set_xy(&lcd, 9, 1);
 80018d2:	2201      	movs	r2, #1
 80018d4:	2109      	movs	r1, #9
 80018d6:	488d      	ldr	r0, [pc, #564]	; (8001b0c <do_profile_settings.8532+0x5d4>)
 80018d8:	f7fe fd2a 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 80018dc:	498c      	ldr	r1, [pc, #560]	; (8001b10 <do_profile_settings.8532+0x5d8>)
 80018de:	488b      	ldr	r0, [pc, #556]	; (8001b0c <do_profile_settings.8532+0x5d4>)
 80018e0:	f7fe fd0f 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 80018e4:	2100      	movs	r1, #0
 80018e6:	4889      	ldr	r0, [pc, #548]	; (8001b0c <do_profile_settings.8532+0x5d4>)
 80018e8:	f7fe fda8 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 80018ec:	2201      	movs	r2, #1
 80018ee:	210c      	movs	r1, #12
 80018f0:	4886      	ldr	r0, [pc, #536]	; (8001b0c <do_profile_settings.8532+0x5d4>)
 80018f2:	f7fe fd1d 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 80018f6:	4b87      	ldr	r3, [pc, #540]	; (8001b14 <do_profile_settings.8532+0x5dc>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf94      	ite	ls
 80018fe:	2301      	movls	r3, #1
 8001900:	2300      	movhi	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	2300      	movs	r3, #0
 8001908:	2101      	movs	r1, #1
 800190a:	4880      	ldr	r0, [pc, #512]	; (8001b0c <do_profile_settings.8532+0x5d4>)
 800190c:	f7fe fcae 	bl	800026c <lcd_mode>
			break;
 8001910:	e341      	b.n	8001f96 <do_profile_settings.8532+0xa5e>
			if (diff>>1 == 0)
 8001912:	4b7c      	ldr	r3, [pc, #496]	; (8001b04 <do_profile_settings.8532+0x5cc>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	b21b      	sxth	r3, r3
 8001918:	105b      	asrs	r3, r3, #1
 800191a:	b21b      	sxth	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d156      	bne.n	80019ce <do_profile_settings.8532+0x496>
				if (last_button && (!button.pressed))
 8001920:	4b7d      	ldr	r3, [pc, #500]	; (8001b18 <do_profile_settings.8532+0x5e0>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d06a      	beq.n	80019fe <do_profile_settings.8532+0x4c6>
 8001928:	4b7c      	ldr	r3, [pc, #496]	; (8001b1c <do_profile_settings.8532+0x5e4>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f083 0301 	eor.w	r3, r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d063      	beq.n	80019fe <do_profile_settings.8532+0x4c6>
					if (max_steps >= 9)
 8001936:	4b7a      	ldr	r3, [pc, #488]	; (8001b20 <do_profile_settings.8532+0x5e8>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b08      	cmp	r3, #8
 800193c:	d903      	bls.n	8001946 <do_profile_settings.8532+0x40e>
						profile_state = 13;
 800193e:	4b72      	ldr	r3, [pc, #456]	; (8001b08 <do_profile_settings.8532+0x5d0>)
 8001940:	220d      	movs	r2, #13
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	e05b      	b.n	80019fe <do_profile_settings.8532+0x4c6>
						for (int i = 8; i > pos; i--)
 8001946:	2308      	movs	r3, #8
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e016      	b.n	800197a <do_profile_settings.8532+0x442>
							steps[i].time = steps[i-1].time;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3b01      	subs	r3, #1
 8001950:	4a74      	ldr	r2, [pc, #464]	; (8001b24 <do_profile_settings.8532+0x5ec>)
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4972      	ldr	r1, [pc, #456]	; (8001b24 <do_profile_settings.8532+0x5ec>)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	605a      	str	r2, [r3, #4]
							steps[i].temp = steps[i-1].temp;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b01      	subs	r3, #1
 8001966:	4a6f      	ldr	r2, [pc, #444]	; (8001b24 <do_profile_settings.8532+0x5ec>)
 8001968:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800196c:	496d      	ldr	r1, [pc, #436]	; (8001b24 <do_profile_settings.8532+0x5ec>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						for (int i = 8; i > pos; i--)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	3b01      	subs	r3, #1
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	4b6b      	ldr	r3, [pc, #428]	; (8001b28 <do_profile_settings.8532+0x5f0>)
 800197c:	f993 3000 	ldrsb.w	r3, [r3]
 8001980:	461a      	mov	r2, r3
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	4293      	cmp	r3, r2
 8001986:	dce1      	bgt.n	800194c <do_profile_settings.8532+0x414>
						pos++;
 8001988:	4b67      	ldr	r3, [pc, #412]	; (8001b28 <do_profile_settings.8532+0x5f0>)
 800198a:	f993 3000 	ldrsb.w	r3, [r3]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	3301      	adds	r3, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	b25a      	sxtb	r2, r3
 8001996:	4b64      	ldr	r3, [pc, #400]	; (8001b28 <do_profile_settings.8532+0x5f0>)
 8001998:	701a      	strb	r2, [r3, #0]
						steps[pos].time = 60;
 800199a:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <do_profile_settings.8532+0x5f0>)
 800199c:	f993 3000 	ldrsb.w	r3, [r3]
 80019a0:	4a60      	ldr	r2, [pc, #384]	; (8001b24 <do_profile_settings.8532+0x5ec>)
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4413      	add	r3, r2
 80019a6:	223c      	movs	r2, #60	; 0x3c
 80019a8:	605a      	str	r2, [r3, #4]
						steps[pos].temp = 100;
 80019aa:	4b5f      	ldr	r3, [pc, #380]	; (8001b28 <do_profile_settings.8532+0x5f0>)
 80019ac:	f993 3000 	ldrsb.w	r3, [r3]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <do_profile_settings.8532+0x5ec>)
 80019b4:	2264      	movs	r2, #100	; 0x64
 80019b6:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
						max_steps++;
 80019ba:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <do_profile_settings.8532+0x5e8>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <do_profile_settings.8532+0x5e8>)
 80019c4:	701a      	strb	r2, [r3, #0]
						profile_state = 10; // wait for confirmation
 80019c6:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <do_profile_settings.8532+0x5d0>)
 80019c8:	220a      	movs	r2, #10
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e017      	b.n	80019fe <do_profile_settings.8532+0x4c6>
				if (diff > 1)
 80019ce:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <do_profile_settings.8532+0x5cc>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	dd06      	ble.n	80019e6 <do_profile_settings.8532+0x4ae>
					profile_state = 12;
 80019d8:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <do_profile_settings.8532+0x5d0>)
 80019da:	220c      	movs	r2, #12
 80019dc:	701a      	strb	r2, [r3, #0]
					diff = 0;
 80019de:	4b49      	ldr	r3, [pc, #292]	; (8001b04 <do_profile_settings.8532+0x5cc>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	801a      	strh	r2, [r3, #0]
 80019e4:	e00b      	b.n	80019fe <do_profile_settings.8532+0x4c6>
				else if (diff < -1)
 80019e6:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <do_profile_settings.8532+0x5cc>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	da05      	bge.n	80019fe <do_profile_settings.8532+0x4c6>
					profile_state = 23;
 80019f2:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <do_profile_settings.8532+0x5d0>)
 80019f4:	2217      	movs	r2, #23
 80019f6:	701a      	strb	r2, [r3, #0]
					diff = 0;
 80019f8:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <do_profile_settings.8532+0x5cc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	801a      	strh	r2, [r3, #0]
			show_step_menu();
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	469c      	mov	ip, r3
 8001a04:	f7ff fd28 	bl	8001458 <show_step_menu.8542>
			lcd_set_xy(&lcd, 9, 1);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2109      	movs	r1, #9
 8001a0c:	483f      	ldr	r0, [pc, #252]	; (8001b0c <do_profile_settings.8532+0x5d4>)
 8001a0e:	f7fe fc8f 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001a12:	493f      	ldr	r1, [pc, #252]	; (8001b10 <do_profile_settings.8532+0x5d8>)
 8001a14:	483d      	ldr	r0, [pc, #244]	; (8001b0c <do_profile_settings.8532+0x5d4>)
 8001a16:	f7fe fc74 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	483b      	ldr	r0, [pc, #236]	; (8001b0c <do_profile_settings.8532+0x5d4>)
 8001a1e:	f7fe fd0d 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 10, 1);
 8001a22:	2201      	movs	r2, #1
 8001a24:	210a      	movs	r1, #10
 8001a26:	4839      	ldr	r0, [pc, #228]	; (8001b0c <do_profile_settings.8532+0x5d4>)
 8001a28:	f7fe fc82 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001a2c:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <do_profile_settings.8532+0x5dc>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	bf94      	ite	ls
 8001a34:	2301      	movls	r3, #1
 8001a36:	2300      	movhi	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2101      	movs	r1, #1
 8001a40:	4832      	ldr	r0, [pc, #200]	; (8001b0c <do_profile_settings.8532+0x5d4>)
 8001a42:	f7fe fc13 	bl	800026c <lcd_mode>
			break;
 8001a46:	e2a6      	b.n	8001f96 <do_profile_settings.8532+0xa5e>
			if (diff>>1 == 0)
 8001a48:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <do_profile_settings.8532+0x5cc>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	105b      	asrs	r3, r3, #1
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d14a      	bne.n	8001aec <do_profile_settings.8532+0x5b4>
				if (last_button && (!button.pressed))
 8001a56:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <do_profile_settings.8532+0x5e0>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d072      	beq.n	8001b44 <do_profile_settings.8532+0x60c>
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <do_profile_settings.8532+0x5e4>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	f083 0301 	eor.w	r3, r3, #1
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d06b      	beq.n	8001b44 <do_profile_settings.8532+0x60c>
					if (max_steps <= 1)
 8001a6c:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <do_profile_settings.8532+0x5e8>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d803      	bhi.n	8001a7c <do_profile_settings.8532+0x544>
						profile_state = 14;
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <do_profile_settings.8532+0x5d0>)
 8001a76:	220e      	movs	r2, #14
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	e063      	b.n	8001b44 <do_profile_settings.8532+0x60c>
						for (int i = pos; i < 8; i++)
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <do_profile_settings.8532+0x5f0>)
 8001a7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	e016      	b.n	8001ab4 <do_profile_settings.8532+0x57c>
							steps[i].time = steps[i+1].time;
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	4a26      	ldr	r2, [pc, #152]	; (8001b24 <do_profile_settings.8532+0x5ec>)
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4924      	ldr	r1, [pc, #144]	; (8001b24 <do_profile_settings.8532+0x5ec>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	605a      	str	r2, [r3, #4]
							steps[i].temp = steps[i+1].temp;
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <do_profile_settings.8532+0x5ec>)
 8001aa2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001aa6:	491f      	ldr	r1, [pc, #124]	; (8001b24 <do_profile_settings.8532+0x5ec>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						for (int i = pos; i < 8; i++)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b07      	cmp	r3, #7
 8001ab8:	dde5      	ble.n	8001a86 <do_profile_settings.8532+0x54e>
						max_steps--;
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <do_profile_settings.8532+0x5e8>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <do_profile_settings.8532+0x5e8>)
 8001ac4:	701a      	strb	r2, [r3, #0]
						if (pos >= max_steps) 	// if it was last position
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <do_profile_settings.8532+0x5f0>)
 8001ac8:	f993 3000 	ldrsb.w	r3, [r3]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <do_profile_settings.8532+0x5e8>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	db06      	blt.n	8001ae4 <do_profile_settings.8532+0x5ac>
							pos = max_steps-1; 	// move to the previous one
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <do_profile_settings.8532+0x5e8>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	b25a      	sxtb	r2, r3
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <do_profile_settings.8532+0x5f0>)
 8001ae2:	701a      	strb	r2, [r3, #0]
						profile_state = 10; 	// wait for confirmation
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <do_profile_settings.8532+0x5d0>)
 8001ae6:	220a      	movs	r2, #10
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e02b      	b.n	8001b44 <do_profile_settings.8532+0x60c>
				if (diff > 1)
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <do_profile_settings.8532+0x5cc>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	dd1a      	ble.n	8001b2c <do_profile_settings.8532+0x5f4>
					profile_state = 10;
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <do_profile_settings.8532+0x5d0>)
 8001af8:	220a      	movs	r2, #10
 8001afa:	701a      	strb	r2, [r3, #0]
					diff = 0;
 8001afc:	4b01      	ldr	r3, [pc, #4]	; (8001b04 <do_profile_settings.8532+0x5cc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	801a      	strh	r2, [r3, #0]
 8001b02:	e01f      	b.n	8001b44 <do_profile_settings.8532+0x60c>
 8001b04:	200002ba 	.word	0x200002ba
 8001b08:	200002bd 	.word	0x200002bd
 8001b0c:	20000524 	.word	0x20000524
 8001b10:	0800c84c 	.word	0x0800c84c
 8001b14:	2000022d 	.word	0x2000022d
 8001b18:	200002c4 	.word	0x200002c4
 8001b1c:	20000230 	.word	0x20000230
 8001b20:	2000001d 	.word	0x2000001d
 8001b24:	20000254 	.word	0x20000254
 8001b28:	200002bc 	.word	0x200002bc
				else if (diff < -1)
 8001b2c:	4ba0      	ldr	r3, [pc, #640]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b36:	da05      	bge.n	8001b44 <do_profile_settings.8532+0x60c>
					profile_state = 11;
 8001b38:	4b9e      	ldr	r3, [pc, #632]	; (8001db4 <do_profile_settings.8532+0x87c>)
 8001b3a:	220b      	movs	r2, #11
 8001b3c:	701a      	strb	r2, [r3, #0]
					diff = 0;
 8001b3e:	4b9c      	ldr	r3, [pc, #624]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	801a      	strh	r2, [r3, #0]
			show_step_menu();
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	469c      	mov	ip, r3
 8001b4a:	f7ff fc85 	bl	8001458 <show_step_menu.8542>
			lcd_set_xy(&lcd, 9, 1);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2109      	movs	r1, #9
 8001b52:	4899      	ldr	r0, [pc, #612]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001b54:	f7fe fbec 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001b58:	4998      	ldr	r1, [pc, #608]	; (8001dbc <do_profile_settings.8532+0x884>)
 8001b5a:	4897      	ldr	r0, [pc, #604]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001b5c:	f7fe fbd1 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001b60:	2100      	movs	r1, #0
 8001b62:	4895      	ldr	r0, [pc, #596]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001b64:	f7fe fc6a 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 11, 1);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	210b      	movs	r1, #11
 8001b6c:	4892      	ldr	r0, [pc, #584]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001b6e:	f7fe fbdf 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001b72:	4b93      	ldr	r3, [pc, #588]	; (8001dc0 <do_profile_settings.8532+0x888>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf94      	ite	ls
 8001b7a:	2301      	movls	r3, #1
 8001b7c:	2300      	movhi	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	2300      	movs	r3, #0
 8001b84:	2101      	movs	r1, #1
 8001b86:	488c      	ldr	r0, [pc, #560]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001b88:	f7fe fb70 	bl	800026c <lcd_mode>
			break;
 8001b8c:	e203      	b.n	8001f96 <do_profile_settings.8532+0xa5e>
			if (last_button && (!button.pressed)) // wait for confirmation
 8001b8e:	4b8d      	ldr	r3, [pc, #564]	; (8001dc4 <do_profile_settings.8532+0x88c>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <do_profile_settings.8532+0x672>
 8001b96:	4b8c      	ldr	r3, [pc, #560]	; (8001dc8 <do_profile_settings.8532+0x890>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	f083 0301 	eor.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <do_profile_settings.8532+0x672>
				profile_state = 10;
 8001ba4:	4b83      	ldr	r3, [pc, #524]	; (8001db4 <do_profile_settings.8532+0x87c>)
 8001ba6:	220a      	movs	r2, #10
 8001ba8:	701a      	strb	r2, [r3, #0]
			lcd_set_xy(&lcd, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	4882      	ldr	r0, [pc, #520]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001bb0:	f7fe fbbe 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "Not possible");
 8001bb4:	4985      	ldr	r1, [pc, #532]	; (8001dcc <do_profile_settings.8532+0x894>)
 8001bb6:	4880      	ldr	r0, [pc, #512]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001bb8:	f7fe fba3 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 0, 1);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	487d      	ldr	r0, [pc, #500]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001bc2:	f7fe fbb5 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "max 9 steps ");
 8001bc6:	4982      	ldr	r1, [pc, #520]	; (8001dd0 <do_profile_settings.8532+0x898>)
 8001bc8:	487b      	ldr	r0, [pc, #492]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001bca:	f7fe fb9a 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4879      	ldr	r0, [pc, #484]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001bd2:	f7fe fc33 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	210c      	movs	r1, #12
 8001bda:	4877      	ldr	r0, [pc, #476]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001bdc:	f7fe fba8 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001be0:	4b77      	ldr	r3, [pc, #476]	; (8001dc0 <do_profile_settings.8532+0x888>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	bf94      	ite	ls
 8001be8:	2301      	movls	r3, #1
 8001bea:	2300      	movhi	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4870      	ldr	r0, [pc, #448]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001bf6:	f7fe fb39 	bl	800026c <lcd_mode>
			break;
 8001bfa:	e1cc      	b.n	8001f96 <do_profile_settings.8532+0xa5e>
			if (last_button && (!button.pressed)) // wait for confirmation
 8001bfc:	4b71      	ldr	r3, [pc, #452]	; (8001dc4 <do_profile_settings.8532+0x88c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d009      	beq.n	8001c18 <do_profile_settings.8532+0x6e0>
 8001c04:	4b70      	ldr	r3, [pc, #448]	; (8001dc8 <do_profile_settings.8532+0x890>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	f083 0301 	eor.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <do_profile_settings.8532+0x6e0>
				profile_state = 10;
 8001c12:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <do_profile_settings.8532+0x87c>)
 8001c14:	220a      	movs	r2, #10
 8001c16:	701a      	strb	r2, [r3, #0]
			lcd_set_xy(&lcd, 0, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4866      	ldr	r0, [pc, #408]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001c1e:	f7fe fb87 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "Not possible");
 8001c22:	496a      	ldr	r1, [pc, #424]	; (8001dcc <do_profile_settings.8532+0x894>)
 8001c24:	4864      	ldr	r0, [pc, #400]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001c26:	f7fe fb6c 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 0, 1);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4862      	ldr	r0, [pc, #392]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001c30:	f7fe fb7e 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "min 1 step  ");
 8001c34:	4967      	ldr	r1, [pc, #412]	; (8001dd4 <do_profile_settings.8532+0x89c>)
 8001c36:	4860      	ldr	r0, [pc, #384]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001c38:	f7fe fb63 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	485e      	ldr	r0, [pc, #376]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001c40:	f7fe fbfc 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 8001c44:	2201      	movs	r2, #1
 8001c46:	210c      	movs	r1, #12
 8001c48:	485b      	ldr	r0, [pc, #364]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001c4a:	f7fe fb71 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001c4e:	4b5c      	ldr	r3, [pc, #368]	; (8001dc0 <do_profile_settings.8532+0x888>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	bf94      	ite	ls
 8001c56:	2301      	movls	r3, #1
 8001c58:	2300      	movhi	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2101      	movs	r1, #1
 8001c62:	4855      	ldr	r0, [pc, #340]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001c64:	f7fe fb02 	bl	800026c <lcd_mode>
			break;
 8001c68:	e195      	b.n	8001f96 <do_profile_settings.8532+0xa5e>
			if (diff>>1 == 0)
 8001c6a:	4b51      	ldr	r3, [pc, #324]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b21b      	sxth	r3, r3
 8001c70:	105b      	asrs	r3, r3, #1
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10e      	bne.n	8001c96 <do_profile_settings.8532+0x75e>
				if (last_button && (!button.pressed))
 8001c78:	4b52      	ldr	r3, [pc, #328]	; (8001dc4 <do_profile_settings.8532+0x88c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d022      	beq.n	8001cc6 <do_profile_settings.8532+0x78e>
 8001c80:	4b51      	ldr	r3, [pc, #324]	; (8001dc8 <do_profile_settings.8532+0x890>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	f083 0301 	eor.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01b      	beq.n	8001cc6 <do_profile_settings.8532+0x78e>
					profile_state = 22; // start edit
 8001c8e:	4b49      	ldr	r3, [pc, #292]	; (8001db4 <do_profile_settings.8532+0x87c>)
 8001c90:	2216      	movs	r2, #22
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	e017      	b.n	8001cc6 <do_profile_settings.8532+0x78e>
				if (diff > 1)
 8001c96:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	dd06      	ble.n	8001cae <do_profile_settings.8532+0x776>
					profile_state = 23;
 8001ca0:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <do_profile_settings.8532+0x87c>)
 8001ca2:	2217      	movs	r2, #23
 8001ca4:	701a      	strb	r2, [r3, #0]
					diff = 0;
 8001ca6:	4b42      	ldr	r3, [pc, #264]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	801a      	strh	r2, [r3, #0]
 8001cac:	e00b      	b.n	8001cc6 <do_profile_settings.8532+0x78e>
				else if (diff < -1)
 8001cae:	4b40      	ldr	r3, [pc, #256]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	da05      	bge.n	8001cc6 <do_profile_settings.8532+0x78e>
					profile_state = 10;
 8001cba:	4b3e      	ldr	r3, [pc, #248]	; (8001db4 <do_profile_settings.8532+0x87c>)
 8001cbc:	220a      	movs	r2, #10
 8001cbe:	701a      	strb	r2, [r3, #0]
					diff = 0;
 8001cc0:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	801a      	strh	r2, [r3, #0]
			show_step_menu();
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	469c      	mov	ip, r3
 8001ccc:	f7ff fbc4 	bl	8001458 <show_step_menu.8542>
			lcd_set_xy(&lcd, 9, 1);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2109      	movs	r1, #9
 8001cd4:	4838      	ldr	r0, [pc, #224]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001cd6:	f7fe fb2b 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001cda:	4938      	ldr	r1, [pc, #224]	; (8001dbc <do_profile_settings.8532+0x884>)
 8001cdc:	4836      	ldr	r0, [pc, #216]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001cde:	f7fe fb10 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4834      	ldr	r0, [pc, #208]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001ce6:	f7fe fba9 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 2, 1);
 8001cea:	2201      	movs	r2, #1
 8001cec:	2102      	movs	r1, #2
 8001cee:	4832      	ldr	r0, [pc, #200]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001cf0:	f7fe fb1e 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001cf4:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <do_profile_settings.8532+0x888>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	bf94      	ite	ls
 8001cfc:	2301      	movls	r3, #1
 8001cfe:	2300      	movhi	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	2101      	movs	r1, #1
 8001d08:	482b      	ldr	r0, [pc, #172]	; (8001db8 <do_profile_settings.8532+0x880>)
 8001d0a:	f7fe faaf 	bl	800026c <lcd_mode>
			break;
 8001d0e:	e142      	b.n	8001f96 <do_profile_settings.8532+0xa5e>
			if (diff>>1 == 0)
 8001d10:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	105b      	asrs	r3, r3, #1
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10e      	bne.n	8001d3c <do_profile_settings.8532+0x804>
				if (last_button && (!button.pressed))
 8001d1e:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <do_profile_settings.8532+0x88c>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d01c      	beq.n	8001d60 <do_profile_settings.8532+0x828>
 8001d26:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <do_profile_settings.8532+0x890>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	f083 0301 	eor.w	r3, r3, #1
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d015      	beq.n	8001d60 <do_profile_settings.8532+0x828>
					profile_state = 21; // stop editing
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <do_profile_settings.8532+0x87c>)
 8001d36:	2215      	movs	r2, #21
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	e011      	b.n	8001d60 <do_profile_settings.8532+0x828>
				if (diff > 1)
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	dd03      	ble.n	8001d4e <do_profile_settings.8532+0x816>
					diff = 0;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	801a      	strh	r2, [r3, #0]
 8001d4c:	e008      	b.n	8001d60 <do_profile_settings.8532+0x828>
				else if (diff < -1)
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	da02      	bge.n	8001d60 <do_profile_settings.8532+0x828>
					diff = 0;
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
			show_step_menu();
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	469c      	mov	ip, r3
 8001d66:	f7ff fb77 	bl	8001458 <show_step_menu.8542>
			break;
 8001d6a:	e114      	b.n	8001f96 <do_profile_settings.8532+0xa5e>
			if (diff>>1 == 0)
 8001d6c:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	105b      	asrs	r3, r3, #1
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10e      	bne.n	8001d98 <do_profile_settings.8532+0x860>
				if (last_button && (!button.pressed))
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <do_profile_settings.8532+0x88c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d036      	beq.n	8001df0 <do_profile_settings.8532+0x8b8>
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <do_profile_settings.8532+0x890>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	f083 0301 	eor.w	r3, r3, #1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d02f      	beq.n	8001df0 <do_profile_settings.8532+0x8b8>
					profile_state = 24; // start edit
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <do_profile_settings.8532+0x87c>)
 8001d92:	2218      	movs	r2, #24
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	e02b      	b.n	8001df0 <do_profile_settings.8532+0x8b8>
				if (diff > 1)
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	dd1a      	ble.n	8001dd8 <do_profile_settings.8532+0x8a0>
					profile_state = 11;
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <do_profile_settings.8532+0x87c>)
 8001da4:	220b      	movs	r2, #11
 8001da6:	701a      	strb	r2, [r3, #0]
					diff = 0;
 8001da8:	4b01      	ldr	r3, [pc, #4]	; (8001db0 <do_profile_settings.8532+0x878>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	801a      	strh	r2, [r3, #0]
 8001dae:	e01f      	b.n	8001df0 <do_profile_settings.8532+0x8b8>
 8001db0:	200002ba 	.word	0x200002ba
 8001db4:	200002bd 	.word	0x200002bd
 8001db8:	20000524 	.word	0x20000524
 8001dbc:	0800c84c 	.word	0x0800c84c
 8001dc0:	2000022d 	.word	0x2000022d
 8001dc4:	200002c4 	.word	0x200002c4
 8001dc8:	20000230 	.word	0x20000230
 8001dcc:	0800c850 	.word	0x0800c850
 8001dd0:	0800c860 	.word	0x0800c860
 8001dd4:	0800c870 	.word	0x0800c870
				else if (diff < -1)
 8001dd8:	4b73      	ldr	r3, [pc, #460]	; (8001fa8 <do_profile_settings.8532+0xa70>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de2:	da05      	bge.n	8001df0 <do_profile_settings.8532+0x8b8>
					profile_state = 21;
 8001de4:	4b71      	ldr	r3, [pc, #452]	; (8001fac <do_profile_settings.8532+0xa74>)
 8001de6:	2215      	movs	r2, #21
 8001de8:	701a      	strb	r2, [r3, #0]
					diff = 0;
 8001dea:	4b6f      	ldr	r3, [pc, #444]	; (8001fa8 <do_profile_settings.8532+0xa70>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	801a      	strh	r2, [r3, #0]
			show_step_menu();
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	469c      	mov	ip, r3
 8001df6:	f7ff fb2f 	bl	8001458 <show_step_menu.8542>
			lcd_set_xy(&lcd, 0, 1);
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	486c      	ldr	r0, [pc, #432]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001e00:	f7fe fa96 	bl	8000330 <lcd_set_xy>
			lcd_set_xy(&lcd, 9, 1);
 8001e04:	2201      	movs	r2, #1
 8001e06:	2109      	movs	r1, #9
 8001e08:	4869      	ldr	r0, [pc, #420]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001e0a:	f7fe fa91 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, " +x");
 8001e0e:	4969      	ldr	r1, [pc, #420]	; (8001fb4 <do_profile_settings.8532+0xa7c>)
 8001e10:	4867      	ldr	r0, [pc, #412]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001e12:	f7fe fa76 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001e16:	2100      	movs	r1, #0
 8001e18:	4865      	ldr	r0, [pc, #404]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001e1a:	f7fe fb0f 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 8, 1);
 8001e1e:	2201      	movs	r2, #1
 8001e20:	2108      	movs	r1, #8
 8001e22:	4863      	ldr	r0, [pc, #396]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001e24:	f7fe fa84 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001e28:	4b63      	ldr	r3, [pc, #396]	; (8001fb8 <do_profile_settings.8532+0xa80>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	bf94      	ite	ls
 8001e30:	2301      	movls	r3, #1
 8001e32:	2300      	movhi	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	485c      	ldr	r0, [pc, #368]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001e3e:	f7fe fa15 	bl	800026c <lcd_mode>
			break;
 8001e42:	e0a8      	b.n	8001f96 <do_profile_settings.8532+0xa5e>
			if (diff>>1 == 0)
 8001e44:	4b58      	ldr	r3, [pc, #352]	; (8001fa8 <do_profile_settings.8532+0xa70>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	105b      	asrs	r3, r3, #1
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10e      	bne.n	8001e70 <do_profile_settings.8532+0x938>
				if (last_button && (!button.pressed))
 8001e52:	4b5a      	ldr	r3, [pc, #360]	; (8001fbc <do_profile_settings.8532+0xa84>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01c      	beq.n	8001e94 <do_profile_settings.8532+0x95c>
 8001e5a:	4b59      	ldr	r3, [pc, #356]	; (8001fc0 <do_profile_settings.8532+0xa88>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	f083 0301 	eor.w	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d015      	beq.n	8001e94 <do_profile_settings.8532+0x95c>
					profile_state = 23; // stop editing
 8001e68:	4b50      	ldr	r3, [pc, #320]	; (8001fac <do_profile_settings.8532+0xa74>)
 8001e6a:	2217      	movs	r2, #23
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	e011      	b.n	8001e94 <do_profile_settings.8532+0x95c>
				if (diff > 1)
 8001e70:	4b4d      	ldr	r3, [pc, #308]	; (8001fa8 <do_profile_settings.8532+0xa70>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	dd03      	ble.n	8001e82 <do_profile_settings.8532+0x94a>
					diff = 0;
 8001e7a:	4b4b      	ldr	r3, [pc, #300]	; (8001fa8 <do_profile_settings.8532+0xa70>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	801a      	strh	r2, [r3, #0]
 8001e80:	e008      	b.n	8001e94 <do_profile_settings.8532+0x95c>
				else if (diff < -1)
 8001e82:	4b49      	ldr	r3, [pc, #292]	; (8001fa8 <do_profile_settings.8532+0xa70>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	da02      	bge.n	8001e94 <do_profile_settings.8532+0x95c>
					diff = 0;
 8001e8e:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <do_profile_settings.8532+0xa70>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	801a      	strh	r2, [r3, #0]
			show_step_menu();
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	469c      	mov	ip, r3
 8001e9a:	f7ff fadd 	bl	8001458 <show_step_menu.8542>
			break;
 8001e9e:	e07a      	b.n	8001f96 <do_profile_settings.8532+0xa5e>
			lcd_set_xy(&lcd, 0, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4842      	ldr	r0, [pc, #264]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001ea6:	f7fe fa43 	bl	8000330 <lcd_set_xy>
			lcd_write_data(&lcd, ' ');
 8001eaa:	2120      	movs	r1, #32
 8001eac:	4840      	ldr	r0, [pc, #256]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001eae:	f7fe fac5 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, scSIGMA);
 8001eb2:	21f6      	movs	r1, #246	; 0xf6
 8001eb4:	483e      	ldr	r0, [pc, #248]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001eb6:	f7fe fac1 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, ' ');
 8001eba:	2120      	movs	r1, #32
 8001ebc:	483c      	ldr	r0, [pc, #240]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001ebe:	f7fe fabd 	bl	800043c <lcd_write_data>
			lcd_write_data(&lcd, max_steps + '0');
 8001ec2:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <do_profile_settings.8532+0xa8c>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	3330      	adds	r3, #48	; 0x30
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4838      	ldr	r0, [pc, #224]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001ece:	f7fe fab5 	bl	800043c <lcd_write_data>
			lcd_string(&lcd, " steps  ");
 8001ed2:	493d      	ldr	r1, [pc, #244]	; (8001fc8 <do_profile_settings.8532+0xa90>)
 8001ed4:	4836      	ldr	r0, [pc, #216]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001ed6:	f7fe fa14 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 0, 1);
 8001eda:	2201      	movs	r2, #1
 8001edc:	2100      	movs	r1, #0
 8001ede:	4834      	ldr	r0, [pc, #208]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001ee0:	f7fe fa26 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "start prof. ");
 8001ee4:	4939      	ldr	r1, [pc, #228]	; (8001fcc <do_profile_settings.8532+0xa94>)
 8001ee6:	4832      	ldr	r0, [pc, #200]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001ee8:	f7fe fa0b 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ccENTER);
 8001eec:	2100      	movs	r1, #0
 8001eee:	4830      	ldr	r0, [pc, #192]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001ef0:	f7fe faa4 	bl	800043c <lcd_write_data>
			lcd_set_xy(&lcd, 12, 1);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	210c      	movs	r1, #12
 8001ef8:	482d      	ldr	r0, [pc, #180]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001efa:	f7fe fa19 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8001efe:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <do_profile_settings.8532+0xa80>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf94      	ite	ls
 8001f06:	2301      	movls	r3, #1
 8001f08:	2300      	movhi	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2101      	movs	r1, #1
 8001f12:	4827      	ldr	r0, [pc, #156]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001f14:	f7fe f9aa 	bl	800026c <lcd_mode>
			if (diff == 0)
 8001f18:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <do_profile_settings.8532+0xa70>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d110      	bne.n	8001f44 <do_profile_settings.8532+0xa0c>
				if (last_button && (!button.pressed))
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <do_profile_settings.8532+0xa84>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d034      	beq.n	8001f94 <do_profile_settings.8532+0xa5c>
 8001f2a:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <do_profile_settings.8532+0xa88>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	f083 0301 	eor.w	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d02d      	beq.n	8001f94 <do_profile_settings.8532+0xa5c>
					lcd_mini_clear(&lcd);
 8001f38:	46a4      	mov	ip, r4
 8001f3a:	481d      	ldr	r0, [pc, #116]	; (8001fb0 <do_profile_settings.8532+0xa78>)
 8001f3c:	f7fe fd78 	bl	8000a30 <lcd_mini_clear.8509>
					return true;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e02d      	b.n	8001fa0 <do_profile_settings.8532+0xa68>
				if (diff > 1)
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <do_profile_settings.8532+0xa70>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	dd06      	ble.n	8001f5c <do_profile_settings.8532+0xa24>
					pos = 0;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <do_profile_settings.8532+0xa98>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
					diff = 0;
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <do_profile_settings.8532+0xa70>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	801a      	strh	r2, [r3, #0]
 8001f5a:	e00f      	b.n	8001f7c <do_profile_settings.8532+0xa44>
				else if (diff < -1)
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <do_profile_settings.8532+0xa70>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f66:	da09      	bge.n	8001f7c <do_profile_settings.8532+0xa44>
					pos = max_steps - 1;
 8001f68:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <do_profile_settings.8532+0xa8c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	b25a      	sxtb	r2, r3
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <do_profile_settings.8532+0xa98>)
 8001f74:	701a      	strb	r2, [r3, #0]
					diff = 0;
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <do_profile_settings.8532+0xa70>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	801a      	strh	r2, [r3, #0]
				profile_state = 1;
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <do_profile_settings.8532+0xa74>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
			break;
 8001f82:	e007      	b.n	8001f94 <do_profile_settings.8532+0xa5c>
			global_error |= errFATAL;
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <do_profile_settings.8532+0xa9c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <do_profile_settings.8532+0xa9c>)
 8001f90:	701a      	strb	r2, [r3, #0]
			break;
 8001f92:	e000      	b.n	8001f96 <do_profile_settings.8532+0xa5e>
			break;
 8001f94:	bf00      	nop
		last_button = button.pressed;
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <do_profile_settings.8532+0xa88>)
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <do_profile_settings.8532+0xa84>)
 8001f9c:	701a      	strb	r2, [r3, #0]
		return false;
 8001f9e:	2300      	movs	r3, #0
	}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3724      	adds	r7, #36	; 0x24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd90      	pop	{r4, r7, pc}
 8001fa8:	200002ba 	.word	0x200002ba
 8001fac:	200002bd 	.word	0x200002bd
 8001fb0:	20000524 	.word	0x20000524
 8001fb4:	0800c84c 	.word	0x0800c84c
 8001fb8:	2000022d 	.word	0x2000022d
 8001fbc:	200002c4 	.word	0x200002c4
 8001fc0:	20000230 	.word	0x20000230
 8001fc4:	2000001d 	.word	0x2000001d
 8001fc8:	0800c880 	.word	0x0800c880
 8001fcc:	0800c88c 	.word	0x0800c88c
 8001fd0:	200002bc 	.word	0x200002bc
 8001fd4:	2000022c 	.word	0x2000022c

08001fd8 <do_reflow.8568>:
	{
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
 8001fe2:	4664      	mov	r4, ip
 8001fe4:	f8c7 c000 	str.w	ip, [r7]
		if (reset)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <do_reflow.8568+0x28>
			last_time = HAL_GetTick();
 8001fee:	f001 fb55 	bl	800369c <HAL_GetTick>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4a7b      	ldr	r2, [pc, #492]	; (80021e4 <do_reflow.8568+0x20c>)
 8001ff6:	6013      	str	r3, [r2, #0]
			pos = 0;
 8001ff8:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <do_reflow.8568+0x210>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
			return;
 8001ffe:	e2dc      	b.n	80025ba <do_reflow.8568+0x5e2>
		int32_t dt = ((int32_t)(temperature_SP<<2)) -
 8002000:	4b7a      	ldr	r3, [pc, #488]	; (80021ec <do_reflow.8568+0x214>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	009b      	lsls	r3, r3, #2
					 ((int32_t)MAX6675.temperature);
 8002006:	4a7a      	ldr	r2, [pc, #488]	; (80021f0 <do_reflow.8568+0x218>)
 8002008:	8812      	ldrh	r2, [r2, #0]
		int32_t dt = ((int32_t)(temperature_SP<<2)) -
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	61fb      	str	r3, [r7, #28]
		if (pos >= (2*max_steps))
 800200e:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <do_reflow.8568+0x210>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	4b77      	ldr	r3, [pc, #476]	; (80021f4 <do_reflow.8568+0x21c>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	429a      	cmp	r2, r3
 800201e:	db34      	blt.n	800208a <do_reflow.8568+0xb2>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, NO_BLINK);
 8002020:	2300      	movs	r3, #0
 8002022:	2200      	movs	r2, #0
 8002024:	2101      	movs	r1, #1
 8002026:	4874      	ldr	r0, [pc, #464]	; (80021f8 <do_reflow.8568+0x220>)
 8002028:	f7fe f920 	bl	800026c <lcd_mode>
			temperature_SP = 0;
 800202c:	4b6f      	ldr	r3, [pc, #444]	; (80021ec <do_reflow.8568+0x214>)
 800202e:	2200      	movs	r2, #0
 8002030:	801a      	strh	r2, [r3, #0]
			lcd_set_xy(&lcd, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	4870      	ldr	r0, [pc, #448]	; (80021f8 <do_reflow.8568+0x220>)
 8002038:	f7fe f97a 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "Cooldown    ");
 800203c:	496f      	ldr	r1, [pc, #444]	; (80021fc <do_reflow.8568+0x224>)
 800203e:	486e      	ldr	r0, [pc, #440]	; (80021f8 <do_reflow.8568+0x220>)
 8002040:	f7fe f95f 	bl	8000302 <lcd_string>
			lcd_set_xy(&lcd, 0, 1);
 8002044:	2201      	movs	r2, #1
 8002046:	2100      	movs	r1, #0
 8002048:	486b      	ldr	r0, [pc, #428]	; (80021f8 <do_reflow.8568+0x220>)
 800204a:	f7fe f971 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "       +");
 800204e:	496c      	ldr	r1, [pc, #432]	; (8002200 <do_reflow.8568+0x228>)
 8002050:	4869      	ldr	r0, [pc, #420]	; (80021f8 <do_reflow.8568+0x220>)
 8002052:	f7fe f956 	bl	8000302 <lcd_string>
			lcd_string(&lcd, int2time((HAL_GetTick() - last_time)/1000, time_buf));
 8002056:	f001 fb21 	bl	800369c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <do_reflow.8568+0x20c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	4a68      	ldr	r2, [pc, #416]	; (8002204 <do_reflow.8568+0x22c>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	099b      	lsrs	r3, r3, #6
 800206a:	f107 0210 	add.w	r2, r7, #16
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa9f 	bl	80005b4 <int2time>
 8002076:	4603      	mov	r3, r0
 8002078:	4619      	mov	r1, r3
 800207a:	485f      	ldr	r0, [pc, #380]	; (80021f8 <do_reflow.8568+0x220>)
 800207c:	f7fe f941 	bl	8000302 <lcd_string>
			lcd_write_data(&lcd, ' ');
 8002080:	2120      	movs	r1, #32
 8002082:	485d      	ldr	r0, [pc, #372]	; (80021f8 <do_reflow.8568+0x220>)
 8002084:	f7fe f9da 	bl	800043c <lcd_write_data>
			return;
 8002088:	e297      	b.n	80025ba <do_reflow.8568+0x5e2>
		if (pos%2 == 0)
 800208a:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <do_reflow.8568+0x210>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d158      	bne.n	800214c <do_reflow.8568+0x174>
			temperature_SP = steps[pos>>1].temp;
 800209a:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <do_reflow.8568+0x210>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	085b      	lsrs	r3, r3, #1
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b58      	ldr	r3, [pc, #352]	; (8002208 <do_reflow.8568+0x230>)
 80020a8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	4b4f      	ldr	r3, [pc, #316]	; (80021ec <do_reflow.8568+0x214>)
 80020b0:	801a      	strh	r2, [r3, #0]
			time_buf[0] = '+';
 80020b2:	232b      	movs	r3, #43	; 0x2b
 80020b4:	743b      	strb	r3, [r7, #16]
			int2time((HAL_GetTick() - last_time)/1000, time_buf+1);
 80020b6:	f001 faf1 	bl	800369c <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b49      	ldr	r3, [pc, #292]	; (80021e4 <do_reflow.8568+0x20c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	4a50      	ldr	r2, [pc, #320]	; (8002204 <do_reflow.8568+0x22c>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	099a      	lsrs	r2, r3, #6
 80020ca:	f107 0310 	add.w	r3, r7, #16
 80020ce:	3301      	adds	r3, #1
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f7fe fa6e 	bl	80005b4 <int2time>
			lcd_set_xy(&lcd, 0, 1);
 80020d8:	2201      	movs	r2, #1
 80020da:	2100      	movs	r1, #0
 80020dc:	4846      	ldr	r0, [pc, #280]	; (80021f8 <do_reflow.8568+0x220>)
 80020de:	f7fe f927 	bl	8000330 <lcd_set_xy>
			lcd_string(&lcd, "goto");
 80020e2:	494a      	ldr	r1, [pc, #296]	; (800220c <do_reflow.8568+0x234>)
 80020e4:	4844      	ldr	r0, [pc, #272]	; (80021f8 <do_reflow.8568+0x220>)
 80020e6:	f7fe f90c 	bl	8000302 <lcd_string>
			if ((dt > -(4<<2)) && (dt < (4<<2)))
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f113 0f0f 	cmn.w	r3, #15
 80020f0:	db26      	blt.n	8002140 <do_reflow.8568+0x168>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	2b0f      	cmp	r3, #15
 80020f6:	dc23      	bgt.n	8002140 <do_reflow.8568+0x168>
				if (HAL_GetTick() - check_time > 5000) // we should be at least 5 sec in range
 80020f8:	f001 fad0 	bl	800369c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b44      	ldr	r3, [pc, #272]	; (8002210 <do_reflow.8568+0x238>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	f240 80ab 	bls.w	8002264 <do_reflow.8568+0x28c>
					last_time = HAL_GetTick();
 800210e:	f001 fac5 	bl	800369c <HAL_GetTick>
 8002112:	4603      	mov	r3, r0
 8002114:	4a33      	ldr	r2, [pc, #204]	; (80021e4 <do_reflow.8568+0x20c>)
 8002116:	6013      	str	r3, [r2, #0]
					pos++;
 8002118:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <do_reflow.8568+0x210>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	3301      	adds	r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <do_reflow.8568+0x210>)
 8002124:	701a      	strb	r2, [r3, #0]
					temperature_SP = steps[pos>>1].temp;
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <do_reflow.8568+0x210>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	085b      	lsrs	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	4b35      	ldr	r3, [pc, #212]	; (8002208 <do_reflow.8568+0x230>)
 8002134:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <do_reflow.8568+0x214>)
 800213c:	801a      	strh	r2, [r3, #0]
				if (HAL_GetTick() - check_time > 5000) // we should be at least 5 sec in range
 800213e:	e091      	b.n	8002264 <do_reflow.8568+0x28c>
				check_time = HAL_GetTick();
 8002140:	f001 faac 	bl	800369c <HAL_GetTick>
 8002144:	4603      	mov	r3, r0
 8002146:	4a32      	ldr	r2, [pc, #200]	; (8002210 <do_reflow.8568+0x238>)
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e08b      	b.n	8002264 <do_reflow.8568+0x28c>
			temperature_SP = steps[pos>>1].temp;
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <do_reflow.8568+0x210>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	085b      	lsrs	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <do_reflow.8568+0x230>)
 800215a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800215e:	b29a      	uxth	r2, r3
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <do_reflow.8568+0x214>)
 8002162:	801a      	strh	r2, [r3, #0]
			if (HAL_GetTick() - last_time >= steps[pos>>1].time*1000)
 8002164:	f001 fa9a 	bl	800369c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <do_reflow.8568+0x20c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	1ad2      	subs	r2, r2, r3
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <do_reflow.8568+0x210>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	085b      	lsrs	r3, r3, #1
 8002178:	b2db      	uxtb	r3, r3
 800217a:	4923      	ldr	r1, [pc, #140]	; (8002208 <do_reflow.8568+0x230>)
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	429a      	cmp	r2, r3
 800218c:	d342      	bcc.n	8002214 <do_reflow.8568+0x23c>
				last_time = HAL_GetTick();
 800218e:	f001 fa85 	bl	800369c <HAL_GetTick>
 8002192:	4603      	mov	r3, r0
 8002194:	4a13      	ldr	r2, [pc, #76]	; (80021e4 <do_reflow.8568+0x20c>)
 8002196:	6013      	str	r3, [r2, #0]
				check_time = HAL_GetTick();
 8002198:	f001 fa80 	bl	800369c <HAL_GetTick>
 800219c:	4603      	mov	r3, r0
 800219e:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <do_reflow.8568+0x238>)
 80021a0:	6013      	str	r3, [r2, #0]
				pos++;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <do_reflow.8568+0x210>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <do_reflow.8568+0x210>)
 80021ae:	701a      	strb	r2, [r3, #0]
				if (pos < (2*max_steps))
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <do_reflow.8568+0x210>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <do_reflow.8568+0x21c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	429a      	cmp	r2, r3
 80021c0:	da0c      	bge.n	80021dc <do_reflow.8568+0x204>
					temperature_SP = steps[pos>>1].temp;
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <do_reflow.8568+0x210>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	085b      	lsrs	r3, r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <do_reflow.8568+0x230>)
 80021d0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <do_reflow.8568+0x214>)
 80021d8:	801a      	strh	r2, [r3, #0]
 80021da:	e043      	b.n	8002264 <do_reflow.8568+0x28c>
					temperature_SP = 0;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <do_reflow.8568+0x214>)
 80021de:	2200      	movs	r2, #0
 80021e0:	801a      	strh	r2, [r3, #0]
 80021e2:	e03f      	b.n	8002264 <do_reflow.8568+0x28c>
 80021e4:	200002c8 	.word	0x200002c8
 80021e8:	200002cc 	.word	0x200002cc
 80021ec:	20000240 	.word	0x20000240
 80021f0:	20000234 	.word	0x20000234
 80021f4:	2000001d 	.word	0x2000001d
 80021f8:	20000524 	.word	0x20000524
 80021fc:	0800c89c 	.word	0x0800c89c
 8002200:	0800c8ac 	.word	0x0800c8ac
 8002204:	10624dd3 	.word	0x10624dd3
 8002208:	20000254 	.word	0x20000254
 800220c:	0800c8b8 	.word	0x0800c8b8
 8002210:	200002d0 	.word	0x200002d0
				time_buf[0] = '-';
 8002214:	232d      	movs	r3, #45	; 0x2d
 8002216:	743b      	strb	r3, [r7, #16]
				int2time(steps[pos>>1].time - (HAL_GetTick() - last_time + 1000)/1000, time_buf+1);
 8002218:	4ba6      	ldr	r3, [pc, #664]	; (80024b4 <do_reflow.8568+0x4dc>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	4aa5      	ldr	r2, [pc, #660]	; (80024b8 <do_reflow.8568+0x4e0>)
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	685d      	ldr	r5, [r3, #4]
 800222a:	f001 fa37 	bl	800369c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	4ba2      	ldr	r3, [pc, #648]	; (80024bc <do_reflow.8568+0x4e4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800223a:	4aa1      	ldr	r2, [pc, #644]	; (80024c0 <do_reflow.8568+0x4e8>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	1aea      	subs	r2, r5, r3
 8002244:	f107 0310 	add.w	r3, r7, #16
 8002248:	3301      	adds	r3, #1
 800224a:	4619      	mov	r1, r3
 800224c:	4610      	mov	r0, r2
 800224e:	f7fe f9b1 	bl	80005b4 <int2time>
				lcd_set_xy(&lcd, 0, 1);
 8002252:	2201      	movs	r2, #1
 8002254:	2100      	movs	r1, #0
 8002256:	489b      	ldr	r0, [pc, #620]	; (80024c4 <do_reflow.8568+0x4ec>)
 8002258:	f7fe f86a 	bl	8000330 <lcd_set_xy>
				lcd_string(&lcd, "hold");
 800225c:	499a      	ldr	r1, [pc, #616]	; (80024c8 <do_reflow.8568+0x4f0>)
 800225e:	4899      	ldr	r0, [pc, #612]	; (80024c4 <do_reflow.8568+0x4ec>)
 8002260:	f7fe f84f 	bl	8000302 <lcd_string>
		lcd_set_xy(&lcd, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	4896      	ldr	r0, [pc, #600]	; (80024c4 <do_reflow.8568+0x4ec>)
 800226a:	f7fe f861 	bl	8000330 <lcd_set_xy>
		lcd_write_data(&lcd, '#');
 800226e:	2123      	movs	r1, #35	; 0x23
 8002270:	4894      	ldr	r0, [pc, #592]	; (80024c4 <do_reflow.8568+0x4ec>)
 8002272:	f7fe f8e3 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, (pos>>1)+'1');
 8002276:	4b8f      	ldr	r3, [pc, #572]	; (80024b4 <do_reflow.8568+0x4dc>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	085b      	lsrs	r3, r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	3331      	adds	r3, #49	; 0x31
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4619      	mov	r1, r3
 8002286:	488f      	ldr	r0, [pc, #572]	; (80024c4 <do_reflow.8568+0x4ec>)
 8002288:	f7fe f8d8 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, '/');
 800228c:	212f      	movs	r1, #47	; 0x2f
 800228e:	488d      	ldr	r0, [pc, #564]	; (80024c4 <do_reflow.8568+0x4ec>)
 8002290:	f7fe f8d4 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, max_steps + '0');
 8002294:	4b8d      	ldr	r3, [pc, #564]	; (80024cc <do_reflow.8568+0x4f4>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	3330      	adds	r3, #48	; 0x30
 800229a:	b2db      	uxtb	r3, r3
 800229c:	4619      	mov	r1, r3
 800229e:	4889      	ldr	r0, [pc, #548]	; (80024c4 <do_reflow.8568+0x4ec>)
 80022a0:	f7fe f8cc 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 7, 1);
 80022a4:	2201      	movs	r2, #1
 80022a6:	2107      	movs	r1, #7
 80022a8:	4886      	ldr	r0, [pc, #536]	; (80024c4 <do_reflow.8568+0x4ec>)
 80022aa:	f7fe f841 	bl	8000330 <lcd_set_xy>
		lcd_string(&lcd, (char*)time_buf);
 80022ae:	f107 0310 	add.w	r3, r7, #16
 80022b2:	4619      	mov	r1, r3
 80022b4:	4883      	ldr	r0, [pc, #524]	; (80024c4 <do_reflow.8568+0x4ec>)
 80022b6:	f7fe f824 	bl	8000302 <lcd_string>
		int2string(temperature_SP, buf, sizeof(buf));
 80022ba:	4b85      	ldr	r3, [pc, #532]	; (80024d0 <do_reflow.8568+0x4f8>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	2203      	movs	r2, #3
 80022c6:	4619      	mov	r1, r3
 80022c8:	f7fe f936 	bl	8000538 <int2string>
		lcd_set_xy(&lcd, 7, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2107      	movs	r1, #7
 80022d0:	487c      	ldr	r0, [pc, #496]	; (80024c4 <do_reflow.8568+0x4ec>)
 80022d2:	f7fe f82d 	bl	8000330 <lcd_set_xy>
		lcd_out(&lcd, buf, sizeof(buf));
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	2203      	movs	r2, #3
 80022dc:	4619      	mov	r1, r3
 80022de:	4879      	ldr	r0, [pc, #484]	; (80024c4 <do_reflow.8568+0x4ec>)
 80022e0:	f7fd fff1 	bl	80002c6 <lcd_out>
		lcd_write_data(&lcd, scGRAD); // grad
 80022e4:	21df      	movs	r1, #223	; 0xdf
 80022e6:	4877      	ldr	r0, [pc, #476]	; (80024c4 <do_reflow.8568+0x4ec>)
 80022e8:	f7fe f8a8 	bl	800043c <lcd_write_data>
		lcd_write_data(&lcd, scAR); // arrow right
 80022ec:	217e      	movs	r1, #126	; 0x7e
 80022ee:	4875      	ldr	r0, [pc, #468]	; (80024c4 <do_reflow.8568+0x4ec>)
 80022f0:	f7fe f8a4 	bl	800043c <lcd_write_data>
		lcd_set_xy(&lcd, 9, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2109      	movs	r1, #9
 80022f8:	4872      	ldr	r0, [pc, #456]	; (80024c4 <do_reflow.8568+0x4ec>)
 80022fa:	f7fe f819 	bl	8000330 <lcd_set_xy>
		if (last_pos != pos)
 80022fe:	4b75      	ldr	r3, [pc, #468]	; (80024d4 <do_reflow.8568+0x4fc>)
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	4b6c      	ldr	r3, [pc, #432]	; (80024b4 <do_reflow.8568+0x4dc>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	429a      	cmp	r2, r3
 800230a:	d002      	beq.n	8002312 <do_reflow.8568+0x33a>
			rf_ui_state = 0;
 800230c:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <do_reflow.8568+0x500>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
		last_pos = pos;
 8002312:	4b68      	ldr	r3, [pc, #416]	; (80024b4 <do_reflow.8568+0x4dc>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	4b6e      	ldr	r3, [pc, #440]	; (80024d4 <do_reflow.8568+0x4fc>)
 800231a:	701a      	strb	r2, [r3, #0]
		diff-=(int16_t)(encoder_value - last_encoder);
 800231c:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <do_reflow.8568+0x504>)
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	b29a      	uxth	r2, r3
 8002322:	4b6f      	ldr	r3, [pc, #444]	; (80024e0 <do_reflow.8568+0x508>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	b29b      	uxth	r3, r3
 800232a:	b219      	sxth	r1, r3
 800232c:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <do_reflow.8568+0x50c>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	b21b      	sxth	r3, r3
 8002332:	b29a      	uxth	r2, r3
 8002334:	b28b      	uxth	r3, r1
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	b29b      	uxth	r3, r3
 800233a:	b21a      	sxth	r2, r3
 800233c:	4b69      	ldr	r3, [pc, #420]	; (80024e4 <do_reflow.8568+0x50c>)
 800233e:	801a      	strh	r2, [r3, #0]
		switch (rf_ui_state)
 8002340:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <do_reflow.8568+0x500>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b04      	cmp	r3, #4
 8002346:	f200 8121 	bhi.w	800258c <do_reflow.8568+0x5b4>
 800234a:	a201      	add	r2, pc, #4	; (adr r2, 8002350 <do_reflow.8568+0x378>)
 800234c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002350:	08002365 	.word	0x08002365
 8002354:	08002373 	.word	0x08002373
 8002358:	080023df 	.word	0x080023df
 800235c:	08002459 	.word	0x08002459
 8002360:	080024f5 	.word	0x080024f5
			diff = 0;
 8002364:	4b5f      	ldr	r3, [pc, #380]	; (80024e4 <do_reflow.8568+0x50c>)
 8002366:	2200      	movs	r2, #0
 8002368:	801a      	strh	r2, [r3, #0]
			rf_ui_state = 1;
 800236a:	4b5b      	ldr	r3, [pc, #364]	; (80024d8 <do_reflow.8568+0x500>)
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
			break;
 8002370:	e117      	b.n	80025a2 <do_reflow.8568+0x5ca>
			lcd_set_xy(&lcd, 9, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2109      	movs	r1, #9
 8002376:	4853      	ldr	r0, [pc, #332]	; (80024c4 <do_reflow.8568+0x4ec>)
 8002378:	f7fd ffda 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 800237c:	4b5a      	ldr	r3, [pc, #360]	; (80024e8 <do_reflow.8568+0x510>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b04      	cmp	r3, #4
 8002382:	bf94      	ite	ls
 8002384:	2301      	movls	r3, #1
 8002386:	2300      	movhi	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	2300      	movs	r3, #0
 800238e:	2101      	movs	r1, #1
 8002390:	484c      	ldr	r0, [pc, #304]	; (80024c4 <do_reflow.8568+0x4ec>)
 8002392:	f7fd ff6b 	bl	800026c <lcd_mode>
			if (((encoder_value & 0b10) != (last_encoder & 0b10)) && (pos&0b1))
 8002396:	4b51      	ldr	r3, [pc, #324]	; (80024dc <do_reflow.8568+0x504>)
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	4a51      	ldr	r2, [pc, #324]	; (80024e0 <do_reflow.8568+0x508>)
 800239c:	8812      	ldrh	r2, [r2, #0]
 800239e:	4053      	eors	r3, r2
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d009      	beq.n	80023bc <do_reflow.8568+0x3e4>
 80023a8:	4b42      	ldr	r3, [pc, #264]	; (80024b4 <do_reflow.8568+0x4dc>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <do_reflow.8568+0x3e4>
				rf_ui_state = 3;
 80023b6:	4b48      	ldr	r3, [pc, #288]	; (80024d8 <do_reflow.8568+0x500>)
 80023b8:	2203      	movs	r2, #3
 80023ba:	701a      	strb	r2, [r3, #0]
			if ((last_button) && (!button.pressed))
 80023bc:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <do_reflow.8568+0x514>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80e7 	beq.w	8002594 <do_reflow.8568+0x5bc>
 80023c6:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <do_reflow.8568+0x518>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	f083 0301 	eor.w	r3, r3, #1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80df 	beq.w	8002594 <do_reflow.8568+0x5bc>
				rf_ui_state = 2;
 80023d6:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <do_reflow.8568+0x500>)
 80023d8:	2202      	movs	r2, #2
 80023da:	701a      	strb	r2, [r3, #0]
			break;
 80023dc:	e0da      	b.n	8002594 <do_reflow.8568+0x5bc>
			if (diff)
 80023de:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <do_reflow.8568+0x50c>)
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01b      	beq.n	8002420 <do_reflow.8568+0x448>
				steps[pos>>1].temp = change_temperature(steps[pos>>1].temp, diff);
 80023e8:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <do_reflow.8568+0x4dc>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <do_reflow.8568+0x4e0>)
 80023f6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <do_reflow.8568+0x50c>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b21b      	sxth	r3, r3
 8002402:	46a4      	mov	ip, r4
 8002404:	4619      	mov	r1, r3
 8002406:	4610      	mov	r0, r2
 8002408:	f7fe fed8 	bl	80011bc <change_temperature.8513>
 800240c:	4601      	mov	r1, r0
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <do_reflow.8568+0x4dc>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <do_reflow.8568+0x4e0>)
 800241c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			lcd_set_xy(&lcd, 9, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2109      	movs	r1, #9
 8002424:	4827      	ldr	r0, [pc, #156]	; (80024c4 <do_reflow.8568+0x4ec>)
 8002426:	f7fd ff83 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 800242a:	2301      	movs	r3, #1
 800242c:	2200      	movs	r2, #0
 800242e:	2101      	movs	r1, #1
 8002430:	4824      	ldr	r0, [pc, #144]	; (80024c4 <do_reflow.8568+0x4ec>)
 8002432:	f7fd ff1b 	bl	800026c <lcd_mode>
			if ((last_button) && (!button.pressed))
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <do_reflow.8568+0x514>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80ac 	beq.w	8002598 <do_reflow.8568+0x5c0>
 8002440:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <do_reflow.8568+0x518>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	f083 0301 	eor.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80a4 	beq.w	8002598 <do_reflow.8568+0x5c0>
				rf_ui_state = 1;
 8002450:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <do_reflow.8568+0x500>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
			break;
 8002456:	e09f      	b.n	8002598 <do_reflow.8568+0x5c0>
			lcd_set_xy(&lcd, 11, 1);
 8002458:	2201      	movs	r2, #1
 800245a:	210b      	movs	r1, #11
 800245c:	4819      	ldr	r0, [pc, #100]	; (80024c4 <do_reflow.8568+0x4ec>)
 800245e:	f7fd ff67 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, (ticktack < 5), NO_BLINK);
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <do_reflow.8568+0x510>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf94      	ite	ls
 800246a:	2301      	movls	r3, #1
 800246c:	2300      	movhi	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	2300      	movs	r3, #0
 8002474:	2101      	movs	r1, #1
 8002476:	4813      	ldr	r0, [pc, #76]	; (80024c4 <do_reflow.8568+0x4ec>)
 8002478:	f7fd fef8 	bl	800026c <lcd_mode>
			if ((encoder_value & 0b10) != (last_encoder & 0b10))
 800247c:	4b17      	ldr	r3, [pc, #92]	; (80024dc <do_reflow.8568+0x504>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <do_reflow.8568+0x508>)
 8002482:	8812      	ldrh	r2, [r2, #0]
 8002484:	4053      	eors	r3, r2
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <do_reflow.8568+0x4bc>
				rf_ui_state = 1;
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <do_reflow.8568+0x500>)
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
			if ((last_button) && (!button.pressed))
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <do_reflow.8568+0x514>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d07f      	beq.n	800259c <do_reflow.8568+0x5c4>
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <do_reflow.8568+0x518>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f083 0301 	eor.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d078      	beq.n	800259c <do_reflow.8568+0x5c4>
				rf_ui_state = 4;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <do_reflow.8568+0x500>)
 80024ac:	2204      	movs	r2, #4
 80024ae:	701a      	strb	r2, [r3, #0]
			break;
 80024b0:	e074      	b.n	800259c <do_reflow.8568+0x5c4>
 80024b2:	bf00      	nop
 80024b4:	200002cc 	.word	0x200002cc
 80024b8:	20000254 	.word	0x20000254
 80024bc:	200002c8 	.word	0x200002c8
 80024c0:	10624dd3 	.word	0x10624dd3
 80024c4:	20000524 	.word	0x20000524
 80024c8:	0800c8c0 	.word	0x0800c8c0
 80024cc:	2000001d 	.word	0x2000001d
 80024d0:	20000240 	.word	0x20000240
 80024d4:	200002d4 	.word	0x200002d4
 80024d8:	200002d5 	.word	0x200002d5
 80024dc:	40000400 	.word	0x40000400
 80024e0:	200002d6 	.word	0x200002d6
 80024e4:	200002d8 	.word	0x200002d8
 80024e8:	2000022d 	.word	0x2000022d
 80024ec:	200002da 	.word	0x200002da
 80024f0:	20000230 	.word	0x20000230
			if (diff)
 80024f4:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <do_reflow.8568+0x5e8>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b21b      	sxth	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d02c      	beq.n	8002558 <do_reflow.8568+0x580>
				uint32_t tmp = (HAL_GetTick() - last_time)/1000;
 80024fe:	f001 f8cd 	bl	800369c <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <do_reflow.8568+0x5ec>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	4a2f      	ldr	r2, [pc, #188]	; (80025c8 <do_reflow.8568+0x5f0>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	61bb      	str	r3, [r7, #24]
				steps[pos>>1].time = 1 + tmp + change_time(steps[pos>>1].time - tmp + 2, diff);
 8002514:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <do_reflow.8568+0x5f4>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4a2c      	ldr	r2, [pc, #176]	; (80025d0 <do_reflow.8568+0x5f8>)
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	3302      	adds	r3, #2
 800252c:	4a24      	ldr	r2, [pc, #144]	; (80025c0 <do_reflow.8568+0x5e8>)
 800252e:	8812      	ldrh	r2, [r2, #0]
 8002530:	b212      	sxth	r2, r2
 8002532:	46a4      	mov	ip, r4
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fe70 	bl	800121c <change_time.8518>
 800253c:	4602      	mov	r2, r0
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4413      	add	r3, r2
 8002542:	4a22      	ldr	r2, [pc, #136]	; (80025cc <do_reflow.8568+0x5f4>)
 8002544:	7812      	ldrb	r2, [r2, #0]
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	0852      	lsrs	r2, r2, #1
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	4610      	mov	r0, r2
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	491f      	ldr	r1, [pc, #124]	; (80025d0 <do_reflow.8568+0x5f8>)
 8002552:	00c3      	lsls	r3, r0, #3
 8002554:	440b      	add	r3, r1
 8002556:	605a      	str	r2, [r3, #4]
			lcd_set_xy(&lcd, 11, 1);
 8002558:	2201      	movs	r2, #1
 800255a:	210b      	movs	r1, #11
 800255c:	481d      	ldr	r0, [pc, #116]	; (80025d4 <do_reflow.8568+0x5fc>)
 800255e:	f7fd fee7 	bl	8000330 <lcd_set_xy>
			lcd_mode(&lcd, ENABLE, CURSOR_DISABLE, BLINK);
 8002562:	2301      	movs	r3, #1
 8002564:	2200      	movs	r2, #0
 8002566:	2101      	movs	r1, #1
 8002568:	481a      	ldr	r0, [pc, #104]	; (80025d4 <do_reflow.8568+0x5fc>)
 800256a:	f7fd fe7f 	bl	800026c <lcd_mode>
			if ((last_button) && (!button.pressed))
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <do_reflow.8568+0x600>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d014      	beq.n	80025a0 <do_reflow.8568+0x5c8>
 8002576:	4b19      	ldr	r3, [pc, #100]	; (80025dc <do_reflow.8568+0x604>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	f083 0301 	eor.w	r3, r3, #1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00d      	beq.n	80025a0 <do_reflow.8568+0x5c8>
				rf_ui_state = 3;
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <do_reflow.8568+0x608>)
 8002586:	2203      	movs	r2, #3
 8002588:	701a      	strb	r2, [r3, #0]
			break;
 800258a:	e009      	b.n	80025a0 <do_reflow.8568+0x5c8>
			rf_ui_state = 0;
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <do_reflow.8568+0x608>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
			break;
 8002592:	e006      	b.n	80025a2 <do_reflow.8568+0x5ca>
			break;
 8002594:	bf00      	nop
 8002596:	e004      	b.n	80025a2 <do_reflow.8568+0x5ca>
			break;
 8002598:	bf00      	nop
 800259a:	e002      	b.n	80025a2 <do_reflow.8568+0x5ca>
			break;
 800259c:	bf00      	nop
 800259e:	e000      	b.n	80025a2 <do_reflow.8568+0x5ca>
			break;
 80025a0:	bf00      	nop
		diff = 0;
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <do_reflow.8568+0x5e8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	801a      	strh	r2, [r3, #0]
		last_encoder = encoder_value;
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <do_reflow.8568+0x60c>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <do_reflow.8568+0x610>)
 80025b0:	801a      	strh	r2, [r3, #0]
		last_button = button.pressed;
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <do_reflow.8568+0x604>)
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <do_reflow.8568+0x600>)
 80025b8:	701a      	strb	r2, [r3, #0]
	}
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bdb0      	pop	{r4, r5, r7, pc}
 80025c0:	200002d8 	.word	0x200002d8
 80025c4:	200002c8 	.word	0x200002c8
 80025c8:	10624dd3 	.word	0x10624dd3
 80025cc:	200002cc 	.word	0x200002cc
 80025d0:	20000254 	.word	0x20000254
 80025d4:	20000524 	.word	0x20000524
 80025d8:	200002da 	.word	0x200002da
 80025dc:	20000230 	.word	0x20000230
 80025e0:	200002d5 	.word	0x200002d5
 80025e4:	40000400 	.word	0x40000400
 80025e8:	200002d6 	.word	0x200002d6

080025ec <deltaT.8619>:
	static const int32_t I=0.00153*32768;
	static const int32_t D=10*32768;
	static const int32_t limit_top=25*4/0.00153; // max 25% of PWM

	int32_t deltaT(uint16_t PV)
	{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
 80025f6:	f8c7 c000 	str.w	ip, [r7]
#define size 4
		static int32_t arr[size];
		static bool first_time = true;
		if (first_time)
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <deltaT.8619+0x80>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d010      	beq.n	8002624 <deltaT.8619+0x38>
		{
			first_time = false;
 8002602:	4b1a      	ldr	r3, [pc, #104]	; (800266c <deltaT.8619+0x80>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < size; i++)
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	e007      	b.n	800261e <deltaT.8619+0x32>
				arr[i] = PV;
 800260e:	88fa      	ldrh	r2, [r7, #6]
 8002610:	4917      	ldr	r1, [pc, #92]	; (8002670 <deltaT.8619+0x84>)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int i = 0; i < size; i++)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3301      	adds	r3, #1
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b03      	cmp	r3, #3
 8002622:	ddf4      	ble.n	800260e <deltaT.8619+0x22>
		}
		int32_t temp = arr[0];
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <deltaT.8619+0x84>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < size; i++)
 800262a:	2301      	movs	r3, #1
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	e00b      	b.n	8002648 <deltaT.8619+0x5c>
			arr[i-1] = arr[i];
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	3b01      	subs	r3, #1
 8002634:	490e      	ldr	r1, [pc, #56]	; (8002670 <deltaT.8619+0x84>)
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800263c:	490c      	ldr	r1, [pc, #48]	; (8002670 <deltaT.8619+0x84>)
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 1; i < size; i++)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	3301      	adds	r3, #1
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	2b03      	cmp	r3, #3
 800264c:	ddf0      	ble.n	8002630 <deltaT.8619+0x44>
		arr[size-1] = PV;
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <deltaT.8619+0x84>)
 8002652:	60d3      	str	r3, [r2, #12]
		return (temp - PV)/size;
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	da00      	bge.n	8002660 <deltaT.8619+0x74>
 800265e:	3303      	adds	r3, #3
 8002660:	109b      	asrs	r3, r3, #2
	}
 8002662:	4618      	mov	r0, r3
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	2000002c 	.word	0x2000002c
 8002670:	200002e0 	.word	0x200002e0

08002674 <pid>:
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	460a      	mov	r2, r1
 800267e:	80fb      	strh	r3, [r7, #6]
 8002680:	4613      	mov	r3, r2
 8002682:	80bb      	strh	r3, [r7, #4]
uint8_t pid(uint16_t PV, uint16_t SP)
 8002684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002688:	60bb      	str	r3, [r7, #8]

	static int32_t integral = 0;
	static int32_t last_PV = -1;
	if (last_PV < 0)
 800268a:	4b58      	ldr	r3, [pc, #352]	; (80027ec <pid+0x178>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	da02      	bge.n	8002698 <pid+0x24>
		last_PV = PV; // first time, init this thing to avoid jump
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	4a55      	ldr	r2, [pc, #340]	; (80027ec <pid+0x178>)
 8002696:	6013      	str	r3, [r2, #0]

	int32_t error = SP-PV;
 8002698:	88ba      	ldrh	r2, [r7, #4]
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	617b      	str	r3, [r7, #20]
	int32_t p = error * P;
 80026a0:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <pid+0x17c>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	613b      	str	r3, [r7, #16]
	if (error > 0)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	dd10      	ble.n	80026d4 <pid+0x60>
	{
		integral += error;
 80026b2:	4b50      	ldr	r3, [pc, #320]	; (80027f4 <pid+0x180>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	4413      	add	r3, r2
 80026ba:	4a4e      	ldr	r2, [pc, #312]	; (80027f4 <pid+0x180>)
 80026bc:	6013      	str	r3, [r2, #0]
		if (error < 4*4) // almost here, but we need some boost
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b0f      	cmp	r3, #15
 80026c2:	dc1d      	bgt.n	8002700 <pid+0x8c>
			integral += error*8;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	00da      	lsls	r2, r3, #3
 80026c8:	4b4a      	ldr	r3, [pc, #296]	; (80027f4 <pid+0x180>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	4a49      	ldr	r2, [pc, #292]	; (80027f4 <pid+0x180>)
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e015      	b.n	8002700 <pid+0x8c>
	}
	else
	{
		integral += error/4; // cool down is slower
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	da00      	bge.n	80026dc <pid+0x68>
 80026da:	3303      	adds	r3, #3
 80026dc:	109b      	asrs	r3, r3, #2
 80026de:	461a      	mov	r2, r3
 80026e0:	4b44      	ldr	r3, [pc, #272]	; (80027f4 <pid+0x180>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	4a43      	ldr	r2, [pc, #268]	; (80027f4 <pid+0x180>)
 80026e8:	6013      	str	r3, [r2, #0]
		if (error > -4*4)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f113 0f0f 	cmn.w	r3, #15
 80026f0:	db06      	blt.n	8002700 <pid+0x8c>
			integral += error*16; // almost here, we need boost!
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	011a      	lsls	r2, r3, #4
 80026f6:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <pid+0x180>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a3d      	ldr	r2, [pc, #244]	; (80027f4 <pid+0x180>)
 80026fe:	6013      	str	r3, [r2, #0]
	}
	if (integral > limit_top)
 8002700:	4b3c      	ldr	r3, [pc, #240]	; (80027f4 <pid+0x180>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b3c      	ldr	r3, [pc, #240]	; (80027f8 <pid+0x184>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	dd0d      	ble.n	8002728 <pid+0xb4>
	{
		global_error |= errI_LIMIT;
 800270c:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <pid+0x188>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	f043 0308 	orr.w	r3, r3, #8
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <pid+0x188>)
 8002718:	701a      	strb	r2, [r3, #0]
		temperature_SP = 0;
 800271a:	4b39      	ldr	r3, [pc, #228]	; (8002800 <pid+0x18c>)
 800271c:	2200      	movs	r2, #0
 800271e:	801a      	strh	r2, [r3, #0]
		integral = limit_top;
 8002720:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <pid+0x184>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a33      	ldr	r2, [pc, #204]	; (80027f4 <pid+0x180>)
 8002726:	6013      	str	r3, [r2, #0]
	}
	if (integral < 0)
 8002728:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <pid+0x180>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	da02      	bge.n	8002736 <pid+0xc2>
		integral = 0;
 8002730:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <pid+0x180>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
	int32_t i = integral * I;
 8002736:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <pid+0x180>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a32      	ldr	r2, [pc, #200]	; (8002804 <pid+0x190>)
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	60fb      	str	r3, [r7, #12]
	/* signal is noisy, but slow, I use additional filter for D */
	//int32_t d = (last_PV - PV)*D;
	int32_t d = deltaT(PV)*D;
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	f107 0208 	add.w	r2, r7, #8
 800274a:	4694      	mov	ip, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff4d 	bl	80025ec <deltaT.8619>
 8002752:	4602      	mov	r2, r0
 8002754:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <pid+0x194>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	fb03 f302 	mul.w	r3, r3, r2
 800275c:	61fb      	str	r3, [r7, #28]
	if (d > 0)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	2b00      	cmp	r3, #0
 8002762:	dd01      	ble.n	8002768 <pid+0xf4>
		d = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
	last_PV = PV;
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	4a20      	ldr	r2, [pc, #128]	; (80027ec <pid+0x178>)
 800276c:	6013      	str	r3, [r2, #0]
	int32_t out = (p+i+d)/4/32768;
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	441a      	add	r2, r3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	4413      	add	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	da03      	bge.n	8002784 <pid+0x110>
 800277c:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8002780:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002784:	145b      	asrs	r3, r3, #17
 8002786:	61bb      	str	r3, [r7, #24]
	if (out > 100)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	2b64      	cmp	r3, #100	; 0x64
 800278c:	dd01      	ble.n	8002792 <pid+0x11e>
		out = 100;
 800278e:	2364      	movs	r3, #100	; 0x64
 8002790:	61bb      	str	r3, [r7, #24]
	if (out < 0)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	da01      	bge.n	800279c <pid+0x128>
		out = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]

	PID.P = p/4/32768;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	da03      	bge.n	80027aa <pid+0x136>
 80027a2:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 80027a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027aa:	145b      	asrs	r3, r3, #17
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <pid+0x198>)
 80027b0:	601a      	str	r2, [r3, #0]
	PID.I = i/4/32768;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	da03      	bge.n	80027c0 <pid+0x14c>
 80027b8:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 80027bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027c0:	145b      	asrs	r3, r3, #17
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <pid+0x198>)
 80027c6:	605a      	str	r2, [r3, #4]
	PID.D = d/4/32768;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	da03      	bge.n	80027d6 <pid+0x162>
 80027ce:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 80027d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027d6:	145b      	asrs	r3, r3, #17
 80027d8:	461a      	mov	r2, r3
 80027da:	4b0c      	ldr	r3, [pc, #48]	; (800280c <pid+0x198>)
 80027dc:	609a      	str	r2, [r3, #8]

	return out;
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	b2db      	uxtb	r3, r3
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000028 	.word	0x20000028
 80027f0:	0800c938 	.word	0x0800c938
 80027f4:	200002dc 	.word	0x200002dc
 80027f8:	0800c93c 	.word	0x0800c93c
 80027fc:	2000022c 	.word	0x2000022c
 8002800:	20000240 	.word	0x20000240
 8002804:	0800c940 	.word	0x0800c940
 8002808:	0800c944 	.word	0x0800c944
 800280c:	2000053c 	.word	0x2000053c

08002810 <HAL_TIM_OC_DelayElapsedCallback>:
/**
 * here happens two interrupts, at 998ms (for pid update)
 * and also at ~500ms (for second temperature update
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	get_max6675();
 8002818:	f7fe f806 	bl	8000828 <get_max6675>
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	7f1b      	ldrb	r3, [r3, #28]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d125      	bne.n	8002870 <HAL_TIM_OC_DelayElapsedCallback+0x60>
	{
		if (!(MAX6675.data_valid))
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8002826:	789b      	ldrb	r3, [r3, #2]
 8002828:	f083 0301 	eor.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <HAL_TIM_OC_DelayElapsedCallback+0x28>
			temperature_SP = 0;
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8002834:	2200      	movs	r2, #0
 8002836:	801a      	strh	r2, [r3, #0]
		pwm_value = pid(MAX6675.temperature, temperature_SP<<2);
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 800283a:	881a      	ldrh	r2, [r3, #0]
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	b29b      	uxth	r3, r3
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f7ff ff14 	bl	8002674 <pid>
 800284c:	4603      	mov	r3, r0
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8002852:	801a      	strh	r2, [r3, #0]
		uint16_t val = 10*pwm_value;
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	0092      	lsls	r2, r2, #2
 800285c:	4413      	add	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	81fb      	strh	r3, [r7, #14]
		TIM2->CCR1 = val;
 8002862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002866:	89fb      	ldrh	r3, [r7, #14]
 8002868:	6353      	str	r3, [r2, #52]	; 0x34
		tick = true;
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
	}
	ascii_max6675();
 8002870:	f7fe f806 	bl	8000880 <ascii_max6675>
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000234 	.word	0x20000234
 8002880:	20000240 	.word	0x20000240
 8002884:	2000023e 	.word	0x2000023e
 8002888:	20000242 	.word	0x20000242

0800288c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002890:	f000 feac 	bl	80035ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002894:	f000 f846 	bl	8002924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002898:	f000 fa24 	bl	8002ce4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800289c:	f008 fdba 	bl	800b414 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80028a0:	f000 f89c 	bl	80029dc <MX_SPI1_Init>
  MX_TIM1_Init();
 80028a4:	f000 f8d2 	bl	8002a4c <MX_TIM1_Init>
  MX_TIM2_Init();
 80028a8:	f000 f92a 	bl	8002b00 <MX_TIM2_Init>
  MX_TIM3_Init();
 80028ac:	f000 f9c6 	bl	8002c3c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, 1); // enable USB
 80028b0:	2201      	movs	r2, #1
 80028b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028b6:	4817      	ldr	r0, [pc, #92]	; (8002914 <main+0x88>)
 80028b8:	f001 f9c7 	bl	8003c4a <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // PWM for output
 80028bc:	2100      	movs	r1, #0
 80028be:	4816      	ldr	r0, [pc, #88]	; (8002918 <main+0x8c>)
 80028c0:	f003 ffc0 	bl	8006844 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // ENCODER
 80028c4:	213c      	movs	r1, #60	; 0x3c
 80028c6:	4815      	ldr	r0, [pc, #84]	; (800291c <main+0x90>)
 80028c8:	f004 f900 	bl	8006acc <HAL_TIM_Encoder_Start>
  TIM2->CCR2 = 998; // timer for PID interrupt + temperature update
 80028cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028d0:	f240 32e6 	movw	r2, #998	; 0x3e6
 80028d4:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 499; // timer for temperature update
 80028d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028da:	f240 12f3 	movw	r2, #499	; 0x1f3
 80028de:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM2->DIER |= TIM_DIER_CC2IE|TIM_DIER_CC3IE; // interrupt enable
 80028e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028ea:	f043 030c 	orr.w	r3, r3, #12
 80028ee:	60d3      	str	r3, [r2, #12]
  HAL_TIM_Base_Start_IT(&htim2); // Enable Interrupts
 80028f0:	4809      	ldr	r0, [pc, #36]	; (8002918 <main+0x8c>)
 80028f2:	f003 fea5 	bl	8006640 <HAL_TIM_Base_Start_IT>
  delay_init(&htim1); // inits the library for us delay
 80028f6:	480a      	ldr	r0, [pc, #40]	; (8002920 <main+0x94>)
 80028f8:	f7fd fc28 	bl	800014c <delay_init>
  init_lcd(); // init lcd and load special symbols
 80028fc:	f7fd feca 	bl	8000694 <init_lcd>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  do_button(); // update button status
 8002900:	f7fd ff24 	bl	800074c <do_button>
	  do_blink(); // led heartbeat
 8002904:	f7fd ff74 	bl	80007f0 <do_blink>
	  do_usb();  // output debug information
 8002908:	f7fe f834 	bl	8000974 <do_usb>
	  do_interface(); // here happens the magic
 800290c:	f7fe f8b6 	bl	8000a7c <do_interface>
	  do_button(); // update button status
 8002910:	e7f6      	b.n	8002900 <main+0x74>
 8002912:	bf00      	nop
 8002914:	40010800 	.word	0x40010800
 8002918:	20000630 	.word	0x20000630
 800291c:	20000548 	.word	0x20000548
 8002920:	20000590 	.word	0x20000590

08002924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b094      	sub	sp, #80	; 0x50
 8002928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800292a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800292e:	2228      	movs	r2, #40	; 0x28
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f009 fa34 	bl	800bda0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002954:	2301      	movs	r3, #1
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800295e:	2300      	movs	r3, #0
 8002960:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002962:	2301      	movs	r3, #1
 8002964:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002966:	2302      	movs	r3, #2
 8002968:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800296a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800296e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002970:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002974:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800297a:	4618      	mov	r0, r3
 800297c:	f002 fe5c 	bl	8005638 <HAL_RCC_OscConfig>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002986:	f000 fa45 	bl	8002e14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800298a:	230f      	movs	r3, #15
 800298c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800298e:	2302      	movs	r3, #2
 8002990:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800299a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800299c:	2300      	movs	r3, #0
 800299e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	2101      	movs	r1, #1
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 f8c6 	bl	8005b38 <HAL_RCC_ClockConfig>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80029b2:	f000 fa2f 	bl	8002e14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80029b6:	2310      	movs	r3, #16
 80029b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80029ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029be:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	4618      	mov	r0, r3
 80029c4:	f003 fa20 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80029ce:	f000 fa21 	bl	8002e14 <Error_Handler>
  }
}
 80029d2:	bf00      	nop
 80029d4:	3750      	adds	r7, #80	; 0x50
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <MX_SPI1_Init+0x68>)
 80029e2:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <MX_SPI1_Init+0x6c>)
 80029e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029e6:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <MX_SPI1_Init+0x68>)
 80029e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <MX_SPI1_Init+0x68>)
 80029f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029f4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <MX_SPI1_Init+0x68>)
 80029f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <MX_SPI1_Init+0x68>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <MX_SPI1_Init+0x68>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <MX_SPI1_Init+0x68>)
 8002a0c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002a10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <MX_SPI1_Init+0x68>)
 8002a14:	2230      	movs	r2, #48	; 0x30
 8002a16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a18:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <MX_SPI1_Init+0x68>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <MX_SPI1_Init+0x68>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <MX_SPI1_Init+0x68>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_SPI1_Init+0x68>)
 8002a2c:	220a      	movs	r2, #10
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a30:	4804      	ldr	r0, [pc, #16]	; (8002a44 <MX_SPI1_Init+0x68>)
 8002a32:	f003 fa9f 	bl	8005f74 <HAL_SPI_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002a3c:	f000 f9ea 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	200005d8 	.word	0x200005d8
 8002a48:	40013000 	.word	0x40013000

08002a4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a52:	f107 0308 	add.w	r3, r7, #8
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a60:	463b      	mov	r3, r7
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <MX_TIM1_Init+0xa8>)
 8002a6a:	4a23      	ldr	r2, [pc, #140]	; (8002af8 <MX_TIM1_Init+0xac>)
 8002a6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000000-1;
 8002a6e:	f003 f94d 	bl	8005d0c <HAL_RCC_GetSysClockFreq>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4a21      	ldr	r2, [pc, #132]	; (8002afc <MX_TIM1_Init+0xb0>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0c9b      	lsrs	r3, r3, #18
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <MX_TIM1_Init+0xa8>)
 8002a80:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a82:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <MX_TIM1_Init+0xa8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <MX_TIM1_Init+0xa8>)
 8002a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a90:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <MX_TIM1_Init+0xa8>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a96:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <MX_TIM1_Init+0xa8>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <MX_TIM1_Init+0xa8>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002aa2:	4814      	ldr	r0, [pc, #80]	; (8002af4 <MX_TIM1_Init+0xa8>)
 8002aa4:	f003 fd32 	bl	800650c <HAL_TIM_Base_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8002aae:	f000 f9b1 	bl	8002e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ab8:	f107 0308 	add.w	r3, r7, #8
 8002abc:	4619      	mov	r1, r3
 8002abe:	480d      	ldr	r0, [pc, #52]	; (8002af4 <MX_TIM1_Init+0xa8>)
 8002ac0:	f004 fab0 	bl	8007024 <HAL_TIM_ConfigClockSource>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002aca:	f000 f9a3 	bl	8002e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ad6:	463b      	mov	r3, r7
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4806      	ldr	r0, [pc, #24]	; (8002af4 <MX_TIM1_Init+0xa8>)
 8002adc:	f004 fe2e 	bl	800773c <HAL_TIMEx_MasterConfigSynchronization>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002ae6:	f000 f995 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000590 	.word	0x20000590
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	431bde83 	.word	0x431bde83

08002b00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08e      	sub	sp, #56	; 0x38
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b14:	f107 0320 	add.w	r3, r7, #32
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
 8002b2c:	615a      	str	r2, [r3, #20]
 8002b2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b30:	4b40      	ldr	r3, [pc, #256]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002b32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000-1;
 8002b38:	f003 f8e8 	bl	8005d0c <HAL_RCC_GetSysClockFreq>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4a3e      	ldr	r2, [pc, #248]	; (8002c38 <MX_TIM2_Init+0x138>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	099b      	lsrs	r3, r3, #6
 8002b46:	3b01      	subs	r3, #1
 8002b48:	4a3a      	ldr	r2, [pc, #232]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002b4a:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4c:	4b39      	ldr	r3, [pc, #228]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002b52:	4b38      	ldr	r3, [pc, #224]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002b54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5a:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b60:	4b34      	ldr	r3, [pc, #208]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b66:	4833      	ldr	r0, [pc, #204]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002b68:	f003 fcd0 	bl	800650c <HAL_TIM_Base_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002b72:	f000 f94f 	bl	8002e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b80:	4619      	mov	r1, r3
 8002b82:	482c      	ldr	r0, [pc, #176]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002b84:	f004 fa4e 	bl	8007024 <HAL_TIM_ConfigClockSource>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002b8e:	f000 f941 	bl	8002e14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b92:	4828      	ldr	r0, [pc, #160]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002b94:	f003 fdfe 	bl	8006794 <HAL_TIM_PWM_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002b9e:	f000 f939 	bl	8002e14 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002ba2:	4824      	ldr	r0, [pc, #144]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002ba4:	f003 fd9e 	bl	80066e4 <HAL_TIM_OC_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002bae:	f000 f931 	bl	8002e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bba:	f107 0320 	add.w	r3, r7, #32
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	481c      	ldr	r0, [pc, #112]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002bc2:	f004 fdbb 	bl	800773c <HAL_TIMEx_MasterConfigSynchronization>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8002bcc:	f000 f922 	bl	8002e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bd0:	2360      	movs	r3, #96	; 0x60
 8002bd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	2200      	movs	r2, #0
 8002be4:	4619      	mov	r1, r3
 8002be6:	4813      	ldr	r0, [pc, #76]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002be8:	f004 f95e 	bl	8006ea8 <HAL_TIM_PWM_ConfigChannel>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8002bf2:	f000 f90f 	bl	8002e14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	480c      	ldr	r0, [pc, #48]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002c02:	f004 f8f9 	bl	8006df8 <HAL_TIM_OC_ConfigChannel>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8002c0c:	f000 f902 	bl	8002e14 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	2208      	movs	r2, #8
 8002c14:	4619      	mov	r1, r3
 8002c16:	4807      	ldr	r0, [pc, #28]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002c18:	f004 f8ee 	bl	8006df8 <HAL_TIM_OC_ConfigChannel>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8002c22:	f000 f8f7 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c26:	4803      	ldr	r0, [pc, #12]	; (8002c34 <MX_TIM2_Init+0x134>)
 8002c28:	f000 fc12 	bl	8003450 <HAL_TIM_MspPostInit>

}
 8002c2c:	bf00      	nop
 8002c2e:	3738      	adds	r7, #56	; 0x38
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000630 	.word	0x20000630
 8002c38:	10624dd3 	.word	0x10624dd3

08002c3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	; 0x30
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	2224      	movs	r2, #36	; 0x24
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f009 f8a8 	bl	800bda0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c58:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <MX_TIM3_Init+0xa0>)
 8002c5a:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <MX_TIM3_Init+0xa4>)
 8002c5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c5e:	4b1f      	ldr	r3, [pc, #124]	; (8002cdc <MX_TIM3_Init+0xa0>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <MX_TIM3_Init+0xa0>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <MX_TIM3_Init+0xa0>)
 8002c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <MX_TIM3_Init+0xa0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c78:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <MX_TIM3_Init+0xa0>)
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c86:	2301      	movs	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002c8e:	230a      	movs	r3, #10
 8002c90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c92:	2300      	movs	r3, #0
 8002c94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c96:	2301      	movs	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002c9e:	230a      	movs	r3, #10
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	480c      	ldr	r0, [pc, #48]	; (8002cdc <MX_TIM3_Init+0xa0>)
 8002caa:	f003 fe6d 	bl	8006988 <HAL_TIM_Encoder_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002cb4:	f000 f8ae 	bl	8002e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4805      	ldr	r0, [pc, #20]	; (8002cdc <MX_TIM3_Init+0xa0>)
 8002cc6:	f004 fd39 	bl	800773c <HAL_TIMEx_MasterConfigSynchronization>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002cd0:	f000 f8a0 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002cd4:	bf00      	nop
 8002cd6:	3730      	adds	r7, #48	; 0x30
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000548 	.word	0x20000548
 8002ce0:	40000400 	.word	0x40000400

08002ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf8:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <MX_GPIO_Init+0x120>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	4a41      	ldr	r2, [pc, #260]	; (8002e04 <MX_GPIO_Init+0x120>)
 8002cfe:	f043 0310 	orr.w	r3, r3, #16
 8002d02:	6193      	str	r3, [r2, #24]
 8002d04:	4b3f      	ldr	r3, [pc, #252]	; (8002e04 <MX_GPIO_Init+0x120>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d10:	4b3c      	ldr	r3, [pc, #240]	; (8002e04 <MX_GPIO_Init+0x120>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	4a3b      	ldr	r2, [pc, #236]	; (8002e04 <MX_GPIO_Init+0x120>)
 8002d16:	f043 0320 	orr.w	r3, r3, #32
 8002d1a:	6193      	str	r3, [r2, #24]
 8002d1c:	4b39      	ldr	r3, [pc, #228]	; (8002e04 <MX_GPIO_Init+0x120>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d28:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <MX_GPIO_Init+0x120>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	4a35      	ldr	r2, [pc, #212]	; (8002e04 <MX_GPIO_Init+0x120>)
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	6193      	str	r3, [r2, #24]
 8002d34:	4b33      	ldr	r3, [pc, #204]	; (8002e04 <MX_GPIO_Init+0x120>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	607b      	str	r3, [r7, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <MX_GPIO_Init+0x120>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	4a2f      	ldr	r2, [pc, #188]	; (8002e04 <MX_GPIO_Init+0x120>)
 8002d46:	f043 0308 	orr.w	r3, r3, #8
 8002d4a:	6193      	str	r3, [r2, #24]
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <MX_GPIO_Init+0x120>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d5e:	482a      	ldr	r0, [pc, #168]	; (8002e08 <MX_GPIO_Init+0x124>)
 8002d60:	f000 ff73 	bl	8003c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 8002d64:	2201      	movs	r2, #1
 8002d66:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002d6a:	4828      	ldr	r0, [pc, #160]	; (8002e0c <MX_GPIO_Init+0x128>)
 8002d6c:	f000 ff6d 	bl	8003c4a <HAL_GPIO_WritePin>
                          |hd_4_Pin|hd_5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8002d70:	2200      	movs	r2, #0
 8002d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d76:	4826      	ldr	r0, [pc, #152]	; (8002e10 <MX_GPIO_Init+0x12c>)
 8002d78:	f000 ff67 	bl	8003c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, debug_a_Pin|debug_b_Pin, GPIO_PIN_RESET);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002d82:	4822      	ldr	r0, [pc, #136]	; (8002e0c <MX_GPIO_Init+0x128>)
 8002d84:	f000 ff61 	bl	8003c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d96:	2302      	movs	r3, #2
 8002d98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4819      	ldr	r0, [pc, #100]	; (8002e08 <MX_GPIO_Init+0x124>)
 8002da2:	f000 fdb7 	bl	8003914 <HAL_GPIO_Init>

  /*Configure GPIO pins : hd_7_Pin hd_6_Pin hd_RS_Pin hd_E_Pin
                           hd_4_Pin hd_5_Pin debug_a_Pin debug_b_Pin */
  GPIO_InitStruct.Pin = hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 8002da6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002daa:	613b      	str	r3, [r7, #16]
                          |hd_4_Pin|hd_5_Pin|debug_a_Pin|debug_b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dac:	2301      	movs	r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2302      	movs	r3, #2
 8002db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4813      	ldr	r0, [pc, #76]	; (8002e0c <MX_GPIO_Init+0x128>)
 8002dc0:	f000 fda8 	bl	8003914 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 8002dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 8002dd6:	f107 0310 	add.w	r3, r7, #16
 8002dda:	4619      	mov	r1, r3
 8002ddc:	480c      	ldr	r0, [pc, #48]	; (8002e10 <MX_GPIO_Init+0x12c>)
 8002dde:	f000 fd99 	bl	8003914 <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_s_Pin */
  GPIO_InitStruct.Pin = enc_s_Pin;
 8002de2:	2308      	movs	r3, #8
 8002de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(enc_s_GPIO_Port, &GPIO_InitStruct);
 8002dee:	f107 0310 	add.w	r3, r7, #16
 8002df2:	4619      	mov	r1, r3
 8002df4:	4805      	ldr	r0, [pc, #20]	; (8002e0c <MX_GPIO_Init+0x128>)
 8002df6:	f000 fd8d 	bl	8003914 <HAL_GPIO_Init>

}
 8002dfa:	bf00      	nop
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40011000 	.word	0x40011000
 8002e0c:	40010c00 	.word	0x40010c00
 8002e10:	40010800 	.word	0x40010800

08002e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e18:	b672      	cpsid	i
}
 8002e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e1c:	e7fe      	b.n	8002e1c <Error_Handler+0x8>
	...

08002e20 <SPI_WaitFlagStateUntilTimeout>:
#include "main.h"
#include "spi_rxonly.h"

static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e30:	f000 fc34 	bl	800369c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e40:	f000 fc2c 	bl	800369c <HAL_GetTick>
 8002e44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e46:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	015b      	lsls	r3, r3, #5
 8002e4c:	0d1b      	lsrs	r3, r3, #20
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	fb02 f303 	mul.w	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e56:	e054      	b.n	8002f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5e:	d050      	beq.n	8002f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e60:	f000 fc1c 	bl	800369c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d902      	bls.n	8002e76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d13d      	bne.n	8002ef2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e8e:	d111      	bne.n	8002eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e98:	d004      	beq.n	8002ea4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea2:	d107      	bne.n	8002eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebc:	d10f      	bne.n	8002ede <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002edc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e017      	b.n	8002f22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	bf0c      	ite	eq
 8002f12:	2301      	moveq	r3, #1
 8002f14:	2300      	movne	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d19b      	bne.n	8002e58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000030 	.word	0x20000030

08002f30 <SPI_EndRxTransaction>:

static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f44:	d111      	bne.n	8002f6a <SPI_EndRxTransaction+0x3a>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4e:	d004      	beq.n	8002f5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f58:	d107      	bne.n	8002f6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f68:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f72:	d117      	bne.n	8002fa4 <SPI_EndRxTransaction+0x74>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7c:	d112      	bne.n	8002fa4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2200      	movs	r2, #0
 8002f86:	2101      	movs	r1, #1
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7ff ff49 	bl	8002e20 <SPI_WaitFlagStateUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01a      	beq.n	8002fca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e013      	b.n	8002fcc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2200      	movs	r2, #0
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f7ff ff36 	bl	8002e20 <SPI_WaitFlagStateUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	f043 0220 	orr.w	r2, r3, #32
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e000      	b.n	8002fcc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_SPI_ReceiveOnly>:

// HAL Receive procedure doesn't work well in RXONLY mode
// (it doesn't know when to stop), so here is quick fix
HAL_StatusTypeDef HAL_SPI_ReceiveOnly(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff0:	d112      	bne.n	8003018 <HAL_SPI_ReceiveOnly+0x44>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10e      	bne.n	8003018 <HAL_SPI_ReceiveOnly+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003002:	88fa      	ldrh	r2, [r7, #6]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f003 f834 	bl	800607c <HAL_SPI_TransmitReceive>
 8003014:	4603      	mov	r3, r0
 8003016:	e110      	b.n	800323a <HAL_SPI_ReceiveOnly+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_SPI_ReceiveOnly+0x52>
 8003022:	2302      	movs	r3, #2
 8003024:	e109      	b.n	800323a <HAL_SPI_ReceiveOnly+0x266>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800302e:	f000 fb35 	bl	800369c <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d002      	beq.n	8003046 <HAL_SPI_ReceiveOnly+0x72>
  {
    errorcode = HAL_BUSY;
 8003040:	2302      	movs	r3, #2
 8003042:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003044:	e0f0      	b.n	8003228 <HAL_SPI_ReceiveOnly+0x254>
  }

  if ((pData == NULL) || (Size == 0U))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_SPI_ReceiveOnly+0x7e>
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <HAL_SPI_ReceiveOnly+0x84>
  {
    errorcode = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003056:	e0e7      	b.n	8003228 <HAL_SPI_ReceiveOnly+0x254>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2204      	movs	r2, #4
 800305c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309e:	d10f      	bne.n	80030c0 <HAL_SPI_ReceiveOnly+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d007      	beq.n	80030de <HAL_SPI_ReceiveOnly+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 8088 	bne.w	80031f8 <HAL_SPI_ReceiveOnly+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030e8:	e02e      	b.n	8003148 <HAL_SPI_ReceiveOnly+0x174>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d115      	bne.n	8003124 <HAL_SPI_ReceiveOnly+0x150>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f103 020c 	add.w	r2, r3, #12
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	7812      	ldrb	r2, [r2, #0]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003122:	e011      	b.n	8003148 <HAL_SPI_ReceiveOnly+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003124:	f000 faba 	bl	800369c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d803      	bhi.n	800313c <HAL_SPI_ReceiveOnly+0x168>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d102      	bne.n	8003142 <HAL_SPI_ReceiveOnly+0x16e>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <HAL_SPI_ReceiveOnly+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003146:	e06f      	b.n	8003228 <HAL_SPI_ReceiveOnly+0x254>
    while (hspi->RxXferCount > 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1cb      	bne.n	80030ea <HAL_SPI_ReceiveOnly+0x116>
 8003152:	e056      	b.n	8003202 <HAL_SPI_ReceiveOnly+0x22e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
    	// if RXONLY
    	if ((hspi->Instance->CR1 & SPI_CR1_RXONLY) == SPI_CR1_RXONLY)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003162:	d11c      	bne.n	800319e <HAL_SPI_ReceiveOnly+0x1ca>
    	{
		  /* Check if the SPI is already enabled */
		  if (((hspi->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b40      	cmp	r3, #64	; 0x40
 8003170:	d115      	bne.n	800319e <HAL_SPI_ReceiveOnly+0x1ca>
				  && (hspi->RxXferCount == 1U))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d110      	bne.n	800319e <HAL_SPI_ReceiveOnly+0x1ca>
		  {
			  // delay for ~ 150 cycles (~ SPI clock cycle for Fclk/128
			  // (Page 718 from RM0008 Rev 21)
			  for (int i = 12; i > 0; i--);
 800317c:	230c      	movs	r3, #12
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	e002      	b.n	8003188 <HAL_SPI_ReceiveOnly+0x1b4>
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	3b01      	subs	r3, #1
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	dcf9      	bgt.n	8003182 <HAL_SPI_ReceiveOnly+0x1ae>
			/* Disable SPI peripheral */
			__HAL_SPI_DISABLE(hspi);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800319c:	601a      	str	r2, [r3, #0]
		  }
    	}
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d113      	bne.n	80031d4 <HAL_SPI_ReceiveOnly+0x200>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	b292      	uxth	r2, r2
 80031b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	1c9a      	adds	r2, r3, #2
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031d2:	e011      	b.n	80031f8 <HAL_SPI_ReceiveOnly+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031d4:	f000 fa62 	bl	800369c <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d803      	bhi.n	80031ec <HAL_SPI_ReceiveOnly+0x218>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d102      	bne.n	80031f2 <HAL_SPI_ReceiveOnly+0x21e>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <HAL_SPI_ReceiveOnly+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031f6:	e017      	b.n	8003228 <HAL_SPI_ReceiveOnly+0x254>
    while (hspi->RxXferCount > 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1a8      	bne.n	8003154 <HAL_SPI_ReceiveOnly+0x180>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	6839      	ldr	r1, [r7, #0]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff fe92 	bl	8002f30 <SPI_EndRxTransaction>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_SPI_ReceiveOnly+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_SPI_ReceiveOnly+0x252>
  {
    errorcode = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e000      	b.n	8003228 <HAL_SPI_ReceiveOnly+0x254>
  }

error :
 8003226:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003238:	7ffb      	ldrb	r3, [r7, #31]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <HAL_MspInit+0x5c>)
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <HAL_MspInit+0x5c>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6193      	str	r3, [r2, #24]
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_MspInit+0x5c>)
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_MspInit+0x5c>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <HAL_MspInit+0x5c>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326c:	61d3      	str	r3, [r2, #28]
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <HAL_MspInit+0x5c>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800327a:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <HAL_MspInit+0x60>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <HAL_MspInit+0x60>)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40010000 	.word	0x40010000

080032a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1b      	ldr	r2, [pc, #108]	; (8003330 <HAL_SPI_MspInit+0x88>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d12f      	bne.n	8003328 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_SPI_MspInit+0x8c>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	4a19      	ldr	r2, [pc, #100]	; (8003334 <HAL_SPI_MspInit+0x8c>)
 80032ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032d2:	6193      	str	r3, [r2, #24]
 80032d4:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_SPI_MspInit+0x8c>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <HAL_SPI_MspInit+0x8c>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	4a13      	ldr	r2, [pc, #76]	; (8003334 <HAL_SPI_MspInit+0x8c>)
 80032e6:	f043 0304 	orr.w	r3, r3, #4
 80032ea:	6193      	str	r3, [r2, #24]
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_SPI_MspInit+0x8c>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80032f8:	2330      	movs	r3, #48	; 0x30
 80032fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fc:	2302      	movs	r3, #2
 80032fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003300:	2303      	movs	r3, #3
 8003302:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003304:	f107 0310 	add.w	r3, r7, #16
 8003308:	4619      	mov	r1, r3
 800330a:	480b      	ldr	r0, [pc, #44]	; (8003338 <HAL_SPI_MspInit+0x90>)
 800330c:	f000 fb02 	bl	8003914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003310:	2340      	movs	r3, #64	; 0x40
 8003312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003318:	2301      	movs	r3, #1
 800331a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331c:	f107 0310 	add.w	r3, r7, #16
 8003320:	4619      	mov	r1, r3
 8003322:	4805      	ldr	r0, [pc, #20]	; (8003338 <HAL_SPI_MspInit+0x90>)
 8003324:	f000 faf6 	bl	8003914 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003328:	bf00      	nop
 800332a:	3720      	adds	r7, #32
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40013000 	.word	0x40013000
 8003334:	40021000 	.word	0x40021000
 8003338:	40010800 	.word	0x40010800

0800333c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a16      	ldr	r2, [pc, #88]	; (80033a4 <HAL_TIM_Base_MspInit+0x68>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10c      	bne.n	8003368 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800334e:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <HAL_TIM_Base_MspInit+0x6c>)
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	4a15      	ldr	r2, [pc, #84]	; (80033a8 <HAL_TIM_Base_MspInit+0x6c>)
 8003354:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003358:	6193      	str	r3, [r2, #24]
 800335a:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <HAL_TIM_Base_MspInit+0x6c>)
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003366:	e018      	b.n	800339a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003370:	d113      	bne.n	800339a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <HAL_TIM_Base_MspInit+0x6c>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <HAL_TIM_Base_MspInit+0x6c>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	61d3      	str	r3, [r2, #28]
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_TIM_Base_MspInit+0x6c>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800338a:	2200      	movs	r2, #0
 800338c:	2100      	movs	r1, #0
 800338e:	201c      	movs	r0, #28
 8003390:	f000 fa89 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003394:	201c      	movs	r0, #28
 8003396:	f000 faa2 	bl	80038de <HAL_NVIC_EnableIRQ>
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40021000 	.word	0x40021000

080033ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	; 0x28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <HAL_TIM_Encoder_MspInit+0x94>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d135      	bne.n	8003438 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033cc:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_TIM_Encoder_MspInit+0x98>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	4a1c      	ldr	r2, [pc, #112]	; (8003444 <HAL_TIM_Encoder_MspInit+0x98>)
 80033d2:	f043 0302 	orr.w	r3, r3, #2
 80033d6:	61d3      	str	r3, [r2, #28]
 80033d8:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <HAL_TIM_Encoder_MspInit+0x98>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e4:	4b17      	ldr	r3, [pc, #92]	; (8003444 <HAL_TIM_Encoder_MspInit+0x98>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	4a16      	ldr	r2, [pc, #88]	; (8003444 <HAL_TIM_Encoder_MspInit+0x98>)
 80033ea:	f043 0308 	orr.w	r3, r3, #8
 80033ee:	6193      	str	r3, [r2, #24]
 80033f0:	4b14      	ldr	r3, [pc, #80]	; (8003444 <HAL_TIM_Encoder_MspInit+0x98>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin;
 80033fc:	2330      	movs	r3, #48	; 0x30
 80033fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003400:	2300      	movs	r3, #0
 8003402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	4619      	mov	r1, r3
 800340e:	480e      	ldr	r0, [pc, #56]	; (8003448 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003410:	f000 fa80 	bl	8003914 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003414:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_TIM_Encoder_MspInit+0xa0>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
 8003432:	4a06      	ldr	r2, [pc, #24]	; (800344c <HAL_TIM_Encoder_MspInit+0xa0>)
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003438:	bf00      	nop
 800343a:	3728      	adds	r7, #40	; 0x28
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40000400 	.word	0x40000400
 8003444:	40021000 	.word	0x40021000
 8003448:	40010c00 	.word	0x40010c00
 800344c:	40010000 	.word	0x40010000

08003450 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0310 	add.w	r3, r7, #16
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346e:	d117      	bne.n	80034a0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003470:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <HAL_TIM_MspPostInit+0x58>)
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <HAL_TIM_MspPostInit+0x58>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	6193      	str	r3, [r2, #24]
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_TIM_MspPostInit+0x58>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003488:	2301      	movs	r3, #1
 800348a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348c:	2302      	movs	r3, #2
 800348e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	2302      	movs	r3, #2
 8003492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003494:	f107 0310 	add.w	r3, r7, #16
 8003498:	4619      	mov	r1, r3
 800349a:	4804      	ldr	r0, [pc, #16]	; (80034ac <HAL_TIM_MspPostInit+0x5c>)
 800349c:	f000 fa3a 	bl	8003914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034a0:	bf00      	nop
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40010800 	.word	0x40010800

080034b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034b4:	e7fe      	b.n	80034b4 <NMI_Handler+0x4>

080034b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ba:	e7fe      	b.n	80034ba <HardFault_Handler+0x4>

080034bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c0:	e7fe      	b.n	80034c0 <MemManage_Handler+0x4>

080034c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034c2:	b480      	push	{r7}
 80034c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034c6:	e7fe      	b.n	80034c6 <BusFault_Handler+0x4>

080034c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034cc:	e7fe      	b.n	80034cc <UsageFault_Handler+0x4>

080034ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ce:	b480      	push	{r7}
 80034d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034f6:	f000 f8bf 	bl	8003678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003504:	4802      	ldr	r0, [pc, #8]	; (8003510 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003506:	f000 fd02 	bl	8003f0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20001310 	.word	0x20001310

08003514 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003518:	4802      	ldr	r0, [pc, #8]	; (8003524 <TIM2_IRQHandler+0x10>)
 800351a:	f003 fb65 	bl	8006be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000630 	.word	0x20000630

08003528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <_sbrk+0x5c>)
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <_sbrk+0x60>)
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <_sbrk+0x64>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003544:	4b11      	ldr	r3, [pc, #68]	; (800358c <_sbrk+0x64>)
 8003546:	4a12      	ldr	r2, [pc, #72]	; (8003590 <_sbrk+0x68>)
 8003548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <_sbrk+0x64>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	429a      	cmp	r2, r3
 8003556:	d207      	bcs.n	8003568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003558:	f008 fbf8 	bl	800bd4c <__errno>
 800355c:	4603      	mov	r3, r0
 800355e:	220c      	movs	r2, #12
 8003560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003562:	f04f 33ff 	mov.w	r3, #4294967295
 8003566:	e009      	b.n	800357c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003568:	4b08      	ldr	r3, [pc, #32]	; (800358c <_sbrk+0x64>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800356e:	4b07      	ldr	r3, [pc, #28]	; (800358c <_sbrk+0x64>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	4a05      	ldr	r2, [pc, #20]	; (800358c <_sbrk+0x64>)
 8003578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800357a:	68fb      	ldr	r3, [r7, #12]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20005000 	.word	0x20005000
 8003588:	00000400 	.word	0x00000400
 800358c:	200002f0 	.word	0x200002f0
 8003590:	20001610 	.word	0x20001610

08003594 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035a0:	480c      	ldr	r0, [pc, #48]	; (80035d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035a2:	490d      	ldr	r1, [pc, #52]	; (80035d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035a4:	4a0d      	ldr	r2, [pc, #52]	; (80035dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035a8:	e002      	b.n	80035b0 <LoopCopyDataInit>

080035aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ae:	3304      	adds	r3, #4

080035b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b4:	d3f9      	bcc.n	80035aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035b6:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035b8:	4c0a      	ldr	r4, [pc, #40]	; (80035e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035bc:	e001      	b.n	80035c2 <LoopFillZerobss>

080035be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035c0:	3204      	adds	r2, #4

080035c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c4:	d3fb      	bcc.n	80035be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035c6:	f7ff ffe5 	bl	8003594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ca:	f008 fbc5 	bl	800bd58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035ce:	f7ff f95d 	bl	800288c <main>
  bx lr
 80035d2:	4770      	bx	lr
  ldr r0, =_sdata
 80035d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035d8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80035dc:	0800c994 	.word	0x0800c994
  ldr r2, =_sbss
 80035e0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80035e4:	2000160c 	.word	0x2000160c

080035e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035e8:	e7fe      	b.n	80035e8 <ADC1_2_IRQHandler>
	...

080035ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_Init+0x28>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a07      	ldr	r2, [pc, #28]	; (8003614 <HAL_Init+0x28>)
 80035f6:	f043 0310 	orr.w	r3, r3, #16
 80035fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035fc:	2003      	movs	r0, #3
 80035fe:	f000 f947 	bl	8003890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003602:	2000      	movs	r0, #0
 8003604:	f000 f808 	bl	8003618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003608:	f7ff fe1c 	bl	8003244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40022000 	.word	0x40022000

08003618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003620:	4b12      	ldr	r3, [pc, #72]	; (800366c <HAL_InitTick+0x54>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_InitTick+0x58>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	4619      	mov	r1, r3
 800362a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800362e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003632:	fbb2 f3f3 	udiv	r3, r2, r3
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f95f 	bl	80038fa <HAL_SYSTICK_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e00e      	b.n	8003664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b0f      	cmp	r3, #15
 800364a:	d80a      	bhi.n	8003662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800364c:	2200      	movs	r2, #0
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	f04f 30ff 	mov.w	r0, #4294967295
 8003654:	f000 f927 	bl	80038a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003658:	4a06      	ldr	r2, [pc, #24]	; (8003674 <HAL_InitTick+0x5c>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	e000      	b.n	8003664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000030 	.word	0x20000030
 8003670:	20000038 	.word	0x20000038
 8003674:	20000034 	.word	0x20000034

08003678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_IncTick+0x1c>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_IncTick+0x20>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4413      	add	r3, r2
 8003688:	4a03      	ldr	r2, [pc, #12]	; (8003698 <HAL_IncTick+0x20>)
 800368a:	6013      	str	r3, [r2, #0]
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	20000038 	.word	0x20000038
 8003698:	20000678 	.word	0x20000678

0800369c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return uwTick;
 80036a0:	4b02      	ldr	r3, [pc, #8]	; (80036ac <HAL_GetTick+0x10>)
 80036a2:	681b      	ldr	r3, [r3, #0]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	20000678 	.word	0x20000678

080036b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036b8:	f7ff fff0 	bl	800369c <HAL_GetTick>
 80036bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d005      	beq.n	80036d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <HAL_Delay+0x44>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4413      	add	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036d6:	bf00      	nop
 80036d8:	f7ff ffe0 	bl	800369c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d8f7      	bhi.n	80036d8 <HAL_Delay+0x28>
  {
  }
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000038 	.word	0x20000038

080036f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003708:	4b0c      	ldr	r3, [pc, #48]	; (800373c <__NVIC_SetPriorityGrouping+0x44>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003714:	4013      	ands	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800372a:	4a04      	ldr	r2, [pc, #16]	; (800373c <__NVIC_SetPriorityGrouping+0x44>)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	60d3      	str	r3, [r2, #12]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <__NVIC_GetPriorityGrouping+0x18>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	f003 0307 	and.w	r3, r3, #7
}
 800374e:	4618      	mov	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	2b00      	cmp	r3, #0
 800376c:	db0b      	blt.n	8003786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	f003 021f 	and.w	r2, r3, #31
 8003774:	4906      	ldr	r1, [pc, #24]	; (8003790 <__NVIC_EnableIRQ+0x34>)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2001      	movs	r0, #1
 800377e:	fa00 f202 	lsl.w	r2, r0, r2
 8003782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr
 8003790:	e000e100 	.word	0xe000e100

08003794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	db0a      	blt.n	80037be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	490c      	ldr	r1, [pc, #48]	; (80037e0 <__NVIC_SetPriority+0x4c>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	440b      	add	r3, r1
 80037b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037bc:	e00a      	b.n	80037d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4908      	ldr	r1, [pc, #32]	; (80037e4 <__NVIC_SetPriority+0x50>)
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	3b04      	subs	r3, #4
 80037cc:	0112      	lsls	r2, r2, #4
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	761a      	strb	r2, [r3, #24]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	e000e100 	.word	0xe000e100
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f1c3 0307 	rsb	r3, r3, #7
 8003802:	2b04      	cmp	r3, #4
 8003804:	bf28      	it	cs
 8003806:	2304      	movcs	r3, #4
 8003808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3304      	adds	r3, #4
 800380e:	2b06      	cmp	r3, #6
 8003810:	d902      	bls.n	8003818 <NVIC_EncodePriority+0x30>
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3b03      	subs	r3, #3
 8003816:	e000      	b.n	800381a <NVIC_EncodePriority+0x32>
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	f04f 32ff 	mov.w	r2, #4294967295
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	401a      	ands	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003830:	f04f 31ff 	mov.w	r1, #4294967295
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	43d9      	mvns	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	4313      	orrs	r3, r2
         );
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	; 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800385c:	d301      	bcc.n	8003862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385e:	2301      	movs	r3, #1
 8003860:	e00f      	b.n	8003882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003862:	4a0a      	ldr	r2, [pc, #40]	; (800388c <SysTick_Config+0x40>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386a:	210f      	movs	r1, #15
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	f7ff ff90 	bl	8003794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <SysTick_Config+0x40>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387a:	4b04      	ldr	r3, [pc, #16]	; (800388c <SysTick_Config+0x40>)
 800387c:	2207      	movs	r2, #7
 800387e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	e000e010 	.word	0xe000e010

08003890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff2d 	bl	80036f8 <__NVIC_SetPriorityGrouping>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	4603      	mov	r3, r0
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b8:	f7ff ff42 	bl	8003740 <__NVIC_GetPriorityGrouping>
 80038bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	6978      	ldr	r0, [r7, #20]
 80038c4:	f7ff ff90 	bl	80037e8 <NVIC_EncodePriority>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff5f 	bl	8003794 <__NVIC_SetPriority>
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	4603      	mov	r3, r0
 80038e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff35 	bl	800375c <__NVIC_EnableIRQ>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff ffa2 	bl	800384c <SysTick_Config>
 8003908:	4603      	mov	r3, r0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003914:	b480      	push	{r7}
 8003916:	b08b      	sub	sp, #44	; 0x2c
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800391e:	2300      	movs	r3, #0
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003922:	2300      	movs	r3, #0
 8003924:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003926:	e169      	b.n	8003bfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003928:	2201      	movs	r2, #1
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	429a      	cmp	r2, r3
 8003942:	f040 8158 	bne.w	8003bf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4a9a      	ldr	r2, [pc, #616]	; (8003bb4 <HAL_GPIO_Init+0x2a0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d05e      	beq.n	8003a0e <HAL_GPIO_Init+0xfa>
 8003950:	4a98      	ldr	r2, [pc, #608]	; (8003bb4 <HAL_GPIO_Init+0x2a0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d875      	bhi.n	8003a42 <HAL_GPIO_Init+0x12e>
 8003956:	4a98      	ldr	r2, [pc, #608]	; (8003bb8 <HAL_GPIO_Init+0x2a4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d058      	beq.n	8003a0e <HAL_GPIO_Init+0xfa>
 800395c:	4a96      	ldr	r2, [pc, #600]	; (8003bb8 <HAL_GPIO_Init+0x2a4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d86f      	bhi.n	8003a42 <HAL_GPIO_Init+0x12e>
 8003962:	4a96      	ldr	r2, [pc, #600]	; (8003bbc <HAL_GPIO_Init+0x2a8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d052      	beq.n	8003a0e <HAL_GPIO_Init+0xfa>
 8003968:	4a94      	ldr	r2, [pc, #592]	; (8003bbc <HAL_GPIO_Init+0x2a8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d869      	bhi.n	8003a42 <HAL_GPIO_Init+0x12e>
 800396e:	4a94      	ldr	r2, [pc, #592]	; (8003bc0 <HAL_GPIO_Init+0x2ac>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d04c      	beq.n	8003a0e <HAL_GPIO_Init+0xfa>
 8003974:	4a92      	ldr	r2, [pc, #584]	; (8003bc0 <HAL_GPIO_Init+0x2ac>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d863      	bhi.n	8003a42 <HAL_GPIO_Init+0x12e>
 800397a:	4a92      	ldr	r2, [pc, #584]	; (8003bc4 <HAL_GPIO_Init+0x2b0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d046      	beq.n	8003a0e <HAL_GPIO_Init+0xfa>
 8003980:	4a90      	ldr	r2, [pc, #576]	; (8003bc4 <HAL_GPIO_Init+0x2b0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d85d      	bhi.n	8003a42 <HAL_GPIO_Init+0x12e>
 8003986:	2b12      	cmp	r3, #18
 8003988:	d82a      	bhi.n	80039e0 <HAL_GPIO_Init+0xcc>
 800398a:	2b12      	cmp	r3, #18
 800398c:	d859      	bhi.n	8003a42 <HAL_GPIO_Init+0x12e>
 800398e:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <HAL_GPIO_Init+0x80>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	08003a0f 	.word	0x08003a0f
 8003998:	080039e9 	.word	0x080039e9
 800399c:	080039fb 	.word	0x080039fb
 80039a0:	08003a3d 	.word	0x08003a3d
 80039a4:	08003a43 	.word	0x08003a43
 80039a8:	08003a43 	.word	0x08003a43
 80039ac:	08003a43 	.word	0x08003a43
 80039b0:	08003a43 	.word	0x08003a43
 80039b4:	08003a43 	.word	0x08003a43
 80039b8:	08003a43 	.word	0x08003a43
 80039bc:	08003a43 	.word	0x08003a43
 80039c0:	08003a43 	.word	0x08003a43
 80039c4:	08003a43 	.word	0x08003a43
 80039c8:	08003a43 	.word	0x08003a43
 80039cc:	08003a43 	.word	0x08003a43
 80039d0:	08003a43 	.word	0x08003a43
 80039d4:	08003a43 	.word	0x08003a43
 80039d8:	080039f1 	.word	0x080039f1
 80039dc:	08003a05 	.word	0x08003a05
 80039e0:	4a79      	ldr	r2, [pc, #484]	; (8003bc8 <HAL_GPIO_Init+0x2b4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039e6:	e02c      	b.n	8003a42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	623b      	str	r3, [r7, #32]
          break;
 80039ee:	e029      	b.n	8003a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	3304      	adds	r3, #4
 80039f6:	623b      	str	r3, [r7, #32]
          break;
 80039f8:	e024      	b.n	8003a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	3308      	adds	r3, #8
 8003a00:	623b      	str	r3, [r7, #32]
          break;
 8003a02:	e01f      	b.n	8003a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	623b      	str	r3, [r7, #32]
          break;
 8003a0c:	e01a      	b.n	8003a44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d102      	bne.n	8003a1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a16:	2304      	movs	r3, #4
 8003a18:	623b      	str	r3, [r7, #32]
          break;
 8003a1a:	e013      	b.n	8003a44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d105      	bne.n	8003a30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a24:	2308      	movs	r3, #8
 8003a26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	611a      	str	r2, [r3, #16]
          break;
 8003a2e:	e009      	b.n	8003a44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a30:	2308      	movs	r3, #8
 8003a32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	615a      	str	r2, [r3, #20]
          break;
 8003a3a:	e003      	b.n	8003a44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	623b      	str	r3, [r7, #32]
          break;
 8003a40:	e000      	b.n	8003a44 <HAL_GPIO_Init+0x130>
          break;
 8003a42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2bff      	cmp	r3, #255	; 0xff
 8003a48:	d801      	bhi.n	8003a4e <HAL_GPIO_Init+0x13a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	e001      	b.n	8003a52 <HAL_GPIO_Init+0x13e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2bff      	cmp	r3, #255	; 0xff
 8003a58:	d802      	bhi.n	8003a60 <HAL_GPIO_Init+0x14c>
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	e002      	b.n	8003a66 <HAL_GPIO_Init+0x152>
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	3b08      	subs	r3, #8
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	210f      	movs	r1, #15
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	fa01 f303 	lsl.w	r3, r1, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	401a      	ands	r2, r3
 8003a78:	6a39      	ldr	r1, [r7, #32]
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a80:	431a      	orrs	r2, r3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80b1 	beq.w	8003bf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a94:	4b4d      	ldr	r3, [pc, #308]	; (8003bcc <HAL_GPIO_Init+0x2b8>)
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	4a4c      	ldr	r2, [pc, #304]	; (8003bcc <HAL_GPIO_Init+0x2b8>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	6193      	str	r3, [r2, #24]
 8003aa0:	4b4a      	ldr	r3, [pc, #296]	; (8003bcc <HAL_GPIO_Init+0x2b8>)
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003aac:	4a48      	ldr	r2, [pc, #288]	; (8003bd0 <HAL_GPIO_Init+0x2bc>)
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4013      	ands	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a40      	ldr	r2, [pc, #256]	; (8003bd4 <HAL_GPIO_Init+0x2c0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d013      	beq.n	8003b00 <HAL_GPIO_Init+0x1ec>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a3f      	ldr	r2, [pc, #252]	; (8003bd8 <HAL_GPIO_Init+0x2c4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00d      	beq.n	8003afc <HAL_GPIO_Init+0x1e8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a3e      	ldr	r2, [pc, #248]	; (8003bdc <HAL_GPIO_Init+0x2c8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d007      	beq.n	8003af8 <HAL_GPIO_Init+0x1e4>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a3d      	ldr	r2, [pc, #244]	; (8003be0 <HAL_GPIO_Init+0x2cc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d101      	bne.n	8003af4 <HAL_GPIO_Init+0x1e0>
 8003af0:	2303      	movs	r3, #3
 8003af2:	e006      	b.n	8003b02 <HAL_GPIO_Init+0x1ee>
 8003af4:	2304      	movs	r3, #4
 8003af6:	e004      	b.n	8003b02 <HAL_GPIO_Init+0x1ee>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e002      	b.n	8003b02 <HAL_GPIO_Init+0x1ee>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <HAL_GPIO_Init+0x1ee>
 8003b00:	2300      	movs	r3, #0
 8003b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b04:	f002 0203 	and.w	r2, r2, #3
 8003b08:	0092      	lsls	r2, r2, #2
 8003b0a:	4093      	lsls	r3, r2
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b12:	492f      	ldr	r1, [pc, #188]	; (8003bd0 <HAL_GPIO_Init+0x2bc>)
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	3302      	adds	r3, #2
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d006      	beq.n	8003b3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b2c:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	492c      	ldr	r1, [pc, #176]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]
 8003b38:	e006      	b.n	8003b48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b3a:	4b2a      	ldr	r3, [pc, #168]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	4928      	ldr	r1, [pc, #160]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d006      	beq.n	8003b62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b54:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	4922      	ldr	r1, [pc, #136]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
 8003b60:	e006      	b.n	8003b70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b62:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	491e      	ldr	r1, [pc, #120]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d006      	beq.n	8003b8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	4918      	ldr	r1, [pc, #96]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]
 8003b88:	e006      	b.n	8003b98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b8a:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	4914      	ldr	r1, [pc, #80]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d021      	beq.n	8003be8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	490e      	ldr	r1, [pc, #56]	; (8003be4 <HAL_GPIO_Init+0x2d0>)
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60cb      	str	r3, [r1, #12]
 8003bb0:	e021      	b.n	8003bf6 <HAL_GPIO_Init+0x2e2>
 8003bb2:	bf00      	nop
 8003bb4:	10320000 	.word	0x10320000
 8003bb8:	10310000 	.word	0x10310000
 8003bbc:	10220000 	.word	0x10220000
 8003bc0:	10210000 	.word	0x10210000
 8003bc4:	10120000 	.word	0x10120000
 8003bc8:	10110000 	.word	0x10110000
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40010000 	.word	0x40010000
 8003bd4:	40010800 	.word	0x40010800
 8003bd8:	40010c00 	.word	0x40010c00
 8003bdc:	40011000 	.word	0x40011000
 8003be0:	40011400 	.word	0x40011400
 8003be4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_GPIO_Init+0x304>)
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	4909      	ldr	r1, [pc, #36]	; (8003c18 <HAL_GPIO_Init+0x304>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	fa22 f303 	lsr.w	r3, r2, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f47f ae8e 	bne.w	8003928 <HAL_GPIO_Init+0x14>
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	372c      	adds	r7, #44	; 0x2c
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	40010400 	.word	0x40010400

08003c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	887b      	ldrh	r3, [r7, #2]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
 8003c38:	e001      	b.n	8003c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	807b      	strh	r3, [r7, #2]
 8003c56:	4613      	mov	r3, r2
 8003c58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c5a:	787b      	ldrb	r3, [r7, #1]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c60:	887a      	ldrh	r2, [r7, #2]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c66:	e003      	b.n	8003c70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c68:	887b      	ldrh	r3, [r7, #2]
 8003c6a:	041a      	lsls	r2, r3, #16
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	611a      	str	r2, [r3, #16]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b085      	sub	sp, #20
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	460b      	mov	r3, r1
 8003c84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c8c:	887a      	ldrh	r2, [r7, #2]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4013      	ands	r3, r2
 8003c92:	041a      	lsls	r2, r3, #16
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	43d9      	mvns	r1, r3
 8003c98:	887b      	ldrh	r3, [r7, #2]
 8003c9a:	400b      	ands	r3, r1
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	611a      	str	r2, [r3, #16]
}
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cae:	b08b      	sub	sp, #44	; 0x2c
 8003cb0:	af06      	add	r7, sp, #24
 8003cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0fd      	b.n	8003eba <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f007 fd90 	bl	800b7f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f003 fdbf 	bl	8007868 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	687e      	ldr	r6, [r7, #4]
 8003cf2:	466d      	mov	r5, sp
 8003cf4:	f106 0410 	add.w	r4, r6, #16
 8003cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	602b      	str	r3, [r5, #0]
 8003d00:	1d33      	adds	r3, r6, #4
 8003d02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d04:	6838      	ldr	r0, [r7, #0]
 8003d06:	f003 fd89 	bl	800781c <USB_CoreInit>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0ce      	b.n	8003eba <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f003 fdba 	bl	800789c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
 8003d2c:	e04c      	b.n	8003dc8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3301      	adds	r3, #1
 8003d40:	2201      	movs	r2, #1
 8003d42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	440b      	add	r3, r1
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d58:	7bfa      	ldrb	r2, [r7, #15]
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	b298      	uxth	r0, r3
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	440b      	add	r3, r1
 8003d6a:	3336      	adds	r3, #54	; 0x36
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	440b      	add	r3, r1
 8003d80:	3303      	adds	r3, #3
 8003d82:	2200      	movs	r2, #0
 8003d84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d86:	7bfa      	ldrb	r2, [r7, #15]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	440b      	add	r3, r1
 8003d94:	3338      	adds	r3, #56	; 0x38
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d9a:	7bfa      	ldrb	r2, [r7, #15]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	440b      	add	r3, r1
 8003da8:	333c      	adds	r3, #60	; 0x3c
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003dae:	7bfa      	ldrb	r2, [r7, #15]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	440b      	add	r3, r1
 8003dbc:	3340      	adds	r3, #64	; 0x40
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
 8003dc8:	7bfa      	ldrb	r2, [r7, #15]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d3ad      	bcc.n	8003d2e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
 8003dd6:	e044      	b.n	8003e62 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	440b      	add	r3, r1
 8003de6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003dee:	7bfa      	ldrb	r2, [r7, #15]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	440b      	add	r3, r1
 8003dfc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	440b      	add	r3, r1
 8003e12:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003e16:	2200      	movs	r2, #0
 8003e18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	440b      	add	r3, r1
 8003e28:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e30:	7bfa      	ldrb	r2, [r7, #15]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	440b      	add	r3, r1
 8003e3e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e46:	7bfa      	ldrb	r2, [r7, #15]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	440b      	add	r3, r1
 8003e54:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
 8003e62:	7bfa      	ldrb	r2, [r7, #15]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d3b5      	bcc.n	8003dd8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	687e      	ldr	r6, [r7, #4]
 8003e74:	466d      	mov	r5, sp
 8003e76:	f106 0410 	add.w	r4, r6, #16
 8003e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	1d33      	adds	r3, r6, #4
 8003e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e86:	6838      	ldr	r0, [r7, #0]
 8003e88:	f003 fd14 	bl	80078b4 <USB_DevInit>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e00d      	b.n	8003eba <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f005 fe85 	bl	8009bc2 <USB_DevDisconnect>

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ec2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_PCD_Start+0x16>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e016      	b.n	8003f06 <HAL_PCD_Start+0x44>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f003 fca9 	bl	800783c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003eea:	2101      	movs	r1, #1
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f007 fef6 	bl	800bcde <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f005 fe59 	bl	8009bae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b088      	sub	sp, #32
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f005 fe5b 	bl	8009bd6 <USB_ReadInterrupts>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2a:	d102      	bne.n	8003f32 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fb61 	bl	80045f4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f005 fe4d 	bl	8009bd6 <USB_ReadInterrupts>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f46:	d112      	bne.n	8003f6e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5a:	b292      	uxth	r2, r2
 8003f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f007 fcc4 	bl	800b8ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003f66:	2100      	movs	r1, #0
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f925 	bl	80041b8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f005 fe2f 	bl	8009bd6 <USB_ReadInterrupts>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f82:	d10b      	bne.n	8003f9c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f96:	b292      	uxth	r2, r2
 8003f98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f005 fe18 	bl	8009bd6 <USB_ReadInterrupts>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb0:	d10b      	bne.n	8003fca <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc4:	b292      	uxth	r2, r2
 8003fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f005 fe01 	bl	8009bd6 <USB_ReadInterrupts>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fde:	d126      	bne.n	800402e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0204 	bic.w	r2, r2, #4
 8003ff2:	b292      	uxth	r2, r2
 8003ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004000:	b29a      	uxth	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0208 	bic.w	r2, r2, #8
 800400a:	b292      	uxth	r2, r2
 800400c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f007 fca5 	bl	800b960 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800401e:	b29a      	uxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004028:	b292      	uxth	r2, r2
 800402a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f005 fdcf 	bl	8009bd6 <USB_ReadInterrupts>
 8004038:	4603      	mov	r3, r0
 800403a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004042:	f040 8084 	bne.w	800414e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004046:	2300      	movs	r3, #0
 8004048:	77fb      	strb	r3, [r7, #31]
 800404a:	e011      	b.n	8004070 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	7ffb      	ldrb	r3, [r7, #31]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	7ffb      	ldrb	r3, [r7, #31]
 800405a:	8812      	ldrh	r2, [r2, #0]
 800405c:	b292      	uxth	r2, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	f107 0120 	add.w	r1, r7, #32
 8004064:	440b      	add	r3, r1
 8004066:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800406a:	7ffb      	ldrb	r3, [r7, #31]
 800406c:	3301      	adds	r3, #1
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	7ffb      	ldrb	r3, [r7, #31]
 8004072:	2b07      	cmp	r3, #7
 8004074:	d9ea      	bls.n	800404c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800407e:	b29a      	uxth	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0201 	orr.w	r2, r2, #1
 8004088:	b292      	uxth	r2, r2
 800408a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004096:	b29a      	uxth	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	b292      	uxth	r2, r2
 80040a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80040a6:	bf00      	nop
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f6      	beq.n	80040a8 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040cc:	b292      	uxth	r2, r2
 80040ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	77fb      	strb	r3, [r7, #31]
 80040d6:	e010      	b.n	80040fa <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80040d8:	7ffb      	ldrb	r3, [r7, #31]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	4611      	mov	r1, r2
 80040e0:	7ffa      	ldrb	r2, [r7, #31]
 80040e2:	0092      	lsls	r2, r2, #2
 80040e4:	440a      	add	r2, r1
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	f107 0120 	add.w	r1, r7, #32
 80040ec:	440b      	add	r3, r1
 80040ee:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80040f2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80040f4:	7ffb      	ldrb	r3, [r7, #31]
 80040f6:	3301      	adds	r3, #1
 80040f8:	77fb      	strb	r3, [r7, #31]
 80040fa:	7ffb      	ldrb	r3, [r7, #31]
 80040fc:	2b07      	cmp	r3, #7
 80040fe:	d9eb      	bls.n	80040d8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004108:	b29a      	uxth	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0208 	orr.w	r2, r2, #8
 8004112:	b292      	uxth	r2, r2
 8004114:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004120:	b29a      	uxth	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800412a:	b292      	uxth	r2, r2
 800412c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004138:	b29a      	uxth	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0204 	orr.w	r2, r2, #4
 8004142:	b292      	uxth	r2, r2
 8004144:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f007 fbef 	bl	800b92c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f005 fd3f 	bl	8009bd6 <USB_ReadInterrupts>
 8004158:	4603      	mov	r3, r0
 800415a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004162:	d10e      	bne.n	8004182 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800416c:	b29a      	uxth	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004176:	b292      	uxth	r2, r2
 8004178:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f007 fba8 	bl	800b8d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f005 fd25 	bl	8009bd6 <USB_ReadInterrupts>
 800418c:	4603      	mov	r3, r0
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004196:	d10b      	bne.n	80041b0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041aa:	b292      	uxth	r2, r2
 80041ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80041b0:	bf00      	nop
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_PCD_SetAddress+0x1a>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e013      	b.n	80041fa <HAL_PCD_SetAddress+0x42>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	78fa      	ldrb	r2, [r7, #3]
 80041de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	78fa      	ldrb	r2, [r7, #3]
 80041e8:	4611      	mov	r1, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f005 fccc 	bl	8009b88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	4608      	mov	r0, r1
 800420c:	4611      	mov	r1, r2
 800420e:	461a      	mov	r2, r3
 8004210:	4603      	mov	r3, r0
 8004212:	70fb      	strb	r3, [r7, #3]
 8004214:	460b      	mov	r3, r1
 8004216:	803b      	strh	r3, [r7, #0]
 8004218:	4613      	mov	r3, r2
 800421a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004224:	2b00      	cmp	r3, #0
 8004226:	da0e      	bge.n	8004246 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4413      	add	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	705a      	strb	r2, [r3, #1]
 8004244:	e00e      	b.n	8004264 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 0207 	and.w	r2, r3, #7
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4413      	add	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	b2da      	uxtb	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004270:	883a      	ldrh	r2, [r7, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	78ba      	ldrb	r2, [r7, #2]
 800427a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	785b      	ldrb	r3, [r3, #1]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d004      	beq.n	800428e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800428e:	78bb      	ldrb	r3, [r7, #2]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d102      	bne.n	800429a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_PCD_EP_Open+0xa6>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e00e      	b.n	80042c6 <HAL_PCD_EP_Open+0xc4>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68f9      	ldr	r1, [r7, #12]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f003 fb1c 	bl	80078f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80042c4:	7afb      	ldrb	r3, [r7, #11]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	460b      	mov	r3, r1
 80042d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	da0e      	bge.n	8004300 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	705a      	strb	r2, [r3, #1]
 80042fe:	e00e      	b.n	800431e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	f003 0207 	and.w	r2, r3, #7
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_PCD_EP_Close+0x6a>
 8004334:	2302      	movs	r3, #2
 8004336:	e00e      	b.n	8004356 <HAL_PCD_EP_Close+0x88>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68f9      	ldr	r1, [r7, #12]
 8004346:	4618      	mov	r0, r3
 8004348:	f003 fe3e 	bl	8007fc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b086      	sub	sp, #24
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	460b      	mov	r3, r1
 800436c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800436e:	7afb      	ldrb	r3, [r7, #11]
 8004370:	f003 0207 	and.w	r2, r3, #7
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2200      	movs	r2, #0
 800439c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800439e:	7afb      	ldrb	r3, [r7, #11]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043aa:	7afb      	ldrb	r3, [r7, #11]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6979      	ldr	r1, [r7, #20]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f003 fff0 	bl	80083a0 <USB_EPStartXfer>
 80043c0:	e005      	b.n	80043ce <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6979      	ldr	r1, [r7, #20]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f003 ffe9 	bl	80083a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	f003 0207 	and.w	r2, r3, #7
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	440b      	add	r3, r1
 80043f6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr

08004406 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b086      	sub	sp, #24
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
 8004412:	460b      	mov	r3, r1
 8004414:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004416:	7afb      	ldrb	r3, [r7, #11]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2200      	movs	r2, #0
 800444a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2201      	movs	r2, #1
 8004450:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004452:	7afb      	ldrb	r3, [r7, #11]
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	b2da      	uxtb	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800445e:	7afb      	ldrb	r3, [r7, #11]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	2b00      	cmp	r3, #0
 8004466:	d106      	bne.n	8004476 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6979      	ldr	r1, [r7, #20]
 800446e:	4618      	mov	r0, r3
 8004470:	f003 ff96 	bl	80083a0 <USB_EPStartXfer>
 8004474:	e005      	b.n	8004482 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6979      	ldr	r1, [r7, #20]
 800447c:	4618      	mov	r0, r3
 800447e:	f003 ff8f 	bl	80083a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	f003 0207 	and.w	r2, r3, #7
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d901      	bls.n	80044aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e04c      	b.n	8004544 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	da0e      	bge.n	80044d0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4413      	add	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	705a      	strb	r2, [r3, #1]
 80044ce:	e00c      	b.n	80044ea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	4413      	add	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_PCD_EP_SetStall+0x7e>
 8004506:	2302      	movs	r3, #2
 8004508:	e01c      	b.n	8004544 <HAL_PCD_EP_SetStall+0xb8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68f9      	ldr	r1, [r7, #12]
 8004518:	4618      	mov	r0, r3
 800451a:	f005 fa38 	bl	800998e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	2b00      	cmp	r3, #0
 8004526:	d108      	bne.n	800453a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004532:	4619      	mov	r1, r3
 8004534:	4610      	mov	r0, r2
 8004536:	f005 fb5d 	bl	8009bf4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	f003 020f 	and.w	r2, r3, #15
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	429a      	cmp	r2, r3
 8004564:	d901      	bls.n	800456a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e040      	b.n	80045ec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800456a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800456e:	2b00      	cmp	r3, #0
 8004570:	da0e      	bge.n	8004590 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	705a      	strb	r2, [r3, #1]
 800458e:	e00e      	b.n	80045ae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	f003 0207 	and.w	r2, r3, #7
 8004596:	4613      	mov	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	4413      	add	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_PCD_EP_ClrStall+0x82>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e00e      	b.n	80045ec <HAL_PCD_EP_ClrStall+0xa0>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68f9      	ldr	r1, [r7, #12]
 80045dc:	4618      	mov	r0, r3
 80045de:	f005 fa26 	bl	8009a2e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08e      	sub	sp, #56	; 0x38
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80045fc:	e2ec      	b.n	8004bd8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004606:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004608:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004614:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 8161 	bne.w	80048e0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800461e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	2b00      	cmp	r3, #0
 8004626:	d152      	bne.n	80046ce <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004638:	81fb      	strh	r3, [r7, #14]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	89fb      	ldrh	r3, [r7, #14]
 8004640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004648:	b29b      	uxth	r3, r3
 800464a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3328      	adds	r3, #40	; 0x28
 8004650:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465a:	b29b      	uxth	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	3302      	adds	r3, #2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	441a      	add	r2, r3
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800468c:	2100      	movs	r1, #0
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f007 f905 	bl	800b89e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 829b 	beq.w	8004bd8 <PCD_EP_ISR_Handler+0x5e4>
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f040 8296 	bne.w	8004bd8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	b292      	uxth	r2, r2
 80046c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80046cc:	e284      	b.n	8004bd8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80046de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d034      	beq.n	8004752 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4413      	add	r3, r2
 80046fc:	3306      	adds	r3, #6
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004726:	b29b      	uxth	r3, r3
 8004728:	f005 fab4 	bl	8009c94 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29a      	uxth	r2, r3
 8004734:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004738:	4013      	ands	r3, r2
 800473a:	823b      	strh	r3, [r7, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	8a3a      	ldrh	r2, [r7, #16]
 8004742:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004746:	b292      	uxth	r2, r2
 8004748:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f007 f87a 	bl	800b844 <HAL_PCD_SetupStageCallback>
 8004750:	e242      	b.n	8004bd8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004752:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004756:	2b00      	cmp	r3, #0
 8004758:	f280 823e 	bge.w	8004bd8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29a      	uxth	r2, r3
 8004764:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004768:	4013      	ands	r3, r2
 800476a:	83bb      	strh	r3, [r7, #28]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	8bba      	ldrh	r2, [r7, #28]
 8004772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004776:	b292      	uxth	r2, r2
 8004778:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004782:	b29b      	uxth	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	3306      	adds	r3, #6
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d019      	beq.n	80047e2 <PCD_EP_ISR_Handler+0x1ee>
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d015      	beq.n	80047e2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	6959      	ldr	r1, [r3, #20]
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f005 fa64 	bl	8009c94 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	695a      	ldr	r2, [r3, #20]
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	441a      	add	r2, r3
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80047da:	2100      	movs	r1, #0
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f007 f843 	bl	800b868 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f040 81f2 	bne.w	8004bd8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004802:	b29b      	uxth	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	4413      	add	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d112      	bne.n	8004842 <PCD_EP_ISR_Handler+0x24e>
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	b29b      	uxth	r3, r3
 8004822:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004826:	b29a      	uxth	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800483a:	b29a      	uxth	r2, r3
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	e02f      	b.n	80048a2 <PCD_EP_ISR_Handler+0x2ae>
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b3e      	cmp	r3, #62	; 0x3e
 8004848:	d813      	bhi.n	8004872 <PCD_EP_ISR_Handler+0x27e>
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	633b      	str	r3, [r7, #48]	; 0x30
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <PCD_EP_ISR_Handler+0x270>
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	3301      	adds	r3, #1
 8004862:	633b      	str	r3, [r7, #48]	; 0x30
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	b29b      	uxth	r3, r3
 8004868:	029b      	lsls	r3, r3, #10
 800486a:	b29a      	uxth	r2, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	801a      	strh	r2, [r3, #0]
 8004870:	e017      	b.n	80048a2 <PCD_EP_ISR_Handler+0x2ae>
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	633b      	str	r3, [r7, #48]	; 0x30
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <PCD_EP_ISR_Handler+0x298>
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	3b01      	subs	r3, #1
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	b29b      	uxth	r3, r3
 8004890:	029b      	lsls	r3, r3, #10
 8004892:	b29b      	uxth	r3, r3
 8004894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489c:	b29a      	uxth	r2, r3
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b2:	827b      	strh	r3, [r7, #18]
 80048b4:	8a7b      	ldrh	r3, [r7, #18]
 80048b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048ba:	827b      	strh	r3, [r7, #18]
 80048bc:	8a7b      	ldrh	r3, [r7, #18]
 80048be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048c2:	827b      	strh	r3, [r7, #18]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	8a7b      	ldrh	r3, [r7, #18]
 80048ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048da:	b29b      	uxth	r3, r3
 80048dc:	8013      	strh	r3, [r2, #0]
 80048de:	e17b      	b.n	8004bd8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f280 80ea 	bge.w	8004ad0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	b29a      	uxth	r2, r3
 800490e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004912:	4013      	ands	r3, r2
 8004914:	853b      	strh	r3, [r7, #40]	; 0x28
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004926:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800492a:	b292      	uxth	r2, r2
 800492c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800492e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	7b1b      	ldrb	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d122      	bne.n	8004992 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004954:	b29b      	uxth	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4413      	add	r3, r2
 8004960:	3306      	adds	r3, #6
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004974:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004976:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8087 	beq.w	8004a8c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	6959      	ldr	r1, [r3, #20]
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	88da      	ldrh	r2, [r3, #6]
 800498a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800498c:	f005 f982 	bl	8009c94 <USB_ReadPMA>
 8004990:	e07c      	b.n	8004a8c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	78db      	ldrb	r3, [r3, #3]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d108      	bne.n	80049ac <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800499a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800499c:	461a      	mov	r2, r3
 800499e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f927 	bl	8004bf4 <HAL_PCD_EP_DB_Receive>
 80049a6:	4603      	mov	r3, r0
 80049a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80049aa:	e06f      	b.n	8004a8c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	461a      	mov	r2, r3
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	441a      	add	r2, r3
 80049d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d021      	beq.n	8004a4a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6812      	ldr	r2, [r2, #0]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a2e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004a30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d02a      	beq.n	8004a8c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	6959      	ldr	r1, [r3, #20]
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	891a      	ldrh	r2, [r3, #8]
 8004a42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a44:	f005 f926 	bl	8009c94 <USB_ReadPMA>
 8004a48:	e020      	b.n	8004a8c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3306      	adds	r3, #6
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a72:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004a74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	6959      	ldr	r1, [r3, #20]
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	895a      	ldrh	r2, [r3, #10]
 8004a86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a88:	f005 f904 	bl	8009c94 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a92:	441a      	add	r2, r3
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a9e:	441a      	add	r2, r3
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d004      	beq.n	8004ab6 <PCD_EP_ISR_Handler+0x4c2>
 8004aac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d206      	bcs.n	8004ac4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	4619      	mov	r1, r3
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f006 fed3 	bl	800b868 <HAL_PCD_DataOutStageCallback>
 8004ac2:	e005      	b.n	8004ad0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aca:	4618      	mov	r0, r3
 8004acc:	f003 fc68 	bl	80083a0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004ad0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d07e      	beq.n	8004bd8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004ada:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	4413      	add	r3, r2
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b08:	843b      	strh	r3, [r7, #32]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	441a      	add	r2, r3
 8004b18:	8c3b      	ldrh	r3, [r7, #32]
 8004b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	78db      	ldrb	r3, [r3, #3]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d00c      	beq.n	8004b48 <PCD_EP_ISR_Handler+0x554>
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	78db      	ldrb	r3, [r3, #3]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d146      	bne.n	8004bcc <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004b3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d141      	bne.n	8004bcc <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b70:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	8bfb      	ldrh	r3, [r7, #30]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d906      	bls.n	8004b8a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	699a      	ldr	r2, [r3, #24]
 8004b80:	8bfb      	ldrh	r3, [r7, #30]
 8004b82:	1ad2      	subs	r2, r2, r3
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	619a      	str	r2, [r3, #24]
 8004b88:	e002      	b.n	8004b90 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d106      	bne.n	8004ba6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f006 fe7d 	bl	800b89e <HAL_PCD_DataInStageCallback>
 8004ba4:	e018      	b.n	8004bd8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	8bfb      	ldrh	r3, [r7, #30]
 8004bac:	441a      	add	r2, r3
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	8bfb      	ldrh	r3, [r7, #30]
 8004bb8:	441a      	add	r2, r3
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f003 fbeb 	bl	80083a0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004bca:	e005      	b.n	8004bd8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004bcc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f91b 	bl	8004e0e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	b21b      	sxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f6ff ad0a 	blt.w	80045fe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3738      	adds	r7, #56	; 0x38
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d07e      	beq.n	8004d0a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4413      	add	r3, r2
 8004c20:	3302      	adds	r3, #2
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c34:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	8b7b      	ldrh	r3, [r7, #26]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d306      	bcc.n	8004c4e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	699a      	ldr	r2, [r3, #24]
 8004c44:	8b7b      	ldrh	r3, [r7, #26]
 8004c46:	1ad2      	subs	r2, r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	619a      	str	r2, [r3, #24]
 8004c4c:	e002      	b.n	8004c54 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2200      	movs	r2, #0
 8004c52:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d123      	bne.n	8004ca4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c76:	833b      	strh	r3, [r7, #24]
 8004c78:	8b3b      	ldrh	r3, [r7, #24]
 8004c7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c7e:	833b      	strh	r3, [r7, #24]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	8b3b      	ldrh	r3, [r7, #24]
 8004c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ca4:	88fb      	ldrh	r3, [r7, #6]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01f      	beq.n	8004cee <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc8:	82fb      	strh	r3, [r7, #22]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	441a      	add	r2, r3
 8004cd8:	8afb      	ldrh	r3, [r7, #22]
 8004cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004cee:	8b7b      	ldrh	r3, [r7, #26]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8087 	beq.w	8004e04 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	6959      	ldr	r1, [r3, #20]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	891a      	ldrh	r2, [r3, #8]
 8004d02:	8b7b      	ldrh	r3, [r7, #26]
 8004d04:	f004 ffc6 	bl	8009c94 <USB_ReadPMA>
 8004d08:	e07c      	b.n	8004e04 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	3306      	adds	r3, #6
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d32:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	699a      	ldr	r2, [r3, #24]
 8004d38:	8b7b      	ldrh	r3, [r7, #26]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d306      	bcc.n	8004d4c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	8b7b      	ldrh	r3, [r7, #26]
 8004d44:	1ad2      	subs	r2, r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	619a      	str	r2, [r3, #24]
 8004d4a:	e002      	b.n	8004d52 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d123      	bne.n	8004da2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d74:	83fb      	strh	r3, [r7, #30]
 8004d76:	8bfb      	ldrh	r3, [r7, #30]
 8004d78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d7c:	83fb      	strh	r3, [r7, #30]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	441a      	add	r2, r3
 8004d8c:	8bfb      	ldrh	r3, [r7, #30]
 8004d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d11f      	bne.n	8004dec <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc6:	83bb      	strh	r3, [r7, #28]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	441a      	add	r2, r3
 8004dd6:	8bbb      	ldrh	r3, [r7, #28]
 8004dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004dec:	8b7b      	ldrh	r3, [r7, #26]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d008      	beq.n	8004e04 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6959      	ldr	r1, [r3, #20]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	895a      	ldrh	r2, [r3, #10]
 8004dfe:	8b7b      	ldrh	r3, [r7, #26]
 8004e00:	f004 ff48 	bl	8009c94 <USB_ReadPMA>
    }
  }

  return count;
 8004e04:	8b7b      	ldrh	r3, [r7, #26]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b0a2      	sub	sp, #136	; 0x88
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 81c7 	beq.w	80051b6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	461a      	mov	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3302      	adds	r3, #2
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d907      	bls.n	8004e70 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e68:	1ad2      	subs	r2, r2, r3
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	619a      	str	r2, [r3, #24]
 8004e6e:	e002      	b.n	8004e76 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2200      	movs	r2, #0
 8004e74:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 80b9 	bne.w	8004ff2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d126      	bne.n	8004ed6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	4413      	add	r3, r2
 8004e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	011a      	lsls	r2, r3, #4
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	801a      	strh	r2, [r3, #0]
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	e01a      	b.n	8004f0c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d116      	bne.n	8004f0c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	4413      	add	r3, r2
 8004ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	011a      	lsls	r2, r3, #4
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	4413      	add	r3, r2
 8004f00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	2200      	movs	r2, #0
 8004f0a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	623b      	str	r3, [r7, #32]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	785b      	ldrb	r3, [r3, #1]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d126      	bne.n	8004f68 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	4413      	add	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	011a      	lsls	r2, r3, #4
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	801a      	strh	r2, [r3, #0]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	801a      	strh	r2, [r3, #0]
 8004f66:	e017      	b.n	8004f98 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d113      	bne.n	8004f98 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	4413      	add	r3, r2
 8004f80:	623b      	str	r3, [r7, #32]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	011a      	lsls	r2, r3, #4
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	2200      	movs	r2, #0
 8004f96:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f006 fc7d 	bl	800b89e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 82d4 	beq.w	8005558 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	827b      	strh	r3, [r7, #18]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	8a7b      	ldrh	r3, [r7, #18]
 8004fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	8013      	strh	r3, [r2, #0]
 8004ff0:	e2b2      	b.n	8005558 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d021      	beq.n	8005040 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800502c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503c:	b29b      	uxth	r3, r3
 800503e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005046:	2b01      	cmp	r3, #1
 8005048:	f040 8286 	bne.w	8005558 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	695a      	ldr	r2, [r3, #20]
 8005050:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005054:	441a      	add	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005062:	441a      	add	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	6a1a      	ldr	r2, [r3, #32]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	429a      	cmp	r2, r3
 8005072:	d309      	bcc.n	8005088 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6a1a      	ldr	r2, [r3, #32]
 800507e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005080:	1ad2      	subs	r2, r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	621a      	str	r2, [r3, #32]
 8005086:	e015      	b.n	80050b4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d107      	bne.n	80050a0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005090:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005094:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800509e:	e009      	b.n	80050b4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2200      	movs	r2, #0
 80050b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d155      	bne.n	8005168 <HAL_PCD_EP_DB_Transmit+0x35a>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	4413      	add	r3, r2
 80050d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	011a      	lsls	r2, r3, #4
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	4413      	add	r3, r2
 80050de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050e2:	637b      	str	r3, [r7, #52]	; 0x34
 80050e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d112      	bne.n	8005110 <HAL_PCD_EP_DB_Transmit+0x302>
 80050ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f8:	801a      	strh	r2, [r3, #0]
 80050fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005108:	b29a      	uxth	r2, r3
 800510a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	e047      	b.n	80051a0 <HAL_PCD_EP_DB_Transmit+0x392>
 8005110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005112:	2b3e      	cmp	r3, #62	; 0x3e
 8005114:	d811      	bhi.n	800513a <HAL_PCD_EP_DB_Transmit+0x32c>
 8005116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005118:	085b      	lsrs	r3, r3, #1
 800511a:	64bb      	str	r3, [r7, #72]	; 0x48
 800511c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <HAL_PCD_EP_DB_Transmit+0x31e>
 8005126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005128:	3301      	adds	r3, #1
 800512a:	64bb      	str	r3, [r7, #72]	; 0x48
 800512c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800512e:	b29b      	uxth	r3, r3
 8005130:	029b      	lsls	r3, r3, #10
 8005132:	b29a      	uxth	r2, r3
 8005134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005136:	801a      	strh	r2, [r3, #0]
 8005138:	e032      	b.n	80051a0 <HAL_PCD_EP_DB_Transmit+0x392>
 800513a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <HAL_PCD_EP_DB_Transmit+0x342>
 800514a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514c:	3b01      	subs	r3, #1
 800514e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005152:	b29b      	uxth	r3, r3
 8005154:	029b      	lsls	r3, r3, #10
 8005156:	b29b      	uxth	r3, r3
 8005158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005160:	b29a      	uxth	r2, r3
 8005162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	e01b      	b.n	80051a0 <HAL_PCD_EP_DB_Transmit+0x392>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	785b      	ldrb	r3, [r3, #1]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d117      	bne.n	80051a0 <HAL_PCD_EP_DB_Transmit+0x392>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	643b      	str	r3, [r7, #64]	; 0x40
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517e:	b29b      	uxth	r3, r3
 8005180:	461a      	mov	r2, r3
 8005182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005184:	4413      	add	r3, r2
 8005186:	643b      	str	r3, [r7, #64]	; 0x40
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	011a      	lsls	r2, r3, #4
 800518e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005190:	4413      	add	r3, r2
 8005192:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519a:	b29a      	uxth	r2, r3
 800519c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800519e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6959      	ldr	r1, [r3, #20]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	891a      	ldrh	r2, [r3, #8]
 80051ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	f004 fd2b 	bl	8009c0a <USB_WritePMA>
 80051b4:	e1d0      	b.n	8005558 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051be:	b29b      	uxth	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4413      	add	r3, r2
 80051ca:	3306      	adds	r3, #6
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	699a      	ldr	r2, [r3, #24]
 80051e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d307      	bcc.n	80051fe <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051f6:	1ad2      	subs	r2, r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	619a      	str	r2, [r3, #24]
 80051fc:	e002      	b.n	8005204 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2200      	movs	r2, #0
 8005202:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f040 80c4 	bne.w	8005396 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d126      	bne.n	8005264 <HAL_PCD_EP_DB_Transmit+0x456>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005224:	b29b      	uxth	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	4413      	add	r3, r2
 800522c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	011a      	lsls	r2, r3, #4
 8005234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005236:	4413      	add	r3, r2
 8005238:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800523c:	66bb      	str	r3, [r7, #104]	; 0x68
 800523e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005248:	b29a      	uxth	r2, r3
 800524a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525c:	b29a      	uxth	r2, r3
 800525e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	e01a      	b.n	800529a <HAL_PCD_EP_DB_Transmit+0x48c>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	785b      	ldrb	r3, [r3, #1]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d116      	bne.n	800529a <HAL_PCD_EP_DB_Transmit+0x48c>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	677b      	str	r3, [r7, #116]	; 0x74
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800527a:	b29b      	uxth	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005280:	4413      	add	r3, r2
 8005282:	677b      	str	r3, [r7, #116]	; 0x74
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	011a      	lsls	r2, r3, #4
 800528a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800528c:	4413      	add	r3, r2
 800528e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005292:	673b      	str	r3, [r7, #112]	; 0x70
 8005294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005296:	2200      	movs	r2, #0
 8005298:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	67bb      	str	r3, [r7, #120]	; 0x78
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d12f      	bne.n	8005308 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052c0:	4413      	add	r3, r2
 80052c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	011a      	lsls	r2, r3, #4
 80052cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052d0:	4413      	add	r3, r2
 80052d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fe:	b29a      	uxth	r2, r3
 8005300:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	e017      	b.n	8005338 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	785b      	ldrb	r3, [r3, #1]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d113      	bne.n	8005338 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005318:	b29b      	uxth	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800531e:	4413      	add	r3, r2
 8005320:	67bb      	str	r3, [r7, #120]	; 0x78
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	011a      	lsls	r2, r3, #4
 8005328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800532a:	4413      	add	r3, r2
 800532c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005330:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005332:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005334:	2200      	movs	r2, #0
 8005336:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	4619      	mov	r1, r3
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f006 faad 	bl	800b89e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800534a:	2b00      	cmp	r3, #0
 800534c:	f040 8104 	bne.w	8005558 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	441a      	add	r2, r3
 800537c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800538c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005390:	b29b      	uxth	r3, r3
 8005392:	8013      	strh	r3, [r2, #0]
 8005394:	e0e0      	b.n	8005558 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d121      	bne.n	80053e4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	441a      	add	r2, r3
 80053cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80053d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	f040 80b4 	bne.w	8005558 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053f8:	441a      	add	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	69da      	ldr	r2, [r3, #28]
 8005402:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005406:	441a      	add	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	429a      	cmp	r2, r3
 8005416:	d309      	bcc.n	800542c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	6a1a      	ldr	r2, [r3, #32]
 8005422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005424:	1ad2      	subs	r2, r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	621a      	str	r2, [r3, #32]
 800542a:	e015      	b.n	8005458 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d107      	bne.n	8005444 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005434:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005438:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005442:	e009      	b.n	8005458 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2200      	movs	r2, #0
 800544e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	667b      	str	r3, [r7, #100]	; 0x64
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d155      	bne.n	8005512 <HAL_PCD_EP_DB_Transmit+0x704>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005474:	b29b      	uxth	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800547a:	4413      	add	r3, r2
 800547c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	011a      	lsls	r2, r3, #4
 8005484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005486:	4413      	add	r3, r2
 8005488:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800548c:	65bb      	str	r3, [r7, #88]	; 0x58
 800548e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005490:	2b00      	cmp	r3, #0
 8005492:	d112      	bne.n	80054ba <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800549e:	b29a      	uxth	r2, r3
 80054a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054a2:	801a      	strh	r2, [r3, #0]
 80054a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054b6:	801a      	strh	r2, [r3, #0]
 80054b8:	e044      	b.n	8005544 <HAL_PCD_EP_DB_Transmit+0x736>
 80054ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054bc:	2b3e      	cmp	r3, #62	; 0x3e
 80054be:	d811      	bhi.n	80054e4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80054c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c2:	085b      	lsrs	r3, r3, #1
 80054c4:	657b      	str	r3, [r7, #84]	; 0x54
 80054c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80054d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d2:	3301      	adds	r3, #1
 80054d4:	657b      	str	r3, [r7, #84]	; 0x54
 80054d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d8:	b29b      	uxth	r3, r3
 80054da:	029b      	lsls	r3, r3, #10
 80054dc:	b29a      	uxth	r2, r3
 80054de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054e0:	801a      	strh	r2, [r3, #0]
 80054e2:	e02f      	b.n	8005544 <HAL_PCD_EP_DB_Transmit+0x736>
 80054e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	657b      	str	r3, [r7, #84]	; 0x54
 80054ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ec:	f003 031f 	and.w	r3, r3, #31
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d102      	bne.n	80054fa <HAL_PCD_EP_DB_Transmit+0x6ec>
 80054f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054f6:	3b01      	subs	r3, #1
 80054f8:	657b      	str	r3, [r7, #84]	; 0x54
 80054fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	029b      	lsls	r3, r3, #10
 8005500:	b29b      	uxth	r3, r3
 8005502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550a:	b29a      	uxth	r2, r3
 800550c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800550e:	801a      	strh	r2, [r3, #0]
 8005510:	e018      	b.n	8005544 <HAL_PCD_EP_DB_Transmit+0x736>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	785b      	ldrb	r3, [r3, #1]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d114      	bne.n	8005544 <HAL_PCD_EP_DB_Transmit+0x736>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005522:	b29b      	uxth	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005528:	4413      	add	r3, r2
 800552a:	667b      	str	r3, [r7, #100]	; 0x64
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	011a      	lsls	r2, r3, #4
 8005532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005534:	4413      	add	r3, r2
 8005536:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800553a:	663b      	str	r3, [r7, #96]	; 0x60
 800553c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553e:	b29a      	uxth	r2, r3
 8005540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005542:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	6959      	ldr	r1, [r3, #20]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	895a      	ldrh	r2, [r3, #10]
 8005550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005552:	b29b      	uxth	r3, r3
 8005554:	f004 fb59 	bl	8009c0a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005572:	823b      	strh	r3, [r7, #16]
 8005574:	8a3b      	ldrh	r3, [r7, #16]
 8005576:	f083 0310 	eor.w	r3, r3, #16
 800557a:	823b      	strh	r3, [r7, #16]
 800557c:	8a3b      	ldrh	r3, [r7, #16]
 800557e:	f083 0320 	eor.w	r3, r3, #32
 8005582:	823b      	strh	r3, [r7, #16]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	441a      	add	r2, r3
 8005592:	8a3b      	ldrh	r3, [r7, #16]
 8005594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800559c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3788      	adds	r7, #136	; 0x88
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b087      	sub	sp, #28
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	607b      	str	r3, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	817b      	strh	r3, [r7, #10]
 80055c0:	4613      	mov	r3, r2
 80055c2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80055c4:	897b      	ldrh	r3, [r7, #10]
 80055c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00b      	beq.n	80055e8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055d0:	897b      	ldrh	r3, [r7, #10]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e009      	b.n	80055fc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055e8:	897a      	ldrh	r2, [r7, #10]
 80055ea:	4613      	mov	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80055fc:	893b      	ldrh	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d107      	bne.n	8005612 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2200      	movs	r2, #0
 8005606:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	b29a      	uxth	r2, r3
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	80da      	strh	r2, [r3, #6]
 8005610:	e00b      	b.n	800562a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2201      	movs	r2, #1
 8005616:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	b29a      	uxth	r2, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	b29a      	uxth	r2, r3
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr
	...

08005638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e26c      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 8087 	beq.w	8005766 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005658:	4b92      	ldr	r3, [pc, #584]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f003 030c 	and.w	r3, r3, #12
 8005660:	2b04      	cmp	r3, #4
 8005662:	d00c      	beq.n	800567e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005664:	4b8f      	ldr	r3, [pc, #572]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f003 030c 	and.w	r3, r3, #12
 800566c:	2b08      	cmp	r3, #8
 800566e:	d112      	bne.n	8005696 <HAL_RCC_OscConfig+0x5e>
 8005670:	4b8c      	ldr	r3, [pc, #560]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567c:	d10b      	bne.n	8005696 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800567e:	4b89      	ldr	r3, [pc, #548]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d06c      	beq.n	8005764 <HAL_RCC_OscConfig+0x12c>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d168      	bne.n	8005764 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e246      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800569e:	d106      	bne.n	80056ae <HAL_RCC_OscConfig+0x76>
 80056a0:	4b80      	ldr	r3, [pc, #512]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a7f      	ldr	r2, [pc, #508]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80056a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	e02e      	b.n	800570c <HAL_RCC_OscConfig+0xd4>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCC_OscConfig+0x98>
 80056b6:	4b7b      	ldr	r3, [pc, #492]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a7a      	ldr	r2, [pc, #488]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80056bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	4b78      	ldr	r3, [pc, #480]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a77      	ldr	r2, [pc, #476]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80056c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	e01d      	b.n	800570c <HAL_RCC_OscConfig+0xd4>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056d8:	d10c      	bne.n	80056f4 <HAL_RCC_OscConfig+0xbc>
 80056da:	4b72      	ldr	r3, [pc, #456]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a71      	ldr	r2, [pc, #452]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80056e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	4b6f      	ldr	r3, [pc, #444]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a6e      	ldr	r2, [pc, #440]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80056ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	e00b      	b.n	800570c <HAL_RCC_OscConfig+0xd4>
 80056f4:	4b6b      	ldr	r3, [pc, #428]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a6a      	ldr	r2, [pc, #424]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80056fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	4b68      	ldr	r3, [pc, #416]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a67      	ldr	r2, [pc, #412]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 8005706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800570a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d013      	beq.n	800573c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005714:	f7fd ffc2 	bl	800369c <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800571c:	f7fd ffbe 	bl	800369c <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b64      	cmp	r3, #100	; 0x64
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e1fa      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572e:	4b5d      	ldr	r3, [pc, #372]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0f0      	beq.n	800571c <HAL_RCC_OscConfig+0xe4>
 800573a:	e014      	b.n	8005766 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573c:	f7fd ffae 	bl	800369c <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005744:	f7fd ffaa 	bl	800369c <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	; 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e1e6      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005756:	4b53      	ldr	r3, [pc, #332]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1f0      	bne.n	8005744 <HAL_RCC_OscConfig+0x10c>
 8005762:	e000      	b.n	8005766 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d063      	beq.n	800583a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005772:	4b4c      	ldr	r3, [pc, #304]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f003 030c 	and.w	r3, r3, #12
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800577e:	4b49      	ldr	r3, [pc, #292]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f003 030c 	and.w	r3, r3, #12
 8005786:	2b08      	cmp	r3, #8
 8005788:	d11c      	bne.n	80057c4 <HAL_RCC_OscConfig+0x18c>
 800578a:	4b46      	ldr	r3, [pc, #280]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d116      	bne.n	80057c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005796:	4b43      	ldr	r3, [pc, #268]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_RCC_OscConfig+0x176>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d001      	beq.n	80057ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e1ba      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ae:	4b3d      	ldr	r3, [pc, #244]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	4939      	ldr	r1, [pc, #228]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c2:	e03a      	b.n	800583a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d020      	beq.n	800580e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057cc:	4b36      	ldr	r3, [pc, #216]	; (80058a8 <HAL_RCC_OscConfig+0x270>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d2:	f7fd ff63 	bl	800369c <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057da:	f7fd ff5f 	bl	800369c <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e19b      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ec:	4b2d      	ldr	r3, [pc, #180]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0f0      	beq.n	80057da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f8:	4b2a      	ldr	r3, [pc, #168]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	4927      	ldr	r1, [pc, #156]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 8005808:	4313      	orrs	r3, r2
 800580a:	600b      	str	r3, [r1, #0]
 800580c:	e015      	b.n	800583a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800580e:	4b26      	ldr	r3, [pc, #152]	; (80058a8 <HAL_RCC_OscConfig+0x270>)
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005814:	f7fd ff42 	bl	800369c <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800581c:	f7fd ff3e 	bl	800369c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e17a      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800582e:	4b1d      	ldr	r3, [pc, #116]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f0      	bne.n	800581c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d03a      	beq.n	80058bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d019      	beq.n	8005882 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800584e:	4b17      	ldr	r3, [pc, #92]	; (80058ac <HAL_RCC_OscConfig+0x274>)
 8005850:	2201      	movs	r2, #1
 8005852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005854:	f7fd ff22 	bl	800369c <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800585c:	f7fd ff1e 	bl	800369c <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e15a      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800586e:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <HAL_RCC_OscConfig+0x26c>)
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f0      	beq.n	800585c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800587a:	2001      	movs	r0, #1
 800587c:	f000 faa6 	bl	8005dcc <RCC_Delay>
 8005880:	e01c      	b.n	80058bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005882:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <HAL_RCC_OscConfig+0x274>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005888:	f7fd ff08 	bl	800369c <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800588e:	e00f      	b.n	80058b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005890:	f7fd ff04 	bl	800369c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d908      	bls.n	80058b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e140      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
 80058a2:	bf00      	nop
 80058a4:	40021000 	.word	0x40021000
 80058a8:	42420000 	.word	0x42420000
 80058ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b0:	4b9e      	ldr	r3, [pc, #632]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e9      	bne.n	8005890 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 80a6 	beq.w	8005a16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ca:	2300      	movs	r3, #0
 80058cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ce:	4b97      	ldr	r3, [pc, #604]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10d      	bne.n	80058f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058da:	4b94      	ldr	r3, [pc, #592]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	4a93      	ldr	r2, [pc, #588]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 80058e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e4:	61d3      	str	r3, [r2, #28]
 80058e6:	4b91      	ldr	r3, [pc, #580]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ee:	60bb      	str	r3, [r7, #8]
 80058f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f2:	2301      	movs	r3, #1
 80058f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f6:	4b8e      	ldr	r3, [pc, #568]	; (8005b30 <HAL_RCC_OscConfig+0x4f8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d118      	bne.n	8005934 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005902:	4b8b      	ldr	r3, [pc, #556]	; (8005b30 <HAL_RCC_OscConfig+0x4f8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a8a      	ldr	r2, [pc, #552]	; (8005b30 <HAL_RCC_OscConfig+0x4f8>)
 8005908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800590e:	f7fd fec5 	bl	800369c <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005916:	f7fd fec1 	bl	800369c <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b64      	cmp	r3, #100	; 0x64
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e0fd      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005928:	4b81      	ldr	r3, [pc, #516]	; (8005b30 <HAL_RCC_OscConfig+0x4f8>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f0      	beq.n	8005916 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d106      	bne.n	800594a <HAL_RCC_OscConfig+0x312>
 800593c:	4b7b      	ldr	r3, [pc, #492]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	4a7a      	ldr	r2, [pc, #488]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005942:	f043 0301 	orr.w	r3, r3, #1
 8005946:	6213      	str	r3, [r2, #32]
 8005948:	e02d      	b.n	80059a6 <HAL_RCC_OscConfig+0x36e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10c      	bne.n	800596c <HAL_RCC_OscConfig+0x334>
 8005952:	4b76      	ldr	r3, [pc, #472]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	4a75      	ldr	r2, [pc, #468]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005958:	f023 0301 	bic.w	r3, r3, #1
 800595c:	6213      	str	r3, [r2, #32]
 800595e:	4b73      	ldr	r3, [pc, #460]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	4a72      	ldr	r2, [pc, #456]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005964:	f023 0304 	bic.w	r3, r3, #4
 8005968:	6213      	str	r3, [r2, #32]
 800596a:	e01c      	b.n	80059a6 <HAL_RCC_OscConfig+0x36e>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	2b05      	cmp	r3, #5
 8005972:	d10c      	bne.n	800598e <HAL_RCC_OscConfig+0x356>
 8005974:	4b6d      	ldr	r3, [pc, #436]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	4a6c      	ldr	r2, [pc, #432]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 800597a:	f043 0304 	orr.w	r3, r3, #4
 800597e:	6213      	str	r3, [r2, #32]
 8005980:	4b6a      	ldr	r3, [pc, #424]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	4a69      	ldr	r2, [pc, #420]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	6213      	str	r3, [r2, #32]
 800598c:	e00b      	b.n	80059a6 <HAL_RCC_OscConfig+0x36e>
 800598e:	4b67      	ldr	r3, [pc, #412]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	4a66      	ldr	r2, [pc, #408]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	6213      	str	r3, [r2, #32]
 800599a:	4b64      	ldr	r3, [pc, #400]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	4a63      	ldr	r2, [pc, #396]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 80059a0:	f023 0304 	bic.w	r3, r3, #4
 80059a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d015      	beq.n	80059da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ae:	f7fd fe75 	bl	800369c <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b4:	e00a      	b.n	80059cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b6:	f7fd fe71 	bl	800369c <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e0ab      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059cc:	4b57      	ldr	r3, [pc, #348]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0ee      	beq.n	80059b6 <HAL_RCC_OscConfig+0x37e>
 80059d8:	e014      	b.n	8005a04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059da:	f7fd fe5f 	bl	800369c <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059e0:	e00a      	b.n	80059f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e2:	f7fd fe5b 	bl	800369c <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e095      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059f8:	4b4c      	ldr	r3, [pc, #304]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1ee      	bne.n	80059e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d105      	bne.n	8005a16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a0a:	4b48      	ldr	r3, [pc, #288]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	4a47      	ldr	r2, [pc, #284]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 8081 	beq.w	8005b22 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a20:	4b42      	ldr	r3, [pc, #264]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 030c 	and.w	r3, r3, #12
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d061      	beq.n	8005af0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d146      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a34:	4b3f      	ldr	r3, [pc, #252]	; (8005b34 <HAL_RCC_OscConfig+0x4fc>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3a:	f7fd fe2f 	bl	800369c <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a42:	f7fd fe2b 	bl	800369c <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e067      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a54:	4b35      	ldr	r3, [pc, #212]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1f0      	bne.n	8005a42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a68:	d108      	bne.n	8005a7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a6a:	4b30      	ldr	r3, [pc, #192]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	492d      	ldr	r1, [pc, #180]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a7c:	4b2b      	ldr	r3, [pc, #172]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a19      	ldr	r1, [r3, #32]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	4927      	ldr	r1, [pc, #156]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a94:	4b27      	ldr	r3, [pc, #156]	; (8005b34 <HAL_RCC_OscConfig+0x4fc>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9a:	f7fd fdff 	bl	800369c <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa2:	f7fd fdfb 	bl	800369c <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e037      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ab4:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0f0      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x46a>
 8005ac0:	e02f      	b.n	8005b22 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac2:	4b1c      	ldr	r3, [pc, #112]	; (8005b34 <HAL_RCC_OscConfig+0x4fc>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac8:	f7fd fde8 	bl	800369c <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fd fde4 	bl	800369c <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e020      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ae2:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x498>
 8005aee:	e018      	b.n	8005b22 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e013      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005afc:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <HAL_RCC_OscConfig+0x4f4>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d106      	bne.n	8005b1e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d001      	beq.n	8005b22 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	40007000 	.word	0x40007000
 8005b34:	42420060 	.word	0x42420060

08005b38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0d0      	b.n	8005cee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b4c:	4b6a      	ldr	r3, [pc, #424]	; (8005cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d910      	bls.n	8005b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5a:	4b67      	ldr	r3, [pc, #412]	; (8005cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f023 0207 	bic.w	r2, r3, #7
 8005b62:	4965      	ldr	r1, [pc, #404]	; (8005cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6a:	4b63      	ldr	r3, [pc, #396]	; (8005cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d001      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0b8      	b.n	8005cee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d020      	beq.n	8005bca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d005      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b94:	4b59      	ldr	r3, [pc, #356]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4a58      	ldr	r2, [pc, #352]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005b9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bac:	4b53      	ldr	r3, [pc, #332]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	4a52      	ldr	r2, [pc, #328]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005bb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005bb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb8:	4b50      	ldr	r3, [pc, #320]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	494d      	ldr	r1, [pc, #308]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d040      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d107      	bne.n	8005bee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bde:	4b47      	ldr	r3, [pc, #284]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d115      	bne.n	8005c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e07f      	b.n	8005cee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d107      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf6:	4b41      	ldr	r3, [pc, #260]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d109      	bne.n	8005c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e073      	b.n	8005cee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c06:	4b3d      	ldr	r3, [pc, #244]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e06b      	b.n	8005cee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c16:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f023 0203 	bic.w	r2, r3, #3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	4936      	ldr	r1, [pc, #216]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c28:	f7fd fd38 	bl	800369c <HAL_GetTick>
 8005c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c2e:	e00a      	b.n	8005c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c30:	f7fd fd34 	bl	800369c <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e053      	b.n	8005cee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c46:	4b2d      	ldr	r3, [pc, #180]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f003 020c 	and.w	r2, r3, #12
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d1eb      	bne.n	8005c30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c58:	4b27      	ldr	r3, [pc, #156]	; (8005cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d210      	bcs.n	8005c88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c66:	4b24      	ldr	r3, [pc, #144]	; (8005cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f023 0207 	bic.w	r2, r3, #7
 8005c6e:	4922      	ldr	r1, [pc, #136]	; (8005cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c76:	4b20      	ldr	r3, [pc, #128]	; (8005cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d001      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e032      	b.n	8005cee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d008      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c94:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	4916      	ldr	r1, [pc, #88]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cb2:	4b12      	ldr	r3, [pc, #72]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	490e      	ldr	r1, [pc, #56]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cc6:	f000 f821 	bl	8005d0c <HAL_RCC_GetSysClockFreq>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <HAL_RCC_ClockConfig+0x1c4>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	490a      	ldr	r1, [pc, #40]	; (8005d00 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd8:	5ccb      	ldrb	r3, [r1, r3]
 8005cda:	fa22 f303 	lsr.w	r3, r2, r3
 8005cde:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <HAL_RCC_ClockConfig+0x1cc>)
 8005ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005ce2:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <HAL_RCC_ClockConfig+0x1d0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fd fc96 	bl	8003618 <HAL_InitTick>

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40022000 	.word	0x40022000
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	0800c948 	.word	0x0800c948
 8005d04:	20000030 	.word	0x20000030
 8005d08:	20000034 	.word	0x20000034

08005d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d0c:	b490      	push	{r4, r7}
 8005d0e:	b08a      	sub	sp, #40	; 0x28
 8005d10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005d12:	4b2a      	ldr	r3, [pc, #168]	; (8005dbc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005d14:	1d3c      	adds	r4, r7, #4
 8005d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005d1c:	f240 2301 	movw	r3, #513	; 0x201
 8005d20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
 8005d26:	2300      	movs	r3, #0
 8005d28:	61bb      	str	r3, [r7, #24]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d36:	4b22      	ldr	r3, [pc, #136]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d002      	beq.n	8005d4c <HAL_RCC_GetSysClockFreq+0x40>
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d003      	beq.n	8005d52 <HAL_RCC_GetSysClockFreq+0x46>
 8005d4a:	e02d      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d4c:	4b1d      	ldr	r3, [pc, #116]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d4e:	623b      	str	r3, [r7, #32]
      break;
 8005d50:	e02d      	b.n	8005dae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	0c9b      	lsrs	r3, r3, #18
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d5e:	4413      	add	r3, r2
 8005d60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005d64:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d013      	beq.n	8005d98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d70:	4b13      	ldr	r3, [pc, #76]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	0c5b      	lsrs	r3, r3, #17
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d7e:	4413      	add	r3, r2
 8005d80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005d84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	4a0e      	ldr	r2, [pc, #56]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d8a:	fb02 f203 	mul.w	r2, r2, r3
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
 8005d96:	e004      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	4a0b      	ldr	r2, [pc, #44]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d9c:	fb02 f303 	mul.w	r3, r2, r3
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	623b      	str	r3, [r7, #32]
      break;
 8005da6:	e002      	b.n	8005dae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005da8:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005daa:	623b      	str	r3, [r7, #32]
      break;
 8005dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dae:	6a3b      	ldr	r3, [r7, #32]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3728      	adds	r7, #40	; 0x28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc90      	pop	{r4, r7}
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	0800c8c8 	.word	0x0800c8c8
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	007a1200 	.word	0x007a1200
 8005dc8:	003d0900 	.word	0x003d0900

08005dcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <RCC_Delay+0x34>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a0a      	ldr	r2, [pc, #40]	; (8005e04 <RCC_Delay+0x38>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	0a5b      	lsrs	r3, r3, #9
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	fb02 f303 	mul.w	r3, r2, r3
 8005de6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005de8:	bf00      	nop
  }
  while (Delay --);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	1e5a      	subs	r2, r3, #1
 8005dee:	60fa      	str	r2, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1f9      	bne.n	8005de8 <RCC_Delay+0x1c>
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bc80      	pop	{r7}
 8005dfe:	4770      	bx	lr
 8005e00:	20000030 	.word	0x20000030
 8005e04:	10624dd3 	.word	0x10624dd3

08005e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d07d      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005e24:	2300      	movs	r3, #0
 8005e26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e28:	4b4f      	ldr	r3, [pc, #316]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10d      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e34:	4b4c      	ldr	r3, [pc, #304]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	4a4b      	ldr	r2, [pc, #300]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	61d3      	str	r3, [r2, #28]
 8005e40:	4b49      	ldr	r3, [pc, #292]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e50:	4b46      	ldr	r3, [pc, #280]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d118      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e5c:	4b43      	ldr	r3, [pc, #268]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a42      	ldr	r2, [pc, #264]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e68:	f7fd fc18 	bl	800369c <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6e:	e008      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e70:	f7fd fc14 	bl	800369c <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b64      	cmp	r3, #100	; 0x64
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e06d      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e82:	4b3a      	ldr	r3, [pc, #232]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0f0      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e8e:	4b36      	ldr	r3, [pc, #216]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d02e      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d027      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eac:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005eb6:	4b2e      	ldr	r3, [pc, #184]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ebc:	4b2c      	ldr	r3, [pc, #176]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ec2:	4a29      	ldr	r2, [pc, #164]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d014      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed2:	f7fd fbe3 	bl	800369c <HAL_GetTick>
 8005ed6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed8:	e00a      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eda:	f7fd fbdf 	bl	800369c <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e036      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef0:	4b1d      	ldr	r3, [pc, #116]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0ee      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005efc:	4b1a      	ldr	r3, [pc, #104]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	4917      	ldr	r1, [pc, #92]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d105      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f14:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	4a13      	ldr	r2, [pc, #76]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f2c:	4b0e      	ldr	r3, [pc, #56]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	490b      	ldr	r1, [pc, #44]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0310 	and.w	r3, r3, #16
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d008      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	4904      	ldr	r1, [pc, #16]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	40007000 	.word	0x40007000
 8005f70:	42420440 	.word	0x42420440

08005f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e076      	b.n	8006074 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d108      	bne.n	8005fa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f96:	d009      	beq.n	8005fac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	61da      	str	r2, [r3, #28]
 8005f9e:	e005      	b.n	8005fac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7fd f96e 	bl	80032a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006030:	ea42 0103 	orr.w	r1, r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	0c1a      	lsrs	r2, r3, #16
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f002 0204 	and.w	r2, r2, #4
 8006052:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	69da      	ldr	r2, [r3, #28]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006062:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08c      	sub	sp, #48	; 0x30
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800608a:	2301      	movs	r3, #1
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_SPI_TransmitReceive+0x26>
 800609e:	2302      	movs	r3, #2
 80060a0:	e18a      	b.n	80063b8 <HAL_SPI_TransmitReceive+0x33c>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060aa:	f7fd faf7 	bl	800369c <HAL_GetTick>
 80060ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80060c0:	887b      	ldrh	r3, [r7, #2]
 80060c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d00f      	beq.n	80060ec <HAL_SPI_TransmitReceive+0x70>
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060d2:	d107      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x68>
 80060dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d003      	beq.n	80060ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80060e4:	2302      	movs	r3, #2
 80060e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060ea:	e15b      	b.n	80063a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_SPI_TransmitReceive+0x82>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_SPI_TransmitReceive+0x82>
 80060f8:	887b      	ldrh	r3, [r7, #2]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d103      	bne.n	8006106 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006104:	e14e      	b.n	80063a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b04      	cmp	r3, #4
 8006110:	d003      	beq.n	800611a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2205      	movs	r2, #5
 8006116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	887a      	ldrh	r2, [r7, #2]
 800612a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	887a      	ldrh	r2, [r7, #2]
 8006130:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	887a      	ldrh	r2, [r7, #2]
 800613c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	887a      	ldrh	r2, [r7, #2]
 8006142:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d007      	beq.n	800616e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800616c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006176:	d178      	bne.n	800626a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_SPI_TransmitReceive+0x10a>
 8006180:	8b7b      	ldrh	r3, [r7, #26]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d166      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	881a      	ldrh	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	1c9a      	adds	r2, r3, #2
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061aa:	e053      	b.n	8006254 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d11b      	bne.n	80061f2 <HAL_SPI_TransmitReceive+0x176>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d016      	beq.n	80061f2 <HAL_SPI_TransmitReceive+0x176>
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d113      	bne.n	80061f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	881a      	ldrh	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	1c9a      	adds	r2, r3, #2
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d119      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x1b8>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d014      	beq.n	8006234 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	b292      	uxth	r2, r2
 8006216:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	1c9a      	adds	r2, r3, #2
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006230:	2301      	movs	r3, #1
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006234:	f7fd fa32 	bl	800369c <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006240:	429a      	cmp	r2, r3
 8006242:	d807      	bhi.n	8006254 <HAL_SPI_TransmitReceive+0x1d8>
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	d003      	beq.n	8006254 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006252:	e0a7      	b.n	80063a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1a6      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x130>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1a1      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x130>
 8006268:	e07c      	b.n	8006364 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_SPI_TransmitReceive+0x1fc>
 8006272:	8b7b      	ldrh	r3, [r7, #26]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d16b      	bne.n	8006350 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800629e:	e057      	b.n	8006350 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d11c      	bne.n	80062e8 <HAL_SPI_TransmitReceive+0x26c>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d017      	beq.n	80062e8 <HAL_SPI_TransmitReceive+0x26c>
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d114      	bne.n	80062e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	330c      	adds	r3, #12
 80062c8:	7812      	ldrb	r2, [r2, #0]
 80062ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062da:	b29b      	uxth	r3, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d119      	bne.n	800632a <HAL_SPI_TransmitReceive+0x2ae>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d014      	beq.n	800632a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006326:	2301      	movs	r3, #1
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800632a:	f7fd f9b7 	bl	800369c <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006336:	429a      	cmp	r2, r3
 8006338:	d803      	bhi.n	8006342 <HAL_SPI_TransmitReceive+0x2c6>
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d102      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x2cc>
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	2b00      	cmp	r3, #0
 8006346:	d103      	bne.n	8006350 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800634e:	e029      	b.n	80063a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1a2      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x224>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800635e:	b29b      	uxth	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d19d      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f8b1 	bl	80064d0 <SPI_EndRxTxTransaction>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d006      	beq.n	8006382 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006380:	e010      	b.n	80063a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	e000      	b.n	80063a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80063a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3730      	adds	r7, #48	; 0x30
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063d0:	f7fd f964 	bl	800369c <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	4413      	add	r3, r2
 80063de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063e0:	f7fd f95c 	bl	800369c <HAL_GetTick>
 80063e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063e6:	4b39      	ldr	r3, [pc, #228]	; (80064cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	015b      	lsls	r3, r3, #5
 80063ec:	0d1b      	lsrs	r3, r3, #20
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	fb02 f303 	mul.w	r3, r2, r3
 80063f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063f6:	e054      	b.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fe:	d050      	beq.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006400:	f7fd f94c 	bl	800369c <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	429a      	cmp	r2, r3
 800640e:	d902      	bls.n	8006416 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d13d      	bne.n	8006492 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006424:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800642e:	d111      	bne.n	8006454 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006438:	d004      	beq.n	8006444 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006442:	d107      	bne.n	8006454 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006452:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645c:	d10f      	bne.n	800647e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800647c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e017      	b.n	80064c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	3b01      	subs	r3, #1
 80064a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4013      	ands	r3, r2
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	bf0c      	ite	eq
 80064b2:	2301      	moveq	r3, #1
 80064b4:	2300      	movne	r3, #0
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d19b      	bne.n	80063f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3720      	adds	r7, #32
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20000030 	.word	0x20000030

080064d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2200      	movs	r2, #0
 80064e4:	2180      	movs	r1, #128	; 0x80
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f7ff ff6a 	bl	80063c0 <SPI_WaitFlagStateUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d007      	beq.n	8006502 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f6:	f043 0220 	orr.w	r2, r3, #32
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e000      	b.n	8006504 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e041      	b.n	80065a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fc ff02 	bl	800333c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	4619      	mov	r1, r3
 800654a:	4610      	mov	r0, r2
 800654c:	f000 fe52 	bl	80071f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d001      	beq.n	80065c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e032      	b.n	800662a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a18      	ldr	r2, [pc, #96]	; (8006634 <HAL_TIM_Base_Start+0x88>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00e      	beq.n	80065f4 <HAL_TIM_Base_Start+0x48>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065de:	d009      	beq.n	80065f4 <HAL_TIM_Base_Start+0x48>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a14      	ldr	r2, [pc, #80]	; (8006638 <HAL_TIM_Base_Start+0x8c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d004      	beq.n	80065f4 <HAL_TIM_Base_Start+0x48>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a13      	ldr	r2, [pc, #76]	; (800663c <HAL_TIM_Base_Start+0x90>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d111      	bne.n	8006618 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b06      	cmp	r3, #6
 8006604:	d010      	beq.n	8006628 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0201 	orr.w	r2, r2, #1
 8006614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006616:	e007      	b.n	8006628 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0201 	orr.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40000400 	.word	0x40000400
 800663c:	40000800 	.word	0x40000800

08006640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b01      	cmp	r3, #1
 8006652:	d001      	beq.n	8006658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e03a      	b.n	80066ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68da      	ldr	r2, [r3, #12]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a18      	ldr	r2, [pc, #96]	; (80066d8 <HAL_TIM_Base_Start_IT+0x98>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00e      	beq.n	8006698 <HAL_TIM_Base_Start_IT+0x58>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006682:	d009      	beq.n	8006698 <HAL_TIM_Base_Start_IT+0x58>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a14      	ldr	r2, [pc, #80]	; (80066dc <HAL_TIM_Base_Start_IT+0x9c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <HAL_TIM_Base_Start_IT+0x58>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a13      	ldr	r2, [pc, #76]	; (80066e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d111      	bne.n	80066bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b06      	cmp	r3, #6
 80066a8:	d010      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f042 0201 	orr.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ba:	e007      	b.n	80066cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800

080066e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e041      	b.n	800677a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f839 	bl	8006782 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f000 fd66 	bl	80071f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr

08006794 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e041      	b.n	800682a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f839 	bl	8006832 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f000 fd0e 	bl	80071f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d109      	bne.n	8006868 <HAL_TIM_PWM_Start+0x24>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b01      	cmp	r3, #1
 800685e:	bf14      	ite	ne
 8006860:	2301      	movne	r3, #1
 8006862:	2300      	moveq	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	e022      	b.n	80068ae <HAL_TIM_PWM_Start+0x6a>
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2b04      	cmp	r3, #4
 800686c:	d109      	bne.n	8006882 <HAL_TIM_PWM_Start+0x3e>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b01      	cmp	r3, #1
 8006878:	bf14      	ite	ne
 800687a:	2301      	movne	r3, #1
 800687c:	2300      	moveq	r3, #0
 800687e:	b2db      	uxtb	r3, r3
 8006880:	e015      	b.n	80068ae <HAL_TIM_PWM_Start+0x6a>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b08      	cmp	r3, #8
 8006886:	d109      	bne.n	800689c <HAL_TIM_PWM_Start+0x58>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b01      	cmp	r3, #1
 8006892:	bf14      	ite	ne
 8006894:	2301      	movne	r3, #1
 8006896:	2300      	moveq	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	e008      	b.n	80068ae <HAL_TIM_PWM_Start+0x6a>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	bf14      	ite	ne
 80068a8:	2301      	movne	r3, #1
 80068aa:	2300      	moveq	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e05e      	b.n	8006974 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <HAL_TIM_PWM_Start+0x82>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c4:	e013      	b.n	80068ee <HAL_TIM_PWM_Start+0xaa>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d104      	bne.n	80068d6 <HAL_TIM_PWM_Start+0x92>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068d4:	e00b      	b.n	80068ee <HAL_TIM_PWM_Start+0xaa>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d104      	bne.n	80068e6 <HAL_TIM_PWM_Start+0xa2>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068e4:	e003      	b.n	80068ee <HAL_TIM_PWM_Start+0xaa>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2201      	movs	r2, #1
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fefc 	bl	80076f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1e      	ldr	r2, [pc, #120]	; (800697c <HAL_TIM_PWM_Start+0x138>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d107      	bne.n	8006916 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006914:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a18      	ldr	r2, [pc, #96]	; (800697c <HAL_TIM_PWM_Start+0x138>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00e      	beq.n	800693e <HAL_TIM_PWM_Start+0xfa>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006928:	d009      	beq.n	800693e <HAL_TIM_PWM_Start+0xfa>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a14      	ldr	r2, [pc, #80]	; (8006980 <HAL_TIM_PWM_Start+0x13c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d004      	beq.n	800693e <HAL_TIM_PWM_Start+0xfa>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a12      	ldr	r2, [pc, #72]	; (8006984 <HAL_TIM_PWM_Start+0x140>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d111      	bne.n	8006962 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b06      	cmp	r3, #6
 800694e:	d010      	beq.n	8006972 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006960:	e007      	b.n	8006972 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0201 	orr.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40012c00 	.word	0x40012c00
 8006980:	40000400 	.word	0x40000400
 8006984:	40000800 	.word	0x40000800

08006988 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e093      	b.n	8006ac4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d106      	bne.n	80069b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7fc fcfb 	bl	80033ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2202      	movs	r2, #2
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6812      	ldr	r2, [r2, #0]
 80069c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069cc:	f023 0307 	bic.w	r3, r3, #7
 80069d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	3304      	adds	r3, #4
 80069da:	4619      	mov	r1, r3
 80069dc:	4610      	mov	r0, r2
 80069de:	f000 fc09 	bl	80071f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0a:	f023 0303 	bic.w	r3, r3, #3
 8006a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	021b      	lsls	r3, r3, #8
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006a28:	f023 030c 	bic.w	r3, r3, #12
 8006a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	4313      	orrs	r3, r2
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	011a      	lsls	r2, r3, #4
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	031b      	lsls	r3, r3, #12
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006a66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	4313      	orrs	r3, r2
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006adc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ae4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006aec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006af4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d110      	bne.n	8006b1e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d102      	bne.n	8006b08 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b02:	7b7b      	ldrb	r3, [r7, #13]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d001      	beq.n	8006b0c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e069      	b.n	8006be0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b1c:	e031      	b.n	8006b82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d110      	bne.n	8006b46 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d102      	bne.n	8006b30 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b2a:	7b3b      	ldrb	r3, [r7, #12]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d001      	beq.n	8006b34 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e055      	b.n	8006be0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b44:	e01d      	b.n	8006b82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d108      	bne.n	8006b5e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d105      	bne.n	8006b5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b52:	7b7b      	ldrb	r3, [r7, #13]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d102      	bne.n	8006b5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b58:	7b3b      	ldrb	r3, [r7, #12]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d001      	beq.n	8006b62 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e03e      	b.n	8006be0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2202      	movs	r2, #2
 8006b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <HAL_TIM_Encoder_Start+0xc4>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d008      	beq.n	8006ba0 <HAL_TIM_Encoder_Start+0xd4>
 8006b8e:	e00f      	b.n	8006bb0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2201      	movs	r2, #1
 8006b96:	2100      	movs	r1, #0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fdab 	bl	80076f4 <TIM_CCxChannelCmd>
      break;
 8006b9e:	e016      	b.n	8006bce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	2104      	movs	r1, #4
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fda3 	bl	80076f4 <TIM_CCxChannelCmd>
      break;
 8006bae:	e00e      	b.n	8006bce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 fd9b 	bl	80076f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	2104      	movs	r1, #4
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fd94 	bl	80076f4 <TIM_CCxChannelCmd>
      break;
 8006bcc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0201 	orr.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d122      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d11b      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0202 	mvn.w	r2, #2
 8006c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fac7 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8006c30:	e005      	b.n	8006c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fb fdec 	bl	8002810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fac9 	bl	80071d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d122      	bne.n	8006c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d11b      	bne.n	8006c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0204 	mvn.w	r2, #4
 8006c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa9d 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8006c84:	e005      	b.n	8006c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7fb fdc2 	bl	8002810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fa9f 	bl	80071d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b08      	cmp	r3, #8
 8006ca4:	d122      	bne.n	8006cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d11b      	bne.n	8006cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0208 	mvn.w	r2, #8
 8006cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	f003 0303 	and.w	r3, r3, #3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fa73 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8006cd8:	e005      	b.n	8006ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7fb fd98 	bl	8002810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fa75 	bl	80071d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	2b10      	cmp	r3, #16
 8006cf8:	d122      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d11b      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f06f 0210 	mvn.w	r2, #16
 8006d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2208      	movs	r2, #8
 8006d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fa49 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8006d2c:	e005      	b.n	8006d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fb fd6e 	bl	8002810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fa4b 	bl	80071d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d10e      	bne.n	8006d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d107      	bne.n	8006d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0201 	mvn.w	r2, #1
 8006d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fa20 	bl	80071ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d76:	2b80      	cmp	r3, #128	; 0x80
 8006d78:	d10e      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d84:	2b80      	cmp	r3, #128	; 0x80
 8006d86:	d107      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fd39 	bl	800780a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da2:	2b40      	cmp	r3, #64	; 0x40
 8006da4:	d10e      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db0:	2b40      	cmp	r3, #64	; 0x40
 8006db2:	d107      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa0f 	bl	80071e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	d10e      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d107      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0220 	mvn.w	r2, #32
 8006de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fd04 	bl	80077f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d101      	bne.n	8006e12 <HAL_TIM_OC_ConfigChannel+0x1a>
 8006e0e:	2302      	movs	r3, #2
 8006e10:	e046      	b.n	8006ea0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b0c      	cmp	r3, #12
 8006e1e:	d839      	bhi.n	8006e94 <HAL_TIM_OC_ConfigChannel+0x9c>
 8006e20:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <HAL_TIM_OC_ConfigChannel+0x30>)
 8006e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e26:	bf00      	nop
 8006e28:	08006e5d 	.word	0x08006e5d
 8006e2c:	08006e95 	.word	0x08006e95
 8006e30:	08006e95 	.word	0x08006e95
 8006e34:	08006e95 	.word	0x08006e95
 8006e38:	08006e6b 	.word	0x08006e6b
 8006e3c:	08006e95 	.word	0x08006e95
 8006e40:	08006e95 	.word	0x08006e95
 8006e44:	08006e95 	.word	0x08006e95
 8006e48:	08006e79 	.word	0x08006e79
 8006e4c:	08006e95 	.word	0x08006e95
 8006e50:	08006e95 	.word	0x08006e95
 8006e54:	08006e95 	.word	0x08006e95
 8006e58:	08006e87 	.word	0x08006e87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68b9      	ldr	r1, [r7, #8]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fa28 	bl	80072b8 <TIM_OC1_SetConfig>
      break;
 8006e68:	e015      	b.n	8006e96 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68b9      	ldr	r1, [r7, #8]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fa87 	bl	8007384 <TIM_OC2_SetConfig>
      break;
 8006e76:	e00e      	b.n	8006e96 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 faea 	bl	8007458 <TIM_OC3_SetConfig>
      break;
 8006e84:	e007      	b.n	8006e96 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68b9      	ldr	r1, [r7, #8]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fb4d 	bl	800752c <TIM_OC4_SetConfig>
      break;
 8006e92:	e000      	b.n	8006e96 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8006e94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d101      	bne.n	8006ec2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	e0ac      	b.n	800701c <HAL_TIM_PWM_ConfigChannel+0x174>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b0c      	cmp	r3, #12
 8006ece:	f200 809f 	bhi.w	8007010 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006ed2:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006f0d 	.word	0x08006f0d
 8006edc:	08007011 	.word	0x08007011
 8006ee0:	08007011 	.word	0x08007011
 8006ee4:	08007011 	.word	0x08007011
 8006ee8:	08006f4d 	.word	0x08006f4d
 8006eec:	08007011 	.word	0x08007011
 8006ef0:	08007011 	.word	0x08007011
 8006ef4:	08007011 	.word	0x08007011
 8006ef8:	08006f8f 	.word	0x08006f8f
 8006efc:	08007011 	.word	0x08007011
 8006f00:	08007011 	.word	0x08007011
 8006f04:	08007011 	.word	0x08007011
 8006f08:	08006fcf 	.word	0x08006fcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68b9      	ldr	r1, [r7, #8]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f9d0 	bl	80072b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699a      	ldr	r2, [r3, #24]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0208 	orr.w	r2, r2, #8
 8006f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0204 	bic.w	r2, r2, #4
 8006f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6999      	ldr	r1, [r3, #24]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	691a      	ldr	r2, [r3, #16]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	619a      	str	r2, [r3, #24]
      break;
 8006f4a:	e062      	b.n	8007012 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68b9      	ldr	r1, [r7, #8]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fa16 	bl	8007384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6999      	ldr	r1, [r3, #24]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	021a      	lsls	r2, r3, #8
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	619a      	str	r2, [r3, #24]
      break;
 8006f8c:	e041      	b.n	8007012 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 fa5f 	bl	8007458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69da      	ldr	r2, [r3, #28]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f042 0208 	orr.w	r2, r2, #8
 8006fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69da      	ldr	r2, [r3, #28]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0204 	bic.w	r2, r2, #4
 8006fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69d9      	ldr	r1, [r3, #28]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	61da      	str	r2, [r3, #28]
      break;
 8006fcc:	e021      	b.n	8007012 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 faa9 	bl	800752c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69da      	ldr	r2, [r3, #28]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	69da      	ldr	r2, [r3, #28]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69d9      	ldr	r1, [r3, #28]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	021a      	lsls	r2, r3, #8
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	61da      	str	r2, [r3, #28]
      break;
 800700e:	e000      	b.n	8007012 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007010:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_TIM_ConfigClockSource+0x18>
 8007038:	2302      	movs	r3, #2
 800703a:	e0b3      	b.n	80071a4 <HAL_TIM_ConfigClockSource+0x180>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800705a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007062:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007074:	d03e      	beq.n	80070f4 <HAL_TIM_ConfigClockSource+0xd0>
 8007076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800707a:	f200 8087 	bhi.w	800718c <HAL_TIM_ConfigClockSource+0x168>
 800707e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007082:	f000 8085 	beq.w	8007190 <HAL_TIM_ConfigClockSource+0x16c>
 8007086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800708a:	d87f      	bhi.n	800718c <HAL_TIM_ConfigClockSource+0x168>
 800708c:	2b70      	cmp	r3, #112	; 0x70
 800708e:	d01a      	beq.n	80070c6 <HAL_TIM_ConfigClockSource+0xa2>
 8007090:	2b70      	cmp	r3, #112	; 0x70
 8007092:	d87b      	bhi.n	800718c <HAL_TIM_ConfigClockSource+0x168>
 8007094:	2b60      	cmp	r3, #96	; 0x60
 8007096:	d050      	beq.n	800713a <HAL_TIM_ConfigClockSource+0x116>
 8007098:	2b60      	cmp	r3, #96	; 0x60
 800709a:	d877      	bhi.n	800718c <HAL_TIM_ConfigClockSource+0x168>
 800709c:	2b50      	cmp	r3, #80	; 0x50
 800709e:	d03c      	beq.n	800711a <HAL_TIM_ConfigClockSource+0xf6>
 80070a0:	2b50      	cmp	r3, #80	; 0x50
 80070a2:	d873      	bhi.n	800718c <HAL_TIM_ConfigClockSource+0x168>
 80070a4:	2b40      	cmp	r3, #64	; 0x40
 80070a6:	d058      	beq.n	800715a <HAL_TIM_ConfigClockSource+0x136>
 80070a8:	2b40      	cmp	r3, #64	; 0x40
 80070aa:	d86f      	bhi.n	800718c <HAL_TIM_ConfigClockSource+0x168>
 80070ac:	2b30      	cmp	r3, #48	; 0x30
 80070ae:	d064      	beq.n	800717a <HAL_TIM_ConfigClockSource+0x156>
 80070b0:	2b30      	cmp	r3, #48	; 0x30
 80070b2:	d86b      	bhi.n	800718c <HAL_TIM_ConfigClockSource+0x168>
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d060      	beq.n	800717a <HAL_TIM_ConfigClockSource+0x156>
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	d867      	bhi.n	800718c <HAL_TIM_ConfigClockSource+0x168>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d05c      	beq.n	800717a <HAL_TIM_ConfigClockSource+0x156>
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d05a      	beq.n	800717a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80070c4:	e062      	b.n	800718c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	6899      	ldr	r1, [r3, #8]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f000 faee 	bl	80076b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80070e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	609a      	str	r2, [r3, #8]
      break;
 80070f2:	e04e      	b.n	8007192 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6818      	ldr	r0, [r3, #0]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	6899      	ldr	r1, [r3, #8]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f000 fad7 	bl	80076b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689a      	ldr	r2, [r3, #8]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007116:	609a      	str	r2, [r3, #8]
      break;
 8007118:	e03b      	b.n	8007192 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	6859      	ldr	r1, [r3, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	461a      	mov	r2, r3
 8007128:	f000 fa4e 	bl	80075c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2150      	movs	r1, #80	; 0x50
 8007132:	4618      	mov	r0, r3
 8007134:	f000 faa5 	bl	8007682 <TIM_ITRx_SetConfig>
      break;
 8007138:	e02b      	b.n	8007192 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6818      	ldr	r0, [r3, #0]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	6859      	ldr	r1, [r3, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	461a      	mov	r2, r3
 8007148:	f000 fa6c 	bl	8007624 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2160      	movs	r1, #96	; 0x60
 8007152:	4618      	mov	r0, r3
 8007154:	f000 fa95 	bl	8007682 <TIM_ITRx_SetConfig>
      break;
 8007158:	e01b      	b.n	8007192 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6818      	ldr	r0, [r3, #0]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	6859      	ldr	r1, [r3, #4]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	461a      	mov	r2, r3
 8007168:	f000 fa2e 	bl	80075c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2140      	movs	r1, #64	; 0x40
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fa85 	bl	8007682 <TIM_ITRx_SetConfig>
      break;
 8007178:	e00b      	b.n	8007192 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4619      	mov	r1, r3
 8007184:	4610      	mov	r0, r2
 8007186:	f000 fa7c 	bl	8007682 <TIM_ITRx_SetConfig>
        break;
 800718a:	e002      	b.n	8007192 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800718c:	bf00      	nop
 800718e:	e000      	b.n	8007192 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007190:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr

080071be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bc80      	pop	{r7}
 80071ce:	4770      	bx	lr

080071d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc80      	pop	{r7}
 80071e0:	4770      	bx	lr

080071e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071ea:	bf00      	nop
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bc80      	pop	{r7}
 80071f2:	4770      	bx	lr

080071f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a29      	ldr	r2, [pc, #164]	; (80072ac <TIM_Base_SetConfig+0xb8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d00b      	beq.n	8007224 <TIM_Base_SetConfig+0x30>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007212:	d007      	beq.n	8007224 <TIM_Base_SetConfig+0x30>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a26      	ldr	r2, [pc, #152]	; (80072b0 <TIM_Base_SetConfig+0xbc>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d003      	beq.n	8007224 <TIM_Base_SetConfig+0x30>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a25      	ldr	r2, [pc, #148]	; (80072b4 <TIM_Base_SetConfig+0xc0>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d108      	bne.n	8007236 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a1c      	ldr	r2, [pc, #112]	; (80072ac <TIM_Base_SetConfig+0xb8>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00b      	beq.n	8007256 <TIM_Base_SetConfig+0x62>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007244:	d007      	beq.n	8007256 <TIM_Base_SetConfig+0x62>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a19      	ldr	r2, [pc, #100]	; (80072b0 <TIM_Base_SetConfig+0xbc>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d003      	beq.n	8007256 <TIM_Base_SetConfig+0x62>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a18      	ldr	r2, [pc, #96]	; (80072b4 <TIM_Base_SetConfig+0xc0>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d108      	bne.n	8007268 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800725c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a07      	ldr	r2, [pc, #28]	; (80072ac <TIM_Base_SetConfig+0xb8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d103      	bne.n	800729c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	691a      	ldr	r2, [r3, #16]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	615a      	str	r2, [r3, #20]
}
 80072a2:	bf00      	nop
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr
 80072ac:	40012c00 	.word	0x40012c00
 80072b0:	40000400 	.word	0x40000400
 80072b4:	40000800 	.word	0x40000800

080072b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f023 0201 	bic.w	r2, r3, #1
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0303 	bic.w	r3, r3, #3
 80072ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f023 0302 	bic.w	r3, r3, #2
 8007300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a1c      	ldr	r2, [pc, #112]	; (8007380 <TIM_OC1_SetConfig+0xc8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d10c      	bne.n	800732e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f023 0308 	bic.w	r3, r3, #8
 800731a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	4313      	orrs	r3, r2
 8007324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f023 0304 	bic.w	r3, r3, #4
 800732c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a13      	ldr	r2, [pc, #76]	; (8007380 <TIM_OC1_SetConfig+0xc8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d111      	bne.n	800735a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800733c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	4313      	orrs	r3, r2
 8007358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	621a      	str	r2, [r3, #32]
}
 8007374:	bf00      	nop
 8007376:	371c      	adds	r7, #28
 8007378:	46bd      	mov	sp, r7
 800737a:	bc80      	pop	{r7}
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40012c00 	.word	0x40012c00

08007384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f023 0210 	bic.w	r2, r3, #16
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f023 0320 	bic.w	r3, r3, #32
 80073ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a1d      	ldr	r2, [pc, #116]	; (8007454 <TIM_OC2_SetConfig+0xd0>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d10d      	bne.n	8007400 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a14      	ldr	r2, [pc, #80]	; (8007454 <TIM_OC2_SetConfig+0xd0>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d113      	bne.n	8007430 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800740e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007416:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	621a      	str	r2, [r3, #32]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	bc80      	pop	{r7}
 8007452:	4770      	bx	lr
 8007454:	40012c00 	.word	0x40012c00

08007458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0303 	bic.w	r3, r3, #3
 800748e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a1d      	ldr	r2, [pc, #116]	; (8007528 <TIM_OC3_SetConfig+0xd0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d10d      	bne.n	80074d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a14      	ldr	r2, [pc, #80]	; (8007528 <TIM_OC3_SetConfig+0xd0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d113      	bne.n	8007502 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4313      	orrs	r3, r2
 8007500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	621a      	str	r2, [r3, #32]
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40012c00 	.word	0x40012c00

0800752c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	4313      	orrs	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	031b      	lsls	r3, r3, #12
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a0f      	ldr	r2, [pc, #60]	; (80075c4 <TIM_OC4_SetConfig+0x98>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d109      	bne.n	80075a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007592:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	019b      	lsls	r3, r3, #6
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	621a      	str	r2, [r3, #32]
}
 80075ba:	bf00      	nop
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr
 80075c4:	40012c00 	.word	0x40012c00

080075c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	f023 0201 	bic.w	r2, r3, #1
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f023 030a 	bic.w	r3, r3, #10
 8007604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4313      	orrs	r3, r2
 800760c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	621a      	str	r2, [r3, #32]
}
 800761a:	bf00      	nop
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	bc80      	pop	{r7}
 8007622:	4770      	bx	lr

08007624 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	f023 0210 	bic.w	r2, r3, #16
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800764e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	031b      	lsls	r3, r3, #12
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	4313      	orrs	r3, r2
 8007658:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007660:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	621a      	str	r2, [r3, #32]
}
 8007678:	bf00      	nop
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	bc80      	pop	{r7}
 8007680:	4770      	bx	lr

08007682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007682:	b480      	push	{r7}
 8007684:	b085      	sub	sp, #20
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4313      	orrs	r3, r2
 80076a0:	f043 0307 	orr.w	r3, r3, #7
 80076a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	609a      	str	r2, [r3, #8]
}
 80076ac:	bf00      	nop
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bc80      	pop	{r7}
 80076b4:	4770      	bx	lr

080076b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b087      	sub	sp, #28
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	607a      	str	r2, [r7, #4]
 80076c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	021a      	lsls	r2, r3, #8
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	431a      	orrs	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	4313      	orrs	r3, r2
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	609a      	str	r2, [r3, #8]
}
 80076ea:	bf00      	nop
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bc80      	pop	{r7}
 80076f2:	4770      	bx	lr

080076f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f003 031f 	and.w	r3, r3, #31
 8007706:	2201      	movs	r2, #1
 8007708:	fa02 f303 	lsl.w	r3, r2, r3
 800770c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a1a      	ldr	r2, [r3, #32]
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	43db      	mvns	r3, r3
 8007716:	401a      	ands	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a1a      	ldr	r2, [r3, #32]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f003 031f 	and.w	r3, r3, #31
 8007726:	6879      	ldr	r1, [r7, #4]
 8007728:	fa01 f303 	lsl.w	r3, r1, r3
 800772c:	431a      	orrs	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	621a      	str	r2, [r3, #32]
}
 8007732:	bf00      	nop
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr

0800773c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007750:	2302      	movs	r3, #2
 8007752:	e046      	b.n	80077e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800777a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	4313      	orrs	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a16      	ldr	r2, [pc, #88]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00e      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a0:	d009      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a12      	ldr	r2, [pc, #72]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d004      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a10      	ldr	r2, [pc, #64]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d10c      	bne.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc80      	pop	{r7}
 80077ea:	4770      	bx	lr
 80077ec:	40012c00 	.word	0x40012c00
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800

080077f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr

0800780a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr

0800781c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800781c:	b084      	sub	sp, #16
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	f107 0014 	add.w	r0, r7, #20
 800782a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	bc80      	pop	{r7}
 8007838:	b004      	add	sp, #16
 800783a:	4770      	bx	lr

0800783c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800784c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007850:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	b29a      	uxth	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	bc80      	pop	{r7}
 8007866:	4770      	bx	lr

08007868 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007870:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007874:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800787c:	b29a      	uxth	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	b29b      	uxth	r3, r3
 8007882:	43db      	mvns	r3, r3
 8007884:	b29b      	uxth	r3, r3
 8007886:	4013      	ands	r3, r2
 8007888:	b29a      	uxth	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	bc80      	pop	{r7}
 800789a:	4770      	bx	lr

0800789c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bc80      	pop	{r7}
 80078b2:	4770      	bx	lr

080078b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80078b4:	b084      	sub	sp, #16
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	f107 0014 	add.w	r0, r7, #20
 80078c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bc80      	pop	{r7}
 80078f0:	b004      	add	sp, #16
 80078f2:	4770      	bx	lr

080078f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b09b      	sub	sp, #108	; 0x6c
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	78db      	ldrb	r3, [r3, #3]
 8007922:	2b03      	cmp	r3, #3
 8007924:	d81f      	bhi.n	8007966 <USB_ActivateEndpoint+0x72>
 8007926:	a201      	add	r2, pc, #4	; (adr r2, 800792c <USB_ActivateEndpoint+0x38>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	0800793d 	.word	0x0800793d
 8007930:	08007959 	.word	0x08007959
 8007934:	0800796f 	.word	0x0800796f
 8007938:	0800794b 	.word	0x0800794b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800793c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007944:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007948:	e012      	b.n	8007970 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800794a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800794e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007952:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007956:	e00b      	b.n	8007970 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007958:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800795c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007960:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007964:	e004      	b.n	8007970 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800796c:	e000      	b.n	8007970 <USB_ActivateEndpoint+0x7c>
      break;
 800796e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	441a      	add	r2, r3
 800797a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800797e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800798a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798e:	b29b      	uxth	r3, r3
 8007990:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	4313      	orrs	r3, r2
 80079b2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	441a      	add	r2, r3
 80079c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80079c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	7b1b      	ldrb	r3, [r3, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f040 8149 	bne.w	8007c74 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	785b      	ldrb	r3, [r3, #1]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 8084 	beq.w	8007af4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	461a      	mov	r2, r3
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	4413      	add	r3, r2
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	011a      	lsls	r2, r3, #4
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a0e:	613b      	str	r3, [r7, #16]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	88db      	ldrh	r3, [r3, #6]
 8007a14:	085b      	lsrs	r3, r3, #1
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	81fb      	strh	r3, [r7, #14]
 8007a2e:	89fb      	ldrh	r3, [r7, #14]
 8007a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d01b      	beq.n	8007a70 <USB_ActivateEndpoint+0x17c>
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4e:	81bb      	strh	r3, [r7, #12]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	441a      	add	r2, r3
 8007a5a:	89bb      	ldrh	r3, [r7, #12]
 8007a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	78db      	ldrb	r3, [r3, #3]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d020      	beq.n	8007aba <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a8e:	813b      	strh	r3, [r7, #8]
 8007a90:	893b      	ldrh	r3, [r7, #8]
 8007a92:	f083 0320 	eor.w	r3, r3, #32
 8007a96:	813b      	strh	r3, [r7, #8]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	441a      	add	r2, r3
 8007aa2:	893b      	ldrh	r3, [r7, #8]
 8007aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	8013      	strh	r3, [r2, #0]
 8007ab8:	e27f      	b.n	8007fba <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad0:	817b      	strh	r3, [r7, #10]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	441a      	add	r2, r3
 8007adc:	897b      	ldrh	r3, [r7, #10]
 8007ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	8013      	strh	r3, [r2, #0]
 8007af2:	e262      	b.n	8007fba <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	461a      	mov	r2, r3
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	4413      	add	r3, r2
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	011a      	lsls	r2, r3, #4
 8007b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	88db      	ldrh	r3, [r3, #6]
 8007b1c:	085b      	lsrs	r3, r3, #1
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	4413      	add	r3, r2
 8007b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	011a      	lsls	r2, r3, #4
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	4413      	add	r3, r2
 8007b46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b4a:	623b      	str	r3, [r7, #32]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d112      	bne.n	8007b7a <USB_ActivateEndpoint+0x286>
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	801a      	strh	r2, [r3, #0]
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	801a      	strh	r2, [r3, #0]
 8007b78:	e02f      	b.n	8007bda <USB_ActivateEndpoint+0x2e6>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8007b80:	d813      	bhi.n	8007baa <USB_ActivateEndpoint+0x2b6>
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	085b      	lsrs	r3, r3, #1
 8007b88:	663b      	str	r3, [r7, #96]	; 0x60
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <USB_ActivateEndpoint+0x2a8>
 8007b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b98:	3301      	adds	r3, #1
 8007b9a:	663b      	str	r3, [r7, #96]	; 0x60
 8007b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	029b      	lsls	r3, r3, #10
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	e017      	b.n	8007bda <USB_ActivateEndpoint+0x2e6>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	095b      	lsrs	r3, r3, #5
 8007bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 031f 	and.w	r3, r3, #31
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d102      	bne.n	8007bc4 <USB_ActivateEndpoint+0x2d0>
 8007bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	663b      	str	r3, [r7, #96]	; 0x60
 8007bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	029b      	lsls	r3, r3, #10
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	83fb      	strh	r3, [r7, #30]
 8007be8:	8bfb      	ldrh	r3, [r7, #30]
 8007bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d01b      	beq.n	8007c2a <USB_ActivateEndpoint+0x336>
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c08:	83bb      	strh	r3, [r7, #28]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	441a      	add	r2, r3
 8007c14:	8bbb      	ldrh	r3, [r7, #28]
 8007c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c40:	837b      	strh	r3, [r7, #26]
 8007c42:	8b7b      	ldrh	r3, [r7, #26]
 8007c44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c48:	837b      	strh	r3, [r7, #26]
 8007c4a:	8b7b      	ldrh	r3, [r7, #26]
 8007c4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c50:	837b      	strh	r3, [r7, #26]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	441a      	add	r2, r3
 8007c5c:	8b7b      	ldrh	r3, [r7, #26]
 8007c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	8013      	strh	r3, [r2, #0]
 8007c72:	e1a2      	b.n	8007fba <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	441a      	add	r2, r3
 8007c98:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ca4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cc0:	4413      	add	r3, r2
 8007cc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	011a      	lsls	r2, r3, #4
 8007cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	891b      	ldrh	r3, [r3, #8]
 8007cd8:	085b      	lsrs	r3, r3, #1
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	005b      	lsls	r3, r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ce2:	801a      	strh	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cf4:	4413      	add	r3, r2
 8007cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	011a      	lsls	r2, r3, #4
 8007cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	895b      	ldrh	r3, [r3, #10]
 8007d0c:	085b      	lsrs	r3, r3, #1
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d16:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f040 8091 	bne.w	8007e44 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007d30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d01b      	beq.n	8007d72 <USB_ActivateEndpoint+0x47e>
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d50:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	441a      	add	r2, r3
 8007d5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	873b      	strh	r3, [r7, #56]	; 0x38
 8007d80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d01b      	beq.n	8007dc2 <USB_ActivateEndpoint+0x4ce>
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	441a      	add	r2, r3
 8007dac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007dda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007ddc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007de0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007de2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007de4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007de8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	441a      	add	r2, r3
 8007df4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e20:	867b      	strh	r3, [r7, #50]	; 0x32
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	441a      	add	r2, r3
 8007e2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	8013      	strh	r3, [r2, #0]
 8007e42:	e0ba      	b.n	8007fba <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007e54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01d      	beq.n	8007e9c <USB_ActivateEndpoint+0x5a8>
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e76:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	441a      	add	r2, r3
 8007e84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007eac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01d      	beq.n	8007ef4 <USB_ActivateEndpoint+0x600>
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ece:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	441a      	add	r2, r3
 8007edc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	78db      	ldrb	r3, [r3, #3]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d024      	beq.n	8007f46 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007f16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f1a:	f083 0320 	eor.w	r3, r3, #32
 8007f1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	441a      	add	r2, r3
 8007f2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	8013      	strh	r3, [r2, #0]
 8007f44:	e01d      	b.n	8007f82 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	441a      	add	r2, r3
 8007f6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f98:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	441a      	add	r2, r3
 8007fa4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007fba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	376c      	adds	r7, #108	; 0x6c
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bc80      	pop	{r7}
 8007fc6:	4770      	bx	lr

08007fc8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b08d      	sub	sp, #52	; 0x34
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	7b1b      	ldrb	r3, [r3, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f040 808e 	bne.w	80080f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	785b      	ldrb	r3, [r3, #1]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d044      	beq.n	800806e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	81bb      	strh	r3, [r7, #12]
 8007ff2:	89bb      	ldrh	r3, [r7, #12]
 8007ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d01b      	beq.n	8008034 <USB_DeactivateEndpoint+0x6c>
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	b29b      	uxth	r3, r3
 800800a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800800e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008012:	817b      	strh	r3, [r7, #10]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	441a      	add	r2, r3
 800801e:	897b      	ldrh	r3, [r7, #10]
 8008020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800802c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008030:	b29b      	uxth	r3, r3
 8008032:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	b29b      	uxth	r3, r3
 8008042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800804a:	813b      	strh	r3, [r7, #8]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	441a      	add	r2, r3
 8008056:	893b      	ldrh	r3, [r7, #8]
 8008058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800805c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008068:	b29b      	uxth	r3, r3
 800806a:	8013      	strh	r3, [r2, #0]
 800806c:	e192      	b.n	8008394 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	827b      	strh	r3, [r7, #18]
 800807c:	8a7b      	ldrh	r3, [r7, #18]
 800807e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d01b      	beq.n	80080be <USB_DeactivateEndpoint+0xf6>
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	b29b      	uxth	r3, r3
 8008094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800809c:	823b      	strh	r3, [r7, #16]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	441a      	add	r2, r3
 80080a8:	8a3b      	ldrh	r3, [r7, #16]
 80080aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d4:	81fb      	strh	r3, [r7, #14]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	441a      	add	r2, r3
 80080e0:	89fb      	ldrh	r3, [r7, #14]
 80080e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	8013      	strh	r3, [r2, #0]
 80080f6:	e14d      	b.n	8008394 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	785b      	ldrb	r3, [r3, #1]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f040 80a5 	bne.w	800824c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	843b      	strh	r3, [r7, #32]
 8008110:	8c3b      	ldrh	r3, [r7, #32]
 8008112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d01b      	beq.n	8008152 <USB_DeactivateEndpoint+0x18a>
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	b29b      	uxth	r3, r3
 8008128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800812c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008130:	83fb      	strh	r3, [r7, #30]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	441a      	add	r2, r3
 800813c:	8bfb      	ldrh	r3, [r7, #30]
 800813e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008146:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800814a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800814e:	b29b      	uxth	r3, r3
 8008150:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	83bb      	strh	r3, [r7, #28]
 8008160:	8bbb      	ldrh	r3, [r7, #28]
 8008162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	d01b      	beq.n	80081a2 <USB_DeactivateEndpoint+0x1da>
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	881b      	ldrh	r3, [r3, #0]
 8008176:	b29b      	uxth	r3, r3
 8008178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800817c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008180:	837b      	strh	r3, [r7, #26]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	441a      	add	r2, r3
 800818c:	8b7b      	ldrh	r3, [r7, #26]
 800818e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800819a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800819e:	b29b      	uxth	r3, r3
 80081a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b8:	833b      	strh	r3, [r7, #24]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	441a      	add	r2, r3
 80081c4:	8b3b      	ldrh	r3, [r7, #24]
 80081c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f0:	82fb      	strh	r3, [r7, #22]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	441a      	add	r2, r3
 80081fc:	8afb      	ldrh	r3, [r7, #22]
 80081fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800820a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800820e:	b29b      	uxth	r3, r3
 8008210:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008228:	82bb      	strh	r3, [r7, #20]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	441a      	add	r2, r3
 8008234:	8abb      	ldrh	r3, [r7, #20]
 8008236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800823a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800823e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008246:	b29b      	uxth	r3, r3
 8008248:	8013      	strh	r3, [r2, #0]
 800824a:	e0a3      	b.n	8008394 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800825a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800825c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01b      	beq.n	800829c <USB_DeactivateEndpoint+0x2d4>
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	441a      	add	r2, r3
 8008286:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800828c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008298:	b29b      	uxth	r3, r3
 800829a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80082aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d01b      	beq.n	80082ec <USB_DeactivateEndpoint+0x324>
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	441a      	add	r2, r3
 80082d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008302:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	441a      	add	r2, r3
 800830e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008318:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800831c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008320:	b29b      	uxth	r3, r3
 8008322:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	b29b      	uxth	r3, r3
 8008332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800833a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	441a      	add	r2, r3
 8008346:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800834c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008358:	b29b      	uxth	r3, r3
 800835a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800836e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008372:	847b      	strh	r3, [r7, #34]	; 0x22
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	441a      	add	r2, r3
 800837e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800838c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008390:	b29b      	uxth	r3, r3
 8008392:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3734      	adds	r7, #52	; 0x34
 800839a:	46bd      	mov	sp, r7
 800839c:	bc80      	pop	{r7}
 800839e:	4770      	bx	lr

080083a0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b0cc      	sub	sp, #304	; 0x130
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	1d3b      	adds	r3, r7, #4
 80083a8:	6018      	str	r0, [r3, #0]
 80083aa:	463b      	mov	r3, r7
 80083ac:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083ae:	463b      	mov	r3, r7
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	785b      	ldrb	r3, [r3, #1]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	f040 872e 	bne.w	8009216 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80083ba:	463b      	mov	r3, r7
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	699a      	ldr	r2, [r3, #24]
 80083c0:	463b      	mov	r3, r7
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d905      	bls.n	80083d6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80083ca:	463b      	mov	r3, r7
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80083d4:	e004      	b.n	80083e0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80083d6:	463b      	mov	r3, r7
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80083e0:	463b      	mov	r3, r7
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	7b1b      	ldrb	r3, [r3, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d134      	bne.n	8008454 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80083ea:	463b      	mov	r3, r7
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6959      	ldr	r1, [r3, #20]
 80083f0:	463b      	mov	r3, r7
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	88da      	ldrh	r2, [r3, #6]
 80083f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	1d38      	adds	r0, r7, #4
 80083fe:	6800      	ldr	r0, [r0, #0]
 8008400:	f001 fc03 	bl	8009c0a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008404:	f107 0310 	add.w	r3, r7, #16
 8008408:	1d3a      	adds	r2, r7, #4
 800840a:	6812      	ldr	r2, [r2, #0]
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	1d3b      	adds	r3, r7, #4
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008416:	b29b      	uxth	r3, r3
 8008418:	4619      	mov	r1, r3
 800841a:	f107 0310 	add.w	r3, r7, #16
 800841e:	f107 0210 	add.w	r2, r7, #16
 8008422:	6812      	ldr	r2, [r2, #0]
 8008424:	440a      	add	r2, r1
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	463b      	mov	r3, r7
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	011a      	lsls	r2, r3, #4
 8008430:	f107 0310 	add.w	r3, r7, #16
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4413      	add	r3, r2
 8008438:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800843c:	f107 030c 	add.w	r3, r7, #12
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008446:	b29a      	uxth	r2, r3
 8008448:	f107 030c 	add.w	r3, r7, #12
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	801a      	strh	r2, [r3, #0]
 8008450:	f000 beac 	b.w	80091ac <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008454:	463b      	mov	r3, r7
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	78db      	ldrb	r3, [r3, #3]
 800845a:	2b02      	cmp	r3, #2
 800845c:	f040 838c 	bne.w	8008b78 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008460:	463b      	mov	r3, r7
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6a1a      	ldr	r2, [r3, #32]
 8008466:	463b      	mov	r3, r7
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	429a      	cmp	r2, r3
 800846e:	f240 8330 	bls.w	8008ad2 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008472:	1d3b      	adds	r3, r7, #4
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	463b      	mov	r3, r7
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	b29b      	uxth	r3, r3
 8008484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800848c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008490:	1d3b      	adds	r3, r7, #4
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	463b      	mov	r3, r7
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	441a      	add	r2, r3
 800849e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80084a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80084ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80084b6:	463b      	mov	r3, r7
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6a1a      	ldr	r2, [r3, #32]
 80084bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084c0:	1ad2      	subs	r2, r2, r3
 80084c2:	463b      	mov	r3, r7
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80084c8:	1d3b      	adds	r3, r7, #4
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	463b      	mov	r3, r7
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 819e 	beq.w	8008820 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80084e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084e8:	1d3a      	adds	r2, r7, #4
 80084ea:	6812      	ldr	r2, [r2, #0]
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	463b      	mov	r3, r7
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d17a      	bne.n	80085ee <USB_EPStartXfer+0x24e>
 80084f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084fc:	1d3a      	adds	r2, r7, #4
 80084fe:	6812      	ldr	r2, [r2, #0]
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	1d3b      	adds	r3, r7, #4
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800850a:	b29b      	uxth	r3, r3
 800850c:	4619      	mov	r1, r3
 800850e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008512:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008516:	6812      	ldr	r2, [r2, #0]
 8008518:	440a      	add	r2, r1
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	463b      	mov	r3, r7
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	011a      	lsls	r2, r3, #4
 8008524:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4413      	add	r3, r2
 800852c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853a:	2b00      	cmp	r3, #0
 800853c:	d11a      	bne.n	8008574 <USB_EPStartXfer+0x1d4>
 800853e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	b29b      	uxth	r3, r3
 8008548:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800854c:	b29a      	uxth	r2, r3
 800854e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	801a      	strh	r2, [r3, #0]
 8008556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	b29b      	uxth	r3, r3
 8008560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008568:	b29a      	uxth	r2, r3
 800856a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	801a      	strh	r2, [r3, #0]
 8008572:	e062      	b.n	800863a <USB_EPStartXfer+0x29a>
 8008574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008578:	2b3e      	cmp	r3, #62	; 0x3e
 800857a:	d819      	bhi.n	80085b0 <USB_EPStartXfer+0x210>
 800857c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008580:	085b      	lsrs	r3, r3, #1
 8008582:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d004      	beq.n	800859c <USB_EPStartXfer+0x1fc>
 8008592:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008596:	3301      	adds	r3, #1
 8008598:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800859c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	029b      	lsls	r3, r3, #10
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	801a      	strh	r2, [r3, #0]
 80085ae:	e044      	b.n	800863a <USB_EPStartXfer+0x29a>
 80085b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085b4:	095b      	lsrs	r3, r3, #5
 80085b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80085ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085be:	f003 031f 	and.w	r3, r3, #31
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d104      	bne.n	80085d0 <USB_EPStartXfer+0x230>
 80085c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085ca:	3b01      	subs	r3, #1
 80085cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80085d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	029b      	lsls	r3, r3, #10
 80085d8:	b29b      	uxth	r3, r3
 80085da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	801a      	strh	r2, [r3, #0]
 80085ec:	e025      	b.n	800863a <USB_EPStartXfer+0x29a>
 80085ee:	463b      	mov	r3, r7
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	785b      	ldrb	r3, [r3, #1]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d120      	bne.n	800863a <USB_EPStartXfer+0x29a>
 80085f8:	1d3b      	adds	r3, r7, #4
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008600:	b29b      	uxth	r3, r3
 8008602:	4619      	mov	r1, r3
 8008604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008608:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800860c:	6812      	ldr	r2, [r2, #0]
 800860e:	440a      	add	r2, r1
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	463b      	mov	r3, r7
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	011a      	lsls	r2, r3, #4
 800861a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4413      	add	r3, r2
 8008622:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800862a:	601a      	str	r2, [r3, #0]
 800862c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008630:	b29a      	uxth	r2, r3
 8008632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800863a:	463b      	mov	r3, r7
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	895b      	ldrh	r3, [r3, #10]
 8008640:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008644:	463b      	mov	r3, r7
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6959      	ldr	r1, [r3, #20]
 800864a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800864e:	b29b      	uxth	r3, r3
 8008650:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008654:	1d38      	adds	r0, r7, #4
 8008656:	6800      	ldr	r0, [r0, #0]
 8008658:	f001 fad7 	bl	8009c0a <USB_WritePMA>
            ep->xfer_buff += len;
 800865c:	463b      	mov	r3, r7
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	695a      	ldr	r2, [r3, #20]
 8008662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008666:	441a      	add	r2, r3
 8008668:	463b      	mov	r3, r7
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800866e:	463b      	mov	r3, r7
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6a1a      	ldr	r2, [r3, #32]
 8008674:	463b      	mov	r3, r7
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	429a      	cmp	r2, r3
 800867c:	d909      	bls.n	8008692 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800867e:	463b      	mov	r3, r7
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6a1a      	ldr	r2, [r3, #32]
 8008684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008688:	1ad2      	subs	r2, r2, r3
 800868a:	463b      	mov	r3, r7
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	621a      	str	r2, [r3, #32]
 8008690:	e008      	b.n	80086a4 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8008692:	463b      	mov	r3, r7
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800869c:	463b      	mov	r3, r7
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2200      	movs	r2, #0
 80086a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086a4:	463b      	mov	r3, r7
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	785b      	ldrb	r3, [r3, #1]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d17a      	bne.n	80087a4 <USB_EPStartXfer+0x404>
 80086ae:	f107 0318 	add.w	r3, r7, #24
 80086b2:	1d3a      	adds	r2, r7, #4
 80086b4:	6812      	ldr	r2, [r2, #0]
 80086b6:	601a      	str	r2, [r3, #0]
 80086b8:	1d3b      	adds	r3, r7, #4
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	4619      	mov	r1, r3
 80086c4:	f107 0318 	add.w	r3, r7, #24
 80086c8:	f107 0218 	add.w	r2, r7, #24
 80086cc:	6812      	ldr	r2, [r2, #0]
 80086ce:	440a      	add	r2, r1
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	463b      	mov	r3, r7
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	011a      	lsls	r2, r3, #4
 80086da:	f107 0318 	add.w	r3, r7, #24
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4413      	add	r3, r2
 80086e2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80086e6:	f107 0314 	add.w	r3, r7, #20
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d11a      	bne.n	800872a <USB_EPStartXfer+0x38a>
 80086f4:	f107 0314 	add.w	r3, r7, #20
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008702:	b29a      	uxth	r2, r3
 8008704:	f107 0314 	add.w	r3, r7, #20
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	801a      	strh	r2, [r3, #0]
 800870c:	f107 0314 	add.w	r3, r7, #20
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	b29b      	uxth	r3, r3
 8008716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800871a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800871e:	b29a      	uxth	r2, r3
 8008720:	f107 0314 	add.w	r3, r7, #20
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	801a      	strh	r2, [r3, #0]
 8008728:	e067      	b.n	80087fa <USB_EPStartXfer+0x45a>
 800872a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800872e:	2b3e      	cmp	r3, #62	; 0x3e
 8008730:	d819      	bhi.n	8008766 <USB_EPStartXfer+0x3c6>
 8008732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008736:	085b      	lsrs	r3, r3, #1
 8008738:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800873c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	2b00      	cmp	r3, #0
 8008746:	d004      	beq.n	8008752 <USB_EPStartXfer+0x3b2>
 8008748:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800874c:	3301      	adds	r3, #1
 800874e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008752:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008756:	b29b      	uxth	r3, r3
 8008758:	029b      	lsls	r3, r3, #10
 800875a:	b29a      	uxth	r2, r3
 800875c:	f107 0314 	add.w	r3, r7, #20
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	801a      	strh	r2, [r3, #0]
 8008764:	e049      	b.n	80087fa <USB_EPStartXfer+0x45a>
 8008766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800876a:	095b      	lsrs	r3, r3, #5
 800876c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008774:	f003 031f 	and.w	r3, r3, #31
 8008778:	2b00      	cmp	r3, #0
 800877a:	d104      	bne.n	8008786 <USB_EPStartXfer+0x3e6>
 800877c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008780:	3b01      	subs	r3, #1
 8008782:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008786:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800878a:	b29b      	uxth	r3, r3
 800878c:	029b      	lsls	r3, r3, #10
 800878e:	b29b      	uxth	r3, r3
 8008790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008798:	b29a      	uxth	r2, r3
 800879a:	f107 0314 	add.w	r3, r7, #20
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	801a      	strh	r2, [r3, #0]
 80087a2:	e02a      	b.n	80087fa <USB_EPStartXfer+0x45a>
 80087a4:	463b      	mov	r3, r7
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	785b      	ldrb	r3, [r3, #1]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d125      	bne.n	80087fa <USB_EPStartXfer+0x45a>
 80087ae:	f107 0320 	add.w	r3, r7, #32
 80087b2:	1d3a      	adds	r2, r7, #4
 80087b4:	6812      	ldr	r2, [r2, #0]
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	1d3b      	adds	r3, r7, #4
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	4619      	mov	r1, r3
 80087c4:	f107 0320 	add.w	r3, r7, #32
 80087c8:	f107 0220 	add.w	r2, r7, #32
 80087cc:	6812      	ldr	r2, [r2, #0]
 80087ce:	440a      	add	r2, r1
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	463b      	mov	r3, r7
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	011a      	lsls	r2, r3, #4
 80087da:	f107 0320 	add.w	r3, r7, #32
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4413      	add	r3, r2
 80087e2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80087e6:	f107 031c 	add.w	r3, r7, #28
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	f107 031c 	add.w	r3, r7, #28
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80087fa:	463b      	mov	r3, r7
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	891b      	ldrh	r3, [r3, #8]
 8008800:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008804:	463b      	mov	r3, r7
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6959      	ldr	r1, [r3, #20]
 800880a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800880e:	b29b      	uxth	r3, r3
 8008810:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008814:	1d38      	adds	r0, r7, #4
 8008816:	6800      	ldr	r0, [r0, #0]
 8008818:	f001 f9f7 	bl	8009c0a <USB_WritePMA>
 800881c:	f000 bcc6 	b.w	80091ac <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008820:	463b      	mov	r3, r7
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	785b      	ldrb	r3, [r3, #1]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d164      	bne.n	80088f4 <USB_EPStartXfer+0x554>
 800882a:	1d3b      	adds	r3, r7, #4
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008830:	1d3b      	adds	r3, r7, #4
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008838:	b29b      	uxth	r3, r3
 800883a:	461a      	mov	r2, r3
 800883c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800883e:	4413      	add	r3, r2
 8008840:	64bb      	str	r3, [r7, #72]	; 0x48
 8008842:	463b      	mov	r3, r7
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	011a      	lsls	r2, r3, #4
 800884a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800884c:	4413      	add	r3, r2
 800884e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008852:	647b      	str	r3, [r7, #68]	; 0x44
 8008854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008858:	2b00      	cmp	r3, #0
 800885a:	d112      	bne.n	8008882 <USB_EPStartXfer+0x4e2>
 800885c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	b29b      	uxth	r3, r3
 8008862:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008866:	b29a      	uxth	r2, r3
 8008868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800886a:	801a      	strh	r2, [r3, #0]
 800886c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800886e:	881b      	ldrh	r3, [r3, #0]
 8008870:	b29b      	uxth	r3, r3
 8008872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800887a:	b29a      	uxth	r2, r3
 800887c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800887e:	801a      	strh	r2, [r3, #0]
 8008880:	e057      	b.n	8008932 <USB_EPStartXfer+0x592>
 8008882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008886:	2b3e      	cmp	r3, #62	; 0x3e
 8008888:	d817      	bhi.n	80088ba <USB_EPStartXfer+0x51a>
 800888a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800888e:	085b      	lsrs	r3, r3, #1
 8008890:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	d004      	beq.n	80088aa <USB_EPStartXfer+0x50a>
 80088a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80088a4:	3301      	adds	r3, #1
 80088a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80088aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	029b      	lsls	r3, r3, #10
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b6:	801a      	strh	r2, [r3, #0]
 80088b8:	e03b      	b.n	8008932 <USB_EPStartXfer+0x592>
 80088ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088be:	095b      	lsrs	r3, r3, #5
 80088c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80088c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c8:	f003 031f 	and.w	r3, r3, #31
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d104      	bne.n	80088da <USB_EPStartXfer+0x53a>
 80088d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80088d4:	3b01      	subs	r3, #1
 80088d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80088da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80088de:	b29b      	uxth	r3, r3
 80088e0:	029b      	lsls	r3, r3, #10
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088f0:	801a      	strh	r2, [r3, #0]
 80088f2:	e01e      	b.n	8008932 <USB_EPStartXfer+0x592>
 80088f4:	463b      	mov	r3, r7
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	785b      	ldrb	r3, [r3, #1]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d119      	bne.n	8008932 <USB_EPStartXfer+0x592>
 80088fe:	1d3b      	adds	r3, r7, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	653b      	str	r3, [r7, #80]	; 0x50
 8008904:	1d3b      	adds	r3, r7, #4
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800890c:	b29b      	uxth	r3, r3
 800890e:	461a      	mov	r2, r3
 8008910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008912:	4413      	add	r3, r2
 8008914:	653b      	str	r3, [r7, #80]	; 0x50
 8008916:	463b      	mov	r3, r7
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	011a      	lsls	r2, r3, #4
 800891e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008920:	4413      	add	r3, r2
 8008922:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800892c:	b29a      	uxth	r2, r3
 800892e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008930:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008932:	463b      	mov	r3, r7
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	891b      	ldrh	r3, [r3, #8]
 8008938:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800893c:	463b      	mov	r3, r7
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6959      	ldr	r1, [r3, #20]
 8008942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008946:	b29b      	uxth	r3, r3
 8008948:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800894c:	1d38      	adds	r0, r7, #4
 800894e:	6800      	ldr	r0, [r0, #0]
 8008950:	f001 f95b 	bl	8009c0a <USB_WritePMA>
            ep->xfer_buff += len;
 8008954:	463b      	mov	r3, r7
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	695a      	ldr	r2, [r3, #20]
 800895a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800895e:	441a      	add	r2, r3
 8008960:	463b      	mov	r3, r7
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008966:	463b      	mov	r3, r7
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	6a1a      	ldr	r2, [r3, #32]
 800896c:	463b      	mov	r3, r7
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	429a      	cmp	r2, r3
 8008974:	d909      	bls.n	800898a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8008976:	463b      	mov	r3, r7
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6a1a      	ldr	r2, [r3, #32]
 800897c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008980:	1ad2      	subs	r2, r2, r3
 8008982:	463b      	mov	r3, r7
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	621a      	str	r2, [r3, #32]
 8008988:	e008      	b.n	800899c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800898a:	463b      	mov	r3, r7
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008994:	463b      	mov	r3, r7
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2200      	movs	r2, #0
 800899a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800899c:	1d3b      	adds	r3, r7, #4
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	643b      	str	r3, [r7, #64]	; 0x40
 80089a2:	463b      	mov	r3, r7
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	785b      	ldrb	r3, [r3, #1]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d164      	bne.n	8008a76 <USB_EPStartXfer+0x6d6>
 80089ac:	1d3b      	adds	r3, r7, #4
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80089b2:	1d3b      	adds	r3, r7, #4
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	461a      	mov	r2, r3
 80089be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c0:	4413      	add	r3, r2
 80089c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80089c4:	463b      	mov	r3, r7
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	011a      	lsls	r2, r3, #4
 80089cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ce:	4413      	add	r3, r2
 80089d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089d4:	637b      	str	r3, [r7, #52]	; 0x34
 80089d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d112      	bne.n	8008a04 <USB_EPStartXfer+0x664>
 80089de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ec:	801a      	strh	r2, [r3, #0]
 80089ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a00:	801a      	strh	r2, [r3, #0]
 8008a02:	e054      	b.n	8008aae <USB_EPStartXfer+0x70e>
 8008a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a08:	2b3e      	cmp	r3, #62	; 0x3e
 8008a0a:	d817      	bhi.n	8008a3c <USB_EPStartXfer+0x69c>
 8008a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a10:	085b      	lsrs	r3, r3, #1
 8008a12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d004      	beq.n	8008a2c <USB_EPStartXfer+0x68c>
 8008a22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008a26:	3301      	adds	r3, #1
 8008a28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	029b      	lsls	r3, r3, #10
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a38:	801a      	strh	r2, [r3, #0]
 8008a3a:	e038      	b.n	8008aae <USB_EPStartXfer+0x70e>
 8008a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a4a:	f003 031f 	and.w	r3, r3, #31
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d104      	bne.n	8008a5c <USB_EPStartXfer+0x6bc>
 8008a52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008a56:	3b01      	subs	r3, #1
 8008a58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	029b      	lsls	r3, r3, #10
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a72:	801a      	strh	r2, [r3, #0]
 8008a74:	e01b      	b.n	8008aae <USB_EPStartXfer+0x70e>
 8008a76:	463b      	mov	r3, r7
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	785b      	ldrb	r3, [r3, #1]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d116      	bne.n	8008aae <USB_EPStartXfer+0x70e>
 8008a80:	1d3b      	adds	r3, r7, #4
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a8e:	4413      	add	r3, r2
 8008a90:	643b      	str	r3, [r7, #64]	; 0x40
 8008a92:	463b      	mov	r3, r7
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	011a      	lsls	r2, r3, #4
 8008a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008aae:	463b      	mov	r3, r7
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	895b      	ldrh	r3, [r3, #10]
 8008ab4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ab8:	463b      	mov	r3, r7
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6959      	ldr	r1, [r3, #20]
 8008abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ac8:	1d38      	adds	r0, r7, #4
 8008aca:	6800      	ldr	r0, [r0, #0]
 8008acc:	f001 f89d 	bl	8009c0a <USB_WritePMA>
 8008ad0:	e36c      	b.n	80091ac <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008ad2:	463b      	mov	r3, r7
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6a1b      	ldr	r3, [r3, #32]
 8008ad8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008adc:	1d3b      	adds	r3, r7, #4
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	463b      	mov	r3, r7
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008afa:	1d3b      	adds	r3, r7, #4
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	463b      	mov	r3, r7
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	441a      	add	r2, r3
 8008b08:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b20:	1d3b      	adds	r3, r7, #4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b26:	1d3b      	adds	r3, r7, #4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b34:	4413      	add	r3, r2
 8008b36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b38:	463b      	mov	r3, r7
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	011a      	lsls	r2, r3, #4
 8008b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b42:	4413      	add	r3, r2
 8008b44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b48:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b54:	463b      	mov	r3, r7
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	891b      	ldrh	r3, [r3, #8]
 8008b5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b5e:	463b      	mov	r3, r7
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6959      	ldr	r1, [r3, #20]
 8008b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b6e:	1d38      	adds	r0, r7, #4
 8008b70:	6800      	ldr	r0, [r0, #0]
 8008b72:	f001 f84a 	bl	8009c0a <USB_WritePMA>
 8008b76:	e319      	b.n	80091ac <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008b78:	1d3b      	adds	r3, r7, #4
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	463b      	mov	r3, r7
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b92:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008b96:	1d3b      	adds	r3, r7, #4
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	463b      	mov	r3, r7
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	441a      	add	r2, r3
 8008ba4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008bbc:	463b      	mov	r3, r7
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6a1a      	ldr	r2, [r3, #32]
 8008bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bc6:	1ad2      	subs	r2, r2, r3
 8008bc8:	463b      	mov	r3, r7
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008bce:	1d3b      	adds	r3, r7, #4
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	463b      	mov	r3, r7
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 8162 	beq.w	8008eae <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008bea:	1d3b      	adds	r3, r7, #4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008bf2:	463b      	mov	r3, r7
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d164      	bne.n	8008cc6 <USB_EPStartXfer+0x926>
 8008bfc:	1d3b      	adds	r3, r7, #4
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c02:	1d3b      	adds	r3, r7, #4
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c10:	4413      	add	r3, r2
 8008c12:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c14:	463b      	mov	r3, r7
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	011a      	lsls	r2, r3, #4
 8008c1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c1e:	4413      	add	r3, r2
 8008c20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c24:	677b      	str	r3, [r7, #116]	; 0x74
 8008c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d112      	bne.n	8008c54 <USB_EPStartXfer+0x8b4>
 8008c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c3c:	801a      	strh	r2, [r3, #0]
 8008c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c50:	801a      	strh	r2, [r3, #0]
 8008c52:	e057      	b.n	8008d04 <USB_EPStartXfer+0x964>
 8008c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c58:	2b3e      	cmp	r3, #62	; 0x3e
 8008c5a:	d817      	bhi.n	8008c8c <USB_EPStartXfer+0x8ec>
 8008c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c60:	085b      	lsrs	r3, r3, #1
 8008c62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d004      	beq.n	8008c7c <USB_EPStartXfer+0x8dc>
 8008c72:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c76:	3301      	adds	r3, #1
 8008c78:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	029b      	lsls	r3, r3, #10
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c88:	801a      	strh	r2, [r3, #0]
 8008c8a:	e03b      	b.n	8008d04 <USB_EPStartXfer+0x964>
 8008c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c90:	095b      	lsrs	r3, r3, #5
 8008c92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c9a:	f003 031f 	and.w	r3, r3, #31
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d104      	bne.n	8008cac <USB_EPStartXfer+0x90c>
 8008ca2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008cac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	029b      	lsls	r3, r3, #10
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cc2:	801a      	strh	r2, [r3, #0]
 8008cc4:	e01e      	b.n	8008d04 <USB_EPStartXfer+0x964>
 8008cc6:	463b      	mov	r3, r7
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	785b      	ldrb	r3, [r3, #1]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d119      	bne.n	8008d04 <USB_EPStartXfer+0x964>
 8008cd0:	1d3b      	adds	r3, r7, #4
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	461a      	mov	r2, r3
 8008cdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ce6:	463b      	mov	r3, r7
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	011a      	lsls	r2, r3, #4
 8008cee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008cf8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008d04:	463b      	mov	r3, r7
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	895b      	ldrh	r3, [r3, #10]
 8008d0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d0e:	463b      	mov	r3, r7
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6959      	ldr	r1, [r3, #20]
 8008d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008d1e:	1d38      	adds	r0, r7, #4
 8008d20:	6800      	ldr	r0, [r0, #0]
 8008d22:	f000 ff72 	bl	8009c0a <USB_WritePMA>
          ep->xfer_buff += len;
 8008d26:	463b      	mov	r3, r7
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	695a      	ldr	r2, [r3, #20]
 8008d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d30:	441a      	add	r2, r3
 8008d32:	463b      	mov	r3, r7
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008d38:	463b      	mov	r3, r7
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6a1a      	ldr	r2, [r3, #32]
 8008d3e:	463b      	mov	r3, r7
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d909      	bls.n	8008d5c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008d48:	463b      	mov	r3, r7
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6a1a      	ldr	r2, [r3, #32]
 8008d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d52:	1ad2      	subs	r2, r2, r3
 8008d54:	463b      	mov	r3, r7
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	621a      	str	r2, [r3, #32]
 8008d5a:	e008      	b.n	8008d6e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008d5c:	463b      	mov	r3, r7
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008d66:	463b      	mov	r3, r7
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 821a 	beq.w	80091ac <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d78:	463b      	mov	r3, r7
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	785b      	ldrb	r3, [r3, #1]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d164      	bne.n	8008e4c <USB_EPStartXfer+0xaac>
 8008d82:	1d3b      	adds	r3, r7, #4
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d88:	1d3b      	adds	r3, r7, #4
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	461a      	mov	r2, r3
 8008d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d96:	4413      	add	r3, r2
 8008d98:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d9a:	463b      	mov	r3, r7
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	011a      	lsls	r2, r3, #4
 8008da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008da4:	4413      	add	r3, r2
 8008da6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008daa:	667b      	str	r3, [r7, #100]	; 0x64
 8008dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d112      	bne.n	8008dda <USB_EPStartXfer+0xa3a>
 8008db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dc2:	801a      	strh	r2, [r3, #0]
 8008dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dd6:	801a      	strh	r2, [r3, #0]
 8008dd8:	e057      	b.n	8008e8a <USB_EPStartXfer+0xaea>
 8008dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dde:	2b3e      	cmp	r3, #62	; 0x3e
 8008de0:	d817      	bhi.n	8008e12 <USB_EPStartXfer+0xa72>
 8008de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de6:	085b      	lsrs	r3, r3, #1
 8008de8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d004      	beq.n	8008e02 <USB_EPStartXfer+0xa62>
 8008df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	029b      	lsls	r3, r3, #10
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e0e:	801a      	strh	r2, [r3, #0]
 8008e10:	e03b      	b.n	8008e8a <USB_EPStartXfer+0xaea>
 8008e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e16:	095b      	lsrs	r3, r3, #5
 8008e18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e20:	f003 031f 	and.w	r3, r3, #31
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d104      	bne.n	8008e32 <USB_EPStartXfer+0xa92>
 8008e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	029b      	lsls	r3, r3, #10
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e48:	801a      	strh	r2, [r3, #0]
 8008e4a:	e01e      	b.n	8008e8a <USB_EPStartXfer+0xaea>
 8008e4c:	463b      	mov	r3, r7
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	785b      	ldrb	r3, [r3, #1]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d119      	bne.n	8008e8a <USB_EPStartXfer+0xaea>
 8008e56:	1d3b      	adds	r3, r7, #4
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	673b      	str	r3, [r7, #112]	; 0x70
 8008e5c:	1d3b      	adds	r3, r7, #4
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	461a      	mov	r2, r3
 8008e68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e6a:	4413      	add	r3, r2
 8008e6c:	673b      	str	r3, [r7, #112]	; 0x70
 8008e6e:	463b      	mov	r3, r7
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	011a      	lsls	r2, r3, #4
 8008e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e78:	4413      	add	r3, r2
 8008e7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008e8a:	463b      	mov	r3, r7
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	891b      	ldrh	r3, [r3, #8]
 8008e90:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e94:	463b      	mov	r3, r7
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6959      	ldr	r1, [r3, #20]
 8008e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ea4:	1d38      	adds	r0, r7, #4
 8008ea6:	6800      	ldr	r0, [r0, #0]
 8008ea8:	f000 feaf 	bl	8009c0a <USB_WritePMA>
 8008eac:	e17e      	b.n	80091ac <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008eae:	463b      	mov	r3, r7
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	785b      	ldrb	r3, [r3, #1]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d16f      	bne.n	8008f98 <USB_EPStartXfer+0xbf8>
 8008eb8:	1d3b      	adds	r3, r7, #4
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ec0:	1d3b      	adds	r3, r7, #4
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	011a      	lsls	r2, r3, #4
 8008ede:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d116      	bne.n	8008f22 <USB_EPStartXfer+0xb82>
 8008ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f06:	801a      	strh	r2, [r3, #0]
 8008f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f0c:	881b      	ldrh	r3, [r3, #0]
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f1e:	801a      	strh	r2, [r3, #0]
 8008f20:	e05f      	b.n	8008fe2 <USB_EPStartXfer+0xc42>
 8008f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f26:	2b3e      	cmp	r3, #62	; 0x3e
 8008f28:	d818      	bhi.n	8008f5c <USB_EPStartXfer+0xbbc>
 8008f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f2e:	085b      	lsrs	r3, r3, #1
 8008f30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d004      	beq.n	8008f4a <USB_EPStartXfer+0xbaa>
 8008f40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f44:	3301      	adds	r3, #1
 8008f46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	029b      	lsls	r3, r3, #10
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f58:	801a      	strh	r2, [r3, #0]
 8008f5a:	e042      	b.n	8008fe2 <USB_EPStartXfer+0xc42>
 8008f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f60:	095b      	lsrs	r3, r3, #5
 8008f62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f6a:	f003 031f 	and.w	r3, r3, #31
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d104      	bne.n	8008f7c <USB_EPStartXfer+0xbdc>
 8008f72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f76:	3b01      	subs	r3, #1
 8008f78:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008f7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	029b      	lsls	r3, r3, #10
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f94:	801a      	strh	r2, [r3, #0]
 8008f96:	e024      	b.n	8008fe2 <USB_EPStartXfer+0xc42>
 8008f98:	463b      	mov	r3, r7
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d11f      	bne.n	8008fe2 <USB_EPStartXfer+0xc42>
 8008fa2:	1d3b      	adds	r3, r7, #4
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008faa:	1d3b      	adds	r3, r7, #4
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008fba:	4413      	add	r3, r2
 8008fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008fc0:	463b      	mov	r3, r7
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	011a      	lsls	r2, r3, #4
 8008fc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008fcc:	4413      	add	r3, r2
 8008fce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fe0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	891b      	ldrh	r3, [r3, #8]
 8008fe8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fec:	463b      	mov	r3, r7
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6959      	ldr	r1, [r3, #20]
 8008ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ffc:	1d38      	adds	r0, r7, #4
 8008ffe:	6800      	ldr	r0, [r0, #0]
 8009000:	f000 fe03 	bl	8009c0a <USB_WritePMA>
          ep->xfer_buff += len;
 8009004:	463b      	mov	r3, r7
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	695a      	ldr	r2, [r3, #20]
 800900a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800900e:	441a      	add	r2, r3
 8009010:	463b      	mov	r3, r7
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009016:	463b      	mov	r3, r7
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	6a1a      	ldr	r2, [r3, #32]
 800901c:	463b      	mov	r3, r7
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	429a      	cmp	r2, r3
 8009024:	d909      	bls.n	800903a <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8009026:	463b      	mov	r3, r7
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6a1a      	ldr	r2, [r3, #32]
 800902c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009030:	1ad2      	subs	r2, r2, r3
 8009032:	463b      	mov	r3, r7
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	621a      	str	r2, [r3, #32]
 8009038:	e008      	b.n	800904c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800903a:	463b      	mov	r3, r7
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6a1b      	ldr	r3, [r3, #32]
 8009040:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009044:	463b      	mov	r3, r7
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2200      	movs	r2, #0
 800904a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800904c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 80ab 	beq.w	80091ac <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009056:	1d3b      	adds	r3, r7, #4
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800905e:	463b      	mov	r3, r7
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	785b      	ldrb	r3, [r3, #1]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d16f      	bne.n	8009148 <USB_EPStartXfer+0xda8>
 8009068:	1d3b      	adds	r3, r7, #4
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009070:	1d3b      	adds	r3, r7, #4
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009078:	b29b      	uxth	r3, r3
 800907a:	461a      	mov	r2, r3
 800907c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009080:	4413      	add	r3, r2
 8009082:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009086:	463b      	mov	r3, r7
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	011a      	lsls	r2, r3, #4
 800908e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009092:	4413      	add	r3, r2
 8009094:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800909c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d116      	bne.n	80090d2 <USB_EPStartXfer+0xd32>
 80090a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090b6:	801a      	strh	r2, [r3, #0]
 80090b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090ce:	801a      	strh	r2, [r3, #0]
 80090d0:	e05b      	b.n	800918a <USB_EPStartXfer+0xdea>
 80090d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d6:	2b3e      	cmp	r3, #62	; 0x3e
 80090d8:	d818      	bhi.n	800910c <USB_EPStartXfer+0xd6c>
 80090da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090de:	085b      	lsrs	r3, r3, #1
 80090e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80090e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d004      	beq.n	80090fa <USB_EPStartXfer+0xd5a>
 80090f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090f4:	3301      	adds	r3, #1
 80090f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80090fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090fe:	b29b      	uxth	r3, r3
 8009100:	029b      	lsls	r3, r3, #10
 8009102:	b29a      	uxth	r2, r3
 8009104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009108:	801a      	strh	r2, [r3, #0]
 800910a:	e03e      	b.n	800918a <USB_EPStartXfer+0xdea>
 800910c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009110:	095b      	lsrs	r3, r3, #5
 8009112:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800911a:	f003 031f 	and.w	r3, r3, #31
 800911e:	2b00      	cmp	r3, #0
 8009120:	d104      	bne.n	800912c <USB_EPStartXfer+0xd8c>
 8009122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009126:	3b01      	subs	r3, #1
 8009128:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800912c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009130:	b29b      	uxth	r3, r3
 8009132:	029b      	lsls	r3, r3, #10
 8009134:	b29b      	uxth	r3, r3
 8009136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800913a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800913e:	b29a      	uxth	r2, r3
 8009140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	e020      	b.n	800918a <USB_EPStartXfer+0xdea>
 8009148:	463b      	mov	r3, r7
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	785b      	ldrb	r3, [r3, #1]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d11b      	bne.n	800918a <USB_EPStartXfer+0xdea>
 8009152:	1d3b      	adds	r3, r7, #4
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800915a:	b29b      	uxth	r3, r3
 800915c:	461a      	mov	r2, r3
 800915e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009162:	4413      	add	r3, r2
 8009164:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009168:	463b      	mov	r3, r7
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	011a      	lsls	r2, r3, #4
 8009170:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009174:	4413      	add	r3, r2
 8009176:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800917a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800917e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009182:	b29a      	uxth	r2, r3
 8009184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009188:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800918a:	463b      	mov	r3, r7
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	895b      	ldrh	r3, [r3, #10]
 8009190:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009194:	463b      	mov	r3, r7
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6959      	ldr	r1, [r3, #20]
 800919a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800919e:	b29b      	uxth	r3, r3
 80091a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80091a4:	1d38      	adds	r0, r7, #4
 80091a6:	6800      	ldr	r0, [r0, #0]
 80091a8:	f000 fd2f 	bl	8009c0a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80091ac:	1d3b      	adds	r3, r7, #4
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	463b      	mov	r3, r7
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	f107 020a 	add.w	r2, r7, #10
 80091c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ca:	8013      	strh	r3, [r2, #0]
 80091cc:	f107 030a 	add.w	r3, r7, #10
 80091d0:	f107 020a 	add.w	r2, r7, #10
 80091d4:	8812      	ldrh	r2, [r2, #0]
 80091d6:	f082 0210 	eor.w	r2, r2, #16
 80091da:	801a      	strh	r2, [r3, #0]
 80091dc:	f107 030a 	add.w	r3, r7, #10
 80091e0:	f107 020a 	add.w	r2, r7, #10
 80091e4:	8812      	ldrh	r2, [r2, #0]
 80091e6:	f082 0220 	eor.w	r2, r2, #32
 80091ea:	801a      	strh	r2, [r3, #0]
 80091ec:	1d3b      	adds	r3, r7, #4
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	463b      	mov	r3, r7
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	441a      	add	r2, r3
 80091fa:	f107 030a 	add.w	r3, r7, #10
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800920c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009210:	b29b      	uxth	r3, r3
 8009212:	8013      	strh	r3, [r2, #0]
 8009214:	e3b5      	b.n	8009982 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009216:	463b      	mov	r3, r7
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	7b1b      	ldrb	r3, [r3, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	f040 8090 	bne.w	8009342 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009222:	463b      	mov	r3, r7
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	699a      	ldr	r2, [r3, #24]
 8009228:	463b      	mov	r3, r7
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	429a      	cmp	r2, r3
 8009230:	d90e      	bls.n	8009250 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8009232:	463b      	mov	r3, r7
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800923c:	463b      	mov	r3, r7
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	699a      	ldr	r2, [r3, #24]
 8009242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009246:	1ad2      	subs	r2, r2, r3
 8009248:	463b      	mov	r3, r7
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	619a      	str	r2, [r3, #24]
 800924e:	e008      	b.n	8009262 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8009250:	463b      	mov	r3, r7
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800925a:	463b      	mov	r3, r7
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2200      	movs	r2, #0
 8009260:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009262:	1d3b      	adds	r3, r7, #4
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800926a:	1d3b      	adds	r3, r7, #4
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009272:	b29b      	uxth	r3, r3
 8009274:	461a      	mov	r2, r3
 8009276:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800927a:	4413      	add	r3, r2
 800927c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009280:	463b      	mov	r3, r7
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	011a      	lsls	r2, r3, #4
 8009288:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800928c:	4413      	add	r3, r2
 800928e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800929a:	2b00      	cmp	r3, #0
 800929c:	d116      	bne.n	80092cc <USB_EPStartXfer+0xf2c>
 800929e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092b0:	801a      	strh	r2, [r3, #0]
 80092b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092c8:	801a      	strh	r2, [r3, #0]
 80092ca:	e32c      	b.n	8009926 <USB_EPStartXfer+0x1586>
 80092cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d0:	2b3e      	cmp	r3, #62	; 0x3e
 80092d2:	d818      	bhi.n	8009306 <USB_EPStartXfer+0xf66>
 80092d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d8:	085b      	lsrs	r3, r3, #1
 80092da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80092de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d004      	beq.n	80092f4 <USB_EPStartXfer+0xf54>
 80092ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80092ee:	3301      	adds	r3, #1
 80092f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80092f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	029b      	lsls	r3, r3, #10
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009302:	801a      	strh	r2, [r3, #0]
 8009304:	e30f      	b.n	8009926 <USB_EPStartXfer+0x1586>
 8009306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800930a:	095b      	lsrs	r3, r3, #5
 800930c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009314:	f003 031f 	and.w	r3, r3, #31
 8009318:	2b00      	cmp	r3, #0
 800931a:	d104      	bne.n	8009326 <USB_EPStartXfer+0xf86>
 800931c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009320:	3b01      	subs	r3, #1
 8009322:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009326:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800932a:	b29b      	uxth	r3, r3
 800932c:	029b      	lsls	r3, r3, #10
 800932e:	b29b      	uxth	r3, r3
 8009330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009338:	b29a      	uxth	r2, r3
 800933a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800933e:	801a      	strh	r2, [r3, #0]
 8009340:	e2f1      	b.n	8009926 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009342:	463b      	mov	r3, r7
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	78db      	ldrb	r3, [r3, #3]
 8009348:	2b02      	cmp	r3, #2
 800934a:	f040 818f 	bne.w	800966c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800934e:	463b      	mov	r3, r7
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	785b      	ldrb	r3, [r3, #1]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d175      	bne.n	8009444 <USB_EPStartXfer+0x10a4>
 8009358:	1d3b      	adds	r3, r7, #4
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009360:	1d3b      	adds	r3, r7, #4
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009368:	b29b      	uxth	r3, r3
 800936a:	461a      	mov	r2, r3
 800936c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009370:	4413      	add	r3, r2
 8009372:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009376:	463b      	mov	r3, r7
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	011a      	lsls	r2, r3, #4
 800937e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009382:	4413      	add	r3, r2
 8009384:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800938c:	463b      	mov	r3, r7
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d116      	bne.n	80093c4 <USB_EPStartXfer+0x1024>
 8009396:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800939a:	881b      	ldrh	r3, [r3, #0]
 800939c:	b29b      	uxth	r3, r3
 800939e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093a8:	801a      	strh	r2, [r3, #0]
 80093aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093c0:	801a      	strh	r2, [r3, #0]
 80093c2:	e065      	b.n	8009490 <USB_EPStartXfer+0x10f0>
 80093c4:	463b      	mov	r3, r7
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	2b3e      	cmp	r3, #62	; 0x3e
 80093cc:	d81a      	bhi.n	8009404 <USB_EPStartXfer+0x1064>
 80093ce:	463b      	mov	r3, r7
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	085b      	lsrs	r3, r3, #1
 80093d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80093da:	463b      	mov	r3, r7
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d004      	beq.n	80093f2 <USB_EPStartXfer+0x1052>
 80093e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ec:	3301      	adds	r3, #1
 80093ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80093f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	029b      	lsls	r3, r3, #10
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009400:	801a      	strh	r2, [r3, #0]
 8009402:	e045      	b.n	8009490 <USB_EPStartXfer+0x10f0>
 8009404:	463b      	mov	r3, r7
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	095b      	lsrs	r3, r3, #5
 800940c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009410:	463b      	mov	r3, r7
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	f003 031f 	and.w	r3, r3, #31
 800941a:	2b00      	cmp	r3, #0
 800941c:	d104      	bne.n	8009428 <USB_EPStartXfer+0x1088>
 800941e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009422:	3b01      	subs	r3, #1
 8009424:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800942c:	b29b      	uxth	r3, r3
 800942e:	029b      	lsls	r3, r3, #10
 8009430:	b29b      	uxth	r3, r3
 8009432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800943a:	b29a      	uxth	r2, r3
 800943c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009440:	801a      	strh	r2, [r3, #0]
 8009442:	e025      	b.n	8009490 <USB_EPStartXfer+0x10f0>
 8009444:	463b      	mov	r3, r7
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	785b      	ldrb	r3, [r3, #1]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d120      	bne.n	8009490 <USB_EPStartXfer+0x10f0>
 800944e:	1d3b      	adds	r3, r7, #4
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009456:	1d3b      	adds	r3, r7, #4
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800945e:	b29b      	uxth	r3, r3
 8009460:	461a      	mov	r2, r3
 8009462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009466:	4413      	add	r3, r2
 8009468:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800946c:	463b      	mov	r3, r7
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	011a      	lsls	r2, r3, #4
 8009474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009478:	4413      	add	r3, r2
 800947a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800947e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009482:	463b      	mov	r3, r7
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	b29a      	uxth	r2, r3
 800948a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800948e:	801a      	strh	r2, [r3, #0]
 8009490:	1d3b      	adds	r3, r7, #4
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009498:	463b      	mov	r3, r7
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	785b      	ldrb	r3, [r3, #1]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d175      	bne.n	800958e <USB_EPStartXfer+0x11ee>
 80094a2:	1d3b      	adds	r3, r7, #4
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80094aa:	1d3b      	adds	r3, r7, #4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	461a      	mov	r2, r3
 80094b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094ba:	4413      	add	r3, r2
 80094bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80094c0:	463b      	mov	r3, r7
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	011a      	lsls	r2, r3, #4
 80094c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094cc:	4413      	add	r3, r2
 80094ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094d6:	463b      	mov	r3, r7
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d116      	bne.n	800950e <USB_EPStartXfer+0x116e>
 80094e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094f2:	801a      	strh	r2, [r3, #0]
 80094f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094f8:	881b      	ldrh	r3, [r3, #0]
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009504:	b29a      	uxth	r2, r3
 8009506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800950a:	801a      	strh	r2, [r3, #0]
 800950c:	e061      	b.n	80095d2 <USB_EPStartXfer+0x1232>
 800950e:	463b      	mov	r3, r7
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b3e      	cmp	r3, #62	; 0x3e
 8009516:	d81a      	bhi.n	800954e <USB_EPStartXfer+0x11ae>
 8009518:	463b      	mov	r3, r7
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	085b      	lsrs	r3, r3, #1
 8009520:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009524:	463b      	mov	r3, r7
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d004      	beq.n	800953c <USB_EPStartXfer+0x119c>
 8009532:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009536:	3301      	adds	r3, #1
 8009538:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800953c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009540:	b29b      	uxth	r3, r3
 8009542:	029b      	lsls	r3, r3, #10
 8009544:	b29a      	uxth	r2, r3
 8009546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800954a:	801a      	strh	r2, [r3, #0]
 800954c:	e041      	b.n	80095d2 <USB_EPStartXfer+0x1232>
 800954e:	463b      	mov	r3, r7
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	095b      	lsrs	r3, r3, #5
 8009556:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800955a:	463b      	mov	r3, r7
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	f003 031f 	and.w	r3, r3, #31
 8009564:	2b00      	cmp	r3, #0
 8009566:	d104      	bne.n	8009572 <USB_EPStartXfer+0x11d2>
 8009568:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800956c:	3b01      	subs	r3, #1
 800956e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009572:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009576:	b29b      	uxth	r3, r3
 8009578:	029b      	lsls	r3, r3, #10
 800957a:	b29b      	uxth	r3, r3
 800957c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009584:	b29a      	uxth	r2, r3
 8009586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800958a:	801a      	strh	r2, [r3, #0]
 800958c:	e021      	b.n	80095d2 <USB_EPStartXfer+0x1232>
 800958e:	463b      	mov	r3, r7
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	785b      	ldrb	r3, [r3, #1]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d11c      	bne.n	80095d2 <USB_EPStartXfer+0x1232>
 8009598:	1d3b      	adds	r3, r7, #4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	461a      	mov	r2, r3
 80095a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80095a8:	4413      	add	r3, r2
 80095aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095ae:	463b      	mov	r3, r7
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	011a      	lsls	r2, r3, #4
 80095b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80095ba:	4413      	add	r3, r2
 80095bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095c4:	463b      	mov	r3, r7
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80095d0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80095d2:	463b      	mov	r3, r7
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f000 81a4 	beq.w	8009926 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80095de:	1d3b      	adds	r3, r7, #4
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	463b      	mov	r3, r7
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80095f2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80095f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d005      	beq.n	800960a <USB_EPStartXfer+0x126a>
 80095fe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10d      	bne.n	8009626 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800960a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800960e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009612:	2b00      	cmp	r3, #0
 8009614:	f040 8187 	bne.w	8009926 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009618:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800961c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009620:	2b00      	cmp	r3, #0
 8009622:	f040 8180 	bne.w	8009926 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009626:	1d3b      	adds	r3, r7, #4
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	463b      	mov	r3, r7
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	b29b      	uxth	r3, r3
 8009638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800963c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009640:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009644:	1d3b      	adds	r3, r7, #4
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	463b      	mov	r3, r7
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	441a      	add	r2, r3
 8009652:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800965a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800965e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009662:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009666:	b29b      	uxth	r3, r3
 8009668:	8013      	strh	r3, [r2, #0]
 800966a:	e15c      	b.n	8009926 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800966c:	463b      	mov	r3, r7
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	78db      	ldrb	r3, [r3, #3]
 8009672:	2b01      	cmp	r3, #1
 8009674:	f040 8155 	bne.w	8009922 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009678:	463b      	mov	r3, r7
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	699a      	ldr	r2, [r3, #24]
 800967e:	463b      	mov	r3, r7
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	429a      	cmp	r2, r3
 8009686:	d90e      	bls.n	80096a6 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8009688:	463b      	mov	r3, r7
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009692:	463b      	mov	r3, r7
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	699a      	ldr	r2, [r3, #24]
 8009698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800969c:	1ad2      	subs	r2, r2, r3
 800969e:	463b      	mov	r3, r7
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	619a      	str	r2, [r3, #24]
 80096a4:	e008      	b.n	80096b8 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80096a6:	463b      	mov	r3, r7
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80096b0:	463b      	mov	r3, r7
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2200      	movs	r2, #0
 80096b6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80096b8:	463b      	mov	r3, r7
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	785b      	ldrb	r3, [r3, #1]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d16f      	bne.n	80097a2 <USB_EPStartXfer+0x1402>
 80096c2:	1d3b      	adds	r3, r7, #4
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80096ca:	1d3b      	adds	r3, r7, #4
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	461a      	mov	r2, r3
 80096d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096da:	4413      	add	r3, r2
 80096dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80096e0:	463b      	mov	r3, r7
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	011a      	lsls	r2, r3, #4
 80096e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096ec:	4413      	add	r3, r2
 80096ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d116      	bne.n	800972c <USB_EPStartXfer+0x138c>
 80096fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	b29b      	uxth	r3, r3
 8009706:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800970a:	b29a      	uxth	r2, r3
 800970c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009710:	801a      	strh	r2, [r3, #0]
 8009712:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009716:	881b      	ldrh	r3, [r3, #0]
 8009718:	b29b      	uxth	r3, r3
 800971a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800971e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009722:	b29a      	uxth	r2, r3
 8009724:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009728:	801a      	strh	r2, [r3, #0]
 800972a:	e05f      	b.n	80097ec <USB_EPStartXfer+0x144c>
 800972c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009730:	2b3e      	cmp	r3, #62	; 0x3e
 8009732:	d818      	bhi.n	8009766 <USB_EPStartXfer+0x13c6>
 8009734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009738:	085b      	lsrs	r3, r3, #1
 800973a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800973e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	2b00      	cmp	r3, #0
 8009748:	d004      	beq.n	8009754 <USB_EPStartXfer+0x13b4>
 800974a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800974e:	3301      	adds	r3, #1
 8009750:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009758:	b29b      	uxth	r3, r3
 800975a:	029b      	lsls	r3, r3, #10
 800975c:	b29a      	uxth	r2, r3
 800975e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009762:	801a      	strh	r2, [r3, #0]
 8009764:	e042      	b.n	80097ec <USB_EPStartXfer+0x144c>
 8009766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800976a:	095b      	lsrs	r3, r3, #5
 800976c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009774:	f003 031f 	and.w	r3, r3, #31
 8009778:	2b00      	cmp	r3, #0
 800977a:	d104      	bne.n	8009786 <USB_EPStartXfer+0x13e6>
 800977c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009780:	3b01      	subs	r3, #1
 8009782:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800978a:	b29b      	uxth	r3, r3
 800978c:	029b      	lsls	r3, r3, #10
 800978e:	b29b      	uxth	r3, r3
 8009790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009798:	b29a      	uxth	r2, r3
 800979a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800979e:	801a      	strh	r2, [r3, #0]
 80097a0:	e024      	b.n	80097ec <USB_EPStartXfer+0x144c>
 80097a2:	463b      	mov	r3, r7
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	785b      	ldrb	r3, [r3, #1]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d11f      	bne.n	80097ec <USB_EPStartXfer+0x144c>
 80097ac:	1d3b      	adds	r3, r7, #4
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80097b4:	1d3b      	adds	r3, r7, #4
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097bc:	b29b      	uxth	r3, r3
 80097be:	461a      	mov	r2, r3
 80097c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c4:	4413      	add	r3, r2
 80097c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80097ca:	463b      	mov	r3, r7
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	011a      	lsls	r2, r3, #4
 80097d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d6:	4413      	add	r3, r2
 80097d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80097e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80097ea:	801a      	strh	r2, [r3, #0]
 80097ec:	1d3b      	adds	r3, r7, #4
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097f4:	463b      	mov	r3, r7
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	785b      	ldrb	r3, [r3, #1]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d16f      	bne.n	80098de <USB_EPStartXfer+0x153e>
 80097fe:	1d3b      	adds	r3, r7, #4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009806:	1d3b      	adds	r3, r7, #4
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800980e:	b29b      	uxth	r3, r3
 8009810:	461a      	mov	r2, r3
 8009812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009816:	4413      	add	r3, r2
 8009818:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800981c:	463b      	mov	r3, r7
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	011a      	lsls	r2, r3, #4
 8009824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009828:	4413      	add	r3, r2
 800982a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800982e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009836:	2b00      	cmp	r3, #0
 8009838:	d116      	bne.n	8009868 <USB_EPStartXfer+0x14c8>
 800983a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	b29b      	uxth	r3, r3
 8009842:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009846:	b29a      	uxth	r2, r3
 8009848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800984c:	801a      	strh	r2, [r3, #0]
 800984e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009852:	881b      	ldrh	r3, [r3, #0]
 8009854:	b29b      	uxth	r3, r3
 8009856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800985a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800985e:	b29a      	uxth	r2, r3
 8009860:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009864:	801a      	strh	r2, [r3, #0]
 8009866:	e05e      	b.n	8009926 <USB_EPStartXfer+0x1586>
 8009868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800986c:	2b3e      	cmp	r3, #62	; 0x3e
 800986e:	d818      	bhi.n	80098a2 <USB_EPStartXfer+0x1502>
 8009870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009874:	085b      	lsrs	r3, r3, #1
 8009876:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800987a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	d004      	beq.n	8009890 <USB_EPStartXfer+0x14f0>
 8009886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800988a:	3301      	adds	r3, #1
 800988c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009890:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009894:	b29b      	uxth	r3, r3
 8009896:	029b      	lsls	r3, r3, #10
 8009898:	b29a      	uxth	r2, r3
 800989a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800989e:	801a      	strh	r2, [r3, #0]
 80098a0:	e041      	b.n	8009926 <USB_EPStartXfer+0x1586>
 80098a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098a6:	095b      	lsrs	r3, r3, #5
 80098a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b0:	f003 031f 	and.w	r3, r3, #31
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d104      	bne.n	80098c2 <USB_EPStartXfer+0x1522>
 80098b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098bc:	3b01      	subs	r3, #1
 80098be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	029b      	lsls	r3, r3, #10
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098da:	801a      	strh	r2, [r3, #0]
 80098dc:	e023      	b.n	8009926 <USB_EPStartXfer+0x1586>
 80098de:	463b      	mov	r3, r7
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	785b      	ldrb	r3, [r3, #1]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d11e      	bne.n	8009926 <USB_EPStartXfer+0x1586>
 80098e8:	1d3b      	adds	r3, r7, #4
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	461a      	mov	r2, r3
 80098f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098f8:	4413      	add	r3, r2
 80098fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80098fe:	463b      	mov	r3, r7
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	011a      	lsls	r2, r3, #4
 8009906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800990a:	4413      	add	r3, r2
 800990c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009918:	b29a      	uxth	r2, r3
 800991a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800991e:	801a      	strh	r2, [r3, #0]
 8009920:	e001      	b.n	8009926 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e02e      	b.n	8009984 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009926:	1d3b      	adds	r3, r7, #4
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	463b      	mov	r3, r7
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	b29b      	uxth	r3, r3
 8009938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800993c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009940:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009944:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009948:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800994c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009950:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009954:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009958:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800995c:	1d3b      	adds	r3, r7, #4
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	463b      	mov	r3, r7
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	441a      	add	r2, r3
 800996a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800996e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800997a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800997e:	b29b      	uxth	r3, r3
 8009980:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800998e:	b480      	push	{r7}
 8009990:	b085      	sub	sp, #20
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	785b      	ldrb	r3, [r3, #1]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d020      	beq.n	80099e2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	881b      	ldrh	r3, [r3, #0]
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099b6:	81bb      	strh	r3, [r7, #12]
 80099b8:	89bb      	ldrh	r3, [r7, #12]
 80099ba:	f083 0310 	eor.w	r3, r3, #16
 80099be:	81bb      	strh	r3, [r7, #12]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	441a      	add	r2, r3
 80099ca:	89bb      	ldrh	r3, [r7, #12]
 80099cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099dc:	b29b      	uxth	r3, r3
 80099de:	8013      	strh	r3, [r2, #0]
 80099e0:	e01f      	b.n	8009a22 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	881b      	ldrh	r3, [r3, #0]
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f8:	81fb      	strh	r3, [r7, #14]
 80099fa:	89fb      	ldrh	r3, [r7, #14]
 80099fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a00:	81fb      	strh	r3, [r7, #14]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	441a      	add	r2, r3
 8009a0c:	89fb      	ldrh	r3, [r7, #14]
 8009a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bc80      	pop	{r7}
 8009a2c:	4770      	bx	lr

08009a2e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b087      	sub	sp, #28
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	7b1b      	ldrb	r3, [r3, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f040 809d 	bne.w	8009b7c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d04c      	beq.n	8009ae4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	823b      	strh	r3, [r7, #16]
 8009a58:	8a3b      	ldrh	r3, [r7, #16]
 8009a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d01b      	beq.n	8009a9a <USB_EPClearStall+0x6c>
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a78:	81fb      	strh	r3, [r7, #14]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	441a      	add	r2, r3
 8009a84:	89fb      	ldrh	r3, [r7, #14]
 8009a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	78db      	ldrb	r3, [r3, #3]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d06c      	beq.n	8009b7c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ab8:	81bb      	strh	r3, [r7, #12]
 8009aba:	89bb      	ldrh	r3, [r7, #12]
 8009abc:	f083 0320 	eor.w	r3, r3, #32
 8009ac0:	81bb      	strh	r3, [r7, #12]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	441a      	add	r2, r3
 8009acc:	89bb      	ldrh	r3, [r7, #12]
 8009ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	8013      	strh	r3, [r2, #0]
 8009ae2:	e04b      	b.n	8009b7c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4413      	add	r3, r2
 8009aee:	881b      	ldrh	r3, [r3, #0]
 8009af0:	82fb      	strh	r3, [r7, #22]
 8009af2:	8afb      	ldrh	r3, [r7, #22]
 8009af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d01b      	beq.n	8009b34 <USB_EPClearStall+0x106>
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b12:	82bb      	strh	r3, [r7, #20]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	441a      	add	r2, r3
 8009b1e:	8abb      	ldrh	r3, [r7, #20]
 8009b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	881b      	ldrh	r3, [r3, #0]
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b4a:	827b      	strh	r3, [r7, #18]
 8009b4c:	8a7b      	ldrh	r3, [r7, #18]
 8009b4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b52:	827b      	strh	r3, [r7, #18]
 8009b54:	8a7b      	ldrh	r3, [r7, #18]
 8009b56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b5a:	827b      	strh	r3, [r7, #18]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	441a      	add	r2, r3
 8009b66:	8a7b      	ldrh	r3, [r7, #18]
 8009b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	371c      	adds	r7, #28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bc80      	pop	{r7}
 8009b86:	4770      	bx	lr

08009b88 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009b94:	78fb      	ldrb	r3, [r7, #3]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d103      	bne.n	8009ba2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2280      	movs	r2, #128	; 0x80
 8009b9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bc80      	pop	{r7}
 8009bac:	4770      	bx	lr

08009bae <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b083      	sub	sp, #12
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bc80      	pop	{r7}
 8009bc0:	4770      	bx	lr

08009bc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b083      	sub	sp, #12
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bc80      	pop	{r7}
 8009bd4:	4770      	bx	lr

08009bd6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b085      	sub	sp, #20
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009be8:	68fb      	ldr	r3, [r7, #12]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bc80      	pop	{r7}
 8009bf2:	4770      	bx	lr

08009bf4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bc80      	pop	{r7}
 8009c08:	4770      	bx	lr

08009c0a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b08d      	sub	sp, #52	; 0x34
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	60f8      	str	r0, [r7, #12]
 8009c12:	60b9      	str	r1, [r7, #8]
 8009c14:	4611      	mov	r1, r2
 8009c16:	461a      	mov	r2, r3
 8009c18:	460b      	mov	r3, r1
 8009c1a:	80fb      	strh	r3, [r7, #6]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009c20:	88bb      	ldrh	r3, [r7, #4]
 8009c22:	3301      	adds	r3, #1
 8009c24:	085b      	lsrs	r3, r3, #1
 8009c26:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c30:	88fb      	ldrh	r3, [r7, #6]
 8009c32:	005a      	lsls	r2, r3, #1
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c3c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c42:	e01e      	b.n	8009c82 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	021b      	lsls	r3, r3, #8
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6c:	3302      	adds	r3, #2
 8009c6e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c72:	3302      	adds	r3, #2
 8009c74:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	3301      	adds	r3, #1
 8009c7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1dd      	bne.n	8009c44 <USB_WritePMA+0x3a>
  }
}
 8009c88:	bf00      	nop
 8009c8a:	bf00      	nop
 8009c8c:	3734      	adds	r7, #52	; 0x34
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bc80      	pop	{r7}
 8009c92:	4770      	bx	lr

08009c94 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b08b      	sub	sp, #44	; 0x2c
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	80fb      	strh	r3, [r7, #6]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009caa:	88bb      	ldrh	r3, [r7, #4]
 8009cac:	085b      	lsrs	r3, r3, #1
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009cba:	88fb      	ldrh	r3, [r7, #6]
 8009cbc:	005a      	lsls	r2, r3, #1
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cc6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	627b      	str	r3, [r7, #36]	; 0x24
 8009ccc:	e01b      	b.n	8009d06 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	3302      	adds	r3, #2
 8009cda:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	0a1b      	lsrs	r3, r3, #8
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	3302      	adds	r3, #2
 8009cfe:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	3b01      	subs	r3, #1
 8009d04:	627b      	str	r3, [r7, #36]	; 0x24
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e0      	bne.n	8009cce <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009d0c:	88bb      	ldrh	r3, [r7, #4]
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d007      	beq.n	8009d28 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	701a      	strb	r2, [r3, #0]
  }
}
 8009d28:	bf00      	nop
 8009d2a:	372c      	adds	r7, #44	; 0x2c
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bc80      	pop	{r7}
 8009d30:	4770      	bx	lr

08009d32 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	7c1b      	ldrb	r3, [r3, #16]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d115      	bne.n	8009d76 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d4e:	2202      	movs	r2, #2
 8009d50:	2181      	movs	r1, #129	; 0x81
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f001 fe87 	bl	800ba66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d62:	2202      	movs	r2, #2
 8009d64:	2101      	movs	r1, #1
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f001 fe7d 	bl	800ba66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009d74:	e012      	b.n	8009d9c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d76:	2340      	movs	r3, #64	; 0x40
 8009d78:	2202      	movs	r2, #2
 8009d7a:	2181      	movs	r1, #129	; 0x81
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f001 fe72 	bl	800ba66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d88:	2340      	movs	r3, #64	; 0x40
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f001 fe69 	bl	800ba66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d9c:	2308      	movs	r3, #8
 8009d9e:	2203      	movs	r2, #3
 8009da0:	2182      	movs	r1, #130	; 0x82
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f001 fe5f 	bl	800ba66 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009dae:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009db2:	f001 ff7f 	bl	800bcb4 <USBD_static_malloc>
 8009db6:	4602      	mov	r2, r0
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d102      	bne.n	8009dce <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	73fb      	strb	r3, [r7, #15]
 8009dcc:	e026      	b.n	8009e1c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dd4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	7c1b      	ldrb	r3, [r3, #16]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d109      	bne.n	8009e0c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e02:	2101      	movs	r1, #1
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f001 ff1f 	bl	800bc48 <USBD_LL_PrepareReceive>
 8009e0a:	e007      	b.n	8009e1c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e12:	2340      	movs	r3, #64	; 0x40
 8009e14:	2101      	movs	r1, #1
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 ff16 	bl	800bc48 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b084      	sub	sp, #16
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009e32:	2300      	movs	r3, #0
 8009e34:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009e36:	2181      	movs	r1, #129	; 0x81
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f001 fe3a 	bl	800bab2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009e44:	2101      	movs	r1, #1
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 fe33 	bl	800bab2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e54:	2182      	movs	r1, #130	; 0x82
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 fe2b 	bl	800bab2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00e      	beq.n	8009e8a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 ff25 	bl	800bccc <USBD_static_free>
    pdev->pClassData = NULL;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d039      	beq.n	8009f32 <USBD_CDC_Setup+0x9e>
 8009ebe:	2b20      	cmp	r3, #32
 8009ec0:	d17f      	bne.n	8009fc2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	88db      	ldrh	r3, [r3, #6]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d029      	beq.n	8009f1e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	b25b      	sxtb	r3, r3
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	da11      	bge.n	8009ef8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009ee0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	88d2      	ldrh	r2, [r2, #6]
 8009ee6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009ee8:	6939      	ldr	r1, [r7, #16]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	88db      	ldrh	r3, [r3, #6]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f001 fa0a 	bl	800b30a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009ef6:	e06b      	b.n	8009fd0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	785a      	ldrb	r2, [r3, #1]
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	88db      	ldrh	r3, [r3, #6]
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009f0e:	6939      	ldr	r1, [r7, #16]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	88db      	ldrh	r3, [r3, #6]
 8009f14:	461a      	mov	r2, r3
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f001 fa25 	bl	800b366 <USBD_CtlPrepareRx>
      break;
 8009f1c:	e058      	b.n	8009fd0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	7850      	ldrb	r0, [r2, #1]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	4798      	blx	r3
      break;
 8009f30:	e04e      	b.n	8009fd0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	785b      	ldrb	r3, [r3, #1]
 8009f36:	2b0b      	cmp	r3, #11
 8009f38:	d02e      	beq.n	8009f98 <USBD_CDC_Setup+0x104>
 8009f3a:	2b0b      	cmp	r3, #11
 8009f3c:	dc38      	bgt.n	8009fb0 <USBD_CDC_Setup+0x11c>
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <USBD_CDC_Setup+0xb4>
 8009f42:	2b0a      	cmp	r3, #10
 8009f44:	d014      	beq.n	8009f70 <USBD_CDC_Setup+0xdc>
 8009f46:	e033      	b.n	8009fb0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d107      	bne.n	8009f62 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009f52:	f107 030c 	add.w	r3, r7, #12
 8009f56:	2202      	movs	r2, #2
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f001 f9d5 	bl	800b30a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f60:	e02e      	b.n	8009fc0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 f966 	bl	800b236 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f6e:	e027      	b.n	8009fc0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	d107      	bne.n	8009f8a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f7a:	f107 030f 	add.w	r3, r7, #15
 8009f7e:	2201      	movs	r2, #1
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 f9c1 	bl	800b30a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f88:	e01a      	b.n	8009fc0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f001 f952 	bl	800b236 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f92:	2302      	movs	r3, #2
 8009f94:	75fb      	strb	r3, [r7, #23]
          break;
 8009f96:	e013      	b.n	8009fc0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d00d      	beq.n	8009fbe <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009fa2:	6839      	ldr	r1, [r7, #0]
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f001 f946 	bl	800b236 <USBD_CtlError>
            ret = USBD_FAIL;
 8009faa:	2302      	movs	r3, #2
 8009fac:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009fae:	e006      	b.n	8009fbe <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f001 f93f 	bl	800b236 <USBD_CtlError>
          ret = USBD_FAIL;
 8009fb8:	2302      	movs	r3, #2
 8009fba:	75fb      	strb	r3, [r7, #23]
          break;
 8009fbc:	e000      	b.n	8009fc0 <USBD_CDC_Setup+0x12c>
          break;
 8009fbe:	bf00      	nop
      }
      break;
 8009fc0:	e006      	b.n	8009fd0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f001 f936 	bl	800b236 <USBD_CtlError>
      ret = USBD_FAIL;
 8009fca:	2302      	movs	r3, #2
 8009fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8009fce:	bf00      	nop
  }

  return ret;
 8009fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b084      	sub	sp, #16
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fec:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ff4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d03a      	beq.n	800a076 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a000:	78fa      	ldrb	r2, [r7, #3]
 800a002:	6879      	ldr	r1, [r7, #4]
 800a004:	4613      	mov	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	440b      	add	r3, r1
 800a00e:	331c      	adds	r3, #28
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d029      	beq.n	800a06a <USBD_CDC_DataIn+0x90>
 800a016:	78fa      	ldrb	r2, [r7, #3]
 800a018:	6879      	ldr	r1, [r7, #4]
 800a01a:	4613      	mov	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	440b      	add	r3, r1
 800a024:	331c      	adds	r3, #28
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	78f9      	ldrb	r1, [r7, #3]
 800a02a:	68b8      	ldr	r0, [r7, #8]
 800a02c:	460b      	mov	r3, r1
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	440b      	add	r3, r1
 800a032:	00db      	lsls	r3, r3, #3
 800a034:	4403      	add	r3, r0
 800a036:	3338      	adds	r3, #56	; 0x38
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	fbb2 f1f3 	udiv	r1, r2, r3
 800a03e:	fb03 f301 	mul.w	r3, r3, r1
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	2b00      	cmp	r3, #0
 800a046:	d110      	bne.n	800a06a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a048:	78fa      	ldrb	r2, [r7, #3]
 800a04a:	6879      	ldr	r1, [r7, #4]
 800a04c:	4613      	mov	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	440b      	add	r3, r1
 800a056:	331c      	adds	r3, #28
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a05c:	78f9      	ldrb	r1, [r7, #3]
 800a05e:	2300      	movs	r3, #0
 800a060:	2200      	movs	r2, #0
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f001 fdcd 	bl	800bc02 <USBD_LL_Transmit>
 800a068:	e003      	b.n	800a072 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	e000      	b.n	800a078 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a076:	2302      	movs	r3, #2
  }
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	460b      	mov	r3, r1
 800a08a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a092:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f001 fdf8 	bl	800bc8e <USBD_LL_GetRxDataSize>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00d      	beq.n	800a0cc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	4798      	blx	r3

    return USBD_OK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	e000      	b.n	800a0ce <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a0cc:	2302      	movs	r3, #2
  }
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b084      	sub	sp, #16
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d015      	beq.n	800a11c <USBD_CDC_EP0_RxReady+0x46>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0f6:	2bff      	cmp	r3, #255	; 0xff
 800a0f8:	d010      	beq.n	800a11c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a108:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a110:	b292      	uxth	r2, r2
 800a112:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	22ff      	movs	r2, #255	; 0xff
 800a118:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2243      	movs	r2, #67	; 0x43
 800a134:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a136:	4b03      	ldr	r3, [pc, #12]	; (800a144 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a138:	4618      	mov	r0, r3
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bc80      	pop	{r7}
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	200000c4 	.word	0x200000c4

0800a148 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2243      	movs	r2, #67	; 0x43
 800a154:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a156:	4b03      	ldr	r3, [pc, #12]	; (800a164 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a158:	4618      	mov	r0, r3
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bc80      	pop	{r7}
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	20000080 	.word	0x20000080

0800a168 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2243      	movs	r2, #67	; 0x43
 800a174:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a176:	4b03      	ldr	r3, [pc, #12]	; (800a184 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bc80      	pop	{r7}
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	20000108 	.word	0x20000108

0800a188 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	220a      	movs	r2, #10
 800a194:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a196:	4b03      	ldr	r3, [pc, #12]	; (800a1a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a198:	4618      	mov	r0, r3
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bc80      	pop	{r7}
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	2000003c 	.word	0x2000003c

0800a1a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d005      	beq.n	800a1c8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bc80      	pop	{r7}
 800a1d2:	4770      	bx	lr

0800a1d4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a1f2:	88fa      	ldrh	r2, [r7, #6]
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	371c      	adds	r7, #28
 800a200:	46bd      	mov	sp, r7
 800a202:	bc80      	pop	{r7}
 800a204:	4770      	bx	lr

0800a206 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a206:	b480      	push	{r7}
 800a208:	b085      	sub	sp, #20
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a216:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	bc80      	pop	{r7}
 800a22a:	4770      	bx	lr

0800a22c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a23a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a242:	2b00      	cmp	r3, #0
 800a244:	d01c      	beq.n	800a280 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d115      	bne.n	800a27c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2201      	movs	r2, #1
 800a254:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a26e:	b29b      	uxth	r3, r3
 800a270:	2181      	movs	r1, #129	; 0x81
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 fcc5 	bl	800bc02 <USBD_LL_Transmit>

      return USBD_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	e002      	b.n	800a282 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e000      	b.n	800a282 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a280:	2302      	movs	r3, #2
  }
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b084      	sub	sp, #16
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a298:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d017      	beq.n	800a2d4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	7c1b      	ldrb	r3, [r3, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d109      	bne.n	800a2c0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f001 fcc5 	bl	800bc48 <USBD_LL_PrepareReceive>
 800a2be:	e007      	b.n	800a2d0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2c6:	2340      	movs	r3, #64	; 0x40
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f001 fcbc 	bl	800bc48 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	e000      	b.n	800a2d6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a2d4:	2302      	movs	r3, #2
  }
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b084      	sub	sp, #16
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	60f8      	str	r0, [r7, #12]
 800a2e6:	60b9      	str	r1, [r7, #8]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	e01a      	b.n	800a32c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d003      	beq.n	800a308 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	79fa      	ldrb	r2, [r7, #7]
 800a322:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f001 fb29 	bl	800b97c <USBD_LL_Init>

  return USBD_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d006      	beq.n	800a356 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	73fb      	strb	r3, [r7, #15]
 800a354:	e001      	b.n	800a35a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a356:	2302      	movs	r3, #2
 800a358:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	bc80      	pop	{r7}
 800a364:	4770      	bx	lr

0800a366 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f001 fb5e 	bl	800ba30 <USBD_LL_Start>

  return USBD_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bc80      	pop	{r7}
 800a390:	4770      	bx	lr

0800a392 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	460b      	mov	r3, r1
 800a39c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a39e:	2302      	movs	r3, #2
 800a3a0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00c      	beq.n	800a3c6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	78fa      	ldrb	r2, [r7, #3]
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	4798      	blx	r3
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	78fa      	ldrb	r2, [r7, #3]
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	4798      	blx	r3

  return USBD_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 fed8 	bl	800b1be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a41c:	461a      	mov	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a42a:	f003 031f 	and.w	r3, r3, #31
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d016      	beq.n	800a460 <USBD_LL_SetupStage+0x6a>
 800a432:	2b02      	cmp	r3, #2
 800a434:	d81c      	bhi.n	800a470 <USBD_LL_SetupStage+0x7a>
 800a436:	2b00      	cmp	r3, #0
 800a438:	d002      	beq.n	800a440 <USBD_LL_SetupStage+0x4a>
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d008      	beq.n	800a450 <USBD_LL_SetupStage+0x5a>
 800a43e:	e017      	b.n	800a470 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a446:	4619      	mov	r1, r3
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f9cb 	bl	800a7e4 <USBD_StdDevReq>
      break;
 800a44e:	e01a      	b.n	800a486 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a456:	4619      	mov	r1, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fa2d 	bl	800a8b8 <USBD_StdItfReq>
      break;
 800a45e:	e012      	b.n	800a486 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fa6d 	bl	800a948 <USBD_StdEPReq>
      break;
 800a46e:	e00a      	b.n	800a486 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a476:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	4619      	mov	r1, r3
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f001 fb36 	bl	800baf0 <USBD_LL_StallEP>
      break;
 800a484:	bf00      	nop
  }

  return USBD_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	460b      	mov	r3, r1
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a49e:	7afb      	ldrb	r3, [r7, #11]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d14b      	bne.n	800a53c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a4aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4b2:	2b03      	cmp	r3, #3
 800a4b4:	d134      	bne.n	800a520 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	68da      	ldr	r2, [r3, #12]
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d919      	bls.n	800a4f6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	68da      	ldr	r2, [r3, #12]
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	1ad2      	subs	r2, r2, r3
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	68da      	ldr	r2, [r3, #12]
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d203      	bcs.n	800a4e4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	e002      	b.n	800a4ea <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	6879      	ldr	r1, [r7, #4]
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f000 ff57 	bl	800b3a2 <USBD_CtlContinueRx>
 800a4f4:	e038      	b.n	800a568 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00a      	beq.n	800a518 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a508:	2b03      	cmp	r3, #3
 800a50a:	d105      	bne.n	800a518 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 ff54 	bl	800b3c6 <USBD_CtlSendStatus>
 800a51e:	e023      	b.n	800a568 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a526:	2b05      	cmp	r3, #5
 800a528:	d11e      	bne.n	800a568 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a532:	2100      	movs	r1, #0
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f001 fadb 	bl	800baf0 <USBD_LL_StallEP>
 800a53a:	e015      	b.n	800a568 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00d      	beq.n	800a564 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d108      	bne.n	800a564 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	7afa      	ldrb	r2, [r7, #11]
 800a55c:	4611      	mov	r1, r2
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	4798      	blx	r3
 800a562:	e001      	b.n	800a568 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a564:	2302      	movs	r3, #2
 800a566:	e000      	b.n	800a56a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3718      	adds	r7, #24
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b086      	sub	sp, #24
 800a576:	af00      	add	r7, sp, #0
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	460b      	mov	r3, r1
 800a57c:	607a      	str	r2, [r7, #4]
 800a57e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a580:	7afb      	ldrb	r3, [r7, #11]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d17f      	bne.n	800a686 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3314      	adds	r3, #20
 800a58a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a592:	2b02      	cmp	r3, #2
 800a594:	d15c      	bne.n	800a650 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	68da      	ldr	r2, [r3, #12]
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d915      	bls.n	800a5ce <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	68da      	ldr	r2, [r3, #12]
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	1ad2      	subs	r2, r2, r3
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	6879      	ldr	r1, [r7, #4]
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f000 fec1 	bl	800b342 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f001 fb3e 	bl	800bc48 <USBD_LL_PrepareReceive>
 800a5cc:	e04e      	b.n	800a66c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	6912      	ldr	r2, [r2, #16]
 800a5d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5da:	fb02 f201 	mul.w	r2, r2, r1
 800a5de:	1a9b      	subs	r3, r3, r2
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d11c      	bne.n	800a61e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	689a      	ldr	r2, [r3, #8]
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d316      	bcc.n	800a61e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	689a      	ldr	r2, [r3, #8]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d20f      	bcs.n	800a61e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a5fe:	2200      	movs	r2, #0
 800a600:	2100      	movs	r1, #0
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f000 fe9d 	bl	800b342 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a610:	2300      	movs	r3, #0
 800a612:	2200      	movs	r2, #0
 800a614:	2100      	movs	r1, #0
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f001 fb16 	bl	800bc48 <USBD_LL_PrepareReceive>
 800a61c:	e026      	b.n	800a66c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00a      	beq.n	800a640 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a630:	2b03      	cmp	r3, #3
 800a632:	d105      	bne.n	800a640 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a640:	2180      	movs	r1, #128	; 0x80
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f001 fa54 	bl	800baf0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 fecf 	bl	800b3ec <USBD_CtlReceiveStatus>
 800a64e:	e00d      	b.n	800a66c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a656:	2b04      	cmp	r3, #4
 800a658:	d004      	beq.n	800a664 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a660:	2b00      	cmp	r3, #0
 800a662:	d103      	bne.n	800a66c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a664:	2180      	movs	r1, #128	; 0x80
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f001 fa42 	bl	800baf0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a672:	2b01      	cmp	r3, #1
 800a674:	d11d      	bne.n	800a6b2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f7ff fe81 	bl	800a37e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a684:	e015      	b.n	800a6b2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00d      	beq.n	800a6ae <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a698:	2b03      	cmp	r3, #3
 800a69a:	d108      	bne.n	800a6ae <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6a2:	695b      	ldr	r3, [r3, #20]
 800a6a4:	7afa      	ldrb	r2, [r7, #11]
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	4798      	blx	r3
 800a6ac:	e001      	b.n	800a6b2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	e000      	b.n	800a6b4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3718      	adds	r7, #24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6c4:	2340      	movs	r3, #64	; 0x40
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f001 f9cb 	bl	800ba66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2240      	movs	r2, #64	; 0x40
 800a6dc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6e0:	2340      	movs	r3, #64	; 0x40
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2180      	movs	r1, #128	; 0x80
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f001 f9bd 	bl	800ba66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2240      	movs	r2, #64	; 0x40
 800a6f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d009      	beq.n	800a734 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	6852      	ldr	r2, [r2, #4]
 800a72c:	b2d2      	uxtb	r2, r2
 800a72e:	4611      	mov	r1, r2
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	4798      	blx	r3
  }

  return USBD_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a73e:	b480      	push	{r7}
 800a740:	b083      	sub	sp, #12
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	460b      	mov	r3, r1
 800a748:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	78fa      	ldrb	r2, [r7, #3]
 800a74e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	bc80      	pop	{r7}
 800a75a:	4770      	bx	lr

0800a75c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2204      	movs	r2, #4
 800a774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	370c      	adds	r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	bc80      	pop	{r7}
 800a782:	4770      	bx	lr

0800a784 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a792:	2b04      	cmp	r3, #4
 800a794:	d105      	bne.n	800a7a2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bc80      	pop	{r7}
 800a7ac:	4770      	bx	lr

0800a7ae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b082      	sub	sp, #8
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7bc:	2b03      	cmp	r3, #3
 800a7be:	d10b      	bne.n	800a7d8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d005      	beq.n	800a7d8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7d2:	69db      	ldr	r3, [r3, #28]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
	...

0800a7e4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7fa:	2b40      	cmp	r3, #64	; 0x40
 800a7fc:	d005      	beq.n	800a80a <USBD_StdDevReq+0x26>
 800a7fe:	2b40      	cmp	r3, #64	; 0x40
 800a800:	d84f      	bhi.n	800a8a2 <USBD_StdDevReq+0xbe>
 800a802:	2b00      	cmp	r3, #0
 800a804:	d009      	beq.n	800a81a <USBD_StdDevReq+0x36>
 800a806:	2b20      	cmp	r3, #32
 800a808:	d14b      	bne.n	800a8a2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	6839      	ldr	r1, [r7, #0]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	4798      	blx	r3
      break;
 800a818:	e048      	b.n	800a8ac <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	785b      	ldrb	r3, [r3, #1]
 800a81e:	2b09      	cmp	r3, #9
 800a820:	d839      	bhi.n	800a896 <USBD_StdDevReq+0xb2>
 800a822:	a201      	add	r2, pc, #4	; (adr r2, 800a828 <USBD_StdDevReq+0x44>)
 800a824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a828:	0800a879 	.word	0x0800a879
 800a82c:	0800a88d 	.word	0x0800a88d
 800a830:	0800a897 	.word	0x0800a897
 800a834:	0800a883 	.word	0x0800a883
 800a838:	0800a897 	.word	0x0800a897
 800a83c:	0800a85b 	.word	0x0800a85b
 800a840:	0800a851 	.word	0x0800a851
 800a844:	0800a897 	.word	0x0800a897
 800a848:	0800a86f 	.word	0x0800a86f
 800a84c:	0800a865 	.word	0x0800a865
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f9dc 	bl	800ac10 <USBD_GetDescriptor>
          break;
 800a858:	e022      	b.n	800a8a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fb3f 	bl	800aee0 <USBD_SetAddress>
          break;
 800a862:	e01d      	b.n	800a8a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fb7e 	bl	800af68 <USBD_SetConfig>
          break;
 800a86c:	e018      	b.n	800a8a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fc07 	bl	800b084 <USBD_GetConfig>
          break;
 800a876:	e013      	b.n	800a8a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fc37 	bl	800b0ee <USBD_GetStatus>
          break;
 800a880:	e00e      	b.n	800a8a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fc65 	bl	800b154 <USBD_SetFeature>
          break;
 800a88a:	e009      	b.n	800a8a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a88c:	6839      	ldr	r1, [r7, #0]
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fc74 	bl	800b17c <USBD_ClrFeature>
          break;
 800a894:	e004      	b.n	800a8a0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fccc 	bl	800b236 <USBD_CtlError>
          break;
 800a89e:	bf00      	nop
      }
      break;
 800a8a0:	e004      	b.n	800a8ac <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fcc6 	bl	800b236 <USBD_CtlError>
      break;
 800a8aa:	bf00      	nop
  }

  return ret;
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop

0800a8b8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8ce:	2b40      	cmp	r3, #64	; 0x40
 800a8d0:	d005      	beq.n	800a8de <USBD_StdItfReq+0x26>
 800a8d2:	2b40      	cmp	r3, #64	; 0x40
 800a8d4:	d82e      	bhi.n	800a934 <USBD_StdItfReq+0x7c>
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <USBD_StdItfReq+0x26>
 800a8da:	2b20      	cmp	r3, #32
 800a8dc:	d12a      	bne.n	800a934 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d81d      	bhi.n	800a926 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	889b      	ldrh	r3, [r3, #4]
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d813      	bhi.n	800a91c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	6839      	ldr	r1, [r7, #0]
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	4798      	blx	r3
 800a902:	4603      	mov	r3, r0
 800a904:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	88db      	ldrh	r3, [r3, #6]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d110      	bne.n	800a930 <USBD_StdItfReq+0x78>
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10d      	bne.n	800a930 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fd56 	bl	800b3c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a91a:	e009      	b.n	800a930 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fc89 	bl	800b236 <USBD_CtlError>
          break;
 800a924:	e004      	b.n	800a930 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fc84 	bl	800b236 <USBD_CtlError>
          break;
 800a92e:	e000      	b.n	800a932 <USBD_StdItfReq+0x7a>
          break;
 800a930:	bf00      	nop
      }
      break;
 800a932:	e004      	b.n	800a93e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a934:	6839      	ldr	r1, [r7, #0]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fc7d 	bl	800b236 <USBD_CtlError>
      break;
 800a93c:	bf00      	nop
  }

  return USBD_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	889b      	ldrh	r3, [r3, #4]
 800a95a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a964:	2b40      	cmp	r3, #64	; 0x40
 800a966:	d007      	beq.n	800a978 <USBD_StdEPReq+0x30>
 800a968:	2b40      	cmp	r3, #64	; 0x40
 800a96a:	f200 8146 	bhi.w	800abfa <USBD_StdEPReq+0x2b2>
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00a      	beq.n	800a988 <USBD_StdEPReq+0x40>
 800a972:	2b20      	cmp	r3, #32
 800a974:	f040 8141 	bne.w	800abfa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	4798      	blx	r3
      break;
 800a986:	e13d      	b.n	800ac04 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a990:	2b20      	cmp	r3, #32
 800a992:	d10a      	bne.n	800a9aa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	4798      	blx	r3
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	e12d      	b.n	800ac06 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	785b      	ldrb	r3, [r3, #1]
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	d007      	beq.n	800a9c2 <USBD_StdEPReq+0x7a>
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	f300 811b 	bgt.w	800abee <USBD_StdEPReq+0x2a6>
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d072      	beq.n	800aaa2 <USBD_StdEPReq+0x15a>
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d03a      	beq.n	800aa36 <USBD_StdEPReq+0xee>
 800a9c0:	e115      	b.n	800abee <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d002      	beq.n	800a9d2 <USBD_StdEPReq+0x8a>
 800a9cc:	2b03      	cmp	r3, #3
 800a9ce:	d015      	beq.n	800a9fc <USBD_StdEPReq+0xb4>
 800a9d0:	e02b      	b.n	800aa2a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9d2:	7bbb      	ldrb	r3, [r7, #14]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00c      	beq.n	800a9f2 <USBD_StdEPReq+0xaa>
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	2b80      	cmp	r3, #128	; 0x80
 800a9dc:	d009      	beq.n	800a9f2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f001 f884 	bl	800baf0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a9e8:	2180      	movs	r1, #128	; 0x80
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f001 f880 	bl	800baf0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9f0:	e020      	b.n	800aa34 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fc1e 	bl	800b236 <USBD_CtlError>
              break;
 800a9fa:	e01b      	b.n	800aa34 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	885b      	ldrh	r3, [r3, #2]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10e      	bne.n	800aa22 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00b      	beq.n	800aa22 <USBD_StdEPReq+0xda>
 800aa0a:	7bbb      	ldrb	r3, [r7, #14]
 800aa0c:	2b80      	cmp	r3, #128	; 0x80
 800aa0e:	d008      	beq.n	800aa22 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	88db      	ldrh	r3, [r3, #6]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d104      	bne.n	800aa22 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f001 f867 	bl	800baf0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fccf 	bl	800b3c6 <USBD_CtlSendStatus>

              break;
 800aa28:	e004      	b.n	800aa34 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fc02 	bl	800b236 <USBD_CtlError>
              break;
 800aa32:	bf00      	nop
          }
          break;
 800aa34:	e0e0      	b.n	800abf8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d002      	beq.n	800aa46 <USBD_StdEPReq+0xfe>
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d015      	beq.n	800aa70 <USBD_StdEPReq+0x128>
 800aa44:	e026      	b.n	800aa94 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa46:	7bbb      	ldrb	r3, [r7, #14]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00c      	beq.n	800aa66 <USBD_StdEPReq+0x11e>
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
 800aa4e:	2b80      	cmp	r3, #128	; 0x80
 800aa50:	d009      	beq.n	800aa66 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
 800aa54:	4619      	mov	r1, r3
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f001 f84a 	bl	800baf0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aa5c:	2180      	movs	r1, #128	; 0x80
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f001 f846 	bl	800baf0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa64:	e01c      	b.n	800aaa0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fbe4 	bl	800b236 <USBD_CtlError>
              break;
 800aa6e:	e017      	b.n	800aaa0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	885b      	ldrh	r3, [r3, #2]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d112      	bne.n	800aa9e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa78:	7bbb      	ldrb	r3, [r7, #14]
 800aa7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d004      	beq.n	800aa8c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa82:	7bbb      	ldrb	r3, [r7, #14]
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f001 f851 	bl	800bb2e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fc9a 	bl	800b3c6 <USBD_CtlSendStatus>
              }
              break;
 800aa92:	e004      	b.n	800aa9e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fbcd 	bl	800b236 <USBD_CtlError>
              break;
 800aa9c:	e000      	b.n	800aaa0 <USBD_StdEPReq+0x158>
              break;
 800aa9e:	bf00      	nop
          }
          break;
 800aaa0:	e0aa      	b.n	800abf8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d002      	beq.n	800aab2 <USBD_StdEPReq+0x16a>
 800aaac:	2b03      	cmp	r3, #3
 800aaae:	d032      	beq.n	800ab16 <USBD_StdEPReq+0x1ce>
 800aab0:	e097      	b.n	800abe2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d007      	beq.n	800aac8 <USBD_StdEPReq+0x180>
 800aab8:	7bbb      	ldrb	r3, [r7, #14]
 800aaba:	2b80      	cmp	r3, #128	; 0x80
 800aabc:	d004      	beq.n	800aac8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fbb8 	bl	800b236 <USBD_CtlError>
                break;
 800aac6:	e091      	b.n	800abec <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	da0b      	bge.n	800aae8 <USBD_StdEPReq+0x1a0>
 800aad0:	7bbb      	ldrb	r3, [r7, #14]
 800aad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aad6:	4613      	mov	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	3310      	adds	r3, #16
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	4413      	add	r3, r2
 800aae4:	3304      	adds	r3, #4
 800aae6:	e00b      	b.n	800ab00 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aae8:	7bbb      	ldrb	r3, [r7, #14]
 800aaea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaee:	4613      	mov	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	4413      	add	r3, r2
 800aafe:	3304      	adds	r3, #4
 800ab00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	2200      	movs	r2, #0
 800ab06:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fbfb 	bl	800b30a <USBD_CtlSendData>
              break;
 800ab14:	e06a      	b.n	800abec <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	da11      	bge.n	800ab42 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab1e:	7bbb      	ldrb	r3, [r7, #14]
 800ab20:	f003 020f 	and.w	r2, r3, #15
 800ab24:	6879      	ldr	r1, [r7, #4]
 800ab26:	4613      	mov	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	440b      	add	r3, r1
 800ab30:	3318      	adds	r3, #24
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d117      	bne.n	800ab68 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fb7b 	bl	800b236 <USBD_CtlError>
                  break;
 800ab40:	e054      	b.n	800abec <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab42:	7bbb      	ldrb	r3, [r7, #14]
 800ab44:	f003 020f 	and.w	r2, r3, #15
 800ab48:	6879      	ldr	r1, [r7, #4]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4413      	add	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	440b      	add	r3, r1
 800ab54:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d104      	bne.n	800ab68 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fb68 	bl	800b236 <USBD_CtlError>
                  break;
 800ab66:	e041      	b.n	800abec <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	da0b      	bge.n	800ab88 <USBD_StdEPReq+0x240>
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab76:	4613      	mov	r3, r2
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	3310      	adds	r3, #16
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	4413      	add	r3, r2
 800ab84:	3304      	adds	r3, #4
 800ab86:	e00b      	b.n	800aba0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab88:	7bbb      	ldrb	r3, [r7, #14]
 800ab8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab8e:	4613      	mov	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4413      	add	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	3304      	adds	r3, #4
 800aba0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <USBD_StdEPReq+0x266>
 800aba8:	7bbb      	ldrb	r3, [r7, #14]
 800abaa:	2b80      	cmp	r3, #128	; 0x80
 800abac:	d103      	bne.n	800abb6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2200      	movs	r2, #0
 800abb2:	601a      	str	r2, [r3, #0]
 800abb4:	e00e      	b.n	800abd4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800abb6:	7bbb      	ldrb	r3, [r7, #14]
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 ffd6 	bl	800bb6c <USBD_LL_IsStallEP>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d003      	beq.n	800abce <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	2201      	movs	r2, #1
 800abca:	601a      	str	r2, [r3, #0]
 800abcc:	e002      	b.n	800abd4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	2200      	movs	r2, #0
 800abd2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2202      	movs	r2, #2
 800abd8:	4619      	mov	r1, r3
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fb95 	bl	800b30a <USBD_CtlSendData>
              break;
 800abe0:	e004      	b.n	800abec <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fb26 	bl	800b236 <USBD_CtlError>
              break;
 800abea:	bf00      	nop
          }
          break;
 800abec:	e004      	b.n	800abf8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fb20 	bl	800b236 <USBD_CtlError>
          break;
 800abf6:	bf00      	nop
      }
      break;
 800abf8:	e004      	b.n	800ac04 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800abfa:	6839      	ldr	r1, [r7, #0]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fb1a 	bl	800b236 <USBD_CtlError>
      break;
 800ac02:	bf00      	nop
  }

  return ret;
 800ac04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac22:	2300      	movs	r3, #0
 800ac24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	885b      	ldrh	r3, [r3, #2]
 800ac2a:	0a1b      	lsrs	r3, r3, #8
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	2b06      	cmp	r3, #6
 800ac32:	f200 8128 	bhi.w	800ae86 <USBD_GetDescriptor+0x276>
 800ac36:	a201      	add	r2, pc, #4	; (adr r2, 800ac3c <USBD_GetDescriptor+0x2c>)
 800ac38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3c:	0800ac59 	.word	0x0800ac59
 800ac40:	0800ac71 	.word	0x0800ac71
 800ac44:	0800acb1 	.word	0x0800acb1
 800ac48:	0800ae87 	.word	0x0800ae87
 800ac4c:	0800ae87 	.word	0x0800ae87
 800ac50:	0800ae27 	.word	0x0800ae27
 800ac54:	0800ae53 	.word	0x0800ae53
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	7c12      	ldrb	r2, [r2, #16]
 800ac64:	f107 0108 	add.w	r1, r7, #8
 800ac68:	4610      	mov	r0, r2
 800ac6a:	4798      	blx	r3
 800ac6c:	60f8      	str	r0, [r7, #12]
      break;
 800ac6e:	e112      	b.n	800ae96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	7c1b      	ldrb	r3, [r3, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10d      	bne.n	800ac94 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac80:	f107 0208 	add.w	r2, r7, #8
 800ac84:	4610      	mov	r0, r2
 800ac86:	4798      	blx	r3
 800ac88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	2202      	movs	r2, #2
 800ac90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac92:	e100      	b.n	800ae96 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9c:	f107 0208 	add.w	r2, r7, #8
 800aca0:	4610      	mov	r0, r2
 800aca2:	4798      	blx	r3
 800aca4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	3301      	adds	r3, #1
 800acaa:	2202      	movs	r2, #2
 800acac:	701a      	strb	r2, [r3, #0]
      break;
 800acae:	e0f2      	b.n	800ae96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	885b      	ldrh	r3, [r3, #2]
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b05      	cmp	r3, #5
 800acb8:	f200 80ac 	bhi.w	800ae14 <USBD_GetDescriptor+0x204>
 800acbc:	a201      	add	r2, pc, #4	; (adr r2, 800acc4 <USBD_GetDescriptor+0xb4>)
 800acbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc2:	bf00      	nop
 800acc4:	0800acdd 	.word	0x0800acdd
 800acc8:	0800ad11 	.word	0x0800ad11
 800accc:	0800ad45 	.word	0x0800ad45
 800acd0:	0800ad79 	.word	0x0800ad79
 800acd4:	0800adad 	.word	0x0800adad
 800acd8:	0800ade1 	.word	0x0800ade1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00b      	beq.n	800ad00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	7c12      	ldrb	r2, [r2, #16]
 800acf4:	f107 0108 	add.w	r1, r7, #8
 800acf8:	4610      	mov	r0, r2
 800acfa:	4798      	blx	r3
 800acfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acfe:	e091      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fa97 	bl	800b236 <USBD_CtlError>
            err++;
 800ad08:	7afb      	ldrb	r3, [r7, #11]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad0e:	e089      	b.n	800ae24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00b      	beq.n	800ad34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	7c12      	ldrb	r2, [r2, #16]
 800ad28:	f107 0108 	add.w	r1, r7, #8
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4798      	blx	r3
 800ad30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad32:	e077      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fa7d 	bl	800b236 <USBD_CtlError>
            err++;
 800ad3c:	7afb      	ldrb	r3, [r7, #11]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	72fb      	strb	r3, [r7, #11]
          break;
 800ad42:	e06f      	b.n	800ae24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00b      	beq.n	800ad68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	7c12      	ldrb	r2, [r2, #16]
 800ad5c:	f107 0108 	add.w	r1, r7, #8
 800ad60:	4610      	mov	r0, r2
 800ad62:	4798      	blx	r3
 800ad64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad66:	e05d      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad68:	6839      	ldr	r1, [r7, #0]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fa63 	bl	800b236 <USBD_CtlError>
            err++;
 800ad70:	7afb      	ldrb	r3, [r7, #11]
 800ad72:	3301      	adds	r3, #1
 800ad74:	72fb      	strb	r3, [r7, #11]
          break;
 800ad76:	e055      	b.n	800ae24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00b      	beq.n	800ad9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	7c12      	ldrb	r2, [r2, #16]
 800ad90:	f107 0108 	add.w	r1, r7, #8
 800ad94:	4610      	mov	r0, r2
 800ad96:	4798      	blx	r3
 800ad98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad9a:	e043      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fa49 	bl	800b236 <USBD_CtlError>
            err++;
 800ada4:	7afb      	ldrb	r3, [r7, #11]
 800ada6:	3301      	adds	r3, #1
 800ada8:	72fb      	strb	r3, [r7, #11]
          break;
 800adaa:	e03b      	b.n	800ae24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adb2:	695b      	ldr	r3, [r3, #20]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00b      	beq.n	800add0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adbe:	695b      	ldr	r3, [r3, #20]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	7c12      	ldrb	r2, [r2, #16]
 800adc4:	f107 0108 	add.w	r1, r7, #8
 800adc8:	4610      	mov	r0, r2
 800adca:	4798      	blx	r3
 800adcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adce:	e029      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fa2f 	bl	800b236 <USBD_CtlError>
            err++;
 800add8:	7afb      	ldrb	r3, [r7, #11]
 800adda:	3301      	adds	r3, #1
 800addc:	72fb      	strb	r3, [r7, #11]
          break;
 800adde:	e021      	b.n	800ae24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00b      	beq.n	800ae04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	7c12      	ldrb	r2, [r2, #16]
 800adf8:	f107 0108 	add.w	r1, r7, #8
 800adfc:	4610      	mov	r0, r2
 800adfe:	4798      	blx	r3
 800ae00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae02:	e00f      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fa15 	bl	800b236 <USBD_CtlError>
            err++;
 800ae0c:	7afb      	ldrb	r3, [r7, #11]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	72fb      	strb	r3, [r7, #11]
          break;
 800ae12:	e007      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fa0d 	bl	800b236 <USBD_CtlError>
          err++;
 800ae1c:	7afb      	ldrb	r3, [r7, #11]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ae22:	e038      	b.n	800ae96 <USBD_GetDescriptor+0x286>
 800ae24:	e037      	b.n	800ae96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	7c1b      	ldrb	r3, [r3, #16]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d109      	bne.n	800ae42 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae36:	f107 0208 	add.w	r2, r7, #8
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	4798      	blx	r3
 800ae3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae40:	e029      	b.n	800ae96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f9f6 	bl	800b236 <USBD_CtlError>
        err++;
 800ae4a:	7afb      	ldrb	r3, [r7, #11]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae50:	e021      	b.n	800ae96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	7c1b      	ldrb	r3, [r3, #16]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10d      	bne.n	800ae76 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae62:	f107 0208 	add.w	r2, r7, #8
 800ae66:	4610      	mov	r0, r2
 800ae68:	4798      	blx	r3
 800ae6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	2207      	movs	r2, #7
 800ae72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae74:	e00f      	b.n	800ae96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f9dc 	bl	800b236 <USBD_CtlError>
        err++;
 800ae7e:	7afb      	ldrb	r3, [r7, #11]
 800ae80:	3301      	adds	r3, #1
 800ae82:	72fb      	strb	r3, [r7, #11]
      break;
 800ae84:	e007      	b.n	800ae96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 f9d4 	bl	800b236 <USBD_CtlError>
      err++;
 800ae8e:	7afb      	ldrb	r3, [r7, #11]
 800ae90:	3301      	adds	r3, #1
 800ae92:	72fb      	strb	r3, [r7, #11]
      break;
 800ae94:	bf00      	nop
  }

  if (err != 0U)
 800ae96:	7afb      	ldrb	r3, [r7, #11]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d11c      	bne.n	800aed6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ae9c:	893b      	ldrh	r3, [r7, #8]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d011      	beq.n	800aec6 <USBD_GetDescriptor+0x2b6>
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	88db      	ldrh	r3, [r3, #6]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00d      	beq.n	800aec6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	88da      	ldrh	r2, [r3, #6]
 800aeae:	893b      	ldrh	r3, [r7, #8]
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	bf28      	it	cs
 800aeb4:	4613      	movcs	r3, r2
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aeba:	893b      	ldrh	r3, [r7, #8]
 800aebc:	461a      	mov	r2, r3
 800aebe:	68f9      	ldr	r1, [r7, #12]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fa22 	bl	800b30a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	88db      	ldrh	r3, [r3, #6]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d104      	bne.n	800aed8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fa79 	bl	800b3c6 <USBD_CtlSendStatus>
 800aed4:	e000      	b.n	800aed8 <USBD_GetDescriptor+0x2c8>
    return;
 800aed6:	bf00      	nop
    }
  }
}
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop

0800aee0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	889b      	ldrh	r3, [r3, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d130      	bne.n	800af54 <USBD_SetAddress+0x74>
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	88db      	ldrh	r3, [r3, #6]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d12c      	bne.n	800af54 <USBD_SetAddress+0x74>
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	885b      	ldrh	r3, [r3, #2]
 800aefe:	2b7f      	cmp	r3, #127	; 0x7f
 800af00:	d828      	bhi.n	800af54 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	885b      	ldrh	r3, [r3, #2]
 800af06:	b2db      	uxtb	r3, r3
 800af08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af14:	2b03      	cmp	r3, #3
 800af16:	d104      	bne.n	800af22 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f98b 	bl	800b236 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af20:	e01d      	b.n	800af5e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	7bfa      	ldrb	r2, [r7, #15]
 800af26:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fe48 	bl	800bbc4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 fa46 	bl	800b3c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d004      	beq.n	800af4a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2202      	movs	r2, #2
 800af44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af48:	e009      	b.n	800af5e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af52:	e004      	b.n	800af5e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f96d 	bl	800b236 <USBD_CtlError>
  }
}
 800af5c:	bf00      	nop
 800af5e:	bf00      	nop
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
	...

0800af68 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	885b      	ldrh	r3, [r3, #2]
 800af76:	b2da      	uxtb	r2, r3
 800af78:	4b41      	ldr	r3, [pc, #260]	; (800b080 <USBD_SetConfig+0x118>)
 800af7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af7c:	4b40      	ldr	r3, [pc, #256]	; (800b080 <USBD_SetConfig+0x118>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d904      	bls.n	800af8e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f955 	bl	800b236 <USBD_CtlError>
 800af8c:	e075      	b.n	800b07a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af94:	2b02      	cmp	r3, #2
 800af96:	d002      	beq.n	800af9e <USBD_SetConfig+0x36>
 800af98:	2b03      	cmp	r3, #3
 800af9a:	d023      	beq.n	800afe4 <USBD_SetConfig+0x7c>
 800af9c:	e062      	b.n	800b064 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800af9e:	4b38      	ldr	r3, [pc, #224]	; (800b080 <USBD_SetConfig+0x118>)
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d01a      	beq.n	800afdc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800afa6:	4b36      	ldr	r3, [pc, #216]	; (800b080 <USBD_SetConfig+0x118>)
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	461a      	mov	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2203      	movs	r2, #3
 800afb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800afb8:	4b31      	ldr	r3, [pc, #196]	; (800b080 <USBD_SetConfig+0x118>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	4619      	mov	r1, r3
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7ff f9e7 	bl	800a392 <USBD_SetClassConfig>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d104      	bne.n	800afd4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 f932 	bl	800b236 <USBD_CtlError>
            return;
 800afd2:	e052      	b.n	800b07a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f9f6 	bl	800b3c6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800afda:	e04e      	b.n	800b07a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f9f2 	bl	800b3c6 <USBD_CtlSendStatus>
        break;
 800afe2:	e04a      	b.n	800b07a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800afe4:	4b26      	ldr	r3, [pc, #152]	; (800b080 <USBD_SetConfig+0x118>)
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d112      	bne.n	800b012 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2202      	movs	r2, #2
 800aff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800aff4:	4b22      	ldr	r3, [pc, #136]	; (800b080 <USBD_SetConfig+0x118>)
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	461a      	mov	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800affe:	4b20      	ldr	r3, [pc, #128]	; (800b080 <USBD_SetConfig+0x118>)
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	4619      	mov	r1, r3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff f9e3 	bl	800a3d0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f9db 	bl	800b3c6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b010:	e033      	b.n	800b07a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b012:	4b1b      	ldr	r3, [pc, #108]	; (800b080 <USBD_SetConfig+0x118>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	461a      	mov	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d01d      	beq.n	800b05c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	b2db      	uxtb	r3, r3
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7ff f9d1 	bl	800a3d0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b02e:	4b14      	ldr	r3, [pc, #80]	; (800b080 <USBD_SetConfig+0x118>)
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	461a      	mov	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b038:	4b11      	ldr	r3, [pc, #68]	; (800b080 <USBD_SetConfig+0x118>)
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7ff f9a7 	bl	800a392 <USBD_SetClassConfig>
 800b044:	4603      	mov	r3, r0
 800b046:	2b02      	cmp	r3, #2
 800b048:	d104      	bne.n	800b054 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 f8f2 	bl	800b236 <USBD_CtlError>
            return;
 800b052:	e012      	b.n	800b07a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f9b6 	bl	800b3c6 <USBD_CtlSendStatus>
        break;
 800b05a:	e00e      	b.n	800b07a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f9b2 	bl	800b3c6 <USBD_CtlSendStatus>
        break;
 800b062:	e00a      	b.n	800b07a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f8e5 	bl	800b236 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b06c:	4b04      	ldr	r3, [pc, #16]	; (800b080 <USBD_SetConfig+0x118>)
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7ff f9ac 	bl	800a3d0 <USBD_ClrClassConfig>
        break;
 800b078:	bf00      	nop
    }
  }
}
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	200002f4 	.word	0x200002f4

0800b084 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	88db      	ldrh	r3, [r3, #6]
 800b092:	2b01      	cmp	r3, #1
 800b094:	d004      	beq.n	800b0a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f8cc 	bl	800b236 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b09e:	e022      	b.n	800b0e6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	dc02      	bgt.n	800b0b0 <USBD_GetConfig+0x2c>
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	dc03      	bgt.n	800b0b6 <USBD_GetConfig+0x32>
 800b0ae:	e015      	b.n	800b0dc <USBD_GetConfig+0x58>
 800b0b0:	2b03      	cmp	r3, #3
 800b0b2:	d00b      	beq.n	800b0cc <USBD_GetConfig+0x48>
 800b0b4:	e012      	b.n	800b0dc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	3308      	adds	r3, #8
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f920 	bl	800b30a <USBD_CtlSendData>
        break;
 800b0ca:	e00c      	b.n	800b0e6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 f918 	bl	800b30a <USBD_CtlSendData>
        break;
 800b0da:	e004      	b.n	800b0e6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f8a9 	bl	800b236 <USBD_CtlError>
        break;
 800b0e4:	bf00      	nop
}
 800b0e6:	bf00      	nop
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b082      	sub	sp, #8
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0fe:	3b01      	subs	r3, #1
 800b100:	2b02      	cmp	r3, #2
 800b102:	d81e      	bhi.n	800b142 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	88db      	ldrh	r3, [r3, #6]
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d004      	beq.n	800b116 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f891 	bl	800b236 <USBD_CtlError>
        break;
 800b114:	e01a      	b.n	800b14c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b122:	2b00      	cmp	r3, #0
 800b124:	d005      	beq.n	800b132 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	f043 0202 	orr.w	r2, r3, #2
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	330c      	adds	r3, #12
 800b136:	2202      	movs	r2, #2
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f8e5 	bl	800b30a <USBD_CtlSendData>
      break;
 800b140:	e004      	b.n	800b14c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f876 	bl	800b236 <USBD_CtlError>
      break;
 800b14a:	bf00      	nop
  }
}
 800b14c:	bf00      	nop
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	885b      	ldrh	r3, [r3, #2]
 800b162:	2b01      	cmp	r3, #1
 800b164:	d106      	bne.n	800b174 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f929 	bl	800b3c6 <USBD_CtlSendStatus>
  }
}
 800b174:	bf00      	nop
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b18c:	3b01      	subs	r3, #1
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d80b      	bhi.n	800b1aa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	885b      	ldrh	r3, [r3, #2]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d10c      	bne.n	800b1b4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f90f 	bl	800b3c6 <USBD_CtlSendStatus>
      }
      break;
 800b1a8:	e004      	b.n	800b1b4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b1aa:	6839      	ldr	r1, [r7, #0]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f842 	bl	800b236 <USBD_CtlError>
      break;
 800b1b2:	e000      	b.n	800b1b6 <USBD_ClrFeature+0x3a>
      break;
 800b1b4:	bf00      	nop
  }
}
 800b1b6:	bf00      	nop
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b083      	sub	sp, #12
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	781a      	ldrb	r2, [r3, #0]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	785a      	ldrb	r2, [r3, #1]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	3302      	adds	r3, #2
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	3303      	adds	r3, #3
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	021b      	lsls	r3, r3, #8
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	4413      	add	r3, r2
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	3305      	adds	r3, #5
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	b29b      	uxth	r3, r3
 800b204:	021b      	lsls	r3, r3, #8
 800b206:	b29b      	uxth	r3, r3
 800b208:	4413      	add	r3, r2
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	3306      	adds	r3, #6
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	b29a      	uxth	r2, r3
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	3307      	adds	r3, #7
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	b29b      	uxth	r3, r3
 800b220:	021b      	lsls	r3, r3, #8
 800b222:	b29b      	uxth	r3, r3
 800b224:	4413      	add	r3, r2
 800b226:	b29a      	uxth	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	80da      	strh	r2, [r3, #6]

}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	bc80      	pop	{r7}
 800b234:	4770      	bx	lr

0800b236 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b082      	sub	sp, #8
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b240:	2180      	movs	r1, #128	; 0x80
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fc54 	bl	800baf0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b248:	2100      	movs	r1, #0
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 fc50 	bl	800baf0 <USBD_LL_StallEP>
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b264:	2300      	movs	r3, #0
 800b266:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d032      	beq.n	800b2d4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f000 f834 	bl	800b2dc <USBD_GetLen>
 800b274:	4603      	mov	r3, r0
 800b276:	3301      	adds	r3, #1
 800b278:	b29b      	uxth	r3, r3
 800b27a:	005b      	lsls	r3, r3, #1
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b282:	7dfb      	ldrb	r3, [r7, #23]
 800b284:	1c5a      	adds	r2, r3, #1
 800b286:	75fa      	strb	r2, [r7, #23]
 800b288:	461a      	mov	r2, r3
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	4413      	add	r3, r2
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	7812      	ldrb	r2, [r2, #0]
 800b292:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b294:	7dfb      	ldrb	r3, [r7, #23]
 800b296:	1c5a      	adds	r2, r3, #1
 800b298:	75fa      	strb	r2, [r7, #23]
 800b29a:	461a      	mov	r2, r3
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	4413      	add	r3, r2
 800b2a0:	2203      	movs	r2, #3
 800b2a2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b2a4:	e012      	b.n	800b2cc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	1c5a      	adds	r2, r3, #1
 800b2aa:	60fa      	str	r2, [r7, #12]
 800b2ac:	7dfa      	ldrb	r2, [r7, #23]
 800b2ae:	1c51      	adds	r1, r2, #1
 800b2b0:	75f9      	strb	r1, [r7, #23]
 800b2b2:	4611      	mov	r1, r2
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	440a      	add	r2, r1
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b2bc:	7dfb      	ldrb	r3, [r7, #23]
 800b2be:	1c5a      	adds	r2, r3, #1
 800b2c0:	75fa      	strb	r2, [r7, #23]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1e8      	bne.n	800b2a6 <USBD_GetString+0x4e>
    }
  }
}
 800b2d4:	bf00      	nop
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b2e8:	e005      	b.n	800b2f6 <USBD_GetLen+0x1a>
  {
    len++;
 800b2ea:	7bfb      	ldrb	r3, [r7, #15]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1f5      	bne.n	800b2ea <USBD_GetLen+0xe>
  }

  return len;
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	bc80      	pop	{r7}
 800b308:	4770      	bx	lr

0800b30a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b084      	sub	sp, #16
 800b30e:	af00      	add	r7, sp, #0
 800b310:	60f8      	str	r0, [r7, #12]
 800b312:	60b9      	str	r1, [r7, #8]
 800b314:	4613      	mov	r3, r2
 800b316:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2202      	movs	r2, #2
 800b31c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b320:	88fa      	ldrh	r2, [r7, #6]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b326:	88fa      	ldrh	r2, [r7, #6]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b32c:	88fb      	ldrh	r3, [r7, #6]
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	2100      	movs	r1, #0
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f000 fc65 	bl	800bc02 <USBD_LL_Transmit>

  return USBD_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b084      	sub	sp, #16
 800b346:	af00      	add	r7, sp, #0
 800b348:	60f8      	str	r0, [r7, #12]
 800b34a:	60b9      	str	r1, [r7, #8]
 800b34c:	4613      	mov	r3, r2
 800b34e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b350:	88fb      	ldrh	r3, [r7, #6]
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	2100      	movs	r1, #0
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f000 fc53 	bl	800bc02 <USBD_LL_Transmit>

  return USBD_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	60f8      	str	r0, [r7, #12]
 800b36e:	60b9      	str	r1, [r7, #8]
 800b370:	4613      	mov	r3, r2
 800b372:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2203      	movs	r2, #3
 800b378:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b37c:	88fa      	ldrh	r2, [r7, #6]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b384:	88fa      	ldrh	r2, [r7, #6]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b38c:	88fb      	ldrh	r3, [r7, #6]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	2100      	movs	r1, #0
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f000 fc58 	bl	800bc48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b084      	sub	sp, #16
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	60f8      	str	r0, [r7, #12]
 800b3aa:	60b9      	str	r1, [r7, #8]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3b0:	88fb      	ldrh	r3, [r7, #6]
 800b3b2:	68ba      	ldr	r2, [r7, #8]
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f000 fc46 	bl	800bc48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b082      	sub	sp, #8
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2204      	movs	r2, #4
 800b3d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	2200      	movs	r2, #0
 800b3da:	2100      	movs	r1, #0
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fc10 	bl	800bc02 <USBD_LL_Transmit>

  return USBD_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2205      	movs	r2, #5
 800b3f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	2200      	movs	r2, #0
 800b400:	2100      	movs	r1, #0
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fc20 	bl	800bc48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
	...

0800b414 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b418:	2200      	movs	r2, #0
 800b41a:	4912      	ldr	r1, [pc, #72]	; (800b464 <MX_USB_DEVICE_Init+0x50>)
 800b41c:	4812      	ldr	r0, [pc, #72]	; (800b468 <MX_USB_DEVICE_Init+0x54>)
 800b41e:	f7fe ff5e 	bl	800a2de <USBD_Init>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b428:	f7f7 fcf4 	bl	8002e14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b42c:	490f      	ldr	r1, [pc, #60]	; (800b46c <MX_USB_DEVICE_Init+0x58>)
 800b42e:	480e      	ldr	r0, [pc, #56]	; (800b468 <MX_USB_DEVICE_Init+0x54>)
 800b430:	f7fe ff80 	bl	800a334 <USBD_RegisterClass>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b43a:	f7f7 fceb 	bl	8002e14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b43e:	490c      	ldr	r1, [pc, #48]	; (800b470 <MX_USB_DEVICE_Init+0x5c>)
 800b440:	4809      	ldr	r0, [pc, #36]	; (800b468 <MX_USB_DEVICE_Init+0x54>)
 800b442:	f7fe feb1 	bl	800a1a8 <USBD_CDC_RegisterInterface>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b44c:	f7f7 fce2 	bl	8002e14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b450:	4805      	ldr	r0, [pc, #20]	; (800b468 <MX_USB_DEVICE_Init+0x54>)
 800b452:	f7fe ff88 	bl	800a366 <USBD_Start>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d001      	beq.n	800b460 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b45c:	f7f7 fcda 	bl	8002e14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b460:	bf00      	nop
 800b462:	bd80      	pop	{r7, pc}
 800b464:	2000015c 	.word	0x2000015c
 800b468:	2000067c 	.word	0x2000067c
 800b46c:	20000048 	.word	0x20000048
 800b470:	2000014c 	.word	0x2000014c

0800b474 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b478:	2200      	movs	r2, #0
 800b47a:	4905      	ldr	r1, [pc, #20]	; (800b490 <CDC_Init_FS+0x1c>)
 800b47c:	4805      	ldr	r0, [pc, #20]	; (800b494 <CDC_Init_FS+0x20>)
 800b47e:	f7fe fea9 	bl	800a1d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b482:	4905      	ldr	r1, [pc, #20]	; (800b498 <CDC_Init_FS+0x24>)
 800b484:	4803      	ldr	r0, [pc, #12]	; (800b494 <CDC_Init_FS+0x20>)
 800b486:	f7fe febe 	bl	800a206 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b48a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	20000d28 	.word	0x20000d28
 800b494:	2000067c 	.word	0x2000067c
 800b498:	20000940 	.word	0x20000940

0800b49c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b49c:	b480      	push	{r7}
 800b49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bc80      	pop	{r7}
 800b4a8:	4770      	bx	lr
	...

0800b4ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	6039      	str	r1, [r7, #0]
 800b4b6:	71fb      	strb	r3, [r7, #7]
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b4bc:	79fb      	ldrb	r3, [r7, #7]
 800b4be:	2b23      	cmp	r3, #35	; 0x23
 800b4c0:	d84a      	bhi.n	800b558 <CDC_Control_FS+0xac>
 800b4c2:	a201      	add	r2, pc, #4	; (adr r2, 800b4c8 <CDC_Control_FS+0x1c>)
 800b4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c8:	0800b559 	.word	0x0800b559
 800b4cc:	0800b559 	.word	0x0800b559
 800b4d0:	0800b559 	.word	0x0800b559
 800b4d4:	0800b559 	.word	0x0800b559
 800b4d8:	0800b559 	.word	0x0800b559
 800b4dc:	0800b559 	.word	0x0800b559
 800b4e0:	0800b559 	.word	0x0800b559
 800b4e4:	0800b559 	.word	0x0800b559
 800b4e8:	0800b559 	.word	0x0800b559
 800b4ec:	0800b559 	.word	0x0800b559
 800b4f0:	0800b559 	.word	0x0800b559
 800b4f4:	0800b559 	.word	0x0800b559
 800b4f8:	0800b559 	.word	0x0800b559
 800b4fc:	0800b559 	.word	0x0800b559
 800b500:	0800b559 	.word	0x0800b559
 800b504:	0800b559 	.word	0x0800b559
 800b508:	0800b559 	.word	0x0800b559
 800b50c:	0800b559 	.word	0x0800b559
 800b510:	0800b559 	.word	0x0800b559
 800b514:	0800b559 	.word	0x0800b559
 800b518:	0800b559 	.word	0x0800b559
 800b51c:	0800b559 	.word	0x0800b559
 800b520:	0800b559 	.word	0x0800b559
 800b524:	0800b559 	.word	0x0800b559
 800b528:	0800b559 	.word	0x0800b559
 800b52c:	0800b559 	.word	0x0800b559
 800b530:	0800b559 	.word	0x0800b559
 800b534:	0800b559 	.word	0x0800b559
 800b538:	0800b559 	.word	0x0800b559
 800b53c:	0800b559 	.word	0x0800b559
 800b540:	0800b559 	.word	0x0800b559
 800b544:	0800b559 	.word	0x0800b559
 800b548:	0800b559 	.word	0x0800b559
 800b54c:	0800b559 	.word	0x0800b559
 800b550:	0800b559 	.word	0x0800b559
 800b554:	0800b559 	.word	0x0800b559
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b558:	bf00      	nop
  }

  return (USBD_OK);
 800b55a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	bc80      	pop	{r7}
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop

0800b568 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b572:	6879      	ldr	r1, [r7, #4]
 800b574:	4805      	ldr	r0, [pc, #20]	; (800b58c <CDC_Receive_FS+0x24>)
 800b576:	f7fe fe46 	bl	800a206 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b57a:	4804      	ldr	r0, [pc, #16]	; (800b58c <CDC_Receive_FS+0x24>)
 800b57c:	f7fe fe85 	bl	800a28a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b580:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b582:	4618      	mov	r0, r3
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	2000067c 	.word	0x2000067c

0800b590 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b5a0:	4b0d      	ldr	r3, [pc, #52]	; (800b5d8 <CDC_Transmit_FS+0x48>)
 800b5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e00b      	b.n	800b5ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b5b6:	887b      	ldrh	r3, [r7, #2]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	6879      	ldr	r1, [r7, #4]
 800b5bc:	4806      	ldr	r0, [pc, #24]	; (800b5d8 <CDC_Transmit_FS+0x48>)
 800b5be:	f7fe fe09 	bl	800a1d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b5c2:	4805      	ldr	r0, [pc, #20]	; (800b5d8 <CDC_Transmit_FS+0x48>)
 800b5c4:	f7fe fe32 	bl	800a22c <USBD_CDC_TransmitPacket>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	2000067c 	.word	0x2000067c

0800b5dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	6039      	str	r1, [r7, #0]
 800b5e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	2212      	movs	r2, #18
 800b5ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5ee:	4b03      	ldr	r3, [pc, #12]	; (800b5fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bc80      	pop	{r7}
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	20000178 	.word	0x20000178

0800b600 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	4603      	mov	r3, r0
 800b608:	6039      	str	r1, [r7, #0]
 800b60a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2204      	movs	r2, #4
 800b610:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b612:	4b03      	ldr	r3, [pc, #12]	; (800b620 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b614:	4618      	mov	r0, r3
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	bc80      	pop	{r7}
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	2000018c 	.word	0x2000018c

0800b624 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	4603      	mov	r3, r0
 800b62c:	6039      	str	r1, [r7, #0]
 800b62e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b630:	79fb      	ldrb	r3, [r7, #7]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d105      	bne.n	800b642 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	4907      	ldr	r1, [pc, #28]	; (800b658 <USBD_FS_ProductStrDescriptor+0x34>)
 800b63a:	4808      	ldr	r0, [pc, #32]	; (800b65c <USBD_FS_ProductStrDescriptor+0x38>)
 800b63c:	f7ff fe0c 	bl	800b258 <USBD_GetString>
 800b640:	e004      	b.n	800b64c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b642:	683a      	ldr	r2, [r7, #0]
 800b644:	4904      	ldr	r1, [pc, #16]	; (800b658 <USBD_FS_ProductStrDescriptor+0x34>)
 800b646:	4805      	ldr	r0, [pc, #20]	; (800b65c <USBD_FS_ProductStrDescriptor+0x38>)
 800b648:	f7ff fe06 	bl	800b258 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b64c:	4b02      	ldr	r3, [pc, #8]	; (800b658 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	20001110 	.word	0x20001110
 800b65c:	0800c8d8 	.word	0x0800c8d8

0800b660 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	4603      	mov	r3, r0
 800b668:	6039      	str	r1, [r7, #0]
 800b66a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b66c:	683a      	ldr	r2, [r7, #0]
 800b66e:	4904      	ldr	r1, [pc, #16]	; (800b680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b670:	4804      	ldr	r0, [pc, #16]	; (800b684 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b672:	f7ff fdf1 	bl	800b258 <USBD_GetString>
  return USBD_StrDesc;
 800b676:	4b02      	ldr	r3, [pc, #8]	; (800b680 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	20001110 	.word	0x20001110
 800b684:	0800c8f0 	.word	0x0800c8f0

0800b688 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	4603      	mov	r3, r0
 800b690:	6039      	str	r1, [r7, #0]
 800b692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	221a      	movs	r2, #26
 800b698:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b69a:	f000 f843 	bl	800b724 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b69e:	4b02      	ldr	r3, [pc, #8]	; (800b6a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	20000190 	.word	0x20000190

0800b6ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	6039      	str	r1, [r7, #0]
 800b6b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b6b8:	79fb      	ldrb	r3, [r7, #7]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d105      	bne.n	800b6ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	4907      	ldr	r1, [pc, #28]	; (800b6e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6c2:	4808      	ldr	r0, [pc, #32]	; (800b6e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6c4:	f7ff fdc8 	bl	800b258 <USBD_GetString>
 800b6c8:	e004      	b.n	800b6d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	4904      	ldr	r1, [pc, #16]	; (800b6e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6ce:	4805      	ldr	r0, [pc, #20]	; (800b6e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6d0:	f7ff fdc2 	bl	800b258 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6d4:	4b02      	ldr	r3, [pc, #8]	; (800b6e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20001110 	.word	0x20001110
 800b6e4:	0800c904 	.word	0x0800c904

0800b6e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	6039      	str	r1, [r7, #0]
 800b6f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6f4:	79fb      	ldrb	r3, [r7, #7]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d105      	bne.n	800b706 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	4907      	ldr	r1, [pc, #28]	; (800b71c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6fe:	4808      	ldr	r0, [pc, #32]	; (800b720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b700:	f7ff fdaa 	bl	800b258 <USBD_GetString>
 800b704:	e004      	b.n	800b710 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	4904      	ldr	r1, [pc, #16]	; (800b71c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b70a:	4805      	ldr	r0, [pc, #20]	; (800b720 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b70c:	f7ff fda4 	bl	800b258 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b710:	4b02      	ldr	r3, [pc, #8]	; (800b71c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b712:	4618      	mov	r0, r3
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	20001110 	.word	0x20001110
 800b720:	0800c910 	.word	0x0800c910

0800b724 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b72a:	4b0f      	ldr	r3, [pc, #60]	; (800b768 <Get_SerialNum+0x44>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b730:	4b0e      	ldr	r3, [pc, #56]	; (800b76c <Get_SerialNum+0x48>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b736:	4b0e      	ldr	r3, [pc, #56]	; (800b770 <Get_SerialNum+0x4c>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4413      	add	r3, r2
 800b742:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d009      	beq.n	800b75e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b74a:	2208      	movs	r2, #8
 800b74c:	4909      	ldr	r1, [pc, #36]	; (800b774 <Get_SerialNum+0x50>)
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f000 f814 	bl	800b77c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b754:	2204      	movs	r2, #4
 800b756:	4908      	ldr	r1, [pc, #32]	; (800b778 <Get_SerialNum+0x54>)
 800b758:	68b8      	ldr	r0, [r7, #8]
 800b75a:	f000 f80f 	bl	800b77c <IntToUnicode>
  }
}
 800b75e:	bf00      	nop
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	1ffff7e8 	.word	0x1ffff7e8
 800b76c:	1ffff7ec 	.word	0x1ffff7ec
 800b770:	1ffff7f0 	.word	0x1ffff7f0
 800b774:	20000192 	.word	0x20000192
 800b778:	200001a2 	.word	0x200001a2

0800b77c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	4613      	mov	r3, r2
 800b788:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b78a:	2300      	movs	r3, #0
 800b78c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b78e:	2300      	movs	r3, #0
 800b790:	75fb      	strb	r3, [r7, #23]
 800b792:	e027      	b.n	800b7e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	0f1b      	lsrs	r3, r3, #28
 800b798:	2b09      	cmp	r3, #9
 800b79a:	d80b      	bhi.n	800b7b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	0f1b      	lsrs	r3, r3, #28
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	7dfb      	ldrb	r3, [r7, #23]
 800b7a4:	005b      	lsls	r3, r3, #1
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	440b      	add	r3, r1
 800b7ac:	3230      	adds	r2, #48	; 0x30
 800b7ae:	b2d2      	uxtb	r2, r2
 800b7b0:	701a      	strb	r2, [r3, #0]
 800b7b2:	e00a      	b.n	800b7ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	0f1b      	lsrs	r3, r3, #28
 800b7b8:	b2da      	uxtb	r2, r3
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	4619      	mov	r1, r3
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	440b      	add	r3, r1
 800b7c4:	3237      	adds	r2, #55	; 0x37
 800b7c6:	b2d2      	uxtb	r2, r2
 800b7c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	011b      	lsls	r3, r3, #4
 800b7ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7d0:	7dfb      	ldrb	r3, [r7, #23]
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	68ba      	ldr	r2, [r7, #8]
 800b7d8:	4413      	add	r3, r2
 800b7da:	2200      	movs	r2, #0
 800b7dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7de:	7dfb      	ldrb	r3, [r7, #23]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	75fb      	strb	r3, [r7, #23]
 800b7e4:	7dfa      	ldrb	r2, [r7, #23]
 800b7e6:	79fb      	ldrb	r3, [r7, #7]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d3d3      	bcc.n	800b794 <IntToUnicode+0x18>
  }
}
 800b7ec:	bf00      	nop
 800b7ee:	bf00      	nop
 800b7f0:	371c      	adds	r7, #28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bc80      	pop	{r7}
 800b7f6:	4770      	bx	lr

0800b7f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a0d      	ldr	r2, [pc, #52]	; (800b83c <HAL_PCD_MspInit+0x44>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d113      	bne.n	800b832 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b80a:	4b0d      	ldr	r3, [pc, #52]	; (800b840 <HAL_PCD_MspInit+0x48>)
 800b80c:	69db      	ldr	r3, [r3, #28]
 800b80e:	4a0c      	ldr	r2, [pc, #48]	; (800b840 <HAL_PCD_MspInit+0x48>)
 800b810:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b814:	61d3      	str	r3, [r2, #28]
 800b816:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <HAL_PCD_MspInit+0x48>)
 800b818:	69db      	ldr	r3, [r3, #28]
 800b81a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b81e:	60fb      	str	r3, [r7, #12]
 800b820:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b822:	2200      	movs	r2, #0
 800b824:	2100      	movs	r1, #0
 800b826:	2014      	movs	r0, #20
 800b828:	f7f8 f83d 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b82c:	2014      	movs	r0, #20
 800b82e:	f7f8 f856 	bl	80038de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b832:	bf00      	nop
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	40005c00 	.word	0x40005c00
 800b840:	40021000 	.word	0x40021000

0800b844 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b858:	4619      	mov	r1, r3
 800b85a:	4610      	mov	r0, r2
 800b85c:	f7fe fdcb 	bl	800a3f6 <USBD_LL_SetupStage>
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	460b      	mov	r3, r1
 800b872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b87a:	78fa      	ldrb	r2, [r7, #3]
 800b87c:	6879      	ldr	r1, [r7, #4]
 800b87e:	4613      	mov	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4413      	add	r3, r2
 800b884:	00db      	lsls	r3, r3, #3
 800b886:	440b      	add	r3, r1
 800b888:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	78fb      	ldrb	r3, [r7, #3]
 800b890:	4619      	mov	r1, r3
 800b892:	f7fe fdfd 	bl	800a490 <USBD_LL_DataOutStage>
}
 800b896:	bf00      	nop
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b8b0:	78fa      	ldrb	r2, [r7, #3]
 800b8b2:	6879      	ldr	r1, [r7, #4]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	00db      	lsls	r3, r3, #3
 800b8bc:	440b      	add	r3, r1
 800b8be:	333c      	adds	r3, #60	; 0x3c
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	78fb      	ldrb	r3, [r7, #3]
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	f7fe fe54 	bl	800a572 <USBD_LL_DataInStage>
}
 800b8ca:	bf00      	nop
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fe ff64 	bl	800a7ae <USBD_LL_SOF>
}
 800b8e6:	bf00      	nop
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b084      	sub	sp, #16
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d001      	beq.n	800b906 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b902:	f7f7 fa87 	bl	8002e14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b90c:	7bfa      	ldrb	r2, [r7, #15]
 800b90e:	4611      	mov	r1, r2
 800b910:	4618      	mov	r0, r3
 800b912:	f7fe ff14 	bl	800a73e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fe fecd 	bl	800a6bc <USBD_LL_Reset>
}
 800b922:	bf00      	nop
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
	...

0800b92c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fe ff0e 	bl	800a75c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d005      	beq.n	800b954 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b948:	4b04      	ldr	r3, [pc, #16]	; (800b95c <HAL_PCD_SuspendCallback+0x30>)
 800b94a:	691b      	ldr	r3, [r3, #16]
 800b94c:	4a03      	ldr	r2, [pc, #12]	; (800b95c <HAL_PCD_SuspendCallback+0x30>)
 800b94e:	f043 0306 	orr.w	r3, r3, #6
 800b952:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b954:	bf00      	nop
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	e000ed00 	.word	0xe000ed00

0800b960 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe ff08 	bl	800a784 <USBD_LL_Resume>
}
 800b974:	bf00      	nop
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b984:	4a28      	ldr	r2, [pc, #160]	; (800ba28 <USBD_LL_Init+0xac>)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a26      	ldr	r2, [pc, #152]	; (800ba28 <USBD_LL_Init+0xac>)
 800b990:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b994:	4b24      	ldr	r3, [pc, #144]	; (800ba28 <USBD_LL_Init+0xac>)
 800b996:	4a25      	ldr	r2, [pc, #148]	; (800ba2c <USBD_LL_Init+0xb0>)
 800b998:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b99a:	4b23      	ldr	r3, [pc, #140]	; (800ba28 <USBD_LL_Init+0xac>)
 800b99c:	2208      	movs	r2, #8
 800b99e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b9a0:	4b21      	ldr	r3, [pc, #132]	; (800ba28 <USBD_LL_Init+0xac>)
 800b9a2:	2202      	movs	r2, #2
 800b9a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b9a6:	4b20      	ldr	r3, [pc, #128]	; (800ba28 <USBD_LL_Init+0xac>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b9ac:	4b1e      	ldr	r3, [pc, #120]	; (800ba28 <USBD_LL_Init+0xac>)
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b9b2:	4b1d      	ldr	r3, [pc, #116]	; (800ba28 <USBD_LL_Init+0xac>)
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b9b8:	481b      	ldr	r0, [pc, #108]	; (800ba28 <USBD_LL_Init+0xac>)
 800b9ba:	f7f8 f977 	bl	8003cac <HAL_PCD_Init>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d001      	beq.n	800b9c8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b9c4:	f7f7 fa26 	bl	8002e14 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9ce:	2318      	movs	r3, #24
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	f7f9 fded 	bl	80055b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9de:	2358      	movs	r3, #88	; 0x58
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	2180      	movs	r1, #128	; 0x80
 800b9e4:	f7f9 fde5 	bl	80055b2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9ee:	23c0      	movs	r3, #192	; 0xc0
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	2181      	movs	r1, #129	; 0x81
 800b9f4:	f7f9 fddd 	bl	80055b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ba02:	2200      	movs	r2, #0
 800ba04:	2101      	movs	r1, #1
 800ba06:	f7f9 fdd4 	bl	80055b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba14:	2200      	movs	r2, #0
 800ba16:	2182      	movs	r1, #130	; 0x82
 800ba18:	f7f9 fdcb 	bl	80055b2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	20001310 	.word	0x20001310
 800ba2c:	40005c00 	.word	0x40005c00

0800ba30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7f8 fa3b 	bl	8003ec2 <HAL_PCD_Start>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba50:	7bfb      	ldrb	r3, [r7, #15]
 800ba52:	4618      	mov	r0, r3
 800ba54:	f000 f94e 	bl	800bcf4 <USBD_Get_USB_Status>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b084      	sub	sp, #16
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	4608      	mov	r0, r1
 800ba70:	4611      	mov	r1, r2
 800ba72:	461a      	mov	r2, r3
 800ba74:	4603      	mov	r3, r0
 800ba76:	70fb      	strb	r3, [r7, #3]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	70bb      	strb	r3, [r7, #2]
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba80:	2300      	movs	r3, #0
 800ba82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba8e:	78bb      	ldrb	r3, [r7, #2]
 800ba90:	883a      	ldrh	r2, [r7, #0]
 800ba92:	78f9      	ldrb	r1, [r7, #3]
 800ba94:	f7f8 fbb5 	bl	8004202 <HAL_PCD_EP_Open>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba9c:	7bfb      	ldrb	r3, [r7, #15]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f000 f928 	bl	800bcf4 <USBD_Get_USB_Status>
 800baa4:	4603      	mov	r3, r0
 800baa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	460b      	mov	r3, r1
 800babc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800babe:	2300      	movs	r3, #0
 800bac0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bacc:	78fa      	ldrb	r2, [r7, #3]
 800bace:	4611      	mov	r1, r2
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7f8 fbfc 	bl	80042ce <HAL_PCD_EP_Close>
 800bad6:	4603      	mov	r3, r0
 800bad8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bada:	7bfb      	ldrb	r3, [r7, #15]
 800badc:	4618      	mov	r0, r3
 800bade:	f000 f909 	bl	800bcf4 <USBD_Get_USB_Status>
 800bae2:	4603      	mov	r3, r0
 800bae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bae6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	460b      	mov	r3, r1
 800bafa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb0a:	78fa      	ldrb	r2, [r7, #3]
 800bb0c:	4611      	mov	r1, r2
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7f8 fcbc 	bl	800448c <HAL_PCD_EP_SetStall>
 800bb14:	4603      	mov	r3, r0
 800bb16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f000 f8ea 	bl	800bcf4 <USBD_Get_USB_Status>
 800bb20:	4603      	mov	r3, r0
 800bb22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb24:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b084      	sub	sp, #16
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	460b      	mov	r3, r1
 800bb38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb48:	78fa      	ldrb	r2, [r7, #3]
 800bb4a:	4611      	mov	r1, r2
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7f8 fcfd 	bl	800454c <HAL_PCD_EP_ClrStall>
 800bb52:	4603      	mov	r3, r0
 800bb54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f000 f8cb 	bl	800bcf4 <USBD_Get_USB_Status>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb62:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	460b      	mov	r3, r1
 800bb76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	da0c      	bge.n	800bba2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb88:	78fb      	ldrb	r3, [r7, #3]
 800bb8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb8e:	68f9      	ldr	r1, [r7, #12]
 800bb90:	1c5a      	adds	r2, r3, #1
 800bb92:	4613      	mov	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4413      	add	r3, r2
 800bb98:	00db      	lsls	r3, r3, #3
 800bb9a:	440b      	add	r3, r1
 800bb9c:	3302      	adds	r3, #2
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	e00b      	b.n	800bbba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bba2:	78fb      	ldrb	r3, [r7, #3]
 800bba4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bba8:	68f9      	ldr	r1, [r7, #12]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4413      	add	r3, r2
 800bbb0:	00db      	lsls	r3, r3, #3
 800bbb2:	440b      	add	r3, r1
 800bbb4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bbb8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3714      	adds	r7, #20
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bc80      	pop	{r7}
 800bbc2:	4770      	bx	lr

0800bbc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	460b      	mov	r3, r1
 800bbce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbde:	78fa      	ldrb	r2, [r7, #3]
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7f8 fae8 	bl	80041b8 <HAL_PCD_SetAddress>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbec:	7bfb      	ldrb	r3, [r7, #15]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f000 f880 	bl	800bcf4 <USBD_Get_USB_Status>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b086      	sub	sp, #24
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	607a      	str	r2, [r7, #4]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	460b      	mov	r3, r1
 800bc10:	72fb      	strb	r3, [r7, #11]
 800bc12:	4613      	mov	r3, r2
 800bc14:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc24:	893b      	ldrh	r3, [r7, #8]
 800bc26:	7af9      	ldrb	r1, [r7, #11]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	f7f8 fbec 	bl	8004406 <HAL_PCD_EP_Transmit>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc32:	7dfb      	ldrb	r3, [r7, #23]
 800bc34:	4618      	mov	r0, r3
 800bc36:	f000 f85d 	bl	800bcf4 <USBD_Get_USB_Status>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3718      	adds	r7, #24
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	607a      	str	r2, [r7, #4]
 800bc52:	461a      	mov	r2, r3
 800bc54:	460b      	mov	r3, r1
 800bc56:	72fb      	strb	r3, [r7, #11]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc60:	2300      	movs	r3, #0
 800bc62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc6a:	893b      	ldrh	r3, [r7, #8]
 800bc6c:	7af9      	ldrb	r1, [r7, #11]
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	f7f8 fb75 	bl	800435e <HAL_PCD_EP_Receive>
 800bc74:	4603      	mov	r3, r0
 800bc76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f000 f83a 	bl	800bcf4 <USBD_Get_USB_Status>
 800bc80:	4603      	mov	r3, r0
 800bc82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc84:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3718      	adds	r7, #24
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b082      	sub	sp, #8
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
 800bc96:	460b      	mov	r3, r1
 800bc98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bca0:	78fa      	ldrb	r2, [r7, #3]
 800bca2:	4611      	mov	r1, r2
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7f8 fb97 	bl	80043d8 <HAL_PCD_EP_GetRxCount>
 800bcaa:	4603      	mov	r3, r0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bcbc:	4b02      	ldr	r3, [pc, #8]	; (800bcc8 <USBD_static_malloc+0x14>)
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bc80      	pop	{r7}
 800bcc6:	4770      	bx	lr
 800bcc8:	200002f8 	.word	0x200002f8

0800bccc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]

}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bc80      	pop	{r7}
 800bcdc:	4770      	bx	lr

0800bcde <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcde:	b480      	push	{r7}
 800bce0:	b083      	sub	sp, #12
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	460b      	mov	r3, r1
 800bce8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bcea:	bf00      	nop
 800bcec:	370c      	adds	r7, #12
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bc80      	pop	{r7}
 800bcf2:	4770      	bx	lr

0800bcf4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd02:	79fb      	ldrb	r3, [r7, #7]
 800bd04:	2b03      	cmp	r3, #3
 800bd06:	d817      	bhi.n	800bd38 <USBD_Get_USB_Status+0x44>
 800bd08:	a201      	add	r2, pc, #4	; (adr r2, 800bd10 <USBD_Get_USB_Status+0x1c>)
 800bd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd0e:	bf00      	nop
 800bd10:	0800bd21 	.word	0x0800bd21
 800bd14:	0800bd27 	.word	0x0800bd27
 800bd18:	0800bd2d 	.word	0x0800bd2d
 800bd1c:	0800bd33 	.word	0x0800bd33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	73fb      	strb	r3, [r7, #15]
    break;
 800bd24:	e00b      	b.n	800bd3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd26:	2302      	movs	r3, #2
 800bd28:	73fb      	strb	r3, [r7, #15]
    break;
 800bd2a:	e008      	b.n	800bd3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd30:	e005      	b.n	800bd3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd32:	2302      	movs	r3, #2
 800bd34:	73fb      	strb	r3, [r7, #15]
    break;
 800bd36:	e002      	b.n	800bd3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bd38:	2302      	movs	r3, #2
 800bd3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3c:	bf00      	nop
  }
  return usb_status;
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3714      	adds	r7, #20
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bc80      	pop	{r7}
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop

0800bd4c <__errno>:
 800bd4c:	4b01      	ldr	r3, [pc, #4]	; (800bd54 <__errno+0x8>)
 800bd4e:	6818      	ldr	r0, [r3, #0]
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	200001ac 	.word	0x200001ac

0800bd58 <__libc_init_array>:
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	2600      	movs	r6, #0
 800bd5c:	4d0c      	ldr	r5, [pc, #48]	; (800bd90 <__libc_init_array+0x38>)
 800bd5e:	4c0d      	ldr	r4, [pc, #52]	; (800bd94 <__libc_init_array+0x3c>)
 800bd60:	1b64      	subs	r4, r4, r5
 800bd62:	10a4      	asrs	r4, r4, #2
 800bd64:	42a6      	cmp	r6, r4
 800bd66:	d109      	bne.n	800bd7c <__libc_init_array+0x24>
 800bd68:	f000 fc70 	bl	800c64c <_init>
 800bd6c:	2600      	movs	r6, #0
 800bd6e:	4d0a      	ldr	r5, [pc, #40]	; (800bd98 <__libc_init_array+0x40>)
 800bd70:	4c0a      	ldr	r4, [pc, #40]	; (800bd9c <__libc_init_array+0x44>)
 800bd72:	1b64      	subs	r4, r4, r5
 800bd74:	10a4      	asrs	r4, r4, #2
 800bd76:	42a6      	cmp	r6, r4
 800bd78:	d105      	bne.n	800bd86 <__libc_init_array+0x2e>
 800bd7a:	bd70      	pop	{r4, r5, r6, pc}
 800bd7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd80:	4798      	blx	r3
 800bd82:	3601      	adds	r6, #1
 800bd84:	e7ee      	b.n	800bd64 <__libc_init_array+0xc>
 800bd86:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd8a:	4798      	blx	r3
 800bd8c:	3601      	adds	r6, #1
 800bd8e:	e7f2      	b.n	800bd76 <__libc_init_array+0x1e>
 800bd90:	0800c98c 	.word	0x0800c98c
 800bd94:	0800c98c 	.word	0x0800c98c
 800bd98:	0800c98c 	.word	0x0800c98c
 800bd9c:	0800c990 	.word	0x0800c990

0800bda0 <memset>:
 800bda0:	4603      	mov	r3, r0
 800bda2:	4402      	add	r2, r0
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d100      	bne.n	800bdaa <memset+0xa>
 800bda8:	4770      	bx	lr
 800bdaa:	f803 1b01 	strb.w	r1, [r3], #1
 800bdae:	e7f9      	b.n	800bda4 <memset+0x4>

0800bdb0 <sniprintf>:
 800bdb0:	b40c      	push	{r2, r3}
 800bdb2:	b530      	push	{r4, r5, lr}
 800bdb4:	4b17      	ldr	r3, [pc, #92]	; (800be14 <sniprintf+0x64>)
 800bdb6:	1e0c      	subs	r4, r1, #0
 800bdb8:	681d      	ldr	r5, [r3, #0]
 800bdba:	b09d      	sub	sp, #116	; 0x74
 800bdbc:	da08      	bge.n	800bdd0 <sniprintf+0x20>
 800bdbe:	238b      	movs	r3, #139	; 0x8b
 800bdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc4:	602b      	str	r3, [r5, #0]
 800bdc6:	b01d      	add	sp, #116	; 0x74
 800bdc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdcc:	b002      	add	sp, #8
 800bdce:	4770      	bx	lr
 800bdd0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bdd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bdd8:	bf0c      	ite	eq
 800bdda:	4623      	moveq	r3, r4
 800bddc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bde0:	9304      	str	r3, [sp, #16]
 800bde2:	9307      	str	r3, [sp, #28]
 800bde4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bde8:	9002      	str	r0, [sp, #8]
 800bdea:	9006      	str	r0, [sp, #24]
 800bdec:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	ab21      	add	r3, sp, #132	; 0x84
 800bdf4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bdf6:	a902      	add	r1, sp, #8
 800bdf8:	9301      	str	r3, [sp, #4]
 800bdfa:	f000 f869 	bl	800bed0 <_svfiprintf_r>
 800bdfe:	1c43      	adds	r3, r0, #1
 800be00:	bfbc      	itt	lt
 800be02:	238b      	movlt	r3, #139	; 0x8b
 800be04:	602b      	strlt	r3, [r5, #0]
 800be06:	2c00      	cmp	r4, #0
 800be08:	d0dd      	beq.n	800bdc6 <sniprintf+0x16>
 800be0a:	2200      	movs	r2, #0
 800be0c:	9b02      	ldr	r3, [sp, #8]
 800be0e:	701a      	strb	r2, [r3, #0]
 800be10:	e7d9      	b.n	800bdc6 <sniprintf+0x16>
 800be12:	bf00      	nop
 800be14:	200001ac 	.word	0x200001ac

0800be18 <__ssputs_r>:
 800be18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be1c:	688e      	ldr	r6, [r1, #8]
 800be1e:	4682      	mov	sl, r0
 800be20:	429e      	cmp	r6, r3
 800be22:	460c      	mov	r4, r1
 800be24:	4690      	mov	r8, r2
 800be26:	461f      	mov	r7, r3
 800be28:	d838      	bhi.n	800be9c <__ssputs_r+0x84>
 800be2a:	898a      	ldrh	r2, [r1, #12]
 800be2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be30:	d032      	beq.n	800be98 <__ssputs_r+0x80>
 800be32:	6825      	ldr	r5, [r4, #0]
 800be34:	6909      	ldr	r1, [r1, #16]
 800be36:	3301      	adds	r3, #1
 800be38:	eba5 0901 	sub.w	r9, r5, r1
 800be3c:	6965      	ldr	r5, [r4, #20]
 800be3e:	444b      	add	r3, r9
 800be40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be48:	106d      	asrs	r5, r5, #1
 800be4a:	429d      	cmp	r5, r3
 800be4c:	bf38      	it	cc
 800be4e:	461d      	movcc	r5, r3
 800be50:	0553      	lsls	r3, r2, #21
 800be52:	d531      	bpl.n	800beb8 <__ssputs_r+0xa0>
 800be54:	4629      	mov	r1, r5
 800be56:	f000 fb53 	bl	800c500 <_malloc_r>
 800be5a:	4606      	mov	r6, r0
 800be5c:	b950      	cbnz	r0, 800be74 <__ssputs_r+0x5c>
 800be5e:	230c      	movs	r3, #12
 800be60:	f04f 30ff 	mov.w	r0, #4294967295
 800be64:	f8ca 3000 	str.w	r3, [sl]
 800be68:	89a3      	ldrh	r3, [r4, #12]
 800be6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be6e:	81a3      	strh	r3, [r4, #12]
 800be70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be74:	464a      	mov	r2, r9
 800be76:	6921      	ldr	r1, [r4, #16]
 800be78:	f000 face 	bl	800c418 <memcpy>
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be86:	81a3      	strh	r3, [r4, #12]
 800be88:	6126      	str	r6, [r4, #16]
 800be8a:	444e      	add	r6, r9
 800be8c:	6026      	str	r6, [r4, #0]
 800be8e:	463e      	mov	r6, r7
 800be90:	6165      	str	r5, [r4, #20]
 800be92:	eba5 0509 	sub.w	r5, r5, r9
 800be96:	60a5      	str	r5, [r4, #8]
 800be98:	42be      	cmp	r6, r7
 800be9a:	d900      	bls.n	800be9e <__ssputs_r+0x86>
 800be9c:	463e      	mov	r6, r7
 800be9e:	4632      	mov	r2, r6
 800bea0:	4641      	mov	r1, r8
 800bea2:	6820      	ldr	r0, [r4, #0]
 800bea4:	f000 fac6 	bl	800c434 <memmove>
 800bea8:	68a3      	ldr	r3, [r4, #8]
 800beaa:	6822      	ldr	r2, [r4, #0]
 800beac:	1b9b      	subs	r3, r3, r6
 800beae:	4432      	add	r2, r6
 800beb0:	2000      	movs	r0, #0
 800beb2:	60a3      	str	r3, [r4, #8]
 800beb4:	6022      	str	r2, [r4, #0]
 800beb6:	e7db      	b.n	800be70 <__ssputs_r+0x58>
 800beb8:	462a      	mov	r2, r5
 800beba:	f000 fb7b 	bl	800c5b4 <_realloc_r>
 800bebe:	4606      	mov	r6, r0
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d1e1      	bne.n	800be88 <__ssputs_r+0x70>
 800bec4:	4650      	mov	r0, sl
 800bec6:	6921      	ldr	r1, [r4, #16]
 800bec8:	f000 face 	bl	800c468 <_free_r>
 800becc:	e7c7      	b.n	800be5e <__ssputs_r+0x46>
	...

0800bed0 <_svfiprintf_r>:
 800bed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed4:	4698      	mov	r8, r3
 800bed6:	898b      	ldrh	r3, [r1, #12]
 800bed8:	4607      	mov	r7, r0
 800beda:	061b      	lsls	r3, r3, #24
 800bedc:	460d      	mov	r5, r1
 800bede:	4614      	mov	r4, r2
 800bee0:	b09d      	sub	sp, #116	; 0x74
 800bee2:	d50e      	bpl.n	800bf02 <_svfiprintf_r+0x32>
 800bee4:	690b      	ldr	r3, [r1, #16]
 800bee6:	b963      	cbnz	r3, 800bf02 <_svfiprintf_r+0x32>
 800bee8:	2140      	movs	r1, #64	; 0x40
 800beea:	f000 fb09 	bl	800c500 <_malloc_r>
 800beee:	6028      	str	r0, [r5, #0]
 800bef0:	6128      	str	r0, [r5, #16]
 800bef2:	b920      	cbnz	r0, 800befe <_svfiprintf_r+0x2e>
 800bef4:	230c      	movs	r3, #12
 800bef6:	603b      	str	r3, [r7, #0]
 800bef8:	f04f 30ff 	mov.w	r0, #4294967295
 800befc:	e0d1      	b.n	800c0a2 <_svfiprintf_r+0x1d2>
 800befe:	2340      	movs	r3, #64	; 0x40
 800bf00:	616b      	str	r3, [r5, #20]
 800bf02:	2300      	movs	r3, #0
 800bf04:	9309      	str	r3, [sp, #36]	; 0x24
 800bf06:	2320      	movs	r3, #32
 800bf08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf0c:	2330      	movs	r3, #48	; 0x30
 800bf0e:	f04f 0901 	mov.w	r9, #1
 800bf12:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c0bc <_svfiprintf_r+0x1ec>
 800bf1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf1e:	4623      	mov	r3, r4
 800bf20:	469a      	mov	sl, r3
 800bf22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf26:	b10a      	cbz	r2, 800bf2c <_svfiprintf_r+0x5c>
 800bf28:	2a25      	cmp	r2, #37	; 0x25
 800bf2a:	d1f9      	bne.n	800bf20 <_svfiprintf_r+0x50>
 800bf2c:	ebba 0b04 	subs.w	fp, sl, r4
 800bf30:	d00b      	beq.n	800bf4a <_svfiprintf_r+0x7a>
 800bf32:	465b      	mov	r3, fp
 800bf34:	4622      	mov	r2, r4
 800bf36:	4629      	mov	r1, r5
 800bf38:	4638      	mov	r0, r7
 800bf3a:	f7ff ff6d 	bl	800be18 <__ssputs_r>
 800bf3e:	3001      	adds	r0, #1
 800bf40:	f000 80aa 	beq.w	800c098 <_svfiprintf_r+0x1c8>
 800bf44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf46:	445a      	add	r2, fp
 800bf48:	9209      	str	r2, [sp, #36]	; 0x24
 800bf4a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f000 80a2 	beq.w	800c098 <_svfiprintf_r+0x1c8>
 800bf54:	2300      	movs	r3, #0
 800bf56:	f04f 32ff 	mov.w	r2, #4294967295
 800bf5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf5e:	f10a 0a01 	add.w	sl, sl, #1
 800bf62:	9304      	str	r3, [sp, #16]
 800bf64:	9307      	str	r3, [sp, #28]
 800bf66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf6a:	931a      	str	r3, [sp, #104]	; 0x68
 800bf6c:	4654      	mov	r4, sl
 800bf6e:	2205      	movs	r2, #5
 800bf70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf74:	4851      	ldr	r0, [pc, #324]	; (800c0bc <_svfiprintf_r+0x1ec>)
 800bf76:	f000 fa41 	bl	800c3fc <memchr>
 800bf7a:	9a04      	ldr	r2, [sp, #16]
 800bf7c:	b9d8      	cbnz	r0, 800bfb6 <_svfiprintf_r+0xe6>
 800bf7e:	06d0      	lsls	r0, r2, #27
 800bf80:	bf44      	itt	mi
 800bf82:	2320      	movmi	r3, #32
 800bf84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf88:	0711      	lsls	r1, r2, #28
 800bf8a:	bf44      	itt	mi
 800bf8c:	232b      	movmi	r3, #43	; 0x2b
 800bf8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf92:	f89a 3000 	ldrb.w	r3, [sl]
 800bf96:	2b2a      	cmp	r3, #42	; 0x2a
 800bf98:	d015      	beq.n	800bfc6 <_svfiprintf_r+0xf6>
 800bf9a:	4654      	mov	r4, sl
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	f04f 0c0a 	mov.w	ip, #10
 800bfa2:	9a07      	ldr	r2, [sp, #28]
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfaa:	3b30      	subs	r3, #48	; 0x30
 800bfac:	2b09      	cmp	r3, #9
 800bfae:	d94e      	bls.n	800c04e <_svfiprintf_r+0x17e>
 800bfb0:	b1b0      	cbz	r0, 800bfe0 <_svfiprintf_r+0x110>
 800bfb2:	9207      	str	r2, [sp, #28]
 800bfb4:	e014      	b.n	800bfe0 <_svfiprintf_r+0x110>
 800bfb6:	eba0 0308 	sub.w	r3, r0, r8
 800bfba:	fa09 f303 	lsl.w	r3, r9, r3
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	46a2      	mov	sl, r4
 800bfc2:	9304      	str	r3, [sp, #16]
 800bfc4:	e7d2      	b.n	800bf6c <_svfiprintf_r+0x9c>
 800bfc6:	9b03      	ldr	r3, [sp, #12]
 800bfc8:	1d19      	adds	r1, r3, #4
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	9103      	str	r1, [sp, #12]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	bfbb      	ittet	lt
 800bfd2:	425b      	neglt	r3, r3
 800bfd4:	f042 0202 	orrlt.w	r2, r2, #2
 800bfd8:	9307      	strge	r3, [sp, #28]
 800bfda:	9307      	strlt	r3, [sp, #28]
 800bfdc:	bfb8      	it	lt
 800bfde:	9204      	strlt	r2, [sp, #16]
 800bfe0:	7823      	ldrb	r3, [r4, #0]
 800bfe2:	2b2e      	cmp	r3, #46	; 0x2e
 800bfe4:	d10c      	bne.n	800c000 <_svfiprintf_r+0x130>
 800bfe6:	7863      	ldrb	r3, [r4, #1]
 800bfe8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfea:	d135      	bne.n	800c058 <_svfiprintf_r+0x188>
 800bfec:	9b03      	ldr	r3, [sp, #12]
 800bfee:	3402      	adds	r4, #2
 800bff0:	1d1a      	adds	r2, r3, #4
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	9203      	str	r2, [sp, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	bfb8      	it	lt
 800bffa:	f04f 33ff 	movlt.w	r3, #4294967295
 800bffe:	9305      	str	r3, [sp, #20]
 800c000:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c0cc <_svfiprintf_r+0x1fc>
 800c004:	2203      	movs	r2, #3
 800c006:	4650      	mov	r0, sl
 800c008:	7821      	ldrb	r1, [r4, #0]
 800c00a:	f000 f9f7 	bl	800c3fc <memchr>
 800c00e:	b140      	cbz	r0, 800c022 <_svfiprintf_r+0x152>
 800c010:	2340      	movs	r3, #64	; 0x40
 800c012:	eba0 000a 	sub.w	r0, r0, sl
 800c016:	fa03 f000 	lsl.w	r0, r3, r0
 800c01a:	9b04      	ldr	r3, [sp, #16]
 800c01c:	3401      	adds	r4, #1
 800c01e:	4303      	orrs	r3, r0
 800c020:	9304      	str	r3, [sp, #16]
 800c022:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c026:	2206      	movs	r2, #6
 800c028:	4825      	ldr	r0, [pc, #148]	; (800c0c0 <_svfiprintf_r+0x1f0>)
 800c02a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c02e:	f000 f9e5 	bl	800c3fc <memchr>
 800c032:	2800      	cmp	r0, #0
 800c034:	d038      	beq.n	800c0a8 <_svfiprintf_r+0x1d8>
 800c036:	4b23      	ldr	r3, [pc, #140]	; (800c0c4 <_svfiprintf_r+0x1f4>)
 800c038:	bb1b      	cbnz	r3, 800c082 <_svfiprintf_r+0x1b2>
 800c03a:	9b03      	ldr	r3, [sp, #12]
 800c03c:	3307      	adds	r3, #7
 800c03e:	f023 0307 	bic.w	r3, r3, #7
 800c042:	3308      	adds	r3, #8
 800c044:	9303      	str	r3, [sp, #12]
 800c046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c048:	4433      	add	r3, r6
 800c04a:	9309      	str	r3, [sp, #36]	; 0x24
 800c04c:	e767      	b.n	800bf1e <_svfiprintf_r+0x4e>
 800c04e:	460c      	mov	r4, r1
 800c050:	2001      	movs	r0, #1
 800c052:	fb0c 3202 	mla	r2, ip, r2, r3
 800c056:	e7a5      	b.n	800bfa4 <_svfiprintf_r+0xd4>
 800c058:	2300      	movs	r3, #0
 800c05a:	f04f 0c0a 	mov.w	ip, #10
 800c05e:	4619      	mov	r1, r3
 800c060:	3401      	adds	r4, #1
 800c062:	9305      	str	r3, [sp, #20]
 800c064:	4620      	mov	r0, r4
 800c066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c06a:	3a30      	subs	r2, #48	; 0x30
 800c06c:	2a09      	cmp	r2, #9
 800c06e:	d903      	bls.n	800c078 <_svfiprintf_r+0x1a8>
 800c070:	2b00      	cmp	r3, #0
 800c072:	d0c5      	beq.n	800c000 <_svfiprintf_r+0x130>
 800c074:	9105      	str	r1, [sp, #20]
 800c076:	e7c3      	b.n	800c000 <_svfiprintf_r+0x130>
 800c078:	4604      	mov	r4, r0
 800c07a:	2301      	movs	r3, #1
 800c07c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c080:	e7f0      	b.n	800c064 <_svfiprintf_r+0x194>
 800c082:	ab03      	add	r3, sp, #12
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	462a      	mov	r2, r5
 800c088:	4638      	mov	r0, r7
 800c08a:	4b0f      	ldr	r3, [pc, #60]	; (800c0c8 <_svfiprintf_r+0x1f8>)
 800c08c:	a904      	add	r1, sp, #16
 800c08e:	f3af 8000 	nop.w
 800c092:	1c42      	adds	r2, r0, #1
 800c094:	4606      	mov	r6, r0
 800c096:	d1d6      	bne.n	800c046 <_svfiprintf_r+0x176>
 800c098:	89ab      	ldrh	r3, [r5, #12]
 800c09a:	065b      	lsls	r3, r3, #25
 800c09c:	f53f af2c 	bmi.w	800bef8 <_svfiprintf_r+0x28>
 800c0a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0a2:	b01d      	add	sp, #116	; 0x74
 800c0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a8:	ab03      	add	r3, sp, #12
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	462a      	mov	r2, r5
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <_svfiprintf_r+0x1f8>)
 800c0b2:	a904      	add	r1, sp, #16
 800c0b4:	f000 f87c 	bl	800c1b0 <_printf_i>
 800c0b8:	e7eb      	b.n	800c092 <_svfiprintf_r+0x1c2>
 800c0ba:	bf00      	nop
 800c0bc:	0800c958 	.word	0x0800c958
 800c0c0:	0800c962 	.word	0x0800c962
 800c0c4:	00000000 	.word	0x00000000
 800c0c8:	0800be19 	.word	0x0800be19
 800c0cc:	0800c95e 	.word	0x0800c95e

0800c0d0 <_printf_common>:
 800c0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d4:	4616      	mov	r6, r2
 800c0d6:	4699      	mov	r9, r3
 800c0d8:	688a      	ldr	r2, [r1, #8]
 800c0da:	690b      	ldr	r3, [r1, #16]
 800c0dc:	4607      	mov	r7, r0
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	bfb8      	it	lt
 800c0e2:	4613      	movlt	r3, r2
 800c0e4:	6033      	str	r3, [r6, #0]
 800c0e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0ea:	460c      	mov	r4, r1
 800c0ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0f0:	b10a      	cbz	r2, 800c0f6 <_printf_common+0x26>
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	6033      	str	r3, [r6, #0]
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	0699      	lsls	r1, r3, #26
 800c0fa:	bf42      	ittt	mi
 800c0fc:	6833      	ldrmi	r3, [r6, #0]
 800c0fe:	3302      	addmi	r3, #2
 800c100:	6033      	strmi	r3, [r6, #0]
 800c102:	6825      	ldr	r5, [r4, #0]
 800c104:	f015 0506 	ands.w	r5, r5, #6
 800c108:	d106      	bne.n	800c118 <_printf_common+0x48>
 800c10a:	f104 0a19 	add.w	sl, r4, #25
 800c10e:	68e3      	ldr	r3, [r4, #12]
 800c110:	6832      	ldr	r2, [r6, #0]
 800c112:	1a9b      	subs	r3, r3, r2
 800c114:	42ab      	cmp	r3, r5
 800c116:	dc28      	bgt.n	800c16a <_printf_common+0x9a>
 800c118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c11c:	1e13      	subs	r3, r2, #0
 800c11e:	6822      	ldr	r2, [r4, #0]
 800c120:	bf18      	it	ne
 800c122:	2301      	movne	r3, #1
 800c124:	0692      	lsls	r2, r2, #26
 800c126:	d42d      	bmi.n	800c184 <_printf_common+0xb4>
 800c128:	4649      	mov	r1, r9
 800c12a:	4638      	mov	r0, r7
 800c12c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c130:	47c0      	blx	r8
 800c132:	3001      	adds	r0, #1
 800c134:	d020      	beq.n	800c178 <_printf_common+0xa8>
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	68e5      	ldr	r5, [r4, #12]
 800c13a:	f003 0306 	and.w	r3, r3, #6
 800c13e:	2b04      	cmp	r3, #4
 800c140:	bf18      	it	ne
 800c142:	2500      	movne	r5, #0
 800c144:	6832      	ldr	r2, [r6, #0]
 800c146:	f04f 0600 	mov.w	r6, #0
 800c14a:	68a3      	ldr	r3, [r4, #8]
 800c14c:	bf08      	it	eq
 800c14e:	1aad      	subeq	r5, r5, r2
 800c150:	6922      	ldr	r2, [r4, #16]
 800c152:	bf08      	it	eq
 800c154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c158:	4293      	cmp	r3, r2
 800c15a:	bfc4      	itt	gt
 800c15c:	1a9b      	subgt	r3, r3, r2
 800c15e:	18ed      	addgt	r5, r5, r3
 800c160:	341a      	adds	r4, #26
 800c162:	42b5      	cmp	r5, r6
 800c164:	d11a      	bne.n	800c19c <_printf_common+0xcc>
 800c166:	2000      	movs	r0, #0
 800c168:	e008      	b.n	800c17c <_printf_common+0xac>
 800c16a:	2301      	movs	r3, #1
 800c16c:	4652      	mov	r2, sl
 800c16e:	4649      	mov	r1, r9
 800c170:	4638      	mov	r0, r7
 800c172:	47c0      	blx	r8
 800c174:	3001      	adds	r0, #1
 800c176:	d103      	bne.n	800c180 <_printf_common+0xb0>
 800c178:	f04f 30ff 	mov.w	r0, #4294967295
 800c17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c180:	3501      	adds	r5, #1
 800c182:	e7c4      	b.n	800c10e <_printf_common+0x3e>
 800c184:	2030      	movs	r0, #48	; 0x30
 800c186:	18e1      	adds	r1, r4, r3
 800c188:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c18c:	1c5a      	adds	r2, r3, #1
 800c18e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c192:	4422      	add	r2, r4
 800c194:	3302      	adds	r3, #2
 800c196:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c19a:	e7c5      	b.n	800c128 <_printf_common+0x58>
 800c19c:	2301      	movs	r3, #1
 800c19e:	4622      	mov	r2, r4
 800c1a0:	4649      	mov	r1, r9
 800c1a2:	4638      	mov	r0, r7
 800c1a4:	47c0      	blx	r8
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	d0e6      	beq.n	800c178 <_printf_common+0xa8>
 800c1aa:	3601      	adds	r6, #1
 800c1ac:	e7d9      	b.n	800c162 <_printf_common+0x92>
	...

0800c1b0 <_printf_i>:
 800c1b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b4:	460c      	mov	r4, r1
 800c1b6:	7e27      	ldrb	r7, [r4, #24]
 800c1b8:	4691      	mov	r9, r2
 800c1ba:	2f78      	cmp	r7, #120	; 0x78
 800c1bc:	4680      	mov	r8, r0
 800c1be:	469a      	mov	sl, r3
 800c1c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c1c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1c6:	d807      	bhi.n	800c1d8 <_printf_i+0x28>
 800c1c8:	2f62      	cmp	r7, #98	; 0x62
 800c1ca:	d80a      	bhi.n	800c1e2 <_printf_i+0x32>
 800c1cc:	2f00      	cmp	r7, #0
 800c1ce:	f000 80d9 	beq.w	800c384 <_printf_i+0x1d4>
 800c1d2:	2f58      	cmp	r7, #88	; 0x58
 800c1d4:	f000 80a4 	beq.w	800c320 <_printf_i+0x170>
 800c1d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c1dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1e0:	e03a      	b.n	800c258 <_printf_i+0xa8>
 800c1e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1e6:	2b15      	cmp	r3, #21
 800c1e8:	d8f6      	bhi.n	800c1d8 <_printf_i+0x28>
 800c1ea:	a001      	add	r0, pc, #4	; (adr r0, 800c1f0 <_printf_i+0x40>)
 800c1ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c1f0:	0800c249 	.word	0x0800c249
 800c1f4:	0800c25d 	.word	0x0800c25d
 800c1f8:	0800c1d9 	.word	0x0800c1d9
 800c1fc:	0800c1d9 	.word	0x0800c1d9
 800c200:	0800c1d9 	.word	0x0800c1d9
 800c204:	0800c1d9 	.word	0x0800c1d9
 800c208:	0800c25d 	.word	0x0800c25d
 800c20c:	0800c1d9 	.word	0x0800c1d9
 800c210:	0800c1d9 	.word	0x0800c1d9
 800c214:	0800c1d9 	.word	0x0800c1d9
 800c218:	0800c1d9 	.word	0x0800c1d9
 800c21c:	0800c36b 	.word	0x0800c36b
 800c220:	0800c28d 	.word	0x0800c28d
 800c224:	0800c34d 	.word	0x0800c34d
 800c228:	0800c1d9 	.word	0x0800c1d9
 800c22c:	0800c1d9 	.word	0x0800c1d9
 800c230:	0800c38d 	.word	0x0800c38d
 800c234:	0800c1d9 	.word	0x0800c1d9
 800c238:	0800c28d 	.word	0x0800c28d
 800c23c:	0800c1d9 	.word	0x0800c1d9
 800c240:	0800c1d9 	.word	0x0800c1d9
 800c244:	0800c355 	.word	0x0800c355
 800c248:	680b      	ldr	r3, [r1, #0]
 800c24a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c24e:	1d1a      	adds	r2, r3, #4
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	600a      	str	r2, [r1, #0]
 800c254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c258:	2301      	movs	r3, #1
 800c25a:	e0a4      	b.n	800c3a6 <_printf_i+0x1f6>
 800c25c:	6825      	ldr	r5, [r4, #0]
 800c25e:	6808      	ldr	r0, [r1, #0]
 800c260:	062e      	lsls	r6, r5, #24
 800c262:	f100 0304 	add.w	r3, r0, #4
 800c266:	d50a      	bpl.n	800c27e <_printf_i+0xce>
 800c268:	6805      	ldr	r5, [r0, #0]
 800c26a:	600b      	str	r3, [r1, #0]
 800c26c:	2d00      	cmp	r5, #0
 800c26e:	da03      	bge.n	800c278 <_printf_i+0xc8>
 800c270:	232d      	movs	r3, #45	; 0x2d
 800c272:	426d      	negs	r5, r5
 800c274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c278:	230a      	movs	r3, #10
 800c27a:	485e      	ldr	r0, [pc, #376]	; (800c3f4 <_printf_i+0x244>)
 800c27c:	e019      	b.n	800c2b2 <_printf_i+0x102>
 800c27e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c282:	6805      	ldr	r5, [r0, #0]
 800c284:	600b      	str	r3, [r1, #0]
 800c286:	bf18      	it	ne
 800c288:	b22d      	sxthne	r5, r5
 800c28a:	e7ef      	b.n	800c26c <_printf_i+0xbc>
 800c28c:	680b      	ldr	r3, [r1, #0]
 800c28e:	6825      	ldr	r5, [r4, #0]
 800c290:	1d18      	adds	r0, r3, #4
 800c292:	6008      	str	r0, [r1, #0]
 800c294:	0628      	lsls	r0, r5, #24
 800c296:	d501      	bpl.n	800c29c <_printf_i+0xec>
 800c298:	681d      	ldr	r5, [r3, #0]
 800c29a:	e002      	b.n	800c2a2 <_printf_i+0xf2>
 800c29c:	0669      	lsls	r1, r5, #25
 800c29e:	d5fb      	bpl.n	800c298 <_printf_i+0xe8>
 800c2a0:	881d      	ldrh	r5, [r3, #0]
 800c2a2:	2f6f      	cmp	r7, #111	; 0x6f
 800c2a4:	bf0c      	ite	eq
 800c2a6:	2308      	moveq	r3, #8
 800c2a8:	230a      	movne	r3, #10
 800c2aa:	4852      	ldr	r0, [pc, #328]	; (800c3f4 <_printf_i+0x244>)
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2b2:	6866      	ldr	r6, [r4, #4]
 800c2b4:	2e00      	cmp	r6, #0
 800c2b6:	bfa8      	it	ge
 800c2b8:	6821      	ldrge	r1, [r4, #0]
 800c2ba:	60a6      	str	r6, [r4, #8]
 800c2bc:	bfa4      	itt	ge
 800c2be:	f021 0104 	bicge.w	r1, r1, #4
 800c2c2:	6021      	strge	r1, [r4, #0]
 800c2c4:	b90d      	cbnz	r5, 800c2ca <_printf_i+0x11a>
 800c2c6:	2e00      	cmp	r6, #0
 800c2c8:	d04d      	beq.n	800c366 <_printf_i+0x1b6>
 800c2ca:	4616      	mov	r6, r2
 800c2cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800c2d0:	fb03 5711 	mls	r7, r3, r1, r5
 800c2d4:	5dc7      	ldrb	r7, [r0, r7]
 800c2d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c2da:	462f      	mov	r7, r5
 800c2dc:	42bb      	cmp	r3, r7
 800c2de:	460d      	mov	r5, r1
 800c2e0:	d9f4      	bls.n	800c2cc <_printf_i+0x11c>
 800c2e2:	2b08      	cmp	r3, #8
 800c2e4:	d10b      	bne.n	800c2fe <_printf_i+0x14e>
 800c2e6:	6823      	ldr	r3, [r4, #0]
 800c2e8:	07df      	lsls	r7, r3, #31
 800c2ea:	d508      	bpl.n	800c2fe <_printf_i+0x14e>
 800c2ec:	6923      	ldr	r3, [r4, #16]
 800c2ee:	6861      	ldr	r1, [r4, #4]
 800c2f0:	4299      	cmp	r1, r3
 800c2f2:	bfde      	ittt	le
 800c2f4:	2330      	movle	r3, #48	; 0x30
 800c2f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2fe:	1b92      	subs	r2, r2, r6
 800c300:	6122      	str	r2, [r4, #16]
 800c302:	464b      	mov	r3, r9
 800c304:	4621      	mov	r1, r4
 800c306:	4640      	mov	r0, r8
 800c308:	f8cd a000 	str.w	sl, [sp]
 800c30c:	aa03      	add	r2, sp, #12
 800c30e:	f7ff fedf 	bl	800c0d0 <_printf_common>
 800c312:	3001      	adds	r0, #1
 800c314:	d14c      	bne.n	800c3b0 <_printf_i+0x200>
 800c316:	f04f 30ff 	mov.w	r0, #4294967295
 800c31a:	b004      	add	sp, #16
 800c31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c320:	4834      	ldr	r0, [pc, #208]	; (800c3f4 <_printf_i+0x244>)
 800c322:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c326:	680e      	ldr	r6, [r1, #0]
 800c328:	6823      	ldr	r3, [r4, #0]
 800c32a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c32e:	061f      	lsls	r7, r3, #24
 800c330:	600e      	str	r6, [r1, #0]
 800c332:	d514      	bpl.n	800c35e <_printf_i+0x1ae>
 800c334:	07d9      	lsls	r1, r3, #31
 800c336:	bf44      	itt	mi
 800c338:	f043 0320 	orrmi.w	r3, r3, #32
 800c33c:	6023      	strmi	r3, [r4, #0]
 800c33e:	b91d      	cbnz	r5, 800c348 <_printf_i+0x198>
 800c340:	6823      	ldr	r3, [r4, #0]
 800c342:	f023 0320 	bic.w	r3, r3, #32
 800c346:	6023      	str	r3, [r4, #0]
 800c348:	2310      	movs	r3, #16
 800c34a:	e7af      	b.n	800c2ac <_printf_i+0xfc>
 800c34c:	6823      	ldr	r3, [r4, #0]
 800c34e:	f043 0320 	orr.w	r3, r3, #32
 800c352:	6023      	str	r3, [r4, #0]
 800c354:	2378      	movs	r3, #120	; 0x78
 800c356:	4828      	ldr	r0, [pc, #160]	; (800c3f8 <_printf_i+0x248>)
 800c358:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c35c:	e7e3      	b.n	800c326 <_printf_i+0x176>
 800c35e:	065e      	lsls	r6, r3, #25
 800c360:	bf48      	it	mi
 800c362:	b2ad      	uxthmi	r5, r5
 800c364:	e7e6      	b.n	800c334 <_printf_i+0x184>
 800c366:	4616      	mov	r6, r2
 800c368:	e7bb      	b.n	800c2e2 <_printf_i+0x132>
 800c36a:	680b      	ldr	r3, [r1, #0]
 800c36c:	6826      	ldr	r6, [r4, #0]
 800c36e:	1d1d      	adds	r5, r3, #4
 800c370:	6960      	ldr	r0, [r4, #20]
 800c372:	600d      	str	r5, [r1, #0]
 800c374:	0635      	lsls	r5, r6, #24
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	d501      	bpl.n	800c37e <_printf_i+0x1ce>
 800c37a:	6018      	str	r0, [r3, #0]
 800c37c:	e002      	b.n	800c384 <_printf_i+0x1d4>
 800c37e:	0671      	lsls	r1, r6, #25
 800c380:	d5fb      	bpl.n	800c37a <_printf_i+0x1ca>
 800c382:	8018      	strh	r0, [r3, #0]
 800c384:	2300      	movs	r3, #0
 800c386:	4616      	mov	r6, r2
 800c388:	6123      	str	r3, [r4, #16]
 800c38a:	e7ba      	b.n	800c302 <_printf_i+0x152>
 800c38c:	680b      	ldr	r3, [r1, #0]
 800c38e:	1d1a      	adds	r2, r3, #4
 800c390:	600a      	str	r2, [r1, #0]
 800c392:	681e      	ldr	r6, [r3, #0]
 800c394:	2100      	movs	r1, #0
 800c396:	4630      	mov	r0, r6
 800c398:	6862      	ldr	r2, [r4, #4]
 800c39a:	f000 f82f 	bl	800c3fc <memchr>
 800c39e:	b108      	cbz	r0, 800c3a4 <_printf_i+0x1f4>
 800c3a0:	1b80      	subs	r0, r0, r6
 800c3a2:	6060      	str	r0, [r4, #4]
 800c3a4:	6863      	ldr	r3, [r4, #4]
 800c3a6:	6123      	str	r3, [r4, #16]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3ae:	e7a8      	b.n	800c302 <_printf_i+0x152>
 800c3b0:	4632      	mov	r2, r6
 800c3b2:	4649      	mov	r1, r9
 800c3b4:	4640      	mov	r0, r8
 800c3b6:	6923      	ldr	r3, [r4, #16]
 800c3b8:	47d0      	blx	sl
 800c3ba:	3001      	adds	r0, #1
 800c3bc:	d0ab      	beq.n	800c316 <_printf_i+0x166>
 800c3be:	6823      	ldr	r3, [r4, #0]
 800c3c0:	079b      	lsls	r3, r3, #30
 800c3c2:	d413      	bmi.n	800c3ec <_printf_i+0x23c>
 800c3c4:	68e0      	ldr	r0, [r4, #12]
 800c3c6:	9b03      	ldr	r3, [sp, #12]
 800c3c8:	4298      	cmp	r0, r3
 800c3ca:	bfb8      	it	lt
 800c3cc:	4618      	movlt	r0, r3
 800c3ce:	e7a4      	b.n	800c31a <_printf_i+0x16a>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	4632      	mov	r2, r6
 800c3d4:	4649      	mov	r1, r9
 800c3d6:	4640      	mov	r0, r8
 800c3d8:	47d0      	blx	sl
 800c3da:	3001      	adds	r0, #1
 800c3dc:	d09b      	beq.n	800c316 <_printf_i+0x166>
 800c3de:	3501      	adds	r5, #1
 800c3e0:	68e3      	ldr	r3, [r4, #12]
 800c3e2:	9903      	ldr	r1, [sp, #12]
 800c3e4:	1a5b      	subs	r3, r3, r1
 800c3e6:	42ab      	cmp	r3, r5
 800c3e8:	dcf2      	bgt.n	800c3d0 <_printf_i+0x220>
 800c3ea:	e7eb      	b.n	800c3c4 <_printf_i+0x214>
 800c3ec:	2500      	movs	r5, #0
 800c3ee:	f104 0619 	add.w	r6, r4, #25
 800c3f2:	e7f5      	b.n	800c3e0 <_printf_i+0x230>
 800c3f4:	0800c969 	.word	0x0800c969
 800c3f8:	0800c97a 	.word	0x0800c97a

0800c3fc <memchr>:
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	b510      	push	{r4, lr}
 800c400:	b2c9      	uxtb	r1, r1
 800c402:	4402      	add	r2, r0
 800c404:	4293      	cmp	r3, r2
 800c406:	4618      	mov	r0, r3
 800c408:	d101      	bne.n	800c40e <memchr+0x12>
 800c40a:	2000      	movs	r0, #0
 800c40c:	e003      	b.n	800c416 <memchr+0x1a>
 800c40e:	7804      	ldrb	r4, [r0, #0]
 800c410:	3301      	adds	r3, #1
 800c412:	428c      	cmp	r4, r1
 800c414:	d1f6      	bne.n	800c404 <memchr+0x8>
 800c416:	bd10      	pop	{r4, pc}

0800c418 <memcpy>:
 800c418:	440a      	add	r2, r1
 800c41a:	4291      	cmp	r1, r2
 800c41c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c420:	d100      	bne.n	800c424 <memcpy+0xc>
 800c422:	4770      	bx	lr
 800c424:	b510      	push	{r4, lr}
 800c426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c42a:	4291      	cmp	r1, r2
 800c42c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c430:	d1f9      	bne.n	800c426 <memcpy+0xe>
 800c432:	bd10      	pop	{r4, pc}

0800c434 <memmove>:
 800c434:	4288      	cmp	r0, r1
 800c436:	b510      	push	{r4, lr}
 800c438:	eb01 0402 	add.w	r4, r1, r2
 800c43c:	d902      	bls.n	800c444 <memmove+0x10>
 800c43e:	4284      	cmp	r4, r0
 800c440:	4623      	mov	r3, r4
 800c442:	d807      	bhi.n	800c454 <memmove+0x20>
 800c444:	1e43      	subs	r3, r0, #1
 800c446:	42a1      	cmp	r1, r4
 800c448:	d008      	beq.n	800c45c <memmove+0x28>
 800c44a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c44e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c452:	e7f8      	b.n	800c446 <memmove+0x12>
 800c454:	4601      	mov	r1, r0
 800c456:	4402      	add	r2, r0
 800c458:	428a      	cmp	r2, r1
 800c45a:	d100      	bne.n	800c45e <memmove+0x2a>
 800c45c:	bd10      	pop	{r4, pc}
 800c45e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c466:	e7f7      	b.n	800c458 <memmove+0x24>

0800c468 <_free_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4605      	mov	r5, r0
 800c46c:	2900      	cmp	r1, #0
 800c46e:	d043      	beq.n	800c4f8 <_free_r+0x90>
 800c470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c474:	1f0c      	subs	r4, r1, #4
 800c476:	2b00      	cmp	r3, #0
 800c478:	bfb8      	it	lt
 800c47a:	18e4      	addlt	r4, r4, r3
 800c47c:	f000 f8d0 	bl	800c620 <__malloc_lock>
 800c480:	4a1e      	ldr	r2, [pc, #120]	; (800c4fc <_free_r+0x94>)
 800c482:	6813      	ldr	r3, [r2, #0]
 800c484:	4610      	mov	r0, r2
 800c486:	b933      	cbnz	r3, 800c496 <_free_r+0x2e>
 800c488:	6063      	str	r3, [r4, #4]
 800c48a:	6014      	str	r4, [r2, #0]
 800c48c:	4628      	mov	r0, r5
 800c48e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c492:	f000 b8cb 	b.w	800c62c <__malloc_unlock>
 800c496:	42a3      	cmp	r3, r4
 800c498:	d90a      	bls.n	800c4b0 <_free_r+0x48>
 800c49a:	6821      	ldr	r1, [r4, #0]
 800c49c:	1862      	adds	r2, r4, r1
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	bf01      	itttt	eq
 800c4a2:	681a      	ldreq	r2, [r3, #0]
 800c4a4:	685b      	ldreq	r3, [r3, #4]
 800c4a6:	1852      	addeq	r2, r2, r1
 800c4a8:	6022      	streq	r2, [r4, #0]
 800c4aa:	6063      	str	r3, [r4, #4]
 800c4ac:	6004      	str	r4, [r0, #0]
 800c4ae:	e7ed      	b.n	800c48c <_free_r+0x24>
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	b10b      	cbz	r3, 800c4ba <_free_r+0x52>
 800c4b6:	42a3      	cmp	r3, r4
 800c4b8:	d9fa      	bls.n	800c4b0 <_free_r+0x48>
 800c4ba:	6811      	ldr	r1, [r2, #0]
 800c4bc:	1850      	adds	r0, r2, r1
 800c4be:	42a0      	cmp	r0, r4
 800c4c0:	d10b      	bne.n	800c4da <_free_r+0x72>
 800c4c2:	6820      	ldr	r0, [r4, #0]
 800c4c4:	4401      	add	r1, r0
 800c4c6:	1850      	adds	r0, r2, r1
 800c4c8:	4283      	cmp	r3, r0
 800c4ca:	6011      	str	r1, [r2, #0]
 800c4cc:	d1de      	bne.n	800c48c <_free_r+0x24>
 800c4ce:	6818      	ldr	r0, [r3, #0]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	4401      	add	r1, r0
 800c4d4:	6011      	str	r1, [r2, #0]
 800c4d6:	6053      	str	r3, [r2, #4]
 800c4d8:	e7d8      	b.n	800c48c <_free_r+0x24>
 800c4da:	d902      	bls.n	800c4e2 <_free_r+0x7a>
 800c4dc:	230c      	movs	r3, #12
 800c4de:	602b      	str	r3, [r5, #0]
 800c4e0:	e7d4      	b.n	800c48c <_free_r+0x24>
 800c4e2:	6820      	ldr	r0, [r4, #0]
 800c4e4:	1821      	adds	r1, r4, r0
 800c4e6:	428b      	cmp	r3, r1
 800c4e8:	bf01      	itttt	eq
 800c4ea:	6819      	ldreq	r1, [r3, #0]
 800c4ec:	685b      	ldreq	r3, [r3, #4]
 800c4ee:	1809      	addeq	r1, r1, r0
 800c4f0:	6021      	streq	r1, [r4, #0]
 800c4f2:	6063      	str	r3, [r4, #4]
 800c4f4:	6054      	str	r4, [r2, #4]
 800c4f6:	e7c9      	b.n	800c48c <_free_r+0x24>
 800c4f8:	bd38      	pop	{r3, r4, r5, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20000518 	.word	0x20000518

0800c500 <_malloc_r>:
 800c500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c502:	1ccd      	adds	r5, r1, #3
 800c504:	f025 0503 	bic.w	r5, r5, #3
 800c508:	3508      	adds	r5, #8
 800c50a:	2d0c      	cmp	r5, #12
 800c50c:	bf38      	it	cc
 800c50e:	250c      	movcc	r5, #12
 800c510:	2d00      	cmp	r5, #0
 800c512:	4606      	mov	r6, r0
 800c514:	db01      	blt.n	800c51a <_malloc_r+0x1a>
 800c516:	42a9      	cmp	r1, r5
 800c518:	d903      	bls.n	800c522 <_malloc_r+0x22>
 800c51a:	230c      	movs	r3, #12
 800c51c:	6033      	str	r3, [r6, #0]
 800c51e:	2000      	movs	r0, #0
 800c520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c522:	f000 f87d 	bl	800c620 <__malloc_lock>
 800c526:	4921      	ldr	r1, [pc, #132]	; (800c5ac <_malloc_r+0xac>)
 800c528:	680a      	ldr	r2, [r1, #0]
 800c52a:	4614      	mov	r4, r2
 800c52c:	b99c      	cbnz	r4, 800c556 <_malloc_r+0x56>
 800c52e:	4f20      	ldr	r7, [pc, #128]	; (800c5b0 <_malloc_r+0xb0>)
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	b923      	cbnz	r3, 800c53e <_malloc_r+0x3e>
 800c534:	4621      	mov	r1, r4
 800c536:	4630      	mov	r0, r6
 800c538:	f000 f862 	bl	800c600 <_sbrk_r>
 800c53c:	6038      	str	r0, [r7, #0]
 800c53e:	4629      	mov	r1, r5
 800c540:	4630      	mov	r0, r6
 800c542:	f000 f85d 	bl	800c600 <_sbrk_r>
 800c546:	1c43      	adds	r3, r0, #1
 800c548:	d123      	bne.n	800c592 <_malloc_r+0x92>
 800c54a:	230c      	movs	r3, #12
 800c54c:	4630      	mov	r0, r6
 800c54e:	6033      	str	r3, [r6, #0]
 800c550:	f000 f86c 	bl	800c62c <__malloc_unlock>
 800c554:	e7e3      	b.n	800c51e <_malloc_r+0x1e>
 800c556:	6823      	ldr	r3, [r4, #0]
 800c558:	1b5b      	subs	r3, r3, r5
 800c55a:	d417      	bmi.n	800c58c <_malloc_r+0x8c>
 800c55c:	2b0b      	cmp	r3, #11
 800c55e:	d903      	bls.n	800c568 <_malloc_r+0x68>
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	441c      	add	r4, r3
 800c564:	6025      	str	r5, [r4, #0]
 800c566:	e004      	b.n	800c572 <_malloc_r+0x72>
 800c568:	6863      	ldr	r3, [r4, #4]
 800c56a:	42a2      	cmp	r2, r4
 800c56c:	bf0c      	ite	eq
 800c56e:	600b      	streq	r3, [r1, #0]
 800c570:	6053      	strne	r3, [r2, #4]
 800c572:	4630      	mov	r0, r6
 800c574:	f000 f85a 	bl	800c62c <__malloc_unlock>
 800c578:	f104 000b 	add.w	r0, r4, #11
 800c57c:	1d23      	adds	r3, r4, #4
 800c57e:	f020 0007 	bic.w	r0, r0, #7
 800c582:	1ac2      	subs	r2, r0, r3
 800c584:	d0cc      	beq.n	800c520 <_malloc_r+0x20>
 800c586:	1a1b      	subs	r3, r3, r0
 800c588:	50a3      	str	r3, [r4, r2]
 800c58a:	e7c9      	b.n	800c520 <_malloc_r+0x20>
 800c58c:	4622      	mov	r2, r4
 800c58e:	6864      	ldr	r4, [r4, #4]
 800c590:	e7cc      	b.n	800c52c <_malloc_r+0x2c>
 800c592:	1cc4      	adds	r4, r0, #3
 800c594:	f024 0403 	bic.w	r4, r4, #3
 800c598:	42a0      	cmp	r0, r4
 800c59a:	d0e3      	beq.n	800c564 <_malloc_r+0x64>
 800c59c:	1a21      	subs	r1, r4, r0
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f000 f82e 	bl	800c600 <_sbrk_r>
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	d1dd      	bne.n	800c564 <_malloc_r+0x64>
 800c5a8:	e7cf      	b.n	800c54a <_malloc_r+0x4a>
 800c5aa:	bf00      	nop
 800c5ac:	20000518 	.word	0x20000518
 800c5b0:	2000051c 	.word	0x2000051c

0800c5b4 <_realloc_r>:
 800c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b6:	4607      	mov	r7, r0
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	460e      	mov	r6, r1
 800c5bc:	b921      	cbnz	r1, 800c5c8 <_realloc_r+0x14>
 800c5be:	4611      	mov	r1, r2
 800c5c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c5c4:	f7ff bf9c 	b.w	800c500 <_malloc_r>
 800c5c8:	b922      	cbnz	r2, 800c5d4 <_realloc_r+0x20>
 800c5ca:	f7ff ff4d 	bl	800c468 <_free_r>
 800c5ce:	4625      	mov	r5, r4
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5d4:	f000 f830 	bl	800c638 <_malloc_usable_size_r>
 800c5d8:	42a0      	cmp	r0, r4
 800c5da:	d20f      	bcs.n	800c5fc <_realloc_r+0x48>
 800c5dc:	4621      	mov	r1, r4
 800c5de:	4638      	mov	r0, r7
 800c5e0:	f7ff ff8e 	bl	800c500 <_malloc_r>
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d0f2      	beq.n	800c5d0 <_realloc_r+0x1c>
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	4622      	mov	r2, r4
 800c5ee:	f7ff ff13 	bl	800c418 <memcpy>
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	4638      	mov	r0, r7
 800c5f6:	f7ff ff37 	bl	800c468 <_free_r>
 800c5fa:	e7e9      	b.n	800c5d0 <_realloc_r+0x1c>
 800c5fc:	4635      	mov	r5, r6
 800c5fe:	e7e7      	b.n	800c5d0 <_realloc_r+0x1c>

0800c600 <_sbrk_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	2300      	movs	r3, #0
 800c604:	4d05      	ldr	r5, [pc, #20]	; (800c61c <_sbrk_r+0x1c>)
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	602b      	str	r3, [r5, #0]
 800c60c:	f7f6 ff8c 	bl	8003528 <_sbrk>
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d102      	bne.n	800c61a <_sbrk_r+0x1a>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	b103      	cbz	r3, 800c61a <_sbrk_r+0x1a>
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	200015fc 	.word	0x200015fc

0800c620 <__malloc_lock>:
 800c620:	4801      	ldr	r0, [pc, #4]	; (800c628 <__malloc_lock+0x8>)
 800c622:	f000 b811 	b.w	800c648 <__retarget_lock_acquire_recursive>
 800c626:	bf00      	nop
 800c628:	20001604 	.word	0x20001604

0800c62c <__malloc_unlock>:
 800c62c:	4801      	ldr	r0, [pc, #4]	; (800c634 <__malloc_unlock+0x8>)
 800c62e:	f000 b80c 	b.w	800c64a <__retarget_lock_release_recursive>
 800c632:	bf00      	nop
 800c634:	20001604 	.word	0x20001604

0800c638 <_malloc_usable_size_r>:
 800c638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c63c:	1f18      	subs	r0, r3, #4
 800c63e:	2b00      	cmp	r3, #0
 800c640:	bfbc      	itt	lt
 800c642:	580b      	ldrlt	r3, [r1, r0]
 800c644:	18c0      	addlt	r0, r0, r3
 800c646:	4770      	bx	lr

0800c648 <__retarget_lock_acquire_recursive>:
 800c648:	4770      	bx	lr

0800c64a <__retarget_lock_release_recursive>:
 800c64a:	4770      	bx	lr

0800c64c <_init>:
 800c64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64e:	bf00      	nop
 800c650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c652:	bc08      	pop	{r3}
 800c654:	469e      	mov	lr, r3
 800c656:	4770      	bx	lr

0800c658 <_fini>:
 800c658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65a:	bf00      	nop
 800c65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c65e:	bc08      	pop	{r3}
 800c660:	469e      	mov	lr, r3
 800c662:	4770      	bx	lr
