
HotIron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080089f0  080089f0  000189f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab0  08008ab0  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08008ab0  08008ab0  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ab0  08008ab0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab0  08008ab0  00018ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ab4  08008ab4  00018ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001280  20000180  08008c38  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001400  08008c38  00021400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c40  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003952  00000000  00000000  00039de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0003d740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003e970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0b8  00000000  00000000  0003fa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160fa  00000000  00000000  0005aac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f1b5  00000000  00000000  00070bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ffd6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a90  00000000  00000000  000ffdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	080089d8 	.word	0x080089d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	080089d8 	.word	0x080089d8

0800014c <delay_init>:
#include "main.h"

TIM_HandleTypeDef * htim;

void delay_init(TIM_HandleTypeDef * htim_i)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	htim = htim_i;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <delay_init+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htim);
 800015a:	4b04      	ldr	r3, [pc, #16]	; (800016c <delay_init+0x20>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4618      	mov	r0, r3
 8000160:	f003 ff12 	bl	8003f88 <HAL_TIM_Base_Start>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200003c0 	.word	0x200003c0

08000170 <delay_us>:

// delays for us count
void delay_us(uint16_t us)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim,0);
 800017a:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <delay_us+0x34>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2200      	movs	r2, #0
 8000182:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(htim) < us);
 8000184:	bf00      	nop
 8000186:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <delay_us+0x34>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800018e:	b29b      	uxth	r3, r3
 8000190:	88fa      	ldrh	r2, [r7, #6]
 8000192:	429a      	cmp	r2, r3
 8000194:	d8f7      	bhi.n	8000186 <delay_us+0x16>
}
 8000196:	bf00      	nop
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	200003c0 	.word	0x200003c0

080001a8 <lcd_create>:
 */
LCD_HandleTypeDef lcd_create(
		LCD_PortType port[], LCD_PinType pin[],
		LCD_PortType rs_port, LCD_PinType rs_pin,
		LCD_PortType en_port, LCD_PinType en_pin, LCD_ModeTypeDef mode)
{
 80001a8:	b5b0      	push	{r4, r5, r7, lr}
 80001aa:	b08a      	sub	sp, #40	; 0x28
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
 80001b4:	603b      	str	r3, [r7, #0]
	LCD_HandleTypeDef lcd;

	lcd.mode = mode;
 80001b6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80001ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80001be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80001c2:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80001c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001c6:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80001c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80001ca:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	613b      	str	r3, [r7, #16]

	lcd_init(&lcd);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 f80f 	bl	8000200 <lcd_init>

	return lcd;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	461d      	mov	r5, r3
 80001e6:	f107 0410 	add.w	r4, r7, #16
 80001ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001f2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001f6:	68f8      	ldr	r0, [r7, #12]
 80001f8:	3728      	adds	r7, #40	; 0x28
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000200 <lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void lcd_init(LCD_HandleTypeDef * lcd)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	7d9b      	ldrb	r3, [r3, #22]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d10f      	bne.n	8000230 <lcd_init+0x30>
	{
			lcd_write_command(lcd, 0x33);
 8000210:	2133      	movs	r1, #51	; 0x33
 8000212:	6878      	ldr	r0, [r7, #4]
 8000214:	f000 f856 	bl	80002c4 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000218:	2132      	movs	r1, #50	; 0x32
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f000 f852 	bl	80002c4 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000220:	2128      	movs	r1, #40	; 0x28
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f84e 	bl	80002c4 <lcd_write_command>
			lcd_8line_mode = false;
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <lcd_init+0x5c>)
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
 800022e:	e006      	b.n	800023e <lcd_init+0x3e>
	}
	else
	{
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000230:	2138      	movs	r1, #56	; 0x38
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f000 f846 	bl	80002c4 <lcd_write_command>
		lcd_8line_mode = true;
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <lcd_init+0x5c>)
 800023a:	2201      	movs	r2, #1
 800023c:	701a      	strb	r2, [r3, #0]
	}


	lcd_clear(lcd);											// Clear screen
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f000 f80e 	bl	8000260 <lcd_clear>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);	// Lcd-on, cursor-off, no-blink
 8000244:	210c      	movs	r1, #12
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f000 f83c 	bl	80002c4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800024c:	2106      	movs	r1, #6
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f838 	bl	80002c4 <lcd_write_command>
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000000 	.word	0x20000000

08000260 <lcd_clear>:
}

/**
 * Clear the screen
 */
void lcd_clear(LCD_HandleTypeDef * lcd) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000268:	2101      	movs	r1, #1
 800026a:	6878      	ldr	r0, [r7, #4]
 800026c:	f000 f82a 	bl	80002c4 <lcd_write_command>
	delay_us(maxi_delay);
 8000270:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000274:	f7ff ff7c 	bl	8000170 <delay_us>
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <lcd_define_chars>:
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
}

// load all 8 chars
void lcd_define_chars(LCD_HandleTypeDef * lcd, uint8_t bitmap[]){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
	lcd_write_command(lcd, SETCGRAM_ADDR);
 800028a:	2140      	movs	r1, #64	; 0x40
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f000 f819 	bl	80002c4 <lcd_write_command>
	for(uint8_t i=0;i<64;++i){
 8000292:	2300      	movs	r3, #0
 8000294:	73fb      	strb	r3, [r7, #15]
 8000296:	e00a      	b.n	80002ae <lcd_define_chars+0x2e>
		lcd_write_data(lcd, bitmap[i]);
 8000298:	7bfb      	ldrb	r3, [r7, #15]
 800029a:	683a      	ldr	r2, [r7, #0]
 800029c:	4413      	add	r3, r2
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	4619      	mov	r1, r3
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f000 f848 	bl	8000338 <lcd_write_data>
	for(uint8_t i=0;i<64;++i){
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	3301      	adds	r3, #1
 80002ac:	73fb      	strb	r3, [r7, #15]
 80002ae:	7bfb      	ldrb	r3, [r7, #15]
 80002b0:	2b3f      	cmp	r3, #63	; 0x3f
 80002b2:	d9f1      	bls.n	8000298 <lcd_define_chars+0x18>
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
 80002b4:	2180      	movs	r1, #128	; 0x80
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f000 f804 	bl	80002c4 <lcd_write_command>
}
 80002bc:	bf00      	nop
 80002be:	3710      	adds	r7, #16
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(LCD_HandleTypeDef * lcd, uint8_t command)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	6898      	ldr	r0, [r3, #8]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	899b      	ldrh	r3, [r3, #12]
 80002d8:	2200      	movs	r2, #0
 80002da:	4619      	mov	r1, r3
 80002dc:	f001 f83f 	bl	800135e <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	7d9b      	ldrb	r3, [r3, #22]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d118      	bne.n	800031a <lcd_write_command+0x56>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80002e8:	78fb      	ldrb	r3, [r7, #3]
 80002ea:	091b      	lsrs	r3, r3, #4
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	2204      	movs	r2, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f000 f85a 	bl	80003ac <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <lcd_write_command+0x70>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d002      	beq.n	8000306 <lcd_write_command+0x42>
 8000300:	202a      	movs	r0, #42	; 0x2a
 8000302:	f7ff ff35 	bl	8000170 <delay_us>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000306:	78fb      	ldrb	r3, [r7, #3]
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2204      	movs	r2, #4
 8000310:	4619      	mov	r1, r3
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f84a 	bl	80003ac <lcd_write>
 8000318:	e005      	b.n	8000326 <lcd_write_command+0x62>
	}
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
 800031a:	78fb      	ldrb	r3, [r7, #3]
 800031c:	2208      	movs	r2, #8
 800031e:	4619      	mov	r1, r3
 8000320:	6878      	ldr	r0, [r7, #4]
 8000322:	f000 f843 	bl	80003ac <lcd_write>
	}
	delay_us(mini_delay);
 8000326:	202a      	movs	r0, #42	; 0x2a
 8000328:	f7ff ff22 	bl	8000170 <delay_us>
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000000 	.word	0x20000000

08000338 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(LCD_HandleTypeDef * lcd, uint8_t data)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	460b      	mov	r3, r1
 8000342:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	6898      	ldr	r0, [r3, #8]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	899b      	ldrh	r3, [r3, #12]
 800034c:	2201      	movs	r2, #1
 800034e:	4619      	mov	r1, r3
 8000350:	f001 f805 	bl	800135e <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	7d9b      	ldrb	r3, [r3, #22]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d118      	bne.n	800038e <lcd_write_data+0x56>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	091b      	lsrs	r3, r3, #4
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2204      	movs	r2, #4
 8000364:	4619      	mov	r1, r3
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f000 f820 	bl	80003ac <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <lcd_write_data+0x70>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d002      	beq.n	800037a <lcd_write_data+0x42>
 8000374:	202a      	movs	r0, #42	; 0x2a
 8000376:	f7ff fefb 	bl	8000170 <delay_us>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	f003 030f 	and.w	r3, r3, #15
 8000380:	b2db      	uxtb	r3, r3
 8000382:	2204      	movs	r2, #4
 8000384:	4619      	mov	r1, r3
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f000 f810 	bl	80003ac <lcd_write>
 800038c:	e005      	b.n	800039a <lcd_write_data+0x62>
	}
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
 800038e:	78fb      	ldrb	r3, [r7, #3]
 8000390:	2208      	movs	r2, #8
 8000392:	4619      	mov	r1, r3
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f000 f809 	bl	80003ac <lcd_write>
	}
	delay_us(mini_delay);
 800039a:	202a      	movs	r0, #42	; 0x2a
 800039c:	f7ff fee8 	bl	8000170 <delay_us>
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000000 	.word	0x20000000

080003ac <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(LCD_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	460b      	mov	r3, r1
 80003b6:	70fb      	strb	r3, [r7, #3]
 80003b8:	4613      	mov	r3, r2
 80003ba:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80003bc:	2300      	movs	r3, #0
 80003be:	73fb      	strb	r3, [r7, #15]
 80003c0:	e019      	b.n	80003f6 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	7bfb      	ldrb	r3, [r7, #15]
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	4413      	add	r3, r2
 80003cc:	6818      	ldr	r0, [r3, #0]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	685a      	ldr	r2, [r3, #4]
 80003d2:	7bfb      	ldrb	r3, [r7, #15]
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	4413      	add	r3, r2
 80003d8:	8819      	ldrh	r1, [r3, #0]
 80003da:	78fa      	ldrb	r2, [r7, #3]
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
 80003de:	fa42 f303 	asr.w	r3, r2, r3
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	461a      	mov	r2, r3
 80003ec:	f000 ffb7 	bl	800135e <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	3301      	adds	r3, #1
 80003f4:	73fb      	strb	r3, [r7, #15]
 80003f6:	7bfa      	ldrb	r2, [r7, #15]
 80003f8:	78bb      	ldrb	r3, [r7, #2]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d3e1      	bcc.n	80003c2 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6918      	ldr	r0, [r3, #16]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	8a9b      	ldrh	r3, [r3, #20]
 8000406:	2201      	movs	r2, #1
 8000408:	4619      	mov	r1, r3
 800040a:	f000 ffa8 	bl	800135e <HAL_GPIO_WritePin>
	DELAY_US(1);
 800040e:	2001      	movs	r0, #1
 8000410:	f7ff feae 	bl	8000170 <delay_us>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6918      	ldr	r0, [r3, #16]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	8a9b      	ldrh	r3, [r3, #20]
 800041c:	2200      	movs	r2, #0
 800041e:	4619      	mov	r1, r3
 8000420:	f000 ff9d 	bl	800135e <HAL_GPIO_WritePin>
	DELAY_US(1);
 8000424:	2001      	movs	r0, #1
 8000426:	f7ff fea3 	bl	8000170 <delay_us>
}
 800042a:	bf00      	nop
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000434:	b5b0      	push	{r4, r5, r7, lr}
 8000436:	b0ae      	sub	sp, #184	; 0xb8
 8000438:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 fc85 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f97d 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000442:	f000 fa69 	bl	8000918 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000446:	f007 fdff 	bl	8008048 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 800044a:	f000 f9d3 	bl	80007f4 <MX_SPI1_Init>
  MX_TIM1_Init();
 800044e:	f000 fa09 	bl	8000864 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, 1);
 8000452:	2201      	movs	r2, #1
 8000454:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000458:	48ad      	ldr	r0, [pc, #692]	; (8000710 <main+0x2dc>)
 800045a:	f000 ff80 	bl	800135e <HAL_GPIO_WritePin>
  delay_init(&htim1);
 800045e:	48ad      	ldr	r0, [pc, #692]	; (8000714 <main+0x2e0>)
 8000460:	f7ff fe74 	bl	800014c <delay_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_time = HAL_GetTick();
 8000464:	f000 fcc8 	bl	8000df8 <HAL_GetTick>
 8000468:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  uint16_t data;

//  lcd_init();
//  delay_us(1000);
//  lcd_init(); // workaround for correct init // TODO clean this up!
  LCD_PortType ports[] = {	hd_4_GPIO_Port,
 800046c:	4baa      	ldr	r3, [pc, #680]	; (8000718 <main+0x2e4>)
 800046e:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  	  	  					hd_5_GPIO_Port,
							hd_6_GPIO_Port,
							hd_7_GPIO_Port};
  LCD_PinType pins[] = {	hd_4_Pin,
 8000478:	4aa8      	ldr	r2, [pc, #672]	; (800071c <main+0x2e8>)
 800047a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800047e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000482:	e883 0003 	stmia.w	r3, {r0, r1}
	  	    				hd_5_Pin,
							hd_6_Pin,
							hd_7_Pin};
  lcd = lcd_create(ports, pins,
 8000486:	4ca6      	ldr	r4, [pc, #664]	; (8000720 <main+0x2ec>)
 8000488:	4638      	mov	r0, r7
 800048a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800048e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000492:	2300      	movs	r3, #0
 8000494:	9303      	str	r3, [sp, #12]
 8000496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800049a:	9302      	str	r3, [sp, #8]
 800049c:	4ba1      	ldr	r3, [pc, #644]	; (8000724 <main+0x2f0>)
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	4b9f      	ldr	r3, [pc, #636]	; (8000724 <main+0x2f0>)
 80004a8:	f7ff fe7e 	bl	80001a8 <lcd_create>
 80004ac:	4625      	mov	r5, r4
 80004ae:	463c      	mov	r4, r7
 80004b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80004b8:	e885 0003 	stmia.w	r5, {r0, r1}
					hd_E_GPIO_Port, hd_E_Pin,
					LCD_4_BIT_MODE);

  /* load symbols */

  uint8_t symbols [] = {0x0, 0xe, 0x11, 0x15, 0x11, 0xe, 0x0, 0x0, // OFF
 80004bc:	4b9a      	ldr	r3, [pc, #616]	; (8000728 <main+0x2f4>)
 80004be:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80004c2:	461d      	mov	r5, r3
 80004c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					    0x4, 0xe, 0x1f, 0x0, 0x1f, 0xe, 0x4, 0x0,  // UP DOWN
						0x9, 0x12, 0x9, 0x12, 0x0, 0x1f, 0x1f, 0x0, // HOT
						0x12, 0x9, 0x12, 0x9, 0x0, 0x1f, 0x1f, 0x0, // HOT 2
						0x0, 0x0, 0xa, 0x1f, 0xe, 0x4, 0x0, 0x0 // heart
  };
  lcd_define_chars(&lcd, symbols);
 80004d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004dc:	4619      	mov	r1, r3
 80004de:	4890      	ldr	r0, [pc, #576]	; (8000720 <main+0x2ec>)
 80004e0:	f7ff fece 	bl	8000280 <lcd_define_chars>
//  for (int i = 0; i < sizeof(symbols); i++)
//	  lcd_send(symbols[i], DATA);
  /* end load symbols */
//  lcd_set_xy(0, 0);
//  lcd_out("Just testing");
  while (HAL_GetTick() - last_time < 1000);
 80004e4:	bf00      	nop
 80004e6:	f000 fc87 	bl	8000df8 <HAL_GetTick>
 80004ea:	4602      	mov	r2, r0
 80004ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004f6:	d3f6      	bcc.n	80004e6 <main+0xb2>

  volatile uint32_t last_ttime, ttemp, max_time = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
		max_time = ttemp;\
	} while (0);

  while (1)
  {
	  if (HAL_GetTick() - last_time > 2)
 80004fc:	f000 fc7c 	bl	8000df8 <HAL_GetTick>
 8000500:	4602      	mov	r2, r0
 8000502:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	2b02      	cmp	r3, #2
 800050a:	d901      	bls.n	8000510 <main+0xdc>
	  {
		  process_encoder();
 800050c:	f000 fa96 	bl	8000a3c <process_encoder>
	  }
	  if (HAL_GetTick() - last_time > 500)
 8000510:	f000 fc72 	bl	8000df8 <HAL_GetTick>
 8000514:	4602      	mov	r2, r0
 8000516:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000520:	d9ec      	bls.n	80004fc <main+0xc8>
	  {
		  STARTT;
 8000522:	f000 fc69 	bl	8000df8 <HAL_GetTick>
 8000526:	4603      	mov	r3, r0
 8000528:	62fb      	str	r3, [r7, #44]	; 0x2c
		  last_time = HAL_GetTick();
 800052a:	f000 fc65 	bl	8000df8 <HAL_GetTick>
 800052e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000536:	487d      	ldr	r0, [pc, #500]	; (800072c <main+0x2f8>)
 8000538:	f000 ff29 	bl	800138e <HAL_GPIO_TogglePin>
		  HAL_SPI_Receive(&hspi1, (uint8_t*)(&data), 1, 100);
 800053c:	f107 018a 	add.w	r1, r7, #138	; 0x8a
 8000540:	2364      	movs	r3, #100	; 0x64
 8000542:	2201      	movs	r2, #1
 8000544:	487a      	ldr	r0, [pc, #488]	; (8000730 <main+0x2fc>)
 8000546:	f003 f923 	bl	8003790 <HAL_SPI_Receive>

#define SIGNIFICANT 4
		  uint8_t buf[SIGNIFICANT + 3+2];
		  buf[SIGNIFICANT + 3] = '\0';
 800054a:	2300      	movs	r3, #0
 800054c:	77fb      	strb	r3, [r7, #31]
		  if (data & 0b110)
 800054e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8000552:	f003 0306 	and.w	r3, r3, #6
 8000556:	2b00      	cmp	r3, #0
 8000558:	d014      	beq.n	8000584 <main+0x150>
		  {
			  // MAX 6675 not okay (wrong ID or TH not connected
			  for (int i = 0; i < sizeof(buf); i++)
 800055a:	2300      	movs	r3, #0
 800055c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000560:	e00b      	b.n	800057a <main+0x146>
				  buf[i] = 'x';
 8000562:	f107 0218 	add.w	r2, r7, #24
 8000566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800056a:	4413      	add	r3, r2
 800056c:	2278      	movs	r2, #120	; 0x78
 800056e:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < sizeof(buf); i++)
 8000570:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000574:	3301      	adds	r3, #1
 8000576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800057a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800057e:	2b08      	cmp	r3, #8
 8000580:	d9ef      	bls.n	8000562 <main+0x12e>
 8000582:	e05e      	b.n	8000642 <main+0x20e>
		  }
		  else
		  {
			  //MAX 6675 okay, prepare data
			  data >>= 3;
 8000584:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8000588:	08db      	lsrs	r3, r3, #3
 800058a:	b29b      	uxth	r3, r3
 800058c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
			  uint32_t digit = 25*(data&0b11);
 8000590:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8000594:	f003 0203 	and.w	r2, r3, #3
 8000598:	4613      	mov	r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	009a      	lsls	r2, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			  digit += (data>>2)*1000;
 80005a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80005aa:	089b      	lsrs	r3, r3, #2
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	461a      	mov	r2, r3
 80005b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b4:	fb03 f302 	mul.w	r3, r3, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80005be:	4413      	add	r3, r2
 80005c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			  int8_t i = SIGNIFICANT + 2;
 80005c4:	2306      	movs	r3, #6
 80005c6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			  while (digit)
 80005ca:	e021      	b.n	8000610 <main+0x1dc>
			  {
				  buf[i--] = '0' + digit%10;
 80005cc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80005d0:	4b58      	ldr	r3, [pc, #352]	; (8000734 <main+0x300>)
 80005d2:	fba3 2301 	umull	r2, r3, r3, r1
 80005d6:	08da      	lsrs	r2, r3, #3
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	1aca      	subs	r2, r1, r3
 80005e2:	b2d3      	uxtb	r3, r2
 80005e4:	f997 109b 	ldrsb.w	r1, [r7, #155]	; 0x9b
 80005e8:	b2ca      	uxtb	r2, r1
 80005ea:	3a01      	subs	r2, #1
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	f887 209b 	strb.w	r2, [r7, #155]	; 0x9b
 80005f2:	3330      	adds	r3, #48	; 0x30
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80005fa:	440b      	add	r3, r1
 80005fc:	f803 2c90 	strb.w	r2, [r3, #-144]
				  digit /= 10;
 8000600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000604:	4a4b      	ldr	r2, [pc, #300]	; (8000734 <main+0x300>)
 8000606:	fba2 2303 	umull	r2, r3, r2, r3
 800060a:	08db      	lsrs	r3, r3, #3
 800060c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			  while (digit)
 8000610:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1d9      	bne.n	80005cc <main+0x198>
			  }
			  while (i > -1)
 8000618:	e00d      	b.n	8000636 <main+0x202>
			  {
				  buf[i--] = '0';
 800061a:	f997 209b 	ldrsb.w	r2, [r7, #155]	; 0x9b
 800061e:	b2d3      	uxtb	r3, r2
 8000620:	3b01      	subs	r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000628:	4613      	mov	r3, r2
 800062a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800062e:	4413      	add	r3, r2
 8000630:	2230      	movs	r2, #48	; 0x30
 8000632:	f803 2c90 	strb.w	r2, [r3, #-144]
			  while (i > -1)
 8000636:	f997 309b 	ldrsb.w	r3, [r7, #155]	; 0x9b
 800063a:	2b00      	cmp	r3, #0
 800063c:	daed      	bge.n	800061a <main+0x1e6>
			  }
			  buf[SIGNIFICANT] = '.';
 800063e:	232e      	movs	r3, #46	; 0x2e
 8000640:	773b      	strb	r3, [r7, #28]
		  }
//		  lcd_set_xy(0, 1);
//		  lcd_out((char *)buf);
//		  lcd_send((char)223, 1);
		  buf[SIGNIFICANT + 3] = '\r';
 8000642:	230d      	movs	r3, #13
 8000644:	77fb      	strb	r3, [r7, #31]
		  buf[SIGNIFICANT + 3+1] = '\n';
 8000646:	230a      	movs	r3, #10
 8000648:	f887 3020 	strb.w	r3, [r7, #32]
		  CDC_Transmit_FS(buf, sizeof(buf));
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	2109      	movs	r1, #9
 8000652:	4618      	mov	r0, r3
 8000654:	f007 fdb6 	bl	80081c4 <CDC_Transmit_FS>
		  for (int i = 0; i < sizeof(buf); i++)
 8000658:	2300      	movs	r3, #0
 800065a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800065e:	e00b      	b.n	8000678 <main+0x244>
		  {
			  buf[i] = 0;
 8000660:	f107 0218 	add.w	r2, r7, #24
 8000664:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000668:	4413      	add	r3, r2
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < sizeof(buf); i++)
 800066e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000672:	3301      	adds	r3, #1
 8000674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000678:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800067c:	2b08      	cmp	r3, #8
 800067e:	d9ef      	bls.n	8000660 <main+0x22c>
		  }

		  uint16_t temp = (encoder_value>>1)&0xff;
 8000680:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <main+0x304>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	085b      	lsrs	r3, r3, #1
 8000686:	b29b      	uxth	r3, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		  for (int i = 0; i < 5; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000694:	e024      	b.n	80006e0 <main+0x2ac>
		  {
			  buf[4-i] = temp % 10 + '0';
 8000696:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800069a:	4b26      	ldr	r3, [pc, #152]	; (8000734 <main+0x300>)
 800069c:	fba3 1302 	umull	r1, r3, r3, r2
 80006a0:	08d9      	lsrs	r1, r3, #3
 80006a2:	460b      	mov	r3, r1
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	440b      	add	r3, r1
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006b4:	f1c3 0304 	rsb	r3, r3, #4
 80006b8:	3230      	adds	r2, #48	; 0x30
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80006c0:	440b      	add	r3, r1
 80006c2:	f803 2c90 	strb.w	r2, [r3, #-144]
			  temp /= 10;
 80006c6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80006ca:	4a1a      	ldr	r2, [pc, #104]	; (8000734 <main+0x300>)
 80006cc:	fba2 2303 	umull	r2, r3, r2, r3
 80006d0:	08db      	lsrs	r3, r3, #3
 80006d2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		  for (int i = 0; i < 5; i++)
 80006d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006da:	3301      	adds	r3, #1
 80006dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80006e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	ddd6      	ble.n	8000696 <main+0x262>
		  }
		  buf[5] = (encoder_value>>1)&0xff;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <main+0x304>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	085b      	lsrs	r3, r3, #1
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	777b      	strb	r3, [r7, #29]
//		  lcd_out((char *) buf);
//		  lcd_set_xy(15, 0);
//		  lcd_send((encoder_value>>1)&0xff, DATA);
//		  lcd_set_state(LCD_ENABLE, CURSOR_ENABLE, NO_BLINK);
//		  lcd_set_xy(15, 1);
		  STOPP;
 80006f4:	f000 fb80 	bl	8000df8 <HAL_GetTick>
 80006f8:	4602      	mov	r2, r0
 80006fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	429a      	cmp	r2, r3
 8000706:	f67f aef9 	bls.w	80004fc <main+0xc8>
 800070a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_GetTick() - last_time > 2)
 800070e:	e6f5      	b.n	80004fc <main+0xc8>
 8000710:	40010800 	.word	0x40010800
 8000714:	200003dc 	.word	0x200003dc
 8000718:	080089f0 	.word	0x080089f0
 800071c:	08008a00 	.word	0x08008a00
 8000720:	200003c4 	.word	0x200003c4
 8000724:	40010c00 	.word	0x40010c00
 8000728:	08008a08 	.word	0x08008a08
 800072c:	40011000 	.word	0x40011000
 8000730:	20000424 	.word	0x20000424
 8000734:	cccccccd 	.word	0xcccccccd
 8000738:	2000019c 	.word	0x2000019c

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000746:	2228      	movs	r2, #40	; 0x28
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f008 f93c 	bl	80089c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076c:	2301      	movs	r3, #1
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077a:	2301      	movs	r3, #1
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000786:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000788:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fada 	bl	8002d4c <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800079e:	f000 f9d5 	bl	8000b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2101      	movs	r1, #1
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 fd44 	bl	800324c <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80007ca:	f000 f9bf 	bl	8000b4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007ce:	2310      	movs	r3, #16
 80007d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fe9e 	bl	800351c <HAL_RCCEx_PeriphCLKConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007e6:	f000 f9b1 	bl	8000b4c <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	; 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_SPI1_Init+0x68>)
 80007fa:	4a19      	ldr	r2, [pc, #100]	; (8000860 <MX_SPI1_Init+0x6c>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_SPI1_Init+0x68>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_SPI1_Init+0x68>)
 8000808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800080c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_SPI1_Init+0x68>)
 8000810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000814:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_SPI1_Init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_SPI1_Init+0x68>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_SPI1_Init+0x68>)
 8000824:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000828:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_SPI1_Init+0x68>)
 800082c:	2230      	movs	r2, #48	; 0x30
 800082e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_SPI1_Init+0x68>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_SPI1_Init+0x68>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_SPI1_Init+0x68>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_SPI1_Init+0x68>)
 8000844:	220a      	movs	r2, #10
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_SPI1_Init+0x68>)
 800084a:	f002 ff1d 	bl	8003688 <HAL_SPI_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000854:	f000 f97a 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000424 	.word	0x20000424
 8000860:	40013000 	.word	0x40013000

08000864 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <MX_TIM1_Init+0xa8>)
 8000882:	4a23      	ldr	r2, [pc, #140]	; (8000910 <MX_TIM1_Init+0xac>)
 8000884:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000000-1;
 8000886:	f002 fdcb 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 800088a:	4603      	mov	r3, r0
 800088c:	4a21      	ldr	r2, [pc, #132]	; (8000914 <MX_TIM1_Init+0xb0>)
 800088e:	fba2 2303 	umull	r2, r3, r2, r3
 8000892:	0c9b      	lsrs	r3, r3, #18
 8000894:	3b01      	subs	r3, #1
 8000896:	4a1d      	ldr	r2, [pc, #116]	; (800090c <MX_TIM1_Init+0xa8>)
 8000898:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_TIM1_Init+0xa8>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_TIM1_Init+0xa8>)
 80008a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_TIM1_Init+0xa8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_TIM1_Init+0xa8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_TIM1_Init+0xa8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ba:	4814      	ldr	r0, [pc, #80]	; (800090c <MX_TIM1_Init+0xa8>)
 80008bc:	f003 fb14 	bl	8003ee8 <HAL_TIM_Base_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80008c6:	f000 f941 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	4619      	mov	r1, r3
 80008d6:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_TIM1_Init+0xa8>)
 80008d8:	f003 fba0 	bl	800401c <HAL_TIM_ConfigClockSource>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80008e2:	f000 f933 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <MX_TIM1_Init+0xa8>)
 80008f4:	f003 fd4e 	bl	8004394 <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80008fe:	f000 f925 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200003dc 	.word	0x200003dc
 8000910:	40012c00 	.word	0x40012c00
 8000914:	431bde83 	.word	0x431bde83

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092c:	4b3f      	ldr	r3, [pc, #252]	; (8000a2c <MX_GPIO_Init+0x114>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a3e      	ldr	r2, [pc, #248]	; (8000a2c <MX_GPIO_Init+0x114>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <MX_GPIO_Init+0x114>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0310 	and.w	r3, r3, #16
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000944:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <MX_GPIO_Init+0x114>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a38      	ldr	r2, [pc, #224]	; (8000a2c <MX_GPIO_Init+0x114>)
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <MX_GPIO_Init+0x114>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0320 	and.w	r3, r3, #32
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b33      	ldr	r3, [pc, #204]	; (8000a2c <MX_GPIO_Init+0x114>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a32      	ldr	r2, [pc, #200]	; (8000a2c <MX_GPIO_Init+0x114>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <MX_GPIO_Init+0x114>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <MX_GPIO_Init+0x114>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a2c      	ldr	r2, [pc, #176]	; (8000a2c <MX_GPIO_Init+0x114>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <MX_GPIO_Init+0x114>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000992:	4827      	ldr	r0, [pc, #156]	; (8000a30 <MX_GPIO_Init+0x118>)
 8000994:	f000 fce3 	bl	800135e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800099e:	4825      	ldr	r0, [pc, #148]	; (8000a34 <MX_GPIO_Init+0x11c>)
 80009a0:	f000 fcdd 	bl	800135e <HAL_GPIO_WritePin>
                          |hd_4_Pin|hd_5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009aa:	4823      	ldr	r0, [pc, #140]	; (8000a38 <MX_GPIO_Init+0x120>)
 80009ac:	f000 fcd7 	bl	800135e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2302      	movs	r3, #2
 80009c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	4619      	mov	r1, r3
 80009c8:	4819      	ldr	r0, [pc, #100]	; (8000a30 <MX_GPIO_Init+0x118>)
 80009ca:	f000 fb2d 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : hd_7_Pin hd_6_Pin hd_RS_Pin hd_E_Pin
                           hd_4_Pin hd_5_Pin */
  GPIO_InitStruct.Pin = hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 80009ce:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80009d2:	613b      	str	r3, [r7, #16]
                          |hd_4_Pin|hd_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2302      	movs	r3, #2
 80009de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	4619      	mov	r1, r3
 80009e6:	4813      	ldr	r0, [pc, #76]	; (8000a34 <MX_GPIO_Init+0x11c>)
 80009e8:	f000 fb1e 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 80009ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	4619      	mov	r1, r3
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_GPIO_Init+0x120>)
 8000a06:	f000 fb0f 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : enc_s_Pin enc_a_Pin enc_b_Pin */
  GPIO_InitStruct.Pin = enc_s_Pin|enc_a_Pin|enc_b_Pin;
 8000a0a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_GPIO_Init+0x11c>)
 8000a20:	f000 fb02 	bl	8001028 <HAL_GPIO_Init>

}
 8000a24:	bf00      	nop
 8000a26:	3720      	adds	r7, #32
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40011000 	.word	0x40011000
 8000a34:	40010c00 	.word	0x40010c00
 8000a38:	40010800 	.word	0x40010800

08000a3c <process_encoder>:

/* USER CODE BEGIN 4 */
void process_encoder(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin)?0b10:0 +
 8000a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a46:	483e      	ldr	r0, [pc, #248]	; (8000b40 <process_encoder+0x104>)
 8000a48:	f000 fc72 	bl	8001330 <HAL_GPIO_ReadPin>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10b      	bne.n	8000a6a <process_encoder+0x2e>
		   HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin)?0b01:0);
 8000a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a56:	483a      	ldr	r0, [pc, #232]	; (8000b40 <process_encoder+0x104>)
 8000a58:	f000 fc6a 	bl	8001330 <HAL_GPIO_ReadPin>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	bf14      	ite	ne
 8000a62:	2301      	movne	r3, #1
 8000a64:	2300      	moveq	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	e000      	b.n	8000a6c <process_encoder+0x30>
	new = (HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin)?0b10:0 +
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000a6e:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <process_encoder+0x108>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d85d      	bhi.n	8000b32 <process_encoder+0xf6>
 8000a76:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <process_encoder+0x40>)
 8000a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7c:	08000ab3 	.word	0x08000ab3
 8000a80:	08000ad9 	.word	0x08000ad9
 8000a84:	08000a8d 	.word	0x08000a8d
 8000a88:	08000aff 	.word	0x08000aff
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d105      	bne.n	8000a9e <process_encoder+0x62>
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <process_encoder+0x10c>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <process_encoder+0x10c>)
 8000a9c:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d13f      	bne.n	8000b24 <process_encoder+0xe8>
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <process_encoder+0x10c>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <process_encoder+0x10c>)
 8000aae:	801a      	strh	r2, [r3, #0]
			break;
 8000ab0:	e038      	b.n	8000b24 <process_encoder+0xe8>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d105      	bne.n	8000ac4 <process_encoder+0x88>
 8000ab8:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <process_encoder+0x10c>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <process_encoder+0x10c>)
 8000ac2:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d12e      	bne.n	8000b28 <process_encoder+0xec>
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <process_encoder+0x10c>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <process_encoder+0x10c>)
 8000ad4:	801a      	strh	r2, [r3, #0]
			break;
 8000ad6:	e027      	b.n	8000b28 <process_encoder+0xec>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d105      	bne.n	8000aea <process_encoder+0xae>
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <process_encoder+0x10c>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <process_encoder+0x10c>)
 8000ae8:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d11d      	bne.n	8000b2c <process_encoder+0xf0>
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <process_encoder+0x10c>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <process_encoder+0x10c>)
 8000afa:	801a      	strh	r2, [r3, #0]
			break;
 8000afc:	e016      	b.n	8000b2c <process_encoder+0xf0>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d105      	bne.n	8000b10 <process_encoder+0xd4>
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <process_encoder+0x10c>)
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <process_encoder+0x10c>)
 8000b0e:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d10c      	bne.n	8000b30 <process_encoder+0xf4>
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <process_encoder+0x10c>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <process_encoder+0x10c>)
 8000b20:	801a      	strh	r2, [r3, #0]
			break;
 8000b22:	e005      	b.n	8000b30 <process_encoder+0xf4>
			break;
 8000b24:	bf00      	nop
 8000b26:	e004      	b.n	8000b32 <process_encoder+0xf6>
			break;
 8000b28:	bf00      	nop
 8000b2a:	e002      	b.n	8000b32 <process_encoder+0xf6>
			break;
 8000b2c:	bf00      	nop
 8000b2e:	e000      	b.n	8000b32 <process_encoder+0xf6>
			break;
 8000b30:	bf00      	nop
			}
		}
	old = new;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <process_encoder+0x108>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	7013      	strb	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40010c00 	.word	0x40010c00
 8000b44:	2000019e 	.word	0x2000019e
 8000b48:	2000019c 	.word	0x2000019c

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_MspInit+0x60>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_MspInit+0x60>)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000

08000bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <HAL_SPI_MspInit+0x88>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d12f      	bne.n	8000c3c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_SPI_MspInit+0x8c>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c0c:	2330      	movs	r3, #48	; 0x30
 8000c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480b      	ldr	r0, [pc, #44]	; (8000c4c <HAL_SPI_MspInit+0x90>)
 8000c20:	f000 fa02 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	4619      	mov	r1, r3
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_SPI_MspInit+0x90>)
 8000c38:	f000 f9f6 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40013000 	.word	0x40013000
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010800 	.word	0x40010800

08000c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <HAL_TIM_Base_MspInit+0x34>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d10b      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_TIM_Base_MspInit+0x38>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_TIM_Base_MspInit+0x38>)
 8000c68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c6c:	6193      	str	r3, [r2, #24]
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_TIM_Base_MspInit+0x38>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40012c00 	.word	0x40012c00
 8000c88:	40021000 	.word	0x40021000

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr

08000cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr

08000cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr

08000cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd2:	f000 f87f 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ce2:	f000 fc9e 	bl	8001622 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20001114 	.word	0x20001114

08000cf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cfe:	490d      	ldr	r1, [pc, #52]	; (8000d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d14:	4c0a      	ldr	r4, [pc, #40]	; (8000d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d22:	f7ff ffe5 	bl	8000cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d26:	f007 fe2b 	bl	8008980 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2a:	f7ff fb83 	bl	8000434 <main>
  bx lr
 8000d2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000d38:	08008ab8 	.word	0x08008ab8
  ldr r2, =_sbss
 8000d3c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000d40:	20001400 	.word	0x20001400

08000d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_2_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_Init+0x28>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_Init+0x28>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f923 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fef8 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f93b 	bl	800100e <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f903 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	2000000c 	.word	0x2000000c
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x1c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x20>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a03      	ldr	r2, [pc, #12]	; (8000df4 <HAL_IncTick+0x20>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	2000000c 	.word	0x2000000c
 8000df4:	2000047c 	.word	0x2000047c

08000df8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <HAL_GetTick+0x10>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	2000047c 	.word	0x2000047c

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4906      	ldr	r1, [pc, #24]	; (8000ea4 <__NVIC_EnableIRQ+0x34>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff90 	bl	8000ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff2d 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff42 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff90 	bl	8000efc <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5f 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff35 	bl	8000e70 <__NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffa2 	bl	8000f60 <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b08b      	sub	sp, #44	; 0x2c
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103a:	e169      	b.n	8001310 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800103c:	2201      	movs	r2, #1
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	429a      	cmp	r2, r3
 8001056:	f040 8158 	bne.w	800130a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4a9a      	ldr	r2, [pc, #616]	; (80012c8 <HAL_GPIO_Init+0x2a0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d05e      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 8001064:	4a98      	ldr	r2, [pc, #608]	; (80012c8 <HAL_GPIO_Init+0x2a0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d875      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 800106a:	4a98      	ldr	r2, [pc, #608]	; (80012cc <HAL_GPIO_Init+0x2a4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d058      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 8001070:	4a96      	ldr	r2, [pc, #600]	; (80012cc <HAL_GPIO_Init+0x2a4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d86f      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 8001076:	4a96      	ldr	r2, [pc, #600]	; (80012d0 <HAL_GPIO_Init+0x2a8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d052      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 800107c:	4a94      	ldr	r2, [pc, #592]	; (80012d0 <HAL_GPIO_Init+0x2a8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d869      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 8001082:	4a94      	ldr	r2, [pc, #592]	; (80012d4 <HAL_GPIO_Init+0x2ac>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d04c      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 8001088:	4a92      	ldr	r2, [pc, #584]	; (80012d4 <HAL_GPIO_Init+0x2ac>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d863      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 800108e:	4a92      	ldr	r2, [pc, #584]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d046      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 8001094:	4a90      	ldr	r2, [pc, #576]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d85d      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 800109a:	2b12      	cmp	r3, #18
 800109c:	d82a      	bhi.n	80010f4 <HAL_GPIO_Init+0xcc>
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d859      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 80010a2:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <HAL_GPIO_Init+0x80>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	08001123 	.word	0x08001123
 80010ac:	080010fd 	.word	0x080010fd
 80010b0:	0800110f 	.word	0x0800110f
 80010b4:	08001151 	.word	0x08001151
 80010b8:	08001157 	.word	0x08001157
 80010bc:	08001157 	.word	0x08001157
 80010c0:	08001157 	.word	0x08001157
 80010c4:	08001157 	.word	0x08001157
 80010c8:	08001157 	.word	0x08001157
 80010cc:	08001157 	.word	0x08001157
 80010d0:	08001157 	.word	0x08001157
 80010d4:	08001157 	.word	0x08001157
 80010d8:	08001157 	.word	0x08001157
 80010dc:	08001157 	.word	0x08001157
 80010e0:	08001157 	.word	0x08001157
 80010e4:	08001157 	.word	0x08001157
 80010e8:	08001157 	.word	0x08001157
 80010ec:	08001105 	.word	0x08001105
 80010f0:	08001119 	.word	0x08001119
 80010f4:	4a79      	ldr	r2, [pc, #484]	; (80012dc <HAL_GPIO_Init+0x2b4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010fa:	e02c      	b.n	8001156 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	623b      	str	r3, [r7, #32]
          break;
 8001102:	e029      	b.n	8001158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	3304      	adds	r3, #4
 800110a:	623b      	str	r3, [r7, #32]
          break;
 800110c:	e024      	b.n	8001158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	3308      	adds	r3, #8
 8001114:	623b      	str	r3, [r7, #32]
          break;
 8001116:	e01f      	b.n	8001158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	330c      	adds	r3, #12
 800111e:	623b      	str	r3, [r7, #32]
          break;
 8001120:	e01a      	b.n	8001158 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800112a:	2304      	movs	r3, #4
 800112c:	623b      	str	r3, [r7, #32]
          break;
 800112e:	e013      	b.n	8001158 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d105      	bne.n	8001144 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001138:	2308      	movs	r3, #8
 800113a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	611a      	str	r2, [r3, #16]
          break;
 8001142:	e009      	b.n	8001158 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001144:	2308      	movs	r3, #8
 8001146:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	615a      	str	r2, [r3, #20]
          break;
 800114e:	e003      	b.n	8001158 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
          break;
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x130>
          break;
 8001156:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	2bff      	cmp	r3, #255	; 0xff
 800115c:	d801      	bhi.n	8001162 <HAL_GPIO_Init+0x13a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	e001      	b.n	8001166 <HAL_GPIO_Init+0x13e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3304      	adds	r3, #4
 8001166:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2bff      	cmp	r3, #255	; 0xff
 800116c:	d802      	bhi.n	8001174 <HAL_GPIO_Init+0x14c>
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x152>
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	3b08      	subs	r3, #8
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	210f      	movs	r1, #15
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	401a      	ands	r2, r3
 800118c:	6a39      	ldr	r1, [r7, #32]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	431a      	orrs	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80b1 	beq.w	800130a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011a8:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <HAL_GPIO_Init+0x2b8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a4c      	ldr	r2, [pc, #304]	; (80012e0 <HAL_GPIO_Init+0x2b8>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b4a      	ldr	r3, [pc, #296]	; (80012e0 <HAL_GPIO_Init+0x2b8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011c0:	4a48      	ldr	r2, [pc, #288]	; (80012e4 <HAL_GPIO_Init+0x2bc>)
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a40      	ldr	r2, [pc, #256]	; (80012e8 <HAL_GPIO_Init+0x2c0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d013      	beq.n	8001214 <HAL_GPIO_Init+0x1ec>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a3f      	ldr	r2, [pc, #252]	; (80012ec <HAL_GPIO_Init+0x2c4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d00d      	beq.n	8001210 <HAL_GPIO_Init+0x1e8>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a3e      	ldr	r2, [pc, #248]	; (80012f0 <HAL_GPIO_Init+0x2c8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d007      	beq.n	800120c <HAL_GPIO_Init+0x1e4>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <HAL_GPIO_Init+0x2cc>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d101      	bne.n	8001208 <HAL_GPIO_Init+0x1e0>
 8001204:	2303      	movs	r3, #3
 8001206:	e006      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 8001208:	2304      	movs	r3, #4
 800120a:	e004      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 800120c:	2302      	movs	r3, #2
 800120e:	e002      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 8001214:	2300      	movs	r3, #0
 8001216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001218:	f002 0203 	and.w	r2, r2, #3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4093      	lsls	r3, r2
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001226:	492f      	ldr	r1, [pc, #188]	; (80012e4 <HAL_GPIO_Init+0x2bc>)
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001240:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	492c      	ldr	r1, [pc, #176]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	43db      	mvns	r3, r3
 8001256:	4928      	ldr	r1, [pc, #160]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001258:	4013      	ands	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	4922      	ldr	r1, [pc, #136]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	43db      	mvns	r3, r3
 800127e:	491e      	ldr	r1, [pc, #120]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001280:	4013      	ands	r3, r2
 8001282:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	4918      	ldr	r1, [pc, #96]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	608b      	str	r3, [r1, #8]
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4914      	ldr	r1, [pc, #80]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d021      	beq.n	80012fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	490e      	ldr	r1, [pc, #56]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	60cb      	str	r3, [r1, #12]
 80012c4:	e021      	b.n	800130a <HAL_GPIO_Init+0x2e2>
 80012c6:	bf00      	nop
 80012c8:	10320000 	.word	0x10320000
 80012cc:	10310000 	.word	0x10310000
 80012d0:	10220000 	.word	0x10220000
 80012d4:	10210000 	.word	0x10210000
 80012d8:	10120000 	.word	0x10120000
 80012dc:	10110000 	.word	0x10110000
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000
 80012e8:	40010800 	.word	0x40010800
 80012ec:	40010c00 	.word	0x40010c00
 80012f0:	40011000 	.word	0x40011000
 80012f4:	40011400 	.word	0x40011400
 80012f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_GPIO_Init+0x304>)
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	43db      	mvns	r3, r3
 8001304:	4909      	ldr	r1, [pc, #36]	; (800132c <HAL_GPIO_Init+0x304>)
 8001306:	4013      	ands	r3, r2
 8001308:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	3301      	adds	r3, #1
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	fa22 f303 	lsr.w	r3, r2, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	f47f ae8e 	bne.w	800103c <HAL_GPIO_Init+0x14>
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	372c      	adds	r7, #44	; 0x2c
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	40010400 	.word	0x40010400

08001330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	4013      	ands	r3, r2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001348:	2301      	movs	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e001      	b.n	8001352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	807b      	strh	r3, [r7, #2]
 800136a:	4613      	mov	r3, r2
 800136c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800136e:	787b      	ldrb	r3, [r7, #1]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001374:	887a      	ldrh	r2, [r7, #2]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800137a:	e003      	b.n	8001384 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800137c:	887b      	ldrh	r3, [r7, #2]
 800137e:	041a      	lsls	r2, r3, #16
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	611a      	str	r2, [r3, #16]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	460b      	mov	r3, r1
 8001398:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013a0:	887a      	ldrh	r2, [r7, #2]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4013      	ands	r3, r2
 80013a6:	041a      	lsls	r2, r3, #16
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	400b      	ands	r3, r1
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	611a      	str	r2, [r3, #16]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	b08b      	sub	sp, #44	; 0x2c
 80013c4:	af06      	add	r7, sp, #24
 80013c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0fd      	b.n	80015ce <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d106      	bne.n	80013ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f007 f820 	bl	800842c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2203      	movs	r2, #3
 80013f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 f84f 	bl	800449c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	687e      	ldr	r6, [r7, #4]
 8001406:	466d      	mov	r5, sp
 8001408:	f106 0410 	add.w	r4, r6, #16
 800140c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	602b      	str	r3, [r5, #0]
 8001414:	1d33      	adds	r3, r6, #4
 8001416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f003 f819 	bl	8004450 <USB_CoreInit>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2202      	movs	r2, #2
 8001428:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0ce      	b.n	80015ce <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f003 f84a 	bl	80044d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e04c      	b.n	80014dc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	3301      	adds	r3, #1
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	440b      	add	r3, r1
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	b298      	uxth	r0, r3
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	440b      	add	r3, r1
 800147e:	3336      	adds	r3, #54	; 0x36
 8001480:	4602      	mov	r2, r0
 8001482:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	3303      	adds	r3, #3
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	3338      	adds	r3, #56	; 0x38
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	333c      	adds	r3, #60	; 0x3c
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	3340      	adds	r3, #64	; 0x40
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	3301      	adds	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d3ad      	bcc.n	8001442 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e044      	b.n	8001576 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	440b      	add	r3, r1
 80014fa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	440b      	add	r3, r1
 8001510:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	440b      	add	r3, r1
 800153c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	440b      	add	r3, r1
 8001552:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	440b      	add	r3, r1
 8001568:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	3301      	adds	r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	d3b5      	bcc.n	80014ec <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	687e      	ldr	r6, [r7, #4]
 8001588:	466d      	mov	r5, sp
 800158a:	f106 0410 	add.w	r4, r6, #16
 800158e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	602b      	str	r3, [r5, #0]
 8001596:	1d33      	adds	r3, r6, #4
 8001598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800159a:	6838      	ldr	r0, [r7, #0]
 800159c:	f002 ffa4 	bl	80044e8 <USB_DevInit>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2202      	movs	r2, #2
 80015aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00d      	b.n	80015ce <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f005 f915 	bl	80067f6 <USB_DevDisconnect>

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_PCD_Start+0x16>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e016      	b.n	800161a <HAL_PCD_Start+0x44>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 ff39 	bl	8004470 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80015fe:	2101      	movs	r1, #1
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f007 f986 	bl	8008912 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f005 f8e9 	bl	80067e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b088      	sub	sp, #32
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f005 f8eb 	bl	800680a <USB_ReadInterrupts>
 8001634:	4603      	mov	r3, r0
 8001636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800163a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800163e:	d102      	bne.n	8001646 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fb61 	bl	8001d08 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f005 f8dd 	bl	800680a <USB_ReadInterrupts>
 8001650:	4603      	mov	r3, r0
 8001652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165a:	d112      	bne.n	8001682 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001664:	b29a      	uxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800166e:	b292      	uxth	r2, r2
 8001670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f006 ff54 	bl	8008522 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800167a:	2100      	movs	r1, #0
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f925 	bl	80018cc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f005 f8bf 	bl	800680a <USB_ReadInterrupts>
 800168c:	4603      	mov	r3, r0
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001696:	d10b      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016aa:	b292      	uxth	r2, r2
 80016ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 f8a8 	bl	800680a <USB_ReadInterrupts>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016c4:	d10b      	bne.n	80016de <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 f891 	bl	800680a <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f2:	d126      	bne.n	8001742 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0204 	bic.w	r2, r2, #4
 8001706:	b292      	uxth	r2, r2
 8001708:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001714:	b29a      	uxth	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0208 	bic.w	r2, r2, #8
 800171e:	b292      	uxth	r2, r2
 8001720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f006 ff35 	bl	8008594 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001732:	b29a      	uxth	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800173c:	b292      	uxth	r2, r2
 800173e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f005 f85f 	bl	800680a <USB_ReadInterrupts>
 800174c:	4603      	mov	r3, r0
 800174e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001756:	f040 8084 	bne.w	8001862 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800175a:	2300      	movs	r3, #0
 800175c:	77fb      	strb	r3, [r7, #31]
 800175e:	e011      	b.n	8001784 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	441a      	add	r2, r3
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	8812      	ldrh	r2, [r2, #0]
 8001770:	b292      	uxth	r2, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	f107 0120 	add.w	r1, r7, #32
 8001778:	440b      	add	r3, r1
 800177a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800177e:	7ffb      	ldrb	r3, [r7, #31]
 8001780:	3301      	adds	r3, #1
 8001782:	77fb      	strb	r3, [r7, #31]
 8001784:	7ffb      	ldrb	r3, [r7, #31]
 8001786:	2b07      	cmp	r3, #7
 8001788:	d9ea      	bls.n	8001760 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001792:	b29a      	uxth	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0201 	orr.w	r2, r2, #1
 800179c:	b292      	uxth	r2, r2
 800179e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0201 	bic.w	r2, r2, #1
 80017b4:	b292      	uxth	r2, r2
 80017b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80017ba:	bf00      	nop
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f6      	beq.n	80017bc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e0:	b292      	uxth	r2, r2
 80017e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	77fb      	strb	r3, [r7, #31]
 80017ea:	e010      	b.n	800180e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80017ec:	7ffb      	ldrb	r3, [r7, #31]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	4611      	mov	r1, r2
 80017f4:	7ffa      	ldrb	r2, [r7, #31]
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	440a      	add	r2, r1
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	f107 0120 	add.w	r1, r7, #32
 8001800:	440b      	add	r3, r1
 8001802:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001806:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001808:	7ffb      	ldrb	r3, [r7, #31]
 800180a:	3301      	adds	r3, #1
 800180c:	77fb      	strb	r3, [r7, #31]
 800180e:	7ffb      	ldrb	r3, [r7, #31]
 8001810:	2b07      	cmp	r3, #7
 8001812:	d9eb      	bls.n	80017ec <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800181c:	b29a      	uxth	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0208 	orr.w	r2, r2, #8
 8001826:	b292      	uxth	r2, r2
 8001828:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800183e:	b292      	uxth	r2, r2
 8001840:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800184c:	b29a      	uxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0204 	orr.w	r2, r2, #4
 8001856:	b292      	uxth	r2, r2
 8001858:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f006 fe7f 	bl	8008560 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f004 ffcf 	bl	800680a <USB_ReadInterrupts>
 800186c:	4603      	mov	r3, r0
 800186e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001876:	d10e      	bne.n	8001896 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001880:	b29a      	uxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800188a:	b292      	uxth	r2, r2
 800188c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f006 fe38 	bl	8008506 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f004 ffb5 	bl	800680a <USB_ReadInterrupts>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018aa:	d10b      	bne.n	80018c4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018be:	b292      	uxth	r2, r2
 80018c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80018c4:	bf00      	nop
 80018c6:	3720      	adds	r7, #32
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_PCD_SetAddress+0x1a>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e013      	b.n	800190e <HAL_PCD_SetAddress+0x42>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f004 ff5c 	bl	80067bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	4608      	mov	r0, r1
 8001920:	4611      	mov	r1, r2
 8001922:	461a      	mov	r2, r3
 8001924:	4603      	mov	r3, r0
 8001926:	70fb      	strb	r3, [r7, #3]
 8001928:	460b      	mov	r3, r1
 800192a:	803b      	strh	r3, [r7, #0]
 800192c:	4613      	mov	r3, r2
 800192e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001938:	2b00      	cmp	r3, #0
 800193a:	da0e      	bge.n	800195a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	705a      	strb	r2, [r3, #1]
 8001958:	e00e      	b.n	8001978 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	f003 0207 	and.w	r2, r3, #7
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	b2da      	uxtb	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001984:	883a      	ldrh	r2, [r7, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	78ba      	ldrb	r2, [r7, #2]
 800198e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	785b      	ldrb	r3, [r3, #1]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b29a      	uxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d102      	bne.n	80019ae <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_PCD_EP_Open+0xa6>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e00e      	b.n	80019da <HAL_PCD_EP_Open+0xc4>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 fdac 	bl	8004528 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80019d8:	7afb      	ldrb	r3, [r7, #11]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da0e      	bge.n	8001a14 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	705a      	strb	r2, [r3, #1]
 8001a12:	e00e      	b.n	8001a32 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	f003 0207 	and.w	r2, r3, #7
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_PCD_EP_Close+0x6a>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e00e      	b.n	8001a6a <HAL_PCD_EP_Close+0x88>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68f9      	ldr	r1, [r7, #12]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 f8ce 	bl	8004bfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a82:	7afb      	ldrb	r3, [r7, #11]
 8001a84:	f003 0207 	and.w	r2, r3, #7
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d106      	bne.n	8001ad6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6979      	ldr	r1, [r7, #20]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fa80 	bl	8004fd4 <USB_EPStartXfer>
 8001ad4:	e005      	b.n	8001ae2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6979      	ldr	r1, [r7, #20]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 fa79 	bl	8004fd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	f003 0207 	and.w	r2, r3, #7
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	460b      	mov	r3, r1
 8001b28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2201      	movs	r2, #1
 8001b64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b66:	7afb      	ldrb	r3, [r7, #11]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b72:	7afb      	ldrb	r3, [r7, #11]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d106      	bne.n	8001b8a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6979      	ldr	r1, [r7, #20]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fa26 	bl	8004fd4 <USB_EPStartXfer>
 8001b88:	e005      	b.n	8001b96 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6979      	ldr	r1, [r7, #20]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 fa1f 	bl	8004fd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	f003 0207 	and.w	r2, r3, #7
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d901      	bls.n	8001bbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e04c      	b.n	8001c58 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da0e      	bge.n	8001be4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	705a      	strb	r2, [r3, #1]
 8001be2:	e00c      	b.n	8001bfe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_PCD_EP_SetStall+0x7e>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e01c      	b.n	8001c58 <HAL_PCD_EP_SetStall+0xb8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68f9      	ldr	r1, [r7, #12]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f004 fcc8 	bl	80065c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d108      	bne.n	8001c4e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001c46:	4619      	mov	r1, r3
 8001c48:	4610      	mov	r0, r2
 8001c4a:	f004 fded 	bl	8006828 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f003 020f 	and.w	r2, r3, #15
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d901      	bls.n	8001c7e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e040      	b.n	8001d00 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	da0e      	bge.n	8001ca4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	705a      	strb	r2, [r3, #1]
 8001ca2:	e00e      	b.n	8001cc2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	f003 0207 	and.w	r2, r3, #7
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_PCD_EP_ClrStall+0x82>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e00e      	b.n	8001d00 <HAL_PCD_EP_ClrStall+0xa0>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68f9      	ldr	r1, [r7, #12]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f004 fcb6 	bl	8006662 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08e      	sub	sp, #56	; 0x38
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d10:	e2ec      	b.n	80022ec <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d1a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001d28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f040 8161 	bne.w	8001ff4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d152      	bne.n	8001de2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d4c:	81fb      	strh	r3, [r7, #14]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	89fb      	ldrh	r3, [r7, #14]
 8001d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3328      	adds	r3, #40	; 0x28
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	441a      	add	r2, r3
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001da0:	2100      	movs	r1, #0
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f006 fb95 	bl	80084d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 829b 	beq.w	80022ec <PCD_EP_ISR_Handler+0x5e4>
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 8296 	bne.w	80022ec <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	b292      	uxth	r2, r2
 8001dd4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001de0:	e284      	b.n	80022ec <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001df2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d034      	beq.n	8001e66 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3306      	adds	r3, #6
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	f004 fd44 	bl	80068c8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	823b      	strh	r3, [r7, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	8a3a      	ldrh	r2, [r7, #16]
 8001e56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e5a:	b292      	uxth	r2, r2
 8001e5c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f006 fb0a 	bl	8008478 <HAL_PCD_SetupStageCallback>
 8001e64:	e242      	b.n	80022ec <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e66:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f280 823e 	bge.w	80022ec <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	83bb      	strh	r3, [r7, #28]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	8bba      	ldrh	r2, [r7, #28]
 8001e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3306      	adds	r3, #6
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d019      	beq.n	8001ef6 <PCD_EP_ISR_Handler+0x1ee>
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d015      	beq.n	8001ef6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	6959      	ldr	r1, [r3, #20]
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	f004 fcf4 	bl	80068c8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	441a      	add	r2, r3
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f006 fad3 	bl	800849c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 81f2 	bne.w	80022ec <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d112      	bne.n	8001f56 <PCD_EP_ISR_Handler+0x24e>
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	801a      	strh	r2, [r3, #0]
 8001f54:	e02f      	b.n	8001fb6 <PCD_EP_ISR_Handler+0x2ae>
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8001f5c:	d813      	bhi.n	8001f86 <PCD_EP_ISR_Handler+0x27e>
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <PCD_EP_ISR_Handler+0x270>
 8001f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f74:	3301      	adds	r3, #1
 8001f76:	633b      	str	r3, [r7, #48]	; 0x30
 8001f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	801a      	strh	r2, [r3, #0]
 8001f84:	e017      	b.n	8001fb6 <PCD_EP_ISR_Handler+0x2ae>
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d102      	bne.n	8001fa0 <PCD_EP_ISR_Handler+0x298>
 8001f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8001fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	029b      	lsls	r3, r3, #10
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc6:	827b      	strh	r3, [r7, #18]
 8001fc8:	8a7b      	ldrh	r3, [r7, #18]
 8001fca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001fce:	827b      	strh	r3, [r7, #18]
 8001fd0:	8a7b      	ldrh	r3, [r7, #18]
 8001fd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fd6:	827b      	strh	r3, [r7, #18]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	8a7b      	ldrh	r3, [r7, #18]
 8001fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	8013      	strh	r3, [r2, #0]
 8001ff2:	e17b      	b.n	80022ec <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002006:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800200a:	2b00      	cmp	r3, #0
 800200c:	f280 80ea 	bge.w	80021e4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	b29a      	uxth	r2, r3
 8002022:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002026:	4013      	ands	r3, r2
 8002028:	853b      	strh	r3, [r7, #40]	; 0x28
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800203a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800203e:	b292      	uxth	r2, r2
 8002040:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002042:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	7b1b      	ldrb	r3, [r3, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d122      	bne.n	80020a6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002068:	b29b      	uxth	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	3306      	adds	r3, #6
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	4413      	add	r3, r2
 800207e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002088:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800208a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8087 	beq.w	80021a0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	6959      	ldr	r1, [r3, #20]
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	88da      	ldrh	r2, [r3, #6]
 800209e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020a0:	f004 fc12 	bl	80068c8 <USB_ReadPMA>
 80020a4:	e07c      	b.n	80021a0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	78db      	ldrb	r3, [r3, #3]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d108      	bne.n	80020c0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80020ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020b0:	461a      	mov	r2, r3
 80020b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f927 	bl	8002308 <HAL_PCD_EP_DB_Receive>
 80020ba:	4603      	mov	r3, r0
 80020bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80020be:	e06f      	b.n	80021a0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020da:	847b      	strh	r3, [r7, #34]	; 0x22
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	441a      	add	r2, r3
 80020ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d021      	beq.n	800215e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	3302      	adds	r3, #2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	4413      	add	r3, r2
 8002138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002142:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002144:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002146:	2b00      	cmp	r3, #0
 8002148:	d02a      	beq.n	80021a0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	6959      	ldr	r1, [r3, #20]
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	891a      	ldrh	r2, [r3, #8]
 8002156:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002158:	f004 fbb6 	bl	80068c8 <USB_ReadPMA>
 800215c:	e020      	b.n	80021a0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002166:	b29b      	uxth	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	3306      	adds	r3, #6
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002186:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002188:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	6959      	ldr	r1, [r3, #20]
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	895a      	ldrh	r2, [r3, #10]
 800219a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800219c:	f004 fb94 	bl	80068c8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021a6:	441a      	add	r2, r3
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021b2:	441a      	add	r2, r3
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <PCD_EP_ISR_Handler+0x4c2>
 80021c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d206      	bcs.n	80021d8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	4619      	mov	r1, r3
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f006 f963 	bl	800849c <HAL_PCD_DataOutStageCallback>
 80021d6:	e005      	b.n	80021e4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 fef8 	bl	8004fd4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d07e      	beq.n	80022ec <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80021ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221c:	843b      	strh	r3, [r7, #32]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	441a      	add	r2, r3
 800222c:	8c3b      	ldrh	r3, [r7, #32]
 800222e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002236:	b29b      	uxth	r3, r3
 8002238:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	78db      	ldrb	r3, [r3, #3]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d00c      	beq.n	800225c <PCD_EP_ISR_Handler+0x554>
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	78db      	ldrb	r3, [r3, #3]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800224e:	2b02      	cmp	r3, #2
 8002250:	d146      	bne.n	80022e0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002252:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d141      	bne.n	80022e0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002264:	b29b      	uxth	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	3302      	adds	r3, #2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002284:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	8bfb      	ldrh	r3, [r7, #30]
 800228c:	429a      	cmp	r2, r3
 800228e:	d906      	bls.n	800229e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	8bfb      	ldrh	r3, [r7, #30]
 8002296:	1ad2      	subs	r2, r2, r3
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	619a      	str	r2, [r3, #24]
 800229c:	e002      	b.n	80022a4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d106      	bne.n	80022ba <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f006 f90d 	bl	80084d2 <HAL_PCD_DataInStageCallback>
 80022b8:	e018      	b.n	80022ec <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	8bfb      	ldrh	r3, [r7, #30]
 80022c0:	441a      	add	r2, r3
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	8bfb      	ldrh	r3, [r7, #30]
 80022cc:	441a      	add	r2, r3
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d8:	4618      	mov	r0, r3
 80022da:	f002 fe7b 	bl	8004fd4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80022de:	e005      	b.n	80022ec <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80022e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022e2:	461a      	mov	r2, r3
 80022e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f91b 	bl	8002522 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f6ff ad0a 	blt.w	8001d12 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3738      	adds	r7, #56	; 0x38
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	4613      	mov	r3, r2
 8002314:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d07e      	beq.n	800241e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002328:	b29b      	uxth	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4413      	add	r3, r2
 8002334:	3302      	adds	r3, #2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002348:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	8b7b      	ldrh	r3, [r7, #26]
 8002350:	429a      	cmp	r2, r3
 8002352:	d306      	bcc.n	8002362 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	8b7b      	ldrh	r3, [r7, #26]
 800235a:	1ad2      	subs	r2, r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	619a      	str	r2, [r3, #24]
 8002360:	e002      	b.n	8002368 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d123      	bne.n	80023b8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238a:	833b      	strh	r3, [r7, #24]
 800238c:	8b3b      	ldrh	r3, [r7, #24]
 800238e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002392:	833b      	strh	r3, [r7, #24]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	441a      	add	r2, r3
 80023a2:	8b3b      	ldrh	r3, [r7, #24]
 80023a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d01f      	beq.n	8002402 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023dc:	82fb      	strh	r3, [r7, #22]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	441a      	add	r2, r3
 80023ec:	8afb      	ldrh	r3, [r7, #22]
 80023ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023fe:	b29b      	uxth	r3, r3
 8002400:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002402:	8b7b      	ldrh	r3, [r7, #26]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 8087 	beq.w	8002518 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	6959      	ldr	r1, [r3, #20]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	891a      	ldrh	r2, [r3, #8]
 8002416:	8b7b      	ldrh	r3, [r7, #26]
 8002418:	f004 fa56 	bl	80068c8 <USB_ReadPMA>
 800241c:	e07c      	b.n	8002518 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002426:	b29b      	uxth	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	3306      	adds	r3, #6
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002446:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	699a      	ldr	r2, [r3, #24]
 800244c:	8b7b      	ldrh	r3, [r7, #26]
 800244e:	429a      	cmp	r2, r3
 8002450:	d306      	bcc.n	8002460 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	8b7b      	ldrh	r3, [r7, #26]
 8002458:	1ad2      	subs	r2, r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	619a      	str	r2, [r3, #24]
 800245e:	e002      	b.n	8002466 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d123      	bne.n	80024b6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002488:	83fb      	strh	r3, [r7, #30]
 800248a:	8bfb      	ldrh	r3, [r7, #30]
 800248c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002490:	83fb      	strh	r3, [r7, #30]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	441a      	add	r2, r3
 80024a0:	8bfb      	ldrh	r3, [r7, #30]
 80024a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d11f      	bne.n	8002500 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024da:	83bb      	strh	r3, [r7, #28]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	441a      	add	r2, r3
 80024ea:	8bbb      	ldrh	r3, [r7, #28]
 80024ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002500:	8b7b      	ldrh	r3, [r7, #26]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	6959      	ldr	r1, [r3, #20]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	895a      	ldrh	r2, [r3, #10]
 8002512:	8b7b      	ldrh	r3, [r7, #26]
 8002514:	f004 f9d8 	bl	80068c8 <USB_ReadPMA>
    }
  }

  return count;
 8002518:	8b7b      	ldrh	r3, [r7, #26]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b0a2      	sub	sp, #136	; 0x88
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	4613      	mov	r3, r2
 800252e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 81c7 	beq.w	80028ca <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	3302      	adds	r3, #2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002564:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002570:	429a      	cmp	r2, r3
 8002572:	d907      	bls.n	8002584 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800257c:	1ad2      	subs	r2, r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	619a      	str	r2, [r3, #24]
 8002582:	e002      	b.n	800258a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 80b9 	bne.w	8002706 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d126      	bne.n	80025ea <HAL_PCD_EP_DB_Transmit+0xc8>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	4413      	add	r3, r2
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	011a      	lsls	r2, r3, #4
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	4413      	add	r3, r2
 80025be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	801a      	strh	r2, [r3, #0]
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	e01a      	b.n	8002620 <HAL_PCD_EP_DB_Transmit+0xfe>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d116      	bne.n	8002620 <HAL_PCD_EP_DB_Transmit+0xfe>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	633b      	str	r3, [r7, #48]	; 0x30
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002600:	b29b      	uxth	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	4413      	add	r3, r2
 8002608:	633b      	str	r3, [r7, #48]	; 0x30
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	011a      	lsls	r2, r3, #4
 8002610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002612:	4413      	add	r3, r2
 8002614:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	2200      	movs	r2, #0
 800261e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	623b      	str	r3, [r7, #32]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d126      	bne.n	800267c <HAL_PCD_EP_DB_Transmit+0x15a>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800263c:	b29b      	uxth	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4413      	add	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	011a      	lsls	r2, r3, #4
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	4413      	add	r3, r2
 8002650:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002660:	b29a      	uxth	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	801a      	strh	r2, [r3, #0]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002674:	b29a      	uxth	r2, r3
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	801a      	strh	r2, [r3, #0]
 800267a:	e017      	b.n	80026ac <HAL_PCD_EP_DB_Transmit+0x18a>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	785b      	ldrb	r3, [r3, #1]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d113      	bne.n	80026ac <HAL_PCD_EP_DB_Transmit+0x18a>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800268c:	b29b      	uxth	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	4413      	add	r3, r2
 8002694:	623b      	str	r3, [r7, #32]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	011a      	lsls	r2, r3, #4
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	4413      	add	r3, r2
 80026a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	2200      	movs	r2, #0
 80026aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f005 ff0d 	bl	80084d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 82d4 	beq.w	8002c6c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026de:	827b      	strh	r3, [r7, #18]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	441a      	add	r2, r3
 80026ee:	8a7b      	ldrh	r3, [r7, #18]
 80026f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002700:	b29b      	uxth	r3, r3
 8002702:	8013      	strh	r3, [r2, #0]
 8002704:	e2b2      	b.n	8002c6c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d021      	beq.n	8002754 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	441a      	add	r2, r3
 800273c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800274c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002750:	b29b      	uxth	r3, r3
 8002752:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800275a:	2b01      	cmp	r3, #1
 800275c:	f040 8286 	bne.w	8002c6c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002768:	441a      	add	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002776:	441a      	add	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d309      	bcc.n	800279c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6a1a      	ldr	r2, [r3, #32]
 8002792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002794:	1ad2      	subs	r2, r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	621a      	str	r2, [r3, #32]
 800279a:	e015      	b.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80027a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027b2:	e009      	b.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2200      	movs	r2, #0
 80027c6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d155      	bne.n	800287c <HAL_PCD_EP_DB_Transmit+0x35a>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027de:	b29b      	uxth	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	4413      	add	r3, r2
 80027e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	011a      	lsls	r2, r3, #4
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	4413      	add	r3, r2
 80027f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027f6:	637b      	str	r3, [r7, #52]	; 0x34
 80027f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d112      	bne.n	8002824 <HAL_PCD_EP_DB_Transmit+0x302>
 80027fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002808:	b29a      	uxth	r2, r3
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280c:	801a      	strh	r2, [r3, #0]
 800280e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800281c:	b29a      	uxth	r2, r3
 800281e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002820:	801a      	strh	r2, [r3, #0]
 8002822:	e047      	b.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x392>
 8002824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002826:	2b3e      	cmp	r3, #62	; 0x3e
 8002828:	d811      	bhi.n	800284e <HAL_PCD_EP_DB_Transmit+0x32c>
 800282a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_PCD_EP_DB_Transmit+0x31e>
 800283a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283c:	3301      	adds	r3, #1
 800283e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002842:	b29b      	uxth	r3, r3
 8002844:	029b      	lsls	r3, r3, #10
 8002846:	b29a      	uxth	r2, r3
 8002848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284a:	801a      	strh	r2, [r3, #0]
 800284c:	e032      	b.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x392>
 800284e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	64bb      	str	r3, [r7, #72]	; 0x48
 8002854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <HAL_PCD_EP_DB_Transmit+0x342>
 800285e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002860:	3b01      	subs	r3, #1
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48
 8002864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002866:	b29b      	uxth	r3, r3
 8002868:	029b      	lsls	r3, r3, #10
 800286a:	b29b      	uxth	r3, r3
 800286c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002874:	b29a      	uxth	r2, r3
 8002876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	e01b      	b.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x392>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d117      	bne.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x392>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	643b      	str	r3, [r7, #64]	; 0x40
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002892:	b29b      	uxth	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002898:	4413      	add	r3, r2
 800289a:	643b      	str	r3, [r7, #64]	; 0x40
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	011a      	lsls	r2, r3, #4
 80028a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a4:	4413      	add	r3, r2
 80028a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	6959      	ldr	r1, [r3, #20]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	891a      	ldrh	r2, [r3, #8]
 80028c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f003 ffbb 	bl	800683e <USB_WritePMA>
 80028c8:	e1d0      	b.n	8002c6c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	3306      	adds	r3, #6
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028fe:	429a      	cmp	r2, r3
 8002900:	d307      	bcc.n	8002912 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800290a:	1ad2      	subs	r2, r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	619a      	str	r2, [r3, #24]
 8002910:	e002      	b.n	8002918 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	f040 80c4 	bne.w	8002aaa <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d126      	bne.n	8002978 <HAL_PCD_EP_DB_Transmit+0x456>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002938:	b29b      	uxth	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293e:	4413      	add	r3, r2
 8002940:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	011a      	lsls	r2, r3, #4
 8002948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294a:	4413      	add	r3, r2
 800294c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002950:	66bb      	str	r3, [r7, #104]	; 0x68
 8002952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800295c:	b29a      	uxth	r2, r3
 800295e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002960:	801a      	strh	r2, [r3, #0]
 8002962:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800296c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002970:	b29a      	uxth	r2, r3
 8002972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002974:	801a      	strh	r2, [r3, #0]
 8002976:	e01a      	b.n	80029ae <HAL_PCD_EP_DB_Transmit+0x48c>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	785b      	ldrb	r3, [r3, #1]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d116      	bne.n	80029ae <HAL_PCD_EP_DB_Transmit+0x48c>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	677b      	str	r3, [r7, #116]	; 0x74
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800298e:	b29b      	uxth	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002994:	4413      	add	r3, r2
 8002996:	677b      	str	r3, [r7, #116]	; 0x74
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	011a      	lsls	r2, r3, #4
 800299e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a0:	4413      	add	r3, r2
 80029a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029a6:	673b      	str	r3, [r7, #112]	; 0x70
 80029a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029aa:	2200      	movs	r2, #0
 80029ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	785b      	ldrb	r3, [r3, #1]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d12f      	bne.n	8002a1c <HAL_PCD_EP_DB_Transmit+0x4fa>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029d4:	4413      	add	r3, r2
 80029d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	011a      	lsls	r2, r3, #4
 80029e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029e4:	4413      	add	r3, r2
 80029e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a18:	801a      	strh	r2, [r3, #0]
 8002a1a:	e017      	b.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x52a>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	785b      	ldrb	r3, [r3, #1]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d113      	bne.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x52a>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a32:	4413      	add	r3, r2
 8002a34:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	011a      	lsls	r2, r3, #4
 8002a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a3e:	4413      	add	r3, r2
 8002a40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a48:	2200      	movs	r2, #0
 8002a4a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4619      	mov	r1, r3
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f005 fd3d 	bl	80084d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f040 8104 	bne.w	8002c6c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	441a      	add	r2, r3
 8002a90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	8013      	strh	r3, [r2, #0]
 8002aa8:	e0e0      	b.n	8002c6c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d121      	bne.n	8002af8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ace:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	441a      	add	r2, r3
 8002ae0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	f040 80b4 	bne.w	8002c6c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b0c:	441a      	add	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b1a:	441a      	add	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d309      	bcc.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	6a1a      	ldr	r2, [r3, #32]
 8002b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b38:	1ad2      	subs	r2, r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	621a      	str	r2, [r3, #32]
 8002b3e:	e015      	b.n	8002b6c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002b48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b4c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b56:	e009      	b.n	8002b6c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2200      	movs	r2, #0
 8002b62:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	667b      	str	r3, [r7, #100]	; 0x64
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	785b      	ldrb	r3, [r3, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d155      	bne.n	8002c26 <HAL_PCD_EP_DB_Transmit+0x704>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8e:	4413      	add	r3, r2
 8002b90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	011a      	lsls	r2, r3, #4
 8002b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ba0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d112      	bne.n	8002bce <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bb6:	801a      	strh	r2, [r3, #0]
 8002bb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bca:	801a      	strh	r2, [r3, #0]
 8002bcc:	e044      	b.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x736>
 8002bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd0:	2b3e      	cmp	r3, #62	; 0x3e
 8002bd2:	d811      	bhi.n	8002bf8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	657b      	str	r3, [r7, #84]	; 0x54
 8002bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be6:	3301      	adds	r3, #1
 8002be8:	657b      	str	r3, [r7, #84]	; 0x54
 8002bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	029b      	lsls	r3, r3, #10
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf4:	801a      	strh	r2, [r3, #0]
 8002bf6:	e02f      	b.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x736>
 8002bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	657b      	str	r3, [r7, #84]	; 0x54
 8002bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	657b      	str	r3, [r7, #84]	; 0x54
 8002c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	029b      	lsls	r3, r3, #10
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c22:	801a      	strh	r2, [r3, #0]
 8002c24:	e018      	b.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x736>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	785b      	ldrb	r3, [r3, #1]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d114      	bne.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x736>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c3c:	4413      	add	r3, r2
 8002c3e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	011a      	lsls	r2, r3, #4
 8002c46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c48:	4413      	add	r3, r2
 8002c4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c4e:	663b      	str	r3, [r7, #96]	; 0x60
 8002c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c56:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6959      	ldr	r1, [r3, #20]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	895a      	ldrh	r2, [r3, #10]
 8002c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f003 fde9 	bl	800683e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c86:	823b      	strh	r3, [r7, #16]
 8002c88:	8a3b      	ldrh	r3, [r7, #16]
 8002c8a:	f083 0310 	eor.w	r3, r3, #16
 8002c8e:	823b      	strh	r3, [r7, #16]
 8002c90:	8a3b      	ldrh	r3, [r7, #16]
 8002c92:	f083 0320 	eor.w	r3, r3, #32
 8002c96:	823b      	strh	r3, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	441a      	add	r2, r3
 8002ca6:	8a3b      	ldrh	r3, [r7, #16]
 8002ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3788      	adds	r7, #136	; 0x88
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b087      	sub	sp, #28
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	817b      	strh	r3, [r7, #10]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002cd8:	897b      	ldrh	r3, [r7, #10]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce4:	897b      	ldrh	r3, [r7, #10]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	e009      	b.n	8002d10 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cfc:	897a      	ldrh	r2, [r7, #10]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d10:	893b      	ldrh	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d107      	bne.n	8002d26 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	80da      	strh	r2, [r3, #6]
 8002d24:	e00b      	b.n	8002d3e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	371c      	adds	r7, #28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e26c      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8087 	beq.w	8002e7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d6c:	4b92      	ldr	r3, [pc, #584]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 030c 	and.w	r3, r3, #12
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d00c      	beq.n	8002d92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d78:	4b8f      	ldr	r3, [pc, #572]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d112      	bne.n	8002daa <HAL_RCC_OscConfig+0x5e>
 8002d84:	4b8c      	ldr	r3, [pc, #560]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d90:	d10b      	bne.n	8002daa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d92:	4b89      	ldr	r3, [pc, #548]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d06c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x12c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d168      	bne.n	8002e78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e246      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x76>
 8002db4:	4b80      	ldr	r3, [pc, #512]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a7f      	ldr	r2, [pc, #508]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	e02e      	b.n	8002e20 <HAL_RCC_OscConfig+0xd4>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x98>
 8002dca:	4b7b      	ldr	r3, [pc, #492]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a7a      	ldr	r2, [pc, #488]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b78      	ldr	r3, [pc, #480]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a77      	ldr	r2, [pc, #476]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e01d      	b.n	8002e20 <HAL_RCC_OscConfig+0xd4>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0xbc>
 8002dee:	4b72      	ldr	r3, [pc, #456]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a71      	ldr	r2, [pc, #452]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b6f      	ldr	r3, [pc, #444]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6e      	ldr	r2, [pc, #440]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0xd4>
 8002e08:	4b6b      	ldr	r3, [pc, #428]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a6a      	ldr	r2, [pc, #424]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a67      	ldr	r2, [pc, #412]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fd ffe6 	bl	8000df8 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fd ffe2 	bl	8000df8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	; 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e1fa      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b5d      	ldr	r3, [pc, #372]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0xe4>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fd ffd2 	bl	8000df8 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e58:	f7fd ffce 	bl	8000df8 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e1e6      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	4b53      	ldr	r3, [pc, #332]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x10c>
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e86:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e92:	4b49      	ldr	r3, [pc, #292]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d11c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x18c>
 8002e9e:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d116      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x176>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1ba      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec2:	4b3d      	ldr	r3, [pc, #244]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4939      	ldr	r1, [pc, #228]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	e03a      	b.n	8002f4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee0:	4b36      	ldr	r3, [pc, #216]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fd ff87 	bl	8000df8 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eee:	f7fd ff83 	bl	8000df8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e19b      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4927      	ldr	r1, [pc, #156]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <HAL_RCC_OscConfig+0x270>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fd ff66 	bl	8000df8 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f30:	f7fd ff62 	bl	8000df8 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e17a      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d03a      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d019      	beq.n	8002f96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f68:	f7fd ff46 	bl	8000df8 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fd ff42 	bl	8000df8 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e15a      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f000 faa6 	bl	80034e0 <RCC_Delay>
 8002f94:	e01c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <HAL_RCC_OscConfig+0x274>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9c:	f7fd ff2c 	bl	8000df8 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa2:	e00f      	b.n	8002fc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa4:	f7fd ff28 	bl	8000df8 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d908      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e140      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	42420000 	.word	0x42420000
 8002fc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	4b9e      	ldr	r3, [pc, #632]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e9      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80a6 	beq.w	800312a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe2:	4b97      	ldr	r3, [pc, #604]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10d      	bne.n	800300a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	4b94      	ldr	r3, [pc, #592]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4a93      	ldr	r2, [pc, #588]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	61d3      	str	r3, [r2, #28]
 8002ffa:	4b91      	ldr	r3, [pc, #580]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300a:	4b8e      	ldr	r3, [pc, #568]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d118      	bne.n	8003048 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003016:	4b8b      	ldr	r3, [pc, #556]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a8a      	ldr	r2, [pc, #552]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003022:	f7fd fee9 	bl	8000df8 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302a:	f7fd fee5 	bl	8000df8 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b64      	cmp	r3, #100	; 0x64
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0fd      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	4b81      	ldr	r3, [pc, #516]	; (8003244 <HAL_RCC_OscConfig+0x4f8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d106      	bne.n	800305e <HAL_RCC_OscConfig+0x312>
 8003050:	4b7b      	ldr	r3, [pc, #492]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4a7a      	ldr	r2, [pc, #488]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6213      	str	r3, [r2, #32]
 800305c:	e02d      	b.n	80030ba <HAL_RCC_OscConfig+0x36e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0x334>
 8003066:	4b76      	ldr	r3, [pc, #472]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	4a75      	ldr	r2, [pc, #468]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800306c:	f023 0301 	bic.w	r3, r3, #1
 8003070:	6213      	str	r3, [r2, #32]
 8003072:	4b73      	ldr	r3, [pc, #460]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	4a72      	ldr	r2, [pc, #456]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003078:	f023 0304 	bic.w	r3, r3, #4
 800307c:	6213      	str	r3, [r2, #32]
 800307e:	e01c      	b.n	80030ba <HAL_RCC_OscConfig+0x36e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d10c      	bne.n	80030a2 <HAL_RCC_OscConfig+0x356>
 8003088:	4b6d      	ldr	r3, [pc, #436]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4a6c      	ldr	r2, [pc, #432]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800308e:	f043 0304 	orr.w	r3, r3, #4
 8003092:	6213      	str	r3, [r2, #32]
 8003094:	4b6a      	ldr	r3, [pc, #424]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4a69      	ldr	r2, [pc, #420]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6213      	str	r3, [r2, #32]
 80030a0:	e00b      	b.n	80030ba <HAL_RCC_OscConfig+0x36e>
 80030a2:	4b67      	ldr	r3, [pc, #412]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4a66      	ldr	r2, [pc, #408]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	6213      	str	r3, [r2, #32]
 80030ae:	4b64      	ldr	r3, [pc, #400]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	4a63      	ldr	r2, [pc, #396]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d015      	beq.n	80030ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fd fe99 	bl	8000df8 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fd fe95 	bl	8000df8 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e0ab      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	4b57      	ldr	r3, [pc, #348]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ee      	beq.n	80030ca <HAL_RCC_OscConfig+0x37e>
 80030ec:	e014      	b.n	8003118 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ee:	f7fd fe83 	bl	8000df8 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f6:	f7fd fe7f 	bl	8000df8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	; 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e095      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310c:	4b4c      	ldr	r3, [pc, #304]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ee      	bne.n	80030f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003118:	7dfb      	ldrb	r3, [r7, #23]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4b48      	ldr	r3, [pc, #288]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4a47      	ldr	r2, [pc, #284]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003128:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8081 	beq.w	8003236 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003134:	4b42      	ldr	r3, [pc, #264]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d061      	beq.n	8003204 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d146      	bne.n	80031d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003148:	4b3f      	ldr	r3, [pc, #252]	; (8003248 <HAL_RCC_OscConfig+0x4fc>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fd fe53 	bl	8000df8 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003156:	f7fd fe4f 	bl	8000df8 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e067      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003168:	4b35      	ldr	r3, [pc, #212]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f0      	bne.n	8003156 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317c:	d108      	bne.n	8003190 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800317e:	4b30      	ldr	r3, [pc, #192]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	492d      	ldr	r1, [pc, #180]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003190:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a19      	ldr	r1, [r3, #32]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	430b      	orrs	r3, r1
 80031a2:	4927      	ldr	r1, [pc, #156]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a8:	4b27      	ldr	r3, [pc, #156]	; (8003248 <HAL_RCC_OscConfig+0x4fc>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fd fe23 	bl	8000df8 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fd fe1f 	bl	8000df8 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e037      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x46a>
 80031d4:	e02f      	b.n	8003236 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <HAL_RCC_OscConfig+0x4fc>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fd fe0c 	bl	8000df8 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fd fe08 	bl	8000df8 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e020      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x498>
 8003202:	e018      	b.n	8003236 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e013      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_OscConfig+0x4f4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	429a      	cmp	r2, r3
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d001      	beq.n	8003236 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	40007000 	.word	0x40007000
 8003248:	42420060 	.word	0x42420060

0800324c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0d0      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b6a      	ldr	r3, [pc, #424]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d910      	bls.n	8003290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b67      	ldr	r3, [pc, #412]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 0207 	bic.w	r2, r3, #7
 8003276:	4965      	ldr	r1, [pc, #404]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b8      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a8:	4b59      	ldr	r3, [pc, #356]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c0:	4b53      	ldr	r3, [pc, #332]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4a52      	ldr	r2, [pc, #328]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b50      	ldr	r3, [pc, #320]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	494d      	ldr	r1, [pc, #308]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d040      	beq.n	800336c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d115      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e07f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330a:	4b41      	ldr	r3, [pc, #260]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e073      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331a:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06b      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b39      	ldr	r3, [pc, #228]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4936      	ldr	r1, [pc, #216]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333c:	f7fd fd5c 	bl	8000df8 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fd fd58 	bl	8000df8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e053      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b27      	ldr	r3, [pc, #156]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d210      	bcs.n	800339c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 0207 	bic.w	r2, r3, #7
 8003382:	4922      	ldr	r1, [pc, #136]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e032      	b.n	8003402 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4916      	ldr	r1, [pc, #88]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	490e      	ldr	r1, [pc, #56]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033da:	f000 f821 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	490a      	ldr	r1, [pc, #40]	; (8003414 <HAL_RCC_ClockConfig+0x1c8>)
 80033ec:	5ccb      	ldrb	r3, [r1, r3]
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <HAL_RCC_ClockConfig+0x1cc>)
 80033f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1d0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fcba 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40022000 	.word	0x40022000
 8003410:	40021000 	.word	0x40021000
 8003414:	08008aa0 	.word	0x08008aa0
 8003418:	20000004 	.word	0x20000004
 800341c:	20000008 	.word	0x20000008

08003420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003420:	b490      	push	{r4, r7}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003426:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003428:	1d3c      	adds	r4, r7, #4
 800342a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800342c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003430:	f240 2301 	movw	r3, #513	; 0x201
 8003434:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	2300      	movs	r3, #0
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800344a:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b04      	cmp	r3, #4
 8003458:	d002      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x40>
 800345a:	2b08      	cmp	r3, #8
 800345c:	d003      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x46>
 800345e:	e02d      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003462:	623b      	str	r3, [r7, #32]
      break;
 8003464:	e02d      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	0c9b      	lsrs	r3, r3, #18
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003472:	4413      	add	r3, r2
 8003474:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003478:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d013      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	0c5b      	lsrs	r3, r3, #17
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003492:	4413      	add	r3, r2
 8003494:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003498:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	4a0e      	ldr	r2, [pc, #56]	; (80034d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800349e:	fb02 f203 	mul.w	r2, r2, r3
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
 80034aa:	e004      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	4a0b      	ldr	r2, [pc, #44]	; (80034dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80034b0:	fb02 f303 	mul.w	r3, r2, r3
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	623b      	str	r3, [r7, #32]
      break;
 80034ba:	e002      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034be:	623b      	str	r3, [r7, #32]
      break;
 80034c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034c2:	6a3b      	ldr	r3, [r7, #32]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3728      	adds	r7, #40	; 0x28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc90      	pop	{r4, r7}
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	08008a48 	.word	0x08008a48
 80034d4:	40021000 	.word	0x40021000
 80034d8:	007a1200 	.word	0x007a1200
 80034dc:	003d0900 	.word	0x003d0900

080034e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <RCC_Delay+0x34>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <RCC_Delay+0x38>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	0a5b      	lsrs	r3, r3, #9
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034fc:	bf00      	nop
  }
  while (Delay --);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1e5a      	subs	r2, r3, #1
 8003502:	60fa      	str	r2, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f9      	bne.n	80034fc <RCC_Delay+0x1c>
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr
 8003514:	20000004 	.word	0x20000004
 8003518:	10624dd3 	.word	0x10624dd3

0800351c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d07d      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003538:	2300      	movs	r3, #0
 800353a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353c:	4b4f      	ldr	r3, [pc, #316]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10d      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003548:	4b4c      	ldr	r3, [pc, #304]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	4a4b      	ldr	r2, [pc, #300]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	61d3      	str	r3, [r2, #28]
 8003554:	4b49      	ldr	r3, [pc, #292]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003560:	2301      	movs	r3, #1
 8003562:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003564:	4b46      	ldr	r3, [pc, #280]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d118      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003570:	4b43      	ldr	r3, [pc, #268]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a42      	ldr	r2, [pc, #264]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800357c:	f7fd fc3c 	bl	8000df8 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003582:	e008      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003584:	f7fd fc38 	bl	8000df8 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e06d      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003596:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035a2:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d02e      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d027      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035c0:	4b2e      	ldr	r3, [pc, #184]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ca:	4b2e      	ldr	r3, [pc, #184]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035d0:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035d6:	4a29      	ldr	r2, [pc, #164]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d014      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e6:	f7fd fc07 	bl	8000df8 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fd fc03 	bl	8000df8 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e036      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003604:	4b1d      	ldr	r3, [pc, #116]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ee      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003610:	4b1a      	ldr	r3, [pc, #104]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	4917      	ldr	r1, [pc, #92]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	4313      	orrs	r3, r2
 8003620:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003622:	7dfb      	ldrb	r3, [r7, #23]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d105      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003628:	4b14      	ldr	r3, [pc, #80]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	4a13      	ldr	r2, [pc, #76]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003632:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003640:	4b0e      	ldr	r3, [pc, #56]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	490b      	ldr	r1, [pc, #44]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	4904      	ldr	r1, [pc, #16]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000
 8003680:	40007000 	.word	0x40007000
 8003684:	42420440 	.word	0x42420440

08003688 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e076      	b.n	8003788 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d108      	bne.n	80036b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036aa:	d009      	beq.n	80036c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	61da      	str	r2, [r3, #28]
 80036b2:	e005      	b.n	80036c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd fa6e 	bl	8000bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003744:	ea42 0103 	orr.w	r1, r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	0c1a      	lsrs	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f002 0204 	and.w	r2, r2, #4
 8003766:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003776:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ac:	d112      	bne.n	80037d4 <HAL_SPI_Receive+0x44>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10e      	bne.n	80037d4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2204      	movs	r2, #4
 80037ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037be:	88fa      	ldrh	r2, [r7, #6]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f8f1 	bl	80039b2 <HAL_SPI_TransmitReceive>
 80037d0:	4603      	mov	r3, r0
 80037d2:	e0ea      	b.n	80039aa <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_SPI_Receive+0x52>
 80037de:	2302      	movs	r3, #2
 80037e0:	e0e3      	b.n	80039aa <HAL_SPI_Receive+0x21a>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037ea:	f7fd fb05 	bl	8000df8 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d002      	beq.n	8003802 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
 80037fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003800:	e0ca      	b.n	8003998 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_SPI_Receive+0x7e>
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d102      	bne.n	8003814 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003812:	e0c1      	b.n	8003998 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2204      	movs	r2, #4
 8003818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	88fa      	ldrh	r2, [r7, #6]
 800382c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	88fa      	ldrh	r2, [r7, #6]
 8003832:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385a:	d10f      	bne.n	800387c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800387a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d007      	beq.n	800389a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003898:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d162      	bne.n	8003968 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038a2:	e02e      	b.n	8003902 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d115      	bne.n	80038de <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f103 020c 	add.w	r2, r3, #12
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	7812      	ldrb	r2, [r2, #0]
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038dc:	e011      	b.n	8003902 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038de:	f7fd fa8b 	bl	8000df8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d803      	bhi.n	80038f6 <HAL_SPI_Receive+0x166>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d102      	bne.n	80038fc <HAL_SPI_Receive+0x16c>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003900:	e04a      	b.n	8003998 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1cb      	bne.n	80038a4 <HAL_SPI_Receive+0x114>
 800390c:	e031      	b.n	8003972 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d113      	bne.n	8003944 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	b292      	uxth	r2, r2
 8003928:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	1c9a      	adds	r2, r3, #2
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003942:	e011      	b.n	8003968 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003944:	f7fd fa58 	bl	8000df8 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d803      	bhi.n	800395c <HAL_SPI_Receive+0x1cc>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395a:	d102      	bne.n	8003962 <HAL_SPI_Receive+0x1d2>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003966:	e017      	b.n	8003998 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1cd      	bne.n	800390e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 fa46 	bl	8003e08 <SPI_EndRxTransaction>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
 8003994:	e000      	b.n	8003998 <HAL_SPI_Receive+0x208>
  }

error :
 8003996:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b08c      	sub	sp, #48	; 0x30
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039c0:	2301      	movs	r3, #1
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_SPI_TransmitReceive+0x26>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e18a      	b.n	8003cee <HAL_SPI_TransmitReceive+0x33c>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039e0:	f7fd fa0a 	bl	8000df8 <HAL_GetTick>
 80039e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039f6:	887b      	ldrh	r3, [r7, #2]
 80039f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d00f      	beq.n	8003a22 <HAL_SPI_TransmitReceive+0x70>
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a08:	d107      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x68>
 8003a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d003      	beq.n	8003a22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a20:	e15b      	b.n	8003cda <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_SPI_TransmitReceive+0x82>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_SPI_TransmitReceive+0x82>
 8003a2e:	887b      	ldrh	r3, [r7, #2]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d103      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a3a:	e14e      	b.n	8003cda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d003      	beq.n	8003a50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2205      	movs	r2, #5
 8003a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	887a      	ldrh	r2, [r7, #2]
 8003a60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	887a      	ldrh	r2, [r7, #2]
 8003a66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	887a      	ldrh	r2, [r7, #2]
 8003a72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	887a      	ldrh	r2, [r7, #2]
 8003a78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d007      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aac:	d178      	bne.n	8003ba0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_SPI_TransmitReceive+0x10a>
 8003ab6:	8b7b      	ldrh	r3, [r7, #26]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d166      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	881a      	ldrh	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	1c9a      	adds	r2, r3, #2
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ae0:	e053      	b.n	8003b8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d11b      	bne.n	8003b28 <HAL_SPI_TransmitReceive+0x176>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x176>
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d113      	bne.n	8003b28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	881a      	ldrh	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	1c9a      	adds	r2, r3, #2
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d119      	bne.n	8003b6a <HAL_SPI_TransmitReceive+0x1b8>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d014      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	b292      	uxth	r2, r2
 8003b4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	1c9a      	adds	r2, r3, #2
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b66:	2301      	movs	r3, #1
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b6a:	f7fd f945 	bl	8000df8 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d807      	bhi.n	8003b8a <HAL_SPI_TransmitReceive+0x1d8>
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b80:	d003      	beq.n	8003b8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b88:	e0a7      	b.n	8003cda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1a6      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x130>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1a1      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x130>
 8003b9e:	e07c      	b.n	8003c9a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_SPI_TransmitReceive+0x1fc>
 8003ba8:	8b7b      	ldrh	r3, [r7, #26]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d16b      	bne.n	8003c86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	7812      	ldrb	r2, [r2, #0]
 8003bba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd4:	e057      	b.n	8003c86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d11c      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x26c>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d017      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x26c>
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d114      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	7812      	ldrb	r2, [r2, #0]
 8003c00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d119      	bne.n	8003c60 <HAL_SPI_TransmitReceive+0x2ae>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d014      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c60:	f7fd f8ca 	bl	8000df8 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d803      	bhi.n	8003c78 <HAL_SPI_TransmitReceive+0x2c6>
 8003c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d102      	bne.n	8003c7e <HAL_SPI_TransmitReceive+0x2cc>
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d103      	bne.n	8003c86 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c84:	e029      	b.n	8003cda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1a2      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x224>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d19d      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f904 	bl	8003eac <SPI_EndRxTxTransaction>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d006      	beq.n	8003cb8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cb6:	e010      	b.n	8003cda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	e000      	b.n	8003cda <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003cd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3730      	adds	r7, #48	; 0x30
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d08:	f7fd f876 	bl	8000df8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	4413      	add	r3, r2
 8003d16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d18:	f7fd f86e 	bl	8000df8 <HAL_GetTick>
 8003d1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d1e:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	015b      	lsls	r3, r3, #5
 8003d24:	0d1b      	lsrs	r3, r3, #20
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d2e:	e054      	b.n	8003dda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d050      	beq.n	8003dda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d38:	f7fd f85e 	bl	8000df8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d902      	bls.n	8003d4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d13d      	bne.n	8003dca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d66:	d111      	bne.n	8003d8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d70:	d004      	beq.n	8003d7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7a:	d107      	bne.n	8003d8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d94:	d10f      	bne.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003db4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e017      	b.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4013      	ands	r3, r2
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	bf0c      	ite	eq
 8003dea:	2301      	moveq	r3, #1
 8003dec:	2300      	movne	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d19b      	bne.n	8003d30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000004 	.word	0x20000004

08003e08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e1c:	d111      	bne.n	8003e42 <SPI_EndRxTransaction+0x3a>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e26:	d004      	beq.n	8003e32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e30:	d107      	bne.n	8003e42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e40:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4a:	d117      	bne.n	8003e7c <SPI_EndRxTransaction+0x74>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e54:	d112      	bne.n	8003e7c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2101      	movs	r1, #1
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f7ff ff49 	bl	8003cf8 <SPI_WaitFlagStateUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01a      	beq.n	8003ea2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e013      	b.n	8003ea4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2200      	movs	r2, #0
 8003e84:	2180      	movs	r1, #128	; 0x80
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f7ff ff36 	bl	8003cf8 <SPI_WaitFlagStateUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e96:	f043 0220 	orr.w	r2, r3, #32
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e000      	b.n	8003ea4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7ff ff18 	bl	8003cf8 <SPI_WaitFlagStateUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e000      	b.n	8003ee0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e041      	b.n	8003f7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc fe9e 	bl	8000c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f000 f93c 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d001      	beq.n	8003fa0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e032      	b.n	8004006 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a18      	ldr	r2, [pc, #96]	; (8004010 <HAL_TIM_Base_Start+0x88>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_TIM_Base_Start+0x48>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fba:	d009      	beq.n	8003fd0 <HAL_TIM_Base_Start+0x48>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a14      	ldr	r2, [pc, #80]	; (8004014 <HAL_TIM_Base_Start+0x8c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_Base_Start+0x48>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a13      	ldr	r2, [pc, #76]	; (8004018 <HAL_TIM_Base_Start+0x90>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d111      	bne.n	8003ff4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d010      	beq.n	8004004 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff2:	e007      	b.n	8004004 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	40012c00 	.word	0x40012c00
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800

0800401c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_TIM_ConfigClockSource+0x18>
 8004030:	2302      	movs	r3, #2
 8004032:	e0b3      	b.n	800419c <HAL_TIM_ConfigClockSource+0x180>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004052:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406c:	d03e      	beq.n	80040ec <HAL_TIM_ConfigClockSource+0xd0>
 800406e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004072:	f200 8087 	bhi.w	8004184 <HAL_TIM_ConfigClockSource+0x168>
 8004076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407a:	f000 8085 	beq.w	8004188 <HAL_TIM_ConfigClockSource+0x16c>
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004082:	d87f      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 8004084:	2b70      	cmp	r3, #112	; 0x70
 8004086:	d01a      	beq.n	80040be <HAL_TIM_ConfigClockSource+0xa2>
 8004088:	2b70      	cmp	r3, #112	; 0x70
 800408a:	d87b      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 800408c:	2b60      	cmp	r3, #96	; 0x60
 800408e:	d050      	beq.n	8004132 <HAL_TIM_ConfigClockSource+0x116>
 8004090:	2b60      	cmp	r3, #96	; 0x60
 8004092:	d877      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 8004094:	2b50      	cmp	r3, #80	; 0x50
 8004096:	d03c      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0xf6>
 8004098:	2b50      	cmp	r3, #80	; 0x50
 800409a:	d873      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d058      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x136>
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d86f      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 80040a4:	2b30      	cmp	r3, #48	; 0x30
 80040a6:	d064      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x156>
 80040a8:	2b30      	cmp	r3, #48	; 0x30
 80040aa:	d86b      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d060      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x156>
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d867      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d05c      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x156>
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d05a      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80040bc:	e062      	b.n	8004184 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6899      	ldr	r1, [r3, #8]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f000 f942 	bl	8004356 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	609a      	str	r2, [r3, #8]
      break;
 80040ea:	e04e      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6899      	ldr	r1, [r3, #8]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f000 f92b 	bl	8004356 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800410e:	609a      	str	r2, [r3, #8]
      break;
 8004110:	e03b      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6859      	ldr	r1, [r3, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	461a      	mov	r2, r3
 8004120:	f000 f8a2 	bl	8004268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2150      	movs	r1, #80	; 0x50
 800412a:	4618      	mov	r0, r3
 800412c:	f000 f8f9 	bl	8004322 <TIM_ITRx_SetConfig>
      break;
 8004130:	e02b      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6859      	ldr	r1, [r3, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	461a      	mov	r2, r3
 8004140:	f000 f8c0 	bl	80042c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2160      	movs	r1, #96	; 0x60
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f8e9 	bl	8004322 <TIM_ITRx_SetConfig>
      break;
 8004150:	e01b      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6859      	ldr	r1, [r3, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	461a      	mov	r2, r3
 8004160:	f000 f882 	bl	8004268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2140      	movs	r1, #64	; 0x40
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f8d9 	bl	8004322 <TIM_ITRx_SetConfig>
      break;
 8004170:	e00b      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f000 f8d0 	bl	8004322 <TIM_ITRx_SetConfig>
        break;
 8004182:	e002      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004184:	bf00      	nop
 8004186:	e000      	b.n	800418a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004188:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a29      	ldr	r2, [pc, #164]	; (800425c <TIM_Base_SetConfig+0xb8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <TIM_Base_SetConfig+0x30>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c2:	d007      	beq.n	80041d4 <TIM_Base_SetConfig+0x30>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a26      	ldr	r2, [pc, #152]	; (8004260 <TIM_Base_SetConfig+0xbc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_Base_SetConfig+0x30>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a25      	ldr	r2, [pc, #148]	; (8004264 <TIM_Base_SetConfig+0xc0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d108      	bne.n	80041e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a1c      	ldr	r2, [pc, #112]	; (800425c <TIM_Base_SetConfig+0xb8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00b      	beq.n	8004206 <TIM_Base_SetConfig+0x62>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f4:	d007      	beq.n	8004206 <TIM_Base_SetConfig+0x62>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a19      	ldr	r2, [pc, #100]	; (8004260 <TIM_Base_SetConfig+0xbc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d003      	beq.n	8004206 <TIM_Base_SetConfig+0x62>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a18      	ldr	r2, [pc, #96]	; (8004264 <TIM_Base_SetConfig+0xc0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a07      	ldr	r2, [pc, #28]	; (800425c <TIM_Base_SetConfig+0xb8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d103      	bne.n	800424c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	615a      	str	r2, [r3, #20]
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr
 800425c:	40012c00 	.word	0x40012c00
 8004260:	40000400 	.word	0x40000400
 8004264:	40000800 	.word	0x40000800

08004268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0201 	bic.w	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f023 030a 	bic.w	r3, r3, #10
 80042a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr

080042c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f023 0210 	bic.w	r2, r3, #16
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	031b      	lsls	r3, r3, #12
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004300:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	621a      	str	r2, [r3, #32]
}
 8004318:	bf00      	nop
 800431a:	371c      	adds	r7, #28
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	f043 0307 	orr.w	r3, r3, #7
 8004344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	609a      	str	r2, [r3, #8]
}
 800434c:	bf00      	nop
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr

08004356 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004356:	b480      	push	{r7}
 8004358:	b087      	sub	sp, #28
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004370:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	021a      	lsls	r2, r3, #8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	431a      	orrs	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4313      	orrs	r3, r2
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	609a      	str	r2, [r3, #8]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e046      	b.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a16      	ldr	r2, [pc, #88]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00e      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f8:	d009      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a12      	ldr	r2, [pc, #72]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a10      	ldr	r2, [pc, #64]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d10c      	bne.n	8004428 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	4313      	orrs	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800

08004450 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004450:	b084      	sub	sp, #16
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	f107 0014 	add.w	r0, r7, #20
 800445e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	b004      	add	sp, #16
 800446e:	4770      	bx	lr

08004470 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004480:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004484:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	b29a      	uxth	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	4013      	ands	r3, r2
 80044bc:	b29a      	uxth	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044e8:	b084      	sub	sp, #16
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	f107 0014 	add.w	r0, r7, #20
 80044f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	b004      	add	sp, #16
 8004526:	4770      	bx	lr

08004528 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004528:	b480      	push	{r7}
 800452a:	b09b      	sub	sp, #108	; 0x6c
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b29b      	uxth	r3, r3
 8004546:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	78db      	ldrb	r3, [r3, #3]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d81f      	bhi.n	800459a <USB_ActivateEndpoint+0x72>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <USB_ActivateEndpoint+0x38>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004571 	.word	0x08004571
 8004564:	0800458d 	.word	0x0800458d
 8004568:	080045a3 	.word	0x080045a3
 800456c:	0800457f 	.word	0x0800457f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004570:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004578:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800457c:	e012      	b.n	80045a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800457e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004582:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004586:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800458a:	e00b      	b.n	80045a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800458c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004590:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004594:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004598:	e004      	b.n	80045a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80045a0:	e000      	b.n	80045a4 <USB_ActivateEndpoint+0x7c>
      break;
 80045a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	441a      	add	r2, r3
 80045ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045dc:	b29a      	uxth	r2, r3
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	441a      	add	r2, r3
 80045f4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80045f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004608:	b29b      	uxth	r3, r3
 800460a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	7b1b      	ldrb	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 8149 	bne.w	80048a8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	785b      	ldrb	r3, [r3, #1]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8084 	beq.w	8004728 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800462a:	b29b      	uxth	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	4413      	add	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	011a      	lsls	r2, r3, #4
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	88db      	ldrh	r3, [r3, #6]
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	b29b      	uxth	r3, r3
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	81fb      	strh	r3, [r7, #14]
 8004662:	89fb      	ldrh	r3, [r7, #14]
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01b      	beq.n	80046a4 <USB_ActivateEndpoint+0x17c>
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800467e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004682:	81bb      	strh	r3, [r7, #12]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	441a      	add	r2, r3
 800468e:	89bb      	ldrh	r3, [r7, #12]
 8004690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800469c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	78db      	ldrb	r3, [r3, #3]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d020      	beq.n	80046ee <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c2:	813b      	strh	r3, [r7, #8]
 80046c4:	893b      	ldrh	r3, [r7, #8]
 80046c6:	f083 0320 	eor.w	r3, r3, #32
 80046ca:	813b      	strh	r3, [r7, #8]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	441a      	add	r2, r3
 80046d6:	893b      	ldrh	r3, [r7, #8]
 80046d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	8013      	strh	r3, [r2, #0]
 80046ec:	e27f      	b.n	8004bee <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004704:	817b      	strh	r3, [r7, #10]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	441a      	add	r2, r3
 8004710:	897b      	ldrh	r3, [r7, #10]
 8004712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800471a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800471e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004722:	b29b      	uxth	r3, r3
 8004724:	8013      	strh	r3, [r2, #0]
 8004726:	e262      	b.n	8004bee <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004732:	b29b      	uxth	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	4413      	add	r3, r2
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	011a      	lsls	r2, r3, #4
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	4413      	add	r3, r2
 8004746:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	88db      	ldrh	r3, [r3, #6]
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	b29b      	uxth	r3, r3
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004766:	b29b      	uxth	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	4413      	add	r3, r2
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	011a      	lsls	r2, r3, #4
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	4413      	add	r3, r2
 800477a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800477e:	623b      	str	r3, [r7, #32]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d112      	bne.n	80047ae <USB_ActivateEndpoint+0x286>
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29b      	uxth	r3, r3
 800478e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004792:	b29a      	uxth	r2, r3
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	801a      	strh	r2, [r3, #0]
 80047ac:	e02f      	b.n	800480e <USB_ActivateEndpoint+0x2e6>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b3e      	cmp	r3, #62	; 0x3e
 80047b4:	d813      	bhi.n	80047de <USB_ActivateEndpoint+0x2b6>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	663b      	str	r3, [r7, #96]	; 0x60
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <USB_ActivateEndpoint+0x2a8>
 80047ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047cc:	3301      	adds	r3, #1
 80047ce:	663b      	str	r3, [r7, #96]	; 0x60
 80047d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	029b      	lsls	r3, r3, #10
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	801a      	strh	r2, [r3, #0]
 80047dc:	e017      	b.n	800480e <USB_ActivateEndpoint+0x2e6>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	663b      	str	r3, [r7, #96]	; 0x60
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d102      	bne.n	80047f8 <USB_ActivateEndpoint+0x2d0>
 80047f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047f4:	3b01      	subs	r3, #1
 80047f6:	663b      	str	r3, [r7, #96]	; 0x60
 80047f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	029b      	lsls	r3, r3, #10
 80047fe:	b29b      	uxth	r3, r3
 8004800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004808:	b29a      	uxth	r2, r3
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	83fb      	strh	r3, [r7, #30]
 800481c:	8bfb      	ldrh	r3, [r7, #30]
 800481e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01b      	beq.n	800485e <USB_ActivateEndpoint+0x336>
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483c:	83bb      	strh	r3, [r7, #28]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	441a      	add	r2, r3
 8004848:	8bbb      	ldrh	r3, [r7, #28]
 800484a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485a:	b29b      	uxth	r3, r3
 800485c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	b29b      	uxth	r3, r3
 800486c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004874:	837b      	strh	r3, [r7, #26]
 8004876:	8b7b      	ldrh	r3, [r7, #26]
 8004878:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800487c:	837b      	strh	r3, [r7, #26]
 800487e:	8b7b      	ldrh	r3, [r7, #26]
 8004880:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004884:	837b      	strh	r3, [r7, #26]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	441a      	add	r2, r3
 8004890:	8b7b      	ldrh	r3, [r7, #26]
 8004892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]
 80048a6:	e1a2      	b.n	8004bee <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	441a      	add	r2, r3
 80048cc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80048d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048f4:	4413      	add	r3, r2
 80048f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	011a      	lsls	r2, r3, #4
 80048fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004900:	4413      	add	r3, r2
 8004902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004906:	657b      	str	r3, [r7, #84]	; 0x54
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	891b      	ldrh	r3, [r3, #8]
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	b29b      	uxth	r3, r3
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	653b      	str	r3, [r7, #80]	; 0x50
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004922:	b29b      	uxth	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004928:	4413      	add	r3, r2
 800492a:	653b      	str	r3, [r7, #80]	; 0x50
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	011a      	lsls	r2, r3, #4
 8004932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004934:	4413      	add	r3, r2
 8004936:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800493a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	895b      	ldrh	r3, [r3, #10]
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	b29b      	uxth	r3, r3
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800494a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	785b      	ldrb	r3, [r3, #1]
 8004950:	2b00      	cmp	r3, #0
 8004952:	f040 8091 	bne.w	8004a78 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004964:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01b      	beq.n	80049a6 <USB_ActivateEndpoint+0x47e>
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004984:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	441a      	add	r2, r3
 8004990:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800499a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800499e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	873b      	strh	r3, [r7, #56]	; 0x38
 80049b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01b      	beq.n	80049f6 <USB_ActivateEndpoint+0x4ce>
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	441a      	add	r2, r3
 8004a28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a54:	867b      	strh	r3, [r7, #50]	; 0x32
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	441a      	add	r2, r3
 8004a60:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	8013      	strh	r3, [r2, #0]
 8004a76:	e0ba      	b.n	8004bee <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004a88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01d      	beq.n	8004ad0 <USB_ActivateEndpoint+0x5a8>
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004ae0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01d      	beq.n	8004b28 <USB_ActivateEndpoint+0x600>
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	78db      	ldrb	r3, [r3, #3]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d024      	beq.n	8004b7a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b4e:	f083 0320 	eor.w	r3, r3, #32
 8004b52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	441a      	add	r2, r3
 8004b60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	8013      	strh	r3, [r2, #0]
 8004b78:	e01d      	b.n	8004bb6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	441a      	add	r2, r3
 8004b9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bcc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	441a      	add	r2, r3
 8004bd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004bee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	376c      	adds	r7, #108	; 0x6c
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b08d      	sub	sp, #52	; 0x34
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	7b1b      	ldrb	r3, [r3, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f040 808e 	bne.w	8004d2c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	785b      	ldrb	r3, [r3, #1]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d044      	beq.n	8004ca2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	81bb      	strh	r3, [r7, #12]
 8004c26:	89bb      	ldrh	r3, [r7, #12]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01b      	beq.n	8004c68 <USB_DeactivateEndpoint+0x6c>
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c46:	817b      	strh	r3, [r7, #10]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	897b      	ldrh	r3, [r7, #10]
 8004c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7e:	813b      	strh	r3, [r7, #8]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	441a      	add	r2, r3
 8004c8a:	893b      	ldrh	r3, [r7, #8]
 8004c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	8013      	strh	r3, [r2, #0]
 8004ca0:	e192      	b.n	8004fc8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	827b      	strh	r3, [r7, #18]
 8004cb0:	8a7b      	ldrh	r3, [r7, #18]
 8004cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01b      	beq.n	8004cf2 <USB_DeactivateEndpoint+0xf6>
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd0:	823b      	strh	r3, [r7, #16]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	441a      	add	r2, r3
 8004cdc:	8a3b      	ldrh	r3, [r7, #16]
 8004cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d08:	81fb      	strh	r3, [r7, #14]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	441a      	add	r2, r3
 8004d14:	89fb      	ldrh	r3, [r7, #14]
 8004d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	8013      	strh	r3, [r2, #0]
 8004d2a:	e14d      	b.n	8004fc8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f040 80a5 	bne.w	8004e80 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	843b      	strh	r3, [r7, #32]
 8004d44:	8c3b      	ldrh	r3, [r7, #32]
 8004d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01b      	beq.n	8004d86 <USB_DeactivateEndpoint+0x18a>
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d64:	83fb      	strh	r3, [r7, #30]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	441a      	add	r2, r3
 8004d70:	8bfb      	ldrh	r3, [r7, #30]
 8004d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	83bb      	strh	r3, [r7, #28]
 8004d94:	8bbb      	ldrh	r3, [r7, #28]
 8004d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01b      	beq.n	8004dd6 <USB_DeactivateEndpoint+0x1da>
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db4:	837b      	strh	r3, [r7, #26]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	441a      	add	r2, r3
 8004dc0:	8b7b      	ldrh	r3, [r7, #26]
 8004dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dec:	833b      	strh	r3, [r7, #24]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	8b3b      	ldrh	r3, [r7, #24]
 8004dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e24:	82fb      	strh	r3, [r7, #22]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	441a      	add	r2, r3
 8004e30:	8afb      	ldrh	r3, [r7, #22]
 8004e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e5c:	82bb      	strh	r3, [r7, #20]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	441a      	add	r2, r3
 8004e68:	8abb      	ldrh	r3, [r7, #20]
 8004e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8013      	strh	r3, [r2, #0]
 8004e7e:	e0a3      	b.n	8004fc8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004e8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01b      	beq.n	8004ed0 <USB_DeactivateEndpoint+0x2d4>
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	441a      	add	r2, r3
 8004eba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ede:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01b      	beq.n	8004f20 <USB_DeactivateEndpoint+0x324>
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	441a      	add	r2, r3
 8004f0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	441a      	add	r2, r3
 8004f42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	441a      	add	r2, r3
 8004f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	847b      	strh	r3, [r7, #34]	; 0x22
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	441a      	add	r2, r3
 8004fb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3734      	adds	r7, #52	; 0x34
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b0cc      	sub	sp, #304	; 0x130
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	1d3b      	adds	r3, r7, #4
 8004fdc:	6018      	str	r0, [r3, #0]
 8004fde:	463b      	mov	r3, r7
 8004fe0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	785b      	ldrb	r3, [r3, #1]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	f040 872e 	bne.w	8005e4a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004fee:	463b      	mov	r3, r7
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699a      	ldr	r2, [r3, #24]
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d905      	bls.n	800500a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004ffe:	463b      	mov	r3, r7
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005008:	e004      	b.n	8005014 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800500a:	463b      	mov	r3, r7
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005014:	463b      	mov	r3, r7
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	7b1b      	ldrb	r3, [r3, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d134      	bne.n	8005088 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800501e:	463b      	mov	r3, r7
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6959      	ldr	r1, [r3, #20]
 8005024:	463b      	mov	r3, r7
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	88da      	ldrh	r2, [r3, #6]
 800502a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800502e:	b29b      	uxth	r3, r3
 8005030:	1d38      	adds	r0, r7, #4
 8005032:	6800      	ldr	r0, [r0, #0]
 8005034:	f001 fc03 	bl	800683e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005038:	f107 0310 	add.w	r3, r7, #16
 800503c:	1d3a      	adds	r2, r7, #4
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	1d3b      	adds	r3, r7, #4
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800504a:	b29b      	uxth	r3, r3
 800504c:	4619      	mov	r1, r3
 800504e:	f107 0310 	add.w	r3, r7, #16
 8005052:	f107 0210 	add.w	r2, r7, #16
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	440a      	add	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	463b      	mov	r3, r7
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	011a      	lsls	r2, r3, #4
 8005064:	f107 0310 	add.w	r3, r7, #16
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4413      	add	r3, r2
 800506c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005070:	f107 030c 	add.w	r3, r7, #12
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507a:	b29a      	uxth	r2, r3
 800507c:	f107 030c 	add.w	r3, r7, #12
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	801a      	strh	r2, [r3, #0]
 8005084:	f000 beac 	b.w	8005de0 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005088:	463b      	mov	r3, r7
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	78db      	ldrb	r3, [r3, #3]
 800508e:	2b02      	cmp	r3, #2
 8005090:	f040 838c 	bne.w	80057ac <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005094:	463b      	mov	r3, r7
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6a1a      	ldr	r2, [r3, #32]
 800509a:	463b      	mov	r3, r7
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	f240 8330 	bls.w	8005706 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80050a6:	1d3b      	adds	r3, r7, #4
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	463b      	mov	r3, r7
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80050c4:	1d3b      	adds	r3, r7, #4
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	463b      	mov	r3, r7
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	441a      	add	r2, r3
 80050d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80050d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050de:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80050ea:	463b      	mov	r3, r7
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a1a      	ldr	r2, [r3, #32]
 80050f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f4:	1ad2      	subs	r2, r2, r3
 80050f6:	463b      	mov	r3, r7
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050fc:	1d3b      	adds	r3, r7, #4
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	463b      	mov	r3, r7
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 819e 	beq.w	8005454 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800511c:	1d3a      	adds	r2, r7, #4
 800511e:	6812      	ldr	r2, [r2, #0]
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	463b      	mov	r3, r7
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d17a      	bne.n	8005222 <USB_EPStartXfer+0x24e>
 800512c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005130:	1d3a      	adds	r2, r7, #4
 8005132:	6812      	ldr	r2, [r2, #0]
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	1d3b      	adds	r3, r7, #4
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800513e:	b29b      	uxth	r3, r3
 8005140:	4619      	mov	r1, r3
 8005142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005146:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	440a      	add	r2, r1
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	463b      	mov	r3, r7
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	011a      	lsls	r2, r3, #4
 8005158:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4413      	add	r3, r2
 8005160:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11a      	bne.n	80051a8 <USB_EPStartXfer+0x1d4>
 8005172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005180:	b29a      	uxth	r2, r3
 8005182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	b29b      	uxth	r3, r3
 8005194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519c:	b29a      	uxth	r2, r3
 800519e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	801a      	strh	r2, [r3, #0]
 80051a6:	e062      	b.n	800526e <USB_EPStartXfer+0x29a>
 80051a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ac:	2b3e      	cmp	r3, #62	; 0x3e
 80051ae:	d819      	bhi.n	80051e4 <USB_EPStartXfer+0x210>
 80051b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80051ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d004      	beq.n	80051d0 <USB_EPStartXfer+0x1fc>
 80051c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051ca:	3301      	adds	r3, #1
 80051cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80051d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	029b      	lsls	r3, r3, #10
 80051d8:	b29a      	uxth	r2, r3
 80051da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	e044      	b.n	800526e <USB_EPStartXfer+0x29a>
 80051e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80051ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f2:	f003 031f 	and.w	r3, r3, #31
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d104      	bne.n	8005204 <USB_EPStartXfer+0x230>
 80051fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051fe:	3b01      	subs	r3, #1
 8005200:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005204:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005208:	b29b      	uxth	r3, r3
 800520a:	029b      	lsls	r3, r3, #10
 800520c:	b29b      	uxth	r3, r3
 800520e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005216:	b29a      	uxth	r2, r3
 8005218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	e025      	b.n	800526e <USB_EPStartXfer+0x29a>
 8005222:	463b      	mov	r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d120      	bne.n	800526e <USB_EPStartXfer+0x29a>
 800522c:	1d3b      	adds	r3, r7, #4
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005234:	b29b      	uxth	r3, r3
 8005236:	4619      	mov	r1, r3
 8005238:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800523c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	440a      	add	r2, r1
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	463b      	mov	r3, r7
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	011a      	lsls	r2, r3, #4
 800524e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4413      	add	r3, r2
 8005256:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800525a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005264:	b29a      	uxth	r2, r3
 8005266:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800526e:	463b      	mov	r3, r7
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	895b      	ldrh	r3, [r3, #10]
 8005274:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005278:	463b      	mov	r3, r7
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6959      	ldr	r1, [r3, #20]
 800527e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005282:	b29b      	uxth	r3, r3
 8005284:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005288:	1d38      	adds	r0, r7, #4
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	f001 fad7 	bl	800683e <USB_WritePMA>
            ep->xfer_buff += len;
 8005290:	463b      	mov	r3, r7
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800529a:	441a      	add	r2, r3
 800529c:	463b      	mov	r3, r7
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052a2:	463b      	mov	r3, r7
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	463b      	mov	r3, r7
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d909      	bls.n	80052c6 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80052b2:	463b      	mov	r3, r7
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6a1a      	ldr	r2, [r3, #32]
 80052b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052bc:	1ad2      	subs	r2, r2, r3
 80052be:	463b      	mov	r3, r7
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	621a      	str	r2, [r3, #32]
 80052c4:	e008      	b.n	80052d8 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80052c6:	463b      	mov	r3, r7
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2200      	movs	r2, #0
 80052d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052d8:	463b      	mov	r3, r7
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d17a      	bne.n	80053d8 <USB_EPStartXfer+0x404>
 80052e2:	f107 0318 	add.w	r3, r7, #24
 80052e6:	1d3a      	adds	r2, r7, #4
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	1d3b      	adds	r3, r7, #4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	4619      	mov	r1, r3
 80052f8:	f107 0318 	add.w	r3, r7, #24
 80052fc:	f107 0218 	add.w	r2, r7, #24
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	440a      	add	r2, r1
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	463b      	mov	r3, r7
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	011a      	lsls	r2, r3, #4
 800530e:	f107 0318 	add.w	r3, r7, #24
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4413      	add	r3, r2
 8005316:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800531a:	f107 0314 	add.w	r3, r7, #20
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d11a      	bne.n	800535e <USB_EPStartXfer+0x38a>
 8005328:	f107 0314 	add.w	r3, r7, #20
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005336:	b29a      	uxth	r2, r3
 8005338:	f107 0314 	add.w	r3, r7, #20
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	f107 0314 	add.w	r3, r7, #20
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005352:	b29a      	uxth	r2, r3
 8005354:	f107 0314 	add.w	r3, r7, #20
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	801a      	strh	r2, [r3, #0]
 800535c:	e067      	b.n	800542e <USB_EPStartXfer+0x45a>
 800535e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005362:	2b3e      	cmp	r3, #62	; 0x3e
 8005364:	d819      	bhi.n	800539a <USB_EPStartXfer+0x3c6>
 8005366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <USB_EPStartXfer+0x3b2>
 800537c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005380:	3301      	adds	r3, #1
 8005382:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005386:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800538a:	b29b      	uxth	r3, r3
 800538c:	029b      	lsls	r3, r3, #10
 800538e:	b29a      	uxth	r2, r3
 8005390:	f107 0314 	add.w	r3, r7, #20
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	e049      	b.n	800542e <USB_EPStartXfer+0x45a>
 800539a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80053a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <USB_EPStartXfer+0x3e6>
 80053b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80053b4:	3b01      	subs	r3, #1
 80053b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80053ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80053be:	b29b      	uxth	r3, r3
 80053c0:	029b      	lsls	r3, r3, #10
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	f107 0314 	add.w	r3, r7, #20
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	e02a      	b.n	800542e <USB_EPStartXfer+0x45a>
 80053d8:	463b      	mov	r3, r7
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d125      	bne.n	800542e <USB_EPStartXfer+0x45a>
 80053e2:	f107 0320 	add.w	r3, r7, #32
 80053e6:	1d3a      	adds	r2, r7, #4
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	1d3b      	adds	r3, r7, #4
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	4619      	mov	r1, r3
 80053f8:	f107 0320 	add.w	r3, r7, #32
 80053fc:	f107 0220 	add.w	r2, r7, #32
 8005400:	6812      	ldr	r2, [r2, #0]
 8005402:	440a      	add	r2, r1
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	463b      	mov	r3, r7
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	011a      	lsls	r2, r3, #4
 800540e:	f107 0320 	add.w	r3, r7, #32
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4413      	add	r3, r2
 8005416:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800541a:	f107 031c 	add.w	r3, r7, #28
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005424:	b29a      	uxth	r2, r3
 8005426:	f107 031c 	add.w	r3, r7, #28
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800542e:	463b      	mov	r3, r7
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	891b      	ldrh	r3, [r3, #8]
 8005434:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005438:	463b      	mov	r3, r7
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6959      	ldr	r1, [r3, #20]
 800543e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005442:	b29b      	uxth	r3, r3
 8005444:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005448:	1d38      	adds	r0, r7, #4
 800544a:	6800      	ldr	r0, [r0, #0]
 800544c:	f001 f9f7 	bl	800683e <USB_WritePMA>
 8005450:	f000 bcc6 	b.w	8005de0 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005454:	463b      	mov	r3, r7
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d164      	bne.n	8005528 <USB_EPStartXfer+0x554>
 800545e:	1d3b      	adds	r3, r7, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	64bb      	str	r3, [r7, #72]	; 0x48
 8005464:	1d3b      	adds	r3, r7, #4
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546c:	b29b      	uxth	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005472:	4413      	add	r3, r2
 8005474:	64bb      	str	r3, [r7, #72]	; 0x48
 8005476:	463b      	mov	r3, r7
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	011a      	lsls	r2, r3, #4
 800547e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005480:	4413      	add	r3, r2
 8005482:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005486:	647b      	str	r3, [r7, #68]	; 0x44
 8005488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d112      	bne.n	80054b6 <USB_EPStartXfer+0x4e2>
 8005490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800549a:	b29a      	uxth	r2, r3
 800549c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800549e:	801a      	strh	r2, [r3, #0]
 80054a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	e057      	b.n	8005566 <USB_EPStartXfer+0x592>
 80054b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ba:	2b3e      	cmp	r3, #62	; 0x3e
 80054bc:	d817      	bhi.n	80054ee <USB_EPStartXfer+0x51a>
 80054be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c2:	085b      	lsrs	r3, r3, #1
 80054c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d004      	beq.n	80054de <USB_EPStartXfer+0x50a>
 80054d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80054d8:	3301      	adds	r3, #1
 80054da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	029b      	lsls	r3, r3, #10
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ea:	801a      	strh	r2, [r3, #0]
 80054ec:	e03b      	b.n	8005566 <USB_EPStartXfer+0x592>
 80054ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fc:	f003 031f 	and.w	r3, r3, #31
 8005500:	2b00      	cmp	r3, #0
 8005502:	d104      	bne.n	800550e <USB_EPStartXfer+0x53a>
 8005504:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005508:	3b01      	subs	r3, #1
 800550a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800550e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005512:	b29b      	uxth	r3, r3
 8005514:	029b      	lsls	r3, r3, #10
 8005516:	b29b      	uxth	r3, r3
 8005518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800551c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005520:	b29a      	uxth	r2, r3
 8005522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005524:	801a      	strh	r2, [r3, #0]
 8005526:	e01e      	b.n	8005566 <USB_EPStartXfer+0x592>
 8005528:	463b      	mov	r3, r7
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d119      	bne.n	8005566 <USB_EPStartXfer+0x592>
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	653b      	str	r3, [r7, #80]	; 0x50
 8005538:	1d3b      	adds	r3, r7, #4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005540:	b29b      	uxth	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005546:	4413      	add	r3, r2
 8005548:	653b      	str	r3, [r7, #80]	; 0x50
 800554a:	463b      	mov	r3, r7
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	011a      	lsls	r2, r3, #4
 8005552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005554:	4413      	add	r3, r2
 8005556:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800555a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800555c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005560:	b29a      	uxth	r2, r3
 8005562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005564:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005566:	463b      	mov	r3, r7
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	891b      	ldrh	r3, [r3, #8]
 800556c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005570:	463b      	mov	r3, r7
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6959      	ldr	r1, [r3, #20]
 8005576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800557a:	b29b      	uxth	r3, r3
 800557c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005580:	1d38      	adds	r0, r7, #4
 8005582:	6800      	ldr	r0, [r0, #0]
 8005584:	f001 f95b 	bl	800683e <USB_WritePMA>
            ep->xfer_buff += len;
 8005588:	463b      	mov	r3, r7
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005592:	441a      	add	r2, r3
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800559a:	463b      	mov	r3, r7
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6a1a      	ldr	r2, [r3, #32]
 80055a0:	463b      	mov	r3, r7
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d909      	bls.n	80055be <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80055aa:	463b      	mov	r3, r7
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a1a      	ldr	r2, [r3, #32]
 80055b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b4:	1ad2      	subs	r2, r2, r3
 80055b6:	463b      	mov	r3, r7
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	621a      	str	r2, [r3, #32]
 80055bc:	e008      	b.n	80055d0 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80055be:	463b      	mov	r3, r7
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80055c8:	463b      	mov	r3, r7
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2200      	movs	r2, #0
 80055ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	643b      	str	r3, [r7, #64]	; 0x40
 80055d6:	463b      	mov	r3, r7
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d164      	bne.n	80056aa <USB_EPStartXfer+0x6d6>
 80055e0:	1d3b      	adds	r3, r7, #4
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80055e6:	1d3b      	adds	r3, r7, #4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	4413      	add	r3, r2
 80055f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80055f8:	463b      	mov	r3, r7
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	011a      	lsls	r2, r3, #4
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	4413      	add	r3, r2
 8005604:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005608:	637b      	str	r3, [r7, #52]	; 0x34
 800560a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d112      	bne.n	8005638 <USB_EPStartXfer+0x664>
 8005612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800561c:	b29a      	uxth	r2, r3
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	b29b      	uxth	r3, r3
 8005628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005630:	b29a      	uxth	r2, r3
 8005632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	e054      	b.n	80056e2 <USB_EPStartXfer+0x70e>
 8005638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563c:	2b3e      	cmp	r3, #62	; 0x3e
 800563e:	d817      	bhi.n	8005670 <USB_EPStartXfer+0x69c>
 8005640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005644:	085b      	lsrs	r3, r3, #1
 8005646:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800564a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <USB_EPStartXfer+0x68c>
 8005656:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800565a:	3301      	adds	r3, #1
 800565c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005660:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005664:	b29b      	uxth	r3, r3
 8005666:	029b      	lsls	r3, r3, #10
 8005668:	b29a      	uxth	r2, r3
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	e038      	b.n	80056e2 <USB_EPStartXfer+0x70e>
 8005670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800567a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	2b00      	cmp	r3, #0
 8005684:	d104      	bne.n	8005690 <USB_EPStartXfer+0x6bc>
 8005686:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800568a:	3b01      	subs	r3, #1
 800568c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005690:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005694:	b29b      	uxth	r3, r3
 8005696:	029b      	lsls	r3, r3, #10
 8005698:	b29b      	uxth	r3, r3
 800569a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	e01b      	b.n	80056e2 <USB_EPStartXfer+0x70e>
 80056aa:	463b      	mov	r3, r7
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	785b      	ldrb	r3, [r3, #1]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d116      	bne.n	80056e2 <USB_EPStartXfer+0x70e>
 80056b4:	1d3b      	adds	r3, r7, #4
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056bc:	b29b      	uxth	r3, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c2:	4413      	add	r3, r2
 80056c4:	643b      	str	r3, [r7, #64]	; 0x40
 80056c6:	463b      	mov	r3, r7
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	011a      	lsls	r2, r3, #4
 80056ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d0:	4413      	add	r3, r2
 80056d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056dc:	b29a      	uxth	r2, r3
 80056de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056e2:	463b      	mov	r3, r7
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	895b      	ldrh	r3, [r3, #10]
 80056e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056ec:	463b      	mov	r3, r7
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6959      	ldr	r1, [r3, #20]
 80056f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056fc:	1d38      	adds	r0, r7, #4
 80056fe:	6800      	ldr	r0, [r0, #0]
 8005700:	f001 f89d 	bl	800683e <USB_WritePMA>
 8005704:	e36c      	b.n	8005de0 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005706:	463b      	mov	r3, r7
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005710:	1d3b      	adds	r3, r7, #4
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	463b      	mov	r3, r7
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800572e:	1d3b      	adds	r3, r7, #4
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	463b      	mov	r3, r7
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	441a      	add	r2, r3
 800573c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800574c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005750:	b29b      	uxth	r3, r3
 8005752:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005754:	1d3b      	adds	r3, r7, #4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	65fb      	str	r3, [r7, #92]	; 0x5c
 800575a:	1d3b      	adds	r3, r7, #4
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005762:	b29b      	uxth	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005768:	4413      	add	r3, r2
 800576a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800576c:	463b      	mov	r3, r7
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	011a      	lsls	r2, r3, #4
 8005774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005776:	4413      	add	r3, r2
 8005778:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800577c:	65bb      	str	r3, [r7, #88]	; 0x58
 800577e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005782:	b29a      	uxth	r2, r3
 8005784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005786:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005788:	463b      	mov	r3, r7
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	891b      	ldrh	r3, [r3, #8]
 800578e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005792:	463b      	mov	r3, r7
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6959      	ldr	r1, [r3, #20]
 8005798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579c:	b29b      	uxth	r3, r3
 800579e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057a2:	1d38      	adds	r0, r7, #4
 80057a4:	6800      	ldr	r0, [r0, #0]
 80057a6:	f001 f84a 	bl	800683e <USB_WritePMA>
 80057aa:	e319      	b.n	8005de0 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80057ac:	1d3b      	adds	r3, r7, #4
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	463b      	mov	r3, r7
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80057ca:	1d3b      	adds	r3, r7, #4
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	441a      	add	r2, r3
 80057d8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80057dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80057f0:	463b      	mov	r3, r7
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6a1a      	ldr	r2, [r3, #32]
 80057f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057fa:	1ad2      	subs	r2, r2, r3
 80057fc:	463b      	mov	r3, r7
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005802:	1d3b      	adds	r3, r7, #4
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	463b      	mov	r3, r7
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8162 	beq.w	8005ae2 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800581e:	1d3b      	adds	r3, r7, #4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005826:	463b      	mov	r3, r7
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d164      	bne.n	80058fa <USB_EPStartXfer+0x926>
 8005830:	1d3b      	adds	r3, r7, #4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	67bb      	str	r3, [r7, #120]	; 0x78
 8005836:	1d3b      	adds	r3, r7, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583e:	b29b      	uxth	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005844:	4413      	add	r3, r2
 8005846:	67bb      	str	r3, [r7, #120]	; 0x78
 8005848:	463b      	mov	r3, r7
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	011a      	lsls	r2, r3, #4
 8005850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005852:	4413      	add	r3, r2
 8005854:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005858:	677b      	str	r3, [r7, #116]	; 0x74
 800585a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d112      	bne.n	8005888 <USB_EPStartXfer+0x8b4>
 8005862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800586c:	b29a      	uxth	r2, r3
 800586e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005880:	b29a      	uxth	r2, r3
 8005882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	e057      	b.n	8005938 <USB_EPStartXfer+0x964>
 8005888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800588c:	2b3e      	cmp	r3, #62	; 0x3e
 800588e:	d817      	bhi.n	80058c0 <USB_EPStartXfer+0x8ec>
 8005890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800589a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <USB_EPStartXfer+0x8dc>
 80058a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058aa:	3301      	adds	r3, #1
 80058ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	029b      	lsls	r3, r3, #10
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e03b      	b.n	8005938 <USB_EPStartXfer+0x964>
 80058c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d104      	bne.n	80058e0 <USB_EPStartXfer+0x90c>
 80058d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058da:	3b01      	subs	r3, #1
 80058dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	029b      	lsls	r3, r3, #10
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f6:	801a      	strh	r2, [r3, #0]
 80058f8:	e01e      	b.n	8005938 <USB_EPStartXfer+0x964>
 80058fa:	463b      	mov	r3, r7
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d119      	bne.n	8005938 <USB_EPStartXfer+0x964>
 8005904:	1d3b      	adds	r3, r7, #4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590c:	b29b      	uxth	r3, r3
 800590e:	461a      	mov	r2, r3
 8005910:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005914:	4413      	add	r3, r2
 8005916:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800591a:	463b      	mov	r3, r7
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	011a      	lsls	r2, r3, #4
 8005922:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005926:	4413      	add	r3, r2
 8005928:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800592c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800592e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005932:	b29a      	uxth	r2, r3
 8005934:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005936:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005938:	463b      	mov	r3, r7
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	895b      	ldrh	r3, [r3, #10]
 800593e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005942:	463b      	mov	r3, r7
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6959      	ldr	r1, [r3, #20]
 8005948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594c:	b29b      	uxth	r3, r3
 800594e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005952:	1d38      	adds	r0, r7, #4
 8005954:	6800      	ldr	r0, [r0, #0]
 8005956:	f000 ff72 	bl	800683e <USB_WritePMA>
          ep->xfer_buff += len;
 800595a:	463b      	mov	r3, r7
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005964:	441a      	add	r2, r3
 8005966:	463b      	mov	r3, r7
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800596c:	463b      	mov	r3, r7
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6a1a      	ldr	r2, [r3, #32]
 8005972:	463b      	mov	r3, r7
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	429a      	cmp	r2, r3
 800597a:	d909      	bls.n	8005990 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800597c:	463b      	mov	r3, r7
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6a1a      	ldr	r2, [r3, #32]
 8005982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005986:	1ad2      	subs	r2, r2, r3
 8005988:	463b      	mov	r3, r7
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	621a      	str	r2, [r3, #32]
 800598e:	e008      	b.n	80059a2 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005990:	463b      	mov	r3, r7
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800599a:	463b      	mov	r3, r7
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2200      	movs	r2, #0
 80059a0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80059a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 821a 	beq.w	8005de0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059ac:	463b      	mov	r3, r7
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d164      	bne.n	8005a80 <USB_EPStartXfer+0xaac>
 80059b6:	1d3b      	adds	r3, r7, #4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80059bc:	1d3b      	adds	r3, r7, #4
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059ca:	4413      	add	r3, r2
 80059cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80059ce:	463b      	mov	r3, r7
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	011a      	lsls	r2, r3, #4
 80059d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059d8:	4413      	add	r3, r2
 80059da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059de:	667b      	str	r3, [r7, #100]	; 0x64
 80059e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d112      	bne.n	8005a0e <USB_EPStartXfer+0xa3a>
 80059e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059f6:	801a      	strh	r2, [r3, #0]
 80059f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	e057      	b.n	8005abe <USB_EPStartXfer+0xaea>
 8005a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a12:	2b3e      	cmp	r3, #62	; 0x3e
 8005a14:	d817      	bhi.n	8005a46 <USB_EPStartXfer+0xa72>
 8005a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <USB_EPStartXfer+0xa62>
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a30:	3301      	adds	r3, #1
 8005a32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	029b      	lsls	r3, r3, #10
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	e03b      	b.n	8005abe <USB_EPStartXfer+0xaea>
 8005a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <USB_EPStartXfer+0xa92>
 8005a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a60:	3b01      	subs	r3, #1
 8005a62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	029b      	lsls	r3, r3, #10
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7c:	801a      	strh	r2, [r3, #0]
 8005a7e:	e01e      	b.n	8005abe <USB_EPStartXfer+0xaea>
 8005a80:	463b      	mov	r3, r7
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d119      	bne.n	8005abe <USB_EPStartXfer+0xaea>
 8005a8a:	1d3b      	adds	r3, r7, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a90:	1d3b      	adds	r3, r7, #4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a9e:	4413      	add	r3, r2
 8005aa0:	673b      	str	r3, [r7, #112]	; 0x70
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	011a      	lsls	r2, r3, #4
 8005aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005aac:	4413      	add	r3, r2
 8005aae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005abc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005abe:	463b      	mov	r3, r7
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	891b      	ldrh	r3, [r3, #8]
 8005ac4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ac8:	463b      	mov	r3, r7
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6959      	ldr	r1, [r3, #20]
 8005ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ad8:	1d38      	adds	r0, r7, #4
 8005ada:	6800      	ldr	r0, [r0, #0]
 8005adc:	f000 feaf 	bl	800683e <USB_WritePMA>
 8005ae0:	e17e      	b.n	8005de0 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d16f      	bne.n	8005bcc <USB_EPStartXfer+0xbf8>
 8005aec:	1d3b      	adds	r3, r7, #4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005af4:	1d3b      	adds	r3, r7, #4
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b04:	4413      	add	r3, r2
 8005b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b0a:	463b      	mov	r3, r7
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	011a      	lsls	r2, r3, #4
 8005b12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b16:	4413      	add	r3, r2
 8005b18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d116      	bne.n	8005b56 <USB_EPStartXfer+0xb82>
 8005b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b3a:	801a      	strh	r2, [r3, #0]
 8005b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	e05f      	b.n	8005c16 <USB_EPStartXfer+0xc42>
 8005b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b5c:	d818      	bhi.n	8005b90 <USB_EPStartXfer+0xbbc>
 8005b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d004      	beq.n	8005b7e <USB_EPStartXfer+0xbaa>
 8005b74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b78:	3301      	adds	r3, #1
 8005b7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	029b      	lsls	r3, r3, #10
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b8c:	801a      	strh	r2, [r3, #0]
 8005b8e:	e042      	b.n	8005c16 <USB_EPStartXfer+0xc42>
 8005b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9e:	f003 031f 	and.w	r3, r3, #31
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <USB_EPStartXfer+0xbdc>
 8005ba6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005baa:	3b01      	subs	r3, #1
 8005bac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005bb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	029b      	lsls	r3, r3, #10
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bc8:	801a      	strh	r2, [r3, #0]
 8005bca:	e024      	b.n	8005c16 <USB_EPStartXfer+0xc42>
 8005bcc:	463b      	mov	r3, r7
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d11f      	bne.n	8005c16 <USB_EPStartXfer+0xc42>
 8005bd6:	1d3b      	adds	r3, r7, #4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005bde:	1d3b      	adds	r3, r7, #4
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005bee:	4413      	add	r3, r2
 8005bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	011a      	lsls	r2, r3, #4
 8005bfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c00:	4413      	add	r3, r2
 8005c02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c16:	463b      	mov	r3, r7
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	891b      	ldrh	r3, [r3, #8]
 8005c1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c20:	463b      	mov	r3, r7
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6959      	ldr	r1, [r3, #20]
 8005c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c30:	1d38      	adds	r0, r7, #4
 8005c32:	6800      	ldr	r0, [r0, #0]
 8005c34:	f000 fe03 	bl	800683e <USB_WritePMA>
          ep->xfer_buff += len;
 8005c38:	463b      	mov	r3, r7
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c42:	441a      	add	r2, r3
 8005c44:	463b      	mov	r3, r7
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6a1a      	ldr	r2, [r3, #32]
 8005c50:	463b      	mov	r3, r7
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d909      	bls.n	8005c6e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005c5a:	463b      	mov	r3, r7
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6a1a      	ldr	r2, [r3, #32]
 8005c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c64:	1ad2      	subs	r2, r2, r3
 8005c66:	463b      	mov	r3, r7
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	621a      	str	r2, [r3, #32]
 8005c6c:	e008      	b.n	8005c80 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005c6e:	463b      	mov	r3, r7
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005c78:	463b      	mov	r3, r7
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 80ab 	beq.w	8005de0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c8a:	1d3b      	adds	r3, r7, #4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c92:	463b      	mov	r3, r7
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	785b      	ldrb	r3, [r3, #1]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d16f      	bne.n	8005d7c <USB_EPStartXfer+0xda8>
 8005c9c:	1d3b      	adds	r3, r7, #4
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ca4:	1d3b      	adds	r3, r7, #4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cba:	463b      	mov	r3, r7
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	011a      	lsls	r2, r3, #4
 8005cc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d116      	bne.n	8005d06 <USB_EPStartXfer+0xd32>
 8005cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d02:	801a      	strh	r2, [r3, #0]
 8005d04:	e05b      	b.n	8005dbe <USB_EPStartXfer+0xdea>
 8005d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0a:	2b3e      	cmp	r3, #62	; 0x3e
 8005d0c:	d818      	bhi.n	8005d40 <USB_EPStartXfer+0xd6c>
 8005d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d12:	085b      	lsrs	r3, r3, #1
 8005d14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <USB_EPStartXfer+0xd5a>
 8005d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d28:	3301      	adds	r3, #1
 8005d2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	029b      	lsls	r3, r3, #10
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	e03e      	b.n	8005dbe <USB_EPStartXfer+0xdea>
 8005d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4e:	f003 031f 	and.w	r3, r3, #31
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d104      	bne.n	8005d60 <USB_EPStartXfer+0xd8c>
 8005d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	029b      	lsls	r3, r3, #10
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	e020      	b.n	8005dbe <USB_EPStartXfer+0xdea>
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d11b      	bne.n	8005dbe <USB_EPStartXfer+0xdea>
 8005d86:	1d3b      	adds	r3, r7, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d96:	4413      	add	r3, r2
 8005d98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	011a      	lsls	r2, r3, #4
 8005da4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005da8:	4413      	add	r3, r2
 8005daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005dbe:	463b      	mov	r3, r7
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	895b      	ldrh	r3, [r3, #10]
 8005dc4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dc8:	463b      	mov	r3, r7
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6959      	ldr	r1, [r3, #20]
 8005dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005dd8:	1d38      	adds	r0, r7, #4
 8005dda:	6800      	ldr	r0, [r0, #0]
 8005ddc:	f000 fd2f 	bl	800683e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005de0:	1d3b      	adds	r3, r7, #4
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	463b      	mov	r3, r7
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f107 020a 	add.w	r2, r7, #10
 8005df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dfe:	8013      	strh	r3, [r2, #0]
 8005e00:	f107 030a 	add.w	r3, r7, #10
 8005e04:	f107 020a 	add.w	r2, r7, #10
 8005e08:	8812      	ldrh	r2, [r2, #0]
 8005e0a:	f082 0210 	eor.w	r2, r2, #16
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	f107 030a 	add.w	r3, r7, #10
 8005e14:	f107 020a 	add.w	r2, r7, #10
 8005e18:	8812      	ldrh	r2, [r2, #0]
 8005e1a:	f082 0220 	eor.w	r2, r2, #32
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	463b      	mov	r3, r7
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	441a      	add	r2, r3
 8005e2e:	f107 030a 	add.w	r3, r7, #10
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	8013      	strh	r3, [r2, #0]
 8005e48:	e3b5      	b.n	80065b6 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e4a:	463b      	mov	r3, r7
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	7b1b      	ldrb	r3, [r3, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f040 8090 	bne.w	8005f76 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e56:	463b      	mov	r3, r7
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d90e      	bls.n	8005e84 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005e66:	463b      	mov	r3, r7
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005e70:	463b      	mov	r3, r7
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7a:	1ad2      	subs	r2, r2, r3
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	619a      	str	r2, [r3, #24]
 8005e82:	e008      	b.n	8005e96 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005e84:	463b      	mov	r3, r7
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005e8e:	463b      	mov	r3, r7
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2200      	movs	r2, #0
 8005e94:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e96:	1d3b      	adds	r3, r7, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005eae:	4413      	add	r3, r2
 8005eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005eb4:	463b      	mov	r3, r7
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	011a      	lsls	r2, r3, #4
 8005ebc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d116      	bne.n	8005f00 <USB_EPStartXfer+0xf2c>
 8005ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005efc:	801a      	strh	r2, [r3, #0]
 8005efe:	e32c      	b.n	800655a <USB_EPStartXfer+0x1586>
 8005f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f04:	2b3e      	cmp	r3, #62	; 0x3e
 8005f06:	d818      	bhi.n	8005f3a <USB_EPStartXfer+0xf66>
 8005f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0c:	085b      	lsrs	r3, r3, #1
 8005f0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <USB_EPStartXfer+0xf54>
 8005f1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f22:	3301      	adds	r3, #1
 8005f24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	029b      	lsls	r3, r3, #10
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f36:	801a      	strh	r2, [r3, #0]
 8005f38:	e30f      	b.n	800655a <USB_EPStartXfer+0x1586>
 8005f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d104      	bne.n	8005f5a <USB_EPStartXfer+0xf86>
 8005f50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f54:	3b01      	subs	r3, #1
 8005f56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	029b      	lsls	r3, r3, #10
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	e2f1      	b.n	800655a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005f76:	463b      	mov	r3, r7
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	78db      	ldrb	r3, [r3, #3]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	f040 818f 	bne.w	80062a0 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f82:	463b      	mov	r3, r7
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d175      	bne.n	8006078 <USB_EPStartXfer+0x10a4>
 8005f8c:	1d3b      	adds	r3, r7, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f94:	1d3b      	adds	r3, r7, #4
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005faa:	463b      	mov	r3, r7
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	011a      	lsls	r2, r3, #4
 8005fb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d116      	bne.n	8005ff8 <USB_EPStartXfer+0x1024>
 8005fca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	e065      	b.n	80060c4 <USB_EPStartXfer+0x10f0>
 8005ff8:	463b      	mov	r3, r7
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b3e      	cmp	r3, #62	; 0x3e
 8006000:	d81a      	bhi.n	8006038 <USB_EPStartXfer+0x1064>
 8006002:	463b      	mov	r3, r7
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800600e:	463b      	mov	r3, r7
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d004      	beq.n	8006026 <USB_EPStartXfer+0x1052>
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006020:	3301      	adds	r3, #1
 8006022:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602a:	b29b      	uxth	r3, r3
 800602c:	029b      	lsls	r3, r3, #10
 800602e:	b29a      	uxth	r2, r3
 8006030:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006034:	801a      	strh	r2, [r3, #0]
 8006036:	e045      	b.n	80060c4 <USB_EPStartXfer+0x10f0>
 8006038:	463b      	mov	r3, r7
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006044:	463b      	mov	r3, r7
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	2b00      	cmp	r3, #0
 8006050:	d104      	bne.n	800605c <USB_EPStartXfer+0x1088>
 8006052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006056:	3b01      	subs	r3, #1
 8006058:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800605c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006060:	b29b      	uxth	r3, r3
 8006062:	029b      	lsls	r3, r3, #10
 8006064:	b29b      	uxth	r3, r3
 8006066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606e:	b29a      	uxth	r2, r3
 8006070:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	e025      	b.n	80060c4 <USB_EPStartXfer+0x10f0>
 8006078:	463b      	mov	r3, r7
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d120      	bne.n	80060c4 <USB_EPStartXfer+0x10f0>
 8006082:	1d3b      	adds	r3, r7, #4
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800608a:	1d3b      	adds	r3, r7, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006092:	b29b      	uxth	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800609a:	4413      	add	r3, r2
 800609c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80060a0:	463b      	mov	r3, r7
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	011a      	lsls	r2, r3, #4
 80060a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060ac:	4413      	add	r3, r2
 80060ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060b6:	463b      	mov	r3, r7
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	b29a      	uxth	r2, r3
 80060be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060c2:	801a      	strh	r2, [r3, #0]
 80060c4:	1d3b      	adds	r3, r7, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060cc:	463b      	mov	r3, r7
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d175      	bne.n	80061c2 <USB_EPStartXfer+0x11ee>
 80060d6:	1d3b      	adds	r3, r7, #4
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060de:	1d3b      	adds	r3, r7, #4
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060ee:	4413      	add	r3, r2
 80060f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060f4:	463b      	mov	r3, r7
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	011a      	lsls	r2, r3, #4
 80060fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006100:	4413      	add	r3, r2
 8006102:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006106:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800610a:	463b      	mov	r3, r7
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d116      	bne.n	8006142 <USB_EPStartXfer+0x116e>
 8006114:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006120:	b29a      	uxth	r2, r3
 8006122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006138:	b29a      	uxth	r2, r3
 800613a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	e061      	b.n	8006206 <USB_EPStartXfer+0x1232>
 8006142:	463b      	mov	r3, r7
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b3e      	cmp	r3, #62	; 0x3e
 800614a:	d81a      	bhi.n	8006182 <USB_EPStartXfer+0x11ae>
 800614c:	463b      	mov	r3, r7
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006158:	463b      	mov	r3, r7
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d004      	beq.n	8006170 <USB_EPStartXfer+0x119c>
 8006166:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800616a:	3301      	adds	r3, #1
 800616c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006170:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006174:	b29b      	uxth	r3, r3
 8006176:	029b      	lsls	r3, r3, #10
 8006178:	b29a      	uxth	r2, r3
 800617a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e041      	b.n	8006206 <USB_EPStartXfer+0x1232>
 8006182:	463b      	mov	r3, r7
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800618e:	463b      	mov	r3, r7
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 031f 	and.w	r3, r3, #31
 8006198:	2b00      	cmp	r3, #0
 800619a:	d104      	bne.n	80061a6 <USB_EPStartXfer+0x11d2>
 800619c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061a0:	3b01      	subs	r3, #1
 80061a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	029b      	lsls	r3, r3, #10
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e021      	b.n	8006206 <USB_EPStartXfer+0x1232>
 80061c2:	463b      	mov	r3, r7
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d11c      	bne.n	8006206 <USB_EPStartXfer+0x1232>
 80061cc:	1d3b      	adds	r3, r7, #4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061dc:	4413      	add	r3, r2
 80061de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061e2:	463b      	mov	r3, r7
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	011a      	lsls	r2, r3, #4
 80061ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061ee:	4413      	add	r3, r2
 80061f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061f8:	463b      	mov	r3, r7
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	b29a      	uxth	r2, r3
 8006200:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006204:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006206:	463b      	mov	r3, r7
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 81a4 	beq.w	800655a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006212:	1d3b      	adds	r3, r7, #4
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	463b      	mov	r3, r7
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006226:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800622a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d005      	beq.n	800623e <USB_EPStartXfer+0x126a>
 8006232:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10d      	bne.n	800625a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800623e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006246:	2b00      	cmp	r3, #0
 8006248:	f040 8187 	bne.w	800655a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800624c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	f040 8180 	bne.w	800655a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800625a:	1d3b      	adds	r3, r7, #4
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	463b      	mov	r3, r7
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006274:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006278:	1d3b      	adds	r3, r7, #4
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	463b      	mov	r3, r7
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	441a      	add	r2, r3
 8006286:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800628a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006296:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800629a:	b29b      	uxth	r3, r3
 800629c:	8013      	strh	r3, [r2, #0]
 800629e:	e15c      	b.n	800655a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80062a0:	463b      	mov	r3, r7
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	78db      	ldrb	r3, [r3, #3]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	f040 8155 	bne.w	8006556 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80062ac:	463b      	mov	r3, r7
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	463b      	mov	r3, r7
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d90e      	bls.n	80062da <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80062bc:	463b      	mov	r3, r7
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80062c6:	463b      	mov	r3, r7
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	699a      	ldr	r2, [r3, #24]
 80062cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d0:	1ad2      	subs	r2, r2, r3
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	619a      	str	r2, [r3, #24]
 80062d8:	e008      	b.n	80062ec <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80062da:	463b      	mov	r3, r7
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80062e4:	463b      	mov	r3, r7
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2200      	movs	r2, #0
 80062ea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80062ec:	463b      	mov	r3, r7
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	785b      	ldrb	r3, [r3, #1]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d16f      	bne.n	80063d6 <USB_EPStartXfer+0x1402>
 80062f6:	1d3b      	adds	r3, r7, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062fe:	1d3b      	adds	r3, r7, #4
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006306:	b29b      	uxth	r3, r3
 8006308:	461a      	mov	r2, r3
 800630a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800630e:	4413      	add	r3, r2
 8006310:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006314:	463b      	mov	r3, r7
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	011a      	lsls	r2, r3, #4
 800631c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006320:	4413      	add	r3, r2
 8006322:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006326:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800632a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d116      	bne.n	8006360 <USB_EPStartXfer+0x138c>
 8006332:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006336:	881b      	ldrh	r3, [r3, #0]
 8006338:	b29b      	uxth	r3, r3
 800633a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800633e:	b29a      	uxth	r2, r3
 8006340:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006344:	801a      	strh	r2, [r3, #0]
 8006346:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006356:	b29a      	uxth	r2, r3
 8006358:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	e05f      	b.n	8006420 <USB_EPStartXfer+0x144c>
 8006360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006364:	2b3e      	cmp	r3, #62	; 0x3e
 8006366:	d818      	bhi.n	800639a <USB_EPStartXfer+0x13c6>
 8006368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <USB_EPStartXfer+0x13b4>
 800637e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006382:	3301      	adds	r3, #1
 8006384:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800638c:	b29b      	uxth	r3, r3
 800638e:	029b      	lsls	r3, r3, #10
 8006390:	b29a      	uxth	r2, r3
 8006392:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006396:	801a      	strh	r2, [r3, #0]
 8006398:	e042      	b.n	8006420 <USB_EPStartXfer+0x144c>
 800639a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800639e:	095b      	lsrs	r3, r3, #5
 80063a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <USB_EPStartXfer+0x13e6>
 80063b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b4:	3b01      	subs	r3, #1
 80063b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063be:	b29b      	uxth	r3, r3
 80063c0:	029b      	lsls	r3, r3, #10
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063d2:	801a      	strh	r2, [r3, #0]
 80063d4:	e024      	b.n	8006420 <USB_EPStartXfer+0x144c>
 80063d6:	463b      	mov	r3, r7
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d11f      	bne.n	8006420 <USB_EPStartXfer+0x144c>
 80063e0:	1d3b      	adds	r3, r7, #4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063e8:	1d3b      	adds	r3, r7, #4
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f8:	4413      	add	r3, r2
 80063fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	011a      	lsls	r2, r3, #4
 8006406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640a:	4413      	add	r3, r2
 800640c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006410:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006418:	b29a      	uxth	r2, r3
 800641a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	1d3b      	adds	r3, r7, #4
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006428:	463b      	mov	r3, r7
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d16f      	bne.n	8006512 <USB_EPStartXfer+0x153e>
 8006432:	1d3b      	adds	r3, r7, #4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800643a:	1d3b      	adds	r3, r7, #4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006442:	b29b      	uxth	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800644a:	4413      	add	r3, r2
 800644c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006450:	463b      	mov	r3, r7
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	011a      	lsls	r2, r3, #4
 8006458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800645c:	4413      	add	r3, r2
 800645e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d116      	bne.n	800649c <USB_EPStartXfer+0x14c8>
 800646e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800647a:	b29a      	uxth	r2, r3
 800647c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006480:	801a      	strh	r2, [r3, #0]
 8006482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29b      	uxth	r3, r3
 800648a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800648e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006492:	b29a      	uxth	r2, r3
 8006494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006498:	801a      	strh	r2, [r3, #0]
 800649a:	e05e      	b.n	800655a <USB_EPStartXfer+0x1586>
 800649c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a0:	2b3e      	cmp	r3, #62	; 0x3e
 80064a2:	d818      	bhi.n	80064d6 <USB_EPStartXfer+0x1502>
 80064a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <USB_EPStartXfer+0x14f0>
 80064ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064be:	3301      	adds	r3, #1
 80064c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	029b      	lsls	r3, r3, #10
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064d2:	801a      	strh	r2, [r3, #0]
 80064d4:	e041      	b.n	800655a <USB_EPStartXfer+0x1586>
 80064d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d104      	bne.n	80064f6 <USB_EPStartXfer+0x1522>
 80064ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064f0:	3b01      	subs	r3, #1
 80064f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	029b      	lsls	r3, r3, #10
 80064fe:	b29b      	uxth	r3, r3
 8006500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006508:	b29a      	uxth	r2, r3
 800650a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	e023      	b.n	800655a <USB_EPStartXfer+0x1586>
 8006512:	463b      	mov	r3, r7
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d11e      	bne.n	800655a <USB_EPStartXfer+0x1586>
 800651c:	1d3b      	adds	r3, r7, #4
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006524:	b29b      	uxth	r3, r3
 8006526:	461a      	mov	r2, r3
 8006528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652c:	4413      	add	r3, r2
 800652e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006532:	463b      	mov	r3, r7
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	011a      	lsls	r2, r3, #4
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653e:	4413      	add	r3, r2
 8006540:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800654c:	b29a      	uxth	r2, r3
 800654e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006552:	801a      	strh	r2, [r3, #0]
 8006554:	e001      	b.n	800655a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e02e      	b.n	80065b8 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800655a:	1d3b      	adds	r3, r7, #4
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	463b      	mov	r3, r7
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006574:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006578:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800657c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006580:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006584:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006588:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800658c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006590:	1d3b      	adds	r3, r7, #4
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	463b      	mov	r3, r7
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80065a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d020      	beq.n	8006616 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ea:	81bb      	strh	r3, [r7, #12]
 80065ec:	89bb      	ldrh	r3, [r7, #12]
 80065ee:	f083 0310 	eor.w	r3, r3, #16
 80065f2:	81bb      	strh	r3, [r7, #12]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	441a      	add	r2, r3
 80065fe:	89bb      	ldrh	r3, [r7, #12]
 8006600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800660c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006610:	b29b      	uxth	r3, r3
 8006612:	8013      	strh	r3, [r2, #0]
 8006614:	e01f      	b.n	8006656 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662c:	81fb      	strh	r3, [r7, #14]
 800662e:	89fb      	ldrh	r3, [r7, #14]
 8006630:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006634:	81fb      	strh	r3, [r7, #14]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	441a      	add	r2, r3
 8006640:	89fb      	ldrh	r3, [r7, #14]
 8006642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006652:	b29b      	uxth	r3, r3
 8006654:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr

08006662 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006662:	b480      	push	{r7}
 8006664:	b087      	sub	sp, #28
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	7b1b      	ldrb	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	f040 809d 	bne.w	80067b0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	785b      	ldrb	r3, [r3, #1]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d04c      	beq.n	8006718 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	823b      	strh	r3, [r7, #16]
 800668c:	8a3b      	ldrh	r3, [r7, #16]
 800668e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d01b      	beq.n	80066ce <USB_EPClearStall+0x6c>
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ac:	81fb      	strh	r3, [r7, #14]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	441a      	add	r2, r3
 80066b8:	89fb      	ldrh	r3, [r7, #14]
 80066ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	78db      	ldrb	r3, [r3, #3]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d06c      	beq.n	80067b0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ec:	81bb      	strh	r3, [r7, #12]
 80066ee:	89bb      	ldrh	r3, [r7, #12]
 80066f0:	f083 0320 	eor.w	r3, r3, #32
 80066f4:	81bb      	strh	r3, [r7, #12]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	441a      	add	r2, r3
 8006700:	89bb      	ldrh	r3, [r7, #12]
 8006702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006712:	b29b      	uxth	r3, r3
 8006714:	8013      	strh	r3, [r2, #0]
 8006716:	e04b      	b.n	80067b0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	82fb      	strh	r3, [r7, #22]
 8006726:	8afb      	ldrh	r3, [r7, #22]
 8006728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01b      	beq.n	8006768 <USB_EPClearStall+0x106>
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	82bb      	strh	r3, [r7, #20]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	441a      	add	r2, r3
 8006752:	8abb      	ldrh	r3, [r7, #20]
 8006754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800675c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006764:	b29b      	uxth	r3, r3
 8006766:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29b      	uxth	r3, r3
 8006776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	827b      	strh	r3, [r7, #18]
 8006780:	8a7b      	ldrh	r3, [r7, #18]
 8006782:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006786:	827b      	strh	r3, [r7, #18]
 8006788:	8a7b      	ldrh	r3, [r7, #18]
 800678a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800678e:	827b      	strh	r3, [r7, #18]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	441a      	add	r2, r3
 800679a:	8a7b      	ldrh	r3, [r7, #18]
 800679c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d103      	bne.n	80067d6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2280      	movs	r2, #128	; 0x80
 80067d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr

080067e2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	bc80      	pop	{r7}
 8006808:	4770      	bx	lr

0800680a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006818:	b29b      	uxth	r3, r3
 800681a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800681c:	68fb      	ldr	r3, [r7, #12]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr

08006828 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr

0800683e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800683e:	b480      	push	{r7}
 8006840:	b08d      	sub	sp, #52	; 0x34
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	4611      	mov	r1, r2
 800684a:	461a      	mov	r2, r3
 800684c:	460b      	mov	r3, r1
 800684e:	80fb      	strh	r3, [r7, #6]
 8006850:	4613      	mov	r3, r2
 8006852:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006854:	88bb      	ldrh	r3, [r7, #4]
 8006856:	3301      	adds	r3, #1
 8006858:	085b      	lsrs	r3, r3, #1
 800685a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006864:	88fb      	ldrh	r3, [r7, #6]
 8006866:	005a      	lsls	r2, r3, #1
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006870:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006876:	e01e      	b.n	80068b6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	3301      	adds	r3, #1
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	b29b      	uxth	r3, r3
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	b29b      	uxth	r3, r3
 800688e:	461a      	mov	r2, r3
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	4313      	orrs	r3, r2
 8006894:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	b29a      	uxth	r2, r3
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	3302      	adds	r3, #2
 80068a2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80068a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a6:	3302      	adds	r3, #2
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	3301      	adds	r3, #1
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	3b01      	subs	r3, #1
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1dd      	bne.n	8006878 <USB_WritePMA+0x3a>
  }
}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	3734      	adds	r7, #52	; 0x34
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr

080068c8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b08b      	sub	sp, #44	; 0x2c
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	4611      	mov	r1, r2
 80068d4:	461a      	mov	r2, r3
 80068d6:	460b      	mov	r3, r1
 80068d8:	80fb      	strh	r3, [r7, #6]
 80068da:	4613      	mov	r3, r2
 80068dc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80068de:	88bb      	ldrh	r3, [r7, #4]
 80068e0:	085b      	lsrs	r3, r3, #1
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068ee:	88fb      	ldrh	r3, [r7, #6]
 80068f0:	005a      	lsls	r2, r3, #1
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068fa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006900:	e01b      	b.n	800693a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	3302      	adds	r3, #2
 800690e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	b2da      	uxtb	r2, r3
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	3301      	adds	r3, #1
 800691c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	0a1b      	lsrs	r3, r3, #8
 8006922:	b2da      	uxtb	r2, r3
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	3301      	adds	r3, #1
 800692c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	3302      	adds	r3, #2
 8006932:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	3b01      	subs	r3, #1
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e0      	bne.n	8006902 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006940:	88bb      	ldrh	r3, [r7, #4]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	b29b      	uxth	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d007      	beq.n	800695c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	b29b      	uxth	r3, r3
 8006952:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	b2da      	uxtb	r2, r3
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	701a      	strb	r2, [r3, #0]
  }
}
 800695c:	bf00      	nop
 800695e:	372c      	adds	r7, #44	; 0x2c
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr

08006966 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	7c1b      	ldrb	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d115      	bne.n	80069aa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800697e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006982:	2202      	movs	r2, #2
 8006984:	2181      	movs	r1, #129	; 0x81
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 fe87 	bl	800869a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006996:	2202      	movs	r2, #2
 8006998:	2101      	movs	r1, #1
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fe7d 	bl	800869a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80069a8:	e012      	b.n	80069d0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069aa:	2340      	movs	r3, #64	; 0x40
 80069ac:	2202      	movs	r2, #2
 80069ae:	2181      	movs	r1, #129	; 0x81
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fe72 	bl	800869a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069bc:	2340      	movs	r3, #64	; 0x40
 80069be:	2202      	movs	r2, #2
 80069c0:	2101      	movs	r1, #1
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 fe69 	bl	800869a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069d0:	2308      	movs	r3, #8
 80069d2:	2203      	movs	r2, #3
 80069d4:	2182      	movs	r1, #130	; 0x82
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 fe5f 	bl	800869a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80069e2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80069e6:	f001 ff7f 	bl	80088e8 <USBD_static_malloc>
 80069ea:	4602      	mov	r2, r0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80069fc:	2301      	movs	r3, #1
 80069fe:	73fb      	strb	r3, [r7, #15]
 8006a00:	e026      	b.n	8006a50 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a08:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7c1b      	ldrb	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d109      	bne.n	8006a40 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a36:	2101      	movs	r1, #1
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 ff1f 	bl	800887c <USBD_LL_PrepareReceive>
 8006a3e:	e007      	b.n	8006a50 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a46:	2340      	movs	r3, #64	; 0x40
 8006a48:	2101      	movs	r1, #1
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 ff16 	bl	800887c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006a6a:	2181      	movs	r1, #129	; 0x81
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 fe3a 	bl	80086e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006a78:	2101      	movs	r1, #1
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 fe33 	bl	80086e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a88:	2182      	movs	r1, #130	; 0x82
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fe2b 	bl	80086e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00e      	beq.n	8006abe <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f001 ff25 	bl	8008900 <USBD_static_free>
    pdev->pClassData = NULL;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d039      	beq.n	8006b66 <USBD_CDC_Setup+0x9e>
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d17f      	bne.n	8006bf6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	88db      	ldrh	r3, [r3, #6]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d029      	beq.n	8006b52 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	b25b      	sxtb	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	da11      	bge.n	8006b2c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006b14:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	88d2      	ldrh	r2, [r2, #6]
 8006b1a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b1c:	6939      	ldr	r1, [r7, #16]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	88db      	ldrh	r3, [r3, #6]
 8006b22:	461a      	mov	r2, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 fa0a 	bl	8007f3e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006b2a:	e06b      	b.n	8006c04 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	785a      	ldrb	r2, [r3, #1]
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	88db      	ldrh	r3, [r3, #6]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b42:	6939      	ldr	r1, [r7, #16]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	88db      	ldrh	r3, [r3, #6]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 fa25 	bl	8007f9a <USBD_CtlPrepareRx>
      break;
 8006b50:	e058      	b.n	8006c04 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	7850      	ldrb	r0, [r2, #1]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	4798      	blx	r3
      break;
 8006b64:	e04e      	b.n	8006c04 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	785b      	ldrb	r3, [r3, #1]
 8006b6a:	2b0b      	cmp	r3, #11
 8006b6c:	d02e      	beq.n	8006bcc <USBD_CDC_Setup+0x104>
 8006b6e:	2b0b      	cmp	r3, #11
 8006b70:	dc38      	bgt.n	8006be4 <USBD_CDC_Setup+0x11c>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <USBD_CDC_Setup+0xb4>
 8006b76:	2b0a      	cmp	r3, #10
 8006b78:	d014      	beq.n	8006ba4 <USBD_CDC_Setup+0xdc>
 8006b7a:	e033      	b.n	8006be4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d107      	bne.n	8006b96 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b86:	f107 030c 	add.w	r3, r7, #12
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 f9d5 	bl	8007f3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b94:	e02e      	b.n	8006bf4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 f966 	bl	8007e6a <USBD_CtlError>
            ret = USBD_FAIL;
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ba2:	e027      	b.n	8006bf4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d107      	bne.n	8006bbe <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006bae:	f107 030f 	add.w	r3, r7, #15
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f001 f9c1 	bl	8007f3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bbc:	e01a      	b.n	8006bf4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 f952 	bl	8007e6a <USBD_CtlError>
            ret = USBD_FAIL;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006bca:	e013      	b.n	8006bf4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d00d      	beq.n	8006bf2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 f946 	bl	8007e6a <USBD_CtlError>
            ret = USBD_FAIL;
 8006bde:	2302      	movs	r3, #2
 8006be0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006be2:	e006      	b.n	8006bf2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 f93f 	bl	8007e6a <USBD_CtlError>
          ret = USBD_FAIL;
 8006bec:	2302      	movs	r3, #2
 8006bee:	75fb      	strb	r3, [r7, #23]
          break;
 8006bf0:	e000      	b.n	8006bf4 <USBD_CDC_Setup+0x12c>
          break;
 8006bf2:	bf00      	nop
      }
      break;
 8006bf4:	e006      	b.n	8006c04 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f936 	bl	8007e6a <USBD_CtlError>
      ret = USBD_FAIL;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	75fb      	strb	r3, [r7, #23]
      break;
 8006c02:	bf00      	nop
  }

  return ret;
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c20:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c28:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d03a      	beq.n	8006caa <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c34:	78fa      	ldrb	r2, [r7, #3]
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	440b      	add	r3, r1
 8006c42:	331c      	adds	r3, #28
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d029      	beq.n	8006c9e <USBD_CDC_DataIn+0x90>
 8006c4a:	78fa      	ldrb	r2, [r7, #3]
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	440b      	add	r3, r1
 8006c58:	331c      	adds	r3, #28
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	78f9      	ldrb	r1, [r7, #3]
 8006c5e:	68b8      	ldr	r0, [r7, #8]
 8006c60:	460b      	mov	r3, r1
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	440b      	add	r3, r1
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	4403      	add	r3, r0
 8006c6a:	3338      	adds	r3, #56	; 0x38
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c72:	fb03 f301 	mul.w	r3, r3, r1
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d110      	bne.n	8006c9e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006c7c:	78fa      	ldrb	r2, [r7, #3]
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4613      	mov	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	440b      	add	r3, r1
 8006c8a:	331c      	adds	r3, #28
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c90:	78f9      	ldrb	r1, [r7, #3]
 8006c92:	2300      	movs	r3, #0
 8006c94:	2200      	movs	r2, #0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 fdcd 	bl	8008836 <USBD_LL_Transmit>
 8006c9c:	e003      	b.n	8006ca6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e000      	b.n	8006cac <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006caa:	2302      	movs	r3, #2
  }
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fdf8 	bl	80088c2 <USBD_LL_GetRxDataSize>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00d      	beq.n	8006d00 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4798      	blx	r3

    return USBD_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	e000      	b.n	8006d02 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006d00:	2302      	movs	r3, #2
  }
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b084      	sub	sp, #16
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d18:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d015      	beq.n	8006d50 <USBD_CDC_EP0_RxReady+0x46>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d2a:	2bff      	cmp	r3, #255	; 0xff
 8006d2c:	d010      	beq.n	8006d50 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006d3c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d44:	b292      	uxth	r2, r2
 8006d46:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	22ff      	movs	r2, #255	; 0xff
 8006d4c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2243      	movs	r2, #67	; 0x43
 8006d68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006d6a:	4b03      	ldr	r3, [pc, #12]	; (8006d78 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	20000098 	.word	0x20000098

08006d7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2243      	movs	r2, #67	; 0x43
 8006d88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006d8a:	4b03      	ldr	r3, [pc, #12]	; (8006d98 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bc80      	pop	{r7}
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	20000054 	.word	0x20000054

08006d9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2243      	movs	r2, #67	; 0x43
 8006da8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006daa:	4b03      	ldr	r3, [pc, #12]	; (8006db8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	200000dc 	.word	0x200000dc

08006dbc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	220a      	movs	r2, #10
 8006dc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006dca:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000010 	.word	0x20000010

08006ddc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006de6:	2302      	movs	r3, #2
 8006de8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr

08006e08 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	4613      	mov	r3, r2
 8006e14:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e26:	88fa      	ldrh	r2, [r7, #6]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	371c      	adds	r7, #28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr

08006e3a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bc80      	pop	{r7}
 8006e5e:	4770      	bx	lr

08006e60 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d01c      	beq.n	8006eb4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d115      	bne.n	8006eb0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2181      	movs	r1, #129	; 0x81
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 fcc5 	bl	8008836 <USBD_LL_Transmit>

      return USBD_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	e002      	b.n	8006eb6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006eb4:	2302      	movs	r3, #2
  }
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d017      	beq.n	8006f08 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	7c1b      	ldrb	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d109      	bne.n	8006ef4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eea:	2101      	movs	r1, #1
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 fcc5 	bl	800887c <USBD_LL_PrepareReceive>
 8006ef2:	e007      	b.n	8006f04 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006efa:	2340      	movs	r3, #64	; 0x40
 8006efc:	2101      	movs	r1, #1
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f001 fcbc 	bl	800887c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	e000      	b.n	8006f0a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006f08:	2302      	movs	r3, #2
  }
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f26:	2302      	movs	r3, #2
 8006f28:	e01a      	b.n	8006f60 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	79fa      	ldrb	r2, [r7, #7]
 8006f56:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f001 fb29 	bl	80085b0 <USBD_LL_Init>

  return USBD_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d006      	beq.n	8006f8a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73fb      	strb	r3, [r7, #15]
 8006f88:	e001      	b.n	8006f8e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bc80      	pop	{r7}
 8006f98:	4770      	bx	lr

08006f9a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fb5e 	bl	8008664 <USBD_LL_Start>

  return USBD_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr

08006fc6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b084      	sub	sp, #16
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00c      	beq.n	8006ffa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	78fa      	ldrb	r2, [r7, #3]
 8006fea:	4611      	mov	r1, r2
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	4798      	blx	r3
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	78fa      	ldrb	r2, [r7, #3]
 800701a:	4611      	mov	r1, r2
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4798      	blx	r3

  return USBD_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fed8 	bl	8007df2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007050:	461a      	mov	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	2b02      	cmp	r3, #2
 8007064:	d016      	beq.n	8007094 <USBD_LL_SetupStage+0x6a>
 8007066:	2b02      	cmp	r3, #2
 8007068:	d81c      	bhi.n	80070a4 <USBD_LL_SetupStage+0x7a>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <USBD_LL_SetupStage+0x4a>
 800706e:	2b01      	cmp	r3, #1
 8007070:	d008      	beq.n	8007084 <USBD_LL_SetupStage+0x5a>
 8007072:	e017      	b.n	80070a4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f9cb 	bl	8007418 <USBD_StdDevReq>
      break;
 8007082:	e01a      	b.n	80070ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fa2d 	bl	80074ec <USBD_StdItfReq>
      break;
 8007092:	e012      	b.n	80070ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fa6d 	bl	800757c <USBD_StdEPReq>
      break;
 80070a2:	e00a      	b.n	80070ba <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80070aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f001 fb36 	bl	8008724 <USBD_LL_StallEP>
      break;
 80070b8:	bf00      	nop
  }

  return USBD_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	460b      	mov	r3, r1
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070d2:	7afb      	ldrb	r3, [r7, #11]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d14b      	bne.n	8007170 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80070de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d134      	bne.n	8007154 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d919      	bls.n	800712a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	1ad2      	subs	r2, r2, r3
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800710c:	429a      	cmp	r2, r3
 800710e:	d203      	bcs.n	8007118 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007114:	b29b      	uxth	r3, r3
 8007116:	e002      	b.n	800711e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800711c:	b29b      	uxth	r3, r3
 800711e:	461a      	mov	r2, r3
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 ff57 	bl	8007fd6 <USBD_CtlContinueRx>
 8007128:	e038      	b.n	800719c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800713c:	2b03      	cmp	r3, #3
 800713e:	d105      	bne.n	800714c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 ff54 	bl	8007ffa <USBD_CtlSendStatus>
 8007152:	e023      	b.n	800719c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800715a:	2b05      	cmp	r3, #5
 800715c:	d11e      	bne.n	800719c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007166:	2100      	movs	r1, #0
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f001 fadb 	bl	8008724 <USBD_LL_StallEP>
 800716e:	e015      	b.n	800719c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00d      	beq.n	8007198 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007182:	2b03      	cmp	r3, #3
 8007184:	d108      	bne.n	8007198 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	7afa      	ldrb	r2, [r7, #11]
 8007190:	4611      	mov	r1, r2
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	4798      	blx	r3
 8007196:	e001      	b.n	800719c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007198:	2302      	movs	r3, #2
 800719a:	e000      	b.n	800719e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b086      	sub	sp, #24
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	460b      	mov	r3, r1
 80071b0:	607a      	str	r2, [r7, #4]
 80071b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80071b4:	7afb      	ldrb	r3, [r7, #11]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d17f      	bne.n	80072ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3314      	adds	r3, #20
 80071be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d15c      	bne.n	8007284 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d915      	bls.n	8007202 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	1ad2      	subs	r2, r2, r3
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	461a      	mov	r2, r3
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 fec1 	bl	8007f76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071f4:	2300      	movs	r3, #0
 80071f6:	2200      	movs	r2, #0
 80071f8:	2100      	movs	r1, #0
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f001 fb3e 	bl	800887c <USBD_LL_PrepareReceive>
 8007200:	e04e      	b.n	80072a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	6912      	ldr	r2, [r2, #16]
 800720a:	fbb3 f1f2 	udiv	r1, r3, r2
 800720e:	fb02 f201 	mul.w	r2, r2, r1
 8007212:	1a9b      	subs	r3, r3, r2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d11c      	bne.n	8007252 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007220:	429a      	cmp	r2, r3
 8007222:	d316      	bcc.n	8007252 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800722e:	429a      	cmp	r2, r3
 8007230:	d20f      	bcs.n	8007252 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007232:	2200      	movs	r2, #0
 8007234:	2100      	movs	r1, #0
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 fe9d 	bl	8007f76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007244:	2300      	movs	r3, #0
 8007246:	2200      	movs	r2, #0
 8007248:	2100      	movs	r1, #0
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f001 fb16 	bl	800887c <USBD_LL_PrepareReceive>
 8007250:	e026      	b.n	80072a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007264:	2b03      	cmp	r3, #3
 8007266:	d105      	bne.n	8007274 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007274:	2180      	movs	r1, #128	; 0x80
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f001 fa54 	bl	8008724 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fecf 	bl	8008020 <USBD_CtlReceiveStatus>
 8007282:	e00d      	b.n	80072a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800728a:	2b04      	cmp	r3, #4
 800728c:	d004      	beq.n	8007298 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007294:	2b00      	cmp	r3, #0
 8007296:	d103      	bne.n	80072a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007298:	2180      	movs	r1, #128	; 0x80
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f001 fa42 	bl	8008724 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d11d      	bne.n	80072e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f7ff fe81 	bl	8006fb2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80072b8:	e015      	b.n	80072e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00d      	beq.n	80072e2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d108      	bne.n	80072e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	7afa      	ldrb	r2, [r7, #11]
 80072da:	4611      	mov	r1, r2
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	4798      	blx	r3
 80072e0:	e001      	b.n	80072e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072e2:	2302      	movs	r3, #2
 80072e4:	e000      	b.n	80072e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072f8:	2340      	movs	r3, #64	; 0x40
 80072fa:	2200      	movs	r2, #0
 80072fc:	2100      	movs	r1, #0
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 f9cb 	bl	800869a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2240      	movs	r2, #64	; 0x40
 8007310:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007314:	2340      	movs	r3, #64	; 0x40
 8007316:	2200      	movs	r2, #0
 8007318:	2180      	movs	r1, #128	; 0x80
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 f9bd 	bl	800869a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2240      	movs	r2, #64	; 0x40
 800732a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007350:	2b00      	cmp	r3, #0
 8007352:	d009      	beq.n	8007368 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6852      	ldr	r2, [r2, #4]
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	4611      	mov	r1, r2
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
  }

  return USBD_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	460b      	mov	r3, r1
 800737c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	78fa      	ldrb	r2, [r7, #3]
 8007382:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr

08007390 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2204      	movs	r2, #4
 80073a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr

080073b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d105      	bne.n	80073d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	bc80      	pop	{r7}
 80073e0:	4770      	bx	lr

080073e2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d10b      	bne.n	800740c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800742e:	2b40      	cmp	r3, #64	; 0x40
 8007430:	d005      	beq.n	800743e <USBD_StdDevReq+0x26>
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d84f      	bhi.n	80074d6 <USBD_StdDevReq+0xbe>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d009      	beq.n	800744e <USBD_StdDevReq+0x36>
 800743a:	2b20      	cmp	r3, #32
 800743c:	d14b      	bne.n	80074d6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	4798      	blx	r3
      break;
 800744c:	e048      	b.n	80074e0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	785b      	ldrb	r3, [r3, #1]
 8007452:	2b09      	cmp	r3, #9
 8007454:	d839      	bhi.n	80074ca <USBD_StdDevReq+0xb2>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <USBD_StdDevReq+0x44>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	080074ad 	.word	0x080074ad
 8007460:	080074c1 	.word	0x080074c1
 8007464:	080074cb 	.word	0x080074cb
 8007468:	080074b7 	.word	0x080074b7
 800746c:	080074cb 	.word	0x080074cb
 8007470:	0800748f 	.word	0x0800748f
 8007474:	08007485 	.word	0x08007485
 8007478:	080074cb 	.word	0x080074cb
 800747c:	080074a3 	.word	0x080074a3
 8007480:	08007499 	.word	0x08007499
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f9dc 	bl	8007844 <USBD_GetDescriptor>
          break;
 800748c:	e022      	b.n	80074d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fb3f 	bl	8007b14 <USBD_SetAddress>
          break;
 8007496:	e01d      	b.n	80074d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fb7e 	bl	8007b9c <USBD_SetConfig>
          break;
 80074a0:	e018      	b.n	80074d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fc07 	bl	8007cb8 <USBD_GetConfig>
          break;
 80074aa:	e013      	b.n	80074d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fc37 	bl	8007d22 <USBD_GetStatus>
          break;
 80074b4:	e00e      	b.n	80074d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fc65 	bl	8007d88 <USBD_SetFeature>
          break;
 80074be:	e009      	b.n	80074d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fc74 	bl	8007db0 <USBD_ClrFeature>
          break;
 80074c8:	e004      	b.n	80074d4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fccc 	bl	8007e6a <USBD_CtlError>
          break;
 80074d2:	bf00      	nop
      }
      break;
 80074d4:	e004      	b.n	80074e0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fcc6 	bl	8007e6a <USBD_CtlError>
      break;
 80074de:	bf00      	nop
  }

  return ret;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop

080074ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074f6:	2300      	movs	r3, #0
 80074f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007502:	2b40      	cmp	r3, #64	; 0x40
 8007504:	d005      	beq.n	8007512 <USBD_StdItfReq+0x26>
 8007506:	2b40      	cmp	r3, #64	; 0x40
 8007508:	d82e      	bhi.n	8007568 <USBD_StdItfReq+0x7c>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <USBD_StdItfReq+0x26>
 800750e:	2b20      	cmp	r3, #32
 8007510:	d12a      	bne.n	8007568 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007518:	3b01      	subs	r3, #1
 800751a:	2b02      	cmp	r3, #2
 800751c:	d81d      	bhi.n	800755a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	889b      	ldrh	r3, [r3, #4]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b01      	cmp	r3, #1
 8007526:	d813      	bhi.n	8007550 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	4798      	blx	r3
 8007536:	4603      	mov	r3, r0
 8007538:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	88db      	ldrh	r3, [r3, #6]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d110      	bne.n	8007564 <USBD_StdItfReq+0x78>
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10d      	bne.n	8007564 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fd56 	bl	8007ffa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800754e:	e009      	b.n	8007564 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fc89 	bl	8007e6a <USBD_CtlError>
          break;
 8007558:	e004      	b.n	8007564 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fc84 	bl	8007e6a <USBD_CtlError>
          break;
 8007562:	e000      	b.n	8007566 <USBD_StdItfReq+0x7a>
          break;
 8007564:	bf00      	nop
      }
      break;
 8007566:	e004      	b.n	8007572 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fc7d 	bl	8007e6a <USBD_CtlError>
      break;
 8007570:	bf00      	nop
  }

  return USBD_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	889b      	ldrh	r3, [r3, #4]
 800758e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007598:	2b40      	cmp	r3, #64	; 0x40
 800759a:	d007      	beq.n	80075ac <USBD_StdEPReq+0x30>
 800759c:	2b40      	cmp	r3, #64	; 0x40
 800759e:	f200 8146 	bhi.w	800782e <USBD_StdEPReq+0x2b2>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <USBD_StdEPReq+0x40>
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	f040 8141 	bne.w	800782e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
      break;
 80075ba:	e13d      	b.n	8007838 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d10a      	bne.n	80075de <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	4798      	blx	r3
 80075d6:	4603      	mov	r3, r0
 80075d8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	e12d      	b.n	800783a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d007      	beq.n	80075f6 <USBD_StdEPReq+0x7a>
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	f300 811b 	bgt.w	8007822 <USBD_StdEPReq+0x2a6>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d072      	beq.n	80076d6 <USBD_StdEPReq+0x15a>
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d03a      	beq.n	800766a <USBD_StdEPReq+0xee>
 80075f4:	e115      	b.n	8007822 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d002      	beq.n	8007606 <USBD_StdEPReq+0x8a>
 8007600:	2b03      	cmp	r3, #3
 8007602:	d015      	beq.n	8007630 <USBD_StdEPReq+0xb4>
 8007604:	e02b      	b.n	800765e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007606:	7bbb      	ldrb	r3, [r7, #14]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00c      	beq.n	8007626 <USBD_StdEPReq+0xaa>
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	2b80      	cmp	r3, #128	; 0x80
 8007610:	d009      	beq.n	8007626 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f001 f884 	bl	8008724 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800761c:	2180      	movs	r1, #128	; 0x80
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f001 f880 	bl	8008724 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007624:	e020      	b.n	8007668 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fc1e 	bl	8007e6a <USBD_CtlError>
              break;
 800762e:	e01b      	b.n	8007668 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	885b      	ldrh	r3, [r3, #2]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10e      	bne.n	8007656 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <USBD_StdEPReq+0xda>
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	2b80      	cmp	r3, #128	; 0x80
 8007642:	d008      	beq.n	8007656 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	88db      	ldrh	r3, [r3, #6]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 f867 	bl	8008724 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fccf 	bl	8007ffa <USBD_CtlSendStatus>

              break;
 800765c:	e004      	b.n	8007668 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fc02 	bl	8007e6a <USBD_CtlError>
              break;
 8007666:	bf00      	nop
          }
          break;
 8007668:	e0e0      	b.n	800782c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007670:	2b02      	cmp	r3, #2
 8007672:	d002      	beq.n	800767a <USBD_StdEPReq+0xfe>
 8007674:	2b03      	cmp	r3, #3
 8007676:	d015      	beq.n	80076a4 <USBD_StdEPReq+0x128>
 8007678:	e026      	b.n	80076c8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00c      	beq.n	800769a <USBD_StdEPReq+0x11e>
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	2b80      	cmp	r3, #128	; 0x80
 8007684:	d009      	beq.n	800769a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 f84a 	bl	8008724 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007690:	2180      	movs	r1, #128	; 0x80
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 f846 	bl	8008724 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007698:	e01c      	b.n	80076d4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fbe4 	bl	8007e6a <USBD_CtlError>
              break;
 80076a2:	e017      	b.n	80076d4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	885b      	ldrh	r3, [r3, #2]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d112      	bne.n	80076d2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d004      	beq.n	80076c0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80076b6:	7bbb      	ldrb	r3, [r7, #14]
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 f851 	bl	8008762 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fc9a 	bl	8007ffa <USBD_CtlSendStatus>
              }
              break;
 80076c6:	e004      	b.n	80076d2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fbcd 	bl	8007e6a <USBD_CtlError>
              break;
 80076d0:	e000      	b.n	80076d4 <USBD_StdEPReq+0x158>
              break;
 80076d2:	bf00      	nop
          }
          break;
 80076d4:	e0aa      	b.n	800782c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d002      	beq.n	80076e6 <USBD_StdEPReq+0x16a>
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d032      	beq.n	800774a <USBD_StdEPReq+0x1ce>
 80076e4:	e097      	b.n	8007816 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d007      	beq.n	80076fc <USBD_StdEPReq+0x180>
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	2b80      	cmp	r3, #128	; 0x80
 80076f0:	d004      	beq.n	80076fc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fbb8 	bl	8007e6a <USBD_CtlError>
                break;
 80076fa:	e091      	b.n	8007820 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007700:	2b00      	cmp	r3, #0
 8007702:	da0b      	bge.n	800771c <USBD_StdEPReq+0x1a0>
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	3310      	adds	r3, #16
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	4413      	add	r3, r2
 8007718:	3304      	adds	r3, #4
 800771a:	e00b      	b.n	8007734 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	4413      	add	r3, r2
 8007732:	3304      	adds	r3, #4
 8007734:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2202      	movs	r2, #2
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fbfb 	bl	8007f3e <USBD_CtlSendData>
              break;
 8007748:	e06a      	b.n	8007820 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800774a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800774e:	2b00      	cmp	r3, #0
 8007750:	da11      	bge.n	8007776 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007752:	7bbb      	ldrb	r3, [r7, #14]
 8007754:	f003 020f 	and.w	r2, r3, #15
 8007758:	6879      	ldr	r1, [r7, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	440b      	add	r3, r1
 8007764:	3318      	adds	r3, #24
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d117      	bne.n	800779c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fb7b 	bl	8007e6a <USBD_CtlError>
                  break;
 8007774:	e054      	b.n	8007820 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	f003 020f 	and.w	r2, r3, #15
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	4613      	mov	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	440b      	add	r3, r1
 8007788:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d104      	bne.n	800779c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fb68 	bl	8007e6a <USBD_CtlError>
                  break;
 800779a:	e041      	b.n	8007820 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800779c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	da0b      	bge.n	80077bc <USBD_StdEPReq+0x240>
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	3310      	adds	r3, #16
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	4413      	add	r3, r2
 80077b8:	3304      	adds	r3, #4
 80077ba:	e00b      	b.n	80077d4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	4413      	add	r3, r2
 80077d2:	3304      	adds	r3, #4
 80077d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <USBD_StdEPReq+0x266>
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	2b80      	cmp	r3, #128	; 0x80
 80077e0:	d103      	bne.n	80077ea <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	e00e      	b.n	8007808 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 ffd6 	bl	80087a0 <USBD_LL_IsStallEP>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2201      	movs	r2, #1
 80077fe:	601a      	str	r2, [r3, #0]
 8007800:	e002      	b.n	8007808 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2202      	movs	r2, #2
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fb95 	bl	8007f3e <USBD_CtlSendData>
              break;
 8007814:	e004      	b.n	8007820 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fb26 	bl	8007e6a <USBD_CtlError>
              break;
 800781e:	bf00      	nop
          }
          break;
 8007820:	e004      	b.n	800782c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fb20 	bl	8007e6a <USBD_CtlError>
          break;
 800782a:	bf00      	nop
      }
      break;
 800782c:	e004      	b.n	8007838 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fb1a 	bl	8007e6a <USBD_CtlError>
      break;
 8007836:	bf00      	nop
  }

  return ret;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	885b      	ldrh	r3, [r3, #2]
 800785e:	0a1b      	lsrs	r3, r3, #8
 8007860:	b29b      	uxth	r3, r3
 8007862:	3b01      	subs	r3, #1
 8007864:	2b06      	cmp	r3, #6
 8007866:	f200 8128 	bhi.w	8007aba <USBD_GetDescriptor+0x276>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <USBD_GetDescriptor+0x2c>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	0800788d 	.word	0x0800788d
 8007874:	080078a5 	.word	0x080078a5
 8007878:	080078e5 	.word	0x080078e5
 800787c:	08007abb 	.word	0x08007abb
 8007880:	08007abb 	.word	0x08007abb
 8007884:	08007a5b 	.word	0x08007a5b
 8007888:	08007a87 	.word	0x08007a87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	7c12      	ldrb	r2, [r2, #16]
 8007898:	f107 0108 	add.w	r1, r7, #8
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
 80078a0:	60f8      	str	r0, [r7, #12]
      break;
 80078a2:	e112      	b.n	8007aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	7c1b      	ldrb	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10d      	bne.n	80078c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b4:	f107 0208 	add.w	r2, r7, #8
 80078b8:	4610      	mov	r0, r2
 80078ba:	4798      	blx	r3
 80078bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	3301      	adds	r3, #1
 80078c2:	2202      	movs	r2, #2
 80078c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078c6:	e100      	b.n	8007aca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	f107 0208 	add.w	r2, r7, #8
 80078d4:	4610      	mov	r0, r2
 80078d6:	4798      	blx	r3
 80078d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3301      	adds	r3, #1
 80078de:	2202      	movs	r2, #2
 80078e0:	701a      	strb	r2, [r3, #0]
      break;
 80078e2:	e0f2      	b.n	8007aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	885b      	ldrh	r3, [r3, #2]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b05      	cmp	r3, #5
 80078ec:	f200 80ac 	bhi.w	8007a48 <USBD_GetDescriptor+0x204>
 80078f0:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <USBD_GetDescriptor+0xb4>)
 80078f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f6:	bf00      	nop
 80078f8:	08007911 	.word	0x08007911
 80078fc:	08007945 	.word	0x08007945
 8007900:	08007979 	.word	0x08007979
 8007904:	080079ad 	.word	0x080079ad
 8007908:	080079e1 	.word	0x080079e1
 800790c:	08007a15 	.word	0x08007a15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	7c12      	ldrb	r2, [r2, #16]
 8007928:	f107 0108 	add.w	r1, r7, #8
 800792c:	4610      	mov	r0, r2
 800792e:	4798      	blx	r3
 8007930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007932:	e091      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fa97 	bl	8007e6a <USBD_CtlError>
            err++;
 800793c:	7afb      	ldrb	r3, [r7, #11]
 800793e:	3301      	adds	r3, #1
 8007940:	72fb      	strb	r3, [r7, #11]
          break;
 8007942:	e089      	b.n	8007a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00b      	beq.n	8007968 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	7c12      	ldrb	r2, [r2, #16]
 800795c:	f107 0108 	add.w	r1, r7, #8
 8007960:	4610      	mov	r0, r2
 8007962:	4798      	blx	r3
 8007964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007966:	e077      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa7d 	bl	8007e6a <USBD_CtlError>
            err++;
 8007970:	7afb      	ldrb	r3, [r7, #11]
 8007972:	3301      	adds	r3, #1
 8007974:	72fb      	strb	r3, [r7, #11]
          break;
 8007976:	e06f      	b.n	8007a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00b      	beq.n	800799c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	7c12      	ldrb	r2, [r2, #16]
 8007990:	f107 0108 	add.w	r1, r7, #8
 8007994:	4610      	mov	r0, r2
 8007996:	4798      	blx	r3
 8007998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800799a:	e05d      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fa63 	bl	8007e6a <USBD_CtlError>
            err++;
 80079a4:	7afb      	ldrb	r3, [r7, #11]
 80079a6:	3301      	adds	r3, #1
 80079a8:	72fb      	strb	r3, [r7, #11]
          break;
 80079aa:	e055      	b.n	8007a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	7c12      	ldrb	r2, [r2, #16]
 80079c4:	f107 0108 	add.w	r1, r7, #8
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
 80079cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ce:	e043      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa49 	bl	8007e6a <USBD_CtlError>
            err++;
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	3301      	adds	r3, #1
 80079dc:	72fb      	strb	r3, [r7, #11]
          break;
 80079de:	e03b      	b.n	8007a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00b      	beq.n	8007a04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	7c12      	ldrb	r2, [r2, #16]
 80079f8:	f107 0108 	add.w	r1, r7, #8
 80079fc:	4610      	mov	r0, r2
 80079fe:	4798      	blx	r3
 8007a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a02:	e029      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa2f 	bl	8007e6a <USBD_CtlError>
            err++;
 8007a0c:	7afb      	ldrb	r3, [r7, #11]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	72fb      	strb	r3, [r7, #11]
          break;
 8007a12:	e021      	b.n	8007a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	7c12      	ldrb	r2, [r2, #16]
 8007a2c:	f107 0108 	add.w	r1, r7, #8
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
 8007a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a36:	e00f      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa15 	bl	8007e6a <USBD_CtlError>
            err++;
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	3301      	adds	r3, #1
 8007a44:	72fb      	strb	r3, [r7, #11]
          break;
 8007a46:	e007      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fa0d 	bl	8007e6a <USBD_CtlError>
          err++;
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	3301      	adds	r3, #1
 8007a54:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007a56:	e038      	b.n	8007aca <USBD_GetDescriptor+0x286>
 8007a58:	e037      	b.n	8007aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	7c1b      	ldrb	r3, [r3, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d109      	bne.n	8007a76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6a:	f107 0208 	add.w	r2, r7, #8
 8007a6e:	4610      	mov	r0, r2
 8007a70:	4798      	blx	r3
 8007a72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a74:	e029      	b.n	8007aca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f9f6 	bl	8007e6a <USBD_CtlError>
        err++;
 8007a7e:	7afb      	ldrb	r3, [r7, #11]
 8007a80:	3301      	adds	r3, #1
 8007a82:	72fb      	strb	r3, [r7, #11]
      break;
 8007a84:	e021      	b.n	8007aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	7c1b      	ldrb	r3, [r3, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10d      	bne.n	8007aaa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a96:	f107 0208 	add.w	r2, r7, #8
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	4798      	blx	r3
 8007a9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	2207      	movs	r2, #7
 8007aa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aa8:	e00f      	b.n	8007aca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f9dc 	bl	8007e6a <USBD_CtlError>
        err++;
 8007ab2:	7afb      	ldrb	r3, [r7, #11]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ab8:	e007      	b.n	8007aca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f9d4 	bl	8007e6a <USBD_CtlError>
      err++;
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ac8:	bf00      	nop
  }

  if (err != 0U)
 8007aca:	7afb      	ldrb	r3, [r7, #11]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d11c      	bne.n	8007b0a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007ad0:	893b      	ldrh	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d011      	beq.n	8007afa <USBD_GetDescriptor+0x2b6>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	88db      	ldrh	r3, [r3, #6]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00d      	beq.n	8007afa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	88da      	ldrh	r2, [r3, #6]
 8007ae2:	893b      	ldrh	r3, [r7, #8]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	bf28      	it	cs
 8007ae8:	4613      	movcs	r3, r2
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007aee:	893b      	ldrh	r3, [r7, #8]
 8007af0:	461a      	mov	r2, r3
 8007af2:	68f9      	ldr	r1, [r7, #12]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fa22 	bl	8007f3e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	88db      	ldrh	r3, [r3, #6]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d104      	bne.n	8007b0c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa79 	bl	8007ffa <USBD_CtlSendStatus>
 8007b08:	e000      	b.n	8007b0c <USBD_GetDescriptor+0x2c8>
    return;
 8007b0a:	bf00      	nop
    }
  }
}
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop

08007b14 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	889b      	ldrh	r3, [r3, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d130      	bne.n	8007b88 <USBD_SetAddress+0x74>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	88db      	ldrh	r3, [r3, #6]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d12c      	bne.n	8007b88 <USBD_SetAddress+0x74>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	885b      	ldrh	r3, [r3, #2]
 8007b32:	2b7f      	cmp	r3, #127	; 0x7f
 8007b34:	d828      	bhi.n	8007b88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	885b      	ldrh	r3, [r3, #2]
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d104      	bne.n	8007b56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f98b 	bl	8007e6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b54:	e01d      	b.n	8007b92 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	7bfa      	ldrb	r2, [r7, #15]
 8007b5a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fe48 	bl	80087f8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fa46 	bl	8007ffa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b7c:	e009      	b.n	8007b92 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b86:	e004      	b.n	8007b92 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f96d 	bl	8007e6a <USBD_CtlError>
  }
}
 8007b90:	bf00      	nop
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	885b      	ldrh	r3, [r3, #2]
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	4b41      	ldr	r3, [pc, #260]	; (8007cb4 <USBD_SetConfig+0x118>)
 8007bae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007bb0:	4b40      	ldr	r3, [pc, #256]	; (8007cb4 <USBD_SetConfig+0x118>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d904      	bls.n	8007bc2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f955 	bl	8007e6a <USBD_CtlError>
 8007bc0:	e075      	b.n	8007cae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d002      	beq.n	8007bd2 <USBD_SetConfig+0x36>
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d023      	beq.n	8007c18 <USBD_SetConfig+0x7c>
 8007bd0:	e062      	b.n	8007c98 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007bd2:	4b38      	ldr	r3, [pc, #224]	; (8007cb4 <USBD_SetConfig+0x118>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d01a      	beq.n	8007c10 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007bda:	4b36      	ldr	r3, [pc, #216]	; (8007cb4 <USBD_SetConfig+0x118>)
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2203      	movs	r2, #3
 8007be8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bec:	4b31      	ldr	r3, [pc, #196]	; (8007cb4 <USBD_SetConfig+0x118>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7ff f9e7 	bl	8006fc6 <USBD_SetClassConfig>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d104      	bne.n	8007c08 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f932 	bl	8007e6a <USBD_CtlError>
            return;
 8007c06:	e052      	b.n	8007cae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f9f6 	bl	8007ffa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c0e:	e04e      	b.n	8007cae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f9f2 	bl	8007ffa <USBD_CtlSendStatus>
        break;
 8007c16:	e04a      	b.n	8007cae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007c18:	4b26      	ldr	r3, [pc, #152]	; (8007cb4 <USBD_SetConfig+0x118>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d112      	bne.n	8007c46 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007c28:	4b22      	ldr	r3, [pc, #136]	; (8007cb4 <USBD_SetConfig+0x118>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007c32:	4b20      	ldr	r3, [pc, #128]	; (8007cb4 <USBD_SetConfig+0x118>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7ff f9e3 	bl	8007004 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f9db 	bl	8007ffa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c44:	e033      	b.n	8007cae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007c46:	4b1b      	ldr	r3, [pc, #108]	; (8007cb4 <USBD_SetConfig+0x118>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d01d      	beq.n	8007c90 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff f9d1 	bl	8007004 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007c62:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <USBD_SetConfig+0x118>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c6c:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <USBD_SetConfig+0x118>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff f9a7 	bl	8006fc6 <USBD_SetClassConfig>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d104      	bne.n	8007c88 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f8f2 	bl	8007e6a <USBD_CtlError>
            return;
 8007c86:	e012      	b.n	8007cae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f9b6 	bl	8007ffa <USBD_CtlSendStatus>
        break;
 8007c8e:	e00e      	b.n	8007cae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f9b2 	bl	8007ffa <USBD_CtlSendStatus>
        break;
 8007c96:	e00a      	b.n	8007cae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f8e5 	bl	8007e6a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ca0:	4b04      	ldr	r3, [pc, #16]	; (8007cb4 <USBD_SetConfig+0x118>)
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff f9ac 	bl	8007004 <USBD_ClrClassConfig>
        break;
 8007cac:	bf00      	nop
    }
  }
}
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	2000019f 	.word	0x2000019f

08007cb8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	88db      	ldrh	r3, [r3, #6]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d004      	beq.n	8007cd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f8cc 	bl	8007e6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cd2:	e022      	b.n	8007d1a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	dc02      	bgt.n	8007ce4 <USBD_GetConfig+0x2c>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	dc03      	bgt.n	8007cea <USBD_GetConfig+0x32>
 8007ce2:	e015      	b.n	8007d10 <USBD_GetConfig+0x58>
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d00b      	beq.n	8007d00 <USBD_GetConfig+0x48>
 8007ce8:	e012      	b.n	8007d10 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f920 	bl	8007f3e <USBD_CtlSendData>
        break;
 8007cfe:	e00c      	b.n	8007d1a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3304      	adds	r3, #4
 8007d04:	2201      	movs	r2, #1
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f918 	bl	8007f3e <USBD_CtlSendData>
        break;
 8007d0e:	e004      	b.n	8007d1a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f8a9 	bl	8007e6a <USBD_CtlError>
        break;
 8007d18:	bf00      	nop
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d32:	3b01      	subs	r3, #1
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d81e      	bhi.n	8007d76 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	88db      	ldrh	r3, [r3, #6]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d004      	beq.n	8007d4a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f891 	bl	8007e6a <USBD_CtlError>
        break;
 8007d48:	e01a      	b.n	8007d80 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d005      	beq.n	8007d66 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f043 0202 	orr.w	r2, r3, #2
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	330c      	adds	r3, #12
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f8e5 	bl	8007f3e <USBD_CtlSendData>
      break;
 8007d74:	e004      	b.n	8007d80 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f876 	bl	8007e6a <USBD_CtlError>
      break;
 8007d7e:	bf00      	nop
  }
}
 8007d80:	bf00      	nop
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	885b      	ldrh	r3, [r3, #2]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d106      	bne.n	8007da8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f929 	bl	8007ffa <USBD_CtlSendStatus>
  }
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d80b      	bhi.n	8007dde <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	885b      	ldrh	r3, [r3, #2]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d10c      	bne.n	8007de8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f90f 	bl	8007ffa <USBD_CtlSendStatus>
      }
      break;
 8007ddc:	e004      	b.n	8007de8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f842 	bl	8007e6a <USBD_CtlError>
      break;
 8007de6:	e000      	b.n	8007dea <USBD_ClrFeature+0x3a>
      break;
 8007de8:	bf00      	nop
  }
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781a      	ldrb	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	785a      	ldrb	r2, [r3, #1]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	3302      	adds	r3, #2
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	3303      	adds	r3, #3
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	021b      	lsls	r3, r3, #8
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	4413      	add	r3, r2
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	3305      	adds	r3, #5
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	3306      	adds	r3, #6
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	3307      	adds	r3, #7
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	021b      	lsls	r3, r3, #8
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	4413      	add	r3, r2
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	80da      	strh	r2, [r3, #6]

}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bc80      	pop	{r7}
 8007e68:	4770      	bx	lr

08007e6a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007e74:	2180      	movs	r1, #128	; 0x80
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fc54 	bl	8008724 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fc50 	bl	8008724 <USBD_LL_StallEP>
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d032      	beq.n	8007f08 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 f834 	bl	8007f10 <USBD_GetLen>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	3301      	adds	r3, #1
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	75fa      	strb	r2, [r7, #23]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	7812      	ldrb	r2, [r2, #0]
 8007ec6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	75fa      	strb	r2, [r7, #23]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	2203      	movs	r2, #3
 8007ed6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007ed8:	e012      	b.n	8007f00 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	60fa      	str	r2, [r7, #12]
 8007ee0:	7dfa      	ldrb	r2, [r7, #23]
 8007ee2:	1c51      	adds	r1, r2, #1
 8007ee4:	75f9      	strb	r1, [r7, #23]
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	440a      	add	r2, r1
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	75fa      	strb	r2, [r7, #23]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4413      	add	r3, r2
 8007efc:	2200      	movs	r2, #0
 8007efe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e8      	bne.n	8007eda <USBD_GetString+0x4e>
    }
  }
}
 8007f08:	bf00      	nop
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007f1c:	e005      	b.n	8007f2a <USBD_GetLen+0x1a>
  {
    len++;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	3301      	adds	r3, #1
 8007f22:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3301      	adds	r3, #1
 8007f28:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1f5      	bne.n	8007f1e <USBD_GetLen+0xe>
  }

  return len;
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr

08007f3e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b084      	sub	sp, #16
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	60b9      	str	r1, [r7, #8]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f54:	88fa      	ldrh	r2, [r7, #6]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007f5a:	88fa      	ldrh	r2, [r7, #6]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f60:	88fb      	ldrh	r3, [r7, #6]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	2100      	movs	r1, #0
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fc65 	bl	8008836 <USBD_LL_Transmit>

  return USBD_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	4613      	mov	r3, r2
 8007f82:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f84:	88fb      	ldrh	r3, [r7, #6]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	2100      	movs	r1, #0
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 fc53 	bl	8008836 <USBD_LL_Transmit>

  return USBD_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2203      	movs	r2, #3
 8007fac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007fb0:	88fa      	ldrh	r2, [r7, #6]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fc0:	88fb      	ldrh	r3, [r7, #6]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 fc58 	bl	800887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fe4:	88fb      	ldrh	r3, [r7, #6]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 fc46 	bl	800887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2204      	movs	r2, #4
 8008006:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800800a:	2300      	movs	r3, #0
 800800c:	2200      	movs	r2, #0
 800800e:	2100      	movs	r1, #0
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fc10 	bl	8008836 <USBD_LL_Transmit>

  return USBD_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2205      	movs	r2, #5
 800802c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008030:	2300      	movs	r3, #0
 8008032:	2200      	movs	r2, #0
 8008034:	2100      	movs	r1, #0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fc20 	bl	800887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800804c:	2200      	movs	r2, #0
 800804e:	4912      	ldr	r1, [pc, #72]	; (8008098 <MX_USB_DEVICE_Init+0x50>)
 8008050:	4812      	ldr	r0, [pc, #72]	; (800809c <MX_USB_DEVICE_Init+0x54>)
 8008052:	f7fe ff5e 	bl	8006f12 <USBD_Init>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800805c:	f7f8 fd76 	bl	8000b4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008060:	490f      	ldr	r1, [pc, #60]	; (80080a0 <MX_USB_DEVICE_Init+0x58>)
 8008062:	480e      	ldr	r0, [pc, #56]	; (800809c <MX_USB_DEVICE_Init+0x54>)
 8008064:	f7fe ff80 	bl	8006f68 <USBD_RegisterClass>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800806e:	f7f8 fd6d 	bl	8000b4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008072:	490c      	ldr	r1, [pc, #48]	; (80080a4 <MX_USB_DEVICE_Init+0x5c>)
 8008074:	4809      	ldr	r0, [pc, #36]	; (800809c <MX_USB_DEVICE_Init+0x54>)
 8008076:	f7fe feb1 	bl	8006ddc <USBD_CDC_RegisterInterface>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008080:	f7f8 fd64 	bl	8000b4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008084:	4805      	ldr	r0, [pc, #20]	; (800809c <MX_USB_DEVICE_Init+0x54>)
 8008086:	f7fe ff88 	bl	8006f9a <USBD_Start>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008090:	f7f8 fd5c 	bl	8000b4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008094:	bf00      	nop
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000130 	.word	0x20000130
 800809c:	20000480 	.word	0x20000480
 80080a0:	2000001c 	.word	0x2000001c
 80080a4:	20000120 	.word	0x20000120

080080a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080ac:	2200      	movs	r2, #0
 80080ae:	4905      	ldr	r1, [pc, #20]	; (80080c4 <CDC_Init_FS+0x1c>)
 80080b0:	4805      	ldr	r0, [pc, #20]	; (80080c8 <CDC_Init_FS+0x20>)
 80080b2:	f7fe fea9 	bl	8006e08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080b6:	4905      	ldr	r1, [pc, #20]	; (80080cc <CDC_Init_FS+0x24>)
 80080b8:	4803      	ldr	r0, [pc, #12]	; (80080c8 <CDC_Init_FS+0x20>)
 80080ba:	f7fe febe 	bl	8006e3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000b2c 	.word	0x20000b2c
 80080c8:	20000480 	.word	0x20000480
 80080cc:	20000744 	.word	0x20000744

080080d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	46bd      	mov	sp, r7
 80080da:	bc80      	pop	{r7}
 80080dc:	4770      	bx	lr
	...

080080e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	6039      	str	r1, [r7, #0]
 80080ea:	71fb      	strb	r3, [r7, #7]
 80080ec:	4613      	mov	r3, r2
 80080ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	2b23      	cmp	r3, #35	; 0x23
 80080f4:	d84a      	bhi.n	800818c <CDC_Control_FS+0xac>
 80080f6:	a201      	add	r2, pc, #4	; (adr r2, 80080fc <CDC_Control_FS+0x1c>)
 80080f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fc:	0800818d 	.word	0x0800818d
 8008100:	0800818d 	.word	0x0800818d
 8008104:	0800818d 	.word	0x0800818d
 8008108:	0800818d 	.word	0x0800818d
 800810c:	0800818d 	.word	0x0800818d
 8008110:	0800818d 	.word	0x0800818d
 8008114:	0800818d 	.word	0x0800818d
 8008118:	0800818d 	.word	0x0800818d
 800811c:	0800818d 	.word	0x0800818d
 8008120:	0800818d 	.word	0x0800818d
 8008124:	0800818d 	.word	0x0800818d
 8008128:	0800818d 	.word	0x0800818d
 800812c:	0800818d 	.word	0x0800818d
 8008130:	0800818d 	.word	0x0800818d
 8008134:	0800818d 	.word	0x0800818d
 8008138:	0800818d 	.word	0x0800818d
 800813c:	0800818d 	.word	0x0800818d
 8008140:	0800818d 	.word	0x0800818d
 8008144:	0800818d 	.word	0x0800818d
 8008148:	0800818d 	.word	0x0800818d
 800814c:	0800818d 	.word	0x0800818d
 8008150:	0800818d 	.word	0x0800818d
 8008154:	0800818d 	.word	0x0800818d
 8008158:	0800818d 	.word	0x0800818d
 800815c:	0800818d 	.word	0x0800818d
 8008160:	0800818d 	.word	0x0800818d
 8008164:	0800818d 	.word	0x0800818d
 8008168:	0800818d 	.word	0x0800818d
 800816c:	0800818d 	.word	0x0800818d
 8008170:	0800818d 	.word	0x0800818d
 8008174:	0800818d 	.word	0x0800818d
 8008178:	0800818d 	.word	0x0800818d
 800817c:	0800818d 	.word	0x0800818d
 8008180:	0800818d 	.word	0x0800818d
 8008184:	0800818d 	.word	0x0800818d
 8008188:	0800818d 	.word	0x0800818d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800818c:	bf00      	nop
  }

  return (USBD_OK);
 800818e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	bc80      	pop	{r7}
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop

0800819c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4805      	ldr	r0, [pc, #20]	; (80081c0 <CDC_Receive_FS+0x24>)
 80081aa:	f7fe fe46 	bl	8006e3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081ae:	4804      	ldr	r0, [pc, #16]	; (80081c0 <CDC_Receive_FS+0x24>)
 80081b0:	f7fe fe85 	bl	8006ebe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000480 	.word	0x20000480

080081c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80081d4:	4b0d      	ldr	r3, [pc, #52]	; (800820c <CDC_Transmit_FS+0x48>)
 80081d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e00b      	b.n	8008202 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80081ea:	887b      	ldrh	r3, [r7, #2]
 80081ec:	461a      	mov	r2, r3
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	4806      	ldr	r0, [pc, #24]	; (800820c <CDC_Transmit_FS+0x48>)
 80081f2:	f7fe fe09 	bl	8006e08 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081f6:	4805      	ldr	r0, [pc, #20]	; (800820c <CDC_Transmit_FS+0x48>)
 80081f8:	f7fe fe32 	bl	8006e60 <USBD_CDC_TransmitPacket>
 80081fc:	4603      	mov	r3, r0
 80081fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008200:	7bfb      	ldrb	r3, [r7, #15]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20000480 	.word	0x20000480

08008210 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	6039      	str	r1, [r7, #0]
 800821a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	2212      	movs	r2, #18
 8008220:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008222:	4b03      	ldr	r3, [pc, #12]	; (8008230 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008224:	4618      	mov	r0, r3
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	bc80      	pop	{r7}
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	2000014c 	.word	0x2000014c

08008234 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	4603      	mov	r3, r0
 800823c:	6039      	str	r1, [r7, #0]
 800823e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2204      	movs	r2, #4
 8008244:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008246:	4b03      	ldr	r3, [pc, #12]	; (8008254 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008248:	4618      	mov	r0, r3
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	bc80      	pop	{r7}
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	20000160 	.word	0x20000160

08008258 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	6039      	str	r1, [r7, #0]
 8008262:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008264:	79fb      	ldrb	r3, [r7, #7]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	4907      	ldr	r1, [pc, #28]	; (800828c <USBD_FS_ProductStrDescriptor+0x34>)
 800826e:	4808      	ldr	r0, [pc, #32]	; (8008290 <USBD_FS_ProductStrDescriptor+0x38>)
 8008270:	f7ff fe0c 	bl	8007e8c <USBD_GetString>
 8008274:	e004      	b.n	8008280 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	4904      	ldr	r1, [pc, #16]	; (800828c <USBD_FS_ProductStrDescriptor+0x34>)
 800827a:	4805      	ldr	r0, [pc, #20]	; (8008290 <USBD_FS_ProductStrDescriptor+0x38>)
 800827c:	f7ff fe06 	bl	8007e8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008280:	4b02      	ldr	r3, [pc, #8]	; (800828c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20000f14 	.word	0x20000f14
 8008290:	08008a58 	.word	0x08008a58

08008294 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	6039      	str	r1, [r7, #0]
 800829e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	4904      	ldr	r1, [pc, #16]	; (80082b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082a4:	4804      	ldr	r0, [pc, #16]	; (80082b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082a6:	f7ff fdf1 	bl	8007e8c <USBD_GetString>
  return USBD_StrDesc;
 80082aa:	4b02      	ldr	r3, [pc, #8]	; (80082b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20000f14 	.word	0x20000f14
 80082b8:	08008a70 	.word	0x08008a70

080082bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	6039      	str	r1, [r7, #0]
 80082c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	221a      	movs	r2, #26
 80082cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082ce:	f000 f843 	bl	8008358 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082d2:	4b02      	ldr	r3, [pc, #8]	; (80082dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20000164 	.word	0x20000164

080082e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	6039      	str	r1, [r7, #0]
 80082ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d105      	bne.n	80082fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	4907      	ldr	r1, [pc, #28]	; (8008314 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082f6:	4808      	ldr	r0, [pc, #32]	; (8008318 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082f8:	f7ff fdc8 	bl	8007e8c <USBD_GetString>
 80082fc:	e004      	b.n	8008308 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	4904      	ldr	r1, [pc, #16]	; (8008314 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008302:	4805      	ldr	r0, [pc, #20]	; (8008318 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008304:	f7ff fdc2 	bl	8007e8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20000f14 	.word	0x20000f14
 8008318:	08008a84 	.word	0x08008a84

0800831c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	4603      	mov	r3, r0
 8008324:	6039      	str	r1, [r7, #0]
 8008326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008328:	79fb      	ldrb	r3, [r7, #7]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d105      	bne.n	800833a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	4907      	ldr	r1, [pc, #28]	; (8008350 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008332:	4808      	ldr	r0, [pc, #32]	; (8008354 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008334:	f7ff fdaa 	bl	8007e8c <USBD_GetString>
 8008338:	e004      	b.n	8008344 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800833a:	683a      	ldr	r2, [r7, #0]
 800833c:	4904      	ldr	r1, [pc, #16]	; (8008350 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800833e:	4805      	ldr	r0, [pc, #20]	; (8008354 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008340:	f7ff fda4 	bl	8007e8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008344:	4b02      	ldr	r3, [pc, #8]	; (8008350 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20000f14 	.word	0x20000f14
 8008354:	08008a90 	.word	0x08008a90

08008358 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800835e:	4b0f      	ldr	r3, [pc, #60]	; (800839c <Get_SerialNum+0x44>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008364:	4b0e      	ldr	r3, [pc, #56]	; (80083a0 <Get_SerialNum+0x48>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800836a:	4b0e      	ldr	r3, [pc, #56]	; (80083a4 <Get_SerialNum+0x4c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4413      	add	r3, r2
 8008376:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d009      	beq.n	8008392 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800837e:	2208      	movs	r2, #8
 8008380:	4909      	ldr	r1, [pc, #36]	; (80083a8 <Get_SerialNum+0x50>)
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 f814 	bl	80083b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008388:	2204      	movs	r2, #4
 800838a:	4908      	ldr	r1, [pc, #32]	; (80083ac <Get_SerialNum+0x54>)
 800838c:	68b8      	ldr	r0, [r7, #8]
 800838e:	f000 f80f 	bl	80083b0 <IntToUnicode>
  }
}
 8008392:	bf00      	nop
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	1ffff7e8 	.word	0x1ffff7e8
 80083a0:	1ffff7ec 	.word	0x1ffff7ec
 80083a4:	1ffff7f0 	.word	0x1ffff7f0
 80083a8:	20000166 	.word	0x20000166
 80083ac:	20000176 	.word	0x20000176

080083b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083c2:	2300      	movs	r3, #0
 80083c4:	75fb      	strb	r3, [r7, #23]
 80083c6:	e027      	b.n	8008418 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	0f1b      	lsrs	r3, r3, #28
 80083cc:	2b09      	cmp	r3, #9
 80083ce:	d80b      	bhi.n	80083e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	0f1b      	lsrs	r3, r3, #28
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	4619      	mov	r1, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	440b      	add	r3, r1
 80083e0:	3230      	adds	r2, #48	; 0x30
 80083e2:	b2d2      	uxtb	r2, r2
 80083e4:	701a      	strb	r2, [r3, #0]
 80083e6:	e00a      	b.n	80083fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	0f1b      	lsrs	r3, r3, #28
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	4619      	mov	r1, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	440b      	add	r3, r1
 80083f8:	3237      	adds	r2, #55	; 0x37
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	3301      	adds	r3, #1
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	4413      	add	r3, r2
 800840e:	2200      	movs	r2, #0
 8008410:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	3301      	adds	r3, #1
 8008416:	75fb      	strb	r3, [r7, #23]
 8008418:	7dfa      	ldrb	r2, [r7, #23]
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	429a      	cmp	r2, r3
 800841e:	d3d3      	bcc.n	80083c8 <IntToUnicode+0x18>
  }
}
 8008420:	bf00      	nop
 8008422:	bf00      	nop
 8008424:	371c      	adds	r7, #28
 8008426:	46bd      	mov	sp, r7
 8008428:	bc80      	pop	{r7}
 800842a:	4770      	bx	lr

0800842c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a0d      	ldr	r2, [pc, #52]	; (8008470 <HAL_PCD_MspInit+0x44>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d113      	bne.n	8008466 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800843e:	4b0d      	ldr	r3, [pc, #52]	; (8008474 <HAL_PCD_MspInit+0x48>)
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	4a0c      	ldr	r2, [pc, #48]	; (8008474 <HAL_PCD_MspInit+0x48>)
 8008444:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008448:	61d3      	str	r3, [r2, #28]
 800844a:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <HAL_PCD_MspInit+0x48>)
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008456:	2200      	movs	r2, #0
 8008458:	2100      	movs	r1, #0
 800845a:	2014      	movs	r0, #20
 800845c:	f7f8 fdad 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008460:	2014      	movs	r0, #20
 8008462:	f7f8 fdc6 	bl	8000ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008466:	bf00      	nop
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	40005c00 	.word	0x40005c00
 8008474:	40021000 	.word	0x40021000

08008478 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800848c:	4619      	mov	r1, r3
 800848e:	4610      	mov	r0, r2
 8008490:	f7fe fdcb 	bl	800702a <USBD_LL_SetupStage>
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80084ae:	78fa      	ldrb	r2, [r7, #3]
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	4613      	mov	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	440b      	add	r3, r1
 80084bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	4619      	mov	r1, r3
 80084c6:	f7fe fdfd 	bl	80070c4 <USBD_LL_DataOutStage>
}
 80084ca:	bf00      	nop
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b082      	sub	sp, #8
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	460b      	mov	r3, r1
 80084dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80084e4:	78fa      	ldrb	r2, [r7, #3]
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	4613      	mov	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	440b      	add	r3, r1
 80084f2:	333c      	adds	r3, #60	; 0x3c
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	4619      	mov	r1, r3
 80084fa:	f7fe fe54 	bl	80071a6 <USBD_LL_DataInStage>
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe ff64 	bl	80073e2 <USBD_LL_SOF>
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800852a:	2301      	movs	r3, #1
 800852c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d001      	beq.n	800853a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008536:	f7f8 fb09 	bl	8000b4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008540:	7bfa      	ldrb	r2, [r7, #15]
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f7fe ff14 	bl	8007372 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe fecd 	bl	80072f0 <USBD_LL_Reset>
}
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe ff0e 	bl	8007390 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d005      	beq.n	8008588 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800857c:	4b04      	ldr	r3, [pc, #16]	; (8008590 <HAL_PCD_SuspendCallback+0x30>)
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	4a03      	ldr	r2, [pc, #12]	; (8008590 <HAL_PCD_SuspendCallback+0x30>)
 8008582:	f043 0306 	orr.w	r3, r3, #6
 8008586:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008588:	bf00      	nop
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	e000ed00 	.word	0xe000ed00

08008594 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe ff08 	bl	80073b8 <USBD_LL_Resume>
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80085b8:	4a28      	ldr	r2, [pc, #160]	; (800865c <USBD_LL_Init+0xac>)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a26      	ldr	r2, [pc, #152]	; (800865c <USBD_LL_Init+0xac>)
 80085c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80085c8:	4b24      	ldr	r3, [pc, #144]	; (800865c <USBD_LL_Init+0xac>)
 80085ca:	4a25      	ldr	r2, [pc, #148]	; (8008660 <USBD_LL_Init+0xb0>)
 80085cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80085ce:	4b23      	ldr	r3, [pc, #140]	; (800865c <USBD_LL_Init+0xac>)
 80085d0:	2208      	movs	r2, #8
 80085d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80085d4:	4b21      	ldr	r3, [pc, #132]	; (800865c <USBD_LL_Init+0xac>)
 80085d6:	2202      	movs	r2, #2
 80085d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80085da:	4b20      	ldr	r3, [pc, #128]	; (800865c <USBD_LL_Init+0xac>)
 80085dc:	2200      	movs	r2, #0
 80085de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80085e0:	4b1e      	ldr	r3, [pc, #120]	; (800865c <USBD_LL_Init+0xac>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80085e6:	4b1d      	ldr	r3, [pc, #116]	; (800865c <USBD_LL_Init+0xac>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80085ec:	481b      	ldr	r0, [pc, #108]	; (800865c <USBD_LL_Init+0xac>)
 80085ee:	f7f8 fee7 	bl	80013c0 <HAL_PCD_Init>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80085f8:	f7f8 faa8 	bl	8000b4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008602:	2318      	movs	r3, #24
 8008604:	2200      	movs	r2, #0
 8008606:	2100      	movs	r1, #0
 8008608:	f7fa fb5d 	bl	8002cc6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008612:	2358      	movs	r3, #88	; 0x58
 8008614:	2200      	movs	r2, #0
 8008616:	2180      	movs	r1, #128	; 0x80
 8008618:	f7fa fb55 	bl	8002cc6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008622:	23c0      	movs	r3, #192	; 0xc0
 8008624:	2200      	movs	r2, #0
 8008626:	2181      	movs	r1, #129	; 0x81
 8008628:	f7fa fb4d 	bl	8002cc6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008632:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008636:	2200      	movs	r2, #0
 8008638:	2101      	movs	r1, #1
 800863a:	f7fa fb44 	bl	8002cc6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008648:	2200      	movs	r2, #0
 800864a:	2182      	movs	r1, #130	; 0x82
 800864c:	f7fa fb3b 	bl	8002cc6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20001114 	.word	0x20001114
 8008660:	40005c00 	.word	0x40005c00

08008664 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800867a:	4618      	mov	r0, r3
 800867c:	f7f8 ffab 	bl	80015d6 <HAL_PCD_Start>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f94e 	bl	8008928 <USBD_Get_USB_Status>
 800868c:	4603      	mov	r3, r0
 800868e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008690:	7bbb      	ldrb	r3, [r7, #14]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b084      	sub	sp, #16
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	4608      	mov	r0, r1
 80086a4:	4611      	mov	r1, r2
 80086a6:	461a      	mov	r2, r3
 80086a8:	4603      	mov	r3, r0
 80086aa:	70fb      	strb	r3, [r7, #3]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70bb      	strb	r3, [r7, #2]
 80086b0:	4613      	mov	r3, r2
 80086b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086c2:	78bb      	ldrb	r3, [r7, #2]
 80086c4:	883a      	ldrh	r2, [r7, #0]
 80086c6:	78f9      	ldrb	r1, [r7, #3]
 80086c8:	f7f9 f925 	bl	8001916 <HAL_PCD_EP_Open>
 80086cc:	4603      	mov	r3, r0
 80086ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 f928 	bl	8008928 <USBD_Get_USB_Status>
 80086d8:	4603      	mov	r3, r0
 80086da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008700:	78fa      	ldrb	r2, [r7, #3]
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f7f9 f96c 	bl	80019e2 <HAL_PCD_EP_Close>
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f909 	bl	8008928 <USBD_Get_USB_Status>
 8008716:	4603      	mov	r3, r0
 8008718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871a:	7bbb      	ldrb	r3, [r7, #14]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800873e:	78fa      	ldrb	r2, [r7, #3]
 8008740:	4611      	mov	r1, r2
 8008742:	4618      	mov	r0, r3
 8008744:	f7f9 fa2c 	bl	8001ba0 <HAL_PCD_EP_SetStall>
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f8ea 	bl	8008928 <USBD_Get_USB_Status>
 8008754:	4603      	mov	r3, r0
 8008756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008758:	7bbb      	ldrb	r3, [r7, #14]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	460b      	mov	r3, r1
 800876c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800877c:	78fa      	ldrb	r2, [r7, #3]
 800877e:	4611      	mov	r1, r2
 8008780:	4618      	mov	r0, r3
 8008782:	f7f9 fa6d 	bl	8001c60 <HAL_PCD_EP_ClrStall>
 8008786:	4603      	mov	r3, r0
 8008788:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	4618      	mov	r0, r3
 800878e:	f000 f8cb 	bl	8008928 <USBD_Get_USB_Status>
 8008792:	4603      	mov	r3, r0
 8008794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008796:	7bbb      	ldrb	r3, [r7, #14]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	da0c      	bge.n	80087d6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c2:	68f9      	ldr	r1, [r7, #12]
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	4613      	mov	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	440b      	add	r3, r1
 80087d0:	3302      	adds	r3, #2
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	e00b      	b.n	80087ee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087d6:	78fb      	ldrb	r3, [r7, #3]
 80087d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087dc:	68f9      	ldr	r1, [r7, #12]
 80087de:	4613      	mov	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	00db      	lsls	r3, r3, #3
 80087e6:	440b      	add	r3, r1
 80087e8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80087ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bc80      	pop	{r7}
 80087f6:	4770      	bx	lr

080087f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008812:	78fa      	ldrb	r2, [r7, #3]
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f7f9 f858 	bl	80018cc <HAL_PCD_SetAddress>
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 f880 	bl	8008928 <USBD_Get_USB_Status>
 8008828:	4603      	mov	r3, r0
 800882a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800882c:	7bbb      	ldrb	r3, [r7, #14]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b086      	sub	sp, #24
 800883a:	af00      	add	r7, sp, #0
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	461a      	mov	r2, r3
 8008842:	460b      	mov	r3, r1
 8008844:	72fb      	strb	r3, [r7, #11]
 8008846:	4613      	mov	r3, r2
 8008848:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008858:	893b      	ldrh	r3, [r7, #8]
 800885a:	7af9      	ldrb	r1, [r7, #11]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	f7f9 f95c 	bl	8001b1a <HAL_PCD_EP_Transmit>
 8008862:	4603      	mov	r3, r0
 8008864:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008866:	7dfb      	ldrb	r3, [r7, #23]
 8008868:	4618      	mov	r0, r3
 800886a:	f000 f85d 	bl	8008928 <USBD_Get_USB_Status>
 800886e:	4603      	mov	r3, r0
 8008870:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008872:	7dbb      	ldrb	r3, [r7, #22]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	461a      	mov	r2, r3
 8008888:	460b      	mov	r3, r1
 800888a:	72fb      	strb	r3, [r7, #11]
 800888c:	4613      	mov	r3, r2
 800888e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800889e:	893b      	ldrh	r3, [r7, #8]
 80088a0:	7af9      	ldrb	r1, [r7, #11]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	f7f9 f8e5 	bl	8001a72 <HAL_PCD_EP_Receive>
 80088a8:	4603      	mov	r3, r0
 80088aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 f83a 	bl	8008928 <USBD_Get_USB_Status>
 80088b4:	4603      	mov	r3, r0
 80088b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088d4:	78fa      	ldrb	r2, [r7, #3]
 80088d6:	4611      	mov	r1, r2
 80088d8:	4618      	mov	r0, r3
 80088da:	f7f9 f907 	bl	8001aec <HAL_PCD_EP_GetRxCount>
 80088de:	4603      	mov	r3, r0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088f0:	4b02      	ldr	r3, [pc, #8]	; (80088fc <USBD_static_malloc+0x14>)
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bc80      	pop	{r7}
 80088fa:	4770      	bx	lr
 80088fc:	200001a0 	.word	0x200001a0

08008900 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]

}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	bc80      	pop	{r7}
 8008910:	4770      	bx	lr

08008912 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	460b      	mov	r3, r1
 800891c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800891e:	bf00      	nop
 8008920:	370c      	adds	r7, #12
 8008922:	46bd      	mov	sp, r7
 8008924:	bc80      	pop	{r7}
 8008926:	4770      	bx	lr

08008928 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	2b03      	cmp	r3, #3
 800893a:	d817      	bhi.n	800896c <USBD_Get_USB_Status+0x44>
 800893c:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <USBD_Get_USB_Status+0x1c>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	08008955 	.word	0x08008955
 8008948:	0800895b 	.word	0x0800895b
 800894c:	08008961 	.word	0x08008961
 8008950:	08008967 	.word	0x08008967
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
    break;
 8008958:	e00b      	b.n	8008972 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800895a:	2302      	movs	r3, #2
 800895c:	73fb      	strb	r3, [r7, #15]
    break;
 800895e:	e008      	b.n	8008972 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008960:	2301      	movs	r3, #1
 8008962:	73fb      	strb	r3, [r7, #15]
    break;
 8008964:	e005      	b.n	8008972 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008966:	2302      	movs	r3, #2
 8008968:	73fb      	strb	r3, [r7, #15]
    break;
 800896a:	e002      	b.n	8008972 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800896c:	2302      	movs	r3, #2
 800896e:	73fb      	strb	r3, [r7, #15]
    break;
 8008970:	bf00      	nop
  }
  return usb_status;
 8008972:	7bfb      	ldrb	r3, [r7, #15]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	bc80      	pop	{r7}
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop

08008980 <__libc_init_array>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	2600      	movs	r6, #0
 8008984:	4d0c      	ldr	r5, [pc, #48]	; (80089b8 <__libc_init_array+0x38>)
 8008986:	4c0d      	ldr	r4, [pc, #52]	; (80089bc <__libc_init_array+0x3c>)
 8008988:	1b64      	subs	r4, r4, r5
 800898a:	10a4      	asrs	r4, r4, #2
 800898c:	42a6      	cmp	r6, r4
 800898e:	d109      	bne.n	80089a4 <__libc_init_array+0x24>
 8008990:	f000 f822 	bl	80089d8 <_init>
 8008994:	2600      	movs	r6, #0
 8008996:	4d0a      	ldr	r5, [pc, #40]	; (80089c0 <__libc_init_array+0x40>)
 8008998:	4c0a      	ldr	r4, [pc, #40]	; (80089c4 <__libc_init_array+0x44>)
 800899a:	1b64      	subs	r4, r4, r5
 800899c:	10a4      	asrs	r4, r4, #2
 800899e:	42a6      	cmp	r6, r4
 80089a0:	d105      	bne.n	80089ae <__libc_init_array+0x2e>
 80089a2:	bd70      	pop	{r4, r5, r6, pc}
 80089a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089a8:	4798      	blx	r3
 80089aa:	3601      	adds	r6, #1
 80089ac:	e7ee      	b.n	800898c <__libc_init_array+0xc>
 80089ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80089b2:	4798      	blx	r3
 80089b4:	3601      	adds	r6, #1
 80089b6:	e7f2      	b.n	800899e <__libc_init_array+0x1e>
 80089b8:	08008ab0 	.word	0x08008ab0
 80089bc:	08008ab0 	.word	0x08008ab0
 80089c0:	08008ab0 	.word	0x08008ab0
 80089c4:	08008ab4 	.word	0x08008ab4

080089c8 <memset>:
 80089c8:	4603      	mov	r3, r0
 80089ca:	4402      	add	r2, r0
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d100      	bne.n	80089d2 <memset+0xa>
 80089d0:	4770      	bx	lr
 80089d2:	f803 1b01 	strb.w	r1, [r3], #1
 80089d6:	e7f9      	b.n	80089cc <memset+0x4>

080089d8 <_init>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	bf00      	nop
 80089dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089de:	bc08      	pop	{r3}
 80089e0:	469e      	mov	lr, r3
 80089e2:	4770      	bx	lr

080089e4 <_fini>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	bf00      	nop
 80089e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ea:	bc08      	pop	{r3}
 80089ec:	469e      	mov	lr, r3
 80089ee:	4770      	bx	lr
