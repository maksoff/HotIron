
HotIron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08008b5c  08008b5c  00018b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c30  08008c30  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08008c30  08008c30  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c30  08008c30  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c30  08008c30  00018c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c34  08008c34  00018c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001280  20000180  08008db8  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001400  08008db8  00021400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d8a  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003952  00000000  00000000  00039f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0003d888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  0003eac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0b8  00000000  00000000  0003fb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001617c  00000000  00000000  0005ac28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f22f  00000000  00000000  00070da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fffd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad8  00000000  00000000  00100028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	08008b44 	.word	0x08008b44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	08008b44 	.word	0x08008b44

0800014c <delay_init>:
#include "main.h"

TIM_HandleTypeDef * htim;

void delay_init(TIM_HandleTypeDef * htim_i)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	htim = htim_i;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <delay_init+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(htim);
 800015a:	4b04      	ldr	r3, [pc, #16]	; (800016c <delay_init+0x20>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4618      	mov	r0, r3
 8000160:	f003 ffc8 	bl	80040f4 <HAL_TIM_Base_Start>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200003c0 	.word	0x200003c0

08000170 <delay_us>:

// delays for us count
void delay_us(uint16_t us)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim,0);
 800017a:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <delay_us+0x34>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2200      	movs	r2, #0
 8000182:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(htim) < us);
 8000184:	bf00      	nop
 8000186:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <delay_us+0x34>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800018e:	b29b      	uxth	r3, r3
 8000190:	88fa      	ldrh	r2, [r7, #6]
 8000192:	429a      	cmp	r2, r3
 8000194:	d8f7      	bhi.n	8000186 <delay_us+0x16>
}
 8000196:	bf00      	nop
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	200003c0 	.word	0x200003c0

080001a8 <lcd_create>:
 */
LCD_HandleTypeDef lcd_create(
		LCD_PortType port[], LCD_PinType pin[],
		LCD_PortType rs_port, LCD_PinType rs_pin,
		LCD_PortType en_port, LCD_PinType en_pin, LCD_ModeTypeDef mode)
{
 80001a8:	b5b0      	push	{r4, r5, r7, lr}
 80001aa:	b08a      	sub	sp, #40	; 0x28
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
 80001b4:	603b      	str	r3, [r7, #0]
	LCD_HandleTypeDef lcd;

	lcd.mode = mode;
 80001b6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80001ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80001be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80001c2:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80001c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001c6:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80001c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80001ca:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	613b      	str	r3, [r7, #16]

	delay_us(20000); // Display needs about 10ms to start, so you should provide delay
 80001d8:	f644 6020 	movw	r0, #20000	; 0x4e20
 80001dc:	f7ff ffc8 	bl	8000170 <delay_us>

	lcd_init(&lcd);
 80001e0:	f107 0310 	add.w	r3, r7, #16
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f80f 	bl	8000208 <lcd_init>

	return lcd;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	461d      	mov	r5, r3
 80001ee:	f107 0410 	add.w	r4, r7, #16
 80001f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80001fa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80001fe:	68f8      	ldr	r0, [r7, #12]
 8000200:	3728      	adds	r7, #40	; 0x28
 8000202:	46bd      	mov	sp, r7
 8000204:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000208 <lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void lcd_init(LCD_HandleTypeDef * lcd)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	7d9b      	ldrb	r3, [r3, #22]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d10f      	bne.n	8000238 <lcd_init+0x30>
	{
			lcd_write_command(lcd, 0x33);
 8000218:	2133      	movs	r1, #51	; 0x33
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f000 f8ce 	bl	80003bc <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000220:	2132      	movs	r1, #50	; 0x32
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f000 f8ca 	bl	80003bc <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000228:	2128      	movs	r1, #40	; 0x28
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f8c6 	bl	80003bc <lcd_write_command>
			lcd_8line_mode = false;
 8000230:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <lcd_init+0x60>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	e006      	b.n	8000246 <lcd_init+0x3e>
	}
	else
	{
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000238:	2138      	movs	r1, #56	; 0x38
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f000 f8be 	bl	80003bc <lcd_write_command>
		lcd_8line_mode = true;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <lcd_init+0x60>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
	}


	lcd_clear(lcd);											// Clear screen
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f000 f886 	bl	8000358 <lcd_clear>
	lcd_mode(lcd, LCD_ENABLE, CURSOR_DISABLE, NO_BLINK);
 800024c:	2300      	movs	r3, #0
 800024e:	2200      	movs	r2, #0
 8000250:	2101      	movs	r1, #1
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 f80a 	bl	800026c <lcd_mode>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000258:	2106      	movs	r1, #6
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	f000 f8ae 	bl	80003bc <lcd_write_command>
}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000000 	.word	0x20000000

0800026c <lcd_mode>:

/**
 * Set display & cursor mode
 */
void lcd_mode(LCD_HandleTypeDef * lcd, LCD_ONOFF state, LCD_CURSOR cursor, LCD_BLINK blink)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	4608      	mov	r0, r1
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	4603      	mov	r3, r0
 800027c:	70fb      	strb	r3, [r7, #3]
 800027e:	460b      	mov	r3, r1
 8000280:	70bb      	strb	r3, [r7, #2]
 8000282:	4613      	mov	r3, r2
 8000284:	707b      	strb	r3, [r7, #1]
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL |
								 (state ?OPT_D:0) |
 8000286:	78fb      	ldrb	r3, [r7, #3]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <lcd_mode+0x24>
 800028c:	220c      	movs	r2, #12
 800028e:	e000      	b.n	8000292 <lcd_mode+0x26>
 8000290:	2208      	movs	r2, #8
 8000292:	78bb      	ldrb	r3, [r7, #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <lcd_mode+0x30>
 8000298:	2302      	movs	r3, #2
 800029a:	e000      	b.n	800029e <lcd_mode+0x32>
 800029c:	2300      	movs	r3, #0
 800029e:	4313      	orrs	r3, r2
 80002a0:	b25a      	sxtb	r2, r3
								 (cursor?OPT_C:0) |
								 (blink ?OPT_B:0));
 80002a2:	787b      	ldrb	r3, [r7, #1]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	bf14      	ite	ne
 80002a8:	2301      	movne	r3, #1
 80002aa:	2300      	moveq	r3, #0
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	b25b      	sxtb	r3, r3
								 (cursor?OPT_C:0) |
 80002b0:	4313      	orrs	r3, r2
 80002b2:	b25b      	sxtb	r3, r3
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL |
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4619      	mov	r1, r3
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f87f 	bl	80003bc <lcd_write_command>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <lcd_out>:

/**
 * Write a string on the current position
 */
void lcd_out(LCD_HandleTypeDef * lcd, uint8_t * string)
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b082      	sub	sp, #8
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	6078      	str	r0, [r7, #4]
 80002ce:	6039      	str	r1, [r7, #0]
	while (*string)
 80002d0:	e007      	b.n	80002e2 <lcd_out+0x1c>
	{
		lcd_write_data(lcd, *(string++));
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	1c5a      	adds	r2, r3, #1
 80002d6:	603a      	str	r2, [r7, #0]
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	4619      	mov	r1, r3
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f000 f8a7 	bl	8000430 <lcd_write_data>
	while (*string)
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d1f3      	bne.n	80002d2 <lcd_out+0xc>
	}
}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <lcd_string>:

/**
 * Write a string on the current position
 */
void lcd_string(LCD_HandleTypeDef * lcd, char * string)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
	while (*string)
 80002fe:	e007      	b.n	8000310 <lcd_string+0x1c>
	{
		lcd_write_data(lcd, (uint8_t)*(string++));
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	1c5a      	adds	r2, r3, #1
 8000304:	603a      	str	r2, [r7, #0]
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	4619      	mov	r1, r3
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f000 f890 	bl	8000430 <lcd_write_data>
	while (*string)
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d1f3      	bne.n	8000300 <lcd_string+0xc>
	}
}
 8000318:	bf00      	nop
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <lcd_set_xy>:

/**
 * Set the cursor position
 */
void lcd_set_xy(LCD_HandleTypeDef * lcd, uint8_t x, uint8_t y)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
 8000330:	4613      	mov	r3, r2
 8000332:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[y] + x);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[y] + x);
 8000334:	78bb      	ldrb	r3, [r7, #2]
 8000336:	4a07      	ldr	r2, [pc, #28]	; (8000354 <lcd_set_xy+0x30>)
 8000338:	5cd2      	ldrb	r2, [r2, r3]
 800033a:	78fb      	ldrb	r3, [r7, #3]
 800033c:	4413      	add	r3, r2
 800033e:	b2db      	uxtb	r3, r3
 8000340:	3b80      	subs	r3, #128	; 0x80
 8000342:	b2db      	uxtb	r3, r3
 8000344:	4619      	mov	r1, r3
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f000 f838 	bl	80003bc <lcd_write_command>
	#endif
}
 800034c:	bf00      	nop
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	08008c1c 	.word	0x08008c1c

08000358 <lcd_clear>:

/**
 * Clear the screen
 */
void lcd_clear(LCD_HandleTypeDef * lcd) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000360:	2101      	movs	r1, #1
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	f000 f82a 	bl	80003bc <lcd_write_command>
	delay_us(maxi_delay);
 8000368:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800036c:	f7ff ff00 	bl	8000170 <delay_us>
}
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <lcd_define_chars>:
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
}

// load all 8 chars
void lcd_define_chars(LCD_HandleTypeDef * lcd, uint8_t bitmap[]){
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	lcd_write_command(lcd, SETCGRAM_ADDR);
 8000382:	2140      	movs	r1, #64	; 0x40
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	f000 f819 	bl	80003bc <lcd_write_command>
	for(uint8_t i=0;i<64;++i){
 800038a:	2300      	movs	r3, #0
 800038c:	73fb      	strb	r3, [r7, #15]
 800038e:	e00a      	b.n	80003a6 <lcd_define_chars+0x2e>
		lcd_write_data(lcd, bitmap[i]);
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	683a      	ldr	r2, [r7, #0]
 8000394:	4413      	add	r3, r2
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	4619      	mov	r1, r3
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 f848 	bl	8000430 <lcd_write_data>
	for(uint8_t i=0;i<64;++i){
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	3301      	adds	r3, #1
 80003a4:	73fb      	strb	r3, [r7, #15]
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
 80003a8:	2b3f      	cmp	r3, #63	; 0x3f
 80003aa:	d9f1      	bls.n	8000390 <lcd_define_chars+0x18>
	}
	lcd_write_command(lcd, SET_DDRAM_ADDR);
 80003ac:	2180      	movs	r1, #128	; 0x80
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f000 f804 	bl	80003bc <lcd_write_command>
}
 80003b4:	bf00      	nop
 80003b6:	3710      	adds	r7, #16
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(LCD_HandleTypeDef * lcd, uint8_t command)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	6898      	ldr	r0, [r3, #8]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	899b      	ldrh	r3, [r3, #12]
 80003d0:	2200      	movs	r2, #0
 80003d2:	4619      	mov	r1, r3
 80003d4:	f001 f879 	bl	80014ca <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	7d9b      	ldrb	r3, [r3, #22]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d118      	bne.n	8000412 <lcd_write_command+0x56>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80003e0:	78fb      	ldrb	r3, [r7, #3]
 80003e2:	091b      	lsrs	r3, r3, #4
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2204      	movs	r2, #4
 80003e8:	4619      	mov	r1, r3
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f000 f85a 	bl	80004a4 <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <lcd_write_command+0x70>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <lcd_write_command+0x42>
 80003f8:	202a      	movs	r0, #42	; 0x2a
 80003fa:	f7ff feb9 	bl	8000170 <delay_us>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80003fe:	78fb      	ldrb	r3, [r7, #3]
 8000400:	f003 030f 	and.w	r3, r3, #15
 8000404:	b2db      	uxtb	r3, r3
 8000406:	2204      	movs	r2, #4
 8000408:	4619      	mov	r1, r3
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f000 f84a 	bl	80004a4 <lcd_write>
 8000410:	e005      	b.n	800041e <lcd_write_command+0x62>
	}
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
 8000412:	78fb      	ldrb	r3, [r7, #3]
 8000414:	2208      	movs	r2, #8
 8000416:	4619      	mov	r1, r3
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f000 f843 	bl	80004a4 <lcd_write>
	}
	delay_us(mini_delay);
 800041e:	202a      	movs	r0, #42	; 0x2a
 8000420:	f7ff fea6 	bl	8000170 <delay_us>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000000 	.word	0x20000000

08000430 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(LCD_HandleTypeDef * lcd, uint8_t data)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	460b      	mov	r3, r1
 800043a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6898      	ldr	r0, [r3, #8]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	899b      	ldrh	r3, [r3, #12]
 8000444:	2201      	movs	r2, #1
 8000446:	4619      	mov	r1, r3
 8000448:	f001 f83f 	bl	80014ca <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	7d9b      	ldrb	r3, [r3, #22]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d118      	bne.n	8000486 <lcd_write_data+0x56>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000454:	78fb      	ldrb	r3, [r7, #3]
 8000456:	091b      	lsrs	r3, r3, #4
 8000458:	b2db      	uxtb	r3, r3
 800045a:	2204      	movs	r2, #4
 800045c:	4619      	mov	r1, r3
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f000 f820 	bl	80004a4 <lcd_write>
		if (lcd_8line_mode) delay_us(mini_delay);
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <lcd_write_data+0x70>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <lcd_write_data+0x42>
 800046c:	202a      	movs	r0, #42	; 0x2a
 800046e:	f7ff fe7f 	bl	8000170 <delay_us>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000472:	78fb      	ldrb	r3, [r7, #3]
 8000474:	f003 030f 	and.w	r3, r3, #15
 8000478:	b2db      	uxtb	r3, r3
 800047a:	2204      	movs	r2, #4
 800047c:	4619      	mov	r1, r3
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f000 f810 	bl	80004a4 <lcd_write>
 8000484:	e005      	b.n	8000492 <lcd_write_data+0x62>
	}
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
 8000486:	78fb      	ldrb	r3, [r7, #3]
 8000488:	2208      	movs	r2, #8
 800048a:	4619      	mov	r1, r3
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f000 f809 	bl	80004a4 <lcd_write>
	}
	delay_us(mini_delay);
 8000492:	202a      	movs	r0, #42	; 0x2a
 8000494:	f7ff fe6c 	bl	8000170 <delay_us>
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000000 	.word	0x20000000

080004a4 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(LCD_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	70fb      	strb	r3, [r7, #3]
 80004b0:	4613      	mov	r3, r2
 80004b2:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80004b4:	2300      	movs	r3, #0
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	e019      	b.n	80004ee <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	7bfb      	ldrb	r3, [r7, #15]
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	4413      	add	r3, r2
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	685a      	ldr	r2, [r3, #4]
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	4413      	add	r3, r2
 80004d0:	8819      	ldrh	r1, [r3, #0]
 80004d2:	78fa      	ldrb	r2, [r7, #3]
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	fa42 f303 	asr.w	r3, r2, r3
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	f003 0301 	and.w	r3, r3, #1
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	f000 fff1 	bl	80014ca <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	3301      	adds	r3, #1
 80004ec:	73fb      	strb	r3, [r7, #15]
 80004ee:	7bfa      	ldrb	r2, [r7, #15]
 80004f0:	78bb      	ldrb	r3, [r7, #2]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d3e1      	bcc.n	80004ba <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6918      	ldr	r0, [r3, #16]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	8a9b      	ldrh	r3, [r3, #20]
 80004fe:	2201      	movs	r2, #1
 8000500:	4619      	mov	r1, r3
 8000502:	f000 ffe2 	bl	80014ca <HAL_GPIO_WritePin>
	DELAY_US(1);
 8000506:	2001      	movs	r0, #1
 8000508:	f7ff fe32 	bl	8000170 <delay_us>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6918      	ldr	r0, [r3, #16]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	8a9b      	ldrh	r3, [r3, #20]
 8000514:	2200      	movs	r2, #0
 8000516:	4619      	mov	r1, r3
 8000518:	f000 ffd7 	bl	80014ca <HAL_GPIO_WritePin>
	DELAY_US(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f7ff fe27 	bl	8000170 <delay_us>
}
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b0ae      	sub	sp, #184	; 0xb8
 8000530:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 fcbf 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f9b7 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 faa3 	bl	8000a84 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800053e:	f007 fe39 	bl	80081b4 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000542:	f000 fa0d 	bl	8000960 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000546:	f000 fa43 	bl	80009d0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, 1);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000550:	48c9      	ldr	r0, [pc, #804]	; (8000878 <main+0x34c>)
 8000552:	f000 ffba 	bl	80014ca <HAL_GPIO_WritePin>
  delay_init(&htim1);
 8000556:	48c9      	ldr	r0, [pc, #804]	; (800087c <main+0x350>)
 8000558:	f7ff fdf8 	bl	800014c <delay_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_time = HAL_GetTick();
 800055c:	f000 fd02 	bl	8000f64 <HAL_GetTick>
 8000560:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  uint16_t data;

  LCD_PortType ports[] = {	hd_4_GPIO_Port,
 8000564:	4bc6      	ldr	r3, [pc, #792]	; (8000880 <main+0x354>)
 8000566:	f107 0478 	add.w	r4, r7, #120	; 0x78
 800056a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800056c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  	  	  					hd_5_GPIO_Port,
							hd_6_GPIO_Port,
							hd_7_GPIO_Port};
  LCD_PinType pins[] = {	hd_4_Pin,
 8000570:	4ac4      	ldr	r2, [pc, #784]	; (8000884 <main+0x358>)
 8000572:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000576:	e892 0003 	ldmia.w	r2, {r0, r1}
 800057a:	e883 0003 	stmia.w	r3, {r0, r1}
	  	    				hd_5_Pin,
							hd_6_Pin,
							hd_7_Pin};
  lcd = lcd_create(ports, pins,
 800057e:	4cc2      	ldr	r4, [pc, #776]	; (8000888 <main+0x35c>)
 8000580:	4638      	mov	r0, r7
 8000582:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000586:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800058a:	2300      	movs	r3, #0
 800058c:	9303      	str	r3, [sp, #12]
 800058e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000592:	9302      	str	r3, [sp, #8]
 8000594:	4bbd      	ldr	r3, [pc, #756]	; (800088c <main+0x360>)
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	4bbb      	ldr	r3, [pc, #748]	; (800088c <main+0x360>)
 80005a0:	f7ff fe02 	bl	80001a8 <lcd_create>
 80005a4:	4625      	mov	r5, r4
 80005a6:	463c      	mov	r4, r7
 80005a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005b0:	e885 0003 	stmia.w	r5, {r0, r1}
					hd_E_GPIO_Port, hd_E_Pin,
					LCD_4_BIT_MODE);

  /* load symbols */

  uint8_t symbols [] = {0x0, 0xe, 0x11, 0x15, 0x11, 0xe, 0x0, 0x0, // OFF
 80005b4:	4bb6      	ldr	r3, [pc, #728]	; (8000890 <main+0x364>)
 80005b6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80005ba:	461d      	mov	r5, r3
 80005bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						0x9, 0x12, 0x9, 0x12, 0x0, 0x1f, 0x1f, 0x0, // HOT
						0x12, 0x9, 0x12, 0x9, 0x0, 0x1f, 0x1f, 0x0, // HOT mirror
						0x0, 0x4, 0x0, 0x4, 0x0, 0x4, 0x0, 0x0,    // 3 dots
						//0x0, 0x0, 0xa, 0x1f, 0xe, 0x4, 0x0, 0x0 // heart
  };
  lcd_define_chars(&lcd, symbols);
 80005d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005d4:	4619      	mov	r1, r3
 80005d6:	48ac      	ldr	r0, [pc, #688]	; (8000888 <main+0x35c>)
 80005d8:	f7ff fece 	bl	8000378 <lcd_define_chars>
  lcd_set_xy(&lcd, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	48a9      	ldr	r0, [pc, #676]	; (8000888 <main+0x35c>)
 80005e2:	f7ff fe9f 	bl	8000324 <lcd_set_xy>
  lcd_string(&lcd, "Just testing");
 80005e6:	49ab      	ldr	r1, [pc, #684]	; (8000894 <main+0x368>)
 80005e8:	48a7      	ldr	r0, [pc, #668]	; (8000888 <main+0x35c>)
 80005ea:	f7ff fe83 	bl	80002f4 <lcd_string>
  while (HAL_GetTick() - last_time < 1000);
 80005ee:	bf00      	nop
 80005f0:	f000 fcb8 	bl	8000f64 <HAL_GetTick>
 80005f4:	4602      	mov	r2, r0
 80005f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000600:	d3f6      	bcc.n	80005f0 <main+0xc4>

  volatile uint32_t last_ttime, ttemp, max_time = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
	} while (0);
	*/

  while (1)
  {
	  if (HAL_GetTick() - last_time > 2)
 8000606:	f000 fcad 	bl	8000f64 <HAL_GetTick>
 800060a:	4602      	mov	r2, r0
 800060c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	2b02      	cmp	r3, #2
 8000614:	d901      	bls.n	800061a <main+0xee>
	  {
		  process_encoder();
 8000616:	f000 fac7 	bl	8000ba8 <process_encoder>
	  }
	  if (HAL_GetTick() - last_time > 500)
 800061a:	f000 fca3 	bl	8000f64 <HAL_GetTick>
 800061e:	4602      	mov	r2, r0
 8000620:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800062a:	d9ec      	bls.n	8000606 <main+0xda>
	  {
		  STARTT;
 800062c:	f000 fc9a 	bl	8000f64 <HAL_GetTick>
 8000630:	4603      	mov	r3, r0
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
		  last_time = HAL_GetTick();
 8000634:	f000 fc96 	bl	8000f64 <HAL_GetTick>
 8000638:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800063c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000640:	4895      	ldr	r0, [pc, #596]	; (8000898 <main+0x36c>)
 8000642:	f000 ff5a 	bl	80014fa <HAL_GPIO_TogglePin>
		  HAL_SPI_Receive(&hspi1, (uint8_t*)(&data), 1, 100);
 8000646:	f107 018a 	add.w	r1, r7, #138	; 0x8a
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	2201      	movs	r2, #1
 800064e:	4893      	ldr	r0, [pc, #588]	; (800089c <main+0x370>)
 8000650:	f003 f954 	bl	80038fc <HAL_SPI_Receive>

#define SIGNIFICANT 4
		  uint8_t buf[SIGNIFICANT + 3+2];
		  buf[SIGNIFICANT + 3] = '\0';
 8000654:	2300      	movs	r3, #0
 8000656:	77fb      	strb	r3, [r7, #31]
		  if (data & 0b110)
 8000658:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800065c:	f003 0306 	and.w	r3, r3, #6
 8000660:	2b00      	cmp	r3, #0
 8000662:	d014      	beq.n	800068e <main+0x162>
		  {
			  // MAX 6675 not okay (wrong ID or TH not connected
			  for (int i = 0; i < sizeof(buf); i++)
 8000664:	2300      	movs	r3, #0
 8000666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800066a:	e00b      	b.n	8000684 <main+0x158>
				  buf[i] = 'x';
 800066c:	f107 0218 	add.w	r2, r7, #24
 8000670:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000674:	4413      	add	r3, r2
 8000676:	2278      	movs	r2, #120	; 0x78
 8000678:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < sizeof(buf); i++)
 800067a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800067e:	3301      	adds	r3, #1
 8000680:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000684:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000688:	2b08      	cmp	r3, #8
 800068a:	d9ef      	bls.n	800066c <main+0x140>
 800068c:	e05e      	b.n	800074c <main+0x220>
		  }
		  else
		  {
			  //MAX 6675 okay, prepare data
			  data >>= 3;
 800068e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8000692:	08db      	lsrs	r3, r3, #3
 8000694:	b29b      	uxth	r3, r3
 8000696:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
			  uint32_t digit = 25*(data&0b11);
 800069a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800069e:	f003 0203 	and.w	r2, r3, #3
 80006a2:	4613      	mov	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	009a      	lsls	r2, r3, #2
 80006aa:	4413      	add	r3, r2
 80006ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			  digit += (data>>2)*1000;
 80006b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80006b4:	089b      	lsrs	r3, r3, #2
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	fb03 f302 	mul.w	r3, r3, r2
 80006c2:	461a      	mov	r2, r3
 80006c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80006c8:	4413      	add	r3, r2
 80006ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			  int8_t i = SIGNIFICANT + 2;
 80006ce:	2306      	movs	r3, #6
 80006d0:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			  while (digit)
 80006d4:	e021      	b.n	800071a <main+0x1ee>
			  {
				  buf[i--] = '0' + digit%10;
 80006d6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80006da:	4b71      	ldr	r3, [pc, #452]	; (80008a0 <main+0x374>)
 80006dc:	fba3 2301 	umull	r2, r3, r3, r1
 80006e0:	08da      	lsrs	r2, r3, #3
 80006e2:	4613      	mov	r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	1aca      	subs	r2, r1, r3
 80006ec:	b2d3      	uxtb	r3, r2
 80006ee:	f997 109b 	ldrsb.w	r1, [r7, #155]	; 0x9b
 80006f2:	b2ca      	uxtb	r2, r1
 80006f4:	3a01      	subs	r2, #1
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	f887 209b 	strb.w	r2, [r7, #155]	; 0x9b
 80006fc:	3330      	adds	r3, #48	; 0x30
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000704:	440b      	add	r3, r1
 8000706:	f803 2c90 	strb.w	r2, [r3, #-144]
				  digit /= 10;
 800070a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800070e:	4a64      	ldr	r2, [pc, #400]	; (80008a0 <main+0x374>)
 8000710:	fba2 2303 	umull	r2, r3, r2, r3
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			  while (digit)
 800071a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1d9      	bne.n	80006d6 <main+0x1aa>
			  }
			  while (i > -1)
 8000722:	e00d      	b.n	8000740 <main+0x214>
			  {
				  buf[i--] = '0';
 8000724:	f997 209b 	ldrsb.w	r2, [r7, #155]	; 0x9b
 8000728:	b2d3      	uxtb	r3, r2
 800072a:	3b01      	subs	r3, #1
 800072c:	b2db      	uxtb	r3, r3
 800072e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000732:	4613      	mov	r3, r2
 8000734:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000738:	4413      	add	r3, r2
 800073a:	2230      	movs	r2, #48	; 0x30
 800073c:	f803 2c90 	strb.w	r2, [r3, #-144]
			  while (i > -1)
 8000740:	f997 309b 	ldrsb.w	r3, [r7, #155]	; 0x9b
 8000744:	2b00      	cmp	r3, #0
 8000746:	daed      	bge.n	8000724 <main+0x1f8>
			  }
			  buf[SIGNIFICANT] = '.';
 8000748:	232e      	movs	r3, #46	; 0x2e
 800074a:	773b      	strb	r3, [r7, #28]
		  }
		  lcd_set_xy(&lcd, 0, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	2100      	movs	r1, #0
 8000750:	484d      	ldr	r0, [pc, #308]	; (8000888 <main+0x35c>)
 8000752:	f7ff fde7 	bl	8000324 <lcd_set_xy>
		  lcd_out(&lcd, buf);
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	4619      	mov	r1, r3
 800075c:	484a      	ldr	r0, [pc, #296]	; (8000888 <main+0x35c>)
 800075e:	f7ff fdb2 	bl	80002c6 <lcd_out>
		  lcd_write_data(&lcd, 223);
 8000762:	21df      	movs	r1, #223	; 0xdf
 8000764:	4848      	ldr	r0, [pc, #288]	; (8000888 <main+0x35c>)
 8000766:	f7ff fe63 	bl	8000430 <lcd_write_data>
		  buf[SIGNIFICANT + 3] = '\r';
 800076a:	230d      	movs	r3, #13
 800076c:	77fb      	strb	r3, [r7, #31]
		  buf[SIGNIFICANT + 3+1] = '\n';
 800076e:	230a      	movs	r3, #10
 8000770:	f887 3020 	strb.w	r3, [r7, #32]
		  CDC_Transmit_FS(buf, sizeof(buf));
 8000774:	f107 0318 	add.w	r3, r7, #24
 8000778:	2109      	movs	r1, #9
 800077a:	4618      	mov	r0, r3
 800077c:	f007 fdd8 	bl	8008330 <CDC_Transmit_FS>
		  for (int i = 0; i < sizeof(buf); i++)
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000786:	e00b      	b.n	80007a0 <main+0x274>
		  {
			  buf[i] = 0;
 8000788:	f107 0218 	add.w	r2, r7, #24
 800078c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000790:	4413      	add	r3, r2
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < sizeof(buf); i++)
 8000796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800079a:	3301      	adds	r3, #1
 800079c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80007a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007a4:	2b08      	cmp	r3, #8
 80007a6:	d9ef      	bls.n	8000788 <main+0x25c>
		  }

		  uint16_t temp = (encoder_value>>1)&0xff;
 80007a8:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <main+0x378>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		  for (int i = 0; i < 5; i++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80007bc:	e024      	b.n	8000808 <main+0x2dc>
		  {
			  buf[4-i] = temp % 10 + '0';
 80007be:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80007c2:	4b37      	ldr	r3, [pc, #220]	; (80008a0 <main+0x374>)
 80007c4:	fba3 1302 	umull	r1, r3, r3, r2
 80007c8:	08d9      	lsrs	r1, r3, #3
 80007ca:	460b      	mov	r3, r1
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	440b      	add	r3, r1
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007dc:	f1c3 0304 	rsb	r3, r3, #4
 80007e0:	3230      	adds	r2, #48	; 0x30
 80007e2:	b2d2      	uxtb	r2, r2
 80007e4:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80007e8:	440b      	add	r3, r1
 80007ea:	f803 2c90 	strb.w	r2, [r3, #-144]
			  temp /= 10;
 80007ee:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80007f2:	4a2b      	ldr	r2, [pc, #172]	; (80008a0 <main+0x374>)
 80007f4:	fba2 2303 	umull	r2, r3, r2, r3
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		  for (int i = 0; i < 5; i++)
 80007fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000802:	3301      	adds	r3, #1
 8000804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000808:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800080c:	2b04      	cmp	r3, #4
 800080e:	ddd6      	ble.n	80007be <main+0x292>
		  }
		  buf[5] = (encoder_value>>1)&0xff;
 8000810:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <main+0x378>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	b29b      	uxth	r3, r3
 8000818:	b2db      	uxtb	r3, r3
 800081a:	777b      	strb	r3, [r7, #29]
		  lcd_out(&lcd, buf);
 800081c:	f107 0318 	add.w	r3, r7, #24
 8000820:	4619      	mov	r1, r3
 8000822:	4819      	ldr	r0, [pc, #100]	; (8000888 <main+0x35c>)
 8000824:	f7ff fd4f 	bl	80002c6 <lcd_out>
		  lcd_set_xy(&lcd, 15, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	210f      	movs	r1, #15
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <main+0x35c>)
 800082e:	f7ff fd79 	bl	8000324 <lcd_set_xy>
		  lcd_write_data(&lcd, (encoder_value>>1)&0xff);
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <main+0x378>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	085b      	lsrs	r3, r3, #1
 8000838:	b29b      	uxth	r3, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4619      	mov	r1, r3
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <main+0x35c>)
 8000840:	f7ff fdf6 	bl	8000430 <lcd_write_data>
		  lcd_mode(&lcd, LCD_ENABLE, CURSOR_ENABLE, NO_BLINK);
 8000844:	2300      	movs	r3, #0
 8000846:	2201      	movs	r2, #1
 8000848:	2101      	movs	r1, #1
 800084a:	480f      	ldr	r0, [pc, #60]	; (8000888 <main+0x35c>)
 800084c:	f7ff fd0e 	bl	800026c <lcd_mode>
		  lcd_set_xy(&lcd, 15, 1);
 8000850:	2201      	movs	r2, #1
 8000852:	210f      	movs	r1, #15
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <main+0x35c>)
 8000856:	f7ff fd65 	bl	8000324 <lcd_set_xy>
		  STOPP;
 800085a:	f000 fb83 	bl	8000f64 <HAL_GetTick>
 800085e:	4602      	mov	r2, r0
 8000860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
 8000866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086a:	429a      	cmp	r2, r3
 800086c:	f67f aecb 	bls.w	8000606 <main+0xda>
 8000870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_GetTick() - last_time > 2)
 8000874:	e6c7      	b.n	8000606 <main+0xda>
 8000876:	bf00      	nop
 8000878:	40010800 	.word	0x40010800
 800087c:	200003dc 	.word	0x200003dc
 8000880:	08008b6c 	.word	0x08008b6c
 8000884:	08008b7c 	.word	0x08008b7c
 8000888:	200003c4 	.word	0x200003c4
 800088c:	40010c00 	.word	0x40010c00
 8000890:	08008b84 	.word	0x08008b84
 8000894:	08008b5c 	.word	0x08008b5c
 8000898:	40011000 	.word	0x40011000
 800089c:	20000424 	.word	0x20000424
 80008a0:	cccccccd 	.word	0xcccccccd
 80008a4:	2000019c 	.word	0x2000019c

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	; 0x50
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b2:	2228      	movs	r2, #40	; 0x28
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f008 f93c 	bl	8008b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d8:	2301      	movs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e6:	2301      	movs	r3, #1
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80008f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 fada 	bl	8002eb8 <HAL_RCC_OscConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800090a:	f000 f9d5 	bl	8000cb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090e:	230f      	movs	r3, #15
 8000910:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000912:	2302      	movs	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2101      	movs	r1, #1
 800092a:	4618      	mov	r0, r3
 800092c:	f002 fd44 	bl	80033b8 <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000936:	f000 f9bf 	bl	8000cb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800093a:	2310      	movs	r3, #16
 800093c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800093e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000942:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4618      	mov	r0, r3
 8000948:	f002 fe9e 	bl	8003688 <HAL_RCCEx_PeriphCLKConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000952:	f000 f9b1 	bl	8000cb8 <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3750      	adds	r7, #80	; 0x50
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_SPI1_Init+0x68>)
 8000966:	4a19      	ldr	r2, [pc, #100]	; (80009cc <MX_SPI1_Init+0x6c>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_SPI1_Init+0x68>)
 800096c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000970:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_SPI1_Init+0x68>)
 8000974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000978:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_SPI1_Init+0x68>)
 800097c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000980:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_SPI1_Init+0x68>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_SPI1_Init+0x68>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_SPI1_Init+0x68>)
 8000990:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000994:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_SPI1_Init+0x68>)
 8000998:	2230      	movs	r2, #48	; 0x30
 800099a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_SPI1_Init+0x68>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_SPI1_Init+0x68>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_SPI1_Init+0x68>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_SPI1_Init+0x68>)
 80009b0:	220a      	movs	r2, #10
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_SPI1_Init+0x68>)
 80009b6:	f002 ff1d 	bl	80037f4 <HAL_SPI_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80009c0:	f000 f97a 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000424 	.word	0x20000424
 80009cc:	40013000 	.word	0x40013000

080009d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	463b      	mov	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_TIM1_Init+0xa8>)
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <MX_TIM1_Init+0xac>)
 80009f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = HAL_RCC_GetSysClockFreq()/1000000-1;
 80009f2:	f002 fdcb 	bl	800358c <HAL_RCC_GetSysClockFreq>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4a21      	ldr	r2, [pc, #132]	; (8000a80 <MX_TIM1_Init+0xb0>)
 80009fa:	fba2 2303 	umull	r2, r3, r2, r3
 80009fe:	0c9b      	lsrs	r3, r3, #18
 8000a00:	3b01      	subs	r3, #1
 8000a02:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <MX_TIM1_Init+0xa8>)
 8000a04:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_TIM1_Init+0xa8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_TIM1_Init+0xa8>)
 8000a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_TIM1_Init+0xa8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_TIM1_Init+0xa8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_TIM1_Init+0xa8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a26:	4814      	ldr	r0, [pc, #80]	; (8000a78 <MX_TIM1_Init+0xa8>)
 8000a28:	f003 fb14 	bl	8004054 <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000a32:	f000 f941 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_TIM1_Init+0xa8>)
 8000a44:	f003 fba0 	bl	8004188 <HAL_TIM_ConfigClockSource>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000a4e:	f000 f933 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <MX_TIM1_Init+0xa8>)
 8000a60:	f003 fd4e 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a6a:	f000 f925 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200003dc 	.word	0x200003dc
 8000a7c:	40012c00 	.word	0x40012c00
 8000a80:	431bde83 	.word	0x431bde83

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a98:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <MX_GPIO_Init+0x114>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a3e      	ldr	r2, [pc, #248]	; (8000b98 <MX_GPIO_Init+0x114>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <MX_GPIO_Init+0x114>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab0:	4b39      	ldr	r3, [pc, #228]	; (8000b98 <MX_GPIO_Init+0x114>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a38      	ldr	r2, [pc, #224]	; (8000b98 <MX_GPIO_Init+0x114>)
 8000ab6:	f043 0320 	orr.w	r3, r3, #32
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b36      	ldr	r3, [pc, #216]	; (8000b98 <MX_GPIO_Init+0x114>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0320 	and.w	r3, r3, #32
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <MX_GPIO_Init+0x114>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a32      	ldr	r2, [pc, #200]	; (8000b98 <MX_GPIO_Init+0x114>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <MX_GPIO_Init+0x114>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <MX_GPIO_Init+0x114>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a2c      	ldr	r2, [pc, #176]	; (8000b98 <MX_GPIO_Init+0x114>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <MX_GPIO_Init+0x114>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000afe:	4827      	ldr	r0, [pc, #156]	; (8000b9c <MX_GPIO_Init+0x118>)
 8000b00:	f000 fce3 	bl	80014ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000b0a:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <MX_GPIO_Init+0x11c>)
 8000b0c:	f000 fcdd 	bl	80014ca <HAL_GPIO_WritePin>
                          |hd_4_Pin|hd_5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b16:	4823      	ldr	r0, [pc, #140]	; (8000ba4 <MX_GPIO_Init+0x120>)
 8000b18:	f000 fcd7 	bl	80014ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4619      	mov	r1, r3
 8000b34:	4819      	ldr	r0, [pc, #100]	; (8000b9c <MX_GPIO_Init+0x118>)
 8000b36:	f000 fb2d 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : hd_7_Pin hd_6_Pin hd_RS_Pin hd_E_Pin
                           hd_4_Pin hd_5_Pin */
  GPIO_InitStruct.Pin = hd_7_Pin|hd_6_Pin|hd_RS_Pin|hd_E_Pin
 8000b3a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000b3e:	613b      	str	r3, [r7, #16]
                          |hd_4_Pin|hd_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <MX_GPIO_Init+0x11c>)
 8000b54:	f000 fb1e 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 8000b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <MX_GPIO_Init+0x120>)
 8000b72:	f000 fb0f 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : enc_s_Pin enc_a_Pin enc_b_Pin */
  GPIO_InitStruct.Pin = enc_s_Pin|enc_a_Pin|enc_b_Pin;
 8000b76:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_GPIO_Init+0x11c>)
 8000b8c:	f000 fb02 	bl	8001194 <HAL_GPIO_Init>

}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	40010800 	.word	0x40010800

08000ba8 <process_encoder>:

/* USER CODE BEGIN 4 */
void process_encoder(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin)?0b10:0 +
 8000bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb2:	483e      	ldr	r0, [pc, #248]	; (8000cac <process_encoder+0x104>)
 8000bb4:	f000 fc72 	bl	800149c <HAL_GPIO_ReadPin>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10b      	bne.n	8000bd6 <process_encoder+0x2e>
		   HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin)?0b01:0);
 8000bbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc2:	483a      	ldr	r0, [pc, #232]	; (8000cac <process_encoder+0x104>)
 8000bc4:	f000 fc6a 	bl	800149c <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	bf14      	ite	ne
 8000bce:	2301      	movne	r3, #1
 8000bd0:	2300      	moveq	r3, #0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	e000      	b.n	8000bd8 <process_encoder+0x30>
	new = (HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin)?0b10:0 +
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000bda:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <process_encoder+0x108>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d85d      	bhi.n	8000c9e <process_encoder+0xf6>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <process_encoder+0x40>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000c1f 	.word	0x08000c1f
 8000bec:	08000c45 	.word	0x08000c45
 8000bf0:	08000bf9 	.word	0x08000bf9
 8000bf4:	08000c6b 	.word	0x08000c6b
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d105      	bne.n	8000c0a <process_encoder+0x62>
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <process_encoder+0x10c>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <process_encoder+0x10c>)
 8000c08:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d13f      	bne.n	8000c90 <process_encoder+0xe8>
 8000c10:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <process_encoder+0x10c>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <process_encoder+0x10c>)
 8000c1a:	801a      	strh	r2, [r3, #0]
			break;
 8000c1c:	e038      	b.n	8000c90 <process_encoder+0xe8>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d105      	bne.n	8000c30 <process_encoder+0x88>
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <process_encoder+0x10c>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <process_encoder+0x10c>)
 8000c2e:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d12e      	bne.n	8000c94 <process_encoder+0xec>
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <process_encoder+0x10c>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <process_encoder+0x10c>)
 8000c40:	801a      	strh	r2, [r3, #0]
			break;
 8000c42:	e027      	b.n	8000c94 <process_encoder+0xec>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d105      	bne.n	8000c56 <process_encoder+0xae>
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <process_encoder+0x10c>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <process_encoder+0x10c>)
 8000c54:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d11d      	bne.n	8000c98 <process_encoder+0xf0>
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <process_encoder+0x10c>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <process_encoder+0x10c>)
 8000c66:	801a      	strh	r2, [r3, #0]
			break;
 8000c68:	e016      	b.n	8000c98 <process_encoder+0xf0>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d105      	bne.n	8000c7c <process_encoder+0xd4>
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <process_encoder+0x10c>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <process_encoder+0x10c>)
 8000c7a:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d10c      	bne.n	8000c9c <process_encoder+0xf4>
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <process_encoder+0x10c>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <process_encoder+0x10c>)
 8000c8c:	801a      	strh	r2, [r3, #0]
			break;
 8000c8e:	e005      	b.n	8000c9c <process_encoder+0xf4>
			break;
 8000c90:	bf00      	nop
 8000c92:	e004      	b.n	8000c9e <process_encoder+0xf6>
			break;
 8000c94:	bf00      	nop
 8000c96:	e002      	b.n	8000c9e <process_encoder+0xf6>
			break;
 8000c98:	bf00      	nop
 8000c9a:	e000      	b.n	8000c9e <process_encoder+0xf6>
			break;
 8000c9c:	bf00      	nop
			}
		}
	old = new;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <process_encoder+0x108>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	7013      	strb	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40010c00 	.word	0x40010c00
 8000cb0:	2000019e 	.word	0x2000019e
 8000cb4:	2000019c 	.word	0x2000019c

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_MspInit+0x5c>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <HAL_MspInit+0x5c>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_MspInit+0x5c>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_MspInit+0x5c>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_MspInit+0x5c>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_MspInit+0x5c>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_MspInit+0x60>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_MspInit+0x60>)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000

08000d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <HAL_SPI_MspInit+0x88>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d12f      	bne.n	8000da8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_SPI_MspInit+0x8c>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <HAL_SPI_MspInit+0x8c>)
 8000d4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_SPI_MspInit+0x8c>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_SPI_MspInit+0x8c>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <HAL_SPI_MspInit+0x8c>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_SPI_MspInit+0x8c>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d78:	2330      	movs	r3, #48	; 0x30
 8000d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480b      	ldr	r0, [pc, #44]	; (8000db8 <HAL_SPI_MspInit+0x90>)
 8000d8c:	f000 fa02 	bl	8001194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d90:	2340      	movs	r3, #64	; 0x40
 8000d92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_SPI_MspInit+0x90>)
 8000da4:	f000 f9f6 	bl	8001194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40013000 	.word	0x40013000
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010800 	.word	0x40010800

08000dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <HAL_TIM_Base_MspInit+0x34>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10b      	bne.n	8000de6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_TIM_Base_MspInit+0x38>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_TIM_Base_MspInit+0x38>)
 8000dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dd8:	6193      	str	r3, [r2, #24]
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_TIM_Base_MspInit+0x38>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40012c00 	.word	0x40012c00
 8000df4:	40021000 	.word	0x40021000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3e:	f000 f87f 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e4e:	f000 fc9e 	bl	800178e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20001114 	.word	0x20001114

08000e5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	; (8000ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	; (8000eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e8e:	f7ff ffe5 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f007 fe2b 	bl	8008aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e96:	f7ff fb49 	bl	800052c <main>
  bx lr
 8000e9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000ea4:	08008c38 	.word	0x08008c38
  ldr r2, =_sbss
 8000ea8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000eac:	20001400 	.word	0x20001400

08000eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC1_2_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_Init+0x28>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_Init+0x28>)
 8000ebe:	f043 0310 	orr.w	r3, r3, #16
 8000ec2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 f923 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fef8 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40022000 	.word	0x40022000

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f93b 	bl	800117a <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 f903 	bl	8001126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000004 	.word	0x20000004
 8000f38:	2000000c 	.word	0x2000000c
 8000f3c:	20000008 	.word	0x20000008

08000f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x1c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_IncTick+0x20>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a03      	ldr	r2, [pc, #12]	; (8000f60 <HAL_IncTick+0x20>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	2000000c 	.word	0x2000000c
 8000f60:	2000047c 	.word	0x2000047c

08000f64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b02      	ldr	r3, [pc, #8]	; (8000f74 <HAL_GetTick+0x10>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	2000047c 	.word	0x2000047c

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db0b      	blt.n	8001006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	4906      	ldr	r1, [pc, #24]	; (8001010 <__NVIC_EnableIRQ+0x34>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff90 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff2d 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001138:	f7ff ff42 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 800113c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff ff90 	bl	8001068 <NVIC_EncodePriority>
 8001148:	4602      	mov	r2, r0
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff5f 	bl	8001014 <__NVIC_SetPriority>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff35 	bl	8000fdc <__NVIC_EnableIRQ>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffa2 	bl	80010cc <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b08b      	sub	sp, #44	; 0x2c
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a6:	e169      	b.n	800147c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011a8:	2201      	movs	r2, #1
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8158 	bne.w	8001476 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4a9a      	ldr	r2, [pc, #616]	; (8001434 <HAL_GPIO_Init+0x2a0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d05e      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 80011d0:	4a98      	ldr	r2, [pc, #608]	; (8001434 <HAL_GPIO_Init+0x2a0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d875      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 80011d6:	4a98      	ldr	r2, [pc, #608]	; (8001438 <HAL_GPIO_Init+0x2a4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d058      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 80011dc:	4a96      	ldr	r2, [pc, #600]	; (8001438 <HAL_GPIO_Init+0x2a4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d86f      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 80011e2:	4a96      	ldr	r2, [pc, #600]	; (800143c <HAL_GPIO_Init+0x2a8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d052      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 80011e8:	4a94      	ldr	r2, [pc, #592]	; (800143c <HAL_GPIO_Init+0x2a8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d869      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 80011ee:	4a94      	ldr	r2, [pc, #592]	; (8001440 <HAL_GPIO_Init+0x2ac>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d04c      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 80011f4:	4a92      	ldr	r2, [pc, #584]	; (8001440 <HAL_GPIO_Init+0x2ac>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d863      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 80011fa:	4a92      	ldr	r2, [pc, #584]	; (8001444 <HAL_GPIO_Init+0x2b0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d046      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 8001200:	4a90      	ldr	r2, [pc, #576]	; (8001444 <HAL_GPIO_Init+0x2b0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d85d      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 8001206:	2b12      	cmp	r3, #18
 8001208:	d82a      	bhi.n	8001260 <HAL_GPIO_Init+0xcc>
 800120a:	2b12      	cmp	r3, #18
 800120c:	d859      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 800120e:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <HAL_GPIO_Init+0x80>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	0800128f 	.word	0x0800128f
 8001218:	08001269 	.word	0x08001269
 800121c:	0800127b 	.word	0x0800127b
 8001220:	080012bd 	.word	0x080012bd
 8001224:	080012c3 	.word	0x080012c3
 8001228:	080012c3 	.word	0x080012c3
 800122c:	080012c3 	.word	0x080012c3
 8001230:	080012c3 	.word	0x080012c3
 8001234:	080012c3 	.word	0x080012c3
 8001238:	080012c3 	.word	0x080012c3
 800123c:	080012c3 	.word	0x080012c3
 8001240:	080012c3 	.word	0x080012c3
 8001244:	080012c3 	.word	0x080012c3
 8001248:	080012c3 	.word	0x080012c3
 800124c:	080012c3 	.word	0x080012c3
 8001250:	080012c3 	.word	0x080012c3
 8001254:	080012c3 	.word	0x080012c3
 8001258:	08001271 	.word	0x08001271
 800125c:	08001285 	.word	0x08001285
 8001260:	4a79      	ldr	r2, [pc, #484]	; (8001448 <HAL_GPIO_Init+0x2b4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001266:	e02c      	b.n	80012c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	623b      	str	r3, [r7, #32]
          break;
 800126e:	e029      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	3304      	adds	r3, #4
 8001276:	623b      	str	r3, [r7, #32]
          break;
 8001278:	e024      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	3308      	adds	r3, #8
 8001280:	623b      	str	r3, [r7, #32]
          break;
 8001282:	e01f      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	330c      	adds	r3, #12
 800128a:	623b      	str	r3, [r7, #32]
          break;
 800128c:	e01a      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001296:	2304      	movs	r3, #4
 8001298:	623b      	str	r3, [r7, #32]
          break;
 800129a:	e013      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d105      	bne.n	80012b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a4:	2308      	movs	r3, #8
 80012a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	611a      	str	r2, [r3, #16]
          break;
 80012ae:	e009      	b.n	80012c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b0:	2308      	movs	r3, #8
 80012b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	615a      	str	r2, [r3, #20]
          break;
 80012ba:	e003      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
          break;
 80012c0:	e000      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          break;
 80012c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2bff      	cmp	r3, #255	; 0xff
 80012c8:	d801      	bhi.n	80012ce <HAL_GPIO_Init+0x13a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	e001      	b.n	80012d2 <HAL_GPIO_Init+0x13e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3304      	adds	r3, #4
 80012d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2bff      	cmp	r3, #255	; 0xff
 80012d8:	d802      	bhi.n	80012e0 <HAL_GPIO_Init+0x14c>
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	e002      	b.n	80012e6 <HAL_GPIO_Init+0x152>
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	3b08      	subs	r3, #8
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	210f      	movs	r1, #15
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	401a      	ands	r2, r3
 80012f8:	6a39      	ldr	r1, [r7, #32]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	431a      	orrs	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 80b1 	beq.w	8001476 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001314:	4b4d      	ldr	r3, [pc, #308]	; (800144c <HAL_GPIO_Init+0x2b8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a4c      	ldr	r2, [pc, #304]	; (800144c <HAL_GPIO_Init+0x2b8>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b4a      	ldr	r3, [pc, #296]	; (800144c <HAL_GPIO_Init+0x2b8>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800132c:	4a48      	ldr	r2, [pc, #288]	; (8001450 <HAL_GPIO_Init+0x2bc>)
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3302      	adds	r3, #2
 8001334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001338:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a40      	ldr	r2, [pc, #256]	; (8001454 <HAL_GPIO_Init+0x2c0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d013      	beq.n	8001380 <HAL_GPIO_Init+0x1ec>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a3f      	ldr	r2, [pc, #252]	; (8001458 <HAL_GPIO_Init+0x2c4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d00d      	beq.n	800137c <HAL_GPIO_Init+0x1e8>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a3e      	ldr	r2, [pc, #248]	; (800145c <HAL_GPIO_Init+0x2c8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d007      	beq.n	8001378 <HAL_GPIO_Init+0x1e4>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a3d      	ldr	r2, [pc, #244]	; (8001460 <HAL_GPIO_Init+0x2cc>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_GPIO_Init+0x1e0>
 8001370:	2303      	movs	r3, #3
 8001372:	e006      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 8001374:	2304      	movs	r3, #4
 8001376:	e004      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 8001378:	2302      	movs	r3, #2
 800137a:	e002      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 8001380:	2300      	movs	r3, #0
 8001382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001384:	f002 0203 	and.w	r2, r2, #3
 8001388:	0092      	lsls	r2, r2, #2
 800138a:	4093      	lsls	r3, r2
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001392:	492f      	ldr	r1, [pc, #188]	; (8001450 <HAL_GPIO_Init+0x2bc>)
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	3302      	adds	r3, #2
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	492c      	ldr	r1, [pc, #176]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	4928      	ldr	r1, [pc, #160]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4922      	ldr	r1, [pc, #136]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	491e      	ldr	r1, [pc, #120]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	4918      	ldr	r1, [pc, #96]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	608b      	str	r3, [r1, #8]
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	43db      	mvns	r3, r3
 8001412:	4914      	ldr	r1, [pc, #80]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 8001414:	4013      	ands	r3, r2
 8001416:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d021      	beq.n	8001468 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	490e      	ldr	r1, [pc, #56]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	60cb      	str	r3, [r1, #12]
 8001430:	e021      	b.n	8001476 <HAL_GPIO_Init+0x2e2>
 8001432:	bf00      	nop
 8001434:	10320000 	.word	0x10320000
 8001438:	10310000 	.word	0x10310000
 800143c:	10220000 	.word	0x10220000
 8001440:	10210000 	.word	0x10210000
 8001444:	10120000 	.word	0x10120000
 8001448:	10110000 	.word	0x10110000
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000
 8001454:	40010800 	.word	0x40010800
 8001458:	40010c00 	.word	0x40010c00
 800145c:	40011000 	.word	0x40011000
 8001460:	40011400 	.word	0x40011400
 8001464:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_GPIO_Init+0x304>)
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	43db      	mvns	r3, r3
 8001470:	4909      	ldr	r1, [pc, #36]	; (8001498 <HAL_GPIO_Init+0x304>)
 8001472:	4013      	ands	r3, r2
 8001474:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	3301      	adds	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	f47f ae8e 	bne.w	80011a8 <HAL_GPIO_Init+0x14>
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	372c      	adds	r7, #44	; 0x2c
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40010400 	.word	0x40010400

0800149c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e001      	b.n	80014be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	807b      	strh	r3, [r7, #2]
 80014d6:	4613      	mov	r3, r2
 80014d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014da:	787b      	ldrb	r3, [r7, #1]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e0:	887a      	ldrh	r2, [r7, #2]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014e6:	e003      	b.n	80014f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014e8:	887b      	ldrh	r3, [r7, #2]
 80014ea:	041a      	lsls	r2, r3, #16
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	611a      	str	r2, [r3, #16]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b085      	sub	sp, #20
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800150c:	887a      	ldrh	r2, [r7, #2]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4013      	ands	r3, r2
 8001512:	041a      	lsls	r2, r3, #16
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43d9      	mvns	r1, r3
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	400b      	ands	r3, r1
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	611a      	str	r2, [r3, #16]
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	b08b      	sub	sp, #44	; 0x2c
 8001530:	af06      	add	r7, sp, #24
 8001532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e0fd      	b.n	800173a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d106      	bne.n	8001558 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f007 f820 	bl	8008598 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2203      	movs	r2, #3
 800155c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f003 f84f 	bl	8004608 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	687e      	ldr	r6, [r7, #4]
 8001572:	466d      	mov	r5, sp
 8001574:	f106 0410 	add.w	r4, r6, #16
 8001578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	602b      	str	r3, [r5, #0]
 8001580:	1d33      	adds	r3, r6, #4
 8001582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001584:	6838      	ldr	r0, [r7, #0]
 8001586:	f003 f819 	bl	80045bc <USB_CoreInit>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2202      	movs	r2, #2
 8001594:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0ce      	b.n	800173a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 f84a 	bl	800463c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e04c      	b.n	8001648 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	3301      	adds	r3, #1
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	b298      	uxth	r0, r3
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	3336      	adds	r3, #54	; 0x36
 80015ec:	4602      	mov	r2, r0
 80015ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	440b      	add	r3, r1
 8001600:	3303      	adds	r3, #3
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	440b      	add	r3, r1
 8001614:	3338      	adds	r3, #56	; 0x38
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	440b      	add	r3, r1
 8001628:	333c      	adds	r3, #60	; 0x3c
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	440b      	add	r3, r1
 800163c:	3340      	adds	r3, #64	; 0x40
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	3301      	adds	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	429a      	cmp	r2, r3
 8001650:	d3ad      	bcc.n	80015ae <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	e044      	b.n	80016e2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	f203 1369 	addw	r3, r3, #361	; 0x169
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	3301      	adds	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d3b5      	bcc.n	8001658 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	687e      	ldr	r6, [r7, #4]
 80016f4:	466d      	mov	r5, sp
 80016f6:	f106 0410 	add.w	r4, r6, #16
 80016fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	602b      	str	r3, [r5, #0]
 8001702:	1d33      	adds	r3, r6, #4
 8001704:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001706:	6838      	ldr	r0, [r7, #0]
 8001708:	f002 ffa4 	bl	8004654 <USB_DevInit>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2202      	movs	r2, #2
 8001716:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00d      	b.n	800173a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f005 f915 	bl	8006962 <USB_DevDisconnect>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001742 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <HAL_PCD_Start+0x16>
 8001754:	2302      	movs	r3, #2
 8001756:	e016      	b.n	8001786 <HAL_PCD_Start+0x44>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f002 ff39 	bl	80045dc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800176a:	2101      	movs	r1, #1
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f007 f986 	bl	8008a7e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f005 f8e9 	bl	800694e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b088      	sub	sp, #32
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f005 f8eb 	bl	8006976 <USB_ReadInterrupts>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017aa:	d102      	bne.n	80017b2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fb61 	bl	8001e74 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 f8dd 	bl	8006976 <USB_ReadInterrupts>
 80017bc:	4603      	mov	r3, r0
 80017be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c6:	d112      	bne.n	80017ee <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017da:	b292      	uxth	r2, r2
 80017dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f006 ff54 	bl	800868e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017e6:	2100      	movs	r1, #0
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f925 	bl	8001a38 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f005 f8bf 	bl	8006976 <USB_ReadInterrupts>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001802:	d10b      	bne.n	800181c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800180c:	b29a      	uxth	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001816:	b292      	uxth	r2, r2
 8001818:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f005 f8a8 	bl	8006976 <USB_ReadInterrupts>
 8001826:	4603      	mov	r3, r0
 8001828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800182c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001830:	d10b      	bne.n	800184a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800183a:	b29a      	uxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001844:	b292      	uxth	r2, r2
 8001846:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f005 f891 	bl	8006976 <USB_ReadInterrupts>
 8001854:	4603      	mov	r3, r0
 8001856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800185e:	d126      	bne.n	80018ae <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001868:	b29a      	uxth	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0204 	bic.w	r2, r2, #4
 8001872:	b292      	uxth	r2, r2
 8001874:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001880:	b29a      	uxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0208 	bic.w	r2, r2, #8
 800188a:	b292      	uxth	r2, r2
 800188c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f006 ff35 	bl	8008700 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800189e:	b29a      	uxth	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018a8:	b292      	uxth	r2, r2
 80018aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f005 f85f 	bl	8006976 <USB_ReadInterrupts>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018c2:	f040 8084 	bne.w	80019ce <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	77fb      	strb	r3, [r7, #31]
 80018ca:	e011      	b.n	80018f0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	7ffb      	ldrb	r3, [r7, #31]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	441a      	add	r2, r3
 80018d8:	7ffb      	ldrb	r3, [r7, #31]
 80018da:	8812      	ldrh	r2, [r2, #0]
 80018dc:	b292      	uxth	r2, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	f107 0120 	add.w	r1, r7, #32
 80018e4:	440b      	add	r3, r1
 80018e6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80018ea:	7ffb      	ldrb	r3, [r7, #31]
 80018ec:	3301      	adds	r3, #1
 80018ee:	77fb      	strb	r3, [r7, #31]
 80018f0:	7ffb      	ldrb	r3, [r7, #31]
 80018f2:	2b07      	cmp	r3, #7
 80018f4:	d9ea      	bls.n	80018cc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018fe:	b29a      	uxth	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f042 0201 	orr.w	r2, r2, #1
 8001908:	b292      	uxth	r2, r2
 800190a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001916:	b29a      	uxth	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0201 	bic.w	r2, r2, #1
 8001920:	b292      	uxth	r2, r2
 8001922:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001926:	bf00      	nop
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001930:	b29b      	uxth	r3, r3
 8001932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f6      	beq.n	8001928 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001942:	b29a      	uxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800194c:	b292      	uxth	r2, r2
 800194e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001952:	2300      	movs	r3, #0
 8001954:	77fb      	strb	r3, [r7, #31]
 8001956:	e010      	b.n	800197a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001958:	7ffb      	ldrb	r3, [r7, #31]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	4611      	mov	r1, r2
 8001960:	7ffa      	ldrb	r2, [r7, #31]
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	440a      	add	r2, r1
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	f107 0120 	add.w	r1, r7, #32
 800196c:	440b      	add	r3, r1
 800196e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001972:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001974:	7ffb      	ldrb	r3, [r7, #31]
 8001976:	3301      	adds	r3, #1
 8001978:	77fb      	strb	r3, [r7, #31]
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	2b07      	cmp	r3, #7
 800197e:	d9eb      	bls.n	8001958 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001988:	b29a      	uxth	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0208 	orr.w	r2, r2, #8
 8001992:	b292      	uxth	r2, r2
 8001994:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019aa:	b292      	uxth	r2, r2
 80019ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0204 	orr.w	r2, r2, #4
 80019c2:	b292      	uxth	r2, r2
 80019c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f006 fe7f 	bl	80086cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f004 ffcf 	bl	8006976 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e2:	d10e      	bne.n	8001a02 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019f6:	b292      	uxth	r2, r2
 80019f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f006 fe38 	bl	8008672 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f004 ffb5 	bl	8006976 <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a16:	d10b      	bne.n	8001a30 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a2a:	b292      	uxth	r2, r2
 8001a2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001a30:	bf00      	nop
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_PCD_SetAddress+0x1a>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e013      	b.n	8001a7a <HAL_PCD_SetAddress+0x42>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 ff5c 	bl	8006928 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	4608      	mov	r0, r1
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4603      	mov	r3, r0
 8001a92:	70fb      	strb	r3, [r7, #3]
 8001a94:	460b      	mov	r3, r1
 8001a96:	803b      	strh	r3, [r7, #0]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da0e      	bge.n	8001ac6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	705a      	strb	r2, [r3, #1]
 8001ac4:	e00e      	b.n	8001ae4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	f003 0207 	and.w	r2, r3, #7
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001af0:	883a      	ldrh	r2, [r7, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	78ba      	ldrb	r2, [r7, #2]
 8001afa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	785b      	ldrb	r3, [r3, #1]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b0e:	78bb      	ldrb	r3, [r7, #2]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d102      	bne.n	8001b1a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_PCD_EP_Open+0xa6>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e00e      	b.n	8001b46 <HAL_PCD_EP_Open+0xc4>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fdac 	bl	8004694 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b44:	7afb      	ldrb	r3, [r7, #11]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	460b      	mov	r3, r1
 8001b58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	da0e      	bge.n	8001b80 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	705a      	strb	r2, [r3, #1]
 8001b7e:	e00e      	b.n	8001b9e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	f003 0207 	and.w	r2, r3, #7
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_PCD_EP_Close+0x6a>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e00e      	b.n	8001bd6 <HAL_PCD_EP_Close+0x88>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68f9      	ldr	r1, [r7, #12]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 f8ce 	bl	8004d68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	460b      	mov	r3, r1
 8001bec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bee:	7afb      	ldrb	r3, [r7, #11]
 8001bf0:	f003 0207 	and.w	r2, r3, #7
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c2a:	7afb      	ldrb	r3, [r7, #11]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d106      	bne.n	8001c42 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6979      	ldr	r1, [r7, #20]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fa80 	bl	8005140 <USB_EPStartXfer>
 8001c40:	e005      	b.n	8001c4e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6979      	ldr	r1, [r7, #20]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 fa79 	bl	8005140 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	f003 0207 	and.w	r2, r3, #7
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	460b      	mov	r3, r1
 8001c94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c96:	7afb      	ldrb	r3, [r7, #11]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4413      	add	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd2:	7afb      	ldrb	r3, [r7, #11]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d106      	bne.n	8001cf6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6979      	ldr	r1, [r7, #20]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 fa26 	bl	8005140 <USB_EPStartXfer>
 8001cf4:	e005      	b.n	8001d02 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6979      	ldr	r1, [r7, #20]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fa1f 	bl	8005140 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	f003 0207 	and.w	r2, r3, #7
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d901      	bls.n	8001d2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e04c      	b.n	8001dc4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	da0e      	bge.n	8001d50 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	705a      	strb	r2, [r3, #1]
 8001d4e:	e00c      	b.n	8001d6a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_PCD_EP_SetStall+0x7e>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e01c      	b.n	8001dc4 <HAL_PCD_EP_SetStall+0xb8>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68f9      	ldr	r1, [r7, #12]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f004 fcc8 	bl	800672e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d108      	bne.n	8001dba <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001db2:	4619      	mov	r1, r3
 8001db4:	4610      	mov	r0, r2
 8001db6:	f004 fded 	bl	8006994 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	f003 020f 	and.w	r2, r3, #15
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d901      	bls.n	8001dea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e040      	b.n	8001e6c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	da0e      	bge.n	8001e10 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	705a      	strb	r2, [r3, #1]
 8001e0e:	e00e      	b.n	8001e2e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	f003 0207 	and.w	r2, r3, #7
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_PCD_EP_ClrStall+0x82>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e00e      	b.n	8001e6c <HAL_PCD_EP_ClrStall+0xa0>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68f9      	ldr	r1, [r7, #12]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f004 fcb6 	bl	80067ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	; 0x38
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e7c:	e2ec      	b.n	8002458 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e86:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001e94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f040 8161 	bne.w	8002160 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d152      	bne.n	8001f4e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb8:	81fb      	strh	r3, [r7, #14]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
 8001ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3328      	adds	r3, #40	; 0x28
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	441a      	add	r2, r3
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f006 fb95 	bl	800863e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 829b 	beq.w	8002458 <PCD_EP_ISR_Handler+0x5e4>
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 8296 	bne.w	8002458 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f4c:	e284      	b.n	8002458 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d034      	beq.n	8001fd2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3306      	adds	r3, #6
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f004 fd44 	bl	8006a34 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fb8:	4013      	ands	r3, r2
 8001fba:	823b      	strh	r3, [r7, #16]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	8a3a      	ldrh	r2, [r7, #16]
 8001fc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f006 fb0a 	bl	80085e4 <HAL_PCD_SetupStageCallback>
 8001fd0:	e242      	b.n	8002458 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fd2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f280 823e 	bge.w	8002458 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fe8:	4013      	ands	r3, r2
 8001fea:	83bb      	strh	r3, [r7, #28]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	8bba      	ldrh	r2, [r7, #28]
 8001ff2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002002:	b29b      	uxth	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	3306      	adds	r3, #6
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	4413      	add	r3, r2
 8002018:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d019      	beq.n	8002062 <PCD_EP_ISR_Handler+0x1ee>
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d015      	beq.n	8002062 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	6959      	ldr	r1, [r3, #20]
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002046:	b29b      	uxth	r3, r3
 8002048:	f004 fcf4 	bl	8006a34 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	441a      	add	r2, r3
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800205a:	2100      	movs	r1, #0
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f006 fad3 	bl	8008608 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800206e:	2b00      	cmp	r3, #0
 8002070:	f040 81f2 	bne.w	8002458 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002082:	b29b      	uxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4413      	add	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d112      	bne.n	80020c2 <PCD_EP_ISR_Handler+0x24e>
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	801a      	strh	r2, [r3, #0]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	801a      	strh	r2, [r3, #0]
 80020c0:	e02f      	b.n	8002122 <PCD_EP_ISR_Handler+0x2ae>
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b3e      	cmp	r3, #62	; 0x3e
 80020c8:	d813      	bhi.n	80020f2 <PCD_EP_ISR_Handler+0x27e>
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	085b      	lsrs	r3, r3, #1
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <PCD_EP_ISR_Handler+0x270>
 80020de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e0:	3301      	adds	r3, #1
 80020e2:	633b      	str	r3, [r7, #48]	; 0x30
 80020e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	029b      	lsls	r3, r3, #10
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	801a      	strh	r2, [r3, #0]
 80020f0:	e017      	b.n	8002122 <PCD_EP_ISR_Handler+0x2ae>
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	633b      	str	r3, [r7, #48]	; 0x30
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <PCD_EP_ISR_Handler+0x298>
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002108:	3b01      	subs	r3, #1
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
 800210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210e:	b29b      	uxth	r3, r3
 8002110:	029b      	lsls	r3, r3, #10
 8002112:	b29b      	uxth	r3, r3
 8002114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800211c:	b29a      	uxth	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	b29b      	uxth	r3, r3
 800212a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800212e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002132:	827b      	strh	r3, [r7, #18]
 8002134:	8a7b      	ldrh	r3, [r7, #18]
 8002136:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800213a:	827b      	strh	r3, [r7, #18]
 800213c:	8a7b      	ldrh	r3, [r7, #18]
 800213e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002142:	827b      	strh	r3, [r7, #18]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	8a7b      	ldrh	r3, [r7, #18]
 800214a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800214e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215a:	b29b      	uxth	r3, r3
 800215c:	8013      	strh	r3, [r2, #0]
 800215e:	e17b      	b.n	8002458 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002172:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002176:	2b00      	cmp	r3, #0
 8002178:	f280 80ea 	bge.w	8002350 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	b29a      	uxth	r2, r3
 800218e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002192:	4013      	ands	r3, r2
 8002194:	853b      	strh	r3, [r7, #40]	; 0x28
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021aa:	b292      	uxth	r2, r2
 80021ac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021ae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	7b1b      	ldrb	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d122      	bne.n	8002212 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	3306      	adds	r3, #6
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80021f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 8087 	beq.w	800230c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	6959      	ldr	r1, [r3, #20]
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	88da      	ldrh	r2, [r3, #6]
 800220a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800220c:	f004 fc12 	bl	8006a34 <USB_ReadPMA>
 8002210:	e07c      	b.n	800230c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	78db      	ldrb	r3, [r3, #3]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d108      	bne.n	800222c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800221a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800221c:	461a      	mov	r2, r3
 800221e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f927 	bl	8002474 <HAL_PCD_EP_DB_Receive>
 8002226:	4603      	mov	r3, r0
 8002228:	86fb      	strh	r3, [r7, #54]	; 0x36
 800222a:	e06f      	b.n	800230c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002246:	847b      	strh	r3, [r7, #34]	; 0x22
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	441a      	add	r2, r3
 8002256:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800225c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002264:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002268:	b29b      	uxth	r3, r3
 800226a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d021      	beq.n	80022ca <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	3302      	adds	r3, #2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ae:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d02a      	beq.n	800230c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	6959      	ldr	r1, [r3, #20]
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	891a      	ldrh	r2, [r3, #8]
 80022c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022c4:	f004 fbb6 	bl	8006a34 <USB_ReadPMA>
 80022c8:	e020      	b.n	800230c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	3306      	adds	r3, #6
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d008      	beq.n	800230c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	6959      	ldr	r1, [r3, #20]
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	895a      	ldrh	r2, [r3, #10]
 8002306:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002308:	f004 fb94 	bl	8006a34 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	69da      	ldr	r2, [r3, #28]
 8002310:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002312:	441a      	add	r2, r3
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800231e:	441a      	add	r2, r3
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <PCD_EP_ISR_Handler+0x4c2>
 800232c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	429a      	cmp	r2, r3
 8002334:	d206      	bcs.n	8002344 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f006 f963 	bl	8008608 <HAL_PCD_DataOutStageCallback>
 8002342:	e005      	b.n	8002350 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800234a:	4618      	mov	r0, r3
 800234c:	f002 fef8 	bl	8005140 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002350:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	2b00      	cmp	r3, #0
 8002358:	d07e      	beq.n	8002458 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800235a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002388:	843b      	strh	r3, [r7, #32]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	441a      	add	r2, r3
 8002398:	8c3b      	ldrh	r3, [r7, #32]
 800239a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800239e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	78db      	ldrb	r3, [r3, #3]
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d00c      	beq.n	80023c8 <PCD_EP_ISR_Handler+0x554>
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	78db      	ldrb	r3, [r3, #3]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d146      	bne.n	800244c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d141      	bne.n	800244c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	3302      	adds	r3, #2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023f0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	8bfb      	ldrh	r3, [r7, #30]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d906      	bls.n	800240a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	8bfb      	ldrh	r3, [r7, #30]
 8002402:	1ad2      	subs	r2, r2, r3
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	619a      	str	r2, [r3, #24]
 8002408:	e002      	b.n	8002410 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d106      	bne.n	8002426 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f006 f90d 	bl	800863e <HAL_PCD_DataInStageCallback>
 8002424:	e018      	b.n	8002458 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	8bfb      	ldrh	r3, [r7, #30]
 800242c:	441a      	add	r2, r3
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	69da      	ldr	r2, [r3, #28]
 8002436:	8bfb      	ldrh	r3, [r7, #30]
 8002438:	441a      	add	r2, r3
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002444:	4618      	mov	r0, r3
 8002446:	f002 fe7b 	bl	8005140 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800244a:	e005      	b.n	8002458 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800244c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800244e:	461a      	mov	r2, r3
 8002450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f91b 	bl	800268e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002460:	b29b      	uxth	r3, r3
 8002462:	b21b      	sxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	f6ff ad0a 	blt.w	8001e7e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3738      	adds	r7, #56	; 0x38
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d07e      	beq.n	800258a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002494:	b29b      	uxth	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	3302      	adds	r3, #2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	8b7b      	ldrh	r3, [r7, #26]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d306      	bcc.n	80024ce <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	8b7b      	ldrh	r3, [r7, #26]
 80024c6:	1ad2      	subs	r2, r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	619a      	str	r2, [r3, #24]
 80024cc:	e002      	b.n	80024d4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d123      	bne.n	8002524 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f6:	833b      	strh	r3, [r7, #24]
 80024f8:	8b3b      	ldrh	r3, [r7, #24]
 80024fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024fe:	833b      	strh	r3, [r7, #24]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	441a      	add	r2, r3
 800250e:	8b3b      	ldrh	r3, [r7, #24]
 8002510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002520:	b29b      	uxth	r3, r3
 8002522:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01f      	beq.n	800256e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002548:	82fb      	strh	r3, [r7, #22]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	441a      	add	r2, r3
 8002558:	8afb      	ldrh	r3, [r7, #22]
 800255a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800255e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002566:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800256a:	b29b      	uxth	r3, r3
 800256c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800256e:	8b7b      	ldrh	r3, [r7, #26]
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8087 	beq.w	8002684 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	6959      	ldr	r1, [r3, #20]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	891a      	ldrh	r2, [r3, #8]
 8002582:	8b7b      	ldrh	r3, [r7, #26]
 8002584:	f004 fa56 	bl	8006a34 <USB_ReadPMA>
 8002588:	e07c      	b.n	8002684 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	3306      	adds	r3, #6
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	699a      	ldr	r2, [r3, #24]
 80025b8:	8b7b      	ldrh	r3, [r7, #26]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d306      	bcc.n	80025cc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	8b7b      	ldrh	r3, [r7, #26]
 80025c4:	1ad2      	subs	r2, r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	619a      	str	r2, [r3, #24]
 80025ca:	e002      	b.n	80025d2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d123      	bne.n	8002622 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f4:	83fb      	strh	r3, [r7, #30]
 80025f6:	8bfb      	ldrh	r3, [r7, #30]
 80025f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025fc:	83fb      	strh	r3, [r7, #30]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	441a      	add	r2, r3
 800260c:	8bfb      	ldrh	r3, [r7, #30]
 800260e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261e:	b29b      	uxth	r3, r3
 8002620:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d11f      	bne.n	800266c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002646:	83bb      	strh	r3, [r7, #28]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	441a      	add	r2, r3
 8002656:	8bbb      	ldrh	r3, [r7, #28]
 8002658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800265c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002664:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002668:	b29b      	uxth	r3, r3
 800266a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800266c:	8b7b      	ldrh	r3, [r7, #26]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	6959      	ldr	r1, [r3, #20]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	895a      	ldrh	r2, [r3, #10]
 800267e:	8b7b      	ldrh	r3, [r7, #26]
 8002680:	f004 f9d8 	bl	8006a34 <USB_ReadPMA>
    }
  }

  return count;
 8002684:	8b7b      	ldrh	r3, [r7, #26]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b0a2      	sub	sp, #136	; 0x88
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	4613      	mov	r3, r2
 800269a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 81c7 	beq.w	8002a36 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	3302      	adds	r3, #2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	699a      	ldr	r2, [r3, #24]
 80026d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026dc:	429a      	cmp	r2, r3
 80026de:	d907      	bls.n	80026f0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e8:	1ad2      	subs	r2, r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	619a      	str	r2, [r3, #24]
 80026ee:	e002      	b.n	80026f6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 80b9 	bne.w	8002872 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	785b      	ldrb	r3, [r3, #1]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d126      	bne.n	8002756 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	4413      	add	r3, r2
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	011a      	lsls	r2, r3, #4
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	4413      	add	r3, r2
 800272a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800273a:	b29a      	uxth	r2, r3
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	801a      	strh	r2, [r3, #0]
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800274a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800274e:	b29a      	uxth	r2, r3
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	e01a      	b.n	800278c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	785b      	ldrb	r3, [r3, #1]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d116      	bne.n	800278c <HAL_PCD_EP_DB_Transmit+0xfe>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	633b      	str	r3, [r7, #48]	; 0x30
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276c:	b29b      	uxth	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	4413      	add	r3, r2
 8002774:	633b      	str	r3, [r7, #48]	; 0x30
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	011a      	lsls	r2, r3, #4
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	4413      	add	r3, r2
 8002780:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002788:	2200      	movs	r2, #0
 800278a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	623b      	str	r3, [r7, #32]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	785b      	ldrb	r3, [r3, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d126      	bne.n	80027e8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	011a      	lsls	r2, r3, #4
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	801a      	strh	r2, [r3, #0]
 80027e6:	e017      	b.n	8002818 <HAL_PCD_EP_DB_Transmit+0x18a>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	785b      	ldrb	r3, [r3, #1]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d113      	bne.n	8002818 <HAL_PCD_EP_DB_Transmit+0x18a>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	4413      	add	r3, r2
 8002800:	623b      	str	r3, [r7, #32]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	011a      	lsls	r2, r3, #4
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	4413      	add	r3, r2
 800280c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	2200      	movs	r2, #0
 8002816:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4619      	mov	r1, r3
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f005 ff0d 	bl	800863e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 82d4 	beq.w	8002dd8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	827b      	strh	r3, [r7, #18]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	441a      	add	r2, r3
 800285a:	8a7b      	ldrh	r3, [r7, #18]
 800285c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800286c:	b29b      	uxth	r3, r3
 800286e:	8013      	strh	r3, [r2, #0]
 8002870:	e2b2      	b.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d021      	beq.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002896:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	441a      	add	r2, r3
 80028a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80028ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028bc:	b29b      	uxth	r3, r3
 80028be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	f040 8286 	bne.w	8002dd8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028d4:	441a      	add	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028e2:	441a      	add	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6a1a      	ldr	r2, [r3, #32]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d309      	bcc.n	8002908 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	6a1a      	ldr	r2, [r3, #32]
 80028fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002900:	1ad2      	subs	r2, r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	621a      	str	r2, [r3, #32]
 8002906:	e015      	b.n	8002934 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002910:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002914:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800291e:	e009      	b.n	8002934 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2200      	movs	r2, #0
 8002932:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	785b      	ldrb	r3, [r3, #1]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d155      	bne.n	80029e8 <HAL_PCD_EP_DB_Transmit+0x35a>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	63bb      	str	r3, [r7, #56]	; 0x38
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294a:	b29b      	uxth	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	4413      	add	r3, r2
 8002952:	63bb      	str	r3, [r7, #56]	; 0x38
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	011a      	lsls	r2, r3, #4
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	4413      	add	r3, r2
 800295e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002962:	637b      	str	r3, [r7, #52]	; 0x34
 8002964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002966:	2b00      	cmp	r3, #0
 8002968:	d112      	bne.n	8002990 <HAL_PCD_EP_DB_Transmit+0x302>
 800296a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002974:	b29a      	uxth	r2, r3
 8002976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002978:	801a      	strh	r2, [r3, #0]
 800297a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	b29b      	uxth	r3, r3
 8002980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002988:	b29a      	uxth	r2, r3
 800298a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	e047      	b.n	8002a20 <HAL_PCD_EP_DB_Transmit+0x392>
 8002990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002992:	2b3e      	cmp	r3, #62	; 0x3e
 8002994:	d811      	bhi.n	80029ba <HAL_PCD_EP_DB_Transmit+0x32c>
 8002996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002998:	085b      	lsrs	r3, r3, #1
 800299a:	64bb      	str	r3, [r7, #72]	; 0x48
 800299c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_PCD_EP_DB_Transmit+0x31e>
 80029a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a8:	3301      	adds	r3, #1
 80029aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80029ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	029b      	lsls	r3, r3, #10
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b6:	801a      	strh	r2, [r3, #0]
 80029b8:	e032      	b.n	8002a20 <HAL_PCD_EP_DB_Transmit+0x392>
 80029ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	64bb      	str	r3, [r7, #72]	; 0x48
 80029c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <HAL_PCD_EP_DB_Transmit+0x342>
 80029ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029cc:	3b01      	subs	r3, #1
 80029ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80029d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	029b      	lsls	r3, r3, #10
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	e01b      	b.n	8002a20 <HAL_PCD_EP_DB_Transmit+0x392>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	785b      	ldrb	r3, [r3, #1]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d117      	bne.n	8002a20 <HAL_PCD_EP_DB_Transmit+0x392>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	643b      	str	r3, [r7, #64]	; 0x40
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a04:	4413      	add	r3, r2
 8002a06:	643b      	str	r3, [r7, #64]	; 0x40
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	011a      	lsls	r2, r3, #4
 8002a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a10:	4413      	add	r3, r2
 8002a12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	6959      	ldr	r1, [r3, #20]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	891a      	ldrh	r2, [r3, #8]
 8002a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f003 ffbb 	bl	80069aa <USB_WritePMA>
 8002a34:	e1d0      	b.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3306      	adds	r3, #6
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d307      	bcc.n	8002a7e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a76:	1ad2      	subs	r2, r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	619a      	str	r2, [r3, #24]
 8002a7c:	e002      	b.n	8002a84 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f040 80c4 	bne.w	8002c16 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	785b      	ldrb	r3, [r3, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d126      	bne.n	8002ae4 <HAL_PCD_EP_DB_Transmit+0x456>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aaa:	4413      	add	r3, r2
 8002aac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	011a      	lsls	r2, r3, #4
 8002ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002abc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002abe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002acc:	801a      	strh	r2, [r3, #0]
 8002ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae0:	801a      	strh	r2, [r3, #0]
 8002ae2:	e01a      	b.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x48c>
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	785b      	ldrb	r3, [r3, #1]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d116      	bne.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x48c>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	677b      	str	r3, [r7, #116]	; 0x74
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b00:	4413      	add	r3, r2
 8002b02:	677b      	str	r3, [r7, #116]	; 0x74
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	011a      	lsls	r2, r3, #4
 8002b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b12:	673b      	str	r3, [r7, #112]	; 0x70
 8002b14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b16:	2200      	movs	r2, #0
 8002b18:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	785b      	ldrb	r3, [r3, #1]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d12f      	bne.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b40:	4413      	add	r3, r2
 8002b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	011a      	lsls	r2, r3, #4
 8002b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b50:	4413      	add	r3, r2
 8002b52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b6c:	801a      	strh	r2, [r3, #0]
 8002b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b84:	801a      	strh	r2, [r3, #0]
 8002b86:	e017      	b.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d113      	bne.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b9e:	4413      	add	r3, r2
 8002ba0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	011a      	lsls	r2, r3, #4
 8002ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002baa:	4413      	add	r3, r2
 8002bac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bb0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f005 fd3d 	bl	800863e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f040 8104 	bne.w	8002dd8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	441a      	add	r2, r3
 8002bfc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	8013      	strh	r3, [r2, #0]
 8002c14:	e0e0      	b.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d121      	bne.n	8002c64 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	441a      	add	r2, r3
 8002c4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	f040 80b4 	bne.w	8002dd8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c78:	441a      	add	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c86:	441a      	add	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	6a1a      	ldr	r2, [r3, #32]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d309      	bcc.n	8002cac <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	6a1a      	ldr	r2, [r3, #32]
 8002ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca4:	1ad2      	subs	r2, r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	621a      	str	r2, [r3, #32]
 8002caa:	e015      	b.n	8002cd8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d107      	bne.n	8002cc4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002cb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cb8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cc2:	e009      	b.n	8002cd8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	785b      	ldrb	r3, [r3, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d155      	bne.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x704>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfa:	4413      	add	r3, r2
 8002cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	011a      	lsls	r2, r3, #4
 8002d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d06:	4413      	add	r3, r2
 8002d08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d112      	bne.n	8002d3a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d22:	801a      	strh	r2, [r3, #0]
 8002d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d36:	801a      	strh	r2, [r3, #0]
 8002d38:	e044      	b.n	8002dc4 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d3c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d3e:	d811      	bhi.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	657b      	str	r3, [r7, #84]	; 0x54
 8002d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d52:	3301      	adds	r3, #1
 8002d54:	657b      	str	r3, [r7, #84]	; 0x54
 8002d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	029b      	lsls	r3, r3, #10
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d60:	801a      	strh	r2, [r3, #0]
 8002d62:	e02f      	b.n	8002dc4 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	657b      	str	r3, [r7, #84]	; 0x54
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d76:	3b01      	subs	r3, #1
 8002d78:	657b      	str	r3, [r7, #84]	; 0x54
 8002d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	029b      	lsls	r3, r3, #10
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d8e:	801a      	strh	r2, [r3, #0]
 8002d90:	e018      	b.n	8002dc4 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	785b      	ldrb	r3, [r3, #1]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d114      	bne.n	8002dc4 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002da8:	4413      	add	r3, r2
 8002daa:	667b      	str	r3, [r7, #100]	; 0x64
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	011a      	lsls	r2, r3, #4
 8002db2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002db4:	4413      	add	r3, r2
 8002db6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dba:	663b      	str	r3, [r7, #96]	; 0x60
 8002dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dc2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	6959      	ldr	r1, [r3, #20]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	895a      	ldrh	r2, [r3, #10]
 8002dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f003 fde9 	bl	80069aa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df2:	823b      	strh	r3, [r7, #16]
 8002df4:	8a3b      	ldrh	r3, [r7, #16]
 8002df6:	f083 0310 	eor.w	r3, r3, #16
 8002dfa:	823b      	strh	r3, [r7, #16]
 8002dfc:	8a3b      	ldrh	r3, [r7, #16]
 8002dfe:	f083 0320 	eor.w	r3, r3, #32
 8002e02:	823b      	strh	r3, [r7, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	441a      	add	r2, r3
 8002e12:	8a3b      	ldrh	r3, [r7, #16]
 8002e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3788      	adds	r7, #136	; 0x88
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b087      	sub	sp, #28
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	817b      	strh	r3, [r7, #10]
 8002e40:	4613      	mov	r3, r2
 8002e42:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e44:	897b      	ldrh	r3, [r7, #10]
 8002e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00b      	beq.n	8002e68 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e50:	897b      	ldrh	r3, [r7, #10]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e009      	b.n	8002e7c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e68:	897a      	ldrh	r2, [r7, #10]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4413      	add	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e7c:	893b      	ldrh	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d107      	bne.n	8002e92 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	80da      	strh	r2, [r3, #6]
 8002e90:	e00b      	b.n	8002eaa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2201      	movs	r2, #1
 8002e96:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	0c1b      	lsrs	r3, r3, #16
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr
	...

08002eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e26c      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8087 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed8:	4b92      	ldr	r3, [pc, #584]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d00c      	beq.n	8002efe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ee4:	4b8f      	ldr	r3, [pc, #572]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d112      	bne.n	8002f16 <HAL_RCC_OscConfig+0x5e>
 8002ef0:	4b8c      	ldr	r3, [pc, #560]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d10b      	bne.n	8002f16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efe:	4b89      	ldr	r3, [pc, #548]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d06c      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x12c>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d168      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e246      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x76>
 8002f20:	4b80      	ldr	r3, [pc, #512]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a7f      	ldr	r2, [pc, #508]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e02e      	b.n	8002f8c <HAL_RCC_OscConfig+0xd4>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x98>
 8002f36:	4b7b      	ldr	r3, [pc, #492]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7a      	ldr	r2, [pc, #488]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b78      	ldr	r3, [pc, #480]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a77      	ldr	r2, [pc, #476]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e01d      	b.n	8002f8c <HAL_RCC_OscConfig+0xd4>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0xbc>
 8002f5a:	4b72      	ldr	r3, [pc, #456]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a71      	ldr	r2, [pc, #452]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6e      	ldr	r2, [pc, #440]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0xd4>
 8002f74:	4b6b      	ldr	r3, [pc, #428]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6a      	ldr	r2, [pc, #424]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b68      	ldr	r3, [pc, #416]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a67      	ldr	r2, [pc, #412]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d013      	beq.n	8002fbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fd ffe6 	bl	8000f64 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fd ffe2 	bl	8000f64 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1fa      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0xe4>
 8002fba:	e014      	b.n	8002fe6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fd ffd2 	bl	8000f64 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fd ffce 	bl	8000f64 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e1e6      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	4b53      	ldr	r3, [pc, #332]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x10c>
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d063      	beq.n	80030ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ff2:	4b4c      	ldr	r3, [pc, #304]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ffe:	4b49      	ldr	r3, [pc, #292]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b08      	cmp	r3, #8
 8003008:	d11c      	bne.n	8003044 <HAL_RCC_OscConfig+0x18c>
 800300a:	4b46      	ldr	r3, [pc, #280]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d116      	bne.n	8003044 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	4b43      	ldr	r3, [pc, #268]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_RCC_OscConfig+0x176>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e1ba      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4939      	ldr	r1, [pc, #228]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003042:	e03a      	b.n	80030ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d020      	beq.n	800308e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800304c:	4b36      	ldr	r3, [pc, #216]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 800304e:	2201      	movs	r2, #1
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fd ff87 	bl	8000f64 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305a:	f7fd ff83 	bl	8000f64 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e19b      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4b2a      	ldr	r3, [pc, #168]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4927      	ldr	r1, [pc, #156]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 8003088:	4313      	orrs	r3, r2
 800308a:	600b      	str	r3, [r1, #0]
 800308c:	e015      	b.n	80030ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7fd ff66 	bl	8000f64 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309c:	f7fd ff62 	bl	8000f64 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e17a      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d03a      	beq.n	800313c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d019      	beq.n	8003102 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ce:	4b17      	ldr	r3, [pc, #92]	; (800312c <HAL_RCC_OscConfig+0x274>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d4:	f7fd ff46 	bl	8000f64 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030dc:	f7fd ff42 	bl	8000f64 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e15a      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030fa:	2001      	movs	r0, #1
 80030fc:	f000 faa6 	bl	800364c <RCC_Delay>
 8003100:	e01c      	b.n	800313c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_RCC_OscConfig+0x274>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003108:	f7fd ff2c 	bl	8000f64 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310e:	e00f      	b.n	8003130 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003110:	f7fd ff28 	bl	8000f64 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d908      	bls.n	8003130 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e140      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
 8003128:	42420000 	.word	0x42420000
 800312c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	4b9e      	ldr	r3, [pc, #632]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e9      	bne.n	8003110 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a6 	beq.w	8003296 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314e:	4b97      	ldr	r3, [pc, #604]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	4b94      	ldr	r3, [pc, #592]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	4a93      	ldr	r2, [pc, #588]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 8003160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003164:	61d3      	str	r3, [r2, #28]
 8003166:	4b91      	ldr	r3, [pc, #580]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	4b8e      	ldr	r3, [pc, #568]	; (80033b0 <HAL_RCC_OscConfig+0x4f8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d118      	bne.n	80031b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003182:	4b8b      	ldr	r3, [pc, #556]	; (80033b0 <HAL_RCC_OscConfig+0x4f8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a8a      	ldr	r2, [pc, #552]	; (80033b0 <HAL_RCC_OscConfig+0x4f8>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318e:	f7fd fee9 	bl	8000f64 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003196:	f7fd fee5 	bl	8000f64 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b64      	cmp	r3, #100	; 0x64
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e0fd      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	4b81      	ldr	r3, [pc, #516]	; (80033b0 <HAL_RCC_OscConfig+0x4f8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d106      	bne.n	80031ca <HAL_RCC_OscConfig+0x312>
 80031bc:	4b7b      	ldr	r3, [pc, #492]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	4a7a      	ldr	r2, [pc, #488]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6213      	str	r3, [r2, #32]
 80031c8:	e02d      	b.n	8003226 <HAL_RCC_OscConfig+0x36e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x334>
 80031d2:	4b76      	ldr	r3, [pc, #472]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a75      	ldr	r2, [pc, #468]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	6213      	str	r3, [r2, #32]
 80031de:	4b73      	ldr	r3, [pc, #460]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a72      	ldr	r2, [pc, #456]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 80031e4:	f023 0304 	bic.w	r3, r3, #4
 80031e8:	6213      	str	r3, [r2, #32]
 80031ea:	e01c      	b.n	8003226 <HAL_RCC_OscConfig+0x36e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b05      	cmp	r3, #5
 80031f2:	d10c      	bne.n	800320e <HAL_RCC_OscConfig+0x356>
 80031f4:	4b6d      	ldr	r3, [pc, #436]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4a6c      	ldr	r2, [pc, #432]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	6213      	str	r3, [r2, #32]
 8003200:	4b6a      	ldr	r3, [pc, #424]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4a69      	ldr	r2, [pc, #420]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6213      	str	r3, [r2, #32]
 800320c:	e00b      	b.n	8003226 <HAL_RCC_OscConfig+0x36e>
 800320e:	4b67      	ldr	r3, [pc, #412]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	4a66      	ldr	r2, [pc, #408]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	6213      	str	r3, [r2, #32]
 800321a:	4b64      	ldr	r3, [pc, #400]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4a63      	ldr	r2, [pc, #396]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 8003220:	f023 0304 	bic.w	r3, r3, #4
 8003224:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d015      	beq.n	800325a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7fd fe99 	bl	8000f64 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7fd fe95 	bl	8000f64 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f241 3288 	movw	r2, #5000	; 0x1388
 8003244:	4293      	cmp	r3, r2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0ab      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324c:	4b57      	ldr	r3, [pc, #348]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ee      	beq.n	8003236 <HAL_RCC_OscConfig+0x37e>
 8003258:	e014      	b.n	8003284 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325a:	f7fd fe83 	bl	8000f64 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003260:	e00a      	b.n	8003278 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fd fe7f 	bl	8000f64 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e095      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003278:	4b4c      	ldr	r3, [pc, #304]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ee      	bne.n	8003262 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d105      	bne.n	8003296 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328a:	4b48      	ldr	r3, [pc, #288]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	4a47      	ldr	r2, [pc, #284]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 8003290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003294:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8081 	beq.w	80033a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a0:	4b42      	ldr	r3, [pc, #264]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d061      	beq.n	8003370 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d146      	bne.n	8003342 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b4:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_RCC_OscConfig+0x4fc>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ba:	f7fd fe53 	bl	8000f64 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fd fe4f 	bl	8000f64 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e067      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d4:	4b35      	ldr	r3, [pc, #212]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f0      	bne.n	80032c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d108      	bne.n	80032fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032ea:	4b30      	ldr	r3, [pc, #192]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	492d      	ldr	r1, [pc, #180]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032fc:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a19      	ldr	r1, [r3, #32]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	430b      	orrs	r3, r1
 800330e:	4927      	ldr	r1, [pc, #156]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003314:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <HAL_RCC_OscConfig+0x4fc>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331a:	f7fd fe23 	bl	8000f64 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003322:	f7fd fe1f 	bl	8000f64 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e037      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x46a>
 8003340:	e02f      	b.n	80033a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003342:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <HAL_RCC_OscConfig+0x4fc>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fd fe0c 	bl	8000f64 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fd fe08 	bl	8000f64 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e020      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x498>
 800336e:	e018      	b.n	80033a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e013      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_OscConfig+0x4f4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	429a      	cmp	r2, r3
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d001      	beq.n	80033a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40007000 	.word	0x40007000
 80033b4:	42420060 	.word	0x42420060

080033b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0d0      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033cc:	4b6a      	ldr	r3, [pc, #424]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d910      	bls.n	80033fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b67      	ldr	r3, [pc, #412]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 0207 	bic.w	r2, r3, #7
 80033e2:	4965      	ldr	r1, [pc, #404]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0b8      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003414:	4b59      	ldr	r3, [pc, #356]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4a58      	ldr	r2, [pc, #352]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800341e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003436:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	494d      	ldr	r1, [pc, #308]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	4313      	orrs	r3, r2
 8003448:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d040      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d115      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07f      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003476:	4b41      	ldr	r3, [pc, #260]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e073      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003486:	4b3d      	ldr	r3, [pc, #244]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e06b      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003496:	4b39      	ldr	r3, [pc, #228]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f023 0203 	bic.w	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4936      	ldr	r1, [pc, #216]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a8:	f7fd fd5c 	bl	8000f64 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b0:	f7fd fd58 	bl	8000f64 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e053      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	4b2d      	ldr	r3, [pc, #180]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 020c 	and.w	r2, r3, #12
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d1eb      	bne.n	80034b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d8:	4b27      	ldr	r3, [pc, #156]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d210      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b24      	ldr	r3, [pc, #144]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 0207 	bic.w	r2, r3, #7
 80034ee:	4922      	ldr	r1, [pc, #136]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e032      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4916      	ldr	r1, [pc, #88]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	490e      	ldr	r1, [pc, #56]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003546:	f000 f821 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800354a:	4602      	mov	r2, r0
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	490a      	ldr	r1, [pc, #40]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003558:	5ccb      	ldrb	r3, [r1, r3]
 800355a:	fa22 f303 	lsr.w	r3, r2, r3
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1cc>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x1d0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd fcba 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40022000 	.word	0x40022000
 800357c:	40021000 	.word	0x40021000
 8003580:	08008c20 	.word	0x08008c20
 8003584:	20000004 	.word	0x20000004
 8003588:	20000008 	.word	0x20000008

0800358c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	b490      	push	{r4, r7}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003592:	4b2a      	ldr	r3, [pc, #168]	; (800363c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003594:	1d3c      	adds	r4, r7, #4
 8003596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800359c:	f240 2301 	movw	r3, #513	; 0x201
 80035a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	2300      	movs	r3, #0
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035b6:	4b22      	ldr	r3, [pc, #136]	; (8003640 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d002      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x40>
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d003      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0x46>
 80035ca:	e02d      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035cc:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ce:	623b      	str	r3, [r7, #32]
      break;
 80035d0:	e02d      	b.n	800362e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	0c9b      	lsrs	r3, r3, #18
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035de:	4413      	add	r3, r2
 80035e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d013      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	0c5b      	lsrs	r3, r3, #17
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035fe:	4413      	add	r3, r2
 8003600:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003604:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	4a0e      	ldr	r2, [pc, #56]	; (8003644 <HAL_RCC_GetSysClockFreq+0xb8>)
 800360a:	fb02 f203 	mul.w	r2, r2, r3
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
 8003616:	e004      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <HAL_RCC_GetSysClockFreq+0xbc>)
 800361c:	fb02 f303 	mul.w	r3, r2, r3
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	623b      	str	r3, [r7, #32]
      break;
 8003626:	e002      	b.n	800362e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_RCC_GetSysClockFreq+0xb8>)
 800362a:	623b      	str	r3, [r7, #32]
      break;
 800362c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800362e:	6a3b      	ldr	r3, [r7, #32]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3728      	adds	r7, #40	; 0x28
 8003634:	46bd      	mov	sp, r7
 8003636:	bc90      	pop	{r4, r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	08008bc4 	.word	0x08008bc4
 8003640:	40021000 	.word	0x40021000
 8003644:	007a1200 	.word	0x007a1200
 8003648:	003d0900 	.word	0x003d0900

0800364c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <RCC_Delay+0x34>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <RCC_Delay+0x38>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	0a5b      	lsrs	r3, r3, #9
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003668:	bf00      	nop
  }
  while (Delay --);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1e5a      	subs	r2, r3, #1
 800366e:	60fa      	str	r2, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f9      	bne.n	8003668 <RCC_Delay+0x1c>
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	20000004 	.word	0x20000004
 8003684:	10624dd3 	.word	0x10624dd3

08003688 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d07d      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036a4:	2300      	movs	r3, #0
 80036a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036a8:	4b4f      	ldr	r3, [pc, #316]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10d      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b4:	4b4c      	ldr	r3, [pc, #304]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	4a4b      	ldr	r2, [pc, #300]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036be:	61d3      	str	r3, [r2, #28]
 80036c0:	4b49      	ldr	r3, [pc, #292]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	4b46      	ldr	r3, [pc, #280]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d118      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036dc:	4b43      	ldr	r3, [pc, #268]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a42      	ldr	r2, [pc, #264]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e8:	f7fd fc3c 	bl	8000f64 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ee:	e008      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f0:	f7fd fc38 	bl	8000f64 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	; 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e06d      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	4b3a      	ldr	r3, [pc, #232]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800370e:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003716:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d02e      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	429a      	cmp	r2, r3
 800372a:	d027      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800372c:	4b2e      	ldr	r3, [pc, #184]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003734:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003736:	4b2e      	ldr	r3, [pc, #184]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800373c:	4b2c      	ldr	r3, [pc, #176]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003742:	4a29      	ldr	r2, [pc, #164]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d014      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fd fc07 	bl	8000f64 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fd fc03 	bl	8000f64 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	; 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e036      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003770:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0ee      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800377c:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4917      	ldr	r1, [pc, #92]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378a:	4313      	orrs	r3, r2
 800378c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800378e:	7dfb      	ldrb	r3, [r7, #23]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d105      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003794:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800379e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ac:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	490b      	ldr	r1, [pc, #44]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4904      	ldr	r1, [pc, #16]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40007000 	.word	0x40007000
 80037f0:	42420440 	.word	0x42420440

080037f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e076      	b.n	80038f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	2b00      	cmp	r3, #0
 800380c:	d108      	bne.n	8003820 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003816:	d009      	beq.n	800382c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	61da      	str	r2, [r3, #28]
 800381e:	e005      	b.n	800382c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd fa6e 	bl	8000d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003862:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b0:	ea42 0103 	orr.w	r1, r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	0c1a      	lsrs	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f002 0204 	and.w	r2, r2, #4
 80038d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003918:	d112      	bne.n	8003940 <HAL_SPI_Receive+0x44>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10e      	bne.n	8003940 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2204      	movs	r2, #4
 8003926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f8f1 	bl	8003b1e <HAL_SPI_TransmitReceive>
 800393c:	4603      	mov	r3, r0
 800393e:	e0ea      	b.n	8003b16 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_SPI_Receive+0x52>
 800394a:	2302      	movs	r3, #2
 800394c:	e0e3      	b.n	8003b16 <HAL_SPI_Receive+0x21a>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003956:	f7fd fb05 	bl	8000f64 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	d002      	beq.n	800396e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003968:	2302      	movs	r3, #2
 800396a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800396c:	e0ca      	b.n	8003b04 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_SPI_Receive+0x7e>
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d102      	bne.n	8003980 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800397e:	e0c1      	b.n	8003b04 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2204      	movs	r2, #4
 8003984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	88fa      	ldrh	r2, [r7, #6]
 8003998:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	88fa      	ldrh	r2, [r7, #6]
 800399e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c6:	d10f      	bne.n	80039e8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d007      	beq.n	8003a06 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a04:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d162      	bne.n	8003ad4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a0e:	e02e      	b.n	8003a6e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d115      	bne.n	8003a4a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f103 020c 	add.w	r2, r3, #12
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	7812      	ldrb	r2, [r2, #0]
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a48:	e011      	b.n	8003a6e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a4a:	f7fd fa8b 	bl	8000f64 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d803      	bhi.n	8003a62 <HAL_SPI_Receive+0x166>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d102      	bne.n	8003a68 <HAL_SPI_Receive+0x16c>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a6c:	e04a      	b.n	8003b04 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1cb      	bne.n	8003a10 <HAL_SPI_Receive+0x114>
 8003a78:	e031      	b.n	8003ade <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d113      	bne.n	8003ab0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	b292      	uxth	r2, r2
 8003a94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	1c9a      	adds	r2, r3, #2
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aae:	e011      	b.n	8003ad4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab0:	f7fd fa58 	bl	8000f64 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d803      	bhi.n	8003ac8 <HAL_SPI_Receive+0x1cc>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d102      	bne.n	8003ace <HAL_SPI_Receive+0x1d2>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d102      	bne.n	8003ad4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ad2:	e017      	b.n	8003b04 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1cd      	bne.n	8003a7a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fa46 	bl	8003f74 <SPI_EndRxTransaction>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
 8003b00:	e000      	b.n	8003b04 <HAL_SPI_Receive+0x208>
  }

error :
 8003b02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b08c      	sub	sp, #48	; 0x30
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x26>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e18a      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x33c>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b4c:	f7fd fa0a 	bl	8000f64 <HAL_GetTick>
 8003b50:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b62:	887b      	ldrh	r3, [r7, #2]
 8003b64:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d00f      	beq.n	8003b8e <HAL_SPI_TransmitReceive+0x70>
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b74:	d107      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x68>
 8003b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d003      	beq.n	8003b8e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b86:	2302      	movs	r3, #2
 8003b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b8c:	e15b      	b.n	8003e46 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_SPI_TransmitReceive+0x82>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_TransmitReceive+0x82>
 8003b9a:	887b      	ldrh	r3, [r7, #2]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ba6:	e14e      	b.n	8003e46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d003      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2205      	movs	r2, #5
 8003bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	887a      	ldrh	r2, [r7, #2]
 8003bd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	887a      	ldrh	r2, [r7, #2]
 8003bde:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	d007      	beq.n	8003c10 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c18:	d178      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0x10a>
 8003c22:	8b7b      	ldrh	r3, [r7, #26]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d166      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	881a      	ldrh	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	1c9a      	adds	r2, r3, #2
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c4c:	e053      	b.n	8003cf6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d11b      	bne.n	8003c94 <HAL_SPI_TransmitReceive+0x176>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d016      	beq.n	8003c94 <HAL_SPI_TransmitReceive+0x176>
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d113      	bne.n	8003c94 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	881a      	ldrh	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	1c9a      	adds	r2, r3, #2
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d119      	bne.n	8003cd6 <HAL_SPI_TransmitReceive+0x1b8>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d014      	beq.n	8003cd6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	b292      	uxth	r2, r2
 8003cb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	1c9a      	adds	r2, r3, #2
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cd6:	f7fd f945 	bl	8000f64 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d807      	bhi.n	8003cf6 <HAL_SPI_TransmitReceive+0x1d8>
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cec:	d003      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cf4:	e0a7      	b.n	8003e46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1a6      	bne.n	8003c4e <HAL_SPI_TransmitReceive+0x130>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1a1      	bne.n	8003c4e <HAL_SPI_TransmitReceive+0x130>
 8003d0a:	e07c      	b.n	8003e06 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_SPI_TransmitReceive+0x1fc>
 8003d14:	8b7b      	ldrh	r3, [r7, #26]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d16b      	bne.n	8003df2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d40:	e057      	b.n	8003df2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d11c      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x26c>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d017      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x26c>
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d114      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	7812      	ldrb	r2, [r2, #0]
 8003d6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d119      	bne.n	8003dcc <HAL_SPI_TransmitReceive+0x2ae>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d014      	beq.n	8003dcc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003dcc:	f7fd f8ca 	bl	8000f64 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d803      	bhi.n	8003de4 <HAL_SPI_TransmitReceive+0x2c6>
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d102      	bne.n	8003dea <HAL_SPI_TransmitReceive+0x2cc>
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d103      	bne.n	8003df2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003df0:	e029      	b.n	8003e46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1a2      	bne.n	8003d42 <HAL_SPI_TransmitReceive+0x224>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d19d      	bne.n	8003d42 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f904 	bl	8004018 <SPI_EndRxTxTransaction>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d006      	beq.n	8003e24 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e22:	e010      	b.n	8003e46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10b      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	e000      	b.n	8003e46 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3730      	adds	r7, #48	; 0x30
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	4613      	mov	r3, r2
 8003e72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e74:	f7fd f876 	bl	8000f64 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	4413      	add	r3, r2
 8003e82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e84:	f7fd f86e 	bl	8000f64 <HAL_GetTick>
 8003e88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e8a:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	015b      	lsls	r3, r3, #5
 8003e90:	0d1b      	lsrs	r3, r3, #20
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	fb02 f303 	mul.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e9a:	e054      	b.n	8003f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea2:	d050      	beq.n	8003f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ea4:	f7fd f85e 	bl	8000f64 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d902      	bls.n	8003eba <SPI_WaitFlagStateUntilTimeout+0x56>
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d13d      	bne.n	8003f36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ec8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ed2:	d111      	bne.n	8003ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003edc:	d004      	beq.n	8003ee8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee6:	d107      	bne.n	8003ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f00:	d10f      	bne.n	8003f22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e017      	b.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	bf0c      	ite	eq
 8003f56:	2301      	moveq	r3, #1
 8003f58:	2300      	movne	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d19b      	bne.n	8003e9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000004 	.word	0x20000004

08003f74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f88:	d111      	bne.n	8003fae <SPI_EndRxTransaction+0x3a>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f92:	d004      	beq.n	8003f9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9c:	d107      	bne.n	8003fae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fac:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb6:	d117      	bne.n	8003fe8 <SPI_EndRxTransaction+0x74>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc0:	d112      	bne.n	8003fe8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2101      	movs	r1, #1
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff ff49 	bl	8003e64 <SPI_WaitFlagStateUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01a      	beq.n	800400e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e013      	b.n	8004010 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2180      	movs	r1, #128	; 0x80
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7ff ff36 	bl	8003e64 <SPI_WaitFlagStateUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e000      	b.n	8004010 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2200      	movs	r2, #0
 800402c:	2180      	movs	r1, #128	; 0x80
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f7ff ff18 	bl	8003e64 <SPI_WaitFlagStateUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f043 0220 	orr.w	r2, r3, #32
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e000      	b.n	800404c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e041      	b.n	80040ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fc fe9e 	bl	8000dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f000 f93c 	bl	8004310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d001      	beq.n	800410c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e032      	b.n	8004172 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a18      	ldr	r2, [pc, #96]	; (800417c <HAL_TIM_Base_Start+0x88>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00e      	beq.n	800413c <HAL_TIM_Base_Start+0x48>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004126:	d009      	beq.n	800413c <HAL_TIM_Base_Start+0x48>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a14      	ldr	r2, [pc, #80]	; (8004180 <HAL_TIM_Base_Start+0x8c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <HAL_TIM_Base_Start+0x48>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a13      	ldr	r2, [pc, #76]	; (8004184 <HAL_TIM_Base_Start+0x90>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d111      	bne.n	8004160 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b06      	cmp	r3, #6
 800414c:	d010      	beq.n	8004170 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415e:	e007      	b.n	8004170 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800

08004188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_TIM_ConfigClockSource+0x18>
 800419c:	2302      	movs	r3, #2
 800419e:	e0b3      	b.n	8004308 <HAL_TIM_ConfigClockSource+0x180>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d8:	d03e      	beq.n	8004258 <HAL_TIM_ConfigClockSource+0xd0>
 80041da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041de:	f200 8087 	bhi.w	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e6:	f000 8085 	beq.w	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ee:	d87f      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 80041f0:	2b70      	cmp	r3, #112	; 0x70
 80041f2:	d01a      	beq.n	800422a <HAL_TIM_ConfigClockSource+0xa2>
 80041f4:	2b70      	cmp	r3, #112	; 0x70
 80041f6:	d87b      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 80041f8:	2b60      	cmp	r3, #96	; 0x60
 80041fa:	d050      	beq.n	800429e <HAL_TIM_ConfigClockSource+0x116>
 80041fc:	2b60      	cmp	r3, #96	; 0x60
 80041fe:	d877      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004200:	2b50      	cmp	r3, #80	; 0x50
 8004202:	d03c      	beq.n	800427e <HAL_TIM_ConfigClockSource+0xf6>
 8004204:	2b50      	cmp	r3, #80	; 0x50
 8004206:	d873      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d058      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x136>
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d86f      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004210:	2b30      	cmp	r3, #48	; 0x30
 8004212:	d064      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x156>
 8004214:	2b30      	cmp	r3, #48	; 0x30
 8004216:	d86b      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004218:	2b20      	cmp	r3, #32
 800421a:	d060      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x156>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d867      	bhi.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d05c      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x156>
 8004224:	2b10      	cmp	r3, #16
 8004226:	d05a      	beq.n	80042de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004228:	e062      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6899      	ldr	r1, [r3, #8]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f000 f942 	bl	80044c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800424c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	609a      	str	r2, [r3, #8]
      break;
 8004256:	e04e      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	6899      	ldr	r1, [r3, #8]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f000 f92b 	bl	80044c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800427a:	609a      	str	r2, [r3, #8]
      break;
 800427c:	e03b      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6859      	ldr	r1, [r3, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	461a      	mov	r2, r3
 800428c:	f000 f8a2 	bl	80043d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2150      	movs	r1, #80	; 0x50
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f8f9 	bl	800448e <TIM_ITRx_SetConfig>
      break;
 800429c:	e02b      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6859      	ldr	r1, [r3, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f000 f8c0 	bl	8004430 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2160      	movs	r1, #96	; 0x60
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 f8e9 	bl	800448e <TIM_ITRx_SetConfig>
      break;
 80042bc:	e01b      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6859      	ldr	r1, [r3, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	461a      	mov	r2, r3
 80042cc:	f000 f882 	bl	80043d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2140      	movs	r1, #64	; 0x40
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f8d9 	bl	800448e <TIM_ITRx_SetConfig>
      break;
 80042dc:	e00b      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4619      	mov	r1, r3
 80042e8:	4610      	mov	r0, r2
 80042ea:	f000 f8d0 	bl	800448e <TIM_ITRx_SetConfig>
        break;
 80042ee:	e002      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042f0:	bf00      	nop
 80042f2:	e000      	b.n	80042f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a29      	ldr	r2, [pc, #164]	; (80043c8 <TIM_Base_SetConfig+0xb8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00b      	beq.n	8004340 <TIM_Base_SetConfig+0x30>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432e:	d007      	beq.n	8004340 <TIM_Base_SetConfig+0x30>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a26      	ldr	r2, [pc, #152]	; (80043cc <TIM_Base_SetConfig+0xbc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d003      	beq.n	8004340 <TIM_Base_SetConfig+0x30>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a25      	ldr	r2, [pc, #148]	; (80043d0 <TIM_Base_SetConfig+0xc0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d108      	bne.n	8004352 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <TIM_Base_SetConfig+0xb8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00b      	beq.n	8004372 <TIM_Base_SetConfig+0x62>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004360:	d007      	beq.n	8004372 <TIM_Base_SetConfig+0x62>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a19      	ldr	r2, [pc, #100]	; (80043cc <TIM_Base_SetConfig+0xbc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_Base_SetConfig+0x62>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a18      	ldr	r2, [pc, #96]	; (80043d0 <TIM_Base_SetConfig+0xc0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d108      	bne.n	8004384 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a07      	ldr	r2, [pc, #28]	; (80043c8 <TIM_Base_SetConfig+0xb8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d103      	bne.n	80043b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	615a      	str	r2, [r3, #20]
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800

080043d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f023 0201 	bic.w	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f023 030a 	bic.w	r3, r3, #10
 8004410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	621a      	str	r2, [r3, #32]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f023 0210 	bic.w	r2, r3, #16
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800445a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	031b      	lsls	r3, r3, #12
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800446c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	621a      	str	r2, [r3, #32]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr

0800448e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800448e:	b480      	push	{r7}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f043 0307 	orr.w	r3, r3, #7
 80044b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	609a      	str	r2, [r3, #8]
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr

080044c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b087      	sub	sp, #28
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	021a      	lsls	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	609a      	str	r2, [r3, #8]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004514:	2302      	movs	r3, #2
 8004516:	e046      	b.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a16      	ldr	r2, [pc, #88]	; (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00e      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004564:	d009      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a12      	ldr	r2, [pc, #72]	; (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d004      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a10      	ldr	r2, [pc, #64]	; (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10c      	bne.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004580:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4313      	orrs	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr
 80045b0:	40012c00 	.word	0x40012c00
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40000800 	.word	0x40000800

080045bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045bc:	b084      	sub	sp, #16
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	f107 0014 	add.w	r0, r7, #20
 80045ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	b004      	add	sp, #16
 80045da:	4770      	bx	lr

080045dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80045f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004610:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004614:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	b29b      	uxth	r3, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	b29b      	uxth	r3, r3
 8004626:	4013      	ands	r3, r2
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004654:	b084      	sub	sp, #16
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	f107 0014 	add.w	r0, r7, #20
 8004662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	b004      	add	sp, #16
 8004692:	4770      	bx	lr

08004694 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004694:	b480      	push	{r7}
 8004696:	b09b      	sub	sp, #108	; 0x6c
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	78db      	ldrb	r3, [r3, #3]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d81f      	bhi.n	8004706 <USB_ActivateEndpoint+0x72>
 80046c6:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <USB_ActivateEndpoint+0x38>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	080046dd 	.word	0x080046dd
 80046d0:	080046f9 	.word	0x080046f9
 80046d4:	0800470f 	.word	0x0800470f
 80046d8:	080046eb 	.word	0x080046eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046e4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046e8:	e012      	b.n	8004710 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046ee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80046f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046f6:	e00b      	b.n	8004710 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004700:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004704:	e004      	b.n	8004710 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800470c:	e000      	b.n	8004710 <USB_ActivateEndpoint+0x7c>
      break;
 800470e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	441a      	add	r2, r3
 800471a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800471e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472e:	b29b      	uxth	r3, r3
 8004730:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	b29b      	uxth	r3, r3
 8004740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004748:	b29a      	uxth	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	4313      	orrs	r3, r2
 8004752:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	441a      	add	r2, r3
 8004760:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004774:	b29b      	uxth	r3, r3
 8004776:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	7b1b      	ldrb	r3, [r3, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f040 8149 	bne.w	8004a14 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	785b      	ldrb	r3, [r3, #1]
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8084 	beq.w	8004894 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004796:	b29b      	uxth	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	4413      	add	r3, r2
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	011a      	lsls	r2, r3, #4
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	88db      	ldrh	r3, [r3, #6]
 80047b4:	085b      	lsrs	r3, r3, #1
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	81fb      	strh	r3, [r7, #14]
 80047ce:	89fb      	ldrh	r3, [r7, #14]
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01b      	beq.n	8004810 <USB_ActivateEndpoint+0x17c>
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ee:	81bb      	strh	r3, [r7, #12]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	89bb      	ldrh	r3, [r7, #12]
 80047fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004808:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800480c:	b29b      	uxth	r3, r3
 800480e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	78db      	ldrb	r3, [r3, #3]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d020      	beq.n	800485a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800482e:	813b      	strh	r3, [r7, #8]
 8004830:	893b      	ldrh	r3, [r7, #8]
 8004832:	f083 0320 	eor.w	r3, r3, #32
 8004836:	813b      	strh	r3, [r7, #8]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	893b      	ldrh	r3, [r7, #8]
 8004844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004854:	b29b      	uxth	r3, r3
 8004856:	8013      	strh	r3, [r2, #0]
 8004858:	e27f      	b.n	8004d5a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004870:	817b      	strh	r3, [r7, #10]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	441a      	add	r2, r3
 800487c:	897b      	ldrh	r3, [r7, #10]
 800487e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488e:	b29b      	uxth	r3, r3
 8004890:	8013      	strh	r3, [r2, #0]
 8004892:	e262      	b.n	8004d5a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800489e:	b29b      	uxth	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	4413      	add	r3, r2
 80048a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	011a      	lsls	r2, r3, #4
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	88db      	ldrh	r3, [r3, #6]
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	b29b      	uxth	r3, r3
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	4413      	add	r3, r2
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	011a      	lsls	r2, r3, #4
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	4413      	add	r3, r2
 80048e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ea:	623b      	str	r3, [r7, #32]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d112      	bne.n	800491a <USB_ActivateEndpoint+0x286>
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048fe:	b29a      	uxth	r2, r3
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	801a      	strh	r2, [r3, #0]
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800490e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004912:	b29a      	uxth	r2, r3
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	e02f      	b.n	800497a <USB_ActivateEndpoint+0x2e6>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b3e      	cmp	r3, #62	; 0x3e
 8004920:	d813      	bhi.n	800494a <USB_ActivateEndpoint+0x2b6>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	663b      	str	r3, [r7, #96]	; 0x60
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <USB_ActivateEndpoint+0x2a8>
 8004936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004938:	3301      	adds	r3, #1
 800493a:	663b      	str	r3, [r7, #96]	; 0x60
 800493c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800493e:	b29b      	uxth	r3, r3
 8004940:	029b      	lsls	r3, r3, #10
 8004942:	b29a      	uxth	r2, r3
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	e017      	b.n	800497a <USB_ActivateEndpoint+0x2e6>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	663b      	str	r3, [r7, #96]	; 0x60
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <USB_ActivateEndpoint+0x2d0>
 800495e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004960:	3b01      	subs	r3, #1
 8004962:	663b      	str	r3, [r7, #96]	; 0x60
 8004964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004966:	b29b      	uxth	r3, r3
 8004968:	029b      	lsls	r3, r3, #10
 800496a:	b29b      	uxth	r3, r3
 800496c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004974:	b29a      	uxth	r2, r3
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	83fb      	strh	r3, [r7, #30]
 8004988:	8bfb      	ldrh	r3, [r7, #30]
 800498a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01b      	beq.n	80049ca <USB_ActivateEndpoint+0x336>
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a8:	83bb      	strh	r3, [r7, #28]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	441a      	add	r2, r3
 80049b4:	8bbb      	ldrh	r3, [r7, #28]
 80049b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e0:	837b      	strh	r3, [r7, #26]
 80049e2:	8b7b      	ldrh	r3, [r7, #26]
 80049e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049e8:	837b      	strh	r3, [r7, #26]
 80049ea:	8b7b      	ldrh	r3, [r7, #26]
 80049ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049f0:	837b      	strh	r3, [r7, #26]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	8b7b      	ldrh	r3, [r7, #26]
 80049fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	8013      	strh	r3, [r2, #0]
 8004a12:	e1a2      	b.n	8004d5a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a44:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a60:	4413      	add	r3, r2
 8004a62:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	011a      	lsls	r2, r3, #4
 8004a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a72:	657b      	str	r3, [r7, #84]	; 0x54
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	891b      	ldrh	r3, [r3, #8]
 8004a78:	085b      	lsrs	r3, r3, #1
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a82:	801a      	strh	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	653b      	str	r3, [r7, #80]	; 0x50
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a94:	4413      	add	r3, r2
 8004a96:	653b      	str	r3, [r7, #80]	; 0x50
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	011a      	lsls	r2, r3, #4
 8004a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	895b      	ldrh	r3, [r3, #10]
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f040 8091 	bne.w	8004be4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004ad0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d01b      	beq.n	8004b12 <USB_ActivateEndpoint+0x47e>
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	441a      	add	r2, r3
 8004afc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01b      	beq.n	8004b62 <USB_ActivateEndpoint+0x4ce>
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b40:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	441a      	add	r2, r3
 8004b4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b78:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b80:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b88:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	441a      	add	r2, r3
 8004b94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc0:	867b      	strh	r3, [r7, #50]	; 0x32
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	8013      	strh	r3, [r2, #0]
 8004be2:	e0ba      	b.n	8004d5a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004bf4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01d      	beq.n	8004c3c <USB_ActivateEndpoint+0x5a8>
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	441a      	add	r2, r3
 8004c24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01d      	beq.n	8004c94 <USB_ActivateEndpoint+0x600>
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	441a      	add	r2, r3
 8004c7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	78db      	ldrb	r3, [r3, #3]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d024      	beq.n	8004ce6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004cb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cba:	f083 0320 	eor.w	r3, r3, #32
 8004cbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	441a      	add	r2, r3
 8004ccc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	8013      	strh	r3, [r2, #0]
 8004ce4:	e01d      	b.n	8004d22 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cfc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	441a      	add	r2, r3
 8004d0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d38:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	441a      	add	r2, r3
 8004d44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004d5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	376c      	adds	r7, #108	; 0x6c
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b08d      	sub	sp, #52	; 0x34
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	7b1b      	ldrb	r3, [r3, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 808e 	bne.w	8004e98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d044      	beq.n	8004e0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	81bb      	strh	r3, [r7, #12]
 8004d92:	89bb      	ldrh	r3, [r7, #12]
 8004d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01b      	beq.n	8004dd4 <USB_DeactivateEndpoint+0x6c>
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db2:	817b      	strh	r3, [r7, #10]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	441a      	add	r2, r3
 8004dbe:	897b      	ldrh	r3, [r7, #10]
 8004dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dea:	813b      	strh	r3, [r7, #8]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	441a      	add	r2, r3
 8004df6:	893b      	ldrh	r3, [r7, #8]
 8004df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	8013      	strh	r3, [r2, #0]
 8004e0c:	e192      	b.n	8005134 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	827b      	strh	r3, [r7, #18]
 8004e1c:	8a7b      	ldrh	r3, [r7, #18]
 8004e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01b      	beq.n	8004e5e <USB_DeactivateEndpoint+0xf6>
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3c:	823b      	strh	r3, [r7, #16]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	8a3b      	ldrh	r3, [r7, #16]
 8004e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e74:	81fb      	strh	r3, [r7, #14]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	89fb      	ldrh	r3, [r7, #14]
 8004e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8013      	strh	r3, [r2, #0]
 8004e96:	e14d      	b.n	8005134 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	785b      	ldrb	r3, [r3, #1]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f040 80a5 	bne.w	8004fec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	843b      	strh	r3, [r7, #32]
 8004eb0:	8c3b      	ldrh	r3, [r7, #32]
 8004eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d01b      	beq.n	8004ef2 <USB_DeactivateEndpoint+0x18a>
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed0:	83fb      	strh	r3, [r7, #30]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	8bfb      	ldrh	r3, [r7, #30]
 8004ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	83bb      	strh	r3, [r7, #28]
 8004f00:	8bbb      	ldrh	r3, [r7, #28]
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01b      	beq.n	8004f42 <USB_DeactivateEndpoint+0x1da>
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f20:	837b      	strh	r3, [r7, #26]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	8b7b      	ldrh	r3, [r7, #26]
 8004f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	833b      	strh	r3, [r7, #24]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	8b3b      	ldrh	r3, [r7, #24]
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f90:	82fb      	strh	r3, [r7, #22]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	8afb      	ldrh	r3, [r7, #22]
 8004f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc8:	82bb      	strh	r3, [r7, #20]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	441a      	add	r2, r3
 8004fd4:	8abb      	ldrh	r3, [r7, #20]
 8004fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8013      	strh	r3, [r2, #0]
 8004fea:	e0a3      	b.n	8005134 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ffa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <USB_DeactivateEndpoint+0x2d4>
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	441a      	add	r2, r3
 8005026:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005038:	b29b      	uxth	r3, r3
 800503a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	857b      	strh	r3, [r7, #42]	; 0x2a
 800504a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01b      	beq.n	800508c <USB_DeactivateEndpoint+0x324>
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	853b      	strh	r3, [r7, #40]	; 0x28
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005084:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005088:	b29b      	uxth	r3, r3
 800508a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	441a      	add	r2, r3
 80050e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	847b      	strh	r3, [r7, #34]	; 0x22
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	441a      	add	r2, r3
 800511e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005130:	b29b      	uxth	r3, r3
 8005132:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3734      	adds	r7, #52	; 0x34
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b0cc      	sub	sp, #304	; 0x130
 8005144:	af00      	add	r7, sp, #0
 8005146:	1d3b      	adds	r3, r7, #4
 8005148:	6018      	str	r0, [r3, #0]
 800514a:	463b      	mov	r3, r7
 800514c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800514e:	463b      	mov	r3, r7
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	785b      	ldrb	r3, [r3, #1]
 8005154:	2b01      	cmp	r3, #1
 8005156:	f040 872e 	bne.w	8005fb6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800515a:	463b      	mov	r3, r7
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699a      	ldr	r2, [r3, #24]
 8005160:	463b      	mov	r3, r7
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	429a      	cmp	r2, r3
 8005168:	d905      	bls.n	8005176 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800516a:	463b      	mov	r3, r7
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005174:	e004      	b.n	8005180 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005176:	463b      	mov	r3, r7
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005180:	463b      	mov	r3, r7
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	7b1b      	ldrb	r3, [r3, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d134      	bne.n	80051f4 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800518a:	463b      	mov	r3, r7
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6959      	ldr	r1, [r3, #20]
 8005190:	463b      	mov	r3, r7
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	88da      	ldrh	r2, [r3, #6]
 8005196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800519a:	b29b      	uxth	r3, r3
 800519c:	1d38      	adds	r0, r7, #4
 800519e:	6800      	ldr	r0, [r0, #0]
 80051a0:	f001 fc03 	bl	80069aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051a4:	f107 0310 	add.w	r3, r7, #16
 80051a8:	1d3a      	adds	r2, r7, #4
 80051aa:	6812      	ldr	r2, [r2, #0]
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	1d3b      	adds	r3, r7, #4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	4619      	mov	r1, r3
 80051ba:	f107 0310 	add.w	r3, r7, #16
 80051be:	f107 0210 	add.w	r2, r7, #16
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	440a      	add	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	463b      	mov	r3, r7
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	011a      	lsls	r2, r3, #4
 80051d0:	f107 0310 	add.w	r3, r7, #16
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4413      	add	r3, r2
 80051d8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80051dc:	f107 030c 	add.w	r3, r7, #12
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	f107 030c 	add.w	r3, r7, #12
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	801a      	strh	r2, [r3, #0]
 80051f0:	f000 beac 	b.w	8005f4c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051f4:	463b      	mov	r3, r7
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	78db      	ldrb	r3, [r3, #3]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	f040 838c 	bne.w	8005918 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005200:	463b      	mov	r3, r7
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6a1a      	ldr	r2, [r3, #32]
 8005206:	463b      	mov	r3, r7
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	429a      	cmp	r2, r3
 800520e:	f240 8330 	bls.w	8005872 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005212:	1d3b      	adds	r3, r7, #4
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	463b      	mov	r3, r7
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005230:	1d3b      	adds	r3, r7, #4
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	463b      	mov	r3, r7
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	441a      	add	r2, r3
 800523e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800524e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005252:	b29b      	uxth	r3, r3
 8005254:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005256:	463b      	mov	r3, r7
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005260:	1ad2      	subs	r2, r2, r3
 8005262:	463b      	mov	r3, r7
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005268:	1d3b      	adds	r3, r7, #4
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	463b      	mov	r3, r7
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29b      	uxth	r3, r3
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 819e 	beq.w	80055c0 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005288:	1d3a      	adds	r2, r7, #4
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	463b      	mov	r3, r7
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d17a      	bne.n	800538e <USB_EPStartXfer+0x24e>
 8005298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800529c:	1d3a      	adds	r2, r7, #4
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	4619      	mov	r1, r3
 80052ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	440a      	add	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	463b      	mov	r3, r7
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	011a      	lsls	r2, r3, #4
 80052c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4413      	add	r3, r2
 80052cc:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80052d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d11a      	bne.n	8005314 <USB_EPStartXfer+0x1d4>
 80052de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005308:	b29a      	uxth	r2, r3
 800530a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	e062      	b.n	80053da <USB_EPStartXfer+0x29a>
 8005314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005318:	2b3e      	cmp	r3, #62	; 0x3e
 800531a:	d819      	bhi.n	8005350 <USB_EPStartXfer+0x210>
 800531c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005320:	085b      	lsrs	r3, r3, #1
 8005322:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <USB_EPStartXfer+0x1fc>
 8005332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005336:	3301      	adds	r3, #1
 8005338:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800533c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005340:	b29b      	uxth	r3, r3
 8005342:	029b      	lsls	r3, r3, #10
 8005344:	b29a      	uxth	r2, r3
 8005346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	e044      	b.n	80053da <USB_EPStartXfer+0x29a>
 8005350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800535a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <USB_EPStartXfer+0x230>
 8005366:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800536a:	3b01      	subs	r3, #1
 800536c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005370:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005374:	b29b      	uxth	r3, r3
 8005376:	029b      	lsls	r3, r3, #10
 8005378:	b29b      	uxth	r3, r3
 800537a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005382:	b29a      	uxth	r2, r3
 8005384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	e025      	b.n	80053da <USB_EPStartXfer+0x29a>
 800538e:	463b      	mov	r3, r7
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d120      	bne.n	80053da <USB_EPStartXfer+0x29a>
 8005398:	1d3b      	adds	r3, r7, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	4619      	mov	r1, r3
 80053a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	440a      	add	r2, r1
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	463b      	mov	r3, r7
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	011a      	lsls	r2, r3, #4
 80053ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4413      	add	r3, r2
 80053c2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80053c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053da:	463b      	mov	r3, r7
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	895b      	ldrh	r3, [r3, #10]
 80053e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053e4:	463b      	mov	r3, r7
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6959      	ldr	r1, [r3, #20]
 80053ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053f4:	1d38      	adds	r0, r7, #4
 80053f6:	6800      	ldr	r0, [r0, #0]
 80053f8:	f001 fad7 	bl	80069aa <USB_WritePMA>
            ep->xfer_buff += len;
 80053fc:	463b      	mov	r3, r7
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005406:	441a      	add	r2, r3
 8005408:	463b      	mov	r3, r7
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800540e:	463b      	mov	r3, r7
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6a1a      	ldr	r2, [r3, #32]
 8005414:	463b      	mov	r3, r7
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	429a      	cmp	r2, r3
 800541c:	d909      	bls.n	8005432 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800541e:	463b      	mov	r3, r7
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6a1a      	ldr	r2, [r3, #32]
 8005424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005428:	1ad2      	subs	r2, r2, r3
 800542a:	463b      	mov	r3, r7
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	621a      	str	r2, [r3, #32]
 8005430:	e008      	b.n	8005444 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005432:	463b      	mov	r3, r7
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800543c:	463b      	mov	r3, r7
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2200      	movs	r2, #0
 8005442:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005444:	463b      	mov	r3, r7
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	785b      	ldrb	r3, [r3, #1]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d17a      	bne.n	8005544 <USB_EPStartXfer+0x404>
 800544e:	f107 0318 	add.w	r3, r7, #24
 8005452:	1d3a      	adds	r2, r7, #4
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005460:	b29b      	uxth	r3, r3
 8005462:	4619      	mov	r1, r3
 8005464:	f107 0318 	add.w	r3, r7, #24
 8005468:	f107 0218 	add.w	r2, r7, #24
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	440a      	add	r2, r1
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	463b      	mov	r3, r7
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	011a      	lsls	r2, r3, #4
 800547a:	f107 0318 	add.w	r3, r7, #24
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4413      	add	r3, r2
 8005482:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005486:	f107 0314 	add.w	r3, r7, #20
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11a      	bne.n	80054ca <USB_EPStartXfer+0x38a>
 8005494:	f107 0314 	add.w	r3, r7, #20
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	f107 0314 	add.w	r3, r7, #20
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	f107 0314 	add.w	r3, r7, #20
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054be:	b29a      	uxth	r2, r3
 80054c0:	f107 0314 	add.w	r3, r7, #20
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	801a      	strh	r2, [r3, #0]
 80054c8:	e067      	b.n	800559a <USB_EPStartXfer+0x45a>
 80054ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ce:	2b3e      	cmp	r3, #62	; 0x3e
 80054d0:	d819      	bhi.n	8005506 <USB_EPStartXfer+0x3c6>
 80054d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d6:	085b      	lsrs	r3, r3, #1
 80054d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <USB_EPStartXfer+0x3b2>
 80054e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80054ec:	3301      	adds	r3, #1
 80054ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	029b      	lsls	r3, r3, #10
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	f107 0314 	add.w	r3, r7, #20
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	e049      	b.n	800559a <USB_EPStartXfer+0x45a>
 8005506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550a:	095b      	lsrs	r3, r3, #5
 800550c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <USB_EPStartXfer+0x3e6>
 800551c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005520:	3b01      	subs	r3, #1
 8005522:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005526:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800552a:	b29b      	uxth	r3, r3
 800552c:	029b      	lsls	r3, r3, #10
 800552e:	b29b      	uxth	r3, r3
 8005530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005538:	b29a      	uxth	r2, r3
 800553a:	f107 0314 	add.w	r3, r7, #20
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	801a      	strh	r2, [r3, #0]
 8005542:	e02a      	b.n	800559a <USB_EPStartXfer+0x45a>
 8005544:	463b      	mov	r3, r7
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d125      	bne.n	800559a <USB_EPStartXfer+0x45a>
 800554e:	f107 0320 	add.w	r3, r7, #32
 8005552:	1d3a      	adds	r2, r7, #4
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	1d3b      	adds	r3, r7, #4
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005560:	b29b      	uxth	r3, r3
 8005562:	4619      	mov	r1, r3
 8005564:	f107 0320 	add.w	r3, r7, #32
 8005568:	f107 0220 	add.w	r2, r7, #32
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	440a      	add	r2, r1
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	463b      	mov	r3, r7
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	011a      	lsls	r2, r3, #4
 800557a:	f107 0320 	add.w	r3, r7, #32
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4413      	add	r3, r2
 8005582:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005586:	f107 031c 	add.w	r3, r7, #28
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005590:	b29a      	uxth	r2, r3
 8005592:	f107 031c 	add.w	r3, r7, #28
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800559a:	463b      	mov	r3, r7
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	891b      	ldrh	r3, [r3, #8]
 80055a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055a4:	463b      	mov	r3, r7
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6959      	ldr	r1, [r3, #20]
 80055aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055b4:	1d38      	adds	r0, r7, #4
 80055b6:	6800      	ldr	r0, [r0, #0]
 80055b8:	f001 f9f7 	bl	80069aa <USB_WritePMA>
 80055bc:	f000 bcc6 	b.w	8005f4c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055c0:	463b      	mov	r3, r7
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d164      	bne.n	8005694 <USB_EPStartXfer+0x554>
 80055ca:	1d3b      	adds	r3, r7, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d8:	b29b      	uxth	r3, r3
 80055da:	461a      	mov	r2, r3
 80055dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055de:	4413      	add	r3, r2
 80055e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80055e2:	463b      	mov	r3, r7
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	011a      	lsls	r2, r3, #4
 80055ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ec:	4413      	add	r3, r2
 80055ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055f2:	647b      	str	r3, [r7, #68]	; 0x44
 80055f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d112      	bne.n	8005622 <USB_EPStartXfer+0x4e2>
 80055fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005606:	b29a      	uxth	r2, r3
 8005608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560a:	801a      	strh	r2, [r3, #0]
 800560c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	b29b      	uxth	r3, r3
 8005612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561a:	b29a      	uxth	r2, r3
 800561c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800561e:	801a      	strh	r2, [r3, #0]
 8005620:	e057      	b.n	80056d2 <USB_EPStartXfer+0x592>
 8005622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005626:	2b3e      	cmp	r3, #62	; 0x3e
 8005628:	d817      	bhi.n	800565a <USB_EPStartXfer+0x51a>
 800562a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d004      	beq.n	800564a <USB_EPStartXfer+0x50a>
 8005640:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005644:	3301      	adds	r3, #1
 8005646:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800564a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800564e:	b29b      	uxth	r3, r3
 8005650:	029b      	lsls	r3, r3, #10
 8005652:	b29a      	uxth	r2, r3
 8005654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	e03b      	b.n	80056d2 <USB_EPStartXfer+0x592>
 800565a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	2b00      	cmp	r3, #0
 800566e:	d104      	bne.n	800567a <USB_EPStartXfer+0x53a>
 8005670:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005674:	3b01      	subs	r3, #1
 8005676:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800567a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800567e:	b29b      	uxth	r3, r3
 8005680:	029b      	lsls	r3, r3, #10
 8005682:	b29b      	uxth	r3, r3
 8005684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568c:	b29a      	uxth	r2, r3
 800568e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	e01e      	b.n	80056d2 <USB_EPStartXfer+0x592>
 8005694:	463b      	mov	r3, r7
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	785b      	ldrb	r3, [r3, #1]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d119      	bne.n	80056d2 <USB_EPStartXfer+0x592>
 800569e:	1d3b      	adds	r3, r7, #4
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	653b      	str	r3, [r7, #80]	; 0x50
 80056a4:	1d3b      	adds	r3, r7, #4
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b2:	4413      	add	r3, r2
 80056b4:	653b      	str	r3, [r7, #80]	; 0x50
 80056b6:	463b      	mov	r3, r7
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	011a      	lsls	r2, r3, #4
 80056be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c0:	4413      	add	r3, r2
 80056c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056d2:	463b      	mov	r3, r7
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	891b      	ldrh	r3, [r3, #8]
 80056d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056dc:	463b      	mov	r3, r7
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6959      	ldr	r1, [r3, #20]
 80056e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056ec:	1d38      	adds	r0, r7, #4
 80056ee:	6800      	ldr	r0, [r0, #0]
 80056f0:	f001 f95b 	bl	80069aa <USB_WritePMA>
            ep->xfer_buff += len;
 80056f4:	463b      	mov	r3, r7
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056fe:	441a      	add	r2, r3
 8005700:	463b      	mov	r3, r7
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005706:	463b      	mov	r3, r7
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a1a      	ldr	r2, [r3, #32]
 800570c:	463b      	mov	r3, r7
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	429a      	cmp	r2, r3
 8005714:	d909      	bls.n	800572a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005716:	463b      	mov	r3, r7
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6a1a      	ldr	r2, [r3, #32]
 800571c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005720:	1ad2      	subs	r2, r2, r3
 8005722:	463b      	mov	r3, r7
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	621a      	str	r2, [r3, #32]
 8005728:	e008      	b.n	800573c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800572a:	463b      	mov	r3, r7
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005734:	463b      	mov	r3, r7
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2200      	movs	r2, #0
 800573a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800573c:	1d3b      	adds	r3, r7, #4
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	643b      	str	r3, [r7, #64]	; 0x40
 8005742:	463b      	mov	r3, r7
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	785b      	ldrb	r3, [r3, #1]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d164      	bne.n	8005816 <USB_EPStartXfer+0x6d6>
 800574c:	1d3b      	adds	r3, r7, #4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	63bb      	str	r3, [r7, #56]	; 0x38
 8005752:	1d3b      	adds	r3, r7, #4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800575a:	b29b      	uxth	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	4413      	add	r3, r2
 8005762:	63bb      	str	r3, [r7, #56]	; 0x38
 8005764:	463b      	mov	r3, r7
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	011a      	lsls	r2, r3, #4
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	4413      	add	r3, r2
 8005770:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
 8005776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577a:	2b00      	cmp	r3, #0
 800577c:	d112      	bne.n	80057a4 <USB_EPStartXfer+0x664>
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005788:	b29a      	uxth	r2, r3
 800578a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800579c:	b29a      	uxth	r2, r3
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	e054      	b.n	800584e <USB_EPStartXfer+0x70e>
 80057a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a8:	2b3e      	cmp	r3, #62	; 0x3e
 80057aa:	d817      	bhi.n	80057dc <USB_EPStartXfer+0x69c>
 80057ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80057b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <USB_EPStartXfer+0x68c>
 80057c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057c6:	3301      	adds	r3, #1
 80057c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80057cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d8:	801a      	strh	r2, [r3, #0]
 80057da:	e038      	b.n	800584e <USB_EPStartXfer+0x70e>
 80057dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80057e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d104      	bne.n	80057fc <USB_EPStartXfer+0x6bc>
 80057f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057f6:	3b01      	subs	r3, #1
 80057f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80057fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005800:	b29b      	uxth	r3, r3
 8005802:	029b      	lsls	r3, r3, #10
 8005804:	b29b      	uxth	r3, r3
 8005806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580e:	b29a      	uxth	r2, r3
 8005810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	e01b      	b.n	800584e <USB_EPStartXfer+0x70e>
 8005816:	463b      	mov	r3, r7
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d116      	bne.n	800584e <USB_EPStartXfer+0x70e>
 8005820:	1d3b      	adds	r3, r7, #4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005828:	b29b      	uxth	r3, r3
 800582a:	461a      	mov	r2, r3
 800582c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582e:	4413      	add	r3, r2
 8005830:	643b      	str	r3, [r7, #64]	; 0x40
 8005832:	463b      	mov	r3, r7
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	011a      	lsls	r2, r3, #4
 800583a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583c:	4413      	add	r3, r2
 800583e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005848:	b29a      	uxth	r2, r3
 800584a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800584e:	463b      	mov	r3, r7
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	895b      	ldrh	r3, [r3, #10]
 8005854:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005858:	463b      	mov	r3, r7
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6959      	ldr	r1, [r3, #20]
 800585e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005862:	b29b      	uxth	r3, r3
 8005864:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005868:	1d38      	adds	r0, r7, #4
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	f001 f89d 	bl	80069aa <USB_WritePMA>
 8005870:	e36c      	b.n	8005f4c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005872:	463b      	mov	r3, r7
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800587c:	1d3b      	adds	r3, r7, #4
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29b      	uxth	r3, r3
 800588e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005896:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800589a:	1d3b      	adds	r3, r7, #4
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	463b      	mov	r3, r7
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	441a      	add	r2, r3
 80058a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80058ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058bc:	b29b      	uxth	r3, r3
 80058be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058c0:	1d3b      	adds	r3, r7, #4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058c6:	1d3b      	adds	r3, r7, #4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058d4:	4413      	add	r3, r2
 80058d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058d8:	463b      	mov	r3, r7
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	011a      	lsls	r2, r3, #4
 80058e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058e2:	4413      	add	r3, r2
 80058e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80058ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058f4:	463b      	mov	r3, r7
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	891b      	ldrh	r3, [r3, #8]
 80058fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6959      	ldr	r1, [r3, #20]
 8005904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005908:	b29b      	uxth	r3, r3
 800590a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800590e:	1d38      	adds	r0, r7, #4
 8005910:	6800      	ldr	r0, [r0, #0]
 8005912:	f001 f84a 	bl	80069aa <USB_WritePMA>
 8005916:	e319      	b.n	8005f4c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005918:	1d3b      	adds	r3, r7, #4
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	463b      	mov	r3, r7
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	463b      	mov	r3, r7
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	441a      	add	r2, r3
 8005944:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005950:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005958:	b29b      	uxth	r3, r3
 800595a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800595c:	463b      	mov	r3, r7
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6a1a      	ldr	r2, [r3, #32]
 8005962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005966:	1ad2      	subs	r2, r2, r3
 8005968:	463b      	mov	r3, r7
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800596e:	1d3b      	adds	r3, r7, #4
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	463b      	mov	r3, r7
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8162 	beq.w	8005c4e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800598a:	1d3b      	adds	r3, r7, #4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005992:	463b      	mov	r3, r7
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d164      	bne.n	8005a66 <USB_EPStartXfer+0x926>
 800599c:	1d3b      	adds	r3, r7, #4
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80059a2:	1d3b      	adds	r3, r7, #4
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	461a      	mov	r2, r3
 80059ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059b0:	4413      	add	r3, r2
 80059b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80059b4:	463b      	mov	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	011a      	lsls	r2, r3, #4
 80059bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059be:	4413      	add	r3, r2
 80059c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059c4:	677b      	str	r3, [r7, #116]	; 0x74
 80059c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d112      	bne.n	80059f4 <USB_EPStartXfer+0x8b4>
 80059ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059d8:	b29a      	uxth	r2, r3
 80059da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f0:	801a      	strh	r2, [r3, #0]
 80059f2:	e057      	b.n	8005aa4 <USB_EPStartXfer+0x964>
 80059f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f8:	2b3e      	cmp	r3, #62	; 0x3e
 80059fa:	d817      	bhi.n	8005a2c <USB_EPStartXfer+0x8ec>
 80059fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a00:	085b      	lsrs	r3, r3, #1
 8005a02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d004      	beq.n	8005a1c <USB_EPStartXfer+0x8dc>
 8005a12:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a16:	3301      	adds	r3, #1
 8005a18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	029b      	lsls	r3, r3, #10
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e03b      	b.n	8005aa4 <USB_EPStartXfer+0x964>
 8005a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <USB_EPStartXfer+0x90c>
 8005a42:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a46:	3b01      	subs	r3, #1
 8005a48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	029b      	lsls	r3, r3, #10
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a62:	801a      	strh	r2, [r3, #0]
 8005a64:	e01e      	b.n	8005aa4 <USB_EPStartXfer+0x964>
 8005a66:	463b      	mov	r3, r7
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	785b      	ldrb	r3, [r3, #1]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d119      	bne.n	8005aa4 <USB_EPStartXfer+0x964>
 8005a70:	1d3b      	adds	r3, r7, #4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a80:	4413      	add	r3, r2
 8005a82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a86:	463b      	mov	r3, r7
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	011a      	lsls	r2, r3, #4
 8005a8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a92:	4413      	add	r3, r2
 8005a94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005aa2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	895b      	ldrh	r3, [r3, #10]
 8005aaa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aae:	463b      	mov	r3, r7
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6959      	ldr	r1, [r3, #20]
 8005ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005abe:	1d38      	adds	r0, r7, #4
 8005ac0:	6800      	ldr	r0, [r0, #0]
 8005ac2:	f000 ff72 	bl	80069aa <USB_WritePMA>
          ep->xfer_buff += len;
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695a      	ldr	r2, [r3, #20]
 8005acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad0:	441a      	add	r2, r3
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6a1a      	ldr	r2, [r3, #32]
 8005ade:	463b      	mov	r3, r7
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d909      	bls.n	8005afc <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005ae8:	463b      	mov	r3, r7
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6a1a      	ldr	r2, [r3, #32]
 8005aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af2:	1ad2      	subs	r2, r2, r3
 8005af4:	463b      	mov	r3, r7
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	621a      	str	r2, [r3, #32]
 8005afa:	e008      	b.n	8005b0e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005afc:	463b      	mov	r3, r7
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005b06:	463b      	mov	r3, r7
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 821a 	beq.w	8005f4c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b18:	463b      	mov	r3, r7
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	785b      	ldrb	r3, [r3, #1]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d164      	bne.n	8005bec <USB_EPStartXfer+0xaac>
 8005b22:	1d3b      	adds	r3, r7, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b28:	1d3b      	adds	r3, r7, #4
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b36:	4413      	add	r3, r2
 8005b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	011a      	lsls	r2, r3, #4
 8005b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b44:	4413      	add	r3, r2
 8005b46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b4a:	667b      	str	r3, [r7, #100]	; 0x64
 8005b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d112      	bne.n	8005b7a <USB_EPStartXfer+0xa3a>
 8005b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b62:	801a      	strh	r2, [r3, #0]
 8005b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	e057      	b.n	8005c2a <USB_EPStartXfer+0xaea>
 8005b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8005b80:	d817      	bhi.n	8005bb2 <USB_EPStartXfer+0xa72>
 8005b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b86:	085b      	lsrs	r3, r3, #1
 8005b88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <USB_EPStartXfer+0xa62>
 8005b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	029b      	lsls	r3, r3, #10
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	e03b      	b.n	8005c2a <USB_EPStartXfer+0xaea>
 8005bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc0:	f003 031f 	and.w	r3, r3, #31
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d104      	bne.n	8005bd2 <USB_EPStartXfer+0xa92>
 8005bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	029b      	lsls	r3, r3, #10
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be8:	801a      	strh	r2, [r3, #0]
 8005bea:	e01e      	b.n	8005c2a <USB_EPStartXfer+0xaea>
 8005bec:	463b      	mov	r3, r7
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d119      	bne.n	8005c2a <USB_EPStartXfer+0xaea>
 8005bf6:	1d3b      	adds	r3, r7, #4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	673b      	str	r3, [r7, #112]	; 0x70
 8005bfc:	1d3b      	adds	r3, r7, #4
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c0a:	4413      	add	r3, r2
 8005c0c:	673b      	str	r3, [r7, #112]	; 0x70
 8005c0e:	463b      	mov	r3, r7
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	011a      	lsls	r2, r3, #4
 8005c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c18:	4413      	add	r3, r2
 8005c1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	891b      	ldrh	r3, [r3, #8]
 8005c30:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c34:	463b      	mov	r3, r7
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6959      	ldr	r1, [r3, #20]
 8005c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c44:	1d38      	adds	r0, r7, #4
 8005c46:	6800      	ldr	r0, [r0, #0]
 8005c48:	f000 feaf 	bl	80069aa <USB_WritePMA>
 8005c4c:	e17e      	b.n	8005f4c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c4e:	463b      	mov	r3, r7
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	785b      	ldrb	r3, [r3, #1]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d16f      	bne.n	8005d38 <USB_EPStartXfer+0xbf8>
 8005c58:	1d3b      	adds	r3, r7, #4
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c60:	1d3b      	adds	r3, r7, #4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c70:	4413      	add	r3, r2
 8005c72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c76:	463b      	mov	r3, r7
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	011a      	lsls	r2, r3, #4
 8005c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c82:	4413      	add	r3, r2
 8005c84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d116      	bne.n	8005cc2 <USB_EPStartXfer+0xb82>
 8005c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	e05f      	b.n	8005d82 <USB_EPStartXfer+0xc42>
 8005cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc6:	2b3e      	cmp	r3, #62	; 0x3e
 8005cc8:	d818      	bhi.n	8005cfc <USB_EPStartXfer+0xbbc>
 8005cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cce:	085b      	lsrs	r3, r3, #1
 8005cd0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <USB_EPStartXfer+0xbaa>
 8005ce0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005cea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	029b      	lsls	r3, r3, #10
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	e042      	b.n	8005d82 <USB_EPStartXfer+0xc42>
 8005cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d00:	095b      	lsrs	r3, r3, #5
 8005d02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d104      	bne.n	8005d1c <USB_EPStartXfer+0xbdc>
 8005d12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d16:	3b01      	subs	r3, #1
 8005d18:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	029b      	lsls	r3, r3, #10
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	e024      	b.n	8005d82 <USB_EPStartXfer+0xc42>
 8005d38:	463b      	mov	r3, r7
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d11f      	bne.n	8005d82 <USB_EPStartXfer+0xc42>
 8005d42:	1d3b      	adds	r3, r7, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d4a:	1d3b      	adds	r3, r7, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d60:	463b      	mov	r3, r7
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	011a      	lsls	r2, r3, #4
 8005d68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d82:	463b      	mov	r3, r7
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	891b      	ldrh	r3, [r3, #8]
 8005d88:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6959      	ldr	r1, [r3, #20]
 8005d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d9c:	1d38      	adds	r0, r7, #4
 8005d9e:	6800      	ldr	r0, [r0, #0]
 8005da0:	f000 fe03 	bl	80069aa <USB_WritePMA>
          ep->xfer_buff += len;
 8005da4:	463b      	mov	r3, r7
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dae:	441a      	add	r2, r3
 8005db0:	463b      	mov	r3, r7
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005db6:	463b      	mov	r3, r7
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6a1a      	ldr	r2, [r3, #32]
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d909      	bls.n	8005dda <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005dc6:	463b      	mov	r3, r7
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6a1a      	ldr	r2, [r3, #32]
 8005dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd0:	1ad2      	subs	r2, r2, r3
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	621a      	str	r2, [r3, #32]
 8005dd8:	e008      	b.n	8005dec <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005dda:	463b      	mov	r3, r7
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005de4:	463b      	mov	r3, r7
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2200      	movs	r2, #0
 8005dea:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80ab 	beq.w	8005f4c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005df6:	1d3b      	adds	r3, r7, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dfe:	463b      	mov	r3, r7
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d16f      	bne.n	8005ee8 <USB_EPStartXfer+0xda8>
 8005e08:	1d3b      	adds	r3, r7, #4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e10:	1d3b      	adds	r3, r7, #4
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e20:	4413      	add	r3, r2
 8005e22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e26:	463b      	mov	r3, r7
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	011a      	lsls	r2, r3, #4
 8005e2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e32:	4413      	add	r3, r2
 8005e34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d116      	bne.n	8005e72 <USB_EPStartXfer+0xd32>
 8005e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	e05b      	b.n	8005f2a <USB_EPStartXfer+0xdea>
 8005e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e76:	2b3e      	cmp	r3, #62	; 0x3e
 8005e78:	d818      	bhi.n	8005eac <USB_EPStartXfer+0xd6c>
 8005e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7e:	085b      	lsrs	r3, r3, #1
 8005e80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d004      	beq.n	8005e9a <USB_EPStartXfer+0xd5a>
 8005e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e94:	3301      	adds	r3, #1
 8005e96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	029b      	lsls	r3, r3, #10
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	e03e      	b.n	8005f2a <USB_EPStartXfer+0xdea>
 8005eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eba:	f003 031f 	and.w	r3, r3, #31
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <USB_EPStartXfer+0xd8c>
 8005ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	029b      	lsls	r3, r3, #10
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	e020      	b.n	8005f2a <USB_EPStartXfer+0xdea>
 8005ee8:	463b      	mov	r3, r7
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d11b      	bne.n	8005f2a <USB_EPStartXfer+0xdea>
 8005ef2:	1d3b      	adds	r3, r7, #4
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	461a      	mov	r2, r3
 8005efe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f02:	4413      	add	r3, r2
 8005f04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f08:	463b      	mov	r3, r7
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	011a      	lsls	r2, r3, #4
 8005f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f14:	4413      	add	r3, r2
 8005f16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	895b      	ldrh	r3, [r3, #10]
 8005f30:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f34:	463b      	mov	r3, r7
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6959      	ldr	r1, [r3, #20]
 8005f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f44:	1d38      	adds	r0, r7, #4
 8005f46:	6800      	ldr	r0, [r0, #0]
 8005f48:	f000 fd2f 	bl	80069aa <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f4c:	1d3b      	adds	r3, r7, #4
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	463b      	mov	r3, r7
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f107 020a 	add.w	r2, r7, #10
 8005f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f6a:	8013      	strh	r3, [r2, #0]
 8005f6c:	f107 030a 	add.w	r3, r7, #10
 8005f70:	f107 020a 	add.w	r2, r7, #10
 8005f74:	8812      	ldrh	r2, [r2, #0]
 8005f76:	f082 0210 	eor.w	r2, r2, #16
 8005f7a:	801a      	strh	r2, [r3, #0]
 8005f7c:	f107 030a 	add.w	r3, r7, #10
 8005f80:	f107 020a 	add.w	r2, r7, #10
 8005f84:	8812      	ldrh	r2, [r2, #0]
 8005f86:	f082 0220 	eor.w	r2, r2, #32
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	1d3b      	adds	r3, r7, #4
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	463b      	mov	r3, r7
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	441a      	add	r2, r3
 8005f9a:	f107 030a 	add.w	r3, r7, #10
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	8013      	strh	r3, [r2, #0]
 8005fb4:	e3b5      	b.n	8006722 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	7b1b      	ldrb	r3, [r3, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f040 8090 	bne.w	80060e2 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699a      	ldr	r2, [r3, #24]
 8005fc8:	463b      	mov	r3, r7
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d90e      	bls.n	8005ff0 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005fd2:	463b      	mov	r3, r7
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005fdc:	463b      	mov	r3, r7
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe6:	1ad2      	subs	r2, r2, r3
 8005fe8:	463b      	mov	r3, r7
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	619a      	str	r2, [r3, #24]
 8005fee:	e008      	b.n	8006002 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2200      	movs	r2, #0
 8006000:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006002:	1d3b      	adds	r3, r7, #4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800600a:	1d3b      	adds	r3, r7, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006012:	b29b      	uxth	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800601a:	4413      	add	r3, r2
 800601c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006020:	463b      	mov	r3, r7
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	011a      	lsls	r2, r3, #4
 8006028:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800602c:	4413      	add	r3, r2
 800602e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d116      	bne.n	800606c <USB_EPStartXfer+0xf2c>
 800603e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800604a:	b29a      	uxth	r2, r3
 800604c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006062:	b29a      	uxth	r2, r3
 8006064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	e32c      	b.n	80066c6 <USB_EPStartXfer+0x1586>
 800606c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006070:	2b3e      	cmp	r3, #62	; 0x3e
 8006072:	d818      	bhi.n	80060a6 <USB_EPStartXfer+0xf66>
 8006074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800607e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d004      	beq.n	8006094 <USB_EPStartXfer+0xf54>
 800608a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800608e:	3301      	adds	r3, #1
 8006090:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006094:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006098:	b29b      	uxth	r3, r3
 800609a:	029b      	lsls	r3, r3, #10
 800609c:	b29a      	uxth	r2, r3
 800609e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060a2:	801a      	strh	r2, [r3, #0]
 80060a4:	e30f      	b.n	80066c6 <USB_EPStartXfer+0x1586>
 80060a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80060b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b4:	f003 031f 	and.w	r3, r3, #31
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d104      	bne.n	80060c6 <USB_EPStartXfer+0xf86>
 80060bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060c0:	3b01      	subs	r3, #1
 80060c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80060c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	029b      	lsls	r3, r3, #10
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d8:	b29a      	uxth	r2, r3
 80060da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060de:	801a      	strh	r2, [r3, #0]
 80060e0:	e2f1      	b.n	80066c6 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80060e2:	463b      	mov	r3, r7
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	78db      	ldrb	r3, [r3, #3]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	f040 818f 	bne.w	800640c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060ee:	463b      	mov	r3, r7
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d175      	bne.n	80061e4 <USB_EPStartXfer+0x10a4>
 80060f8:	1d3b      	adds	r3, r7, #4
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006100:	1d3b      	adds	r3, r7, #4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006108:	b29b      	uxth	r3, r3
 800610a:	461a      	mov	r2, r3
 800610c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006110:	4413      	add	r3, r2
 8006112:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006116:	463b      	mov	r3, r7
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	011a      	lsls	r2, r3, #4
 800611e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006122:	4413      	add	r3, r2
 8006124:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006128:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800612c:	463b      	mov	r3, r7
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d116      	bne.n	8006164 <USB_EPStartXfer+0x1024>
 8006136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006142:	b29a      	uxth	r2, r3
 8006144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800615a:	b29a      	uxth	r2, r3
 800615c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	e065      	b.n	8006230 <USB_EPStartXfer+0x10f0>
 8006164:	463b      	mov	r3, r7
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b3e      	cmp	r3, #62	; 0x3e
 800616c:	d81a      	bhi.n	80061a4 <USB_EPStartXfer+0x1064>
 800616e:	463b      	mov	r3, r7
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	085b      	lsrs	r3, r3, #1
 8006176:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800617a:	463b      	mov	r3, r7
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <USB_EPStartXfer+0x1052>
 8006188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800618c:	3301      	adds	r3, #1
 800618e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006196:	b29b      	uxth	r3, r3
 8006198:	029b      	lsls	r3, r3, #10
 800619a:	b29a      	uxth	r2, r3
 800619c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	e045      	b.n	8006230 <USB_EPStartXfer+0x10f0>
 80061a4:	463b      	mov	r3, r7
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061b0:	463b      	mov	r3, r7
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 031f 	and.w	r3, r3, #31
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <USB_EPStartXfer+0x1088>
 80061be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c2:	3b01      	subs	r3, #1
 80061c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	029b      	lsls	r3, r3, #10
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061da:	b29a      	uxth	r2, r3
 80061dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	e025      	b.n	8006230 <USB_EPStartXfer+0x10f0>
 80061e4:	463b      	mov	r3, r7
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d120      	bne.n	8006230 <USB_EPStartXfer+0x10f0>
 80061ee:	1d3b      	adds	r3, r7, #4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061f6:	1d3b      	adds	r3, r7, #4
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fe:	b29b      	uxth	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006206:	4413      	add	r3, r2
 8006208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800620c:	463b      	mov	r3, r7
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	011a      	lsls	r2, r3, #4
 8006214:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006218:	4413      	add	r3, r2
 800621a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800621e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006222:	463b      	mov	r3, r7
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	b29a      	uxth	r2, r3
 800622a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	1d3b      	adds	r3, r7, #4
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006238:	463b      	mov	r3, r7
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	785b      	ldrb	r3, [r3, #1]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d175      	bne.n	800632e <USB_EPStartXfer+0x11ee>
 8006242:	1d3b      	adds	r3, r7, #4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800624a:	1d3b      	adds	r3, r7, #4
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006252:	b29b      	uxth	r3, r3
 8006254:	461a      	mov	r2, r3
 8006256:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800625a:	4413      	add	r3, r2
 800625c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006260:	463b      	mov	r3, r7
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	011a      	lsls	r2, r3, #4
 8006268:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800626c:	4413      	add	r3, r2
 800626e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006272:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006276:	463b      	mov	r3, r7
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d116      	bne.n	80062ae <USB_EPStartXfer+0x116e>
 8006280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800628c:	b29a      	uxth	r2, r3
 800628e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006292:	801a      	strh	r2, [r3, #0]
 8006294:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062aa:	801a      	strh	r2, [r3, #0]
 80062ac:	e061      	b.n	8006372 <USB_EPStartXfer+0x1232>
 80062ae:	463b      	mov	r3, r7
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2b3e      	cmp	r3, #62	; 0x3e
 80062b6:	d81a      	bhi.n	80062ee <USB_EPStartXfer+0x11ae>
 80062b8:	463b      	mov	r3, r7
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	085b      	lsrs	r3, r3, #1
 80062c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062c4:	463b      	mov	r3, r7
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <USB_EPStartXfer+0x119c>
 80062d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062d6:	3301      	adds	r3, #1
 80062d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	029b      	lsls	r3, r3, #10
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ea:	801a      	strh	r2, [r3, #0]
 80062ec:	e041      	b.n	8006372 <USB_EPStartXfer+0x1232>
 80062ee:	463b      	mov	r3, r7
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	095b      	lsrs	r3, r3, #5
 80062f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062fa:	463b      	mov	r3, r7
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f003 031f 	and.w	r3, r3, #31
 8006304:	2b00      	cmp	r3, #0
 8006306:	d104      	bne.n	8006312 <USB_EPStartXfer+0x11d2>
 8006308:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800630c:	3b01      	subs	r3, #1
 800630e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006312:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006316:	b29b      	uxth	r3, r3
 8006318:	029b      	lsls	r3, r3, #10
 800631a:	b29b      	uxth	r3, r3
 800631c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006324:	b29a      	uxth	r2, r3
 8006326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800632a:	801a      	strh	r2, [r3, #0]
 800632c:	e021      	b.n	8006372 <USB_EPStartXfer+0x1232>
 800632e:	463b      	mov	r3, r7
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d11c      	bne.n	8006372 <USB_EPStartXfer+0x1232>
 8006338:	1d3b      	adds	r3, r7, #4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006340:	b29b      	uxth	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006348:	4413      	add	r3, r2
 800634a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800634e:	463b      	mov	r3, r7
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	011a      	lsls	r2, r3, #4
 8006356:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800635a:	4413      	add	r3, r2
 800635c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006360:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006364:	463b      	mov	r3, r7
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	b29a      	uxth	r2, r3
 800636c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006370:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006372:	463b      	mov	r3, r7
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 81a4 	beq.w	80066c6 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800637e:	1d3b      	adds	r3, r7, #4
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	463b      	mov	r3, r7
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006392:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <USB_EPStartXfer+0x126a>
 800639e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10d      	bne.n	80063c6 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063aa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80063ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f040 8187 	bne.w	80066c6 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80063bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f040 8180 	bne.w	80066c6 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80063c6:	1d3b      	adds	r3, r7, #4
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	463b      	mov	r3, r7
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80063e4:	1d3b      	adds	r3, r7, #4
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	463b      	mov	r3, r7
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	441a      	add	r2, r3
 80063f2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80063f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006402:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006406:	b29b      	uxth	r3, r3
 8006408:	8013      	strh	r3, [r2, #0]
 800640a:	e15c      	b.n	80066c6 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800640c:	463b      	mov	r3, r7
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	78db      	ldrb	r3, [r3, #3]
 8006412:	2b01      	cmp	r3, #1
 8006414:	f040 8155 	bne.w	80066c2 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006418:	463b      	mov	r3, r7
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	463b      	mov	r3, r7
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	429a      	cmp	r2, r3
 8006426:	d90e      	bls.n	8006446 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006428:	463b      	mov	r3, r7
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006432:	463b      	mov	r3, r7
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699a      	ldr	r2, [r3, #24]
 8006438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643c:	1ad2      	subs	r2, r2, r3
 800643e:	463b      	mov	r3, r7
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	619a      	str	r2, [r3, #24]
 8006444:	e008      	b.n	8006458 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006446:	463b      	mov	r3, r7
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006450:	463b      	mov	r3, r7
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2200      	movs	r2, #0
 8006456:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006458:	463b      	mov	r3, r7
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d16f      	bne.n	8006542 <USB_EPStartXfer+0x1402>
 8006462:	1d3b      	adds	r3, r7, #4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800646a:	1d3b      	adds	r3, r7, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006472:	b29b      	uxth	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800647a:	4413      	add	r3, r2
 800647c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006480:	463b      	mov	r3, r7
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	011a      	lsls	r2, r3, #4
 8006488:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800648c:	4413      	add	r3, r2
 800648e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d116      	bne.n	80064cc <USB_EPStartXfer+0x138c>
 800649e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e05f      	b.n	800658c <USB_EPStartXfer+0x144c>
 80064cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d0:	2b3e      	cmp	r3, #62	; 0x3e
 80064d2:	d818      	bhi.n	8006506 <USB_EPStartXfer+0x13c6>
 80064d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d004      	beq.n	80064f4 <USB_EPStartXfer+0x13b4>
 80064ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ee:	3301      	adds	r3, #1
 80064f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	029b      	lsls	r3, r3, #10
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	e042      	b.n	800658c <USB_EPStartXfer+0x144c>
 8006506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <USB_EPStartXfer+0x13e6>
 800651c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006520:	3b01      	subs	r3, #1
 8006522:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800652a:	b29b      	uxth	r3, r3
 800652c:	029b      	lsls	r3, r3, #10
 800652e:	b29b      	uxth	r3, r3
 8006530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006538:	b29a      	uxth	r2, r3
 800653a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	e024      	b.n	800658c <USB_EPStartXfer+0x144c>
 8006542:	463b      	mov	r3, r7
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d11f      	bne.n	800658c <USB_EPStartXfer+0x144c>
 800654c:	1d3b      	adds	r3, r7, #4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006554:	1d3b      	adds	r3, r7, #4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655c:	b29b      	uxth	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006564:	4413      	add	r3, r2
 8006566:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800656a:	463b      	mov	r3, r7
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	011a      	lsls	r2, r3, #4
 8006572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006576:	4413      	add	r3, r2
 8006578:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800657c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006584:	b29a      	uxth	r2, r3
 8006586:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	1d3b      	adds	r3, r7, #4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006594:	463b      	mov	r3, r7
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	785b      	ldrb	r3, [r3, #1]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d16f      	bne.n	800667e <USB_EPStartXfer+0x153e>
 800659e:	1d3b      	adds	r3, r7, #4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065a6:	1d3b      	adds	r3, r7, #4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b6:	4413      	add	r3, r2
 80065b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065bc:	463b      	mov	r3, r7
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	011a      	lsls	r2, r3, #4
 80065c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065c8:	4413      	add	r3, r2
 80065ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d116      	bne.n	8006608 <USB_EPStartXfer+0x14c8>
 80065da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065ec:	801a      	strh	r2, [r3, #0]
 80065ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fe:	b29a      	uxth	r2, r3
 8006600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006604:	801a      	strh	r2, [r3, #0]
 8006606:	e05e      	b.n	80066c6 <USB_EPStartXfer+0x1586>
 8006608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800660c:	2b3e      	cmp	r3, #62	; 0x3e
 800660e:	d818      	bhi.n	8006642 <USB_EPStartXfer+0x1502>
 8006610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006614:	085b      	lsrs	r3, r3, #1
 8006616:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800661a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d004      	beq.n	8006630 <USB_EPStartXfer+0x14f0>
 8006626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800662a:	3301      	adds	r3, #1
 800662c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006630:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006634:	b29b      	uxth	r3, r3
 8006636:	029b      	lsls	r3, r3, #10
 8006638:	b29a      	uxth	r2, r3
 800663a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	e041      	b.n	80066c6 <USB_EPStartXfer+0x1586>
 8006642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800664c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006650:	f003 031f 	and.w	r3, r3, #31
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <USB_EPStartXfer+0x1522>
 8006658:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800665c:	3b01      	subs	r3, #1
 800665e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006666:	b29b      	uxth	r3, r3
 8006668:	029b      	lsls	r3, r3, #10
 800666a:	b29b      	uxth	r3, r3
 800666c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006674:	b29a      	uxth	r2, r3
 8006676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800667a:	801a      	strh	r2, [r3, #0]
 800667c:	e023      	b.n	80066c6 <USB_EPStartXfer+0x1586>
 800667e:	463b      	mov	r3, r7
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	785b      	ldrb	r3, [r3, #1]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d11e      	bne.n	80066c6 <USB_EPStartXfer+0x1586>
 8006688:	1d3b      	adds	r3, r7, #4
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006690:	b29b      	uxth	r3, r3
 8006692:	461a      	mov	r2, r3
 8006694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006698:	4413      	add	r3, r2
 800669a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800669e:	463b      	mov	r3, r7
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	011a      	lsls	r2, r3, #4
 80066a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066aa:	4413      	add	r3, r2
 80066ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	e001      	b.n	80066c6 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e02e      	b.n	8006724 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066c6:	1d3b      	adds	r3, r7, #4
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	463b      	mov	r3, r7
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80066e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80066e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066ec:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80066f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80066f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066f8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80066fc:	1d3b      	adds	r3, r7, #4
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	463b      	mov	r3, r7
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	441a      	add	r2, r3
 800670a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800670e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800671a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671e:	b29b      	uxth	r3, r3
 8006720:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d020      	beq.n	8006782 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006756:	81bb      	strh	r3, [r7, #12]
 8006758:	89bb      	ldrh	r3, [r7, #12]
 800675a:	f083 0310 	eor.w	r3, r3, #16
 800675e:	81bb      	strh	r3, [r7, #12]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	441a      	add	r2, r3
 800676a:	89bb      	ldrh	r3, [r7, #12]
 800676c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800677c:	b29b      	uxth	r3, r3
 800677e:	8013      	strh	r3, [r2, #0]
 8006780:	e01f      	b.n	80067c2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006798:	81fb      	strh	r3, [r7, #14]
 800679a:	89fb      	ldrh	r3, [r7, #14]
 800679c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067a0:	81fb      	strh	r3, [r7, #14]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	441a      	add	r2, r3
 80067ac:	89fb      	ldrh	r3, [r7, #14]
 80067ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067be:	b29b      	uxth	r3, r3
 80067c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr

080067ce <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b087      	sub	sp, #28
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	7b1b      	ldrb	r3, [r3, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f040 809d 	bne.w	800691c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d04c      	beq.n	8006884 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	823b      	strh	r3, [r7, #16]
 80067f8:	8a3b      	ldrh	r3, [r7, #16]
 80067fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01b      	beq.n	800683a <USB_EPClearStall+0x6c>
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006818:	81fb      	strh	r3, [r7, #14]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	441a      	add	r2, r3
 8006824:	89fb      	ldrh	r3, [r7, #14]
 8006826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006832:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006836:	b29b      	uxth	r3, r3
 8006838:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	78db      	ldrb	r3, [r3, #3]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d06c      	beq.n	800691c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006858:	81bb      	strh	r3, [r7, #12]
 800685a:	89bb      	ldrh	r3, [r7, #12]
 800685c:	f083 0320 	eor.w	r3, r3, #32
 8006860:	81bb      	strh	r3, [r7, #12]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	441a      	add	r2, r3
 800686c:	89bb      	ldrh	r3, [r7, #12]
 800686e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687e:	b29b      	uxth	r3, r3
 8006880:	8013      	strh	r3, [r2, #0]
 8006882:	e04b      	b.n	800691c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	82fb      	strh	r3, [r7, #22]
 8006892:	8afb      	ldrh	r3, [r7, #22]
 8006894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01b      	beq.n	80068d4 <USB_EPClearStall+0x106>
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b2:	82bb      	strh	r3, [r7, #20]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	441a      	add	r2, r3
 80068be:	8abb      	ldrh	r3, [r7, #20]
 80068c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	827b      	strh	r3, [r7, #18]
 80068ec:	8a7b      	ldrh	r3, [r7, #18]
 80068ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068f2:	827b      	strh	r3, [r7, #18]
 80068f4:	8a7b      	ldrh	r3, [r7, #18]
 80068f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068fa:	827b      	strh	r3, [r7, #18]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	8a7b      	ldrh	r3, [r7, #18]
 8006908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006918:	b29b      	uxth	r3, r3
 800691a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr

08006928 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d103      	bne.n	8006942 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2280      	movs	r2, #128	; 0x80
 800693e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr

0800694e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr

08006962 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	bc80      	pop	{r7}
 8006974:	4770      	bx	lr

08006976 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006976:	b480      	push	{r7}
 8006978:	b085      	sub	sp, #20
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006984:	b29b      	uxth	r3, r3
 8006986:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006988:	68fb      	ldr	r3, [r7, #12]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr

08006994 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bc80      	pop	{r7}
 80069a8:	4770      	bx	lr

080069aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b08d      	sub	sp, #52	; 0x34
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	4611      	mov	r1, r2
 80069b6:	461a      	mov	r2, r3
 80069b8:	460b      	mov	r3, r1
 80069ba:	80fb      	strh	r3, [r7, #6]
 80069bc:	4613      	mov	r3, r2
 80069be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80069c0:	88bb      	ldrh	r3, [r7, #4]
 80069c2:	3301      	adds	r3, #1
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80069d0:	88fb      	ldrh	r3, [r7, #6]
 80069d2:	005a      	lsls	r2, r3, #1
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069dc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069e2:	e01e      	b.n	8006a22 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	3301      	adds	r3, #1
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	021b      	lsls	r3, r3, #8
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	461a      	mov	r2, r3
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	3302      	adds	r3, #2
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	3302      	adds	r3, #2
 8006a14:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	3301      	adds	r3, #1
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1dd      	bne.n	80069e4 <USB_WritePMA+0x3a>
  }
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	3734      	adds	r7, #52	; 0x34
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr

08006a34 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b08b      	sub	sp, #44	; 0x2c
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4611      	mov	r1, r2
 8006a40:	461a      	mov	r2, r3
 8006a42:	460b      	mov	r3, r1
 8006a44:	80fb      	strh	r3, [r7, #6]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006a4a:	88bb      	ldrh	r3, [r7, #4]
 8006a4c:	085b      	lsrs	r3, r3, #1
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a5a:	88fb      	ldrh	r3, [r7, #6]
 8006a5c:	005a      	lsls	r2, r3, #1
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a66:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6c:	e01b      	b.n	8006aa6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	3302      	adds	r3, #2
 8006a7a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	3301      	adds	r3, #1
 8006a88:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	0a1b      	lsrs	r3, r3, #8
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	3301      	adds	r3, #1
 8006a98:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e0      	bne.n	8006a6e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006aac:	88bb      	ldrh	r3, [r7, #4]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	701a      	strb	r2, [r3, #0]
  }
}
 8006ac8:	bf00      	nop
 8006aca:	372c      	adds	r7, #44	; 0x2c
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr

08006ad2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	7c1b      	ldrb	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d115      	bne.n	8006b16 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aee:	2202      	movs	r2, #2
 8006af0:	2181      	movs	r1, #129	; 0x81
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fe87 	bl	8008806 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b02:	2202      	movs	r2, #2
 8006b04:	2101      	movs	r1, #1
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 fe7d 	bl	8008806 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006b14:	e012      	b.n	8006b3c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b16:	2340      	movs	r3, #64	; 0x40
 8006b18:	2202      	movs	r2, #2
 8006b1a:	2181      	movs	r1, #129	; 0x81
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 fe72 	bl	8008806 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b28:	2340      	movs	r3, #64	; 0x40
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 fe69 	bl	8008806 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b3c:	2308      	movs	r3, #8
 8006b3e:	2203      	movs	r2, #3
 8006b40:	2182      	movs	r1, #130	; 0x82
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 fe5f 	bl	8008806 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b4e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b52:	f001 ff7f 	bl	8008a54 <USBD_static_malloc>
 8006b56:	4602      	mov	r2, r0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	73fb      	strb	r3, [r7, #15]
 8006b6c:	e026      	b.n	8006bbc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b74:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	7c1b      	ldrb	r3, [r3, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d109      	bne.n	8006bac <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 ff1f 	bl	80089e8 <USBD_LL_PrepareReceive>
 8006baa:	e007      	b.n	8006bbc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bb2:	2340      	movs	r3, #64	; 0x40
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f001 ff16 	bl	80089e8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006bd6:	2181      	movs	r1, #129	; 0x81
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 fe3a 	bl	8008852 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006be4:	2101      	movs	r1, #1
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 fe33 	bl	8008852 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006bf4:	2182      	movs	r1, #130	; 0x82
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 fe2b 	bl	8008852 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00e      	beq.n	8006c2a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 ff25 	bl	8008a6c <USBD_static_free>
    pdev->pClassData = NULL;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c44:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d039      	beq.n	8006cd2 <USBD_CDC_Setup+0x9e>
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d17f      	bne.n	8006d62 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	88db      	ldrh	r3, [r3, #6]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d029      	beq.n	8006cbe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	b25b      	sxtb	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	da11      	bge.n	8006c98 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006c80:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	88d2      	ldrh	r2, [r2, #6]
 8006c86:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c88:	6939      	ldr	r1, [r7, #16]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	88db      	ldrh	r3, [r3, #6]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 fa0a 	bl	80080aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006c96:	e06b      	b.n	8006d70 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	785a      	ldrb	r2, [r3, #1]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	88db      	ldrh	r3, [r3, #6]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006cae:	6939      	ldr	r1, [r7, #16]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	88db      	ldrh	r3, [r3, #6]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 fa25 	bl	8008106 <USBD_CtlPrepareRx>
      break;
 8006cbc:	e058      	b.n	8006d70 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	7850      	ldrb	r0, [r2, #1]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	4798      	blx	r3
      break;
 8006cd0:	e04e      	b.n	8006d70 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	785b      	ldrb	r3, [r3, #1]
 8006cd6:	2b0b      	cmp	r3, #11
 8006cd8:	d02e      	beq.n	8006d38 <USBD_CDC_Setup+0x104>
 8006cda:	2b0b      	cmp	r3, #11
 8006cdc:	dc38      	bgt.n	8006d50 <USBD_CDC_Setup+0x11c>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <USBD_CDC_Setup+0xb4>
 8006ce2:	2b0a      	cmp	r3, #10
 8006ce4:	d014      	beq.n	8006d10 <USBD_CDC_Setup+0xdc>
 8006ce6:	e033      	b.n	8006d50 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d107      	bne.n	8006d02 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006cf2:	f107 030c 	add.w	r3, r7, #12
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f001 f9d5 	bl	80080aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d00:	e02e      	b.n	8006d60 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 f966 	bl	8007fd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d0e:	e027      	b.n	8006d60 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d107      	bne.n	8006d2a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d1a:	f107 030f 	add.w	r3, r7, #15
 8006d1e:	2201      	movs	r2, #1
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 f9c1 	bl	80080aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d28:	e01a      	b.n	8006d60 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 f952 	bl	8007fd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d32:	2302      	movs	r3, #2
 8006d34:	75fb      	strb	r3, [r7, #23]
          break;
 8006d36:	e013      	b.n	8006d60 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d00d      	beq.n	8006d5e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f001 f946 	bl	8007fd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d4e:	e006      	b.n	8006d5e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 f93f 	bl	8007fd6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	75fb      	strb	r3, [r7, #23]
          break;
 8006d5c:	e000      	b.n	8006d60 <USBD_CDC_Setup+0x12c>
          break;
 8006d5e:	bf00      	nop
      }
      break;
 8006d60:	e006      	b.n	8006d70 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f001 f936 	bl	8007fd6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d6e:	bf00      	nop
  }

  return ret;
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	460b      	mov	r3, r1
 8006d84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d94:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d03a      	beq.n	8006e16 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006da0:	78fa      	ldrb	r2, [r7, #3]
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	4613      	mov	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	440b      	add	r3, r1
 8006dae:	331c      	adds	r3, #28
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d029      	beq.n	8006e0a <USBD_CDC_DataIn+0x90>
 8006db6:	78fa      	ldrb	r2, [r7, #3]
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	331c      	adds	r3, #28
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	78f9      	ldrb	r1, [r7, #3]
 8006dca:	68b8      	ldr	r0, [r7, #8]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	4403      	add	r3, r0
 8006dd6:	3338      	adds	r3, #56	; 0x38
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	fbb2 f1f3 	udiv	r1, r2, r3
 8006dde:	fb03 f301 	mul.w	r3, r3, r1
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d110      	bne.n	8006e0a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006de8:	78fa      	ldrb	r2, [r7, #3]
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	331c      	adds	r3, #28
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dfc:	78f9      	ldrb	r1, [r7, #3]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2200      	movs	r2, #0
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 fdcd 	bl	80089a2 <USBD_LL_Transmit>
 8006e08:	e003      	b.n	8006e12 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	e000      	b.n	8006e18 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006e16:	2302      	movs	r3, #2
  }
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 fdf8 	bl	8008a2e <USBD_LL_GetRxDataSize>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00d      	beq.n	8006e6c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e64:	4611      	mov	r1, r2
 8006e66:	4798      	blx	r3

    return USBD_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e000      	b.n	8006e6e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006e6c:	2302      	movs	r3, #2
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e84:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d015      	beq.n	8006ebc <USBD_CDC_EP0_RxReady+0x46>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e96:	2bff      	cmp	r3, #255	; 0xff
 8006e98:	d010      	beq.n	8006ebc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ea8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	22ff      	movs	r2, #255	; 0xff
 8006eb8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2243      	movs	r2, #67	; 0x43
 8006ed4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006ed6:	4b03      	ldr	r3, [pc, #12]	; (8006ee4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20000098 	.word	0x20000098

08006ee8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2243      	movs	r2, #67	; 0x43
 8006ef4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006ef6:	4b03      	ldr	r3, [pc, #12]	; (8006f04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bc80      	pop	{r7}
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000054 	.word	0x20000054

08006f08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2243      	movs	r2, #67	; 0x43
 8006f14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006f16:	4b03      	ldr	r3, [pc, #12]	; (8006f24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	200000dc 	.word	0x200000dc

08006f28 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	220a      	movs	r2, #10
 8006f34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006f36:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bc80      	pop	{r7}
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000010 	.word	0x20000010

08006f48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006f52:	2302      	movs	r3, #2
 8006f54:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d005      	beq.n	8006f68 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bc80      	pop	{r7}
 8006f72:	4770      	bx	lr

08006f74 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f88:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f92:	88fa      	ldrh	r2, [r7, #6]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bc80      	pop	{r7}
 8006fa4:	4770      	bx	lr

08006fa6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b085      	sub	sp, #20
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr

08006fcc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d01c      	beq.n	8007020 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d115      	bne.n	800701c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800700e:	b29b      	uxth	r3, r3
 8007010:	2181      	movs	r1, #129	; 0x81
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 fcc5 	bl	80089a2 <USBD_LL_Transmit>

      return USBD_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	e002      	b.n	8007022 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800701c:	2301      	movs	r3, #1
 800701e:	e000      	b.n	8007022 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007020:	2302      	movs	r3, #2
  }
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007038:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007040:	2b00      	cmp	r3, #0
 8007042:	d017      	beq.n	8007074 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	7c1b      	ldrb	r3, [r3, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d109      	bne.n	8007060 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007056:	2101      	movs	r1, #1
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 fcc5 	bl	80089e8 <USBD_LL_PrepareReceive>
 800705e:	e007      	b.n	8007070 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007066:	2340      	movs	r3, #64	; 0x40
 8007068:	2101      	movs	r1, #1
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f001 fcbc 	bl	80089e8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	e000      	b.n	8007076 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007074:	2302      	movs	r3, #2
  }
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	4613      	mov	r3, r2
 800708a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007092:	2302      	movs	r3, #2
 8007094:	e01a      	b.n	80070cc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	79fa      	ldrb	r2, [r7, #7]
 80070c2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f001 fb29 	bl	800871c <USBD_LL_Init>

  return USBD_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d006      	beq.n	80070f6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73fb      	strb	r3, [r7, #15]
 80070f4:	e001      	b.n	80070fa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80070f6:	2302      	movs	r3, #2
 80070f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr

08007106 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f001 fb5e 	bl	80087d0 <USBD_LL_Start>

  return USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	bc80      	pop	{r7}
 8007130:	4770      	bx	lr

08007132 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800713e:	2302      	movs	r3, #2
 8007140:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00c      	beq.n	8007166 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	78fa      	ldrb	r2, [r7, #3]
 8007156:	4611      	mov	r1, r2
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	78fa      	ldrb	r2, [r7, #3]
 8007186:	4611      	mov	r1, r2
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	4798      	blx	r3

  return USBD_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fed8 	bl	8007f5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071bc:	461a      	mov	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071ca:	f003 031f 	and.w	r3, r3, #31
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d016      	beq.n	8007200 <USBD_LL_SetupStage+0x6a>
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d81c      	bhi.n	8007210 <USBD_LL_SetupStage+0x7a>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <USBD_LL_SetupStage+0x4a>
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d008      	beq.n	80071f0 <USBD_LL_SetupStage+0x5a>
 80071de:	e017      	b.n	8007210 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f9cb 	bl	8007584 <USBD_StdDevReq>
      break;
 80071ee:	e01a      	b.n	8007226 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fa2d 	bl	8007658 <USBD_StdItfReq>
      break;
 80071fe:	e012      	b.n	8007226 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa6d 	bl	80076e8 <USBD_StdEPReq>
      break;
 800720e:	e00a      	b.n	8007226 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007216:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800721a:	b2db      	uxtb	r3, r3
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 fb36 	bl	8008890 <USBD_LL_StallEP>
      break;
 8007224:	bf00      	nop
  }

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	460b      	mov	r3, r1
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d14b      	bne.n	80072dc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800724a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007252:	2b03      	cmp	r3, #3
 8007254:	d134      	bne.n	80072c0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	429a      	cmp	r2, r3
 8007260:	d919      	bls.n	8007296 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	1ad2      	subs	r2, r2, r3
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007278:	429a      	cmp	r2, r3
 800727a:	d203      	bcs.n	8007284 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007280:	b29b      	uxth	r3, r3
 8007282:	e002      	b.n	800728a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007288:	b29b      	uxth	r3, r3
 800728a:	461a      	mov	r2, r3
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 ff57 	bl	8008142 <USBD_CtlContinueRx>
 8007294:	e038      	b.n	8007308 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d105      	bne.n	80072b8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 ff54 	bl	8008166 <USBD_CtlSendStatus>
 80072be:	e023      	b.n	8007308 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072c6:	2b05      	cmp	r3, #5
 80072c8:	d11e      	bne.n	8007308 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80072d2:	2100      	movs	r1, #0
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f001 fadb 	bl	8008890 <USBD_LL_StallEP>
 80072da:	e015      	b.n	8007308 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00d      	beq.n	8007304 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d108      	bne.n	8007304 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	7afa      	ldrb	r2, [r7, #11]
 80072fc:	4611      	mov	r1, r2
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	4798      	blx	r3
 8007302:	e001      	b.n	8007308 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007304:	2302      	movs	r3, #2
 8007306:	e000      	b.n	800730a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b086      	sub	sp, #24
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	460b      	mov	r3, r1
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007320:	7afb      	ldrb	r3, [r7, #11]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d17f      	bne.n	8007426 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3314      	adds	r3, #20
 800732a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007332:	2b02      	cmp	r3, #2
 8007334:	d15c      	bne.n	80073f0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	429a      	cmp	r2, r3
 8007340:	d915      	bls.n	800736e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	1ad2      	subs	r2, r2, r3
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	b29b      	uxth	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 fec1 	bl	80080e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007360:	2300      	movs	r3, #0
 8007362:	2200      	movs	r2, #0
 8007364:	2100      	movs	r1, #0
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f001 fb3e 	bl	80089e8 <USBD_LL_PrepareReceive>
 800736c:	e04e      	b.n	800740c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	6912      	ldr	r2, [r2, #16]
 8007376:	fbb3 f1f2 	udiv	r1, r3, r2
 800737a:	fb02 f201 	mul.w	r2, r2, r1
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d11c      	bne.n	80073be <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800738c:	429a      	cmp	r2, r3
 800738e:	d316      	bcc.n	80073be <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800739a:	429a      	cmp	r2, r3
 800739c:	d20f      	bcs.n	80073be <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800739e:	2200      	movs	r2, #0
 80073a0:	2100      	movs	r1, #0
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 fe9d 	bl	80080e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b0:	2300      	movs	r3, #0
 80073b2:	2200      	movs	r2, #0
 80073b4:	2100      	movs	r1, #0
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f001 fb16 	bl	80089e8 <USBD_LL_PrepareReceive>
 80073bc:	e026      	b.n	800740c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d105      	bne.n	80073e0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80073e0:	2180      	movs	r1, #128	; 0x80
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f001 fa54 	bl	8008890 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fecf 	bl	800818c <USBD_CtlReceiveStatus>
 80073ee:	e00d      	b.n	800740c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d004      	beq.n	8007404 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007400:	2b00      	cmp	r3, #0
 8007402:	d103      	bne.n	800740c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007404:	2180      	movs	r1, #128	; 0x80
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f001 fa42 	bl	8008890 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007412:	2b01      	cmp	r3, #1
 8007414:	d11d      	bne.n	8007452 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f7ff fe81 	bl	800711e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007424:	e015      	b.n	8007452 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00d      	beq.n	800744e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007438:	2b03      	cmp	r3, #3
 800743a:	d108      	bne.n	800744e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	7afa      	ldrb	r2, [r7, #11]
 8007446:	4611      	mov	r1, r2
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	4798      	blx	r3
 800744c:	e001      	b.n	8007452 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800744e:	2302      	movs	r3, #2
 8007450:	e000      	b.n	8007454 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007464:	2340      	movs	r3, #64	; 0x40
 8007466:	2200      	movs	r2, #0
 8007468:	2100      	movs	r1, #0
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 f9cb 	bl	8008806 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2240      	movs	r2, #64	; 0x40
 800747c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007480:	2340      	movs	r3, #64	; 0x40
 8007482:	2200      	movs	r2, #0
 8007484:	2180      	movs	r1, #128	; 0x80
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 f9bd 	bl	8008806 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2240      	movs	r2, #64	; 0x40
 8007496:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d009      	beq.n	80074d4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6852      	ldr	r2, [r2, #4]
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	4611      	mov	r1, r2
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	4798      	blx	r3
  }

  return USBD_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	460b      	mov	r3, r1
 80074e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr

080074fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2204      	movs	r2, #4
 8007514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	bc80      	pop	{r7}
 8007522:	4770      	bx	lr

08007524 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007532:	2b04      	cmp	r3, #4
 8007534:	d105      	bne.n	8007542 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	bc80      	pop	{r7}
 800754c:	4770      	bx	lr

0800754e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b082      	sub	sp, #8
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800755c:	2b03      	cmp	r3, #3
 800755e:	d10b      	bne.n	8007578 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800759a:	2b40      	cmp	r3, #64	; 0x40
 800759c:	d005      	beq.n	80075aa <USBD_StdDevReq+0x26>
 800759e:	2b40      	cmp	r3, #64	; 0x40
 80075a0:	d84f      	bhi.n	8007642 <USBD_StdDevReq+0xbe>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <USBD_StdDevReq+0x36>
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d14b      	bne.n	8007642 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
      break;
 80075b8:	e048      	b.n	800764c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	2b09      	cmp	r3, #9
 80075c0:	d839      	bhi.n	8007636 <USBD_StdDevReq+0xb2>
 80075c2:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <USBD_StdDevReq+0x44>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	08007619 	.word	0x08007619
 80075cc:	0800762d 	.word	0x0800762d
 80075d0:	08007637 	.word	0x08007637
 80075d4:	08007623 	.word	0x08007623
 80075d8:	08007637 	.word	0x08007637
 80075dc:	080075fb 	.word	0x080075fb
 80075e0:	080075f1 	.word	0x080075f1
 80075e4:	08007637 	.word	0x08007637
 80075e8:	0800760f 	.word	0x0800760f
 80075ec:	08007605 	.word	0x08007605
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f9dc 	bl	80079b0 <USBD_GetDescriptor>
          break;
 80075f8:	e022      	b.n	8007640 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fb3f 	bl	8007c80 <USBD_SetAddress>
          break;
 8007602:	e01d      	b.n	8007640 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fb7e 	bl	8007d08 <USBD_SetConfig>
          break;
 800760c:	e018      	b.n	8007640 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fc07 	bl	8007e24 <USBD_GetConfig>
          break;
 8007616:	e013      	b.n	8007640 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fc37 	bl	8007e8e <USBD_GetStatus>
          break;
 8007620:	e00e      	b.n	8007640 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fc65 	bl	8007ef4 <USBD_SetFeature>
          break;
 800762a:	e009      	b.n	8007640 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fc74 	bl	8007f1c <USBD_ClrFeature>
          break;
 8007634:	e004      	b.n	8007640 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fccc 	bl	8007fd6 <USBD_CtlError>
          break;
 800763e:	bf00      	nop
      }
      break;
 8007640:	e004      	b.n	800764c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fcc6 	bl	8007fd6 <USBD_CtlError>
      break;
 800764a:	bf00      	nop
  }

  return ret;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop

08007658 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800766e:	2b40      	cmp	r3, #64	; 0x40
 8007670:	d005      	beq.n	800767e <USBD_StdItfReq+0x26>
 8007672:	2b40      	cmp	r3, #64	; 0x40
 8007674:	d82e      	bhi.n	80076d4 <USBD_StdItfReq+0x7c>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <USBD_StdItfReq+0x26>
 800767a:	2b20      	cmp	r3, #32
 800767c:	d12a      	bne.n	80076d4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007684:	3b01      	subs	r3, #1
 8007686:	2b02      	cmp	r3, #2
 8007688:	d81d      	bhi.n	80076c6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	889b      	ldrh	r3, [r3, #4]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	d813      	bhi.n	80076bc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4798      	blx	r3
 80076a2:	4603      	mov	r3, r0
 80076a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	88db      	ldrh	r3, [r3, #6]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d110      	bne.n	80076d0 <USBD_StdItfReq+0x78>
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10d      	bne.n	80076d0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fd56 	bl	8008166 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076ba:	e009      	b.n	80076d0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fc89 	bl	8007fd6 <USBD_CtlError>
          break;
 80076c4:	e004      	b.n	80076d0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fc84 	bl	8007fd6 <USBD_CtlError>
          break;
 80076ce:	e000      	b.n	80076d2 <USBD_StdItfReq+0x7a>
          break;
 80076d0:	bf00      	nop
      }
      break;
 80076d2:	e004      	b.n	80076de <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fc7d 	bl	8007fd6 <USBD_CtlError>
      break;
 80076dc:	bf00      	nop
  }

  return USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	889b      	ldrh	r3, [r3, #4]
 80076fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007704:	2b40      	cmp	r3, #64	; 0x40
 8007706:	d007      	beq.n	8007718 <USBD_StdEPReq+0x30>
 8007708:	2b40      	cmp	r3, #64	; 0x40
 800770a:	f200 8146 	bhi.w	800799a <USBD_StdEPReq+0x2b2>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <USBD_StdEPReq+0x40>
 8007712:	2b20      	cmp	r3, #32
 8007714:	f040 8141 	bne.w	800799a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	4798      	blx	r3
      break;
 8007726:	e13d      	b.n	80079a4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007730:	2b20      	cmp	r3, #32
 8007732:	d10a      	bne.n	800774a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
 8007742:	4603      	mov	r3, r0
 8007744:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	e12d      	b.n	80079a6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	785b      	ldrb	r3, [r3, #1]
 800774e:	2b03      	cmp	r3, #3
 8007750:	d007      	beq.n	8007762 <USBD_StdEPReq+0x7a>
 8007752:	2b03      	cmp	r3, #3
 8007754:	f300 811b 	bgt.w	800798e <USBD_StdEPReq+0x2a6>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d072      	beq.n	8007842 <USBD_StdEPReq+0x15a>
 800775c:	2b01      	cmp	r3, #1
 800775e:	d03a      	beq.n	80077d6 <USBD_StdEPReq+0xee>
 8007760:	e115      	b.n	800798e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007768:	2b02      	cmp	r3, #2
 800776a:	d002      	beq.n	8007772 <USBD_StdEPReq+0x8a>
 800776c:	2b03      	cmp	r3, #3
 800776e:	d015      	beq.n	800779c <USBD_StdEPReq+0xb4>
 8007770:	e02b      	b.n	80077ca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00c      	beq.n	8007792 <USBD_StdEPReq+0xaa>
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	2b80      	cmp	r3, #128	; 0x80
 800777c:	d009      	beq.n	8007792 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800777e:	7bbb      	ldrb	r3, [r7, #14]
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 f884 	bl	8008890 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007788:	2180      	movs	r1, #128	; 0x80
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f001 f880 	bl	8008890 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007790:	e020      	b.n	80077d4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fc1e 	bl	8007fd6 <USBD_CtlError>
              break;
 800779a:	e01b      	b.n	80077d4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	885b      	ldrh	r3, [r3, #2]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10e      	bne.n	80077c2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00b      	beq.n	80077c2 <USBD_StdEPReq+0xda>
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	2b80      	cmp	r3, #128	; 0x80
 80077ae:	d008      	beq.n	80077c2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	88db      	ldrh	r3, [r3, #6]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d104      	bne.n	80077c2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 f867 	bl	8008890 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fccf 	bl	8008166 <USBD_CtlSendStatus>

              break;
 80077c8:	e004      	b.n	80077d4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fc02 	bl	8007fd6 <USBD_CtlError>
              break;
 80077d2:	bf00      	nop
          }
          break;
 80077d4:	e0e0      	b.n	8007998 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d002      	beq.n	80077e6 <USBD_StdEPReq+0xfe>
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d015      	beq.n	8007810 <USBD_StdEPReq+0x128>
 80077e4:	e026      	b.n	8007834 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00c      	beq.n	8007806 <USBD_StdEPReq+0x11e>
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	2b80      	cmp	r3, #128	; 0x80
 80077f0:	d009      	beq.n	8007806 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f001 f84a 	bl	8008890 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077fc:	2180      	movs	r1, #128	; 0x80
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 f846 	bl	8008890 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007804:	e01c      	b.n	8007840 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fbe4 	bl	8007fd6 <USBD_CtlError>
              break;
 800780e:	e017      	b.n	8007840 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	885b      	ldrh	r3, [r3, #2]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d112      	bne.n	800783e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800781e:	2b00      	cmp	r3, #0
 8007820:	d004      	beq.n	800782c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 f851 	bl	80088ce <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fc9a 	bl	8008166 <USBD_CtlSendStatus>
              }
              break;
 8007832:	e004      	b.n	800783e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fbcd 	bl	8007fd6 <USBD_CtlError>
              break;
 800783c:	e000      	b.n	8007840 <USBD_StdEPReq+0x158>
              break;
 800783e:	bf00      	nop
          }
          break;
 8007840:	e0aa      	b.n	8007998 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007848:	2b02      	cmp	r3, #2
 800784a:	d002      	beq.n	8007852 <USBD_StdEPReq+0x16a>
 800784c:	2b03      	cmp	r3, #3
 800784e:	d032      	beq.n	80078b6 <USBD_StdEPReq+0x1ce>
 8007850:	e097      	b.n	8007982 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d007      	beq.n	8007868 <USBD_StdEPReq+0x180>
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	2b80      	cmp	r3, #128	; 0x80
 800785c:	d004      	beq.n	8007868 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fbb8 	bl	8007fd6 <USBD_CtlError>
                break;
 8007866:	e091      	b.n	800798c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800786c:	2b00      	cmp	r3, #0
 800786e:	da0b      	bge.n	8007888 <USBD_StdEPReq+0x1a0>
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007876:	4613      	mov	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	3310      	adds	r3, #16
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	4413      	add	r3, r2
 8007884:	3304      	adds	r3, #4
 8007886:	e00b      	b.n	80078a0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	4413      	add	r3, r2
 800789e:	3304      	adds	r3, #4
 80078a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2202      	movs	r2, #2
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fbfb 	bl	80080aa <USBD_CtlSendData>
              break;
 80078b4:	e06a      	b.n	800798c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	da11      	bge.n	80078e2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	f003 020f 	and.w	r2, r3, #15
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	440b      	add	r3, r1
 80078d0:	3318      	adds	r3, #24
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d117      	bne.n	8007908 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fb7b 	bl	8007fd6 <USBD_CtlError>
                  break;
 80078e0:	e054      	b.n	800798c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	f003 020f 	and.w	r2, r3, #15
 80078e8:	6879      	ldr	r1, [r7, #4]
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	440b      	add	r3, r1
 80078f4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d104      	bne.n	8007908 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fb68 	bl	8007fd6 <USBD_CtlError>
                  break;
 8007906:	e041      	b.n	800798c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800790c:	2b00      	cmp	r3, #0
 800790e:	da0b      	bge.n	8007928 <USBD_StdEPReq+0x240>
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	3310      	adds	r3, #16
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	4413      	add	r3, r2
 8007924:	3304      	adds	r3, #4
 8007926:	e00b      	b.n	8007940 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	3304      	adds	r3, #4
 8007940:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <USBD_StdEPReq+0x266>
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b80      	cmp	r3, #128	; 0x80
 800794c:	d103      	bne.n	8007956 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e00e      	b.n	8007974 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 ffd6 	bl	800890c <USBD_LL_IsStallEP>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2201      	movs	r2, #1
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	e002      	b.n	8007974 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2200      	movs	r2, #0
 8007972:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2202      	movs	r2, #2
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fb95 	bl	80080aa <USBD_CtlSendData>
              break;
 8007980:	e004      	b.n	800798c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fb26 	bl	8007fd6 <USBD_CtlError>
              break;
 800798a:	bf00      	nop
          }
          break;
 800798c:	e004      	b.n	8007998 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fb20 	bl	8007fd6 <USBD_CtlError>
          break;
 8007996:	bf00      	nop
      }
      break;
 8007998:	e004      	b.n	80079a4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fb1a 	bl	8007fd6 <USBD_CtlError>
      break;
 80079a2:	bf00      	nop
  }

  return ret;
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	885b      	ldrh	r3, [r3, #2]
 80079ca:	0a1b      	lsrs	r3, r3, #8
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	2b06      	cmp	r3, #6
 80079d2:	f200 8128 	bhi.w	8007c26 <USBD_GetDescriptor+0x276>
 80079d6:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <USBD_GetDescriptor+0x2c>)
 80079d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079dc:	080079f9 	.word	0x080079f9
 80079e0:	08007a11 	.word	0x08007a11
 80079e4:	08007a51 	.word	0x08007a51
 80079e8:	08007c27 	.word	0x08007c27
 80079ec:	08007c27 	.word	0x08007c27
 80079f0:	08007bc7 	.word	0x08007bc7
 80079f4:	08007bf3 	.word	0x08007bf3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	7c12      	ldrb	r2, [r2, #16]
 8007a04:	f107 0108 	add.w	r1, r7, #8
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
 8007a0c:	60f8      	str	r0, [r7, #12]
      break;
 8007a0e:	e112      	b.n	8007c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	7c1b      	ldrb	r3, [r3, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10d      	bne.n	8007a34 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	f107 0208 	add.w	r2, r7, #8
 8007a24:	4610      	mov	r0, r2
 8007a26:	4798      	blx	r3
 8007a28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	2202      	movs	r2, #2
 8007a30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a32:	e100      	b.n	8007c36 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	f107 0208 	add.w	r2, r7, #8
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
 8007a44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	701a      	strb	r2, [r3, #0]
      break;
 8007a4e:	e0f2      	b.n	8007c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	885b      	ldrh	r3, [r3, #2]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b05      	cmp	r3, #5
 8007a58:	f200 80ac 	bhi.w	8007bb4 <USBD_GetDescriptor+0x204>
 8007a5c:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <USBD_GetDescriptor+0xb4>)
 8007a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a62:	bf00      	nop
 8007a64:	08007a7d 	.word	0x08007a7d
 8007a68:	08007ab1 	.word	0x08007ab1
 8007a6c:	08007ae5 	.word	0x08007ae5
 8007a70:	08007b19 	.word	0x08007b19
 8007a74:	08007b4d 	.word	0x08007b4d
 8007a78:	08007b81 	.word	0x08007b81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00b      	beq.n	8007aa0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	7c12      	ldrb	r2, [r2, #16]
 8007a94:	f107 0108 	add.w	r1, r7, #8
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4798      	blx	r3
 8007a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a9e:	e091      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fa97 	bl	8007fd6 <USBD_CtlError>
            err++;
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	72fb      	strb	r3, [r7, #11]
          break;
 8007aae:	e089      	b.n	8007bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00b      	beq.n	8007ad4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	7c12      	ldrb	r2, [r2, #16]
 8007ac8:	f107 0108 	add.w	r1, r7, #8
 8007acc:	4610      	mov	r0, r2
 8007ace:	4798      	blx	r3
 8007ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ad2:	e077      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fa7d 	bl	8007fd6 <USBD_CtlError>
            err++;
 8007adc:	7afb      	ldrb	r3, [r7, #11]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ae2:	e06f      	b.n	8007bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	7c12      	ldrb	r2, [r2, #16]
 8007afc:	f107 0108 	add.w	r1, r7, #8
 8007b00:	4610      	mov	r0, r2
 8007b02:	4798      	blx	r3
 8007b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b06:	e05d      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fa63 	bl	8007fd6 <USBD_CtlError>
            err++;
 8007b10:	7afb      	ldrb	r3, [r7, #11]
 8007b12:	3301      	adds	r3, #1
 8007b14:	72fb      	strb	r3, [r7, #11]
          break;
 8007b16:	e055      	b.n	8007bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00b      	beq.n	8007b3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	7c12      	ldrb	r2, [r2, #16]
 8007b30:	f107 0108 	add.w	r1, r7, #8
 8007b34:	4610      	mov	r0, r2
 8007b36:	4798      	blx	r3
 8007b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b3a:	e043      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fa49 	bl	8007fd6 <USBD_CtlError>
            err++;
 8007b44:	7afb      	ldrb	r3, [r7, #11]
 8007b46:	3301      	adds	r3, #1
 8007b48:	72fb      	strb	r3, [r7, #11]
          break;
 8007b4a:	e03b      	b.n	8007bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	7c12      	ldrb	r2, [r2, #16]
 8007b64:	f107 0108 	add.w	r1, r7, #8
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
 8007b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b6e:	e029      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa2f 	bl	8007fd6 <USBD_CtlError>
            err++;
 8007b78:	7afb      	ldrb	r3, [r7, #11]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b7e:	e021      	b.n	8007bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	7c12      	ldrb	r2, [r2, #16]
 8007b98:	f107 0108 	add.w	r1, r7, #8
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ba2:	e00f      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa15 	bl	8007fd6 <USBD_CtlError>
            err++;
 8007bac:	7afb      	ldrb	r3, [r7, #11]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bb2:	e007      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa0d 	bl	8007fd6 <USBD_CtlError>
          err++;
 8007bbc:	7afb      	ldrb	r3, [r7, #11]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007bc2:	e038      	b.n	8007c36 <USBD_GetDescriptor+0x286>
 8007bc4:	e037      	b.n	8007c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	7c1b      	ldrb	r3, [r3, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd6:	f107 0208 	add.w	r2, r7, #8
 8007bda:	4610      	mov	r0, r2
 8007bdc:	4798      	blx	r3
 8007bde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007be0:	e029      	b.n	8007c36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f9f6 	bl	8007fd6 <USBD_CtlError>
        err++;
 8007bea:	7afb      	ldrb	r3, [r7, #11]
 8007bec:	3301      	adds	r3, #1
 8007bee:	72fb      	strb	r3, [r7, #11]
      break;
 8007bf0:	e021      	b.n	8007c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	7c1b      	ldrb	r3, [r3, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10d      	bne.n	8007c16 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	f107 0208 	add.w	r2, r7, #8
 8007c06:	4610      	mov	r0, r2
 8007c08:	4798      	blx	r3
 8007c0a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	2207      	movs	r2, #7
 8007c12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c14:	e00f      	b.n	8007c36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f9dc 	bl	8007fd6 <USBD_CtlError>
        err++;
 8007c1e:	7afb      	ldrb	r3, [r7, #11]
 8007c20:	3301      	adds	r3, #1
 8007c22:	72fb      	strb	r3, [r7, #11]
      break;
 8007c24:	e007      	b.n	8007c36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f9d4 	bl	8007fd6 <USBD_CtlError>
      err++;
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	3301      	adds	r3, #1
 8007c32:	72fb      	strb	r3, [r7, #11]
      break;
 8007c34:	bf00      	nop
  }

  if (err != 0U)
 8007c36:	7afb      	ldrb	r3, [r7, #11]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d11c      	bne.n	8007c76 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c3c:	893b      	ldrh	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d011      	beq.n	8007c66 <USBD_GetDescriptor+0x2b6>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	88db      	ldrh	r3, [r3, #6]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00d      	beq.n	8007c66 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	88da      	ldrh	r2, [r3, #6]
 8007c4e:	893b      	ldrh	r3, [r7, #8]
 8007c50:	4293      	cmp	r3, r2
 8007c52:	bf28      	it	cs
 8007c54:	4613      	movcs	r3, r2
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c5a:	893b      	ldrh	r3, [r7, #8]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	68f9      	ldr	r1, [r7, #12]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fa22 	bl	80080aa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	88db      	ldrh	r3, [r3, #6]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d104      	bne.n	8007c78 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa79 	bl	8008166 <USBD_CtlSendStatus>
 8007c74:	e000      	b.n	8007c78 <USBD_GetDescriptor+0x2c8>
    return;
 8007c76:	bf00      	nop
    }
  }
}
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop

08007c80 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	889b      	ldrh	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d130      	bne.n	8007cf4 <USBD_SetAddress+0x74>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	88db      	ldrh	r3, [r3, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d12c      	bne.n	8007cf4 <USBD_SetAddress+0x74>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	885b      	ldrh	r3, [r3, #2]
 8007c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8007ca0:	d828      	bhi.n	8007cf4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	885b      	ldrh	r3, [r3, #2]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d104      	bne.n	8007cc2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f98b 	bl	8007fd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc0:	e01d      	b.n	8007cfe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7bfa      	ldrb	r2, [r7, #15]
 8007cc6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fe48 	bl	8008964 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fa46 	bl	8008166 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d004      	beq.n	8007cea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce8:	e009      	b.n	8007cfe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf2:	e004      	b.n	8007cfe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f96d 	bl	8007fd6 <USBD_CtlError>
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	bf00      	nop
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	885b      	ldrh	r3, [r3, #2]
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	4b41      	ldr	r3, [pc, #260]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d1c:	4b40      	ldr	r3, [pc, #256]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d904      	bls.n	8007d2e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f955 	bl	8007fd6 <USBD_CtlError>
 8007d2c:	e075      	b.n	8007e1a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d002      	beq.n	8007d3e <USBD_SetConfig+0x36>
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d023      	beq.n	8007d84 <USBD_SetConfig+0x7c>
 8007d3c:	e062      	b.n	8007e04 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d3e:	4b38      	ldr	r3, [pc, #224]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d01a      	beq.n	8007d7c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007d46:	4b36      	ldr	r3, [pc, #216]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2203      	movs	r2, #3
 8007d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d58:	4b31      	ldr	r3, [pc, #196]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff f9e7 	bl	8007132 <USBD_SetClassConfig>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d104      	bne.n	8007d74 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f932 	bl	8007fd6 <USBD_CtlError>
            return;
 8007d72:	e052      	b.n	8007e1a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f9f6 	bl	8008166 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d7a:	e04e      	b.n	8007e1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f9f2 	bl	8008166 <USBD_CtlSendStatus>
        break;
 8007d82:	e04a      	b.n	8007e1a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007d84:	4b26      	ldr	r3, [pc, #152]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d112      	bne.n	8007db2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007d94:	4b22      	ldr	r3, [pc, #136]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007d9e:	4b20      	ldr	r3, [pc, #128]	; (8007e20 <USBD_SetConfig+0x118>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff f9e3 	bl	8007170 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f9db 	bl	8008166 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007db0:	e033      	b.n	8007e1a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007db2:	4b1b      	ldr	r3, [pc, #108]	; (8007e20 <USBD_SetConfig+0x118>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d01d      	beq.n	8007dfc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7ff f9d1 	bl	8007170 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007dce:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <USBD_SetConfig+0x118>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007dd8:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <USBD_SetConfig+0x118>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff f9a7 	bl	8007132 <USBD_SetClassConfig>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d104      	bne.n	8007df4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f8f2 	bl	8007fd6 <USBD_CtlError>
            return;
 8007df2:	e012      	b.n	8007e1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f9b6 	bl	8008166 <USBD_CtlSendStatus>
        break;
 8007dfa:	e00e      	b.n	8007e1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f9b2 	bl	8008166 <USBD_CtlSendStatus>
        break;
 8007e02:	e00a      	b.n	8007e1a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f8e5 	bl	8007fd6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e0c:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <USBD_SetConfig+0x118>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff f9ac 	bl	8007170 <USBD_ClrClassConfig>
        break;
 8007e18:	bf00      	nop
    }
  }
}
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	2000019f 	.word	0x2000019f

08007e24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	88db      	ldrh	r3, [r3, #6]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d004      	beq.n	8007e40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f8cc 	bl	8007fd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e3e:	e022      	b.n	8007e86 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	dc02      	bgt.n	8007e50 <USBD_GetConfig+0x2c>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	dc03      	bgt.n	8007e56 <USBD_GetConfig+0x32>
 8007e4e:	e015      	b.n	8007e7c <USBD_GetConfig+0x58>
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d00b      	beq.n	8007e6c <USBD_GetConfig+0x48>
 8007e54:	e012      	b.n	8007e7c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3308      	adds	r3, #8
 8007e60:	2201      	movs	r2, #1
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f920 	bl	80080aa <USBD_CtlSendData>
        break;
 8007e6a:	e00c      	b.n	8007e86 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	2201      	movs	r2, #1
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f918 	bl	80080aa <USBD_CtlSendData>
        break;
 8007e7a:	e004      	b.n	8007e86 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f8a9 	bl	8007fd6 <USBD_CtlError>
        break;
 8007e84:	bf00      	nop
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d81e      	bhi.n	8007ee2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	88db      	ldrh	r3, [r3, #6]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d004      	beq.n	8007eb6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f891 	bl	8007fd6 <USBD_CtlError>
        break;
 8007eb4:	e01a      	b.n	8007eec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f043 0202 	orr.w	r2, r3, #2
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f8e5 	bl	80080aa <USBD_CtlSendData>
      break;
 8007ee0:	e004      	b.n	8007eec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f876 	bl	8007fd6 <USBD_CtlError>
      break;
 8007eea:	bf00      	nop
  }
}
 8007eec:	bf00      	nop
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	885b      	ldrh	r3, [r3, #2]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d106      	bne.n	8007f14 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f929 	bl	8008166 <USBD_CtlSendStatus>
  }
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d80b      	bhi.n	8007f4a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	885b      	ldrh	r3, [r3, #2]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d10c      	bne.n	8007f54 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f90f 	bl	8008166 <USBD_CtlSendStatus>
      }
      break;
 8007f48:	e004      	b.n	8007f54 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f842 	bl	8007fd6 <USBD_CtlError>
      break;
 8007f52:	e000      	b.n	8007f56 <USBD_ClrFeature+0x3a>
      break;
 8007f54:	bf00      	nop
  }
}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781a      	ldrb	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	785a      	ldrb	r2, [r3, #1]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	3302      	adds	r3, #2
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	3303      	adds	r3, #3
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	021b      	lsls	r3, r3, #8
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	3304      	adds	r3, #4
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	3305      	adds	r3, #5
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	021b      	lsls	r3, r3, #8
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	4413      	add	r3, r2
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	3306      	adds	r3, #6
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	3307      	adds	r3, #7
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	021b      	lsls	r3, r3, #8
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	4413      	add	r3, r2
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	80da      	strh	r2, [r3, #6]

}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bc80      	pop	{r7}
 8007fd4:	4770      	bx	lr

08007fd6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007fe0:	2180      	movs	r1, #128	; 0x80
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fc54 	bl	8008890 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007fe8:	2100      	movs	r1, #0
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fc50 	bl	8008890 <USBD_LL_StallEP>
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d032      	beq.n	8008074 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 f834 	bl	800807c <USBD_GetLen>
 8008014:	4603      	mov	r3, r0
 8008016:	3301      	adds	r3, #1
 8008018:	b29b      	uxth	r3, r3
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	75fa      	strb	r2, [r7, #23]
 8008028:	461a      	mov	r2, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	4413      	add	r3, r2
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	7812      	ldrb	r2, [r2, #0]
 8008032:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	75fa      	strb	r2, [r7, #23]
 800803a:	461a      	mov	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	4413      	add	r3, r2
 8008040:	2203      	movs	r2, #3
 8008042:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008044:	e012      	b.n	800806c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	60fa      	str	r2, [r7, #12]
 800804c:	7dfa      	ldrb	r2, [r7, #23]
 800804e:	1c51      	adds	r1, r2, #1
 8008050:	75f9      	strb	r1, [r7, #23]
 8008052:	4611      	mov	r1, r2
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	440a      	add	r2, r1
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	75fa      	strb	r2, [r7, #23]
 8008062:	461a      	mov	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4413      	add	r3, r2
 8008068:	2200      	movs	r2, #0
 800806a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e8      	bne.n	8008046 <USBD_GetString+0x4e>
    }
  }
}
 8008074:	bf00      	nop
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008088:	e005      	b.n	8008096 <USBD_GetLen+0x1a>
  {
    len++;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	3301      	adds	r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3301      	adds	r3, #1
 8008094:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1f5      	bne.n	800808a <USBD_GetLen+0xe>
  }

  return len;
 800809e:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bc80      	pop	{r7}
 80080a8:	4770      	bx	lr

080080aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	60b9      	str	r1, [r7, #8]
 80080b4:	4613      	mov	r3, r2
 80080b6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080c0:	88fa      	ldrh	r2, [r7, #6]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080c6:	88fa      	ldrh	r2, [r7, #6]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080cc:	88fb      	ldrh	r3, [r7, #6]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	2100      	movs	r1, #0
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f000 fc65 	bl	80089a2 <USBD_LL_Transmit>

  return USBD_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	60f8      	str	r0, [r7, #12]
 80080ea:	60b9      	str	r1, [r7, #8]
 80080ec:	4613      	mov	r3, r2
 80080ee:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	2100      	movs	r1, #0
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 fc53 	bl	80089a2 <USBD_LL_Transmit>

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	4613      	mov	r3, r2
 8008112:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2203      	movs	r2, #3
 8008118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800811c:	88fa      	ldrh	r2, [r7, #6]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008124:	88fa      	ldrh	r2, [r7, #6]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800812c:	88fb      	ldrh	r3, [r7, #6]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	2100      	movs	r1, #0
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 fc58 	bl	80089e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	4613      	mov	r3, r2
 800814e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	2100      	movs	r1, #0
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 fc46 	bl	80089e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2204      	movs	r2, #4
 8008172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008176:	2300      	movs	r3, #0
 8008178:	2200      	movs	r2, #0
 800817a:	2100      	movs	r1, #0
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fc10 	bl	80089a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2205      	movs	r2, #5
 8008198:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800819c:	2300      	movs	r3, #0
 800819e:	2200      	movs	r2, #0
 80081a0:	2100      	movs	r1, #0
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fc20 	bl	80089e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
	...

080081b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081b8:	2200      	movs	r2, #0
 80081ba:	4912      	ldr	r1, [pc, #72]	; (8008204 <MX_USB_DEVICE_Init+0x50>)
 80081bc:	4812      	ldr	r0, [pc, #72]	; (8008208 <MX_USB_DEVICE_Init+0x54>)
 80081be:	f7fe ff5e 	bl	800707e <USBD_Init>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081c8:	f7f8 fd76 	bl	8000cb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081cc:	490f      	ldr	r1, [pc, #60]	; (800820c <MX_USB_DEVICE_Init+0x58>)
 80081ce:	480e      	ldr	r0, [pc, #56]	; (8008208 <MX_USB_DEVICE_Init+0x54>)
 80081d0:	f7fe ff80 	bl	80070d4 <USBD_RegisterClass>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081da:	f7f8 fd6d 	bl	8000cb8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081de:	490c      	ldr	r1, [pc, #48]	; (8008210 <MX_USB_DEVICE_Init+0x5c>)
 80081e0:	4809      	ldr	r0, [pc, #36]	; (8008208 <MX_USB_DEVICE_Init+0x54>)
 80081e2:	f7fe feb1 	bl	8006f48 <USBD_CDC_RegisterInterface>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081ec:	f7f8 fd64 	bl	8000cb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081f0:	4805      	ldr	r0, [pc, #20]	; (8008208 <MX_USB_DEVICE_Init+0x54>)
 80081f2:	f7fe ff88 	bl	8007106 <USBD_Start>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081fc:	f7f8 fd5c 	bl	8000cb8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008200:	bf00      	nop
 8008202:	bd80      	pop	{r7, pc}
 8008204:	20000130 	.word	0x20000130
 8008208:	20000480 	.word	0x20000480
 800820c:	2000001c 	.word	0x2000001c
 8008210:	20000120 	.word	0x20000120

08008214 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008218:	2200      	movs	r2, #0
 800821a:	4905      	ldr	r1, [pc, #20]	; (8008230 <CDC_Init_FS+0x1c>)
 800821c:	4805      	ldr	r0, [pc, #20]	; (8008234 <CDC_Init_FS+0x20>)
 800821e:	f7fe fea9 	bl	8006f74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008222:	4905      	ldr	r1, [pc, #20]	; (8008238 <CDC_Init_FS+0x24>)
 8008224:	4803      	ldr	r0, [pc, #12]	; (8008234 <CDC_Init_FS+0x20>)
 8008226:	f7fe febe 	bl	8006fa6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800822a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800822c:	4618      	mov	r0, r3
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20000b2c 	.word	0x20000b2c
 8008234:	20000480 	.word	0x20000480
 8008238:	20000744 	.word	0x20000744

0800823c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008240:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008242:	4618      	mov	r0, r3
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr
	...

0800824c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	4603      	mov	r3, r0
 8008254:	6039      	str	r1, [r7, #0]
 8008256:	71fb      	strb	r3, [r7, #7]
 8008258:	4613      	mov	r3, r2
 800825a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	2b23      	cmp	r3, #35	; 0x23
 8008260:	d84a      	bhi.n	80082f8 <CDC_Control_FS+0xac>
 8008262:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <CDC_Control_FS+0x1c>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	080082f9 	.word	0x080082f9
 800826c:	080082f9 	.word	0x080082f9
 8008270:	080082f9 	.word	0x080082f9
 8008274:	080082f9 	.word	0x080082f9
 8008278:	080082f9 	.word	0x080082f9
 800827c:	080082f9 	.word	0x080082f9
 8008280:	080082f9 	.word	0x080082f9
 8008284:	080082f9 	.word	0x080082f9
 8008288:	080082f9 	.word	0x080082f9
 800828c:	080082f9 	.word	0x080082f9
 8008290:	080082f9 	.word	0x080082f9
 8008294:	080082f9 	.word	0x080082f9
 8008298:	080082f9 	.word	0x080082f9
 800829c:	080082f9 	.word	0x080082f9
 80082a0:	080082f9 	.word	0x080082f9
 80082a4:	080082f9 	.word	0x080082f9
 80082a8:	080082f9 	.word	0x080082f9
 80082ac:	080082f9 	.word	0x080082f9
 80082b0:	080082f9 	.word	0x080082f9
 80082b4:	080082f9 	.word	0x080082f9
 80082b8:	080082f9 	.word	0x080082f9
 80082bc:	080082f9 	.word	0x080082f9
 80082c0:	080082f9 	.word	0x080082f9
 80082c4:	080082f9 	.word	0x080082f9
 80082c8:	080082f9 	.word	0x080082f9
 80082cc:	080082f9 	.word	0x080082f9
 80082d0:	080082f9 	.word	0x080082f9
 80082d4:	080082f9 	.word	0x080082f9
 80082d8:	080082f9 	.word	0x080082f9
 80082dc:	080082f9 	.word	0x080082f9
 80082e0:	080082f9 	.word	0x080082f9
 80082e4:	080082f9 	.word	0x080082f9
 80082e8:	080082f9 	.word	0x080082f9
 80082ec:	080082f9 	.word	0x080082f9
 80082f0:	080082f9 	.word	0x080082f9
 80082f4:	080082f9 	.word	0x080082f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80082f8:	bf00      	nop
  }

  return (USBD_OK);
 80082fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop

08008308 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	4805      	ldr	r0, [pc, #20]	; (800832c <CDC_Receive_FS+0x24>)
 8008316:	f7fe fe46 	bl	8006fa6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800831a:	4804      	ldr	r0, [pc, #16]	; (800832c <CDC_Receive_FS+0x24>)
 800831c:	f7fe fe85 	bl	800702a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008320:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20000480 	.word	0x20000480

08008330 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008340:	4b0d      	ldr	r3, [pc, #52]	; (8008378 <CDC_Transmit_FS+0x48>)
 8008342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008346:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008352:	2301      	movs	r3, #1
 8008354:	e00b      	b.n	800836e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008356:	887b      	ldrh	r3, [r7, #2]
 8008358:	461a      	mov	r2, r3
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	4806      	ldr	r0, [pc, #24]	; (8008378 <CDC_Transmit_FS+0x48>)
 800835e:	f7fe fe09 	bl	8006f74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008362:	4805      	ldr	r0, [pc, #20]	; (8008378 <CDC_Transmit_FS+0x48>)
 8008364:	f7fe fe32 	bl	8006fcc <USBD_CDC_TransmitPacket>
 8008368:	4603      	mov	r3, r0
 800836a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800836c:	7bfb      	ldrb	r3, [r7, #15]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000480 	.word	0x20000480

0800837c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	6039      	str	r1, [r7, #0]
 8008386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2212      	movs	r2, #18
 800838c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800838e:	4b03      	ldr	r3, [pc, #12]	; (800839c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	bc80      	pop	{r7}
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	2000014c 	.word	0x2000014c

080083a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	6039      	str	r1, [r7, #0]
 80083aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	2204      	movs	r2, #4
 80083b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083b2:	4b03      	ldr	r3, [pc, #12]	; (80083c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	20000160 	.word	0x20000160

080083c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	6039      	str	r1, [r7, #0]
 80083ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d105      	bne.n	80083e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	4907      	ldr	r1, [pc, #28]	; (80083f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80083da:	4808      	ldr	r0, [pc, #32]	; (80083fc <USBD_FS_ProductStrDescriptor+0x38>)
 80083dc:	f7ff fe0c 	bl	8007ff8 <USBD_GetString>
 80083e0:	e004      	b.n	80083ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	4904      	ldr	r1, [pc, #16]	; (80083f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80083e6:	4805      	ldr	r0, [pc, #20]	; (80083fc <USBD_FS_ProductStrDescriptor+0x38>)
 80083e8:	f7ff fe06 	bl	8007ff8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083ec:	4b02      	ldr	r3, [pc, #8]	; (80083f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000f14 	.word	0x20000f14
 80083fc:	08008bd4 	.word	0x08008bd4

08008400 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	6039      	str	r1, [r7, #0]
 800840a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	4904      	ldr	r1, [pc, #16]	; (8008420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008410:	4804      	ldr	r0, [pc, #16]	; (8008424 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008412:	f7ff fdf1 	bl	8007ff8 <USBD_GetString>
  return USBD_StrDesc;
 8008416:	4b02      	ldr	r3, [pc, #8]	; (8008420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20000f14 	.word	0x20000f14
 8008424:	08008bec 	.word	0x08008bec

08008428 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	6039      	str	r1, [r7, #0]
 8008432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	221a      	movs	r2, #26
 8008438:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800843a:	f000 f843 	bl	80084c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800843e:	4b02      	ldr	r3, [pc, #8]	; (8008448 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20000164 	.word	0x20000164

0800844c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	6039      	str	r1, [r7, #0]
 8008456:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d105      	bne.n	800846a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	4907      	ldr	r1, [pc, #28]	; (8008480 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008462:	4808      	ldr	r0, [pc, #32]	; (8008484 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008464:	f7ff fdc8 	bl	8007ff8 <USBD_GetString>
 8008468:	e004      	b.n	8008474 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	4904      	ldr	r1, [pc, #16]	; (8008480 <USBD_FS_ConfigStrDescriptor+0x34>)
 800846e:	4805      	ldr	r0, [pc, #20]	; (8008484 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008470:	f7ff fdc2 	bl	8007ff8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008474:	4b02      	ldr	r3, [pc, #8]	; (8008480 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20000f14 	.word	0x20000f14
 8008484:	08008c00 	.word	0x08008c00

08008488 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d105      	bne.n	80084a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	4907      	ldr	r1, [pc, #28]	; (80084bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800849e:	4808      	ldr	r0, [pc, #32]	; (80084c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084a0:	f7ff fdaa 	bl	8007ff8 <USBD_GetString>
 80084a4:	e004      	b.n	80084b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	4904      	ldr	r1, [pc, #16]	; (80084bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084aa:	4805      	ldr	r0, [pc, #20]	; (80084c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084ac:	f7ff fda4 	bl	8007ff8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084b0:	4b02      	ldr	r3, [pc, #8]	; (80084bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000f14 	.word	0x20000f14
 80084c0:	08008c0c 	.word	0x08008c0c

080084c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084ca:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <Get_SerialNum+0x44>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084d0:	4b0e      	ldr	r3, [pc, #56]	; (800850c <Get_SerialNum+0x48>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084d6:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <Get_SerialNum+0x4c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4413      	add	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d009      	beq.n	80084fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084ea:	2208      	movs	r2, #8
 80084ec:	4909      	ldr	r1, [pc, #36]	; (8008514 <Get_SerialNum+0x50>)
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 f814 	bl	800851c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084f4:	2204      	movs	r2, #4
 80084f6:	4908      	ldr	r1, [pc, #32]	; (8008518 <Get_SerialNum+0x54>)
 80084f8:	68b8      	ldr	r0, [r7, #8]
 80084fa:	f000 f80f 	bl	800851c <IntToUnicode>
  }
}
 80084fe:	bf00      	nop
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	1ffff7e8 	.word	0x1ffff7e8
 800850c:	1ffff7ec 	.word	0x1ffff7ec
 8008510:	1ffff7f0 	.word	0x1ffff7f0
 8008514:	20000166 	.word	0x20000166
 8008518:	20000176 	.word	0x20000176

0800851c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	4613      	mov	r3, r2
 8008528:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800852e:	2300      	movs	r3, #0
 8008530:	75fb      	strb	r3, [r7, #23]
 8008532:	e027      	b.n	8008584 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	0f1b      	lsrs	r3, r3, #28
 8008538:	2b09      	cmp	r3, #9
 800853a:	d80b      	bhi.n	8008554 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	0f1b      	lsrs	r3, r3, #28
 8008540:	b2da      	uxtb	r2, r3
 8008542:	7dfb      	ldrb	r3, [r7, #23]
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	4619      	mov	r1, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	440b      	add	r3, r1
 800854c:	3230      	adds	r2, #48	; 0x30
 800854e:	b2d2      	uxtb	r2, r2
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	e00a      	b.n	800856a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	0f1b      	lsrs	r3, r3, #28
 8008558:	b2da      	uxtb	r2, r3
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	4619      	mov	r1, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	440b      	add	r3, r1
 8008564:	3237      	adds	r2, #55	; 0x37
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008570:	7dfb      	ldrb	r3, [r7, #23]
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	3301      	adds	r3, #1
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	4413      	add	r3, r2
 800857a:	2200      	movs	r2, #0
 800857c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800857e:	7dfb      	ldrb	r3, [r7, #23]
 8008580:	3301      	adds	r3, #1
 8008582:	75fb      	strb	r3, [r7, #23]
 8008584:	7dfa      	ldrb	r2, [r7, #23]
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	429a      	cmp	r2, r3
 800858a:	d3d3      	bcc.n	8008534 <IntToUnicode+0x18>
  }
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	371c      	adds	r7, #28
 8008592:	46bd      	mov	sp, r7
 8008594:	bc80      	pop	{r7}
 8008596:	4770      	bx	lr

08008598 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a0d      	ldr	r2, [pc, #52]	; (80085dc <HAL_PCD_MspInit+0x44>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d113      	bne.n	80085d2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80085aa:	4b0d      	ldr	r3, [pc, #52]	; (80085e0 <HAL_PCD_MspInit+0x48>)
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	4a0c      	ldr	r2, [pc, #48]	; (80085e0 <HAL_PCD_MspInit+0x48>)
 80085b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085b4:	61d3      	str	r3, [r2, #28]
 80085b6:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <HAL_PCD_MspInit+0x48>)
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80085c2:	2200      	movs	r2, #0
 80085c4:	2100      	movs	r1, #0
 80085c6:	2014      	movs	r0, #20
 80085c8:	f7f8 fdad 	bl	8001126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80085cc:	2014      	movs	r0, #20
 80085ce:	f7f8 fdc6 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80085d2:	bf00      	nop
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	40005c00 	.word	0x40005c00
 80085e0:	40021000 	.word	0x40021000

080085e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80085f8:	4619      	mov	r1, r3
 80085fa:	4610      	mov	r0, r2
 80085fc:	f7fe fdcb 	bl	8007196 <USBD_LL_SetupStage>
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	440b      	add	r3, r1
 8008628:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	4619      	mov	r1, r3
 8008632:	f7fe fdfd 	bl	8007230 <USBD_LL_DataOutStage>
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008650:	78fa      	ldrb	r2, [r7, #3]
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	4613      	mov	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	00db      	lsls	r3, r3, #3
 800865c:	440b      	add	r3, r1
 800865e:	333c      	adds	r3, #60	; 0x3c
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	78fb      	ldrb	r3, [r7, #3]
 8008664:	4619      	mov	r1, r3
 8008666:	f7fe fe54 	bl	8007312 <USBD_LL_DataInStage>
}
 800866a:	bf00      	nop
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008680:	4618      	mov	r0, r3
 8008682:	f7fe ff64 	bl	800754e <USBD_LL_SOF>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008696:	2301      	movs	r3, #1
 8008698:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d001      	beq.n	80086a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80086a2:	f7f8 fb09 	bl	8000cb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086ac:	7bfa      	ldrb	r2, [r7, #15]
 80086ae:	4611      	mov	r1, r2
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fe ff14 	bl	80074de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fe fecd 	bl	800745c <USBD_LL_Reset>
}
 80086c2:	bf00      	nop
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe ff0e 	bl	80074fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086e8:	4b04      	ldr	r3, [pc, #16]	; (80086fc <HAL_PCD_SuspendCallback+0x30>)
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	4a03      	ldr	r2, [pc, #12]	; (80086fc <HAL_PCD_SuspendCallback+0x30>)
 80086ee:	f043 0306 	orr.w	r3, r3, #6
 80086f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086f4:	bf00      	nop
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	e000ed00 	.word	0xe000ed00

08008700 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe ff08 	bl	8007524 <USBD_LL_Resume>
}
 8008714:	bf00      	nop
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008724:	4a28      	ldr	r2, [pc, #160]	; (80087c8 <USBD_LL_Init+0xac>)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a26      	ldr	r2, [pc, #152]	; (80087c8 <USBD_LL_Init+0xac>)
 8008730:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008734:	4b24      	ldr	r3, [pc, #144]	; (80087c8 <USBD_LL_Init+0xac>)
 8008736:	4a25      	ldr	r2, [pc, #148]	; (80087cc <USBD_LL_Init+0xb0>)
 8008738:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800873a:	4b23      	ldr	r3, [pc, #140]	; (80087c8 <USBD_LL_Init+0xac>)
 800873c:	2208      	movs	r2, #8
 800873e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008740:	4b21      	ldr	r3, [pc, #132]	; (80087c8 <USBD_LL_Init+0xac>)
 8008742:	2202      	movs	r2, #2
 8008744:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008746:	4b20      	ldr	r3, [pc, #128]	; (80087c8 <USBD_LL_Init+0xac>)
 8008748:	2200      	movs	r2, #0
 800874a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800874c:	4b1e      	ldr	r3, [pc, #120]	; (80087c8 <USBD_LL_Init+0xac>)
 800874e:	2200      	movs	r2, #0
 8008750:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008752:	4b1d      	ldr	r3, [pc, #116]	; (80087c8 <USBD_LL_Init+0xac>)
 8008754:	2200      	movs	r2, #0
 8008756:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008758:	481b      	ldr	r0, [pc, #108]	; (80087c8 <USBD_LL_Init+0xac>)
 800875a:	f7f8 fee7 	bl	800152c <HAL_PCD_Init>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008764:	f7f8 faa8 	bl	8000cb8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800876e:	2318      	movs	r3, #24
 8008770:	2200      	movs	r2, #0
 8008772:	2100      	movs	r1, #0
 8008774:	f7fa fb5d 	bl	8002e32 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800877e:	2358      	movs	r3, #88	; 0x58
 8008780:	2200      	movs	r2, #0
 8008782:	2180      	movs	r1, #128	; 0x80
 8008784:	f7fa fb55 	bl	8002e32 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800878e:	23c0      	movs	r3, #192	; 0xc0
 8008790:	2200      	movs	r2, #0
 8008792:	2181      	movs	r1, #129	; 0x81
 8008794:	f7fa fb4d 	bl	8002e32 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800879e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80087a2:	2200      	movs	r2, #0
 80087a4:	2101      	movs	r1, #1
 80087a6:	f7fa fb44 	bl	8002e32 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087b4:	2200      	movs	r2, #0
 80087b6:	2182      	movs	r1, #130	; 0x82
 80087b8:	f7fa fb3b 	bl	8002e32 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20001114 	.word	0x20001114
 80087cc:	40005c00 	.word	0x40005c00

080087d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7f8 ffab 	bl	8001742 <HAL_PCD_Start>
 80087ec:	4603      	mov	r3, r0
 80087ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 f94e 	bl	8008a94 <USBD_Get_USB_Status>
 80087f8:	4603      	mov	r3, r0
 80087fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	4608      	mov	r0, r1
 8008810:	4611      	mov	r1, r2
 8008812:	461a      	mov	r2, r3
 8008814:	4603      	mov	r3, r0
 8008816:	70fb      	strb	r3, [r7, #3]
 8008818:	460b      	mov	r3, r1
 800881a:	70bb      	strb	r3, [r7, #2]
 800881c:	4613      	mov	r3, r2
 800881e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800882e:	78bb      	ldrb	r3, [r7, #2]
 8008830:	883a      	ldrh	r2, [r7, #0]
 8008832:	78f9      	ldrb	r1, [r7, #3]
 8008834:	f7f9 f925 	bl	8001a82 <HAL_PCD_EP_Open>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 f928 	bl	8008a94 <USBD_Get_USB_Status>
 8008844:	4603      	mov	r3, r0
 8008846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008848:	7bbb      	ldrb	r3, [r7, #14]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f7f9 f96c 	bl	8001b4e <HAL_PCD_EP_Close>
 8008876:	4603      	mov	r3, r0
 8008878:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	4618      	mov	r0, r3
 800887e:	f000 f909 	bl	8008a94 <USBD_Get_USB_Status>
 8008882:	4603      	mov	r3, r0
 8008884:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008886:	7bbb      	ldrb	r3, [r7, #14]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088aa:	78fa      	ldrb	r2, [r7, #3]
 80088ac:	4611      	mov	r1, r2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7f9 fa2c 	bl	8001d0c <HAL_PCD_EP_SetStall>
 80088b4:	4603      	mov	r3, r0
 80088b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 f8ea 	bl	8008a94 <USBD_Get_USB_Status>
 80088c0:	4603      	mov	r3, r0
 80088c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	460b      	mov	r3, r1
 80088d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088e8:	78fa      	ldrb	r2, [r7, #3]
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7f9 fa6d 	bl	8001dcc <HAL_PCD_EP_ClrStall>
 80088f2:	4603      	mov	r3, r0
 80088f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 f8cb 	bl	8008a94 <USBD_Get_USB_Status>
 80088fe:	4603      	mov	r3, r0
 8008900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008902:	7bbb      	ldrb	r3, [r7, #14]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800891e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008924:	2b00      	cmp	r3, #0
 8008926:	da0c      	bge.n	8008942 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008928:	78fb      	ldrb	r3, [r7, #3]
 800892a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	4613      	mov	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	00db      	lsls	r3, r3, #3
 800893a:	440b      	add	r3, r1
 800893c:	3302      	adds	r3, #2
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	e00b      	b.n	800895a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008942:	78fb      	ldrb	r3, [r7, #3]
 8008944:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008948:	68f9      	ldr	r1, [r7, #12]
 800894a:	4613      	mov	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	00db      	lsls	r3, r3, #3
 8008952:	440b      	add	r3, r1
 8008954:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008958:	781b      	ldrb	r3, [r3, #0]
  }
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	bc80      	pop	{r7}
 8008962:	4770      	bx	lr

08008964 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800897e:	78fa      	ldrb	r2, [r7, #3]
 8008980:	4611      	mov	r1, r2
 8008982:	4618      	mov	r0, r3
 8008984:	f7f9 f858 	bl	8001a38 <HAL_PCD_SetAddress>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f880 	bl	8008a94 <USBD_Get_USB_Status>
 8008994:	4603      	mov	r3, r0
 8008996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008998:	7bbb      	ldrb	r3, [r7, #14]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b086      	sub	sp, #24
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	607a      	str	r2, [r7, #4]
 80089ac:	461a      	mov	r2, r3
 80089ae:	460b      	mov	r3, r1
 80089b0:	72fb      	strb	r3, [r7, #11]
 80089b2:	4613      	mov	r3, r2
 80089b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089c4:	893b      	ldrh	r3, [r7, #8]
 80089c6:	7af9      	ldrb	r1, [r7, #11]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	f7f9 f95c 	bl	8001c86 <HAL_PCD_EP_Transmit>
 80089ce:	4603      	mov	r3, r0
 80089d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 f85d 	bl	8008a94 <USBD_Get_USB_Status>
 80089da:	4603      	mov	r3, r0
 80089dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089de:	7dbb      	ldrb	r3, [r7, #22]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	607a      	str	r2, [r7, #4]
 80089f2:	461a      	mov	r2, r3
 80089f4:	460b      	mov	r3, r1
 80089f6:	72fb      	strb	r3, [r7, #11]
 80089f8:	4613      	mov	r3, r2
 80089fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a0a:	893b      	ldrh	r3, [r7, #8]
 8008a0c:	7af9      	ldrb	r1, [r7, #11]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	f7f9 f8e5 	bl	8001bde <HAL_PCD_EP_Receive>
 8008a14:	4603      	mov	r3, r0
 8008a16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 f83a 	bl	8008a94 <USBD_Get_USB_Status>
 8008a20:	4603      	mov	r3, r0
 8008a22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a24:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a40:	78fa      	ldrb	r2, [r7, #3]
 8008a42:	4611      	mov	r1, r2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7f9 f907 	bl	8001c58 <HAL_PCD_EP_GetRxCount>
 8008a4a:	4603      	mov	r3, r0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a5c:	4b02      	ldr	r3, [pc, #8]	; (8008a68 <USBD_static_malloc+0x14>)
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bc80      	pop	{r7}
 8008a66:	4770      	bx	lr
 8008a68:	200001a0 	.word	0x200001a0

08008a6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]

}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bc80      	pop	{r7}
 8008a7c:	4770      	bx	lr

08008a7e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b083      	sub	sp, #12
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bc80      	pop	{r7}
 8008a92:	4770      	bx	lr

08008a94 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d817      	bhi.n	8008ad8 <USBD_Get_USB_Status+0x44>
 8008aa8:	a201      	add	r2, pc, #4	; (adr r2, 8008ab0 <USBD_Get_USB_Status+0x1c>)
 8008aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aae:	bf00      	nop
 8008ab0:	08008ac1 	.word	0x08008ac1
 8008ab4:	08008ac7 	.word	0x08008ac7
 8008ab8:	08008acd 	.word	0x08008acd
 8008abc:	08008ad3 	.word	0x08008ad3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac4:	e00b      	b.n	8008ade <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8008aca:	e008      	b.n	8008ade <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008acc:	2301      	movs	r3, #1
 8008ace:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad0:	e005      	b.n	8008ade <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad6:	e002      	b.n	8008ade <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ad8:	2302      	movs	r3, #2
 8008ada:	73fb      	strb	r3, [r7, #15]
    break;
 8008adc:	bf00      	nop
  }
  return usb_status;
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop

08008aec <__libc_init_array>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	2600      	movs	r6, #0
 8008af0:	4d0c      	ldr	r5, [pc, #48]	; (8008b24 <__libc_init_array+0x38>)
 8008af2:	4c0d      	ldr	r4, [pc, #52]	; (8008b28 <__libc_init_array+0x3c>)
 8008af4:	1b64      	subs	r4, r4, r5
 8008af6:	10a4      	asrs	r4, r4, #2
 8008af8:	42a6      	cmp	r6, r4
 8008afa:	d109      	bne.n	8008b10 <__libc_init_array+0x24>
 8008afc:	f000 f822 	bl	8008b44 <_init>
 8008b00:	2600      	movs	r6, #0
 8008b02:	4d0a      	ldr	r5, [pc, #40]	; (8008b2c <__libc_init_array+0x40>)
 8008b04:	4c0a      	ldr	r4, [pc, #40]	; (8008b30 <__libc_init_array+0x44>)
 8008b06:	1b64      	subs	r4, r4, r5
 8008b08:	10a4      	asrs	r4, r4, #2
 8008b0a:	42a6      	cmp	r6, r4
 8008b0c:	d105      	bne.n	8008b1a <__libc_init_array+0x2e>
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b14:	4798      	blx	r3
 8008b16:	3601      	adds	r6, #1
 8008b18:	e7ee      	b.n	8008af8 <__libc_init_array+0xc>
 8008b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b1e:	4798      	blx	r3
 8008b20:	3601      	adds	r6, #1
 8008b22:	e7f2      	b.n	8008b0a <__libc_init_array+0x1e>
 8008b24:	08008c30 	.word	0x08008c30
 8008b28:	08008c30 	.word	0x08008c30
 8008b2c:	08008c30 	.word	0x08008c30
 8008b30:	08008c34 	.word	0x08008c34

08008b34 <memset>:
 8008b34:	4603      	mov	r3, r0
 8008b36:	4402      	add	r2, r0
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d100      	bne.n	8008b3e <memset+0xa>
 8008b3c:	4770      	bx	lr
 8008b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b42:	e7f9      	b.n	8008b38 <memset+0x4>

08008b44 <_init>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	bf00      	nop
 8008b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4a:	bc08      	pop	{r3}
 8008b4c:	469e      	mov	lr, r3
 8008b4e:	4770      	bx	lr

08008b50 <_fini>:
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	bf00      	nop
 8008b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b56:	bc08      	pop	{r3}
 8008b58:	469e      	mov	lr, r3
 8008b5a:	4770      	bx	lr
